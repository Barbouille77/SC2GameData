/// # Actor Add Orient Update
///
/// Causes StatusSet actor messages to be sent to every on screen actor unit every frame. The status value is based on the facing of the unit.
native void ActorAddOrientUpdate(
    string statusName,              /// * StatusName         :: string
    int divisions                   /// * Divisions          :: int
);

/// # Release Unit
///
/// Releases a unit by setting it back to idle.
native void AIReleaseUnit(
    unit inUnit                     /// * Unit               :: unit
);

/// # Get Scout
///
/// Returns a unit that will be the next scout for a player.
/// The Previous Unit parameter is optional (pass null to it if it is undesired).
/// If no Previous Unit is specified, then this will always return a new scout.
/// If Previous Unit is specified, then this will return that unit, unless there is a better unit type available for scouting, in which case it will return a new unit of that type.
native unit AIGetScout(
    int player,                     /// * Player             :: int
    int indexSlot,                  /// * Index Slot         :: int
    unit previousUnit               /// * Previous Unit      :: unit
);

/// # Remove Bank Backup
///
/// Removes the backup bank with specific backup id for the associated playerid
native void BankBackupRemove(
    bank backupBank,                /// * Backup Bank        :: bank
    int backupid,                   /// * Backup Bank Id     :: int
    int playerid                    /// * Player Id          :: int
);

/// # Get Bank Backup Id
///
/// Retrieve the bank backup id associated with the backup bank
native int BankBackupGetId(
    bank backupBank                 /// * Backup Bank        :: bank
);

/// # Get Bank Backup Latest Id
///
/// Retrieve the latest bank backup id associated with the backup bank
native int BankBackupGetLatestId(
    bank backupBank                 /// * Backup Bank        :: bank
);

/// # Restore Bank Backup
///
/// Restores the original bank with the contents from its backup bank with backup id if it exists, for the particular player. The backup bank will always look for your passed in bank name with an appended on "_backup_#" string.
native void BankRestore(
    bank originalBank,              /// * Original Bank      :: bank
    int playerId,                   /// * Player             :: int
    int backupId                    /// * Backup Id          :: int
);

/// # Backup Bank
///
/// Creates a backup of the passed in bank and saves it into another bank with the same name appended with a "_backup_#" string in a backup directory where your banks are saved. This can only be called from either the MapInit event or Generic event.
native void BankBackup(
    bank toBackUp,                  /// * To Backup          :: bank
    int playerId                    /// * PlayerId           :: int
);

/// # Picked Bank Backup
///
/// The current bank backup within the current bank backup iteration.
native bank BankBackupLoopCurrent();

/// # Active Data Conversation Line
///
/// Returns the active line in the running data conversation
///
/// # Returns `convline`
native string ConversationDataActiveLine();

/// # Add Global Cutscene Filter
///
/// Adds a new filter for all cutscenes.
/// Any nodes with a non-empty filter property that does not match any filter value will be filtered out of your cutscene.
/// Newly created cutscenes will use this filter.
native void CutsceneAddGlobalFilter(
    string inFilter                 /// * Filter             :: string
);

/// # Add Cutscene Filter
///
/// Adds a new filter for a cutscene.
/// Any nodes with a non-empty filter property that does not match any filter value will be filtered out of your cutscene.
native void CutsceneAddFilter(
    int inCutscene,                 /// * Cutscene           :: Preset<libNtve_ge_Cutscene>
    string inFilter                 /// * Filter             :: string
);

/// # Remove Global Cutscene Filter
///
/// Removes the filter for all cutscenes.
/// Any nodes with a non-empty filter property that does not match this value will be filtered out of your cutscene.
native void CutsceneRemoveGlobalFilter(
    string inFilter                 /// * Filter             :: string
);

/// # Remove Cutscene Filter
///
/// Removes the filter for a cutscene.
/// Any nodes with a non-empty filter property that does not match this value will be filtered out of your cutscene.
native void CutsceneRemoveFilter(
    int inCutscene,                 /// * Cutscene           :: Preset<libNtve_ge_Cutscene>
    string inFilter                 /// * Filter             :: string
);

/// # Clear Global Cutscene Filters
///
/// Clears all global cutscene filters.
native void CutsceneClearGlobalFilters();

/// # Clear Cutscene Filter
///
/// Removes all filters on the given cutscene.
native void CutsceneClearFilters(
    int inCutscene                  /// * Cutscene           :: Preset<libNtve_ge_Cutscene>
);

/// # Create Cutscene
///
/// Cutscenes are built using the Cutscene Editor and saved to .SC2Cutscene files.
/// They can describe a complicated cinematic or a simple conversation.
/// WARNING: The Sound action Play Sound Scene File also accepts .SC2Cutscene files, but old-style scene files are not compatible with this action. 
///
/// # Returns `Preset<libNtve_ge_Cutscene>`
native int CutsceneCreateNoPosition(
    string inFilePath,              /// * File Path          :: filepath
    playergroup players,            /// * Players            :: playergroup
    bool inAutoPlay                 /// * AutoPlay           :: bool
);

/// # Show/Hide Cutscene
///
/// Shows or hides a cutscene.
/// When hidden, the cutscene will continue to advance and fire events, but it will not be visible nor will it play any sounds.
native void CutsceneShow(
    int inCutscene,                 /// * Cutscene           :: Preset<libNtve_ge_Cutscene>
    bool inShow                     /// * Show/Hide          :: Preset<libNtve_ge_ShowHideOption>
);

/// # Cutscene Fade
///
/// Cutscene Fading allows you to manipulate the same fade system that Cutscenes use.
/// For example, a cutscene can Fade Out the scene, then you can fade back in with this trigger.
/// This is separate from Cinematic Fade, which only fades the game world.
native void CutsceneFade(
    bool fadeIn,                    /// * Fade In            :: Preset<libNtve_ge_FadeOption>
    fixed duration,                 /// * Duration           :: fixed
    color inColor,                  /// * Color              :: color
    fixed amount,                   /// * Amount             :: fixed
    playergroup players,            /// * Players            :: playergroup
    bool inWaitUntilDone            /// * Wait Until Done    :: Preset<libNtve_ge_Trigger_Wait_Option>
);

/// # Convert DateTime To String
///
/// Converts a DateTime to a colon delimited string of numbers.
native string DateTimeToString(
    datetime dateTime               /// * DateTime           :: datetime
);

/// # Convert String To DateTime
///
/// Converts a colon delimited string of numbers to a DateTime. Returns Jan 1, 1970 for an invalid string.
native datetime StringToDateTime(
    string inString                 /// * String             :: string
);

/// # Set Graph Minimum X Visible
///
/// Set the minimum X data point value that is visible for a graph
native void DialogControlSetMinXVisible(
    int graph,                      /// * Graph              :: control
    playergroup players,            /// * Players            :: playergroup
    fixed minXValue                 /// * MinXValue          :: fixed
);

/// # Get Graph Minimum X Value
///
/// Get the minimum X data point value for a graph
native fixed DialogControlGetMinXValue(
    int graph,                      /// * Graph              :: control
    playergroup players             /// * Players            :: playergroup
);

/// # Set Graph Maximum X Visible
///
/// Set the maximum X data point value that is visible for a graph
native void DialogControlSetMaxXVisible(
    int graph,                      /// * Graph              :: control
    playergroup players,            /// * Players            :: playergroup
    fixed maxXValue                 /// * MaxXValue          :: fixed
);

/// # Get Graph Maximum X Value
///
/// Get the maximum X data point value for a graph
native fixed DialogControlGetMaxXValue(
    int graph,                      /// * Graph              :: control
    playergroup players             /// * Players            :: playergroup
);

/// # Set Graph Minimum Y Visible
///
/// Set the minimum Y data point value that is visible for a graph
native void DialogControlSetMinYVisible(
    int graph,                      /// * Graph              :: control
    playergroup players,            /// * Players            :: playergroup
    fixed minYValue                 /// * MinYValue          :: fixed
);

/// # Get Graph Minimum Y Value
///
/// Get the minimum Y data point value for a graph
native fixed DialogControlGetMinYValue(
    int graph,                      /// * Graph              :: control
    playergroup players             /// * Players            :: playergroup
);

/// # Set Graph Maximum Y Visible
///
/// Set the maximum Y data point value that is visible for a graph
native void DialogControlSetMaxYVisible(
    int graph,                      /// * Graph              :: control
    playergroup players,            /// * Players            :: playergroup
    fixed maxYValue                 /// * MaxYValue          :: fixed
);

/// # Get Graph Maximum Y Value
///
/// Get the maximum Y data point value for a graph
native fixed DialogControlGetMaxYValue(
    int graph,                      /// * Graph              :: control
    playergroup players             /// * Players            :: playergroup
);

/// # Triggering Effect Impact Unit
native unit EventPlayerEffectUsedUnitImpact();

/// # Triggering Effect Launch Unit
native unit EventPlayerEffectUsedUnitLaunch();

/// # Game Set Quit On Quit Button
///
/// Used to turn on and off the behavior of the game automatically quitting when the quit button is pressed.
/// Only usable by official blizzard maps.
native void GameSetQuitOnQuitButton(
    bool enable                     /// * Enable             :: bool
);

/// # Picked Integer Deprecated
///
/// Returns the picked integer.
/// This function is only for use with the "Pick Each Integer" action. It will do nothing when used outside of a pick each integer loop.
native int IntLoopCurrentDeprecated();

/// # Override Player Option
///
/// Setting the value to "No Value" will clear the override and return the value to whatever the player had selected previously. If an override value is set, option UI will be disabled for the player. Overrides are removed when leaving a game.
native void PlayerOptionOverride(
    int p,                          /// * Player             :: int
    string option,                  /// * Option             :: gameoption
    string value                    /// * Value              :: gameoptionvalue
);

/// # Picked Player Deprecated
///
/// Returns an integer value equal to the iterating value inside of a "Pick Each Player In Player Group" action.
/// This function will return 0 if used outisde of a pick each player in group loop.
native int PlayerGroupLoopCurrentDeprecated();

/// # Control Group Units
native unitgroup UnitControlGroup(
    int player,                     /// * Player             :: int
    int controlGroup                /// * Control Group      :: int
);

/// # Enable/Disable Soundtrack Shuffle
///
/// Enables or disables cue and/or index shuffling for a soundtrack.
/// Index shuffling corresponds to the asset array in the sound data.
/// Cue shuffling corresponds to the array of sounds in each soundtrack data.
native void SoundtrackSetShuffle(
    playergroup players,            /// * Players            :: playergroup
    int category,                   /// * Category           :: Preset<libNtve_ge_SoundtrackCategory>
    bool cue,                       /// * Cue                :: Preset<libNtve_ge_Enable_Disable_Option>
    bool index                      /// * Index              :: Preset<libNtve_ge_Enable_Disable_Option>
);

/// # Create Stat Event
///
/// Blizzard only.
/// Creates a new stat event with the given name.
/// You can then add data to that state event before sending it to Battle.net.
///
/// # Returns `Preset<libNtve_ge_StatEvent>`
native int StatEventCreate(
    string eventName                /// * Event Name         :: string
);

/// # Add String Data to Stat Event
///
/// Blizzard only.
/// Adds the Key-Value pair to the Stat Event.
native void StatEventAddDataString(
    int statEvent,                  /// * Stat Event         :: Preset<libNtve_ge_StatEvent>
    string key,                     /// * Key                :: string
    string value                    /// * Value              :: string
);

/// # Add Integer Data to Stat Event
///
/// Blizzard only.
/// Adds the Key-Value pair to the Stat Event.
native void StatEventAddDataInt(
    int statEvent,                  /// * Stat Event         :: Preset<libNtve_ge_StatEvent>
    string key,                     /// * Key                :: string
    int value                       /// * Value              :: int
);

/// # Add Real Data to Stat Event
///
/// Blizzard only.
/// Adds the Key-Value pair to the Stat Event.
native void StatEventAddDataFixed(
    int statEvent,                  /// * Stat Event         :: Preset<libNtve_ge_StatEvent>
    string key,                     /// * Key                :: string
    fixed value                     /// * Value              :: fixed
);

/// # Send Stat Event
///
/// Blizzard only.
/// Sends the Stat Event to Battle.net.
/// The Stat Event is destroyed.
native void StatEventSend(
    int statEvent                   /// * Stat Event         :: Preset<libNtve_ge_StatEvent>
);

/// # Last Created Stat Event
///
/// Returns the last created Stat Event.
///
/// # Returns `Preset<libNtve_ge_StatEvent>`
native int StatEventLastCreated();

/// # Set Production Cap For Player
///
/// Use -1 to remove the cap of the production.
native void TechTreeSetProduceCap(
    int p,                          /// * Player             :: int
    string production,              /// * Production         :: anygamelink
    int cat,                        /// * Category           :: Preset<libNtve_ge_TechTreeCategory>
    int cap                         /// * Cap                :: int
);

/// # Production Cap For Player
native int TechTreeGetProduceCap(
    int p,                          /// * Player             :: int
    string production,              /// * Production         :: anygamelink
    int cat                         /// * Category           :: Preset<libNtve_ge_TechTreeCategory>
);

/// # Send Transmission For Player
///
/// Sends a transmission with sound and an optional portrait actor to the specified players from a source unit or model.
/// Use "Last Sent Transmission" to refer to this transmission after it has begun.
///
/// # Returns `transmission`
native int TransmissionSendForPlayerSelect(
    playergroup Players,            /// * Players            :: playergroup
    transmissionsource Source,      /// * Source             :: transmissionsource
    int Target,                     /// * Portrait           :: portrait
    string portraitActor,           /// * Portrait Actor     :: string
    string PortraitAnim,            /// * Portrait Anim      :: modelanim
    soundlink Sound,                /// * Sound              :: soundlink
    text Speaker,                   /// * Name               :: text
    text Subtitle,                  /// * Message            :: text
    fixed Duration,                 /// * Duration           :: fixed
    int DurationType,               /// * DurationType       :: Preset<libNtve_ge_TransmissionDurationType>
    bool WaitUntilDone,             /// * WaitUntilDone      :: Preset<libNtve_ge_Trigger_Wait_Option>
    int player,                     /// * Player             :: int
    bool isSelect                   /// * Is Select          :: bool
);

/// # Hotkey Pressed
///
/// Returns the hotkey pressed.
/// Use in response to a "Hotkey Pressed" event.
///
/// # Returns `Preset<libNtve_ge_Key>`
native int EventHotkeyPressed();

/// # Set Minimap Bounds
///
/// Sets the Minimap Bounds to the specified Region.
native void UISetMiniMapBounds(
    playergroup players,            /// * Players            :: playergroup
    region bounds                   /// * Bounds             :: region
);

/// # Unit Order Get Progress
///
/// Get the progress of the current order for the given unit.
native fixed UnitOrderGetProgress(
    unit inUnit                     /// * Unit               :: unit
);

/// # Duration Of Behavior On Unit
///
/// Gets a behavior duration on a unit.
native fixed UnitBehaviorDurationTotal(
    unit inUnit,                    /// * Unit               :: unit
    string behavior                 /// * Behavior           :: gamelink<Behavior>
);

/// # Picked Unit Deprecated
///
/// Returns the current unit picked in a "Pick Each Unit In Unit Group" loop.
native unit UnitGroupLoopCurrentDeprecated();

