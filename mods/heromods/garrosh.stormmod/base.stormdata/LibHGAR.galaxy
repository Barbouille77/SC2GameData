include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"

include "LibHGAR_h"

//--------------------------------------------------------------------------------------------------
// Library: Garrosh
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libHGAR_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libAIAI_InitVariables();
    libUIUI_InitVariables();
}

// Variable Initialization
bool libHGAR_InitVariables_completed = false;

void libHGAR_InitVariables () {
    if (libHGAR_InitVariables_completed) {
        return;
    }

    libHGAR_InitVariables_completed = true;

    libHGAR_gv_garroshUI.lv_mainPanel = c_invalidDialogControlId;
    libHGAR_gv_garroshUI.lv_armorUpValueLabel = c_invalidDialogControlId;
}

// Functions
void libHGAR_gf_HeroGarroshIncrementHeroCountFunction () {
    // Automatic Variable Declarations
    // Implementation
    libHGAR_gv_heroGarroshTriggerRegistrationVariable += 1;
    if ((libHGAR_gv_heroGarroshTriggerRegistrationVariable == 1)) {
        TriggerEnable(libHGAR_gt_HeroGarroshWarlordsChallenge, true);
        TriggerEnable(libHGAR_gt_HeroGarroshWreckingBallCameraLock, true);
    }

}

void libHGAR_gf_HeroGarroshDecrementHeroCountFunction () {
    // Automatic Variable Declarations
    // Implementation
    libHGAR_gv_heroGarroshTriggerRegistrationVariable -= 1;
    if ((libHGAR_gv_heroGarroshTriggerRegistrationVariable < 0)) {
        libHGAR_gv_heroGarroshTriggerRegistrationVariable = 0;
    }

    if ((libHGAR_gv_heroGarroshTriggerRegistrationVariable == 0)) {
        TriggerEnable(libHGAR_gt_HeroGarroshWarlordsChallenge, false);
        TriggerEnable(libHGAR_gt_HeroGarroshWreckingBallCameraLock, false);
    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Misc Mod Initialization
//--------------------------------------------------------------------------------------------------
bool libHGAR_gt_HeroAIMiscModInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_RegisterSegregationTrigger(libCore_ge_SegregationTriggerTypes_HeroAIInitializeHeroTierData, libHGAR_gt_HeroAIAddToTierDataGarrosh);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHGAR_gt_HeroAIMiscModInitialization_Init () {
    libHGAR_gt_HeroAIMiscModInitialization = TriggerCreate("libHGAR_gt_HeroAIMiscModInitialization_Func");
    TriggerAddEventMapInit(libHGAR_gt_HeroAIMiscModInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Add To Tier Data - Garrosh
//--------------------------------------------------------------------------------------------------
bool libHGAR_gt_HeroAIAddToTierDataGarrosh_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "Garrosh");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHGAR_gt_HeroAIAddToTierDataGarrosh_Init () {
    libHGAR_gt_HeroAIAddToTierDataGarrosh = TriggerCreate("libHGAR_gt_HeroAIAddToTierDataGarrosh_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Garrosh - Player Setup
//--------------------------------------------------------------------------------------------------
bool libHGAR_gt_HeroGarroshPlayerSetup_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[libGame_gf_HeroSpawnPlayer()].lv_heroUnit) == "HeroGarrosh"))) {
            return false;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libHGAR_gt_HeroGarroshPlayerSetup_Init () {
    libHGAR_gt_HeroGarroshPlayerSetup = TriggerCreate("libHGAR_gt_HeroGarroshPlayerSetup_Func");
    libGame_gf_HeroSpawn(libHGAR_gt_HeroGarroshPlayerSetup);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Garrosh - Warlord's Challenge
//--------------------------------------------------------------------------------------------------
bool libHGAR_gt_HeroGarroshWarlordsChallenge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tauntedPlayers;
    unit lv_tauntedUnits;
    string lv_tauntedBehavior;
    unit lv_casterUnit;
    bool lv_tauntedUnitshaveBasicAttacks;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tauntedPlayers = UnitGetOwner(EventUnit());
    lv_tauntedUnits = EventUnit();
    lv_tauntedBehavior = EventUnitBehavior();
    lv_casterUnit = UnitBehaviorEffectUnit(lv_tauntedUnits, lv_tauntedBehavior, c_effectUnitCaster, 0);
    lv_tauntedUnitshaveBasicAttacks = UnitAbilityExists(EventUnit(), "attack");

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(lv_tauntedUnits, true);
    UnitCreateEffectUnit(lv_casterUnit, "GarroshWarlordsChallengeClearTargetOrders", lv_tauntedUnits);
    UnitIssueOrder(lv_tauntedUnits, OrderTargetingUnit(AbilityCommand("attack", 0), lv_casterUnit), c_orderQueueReplace);
    libGame_gf_PlayerHeroDisplacementCameraLock(lv_tauntedUnits, lv_tauntedBehavior);
    if ((UnitIsAlive(lv_tauntedUnits) == true) && (UnitTestState(lv_tauntedUnits, c_unitStateHallucination) == false) && (UnitHasBehavior2(lv_tauntedUnits, "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(lv_tauntedPlayers, libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI_TauntOverlay.StormCutscene", lv_tauntedBehavior);
    }

    while ((UnitHasBehavior2(lv_tauntedUnits, "GarroshWarlordsChallengeTaunted") == true)) {
        if (((OrderGetTargetType(UnitOrder(lv_tauntedUnits, 0)) != c_orderTargetUnit) || (OrderGetTargetUnit(UnitOrder(lv_tauntedUnits, 0)) != lv_casterUnit))) {
            UnitCreateEffectUnit(lv_casterUnit, "GarroshWarlordsChallengeClearTargetOrders", lv_tauntedUnits);
            if ((lv_tauntedUnitshaveBasicAttacks == true)) {
                UnitIssueOrder(lv_tauntedUnits, OrderTargetingUnit(AbilityCommand("attack", 0), lv_casterUnit), c_orderQueueReplace);
            }
            else {
                UnitCreateEffectUnit(lv_casterUnit, "ForceTargetToAttackCasterUnitScriptDummy", lv_tauntedUnits);
            }
        }

        Wait(0.0625, c_timeGame);
    }
    libNtve_gf_MakeUnitUncommandable(lv_tauntedUnits, false);
    if ((UnitTestState(lv_tauntedUnits, c_unitStateHallucination) == false) && (UnitHasBehavior2(lv_tauntedUnits, "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(lv_tauntedPlayers, "Cutscenes\\GameUI_SylvanasOverlay.StormCutscene", lv_tauntedBehavior);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libHGAR_gt_HeroGarroshWarlordsChallenge_Init () {
    libHGAR_gt_HeroGarroshWarlordsChallenge = TriggerCreate("libHGAR_gt_HeroGarroshWarlordsChallenge_Func");
    TriggerEnable(libHGAR_gt_HeroGarroshWarlordsChallenge, false);
    TriggerAddEventUnitBehaviorChange(libHGAR_gt_HeroGarroshWarlordsChallenge, null, "GarroshWarlordsChallengeTaunted", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Garrosh - Wrecking Ball - Camera Lock
//--------------------------------------------------------------------------------------------------
bool libHGAR_gt_HeroGarroshWreckingBallCameraLock_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    int lv_targetPlayer;
    int lv_itPlayer;
    fixed lv_vertOffset;
    fixed lv_horizOffset;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_targetUnit = EventUnit();
    lv_targetPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!(((lv_targetPlayer >= 1) && (lv_targetPlayer <= 10) && (lv_targetUnit == libGame_gv_players[lv_targetPlayer].lv_heroUnit) && (UnitIsAlive(lv_targetUnit) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_PlayerHeroDisplacementCameraLock(lv_targetUnit, EventUnitBehavior());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHGAR_gt_HeroGarroshWreckingBallCameraLock_Init () {
    libHGAR_gt_HeroGarroshWreckingBallCameraLock = TriggerCreate("libHGAR_gt_HeroGarroshWreckingBallCameraLock_Func");
    TriggerEnable(libHGAR_gt_HeroGarroshWreckingBallCameraLock, false);
    TriggerAddEventUnitBehaviorChange(libHGAR_gt_HeroGarroshWreckingBallCameraLock, null, "GarroshWreckingBallUnstoppable", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libHGAR_gt_HeroGarroshWreckingBallCameraLock, null, "GarroshWreckingBallEnemyDisplacement", c_unitBehaviorChangeActivate);
}

void libHGAR_InitTriggers () {
    libHGAR_gt_HeroAIMiscModInitialization_Init();
    libHGAR_gt_HeroAIAddToTierDataGarrosh_Init();
    libHGAR_gt_HeroGarroshPlayerSetup_Init();
    libHGAR_gt_HeroGarroshWarlordsChallenge_Init();
    libHGAR_gt_HeroGarroshWreckingBallCameraLock_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libHGAR_InitLib_completed = false;

void libHGAR_InitLib () {
    if (libHGAR_InitLib_completed) {
        return;
    }

    libHGAR_InitLib_completed = true;

    libHGAR_InitLibraries();
    libHGAR_InitVariables();
    libHGAR_InitTriggers();
}

