include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"
include "TriggerLibs/SupportLib"

include "LibHVAR_h"

//--------------------------------------------------------------------------------------------------
// Library: Varian
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libHVAR_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libAIAI_InitVariables();
    libUIUI_InitVariables();
    libSprt_InitVariables();
}

// Variable Initialization
bool libHVAR_InitVariables_completed = false;

void libHVAR_InitVariables () {
    if (libHVAR_InitVariables_completed) {
        return;
    }

    libHVAR_InitVariables_completed = true;

}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: #Include Varian Tactical AI
//--------------------------------------------------------------------------------------------------
include "StormTactical.galaxy"
include "VarianTactical.galaxy"

void libHVAR_InitCustomScript () {
}

// Functions
void libHVAR_gf_HeroVarianIncrementHeroCount () {
    // Automatic Variable Declarations
    // Implementation
    libHVAR_gv_heroVarianTriggerRegistrationCount += 1;
    if ((libHVAR_gv_heroVarianTriggerRegistrationCount == 1)) {
        TriggerEnable(libHVAR_gt_VarianHighKingsQuestHeroTakedown, true);
        TriggerEnable(libHVAR_gt_VarianHighKingsQuestRegenGlobeProc, true);
        TriggerEnable(libHVAR_gt_VarianParryBehaviorMonitor, true);
        TriggerEnable(libHVAR_gt_VarianVictoryRushTakedownReset, true);
        TriggerEnable(libHVAR_gt_VarianTargetTaunted, true);
        TriggerEnable(libHVAR_gt_VarianUIFloatingCombatTextParried, true);
    }

}

void libHVAR_gf_HeroVarianDecrementHeroCount () {
    // Automatic Variable Declarations
    // Implementation
    libHVAR_gv_heroVarianTriggerRegistrationCount -= 1;
    if ((libHVAR_gv_heroVarianTriggerRegistrationCount < 0)) {
        libHVAR_gv_heroVarianTriggerRegistrationCount = 0;
    }

    if ((libHVAR_gv_heroVarianTriggerRegistrationCount == 0)) {
        TriggerEnable(libHVAR_gt_VarianHighKingsQuestHeroTakedown, false);
        TriggerEnable(libHVAR_gt_VarianHighKingsQuestRegenGlobeProc, false);
        TriggerEnable(libHVAR_gt_VarianParryBehaviorMonitor, false);
        TriggerEnable(libHVAR_gt_VarianVictoryRushTakedownReset, false);
        TriggerEnable(libHVAR_gt_VarianTargetTaunted, false);
        TriggerEnable(libHVAR_gt_VarianUIFloatingCombatTextParried, false);
    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Misc Mod Initialization
//--------------------------------------------------------------------------------------------------
bool libHVAR_gt_HeroAIMiscModInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_RegisterSegregationTrigger(libCore_ge_SegregationTriggerTypes_HeroAIInitializeHeroTierData, libHVAR_gt_HeroAIAddToTierDataVarian);
    libCore_gf_RegisterSegregationTrigger(libCore_ge_SegregationTriggerTypes_HeroAIInitAbilities, libHVAR_gt_HeroAIInitAbilitiesVarian);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHVAR_gt_HeroAIMiscModInitialization_Init () {
    libHVAR_gt_HeroAIMiscModInitialization = TriggerCreate("libHVAR_gt_HeroAIMiscModInitialization_Func");
    TriggerAddEventMapInit(libHVAR_gt_HeroAIMiscModInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Add To Tier Data - Varian
//--------------------------------------------------------------------------------------------------
bool libHVAR_gt_HeroAIAddToTierDataVarian_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "Varian");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHVAR_gt_HeroAIAddToTierDataVarian_Init () {
    libHVAR_gt_HeroAIAddToTierDataVarian = TriggerCreate("libHVAR_gt_HeroAIAddToTierDataVarian_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Init Abilities - Varian
//--------------------------------------------------------------------------------------------------
bool libHVAR_gt_HeroAIInitAbilitiesVarian_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libCore_gv_segTriggerUnit) == "HeroVarian")) {
        libAIAI_gv_heroAIInitAbilitesHeroFound = true;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_hasMount = true;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_castAbility[0] = AbilityCommand("VarianLionsFang", 0);
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_abilityRange[0] = 7.5;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_castAbility[1] = AbilityCommand("VarianParry", 0);
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_castAbility[2] = AbilityCommand("VarianCharge", 0);
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_abilityRange[2] = 6.0;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_castAbility[3] = AbilityCommand("VarianTaunt", 0);
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_abilityRange[3] = 2.0;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_castAbility[4] = AbilityCommand("VarianColossusSmash", 0);
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_abilityRange[4] = 3.5;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libHVAR_gt_HeroAIInitAbilitiesVarian_Init () {
    libHVAR_gt_HeroAIInitAbilitiesVarian = TriggerCreate("libHVAR_gt_HeroAIInitAbilitiesVarian_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Varian - High King's Quest - Regen Globe Proc
//--------------------------------------------------------------------------------------------------
bool libHVAR_gt_VarianHighKingsQuestRegenGlobeProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_varianUnit;
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_varianUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_player = UnitGetOwner(lv_varianUnit);

    // Conditions
    if (testConds) {
        if (!((lv_player > 0))) {
            return false;
        }

        if (!((lv_player <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_player, "VarianHighKingsQuestQuest") == true))) {
            return false;
        }

        if (!((UnitBehaviorCount(lv_varianUnit, "VarianHighKingsQuestRegenGlobeQuestToken") < CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "VarianHighKingsQuestRegenGlobeQuestToken", "Max", 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_varianUnit, "VarianHighKingsQuestModifyRegenGlobeQuestToken", lv_varianUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHVAR_gt_VarianHighKingsQuestRegenGlobeProc_Init () {
    libHVAR_gt_VarianHighKingsQuestRegenGlobeProc = TriggerCreate("libHVAR_gt_VarianHighKingsQuestRegenGlobeProc_Func");
    TriggerEnable(libHVAR_gt_VarianHighKingsQuestRegenGlobeProc, false);
    TriggerAddEventPlayerEffectUsed(libHVAR_gt_VarianHighKingsQuestRegenGlobeProc, c_playerAny, "RegenGlobeImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Varian - High King's Quest - Hero Takedown
//--------------------------------------------------------------------------------------------------
bool libHVAR_gt_VarianHighKingsQuestHeroTakedown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingPlayer;
    unit lv_varianUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_killingPlayer = libGame_gf_HeroParticipatedInTakedownKillingPlayer();
    lv_varianUnit = libGame_gv_players[lv_killingPlayer].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_killingPlayer, "VarianHighKingsQuestQuest") == true))) {
            return false;
        }

        if (!((UnitBehaviorCount(lv_varianUnit, "VarianHighKingsQuestHeroTakedownQuestToken") < CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "VarianHighKingsQuestHeroTakedownQuestToken", "Max", 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_varianUnit, "VarianHighKingsQuestModifyHeroTakedownQuestToken", lv_varianUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHVAR_gt_VarianHighKingsQuestHeroTakedown_Init () {
    libHVAR_gt_VarianHighKingsQuestHeroTakedown = TriggerCreate("libHVAR_gt_VarianHighKingsQuestHeroTakedown_Func");
    TriggerEnable(libHVAR_gt_VarianHighKingsQuestHeroTakedown, false);
    libGame_gf_HeroParticipatedInTakedown(libHVAR_gt_VarianHighKingsQuestHeroTakedown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Varian - UI - Floating Combat Text - Parried
//--------------------------------------------------------------------------------------------------
bool libHVAR_gt_VarianUIFloatingCombatTextParried_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libSprt_gv_dEBUGCombatTextEnabled == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget));
    PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
    FloatingCombatElementCreateTextAtUnit(lv_players, "FloatingCombatElements/FloatingCombatElementTemplate", "", EventPlayerEffectUsedUnit(c_effectUnitSource), StringExternal("Param/Value/lib_HVAR_1FAF1667"), libNtve_gv_FloatingCombatTextAutoRandomSeed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHVAR_gt_VarianUIFloatingCombatTextParried_Init () {
    libHVAR_gt_VarianUIFloatingCombatTextParried = TriggerCreate("libHVAR_gt_VarianUIFloatingCombatTextParried_Func");
    TriggerEnable(libHVAR_gt_VarianUIFloatingCombatTextParried, false);
    TriggerAddEventPlayerEffectUsed(libHVAR_gt_VarianUIFloatingCombatTextParried, c_playerAny, "VarianParryDummyDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Varian - Parry Behavior Monitor
//--------------------------------------------------------------------------------------------------
bool libHVAR_gt_VarianParryBehaviorMonitor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringUnitOwner;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringUnitOwner = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((EventUnitBehaviorCumulativeDamageModification() > 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    FloatingCombatElementCreateNumberTextAtUnit(PlayerGroupSingle(lv_triggeringUnitOwner), "FloatingCombatElements/FloatingCombatAmountReadable", "", EventUnit(), FixedToInt(EventUnitBehaviorCumulativeDamageModification()), StringExternal("Param/Value/lib_HVAR_D90A4267"), libNtve_gv_FloatingCombatTextAutoRandomSeed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHVAR_gt_VarianParryBehaviorMonitor_Init () {
    libHVAR_gt_VarianParryBehaviorMonitor = TriggerCreate("libHVAR_gt_VarianParryBehaviorMonitor_Func");
    TriggerEnable(libHVAR_gt_VarianParryBehaviorMonitor, false);
    TriggerAddEventUnitBehaviorChange(libHVAR_gt_VarianParryBehaviorMonitor, null, "VarianParryIncomingDamageReduction", c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChange(libHVAR_gt_VarianParryBehaviorMonitor, null, "VarianParryIncomingDamageReduction", c_unitBehaviorChangeDecrease);
    TriggerAddEventUnitBehaviorChange(libHVAR_gt_VarianParryBehaviorMonitor, null, "VarianParryShieldWall", c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChange(libHVAR_gt_VarianParryBehaviorMonitor, null, "VarianParryShieldWall", c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Varian - Victory Rush - Takedown Reset
//--------------------------------------------------------------------------------------------------
bool libHVAR_gt_VarianVictoryRushTakedownReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_varianPlayer;
    unit lv_varianUnit;
    unit lv_nPCUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_varianPlayer = libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer();
    lv_varianUnit = libGame_gv_players[lv_varianPlayer].lv_heroUnit;
    lv_nPCUnit = libGame_gf_HeroParticipatedInNPCTakedownMinion();

    // Conditions
    if (testConds) {
        if (!((PlayerHero(libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer()) == "Varian"))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_varianPlayer, "VarianVictoryRush") == true))) {
            return false;
        }

        if (!((((UnitTypeTestAttribute(UnitGetType(lv_nPCUnit), c_unitAttributeMinion) == true) && (UnitFilterMatch(lv_nPCUnit, lv_varianPlayer, UnitFilter(0, 0, (1 << c_targetFilterCreep) | (1 << c_targetFilterMerc), 0)) == true)) || (UnitTypeTestAttribute(UnitGetType(lv_nPCUnit), c_unitAttributeMapCreature) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_varianUnit, "VarianVictoryRushCasterReset", lv_varianUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHVAR_gt_VarianVictoryRushTakedownReset_Init () {
    libHVAR_gt_VarianVictoryRushTakedownReset = TriggerCreate("libHVAR_gt_VarianVictoryRushTakedownReset_Func");
    TriggerEnable(libHVAR_gt_VarianVictoryRushTakedownReset, false);
    libGame_gf_HeroParticipatedInNPCTakedown(libHVAR_gt_VarianVictoryRushTakedownReset);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Varian - Target - Taunted
//--------------------------------------------------------------------------------------------------
bool libHVAR_gt_VarianTargetTaunted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tauntedPlayer;
    unit lv_tauntedUnit;
    string lv_tauntBehavior;
    unit lv_casterUnit;
    bool lv_tauntedUnitHasBasicAttackAbility;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_tauntedPlayer = UnitGetOwner(EventUnit());
    lv_tauntedUnit = EventUnit();
    lv_tauntBehavior = EventUnitBehavior();
    lv_casterUnit = UnitBehaviorEffectUnit(lv_tauntedUnit, lv_tauntBehavior, c_effectUnitCaster, 0);
    lv_tauntedUnitHasBasicAttackAbility = UnitAbilityExists(lv_tauntedUnit, "attack");

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(lv_tauntedUnit, true);
    libGame_gf_PlayerHeroDisplacementCameraLock(lv_tauntedUnit, lv_tauntBehavior);
    if ((UnitIsAlive(lv_tauntedUnit) == true) && (UnitTestState(lv_tauntedUnit, c_unitStateHallucination) == false) && (UnitHasBehavior2(lv_tauntedUnit, "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(lv_tauntedPlayer, libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI_TauntOverlay.StormCutscene", lv_tauntBehavior);
    }

    while ((UnitHasBehavior2(lv_tauntedUnit, lv_tauntBehavior) == true)) {
        if (((OrderGetTargetType(UnitOrder(lv_tauntedUnit, 0)) != c_orderTargetUnit) || (OrderGetTargetUnit(UnitOrder(lv_tauntedUnit, 0)) != lv_casterUnit))) {
            UnitCreateEffectUnit(lv_casterUnit, "VarianTauntClearTargetOrders", lv_tauntedUnit);
            if ((lv_tauntedUnitHasBasicAttackAbility == true)) {
                UnitIssueOrder(lv_tauntedUnit, OrderTargetingUnit(AbilityCommand("attack", 0), lv_casterUnit), c_orderQueueReplace);
            }
            else {
                UnitCreateEffectUnit(lv_casterUnit, "ForceTargetToAttackCasterUnitScriptDummy", lv_tauntedUnit);
            }
        }

        Wait(0.0625, c_timeGame);
    }
    libNtve_gf_MakeUnitUncommandable(lv_tauntedUnit, false);
    if ((UnitTestState(lv_tauntedUnit, c_unitStateHallucination) == false) && (UnitHasBehavior2(lv_tauntedUnit, "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(lv_tauntedPlayer, "Cutscenes\\GameUI_SylvanasOverlay.StormCutscene", lv_tauntBehavior);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libHVAR_gt_VarianTargetTaunted_Init () {
    libHVAR_gt_VarianTargetTaunted = TriggerCreate("libHVAR_gt_VarianTargetTaunted_Func");
    TriggerEnable(libHVAR_gt_VarianTargetTaunted, false);
    TriggerAddEventUnitBehaviorChange(libHVAR_gt_VarianTargetTaunted, null, "VarianTaunted", c_unitBehaviorChangeCreate);
}

void libHVAR_InitTriggers () {
    libHVAR_gt_HeroAIMiscModInitialization_Init();
    libHVAR_gt_HeroAIAddToTierDataVarian_Init();
    libHVAR_gt_HeroAIInitAbilitiesVarian_Init();
    libHVAR_gt_VarianHighKingsQuestRegenGlobeProc_Init();
    libHVAR_gt_VarianHighKingsQuestHeroTakedown_Init();
    libHVAR_gt_VarianUIFloatingCombatTextParried_Init();
    libHVAR_gt_VarianParryBehaviorMonitor_Init();
    libHVAR_gt_VarianVictoryRushTakedownReset_Init();
    libHVAR_gt_VarianTargetTaunted_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libHVAR_InitLib_completed = false;

void libHVAR_InitLib () {
    if (libHVAR_InitLib_completed) {
        return;
    }

    libHVAR_InitLib_completed = true;

    libHVAR_InitLibraries();
    libHVAR_InitVariables();
    libHVAR_InitCustomScript();
    libHVAR_InitTriggers();
}

