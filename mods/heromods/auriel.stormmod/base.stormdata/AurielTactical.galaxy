//---------------------------------------------------------------------------------------------
// Auriel Tactical
//---------------------------------------------------------------------------------------------

// Abilities
const string c_AB_AngelicFlight               	= "AurielAngelicFlight";
const string c_AB_SacredSweep                   = "AurielSacredSweep";
const string c_AB_BestowHope                  	= "AurielBestowHope";
const string c_AB_RayOfHeaven                 	= "AurielRayOfHeaven";
const string c_AB_DetainmentStrike             	= "AurielDetainmentStrike";
const string c_AB_Resurrect                   	= "AurielResurrect";
const string c_AB_CrystalAegis                  = "AurielCrystalAegis";
const string c_AB_ShieldOfHope                  = "AurielShieldOfHope";

// Range Constants
const fixed c_AurielSacredSweepRange                        = 5.5;
const fixed c_AurielRayOfHeavenRange                        = 10.0;
const fixed c_AurielRayOfHeavenRadius                       = 3.0;
const fixed c_AurielRayOfHeavenMinimumHealthPercentage      = 85.0;
const fixed c_AurielRayOfHeavenNearbyEnemyRange             = 10.0;
const int c_AurielRayOfHeavenNearbyEnemyHeroes              = 2;
const fixed c_AurielDetainmentStrikeRange                   = 8.0;
const fixed c_AurielBestowHopeActiveRange                   = 20.0;
const fixed c_AurielBestowHopeCastRange                     = 10.0;
const fixed c_AurielResurrectSafetyRange                    = 10.0;
const fixed c_AurielResurrectChannelDuration                = 3.25;
const fixed c_AurielCrystalAegisRange                       = 8.0;
const fixed c_AurielCrystalAegisRadius                      = 7.0;
const fixed c_AurielCrystalAegisMinimumHealthPercentage     = 25.0;
const fixed c_AurielShieldOfHopeRange                       = 8.0;
const fixed c_AurielShieldOfHopeMinimumHealthPercentage     = 50.0;

// Global Variables
unit[libCore_gv_bALMaxPlayers + 1] g_currentBestowHopeTarget;

// Talents
const string c_ShieldOfHopeItem = "AurielShieldOfHope";

//-------------------------------------------------------------------------------------------------
bool AurielRayOfHeaven (int player, unit aiUnit, unitgroup scanGroup) {
    order spellOrd;
    fixed energy;
    unit healTarget;
    point center;
    fixed healTargetMissingLife;
	fixed healTargetCurrentLifePercentage;
    unitgroup secondaryHealTargetSearchGroup;
    unit secondaryHealTarget;
    unitgroup healingGroup;
    
    spellOrd = StormHeroAICreateOrder(player, c_AB_RayOfHeaven, 0);
    if (!UnitOrderIsValid(aiUnit, spellOrd)) { 
        return false;
    }
    
    energy = UnitGetPropertyFixed(aiUnit, c_unitPropEnergy, c_unitPropCurrent);
    
    // Find the most injured nearby ally
    healTarget = FindBestHealTarget(player, aiUnit, c_AurielRayOfHeavenRange, true, false);
    if (UnitIsValid(healTarget)) {
		healingGroup = UnitGroupEmpty();
		UnitGroupAdd(healingGroup, healTarget);	
        secondaryHealTarget = FindBestHealTarget(player, healTarget, c_AurielRayOfHeavenRadius, true, true);
		
        if (UnitIsValid(secondaryHealTarget)) {
            UnitGroupAdd(healingGroup, secondaryHealTarget);
            center = UnitGroupCenterOfGroup(healingGroup);
        }
        else {
            center = UnitGetPosition(healTarget);
        }

        if (center == null) {
            return false;
        }

		healTargetCurrentLifePercentage = UnitGetPropertyFixed(healTarget, c_unitPropLifePercent, c_unitPropCurrent);
        
        // For the sake of being economical, don't dump your energy healing an ally unless:
		// 1. They are heavily wounded
		// 2. or there are less than two enemy heroes nearby
		// 3. or you can heal multiple wounded targets
		if (healTargetCurrentLifePercentage < c_AurielRayOfHeavenMinimumHealthPercentage) {
			healTargetMissingLife = (UnitGetPropertyFixed(healTarget, c_unitPropLifeMax, c_unitPropCurrent) 
								   - UnitGetPropertyFixed(healTarget, c_unitPropLife, c_unitPropCurrent));
			
			if ((healTargetMissingLife > energy) 
			 || (UnitGroupCount(healingGroup, c_unitCountAlive) > 1)) {
				return HeroIssueOrder(player, aiUnit, spellOrd, null, c_orderQueueAddToFront, null, center);
			}
		}
    }
    
    return false;
}

//-------------------------------------------------------------------------------------------------
bool AurielBestowHope (int player, unit aiUnit, unitgroup scanGroup) {
    order spellOrd;
    unit targetUnit;
    fixed diffx;
    fixed diffy;
    fixed lengthSquared;
    int allyCount;
    int iterIndex;
    fixed targetHealth;
    unitgroup nearbyAllies;
    point bestowHopeTargetPosition;
    point aurielPosition; 

    spellOrd = StormHeroAICreateOrder(player, c_AB_BestowHope, 0);
    if (!UnitOrderIsValid(aiUnit, spellOrd)) {
        return false;
    }
    
    nearbyAllies = libAIAI_gf_AIGetAllyHeroesInRegion(player, RegionCircle(UnitGetPosition(aiUnit), c_AurielBestowHopeCastRange));
    allyCount = UnitGroupCount(nearbyAllies, c_unitCountAll);
    
    // Don't dismount to cast
    if (UnitHasBehavior(aiUnit, libAIAI_gv_aIHeroes[player].lv_mountBehavior)) {
        return false;
    }
    
    if (UnitIsValid(g_currentBestowHopeTarget[player])) {
        bestowHopeTargetPosition = UnitGetPosition(g_currentBestowHopeTarget[player]);
        aurielPosition = UnitGetPosition(aiUnit);
        
        // If the Bestow Hope target is too far away, feel free to cast it on someone closer
        lengthSquared = DistanceSquaredBetweenPoints(bestowHopeTargetPosition, aurielPosition);
        if (lengthSquared <= c_AurielBestowHopeActiveRange) {
            return false;
        }
    }

    // Damage dealers first
    targetUnit = FindUnitOfType(nearbyAllies, c_heroRoleDamage);
    if (UnitIsValid(targetUnit)) {
        
        return HeroIssueOrder(player, aiUnit, spellOrd, null, c_orderQueueAddToFront, targetUnit, null);
    }
    // Warriors next
    targetUnit = FindUnitOfType(nearbyAllies, c_heroRoleWarrior);
    if (UnitIsValid(targetUnit)) {
        return HeroIssueOrder(player, aiUnit, spellOrd, null, c_orderQueueAddToFront, targetUnit, null);
    }
    // Then Specialists
    targetUnit = FindUnitOfType(nearbyAllies, c_heroRoleSpecialist);
    if (UnitIsValid(targetUnit)) {
        return HeroIssueOrder(player, aiUnit, spellOrd, null, c_orderQueueAddToFront, targetUnit, null);
    }
    // Finally Support
    targetUnit = FindUnitOfType(nearbyAllies, c_heroRoleSupport);
    if (UnitIsValid(targetUnit)) {
        return HeroIssueOrder(player, aiUnit, spellOrd, null, c_orderQueueAddToFront, targetUnit, null);
    }
    
    return false;
}

//-------------------------------------------------------------------------------------------------
bool AurielSacredSweep (int player, unit aiUnit, unitgroup scanGroup) {
    order spellOrd;
    Storm_AI_TargetQueryOptions query;
    unit potentialTarget;
    point targetPos;

    spellOrd = StormHeroAICreateOrder(player, c_AB_SacredSweep, 0);
    if (!UnitOrderIsValid(aiUnit, spellOrd)) {
        return false;
    }

    query.lv_maxDistance = c_AurielSacredSweepRange;
    query.lv_distanceFactor = c_Storm_AI_PreferCloserTargets;
    query.lv_healthFactor = c_Storm_AI_PreferUnhealthyTargets;

    potentialTarget = FindBestTacticalTarget(scanGroup, aiUnit, query);
    
    if (potentialTarget == null) {
        return false;
    }

    targetPos = UnitGetPosition(potentialTarget);
    if (!EnoughEnemiesInArea(scanGroup, targetPos, c_AurielSacredSweepRange, c_Storm_AI_AtLeast1Hero, c_Storm_AI_AtLeast2Creeps, c_Storm_AI_AtLeast3Minions)) {
        return false;
    }

    return HeroIssueOrder(player, aiUnit, spellOrd, null, c_orderQueueAddToFront, null, targetPos);
}

//-------------------------------------------------------------------------------------------------
bool AurielDetainmentStrike (int player, unit aiUnit, unitgroup scanGroup) {
    order spellOrd;
    Storm_AI_TargetQueryOptions query;
    unit potentialTarget;
    point targetPos;

    spellOrd = StormHeroAICreateOrder(player, c_AB_DetainmentStrike, 0);
    if (!UnitOrderIsValid(aiUnit, spellOrd)) {
        return false;
    }
    
    query.lv_maxDistance = c_AurielDetainmentStrikeRange;
    query.lv_distanceFactor = c_Storm_AI_PreferCloserTargets;
    query.lv_healthFactor = c_Storm_AI_PreferUnhealthyTargets;

    potentialTarget = FindBestHero(scanGroup, aiUnit, query);
    
    if (potentialTarget == null) {
        return false;
    }

    targetPos = UnitGetPosition(potentialTarget);

    return HeroIssueOrder(player, aiUnit, spellOrd, null, c_orderQueueAddToFront, null, targetPos);
}

//-------------------------------------------------------------------------------------------------
bool AurielResurrect (int player, unit aiUnit, unitgroup scanGroup) {
    order spellOrd;
    unitgroup nearbySpirits;
    unit resurrectTarget;
    int iteration;
    int count;
    unitgroup unitDEBUG;
    
    spellOrd = StormHeroAICreateOrder(player, c_AB_Resurrect, 0);
    if (!UnitOrderIsValid(aiUnit, spellOrd)) {
        return false;
    }
    
    nearbySpirits = UnitGroup("AurielResurrectSpirit", c_playerAny, RegionCircle(UnitGetPosition(aiUnit), c_AurielResurrectSafetyRange), UnitFilter((1 << c_targetFilterHeroic), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0); 

    count = UnitGroupCount(nearbySpirits, c_unitCountAll);
    for(iteration = 1; iteration <= count; iteration += 1) {
        resurrectTarget = UnitGroupUnit(nearbySpirits, iteration);
        if (!UnitIsValid(resurrectTarget)) {
            continue;
        }
        // check to see if the timer is enabled to see whether we should resurrect them.
        if (!libHAUR_gv_heroAurielResurrectShowSpiritTimer[UnitGetOwner(resurrectTarget)]) {
            continue;
        }
        // Don't cast if you're likely to get jumped
        if (AnyEnemiesInArea(scanGroup, UnitGetPosition(resurrectTarget), c_AurielResurrectSafetyRange)) {
            return false;
        }
		
		// 3.25 because it's the full duration of Resurrect channel (3), 
		// with a bit of additional time
		HeroClaimForTactical(player, c_AurielResurrectChannelDuration, true);
		OrderSetTargetUnit(spellOrd, resurrectTarget);
		UnitIssueOrder(aiUnit, spellOrd, c_orderQueueReplace);
		
	    return true;
    }

    return false;
}

//-------------------------------------------------------------------------------------------------
bool AurielCrystalAegis (int player, unit aiUnit, unitgroup scanGroup) {
    order spellOrd;
    unit targetHero;
    point targetPos;
    
    spellOrd = StormHeroAICreateOrder(player, c_AB_CrystalAegis, 0);
    if (!UnitOrderIsValid(aiUnit, spellOrd)) {
        return false;
    }
    
    // Find an ally hero about to die
    targetHero = FindWeakestNearbyAllyHero(player, aiUnit, c_AurielCrystalAegisRange, c_AurielCrystalAegisMinimumHealthPercentage, -1, false);
    if (!UnitIsValid(targetHero)) {
        return false;
    }

    targetPos = UnitGetPosition(targetHero);
    
    // Only cast it if they ARE about to die
    if (HaveBeenAttackedRecently(targetHero) 
     && EnoughEnemiesInArea(scanGroup, targetPos, c_AurielCrystalAegisRadius, c_Storm_AI_AtLeast1Hero, c_Storm_AI_AtLeast2Creeps, c_Storm_AI_AtLeast3Minions)) {
        return HeroIssueOrder(player, aiUnit, spellOrd, null, c_orderQueueAddToFront, targetHero, null);
    }
    
    return false;
}	

//-------------------------------------------------------------------------------------------------
bool AurielItemCallback (int player, unit aiUnit, unitgroup scanGroup, string itemType, order ord, order ordTarget, order ordTogOn, order ordTogOff) {
    unit woundedAlly;

    if (itemType == c_ShieldOfHopeItem) {
        // If there is a teamfight nearby
        if (TeamFightInArea(player, scanGroup, UnitGetPosition(aiUnit), c_Storm_AI_DefaultTeamfightRange)) {
            woundedAlly = FindBestHealTarget(player, aiUnit, c_AurielShieldOfHopeRange, true, false);
            
            // and the most wounded ally is under half health
            if (UnitIsValid(woundedAlly)) {
                return false;
            }
            
            if (UnitGetPropertyFixed(woundedAlly, c_unitPropLifePercent, c_unitPropCurrent) < c_AurielShieldOfHopeMinimumHealthPercentage) {
                UnitIssueOrder(aiUnit, ord, c_orderQueueAddToFront);
                return true;
            }
        }
    }

    return false;
}

//-------------------------------------------------------------------------------------------------
void AIThinkAuriel (int player, unit aiUnit, unitgroup scanGroup) {	
    if (HeroSkipTactical(player, aiUnit)) {
       return;
    }
    
    if (UseItem(player, aiUnit, scanGroup, AurielItemCallback)) {
        return;
    }
    
    if (AurielRayOfHeaven(player, aiUnit, scanGroup)) {
        return;
    }
    
    if (libAIAI_gf_HeroAIShouldUseUltimates(player)) {
        if (AurielResurrect(player, aiUnit, scanGroup)) {
        return;
        }
        
        if (AurielCrystalAegis(player, aiUnit, scanGroup)) {
        return;
        }
    }

    if (AurielBestowHope(player, aiUnit, scanGroup)) {
        return;
    }
    
    if (AurielSacredSweep(player, aiUnit, scanGroup)) {
        return;
    }
    
    if (AurielDetainmentStrike(player, aiUnit, scanGroup)) {
        return;
    }
    
    if (RevealCloakedEnemies(player, aiUnit, scanGroup)) {
        return;
    }
}