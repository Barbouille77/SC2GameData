include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/MapMechanicsLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"
include "TriggerLibs/StartingExperienceLib"
include "TriggerLibs/SoundLib"
include "TriggerLibs/GameDataHelperLib"
include "TriggerLibs/SupportLib"

include "LibHCHO_h"

//--------------------------------------------------------------------------------------------------
// Library: Cho'Gall
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libHCHO_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libMapM_InitVariables();
    libAIAI_InitVariables();
    libUIUI_InitVariables();
    libStEx_InitVariables();
    libSond_InitVariables();
    libGDHL_InitVariables();
    libSprt_InitVariables();
}

// Variable Initialization
bool libHCHO_InitVariables_completed = false;

void libHCHO_InitVariables () {
    int init_i;

    if (libHCHO_InitVariables_completed) {
        return;
    }

    libHCHO_InitVariables_completed = true;

    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libHCHO_gv_shadowBoltVolleyMousePosition[init_i] = RegionGetCenter(RegionPlayableMap());
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libHCHO_gv_surgingFistMousePosition[init_i] = RegionGetCenter(RegionPlayableMap());
    }
    libHCHO_gv_tryMe_ChoGall_PairedPlayer_C = 3;
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: #Include Cho'Gall Tactical AI
//--------------------------------------------------------------------------------------------------
include "StormTactical.galaxy"
include "ChoGallTactical.galaxy"

void libHCHO_InitCustomScript () {
}

// Functions
void libHCHO_gf_HeroChoGallIncrementHeroCountFunction () {
    // Implementation
    libHCHO_gv_heroChoGallTriggerRegistrationVariable += 1;
    if ((libHCHO_gv_heroChoGallTriggerRegistrationVariable == 1)) {
        TriggerEnable(libHCHO_gt_ChoGallPortBackToBaseSpecialCase, true);
        TriggerEnable(libHCHO_gt_HeroGallShadowBoltVolleyCast, true);
        TriggerEnable(libHCHO_gt_HeroGallShadowBoltVolleyEnd, true);
        TriggerEnable(libHCHO_gt_HeroGallPsychoticBreakRespawnTimerAdjustment, true);
        TriggerEnable(libHCHO_gt_HeroGallBombsAwayBehavior, true);
        TriggerEnable(libHCHO_gt_HeroChoWillofGallGiveGallItem, true);
        TriggerEnable(libHCHO_gt_HeroGallTheNetherCalls, true);
        TriggerEnable(libHCHO_gt_HeroGallDarkDescent, true);
        TriggerEnable(libHCHO_gt_HeroGallDarkDescentReset, true);
        TriggerEnable(libHCHO_gt_HurryUpOafChoCooldownBehaviormodifiertempdeletemeafteruisupport, true);
        TriggerEnable(libHCHO_gt_HurryUpOafMountedDisabler, true);
        TriggerEnable(libHCHO_gt_SurgingFistFakeCastActivated, true);
        TriggerEnable(libHCHO_gt_SurgingFistRootsOnMonitor, true);
        TriggerEnable(libHCHO_gt_SurgingFistRootsOffMonitor, true);
        TriggerEnable(libHCHO_gt_GallRuneBombBehaviorTimerControllerTrigger, true);
        TriggerEnable(libHCHO_gt_ChoRuneBombSpawn, true);
        TriggerEnable(libHCHO_gt_GallRuneBombDetonationCooldownControl, true);
        TriggerEnable(libHCHO_gt_DEBUGChoGallVideoSwapCheat, true);
        TriggerEnable(libHCHO_gt_HeroChoGallSwapandRespawn, true);
        TriggerEnable(libHCHO_gt_DEBUGShowGall, true);
        TriggerEnable(libHCHO_gt_DEBUGSwapChoGallCheat, true);
        TriggerEnable(libHCHO_gt_CCRecognitionRoot, true);
        TriggerEnable(libHCHO_gt_CCRecognitionVoidPrisonStasisOverlay, true);
        TriggerEnable(libHCHO_gt_HeroChogallHauntedMinescameraplanechange, true);
        TriggerEnable(libHCHO_gt_HeroChogallChoDiesKillGall, true);
        TriggerEnable(libHCHO_gt_HeroChoGallChoRemovedRemoveGall, true);
        TriggerEnable(libHCHO_gt_HeroChogallChoRespawnsRespawnGall, true);
        TriggerEnable(libHCHO_gt_HeroChogallGallStunnedorSilencedStop, true);
        TriggerEnable(libHCHO_gt_HeroChogallDamageReductionBehaviorForwarding, true);
        TriggerEnable(libHCHO_gt_HeroChogallStasisBehaviorForwarding, true);
        TriggerEnable(libHCHO_gt_HeroChogallMoltenBlock, true);
        TriggerEnable(libHCHO_gt_HeroChogallHealingFountainCooldownforGall, true);
        TriggerEnable(libHCHO_gt_HeroChogallChoEntersTransport, true);
        TriggerEnable(libHCHO_gt_HeroChogallChoExitsTransport, true);
        TriggerEnable(libHCHO_gt_HeroChogallVehicleStart, true);
        TriggerEnable(libHCHO_gt_HeroChogallVehicleStop, true);
        TriggerEnable(libHCHO_gt_HeroChoGallDeathRecapSpecialCaseforGallChoDies, true);
        TriggerEnable(libHCHO_gt_GallAbilityCastAFKDetection, true);
        TriggerEnable(libHCHO_gt_HeroChoShadowBoltVolleyVehicleActorHook, true);
        TriggerEnable(libHCHO_gt_HeroChoIamHurrying, true);
        TriggerEnable(libHCHO_gt_HeroChoMoltenBlockOverlayOn, true);
        TriggerEnable(libHCHO_gt_HeroChoMoltenBlockOverlayOff, true);
        TriggerEnable(libHCHO_gt_HeroGallShoveRootOff, true);
        TriggerEnable(libHCHO_gt_HeroGallShoveRootOn, true);
    }

}

void libHCHO_gf_HeroChoGallDecrementHeroCountFunction () {
    // Implementation
    libHCHO_gv_heroChoGallTriggerRegistrationVariable -= 1;
    if ((libHCHO_gv_heroChoGallTriggerRegistrationVariable < 0)) {
        libHCHO_gv_heroChoGallTriggerRegistrationVariable = 0;
    }

    if ((libHCHO_gv_heroChoGallTriggerRegistrationVariable == 0)) {
        TriggerEnable(libHCHO_gt_ChoGallPortBackToBaseSpecialCase, false);
        TriggerEnable(libHCHO_gt_HeroGallShadowBoltVolleyCast, false);
        TriggerEnable(libHCHO_gt_HeroGallShadowBoltVolleyEnd, false);
        TriggerEnable(libHCHO_gt_HeroGallPsychoticBreakRespawnTimerAdjustment, false);
        TriggerEnable(libHCHO_gt_HeroGallBombsAwayBehavior, false);
        TriggerEnable(libHCHO_gt_HeroChoWillofGallGiveGallItem, false);
        TriggerEnable(libHCHO_gt_HeroGallTheNetherCalls, false);
        TriggerEnable(libHCHO_gt_HeroGallDarkDescent, false);
        TriggerEnable(libHCHO_gt_HeroGallDarkDescentReset, false);
        TriggerEnable(libHCHO_gt_HurryUpOafChoCooldownBehaviormodifiertempdeletemeafteruisupport, false);
        TriggerEnable(libHCHO_gt_HurryUpOafMountedDisabler, false);
        TriggerEnable(libHCHO_gt_SurgingFistFakeCastActivated, false);
        TriggerEnable(libHCHO_gt_SurgingFistMouseTracker, false);
        TriggerEnable(libHCHO_gt_SurgingFistExecuteChargetomouse, false);
        TriggerEnable(libHCHO_gt_SurgingFistRootsOnMonitor, false);
        TriggerEnable(libHCHO_gt_SurgingFistRootsOffMonitor, false);
        TriggerEnable(libHCHO_gt_GallRuneBombBehaviorTimerControllerTrigger, false);
        TriggerEnable(libHCHO_gt_ChoRuneBombSpawn, false);
        TriggerEnable(libHCHO_gt_GallRuneBombDetonationCooldownControl, false);
        TriggerEnable(libHCHO_gt_DEBUGChoGallVideoSwapCheat, false);
        TriggerEnable(libHCHO_gt_HeroChoGallSwapandRespawn, false);
        TriggerEnable(libHCHO_gt_DEBUGShowGall, false);
        TriggerEnable(libHCHO_gt_DEBUGSwapChoGallCheat, false);
        TriggerEnable(libHCHO_gt_CCRecognitionRoot, false);
        TriggerEnable(libHCHO_gt_CCRecognitionVoidPrisonStasisOverlay, false);
        TriggerEnable(libHCHO_gt_HeroChogallHauntedMinescameraplanechange, false);
        TriggerEnable(libHCHO_gt_HeroChogallChoDiesKillGall, false);
        TriggerEnable(libHCHO_gt_HeroChoGallChoRemovedRemoveGall, false);
        TriggerEnable(libHCHO_gt_HeroChogallChoRespawnsRespawnGall, false);
        TriggerEnable(libHCHO_gt_HeroChogallGallStunnedorSilencedStop, false);
        TriggerEnable(libHCHO_gt_HeroChogallDamageReductionBehaviorForwarding, false);
        TriggerEnable(libHCHO_gt_HeroChogallStasisBehaviorForwarding, false);
        TriggerEnable(libHCHO_gt_HeroChogallMoltenBlock, false);
        TriggerEnable(libHCHO_gt_HeroChogallHealingFountainCooldownforGall, false);
        TriggerEnable(libHCHO_gt_HeroChogallChoEntersTransport, false);
        TriggerEnable(libHCHO_gt_HeroChogallChoExitsTransport, false);
        TriggerEnable(libHCHO_gt_HeroChogallVehicleStart, false);
        TriggerEnable(libHCHO_gt_HeroChogallVehicleStop, false);
        TriggerEnable(libHCHO_gt_HeroChoGallDeathRecapSpecialCaseforGallChoDies, false);
        TriggerEnable(libHCHO_gt_GallAbilityCastAFKDetection, false);
        TriggerEnable(libHCHO_gt_HeroChoShadowBoltVolleyVehicleActorHook, false);
        TriggerEnable(libHCHO_gt_HeroChoIamHurrying, false);
        TriggerEnable(libHCHO_gt_HeroChoMoltenBlockOverlayOn, false);
        TriggerEnable(libHCHO_gt_HeroChoMoltenBlockOverlayOff, false);
        TriggerEnable(libHCHO_gt_HeroGallShoveRootOff, false);
        TriggerEnable(libHCHO_gt_HeroGallShoveRootOn, false);
    }

}

trigger auto_libHCHO_gf_GallRuneBombBeahviorTimerController_Trigger = null;
int auto_libHCHO_gf_GallRuneBombBeahviorTimerController_lp_PlayerNumber;
unit auto_libHCHO_gf_GallRuneBombBeahviorTimerController_lp_OrbUnit;

void libHCHO_gf_GallRuneBombBeahviorTimerController (int lp_PlayerNumber, unit lp_OrbUnit) {
    auto_libHCHO_gf_GallRuneBombBeahviorTimerController_lp_PlayerNumber = lp_PlayerNumber;
    auto_libHCHO_gf_GallRuneBombBeahviorTimerController_lp_OrbUnit = lp_OrbUnit;

    if (auto_libHCHO_gf_GallRuneBombBeahviorTimerController_Trigger == null) {
        auto_libHCHO_gf_GallRuneBombBeahviorTimerController_Trigger = TriggerCreate("auto_libHCHO_gf_GallRuneBombBeahviorTimerController_TriggerFunc");
    }

    TriggerExecute(auto_libHCHO_gf_GallRuneBombBeahviorTimerController_Trigger, false, false);
}

bool auto_libHCHO_gf_GallRuneBombBeahviorTimerController_TriggerFunc (bool testConds, bool runActions) {
    int lp_PlayerNumber = auto_libHCHO_gf_GallRuneBombBeahviorTimerController_lp_PlayerNumber;
    unit lp_OrbUnit = auto_libHCHO_gf_GallRuneBombBeahviorTimerController_lp_OrbUnit;

    // Variable Declarations
    fixed lv_runeBombDistanceToCho;
    fixed lv_runeBombSpeed;
    fixed lv_timeToImpact;
    int lv_choGallPairsTeamID;
    unit lv_runeBomb;

    // Variable Initialization
    lv_choGallPairsTeamID = libGame_gf_TeamNumberOfPlayer(lp_PlayerNumber);
    lv_runeBomb = lp_OrbUnit;

    // Implementation
    lv_runeBombSpeed = CatalogReferenceGetAsInt("Mover,ChoRuneBombReturnMissile,MotionPhases[0].Speed", libGDHL_gv_chogallPairs[lv_choGallPairsTeamID].lv_choPlayer);
    lv_runeBombDistanceToCho = DistanceBetweenPoints(UnitGetPosition(lv_runeBomb), UnitGetPosition(libGDHL_gv_chogallPairs[lv_choGallPairsTeamID].lv_choUnit));
    lv_timeToImpact = (lv_runeBombDistanceToCho / lv_runeBombSpeed);
    if ((lv_timeToImpact > UnitBehaviorDuration(lp_OrbUnit, "ChoRuneBombTalentRollbackTimedLife"))) {
        lv_timeToImpact = UnitBehaviorDuration(lp_OrbUnit, "ChoRuneBombTalentRollbackTimedLife");
    }

    UnitBehaviorSetDuration(libGDHL_gv_chogallPairs[lv_choGallPairsTeamID].lv_gallUnit, "GallRunicBlastOrbActive", lv_timeToImpact);
    while (((UnitIsAlive(lp_OrbUnit) == true) && (UnitIsAlive(libGDHL_gv_chogallPairs[lv_choGallPairsTeamID].lv_gallUnit) == true) && (UnitHasBehavior2(lv_runeBomb, "ChoRuneBombDetonationImmunity") == false) && (UnitHasBehavior2(lv_runeBomb, "ChoRuneBombDetonated") == false))) {
        lv_runeBombSpeed = CatalogReferenceGetAsInt("Mover,ChoRuneBombReturnMissile,MotionPhases[0].Speed", libGDHL_gv_chogallPairs[lv_choGallPairsTeamID].lv_choPlayer);
        lv_runeBombDistanceToCho = DistanceBetweenPoints(UnitGetPosition(lv_runeBomb), UnitGetPosition(libGDHL_gv_chogallPairs[lv_choGallPairsTeamID].lv_choUnit));
        lv_timeToImpact = (lv_runeBombDistanceToCho / lv_runeBombSpeed);
        if ((UnitBehaviorDuration(lv_runeBomb, "ChoRuneBombTalentRollbackTimedLife") < lv_timeToImpact)) {
            UnitBehaviorSetDurationRemaining(libGDHL_gv_chogallPairs[lv_choGallPairsTeamID].lv_gallUnit, "GallRunicBlastOrbActive", UnitBehaviorDuration(lv_runeBomb, "ChoRuneBombTalentRollbackTimedLife"));
        }
        else {
            UnitBehaviorSetDurationRemaining(libGDHL_gv_chogallPairs[lv_choGallPairsTeamID].lv_gallUnit, "GallRunicBlastOrbActive", lv_timeToImpact);
        }
        Wait(0.0625, c_timeGame);
    }
    UnitBehaviorRemove(libGDHL_gv_chogallPairs[lv_choGallPairsTeamID].lv_gallUnit, "GallRunicBlastOrbActive", 1);
    return true;
}

void libHCHO_gf_ChoGallSwapandRespawnApplySavedTalents (int lp_playerID) {
    int auto5805408A_ae;
    int auto5805408A_ai;

    // Variable Declarations
    int lv_itTalent;
    int lv_numberOfPreviousTalents;

    // Variable Initialization

    // Implementation
    auto5805408A_ae = 7;
    auto5805408A_ai = 1;
    lv_itTalent = 1;
    for ( ; ( (auto5805408A_ai >= 0 && lv_itTalent <= auto5805408A_ae) || (auto5805408A_ai <= 0 && lv_itTalent >= auto5805408A_ae) ) ; lv_itTalent += auto5805408A_ai ) {
        if ((libHCHO_gv_choGallSwapandRespawnSavedTalents[lv_itTalent] != 0) && (UnitGetPropertyFixed(libGame_gv_players[lp_playerID].lv_heroUnit, c_unitPropLevel, c_unitPropCurrent) >= libGame_gv_players[lp_playerID].lv_talents_TierLevels[lv_itTalent].lv_level)) {
            lv_numberOfPreviousTalents += libGame_gv_talents_TalentChoices[lp_playerID][(lv_itTalent - 1)].lv_numberOfTalentsForThisTier;
            libGame_gf_TalentsChooseTalentForPlayer(lv_itTalent, libHCHO_gv_choGallSwapandRespawnSavedTalents[lv_itTalent], lp_playerID);
        }
        else {
            break;
        }
    }
}

trigger auto_libHCHO_gf_HeroChogallGallFollow_Trigger = null;
unit auto_libHCHO_gf_HeroChogallGallFollow_lp_gallUnit;

void libHCHO_gf_HeroChogallGallFollow (unit lp_gallUnit) {
    auto_libHCHO_gf_HeroChogallGallFollow_lp_gallUnit = lp_gallUnit;

    if (auto_libHCHO_gf_HeroChogallGallFollow_Trigger == null) {
        auto_libHCHO_gf_HeroChogallGallFollow_Trigger = TriggerCreate("auto_libHCHO_gf_HeroChogallGallFollow_TriggerFunc");
    }

    TriggerExecute(auto_libHCHO_gf_HeroChogallGallFollow_Trigger, false, false);
}

bool auto_libHCHO_gf_HeroChogallGallFollow_TriggerFunc (bool testConds, bool runActions) {
    unit lp_gallUnit = auto_libHCHO_gf_HeroChogallGallFollow_lp_gallUnit;

    // Variable Declarations
    int lv_gallPlayerID;
    int lv_choGallPairsTeam;

    // Variable Initialization

    // Implementation
    lv_choGallPairsTeam = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_gallUnit));
    lv_gallPlayerID = UnitGetOwner(lp_gallUnit);
    while (((UnitGetType(libGame_gv_players[lv_gallPlayerID].lv_heroUnit) == "HeroGall") || (UnitGetType(libGame_gv_players[lv_gallPlayerID].lv_heroUnit) == "HeroCho")) && (libGame_gv_gameOver == false) && (UnitIsValid(lp_gallUnit) == true) && (UnitIsAlive(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit) == true) && (UnitIsAlive(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_choUnit) == true)) {
        while ((UnitHasBehavior2(lp_gallUnit, "GallPsychoticBreakDyingBehavior") == true)) {
            Wait(0.0625, c_timeGame);
        }
        if ((DistanceBetweenPoints(UnitGetPosition(lp_gallUnit), UnitGetPosition(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallFollowUnit)) >= 4.0)) {
            UnitSetPosition(lp_gallUnit, UnitGetPosition(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallFollowUnit), false);
        }
        else {
            UnitSetPosition(lp_gallUnit, UnitGetPosition(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallFollowUnit), true);
        }
        UnitSetPropertyFixed(lp_gallUnit, c_unitPropLifeMax, UnitGetPropertyFixed(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_choUnit, c_unitPropLifeMax, c_unitPropCurrent));
        UnitSetPropertyFixed(lp_gallUnit, c_unitPropLife, UnitGetPropertyFixed(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_choUnit, c_unitPropLife, c_unitPropCurrent));
        Wait(0.0625, c_timeGame);
    }
    return true;
}

void libHCHO_gf_HeroGallStartAFKTimer (int lp_gallPlayer) {
    // Implementation
    Wait((libCore_gv_bALOpenTheGatesDelay + libGame_gv_afk_AfkInitialTimerStartDelay_C), c_timeGame);
    TimerStart(libGame_gv_afk_PlayerAfkWarningTimer[lp_gallPlayer], libGame_gv_afk_AfkWarningTimerDuration_C, false, c_timeGame);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Misc Mod Initialization
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroAIMiscModInitialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_RegisterSegregationTrigger(libCore_ge_SegregationTriggerTypes_HeroAIInitializeHeroTierData, libHCHO_gt_HeroAIAddToTierDataChoGall);
    libCore_gf_RegisterSegregationTrigger(libCore_ge_SegregationTriggerTypes_HeroAIInitAbilities, libHCHO_gt_HeroAIInitAbilitiesChoGall);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("GallTwistingNetherInitialSet", 5.0, 5.0, 0.0, true, true);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("GallDreadOrbCastSet", 2.0, 1.5, 0.0, true, true);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("GallDreadOrbLaunchMissile2Set", 2.0, 1.5, 0.0, true, true);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("GallDreadOrbLaunchMissile3Set", 2.0, 1.5, 0.0, true, true);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("GallDreadOrbLaunchMissileSuperBombCW90", 2.0, 1.5, 0.0, true, true);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("GallDreadOrbLaunchMissileSuperBombCCW90", 2.0, 1.5, 0.0, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroAIMiscModInitialization_Init () {
    libHCHO_gt_HeroAIMiscModInitialization = TriggerCreate("libHCHO_gt_HeroAIMiscModInitialization_Func");
    TriggerAddEventMapInit(libHCHO_gt_HeroAIMiscModInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Add To Tier Data - Cho'Gall
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroAIAddToTierDataChoGall_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "Cho");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "Gall");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroAIAddToTierDataChoGall_Init () {
    libHCHO_gt_HeroAIAddToTierDataChoGall = TriggerCreate("libHCHO_gt_HeroAIAddToTierDataChoGall_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Init Abilities - Cho'Gall
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroAIInitAbilitiesChoGall_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libCore_gv_segTriggerUnit) == "HeroCho")) {
        libAIAI_gv_heroAIInitAbilitesHeroFound = true;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_castAbility[0] = null;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_castAbility[1] = AbilityCommand("ChoConsumingBlaze", 0);
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_castAbility[2] = AbilityCommand("ChoRuneBomb", 0);
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_abilityRange[2] = 14.0;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_castAbility[3] = AbilityCommand("ChoUpheaval", 0);
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_castAbility[4] = AbilityCommand("ChoHammerOfTwilight", 0);
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
    }

    if ((UnitGetType(libCore_gv_segTriggerUnit) == "HeroGall")) {
        libAIAI_gv_heroAIInitAbilitesHeroFound = true;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_castAbility[0] = AbilityCommand("GallShadowflame", 0);
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_abilityRange[0] = 11.0;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_castAbility[1] = AbilityCommand("GallDreadOrb", 0);
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_abilityRange[1] = 15.0;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_castAbility[3] = AbilityCommand("GallShadowboltVolley", 0);
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_castAbility[4] = AbilityCommand("GallTwistingNether", 0);
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_aIBehaviorsEnabled = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroAIInitAbilitiesChoGall_Init () {
    libHCHO_gt_HeroAIInitAbilitiesChoGall = TriggerCreate("libHCHO_gt_HeroAIInitAbilitiesChoGall_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Force Include Data Mods
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_ForceIncludeDataMods_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libAIAI_gt_IncludeAI, true, false);
    TriggerExecute(libGame_gt_IncludeGame, true, false);
    TriggerExecute(libGDHL_gt_IncludeGameDataHelper, true, false);
    TriggerExecute(libMapM_gt_IncludeMapMechanics, true, false);
    TriggerExecute(libSond_gt_IncludeSound, true, false);
    TriggerExecute(libSprt_gt_IncludeSupport, true, false);
    TriggerExecute(libUIUI_gt_IncludeUI, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_ForceIncludeDataMods_Init () {
    libHCHO_gt_ForceIncludeDataMods = TriggerCreate("libHCHO_gt_ForceIncludeDataMods_Func");
    TriggerAddEventMapInit(libHCHO_gt_ForceIncludeDataMods);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cho'Gall Port Back To Base Special Case
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_ChoGallPortBackToBaseSpecialCase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_portingPlayer;

    // Variable Initialization
    lv_portingPlayer = libGame_gf_HeroPortedBackToTownPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[lv_portingPlayer].lv_heroUnit) == "HeroCho"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_portingPlayer)].lv_gallPlayer, UnitGetPosition(libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_portingPlayer)].lv_gallFollowUnit), 0.0, -1, 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_ChoGallPortBackToBaseSpecialCase_Init () {
    libHCHO_gt_ChoGallPortBackToBaseSpecialCase = TriggerCreate("libHCHO_gt_ChoGallPortBackToBaseSpecialCase_Func");
    TriggerEnable(libHCHO_gt_ChoGallPortBackToBaseSpecialCase, false);
    libGame_gf_HeroPortedBackToTown(libHCHO_gt_ChoGallPortBackToBaseSpecialCase);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gall Ability Cast - AFK Detection
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_GallAbilityCastAFKDetection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libGame_gv_players[lv_player].lv_isDead == true) || (libGame_gv_afk_AfkDetectionSystemEnabled == false))) {
        return true;
    }

    TimerStart(libGame_gv_afk_PlayerAfkWarningTimer[lv_player], libGame_gv_afk_AfkWarningTimerDuration_C, false, c_timeGame);
    TimerPause(libGame_gv_afk_PlayerAfkKickTimer[lv_player], true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_GallAbilityCastAFKDetection_Init () {
    libHCHO_gt_GallAbilityCastAFKDetection = TriggerCreate("libHCHO_gt_GallAbilityCastAFKDetection_Func");
    TriggerEnable(libHCHO_gt_GallAbilityCastAFKDetection, false);
    TriggerAddEventUnitAbility(libHCHO_gt_GallAbilityCastAFKDetection, null, AbilityCommand("GallTwistingNether", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libHCHO_gt_GallAbilityCastAFKDetection, null, AbilityCommand("GallShove", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libHCHO_gt_GallAbilityCastAFKDetection, null, AbilityCommand("GallShadowflame", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libHCHO_gt_GallAbilityCastAFKDetection, null, AbilityCommand("GallRunicBlast", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libHCHO_gt_GallAbilityCastAFKDetection, null, AbilityCommand("GallHurryUpOaf", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libHCHO_gt_GallAbilityCastAFKDetection, null, AbilityCommand("GallTalentEyeOfKilrogg", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libHCHO_gt_GallAbilityCastAFKDetection, null, AbilityCommand("GallDreadOrb", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libHCHO_gt_GallAbilityCastAFKDetection, null, AbilityCommand("GallTheWillofGall", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Gall - Shadow Bolt Volley Cast
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroGallShadowBoltVolleyCast_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libHCHO_gv_shadowBoltVolleyFlag[EventPlayer()] = true;
    Wait(0.0625, c_timeGame);
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroGall", "StationaryTurningRate", EventPlayer(), FixedToString(50.0, 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroGallShadowBoltVolleyCast_Init () {
    libHCHO_gt_HeroGallShadowBoltVolleyCast = TriggerCreate("libHCHO_gt_HeroGallShadowBoltVolleyCast_Func");
    TriggerEnable(libHCHO_gt_HeroGallShadowBoltVolleyCast, false);
    TriggerAddEventUnitBehaviorChange(libHCHO_gt_HeroGallShadowBoltVolleyCast, null, "GallShadowboltVolleyCaster", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Gall - Shadow Bolt Volley End
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroGallShadowBoltVolleyEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    bool lv_infernoBreathAimTriggerEnabled;
    int lv_diabloIndex;
    int lv_triggeringDiabloPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libHCHO_gv_shadowBoltVolleyFlag[EventPlayer()] = false;
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroGall", "StationaryTurningRate", EventPlayer(), FixedToString(1760.0, 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroGallShadowBoltVolleyEnd_Init () {
    libHCHO_gt_HeroGallShadowBoltVolleyEnd = TriggerCreate("libHCHO_gt_HeroGallShadowBoltVolleyEnd_Func");
    TriggerEnable(libHCHO_gt_HeroGallShadowBoltVolleyEnd, false);
    TriggerAddEventUnitBehaviorChange(libHCHO_gt_HeroGallShadowBoltVolleyEnd, null, "GallShadowboltVolleyCaster", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Cho - Shadow Bolt Volley Vehicle Actor Hook
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroChoShadowBoltVolleyVehicleActorHook_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_choGallPairsTeam;

    // Variable Initialization
    lv_choGallPairsTeam = libGame_gf_TeamNumberOfPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_choUnit, "UsingVehicle") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit, "GallShadowBoltVolleyChoAlertDummy", libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_choUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroChoShadowBoltVolleyVehicleActorHook_Init () {
    libHCHO_gt_HeroChoShadowBoltVolleyVehicleActorHook = TriggerCreate("libHCHO_gt_HeroChoShadowBoltVolleyVehicleActorHook_Func");
    TriggerEnable(libHCHO_gt_HeroChoShadowBoltVolleyVehicleActorHook, false);
    TriggerAddEventPlayerEffectUsed(libHCHO_gt_HeroChoShadowBoltVolleyVehicleActorHook, c_playerAny, "GallShadowBoltVolleyPrepEffectChoSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Gall - Shove Root On
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroGallShoveRootOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_gallPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()))].lv_choPlayer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_gallPlayer = libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()))].lv_gallPlayer;
    UnitBehaviorAdd(libGame_gv_players[lv_gallPlayer].lv_heroUnit, "GallShoveDisablerDummyBehavior", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroGallShoveRootOn_Init () {
    libHCHO_gt_HeroGallShoveRootOn = TriggerCreate("libHCHO_gt_HeroGallShoveRootOn_Func");
    TriggerEnable(libHCHO_gt_HeroGallShoveRootOn, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libHCHO_gt_HeroGallShoveRootOn, null, c_behaviorCategoryUser5, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libHCHO_gt_HeroGallShoveRootOn, null, c_behaviorCategoryUser5, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Gall - Shove Root Off
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroGallShoveRootOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_gallPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()))].lv_choPlayer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_gallPlayer = libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()))].lv_gallPlayer;
    UnitBehaviorRemove(libGame_gv_players[lv_gallPlayer].lv_heroUnit, "GallShoveDisablerDummyBehavior", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroGallShoveRootOff_Init () {
    libHCHO_gt_HeroGallShoveRootOff = TriggerCreate("libHCHO_gt_HeroGallShoveRootOff_Func");
    TriggerEnable(libHCHO_gt_HeroGallShoveRootOff, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libHCHO_gt_HeroGallShoveRootOff, null, c_behaviorCategoryUser5, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Cho - I am Hurrying
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroChoIamHurrying_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_choGallPairsTeamID;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_choGallPairsTeamID = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()));
    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        UnitCreateEffectUnit(EventUnit(), "GallIAMHurryingApplyCarry", libGDHL_gv_chogallPairs[lv_choGallPairsTeamID].lv_gallUnit);
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeDestroy)) {
        UnitCreateEffectUnit(EventUnit(), "GallIAMHurryingRemoveCarry", libGDHL_gv_chogallPairs[lv_choGallPairsTeamID].lv_gallUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroChoIamHurrying_Init () {
    libHCHO_gt_HeroChoIamHurrying = TriggerCreate("libHCHO_gt_HeroChoIamHurrying_Func");
    TriggerEnable(libHCHO_gt_HeroChoIamHurrying, false);
    TriggerAddEventUnitBehaviorChange(libHCHO_gt_HeroChoIamHurrying, null, "ChoTalentIAMHurryingCarry", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Gall - Psychotic Break Respawn Timer Adjustment
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroGallPsychoticBreakRespawnTimerAdjustment_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_choGallPairsTeam;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(libGame_gf_HeroKilledPlayer())].lv_gallUnit == libGame_gf_HeroKilledUnit()))) {
            return false;
        }

        if (!((PlayerHasTalent(libGame_gf_HeroKilledPlayer(), "GallPsychoticBreak") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_choGallPairsTeam = libGame_gf_TeamNumberOfPlayer(libGame_gf_HeroKilledPlayer());
    libGame_gf_HeroDeathModifyRespawnTimer(libGame_gf_HeroKilledPlayer(), -10.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroGallPsychoticBreakRespawnTimerAdjustment_Init () {
    libHCHO_gt_HeroGallPsychoticBreakRespawnTimerAdjustment = TriggerCreate("libHCHO_gt_HeroGallPsychoticBreakRespawnTimerAdjustment_Func");
    TriggerEnable(libHCHO_gt_HeroGallPsychoticBreakRespawnTimerAdjustment, false);
    libGame_gf_HeroKilled(libHCHO_gt_HeroGallPsychoticBreakRespawnTimerAdjustment);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Gall - Bomb's Away Behavior
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroGallBombsAwayBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_choGallPairsTeamID;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_choGallPairsTeamID = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()));
    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        CatalogFieldValueModify(c_gameCatalogActor, "ChoRuneBombLineGuide", "Height", UnitGetOwner(EventUnit()), "15.25", c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogBehavior, "GallRunicBlastOrbActive", "Duration", libGDHL_gv_chogallPairs[lv_choGallPairsTeamID].lv_choPlayer, ".3125", c_upgradeOperationAdd);
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeDestroy)) {
        CatalogFieldValueModify(c_gameCatalogActor, "ChoRuneBombLineGuide", "Height", UnitGetOwner(EventUnit()), "12.5", c_upgradeOperationSet);
        CatalogFieldValueModify(c_gameCatalogBehavior, "GallRunicBlastOrbActive", "Duration", libGDHL_gv_chogallPairs[lv_choGallPairsTeamID].lv_choPlayer, "2", c_upgradeOperationSet);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroGallBombsAwayBehavior_Init () {
    libHCHO_gt_HeroGallBombsAwayBehavior = TriggerCreate("libHCHO_gt_HeroGallBombsAwayBehavior_Func");
    TriggerEnable(libHCHO_gt_HeroGallBombsAwayBehavior, false);
    TriggerAddEventUnitBehaviorChange(libHCHO_gt_HeroGallBombsAwayBehavior, null, "ChoBombsAwayCarry", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Cho - Will of Gall - Give Gall Item
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroChoWillofGallGiveGallItem_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        UnitInventoryCreate(EventUnit(), "GallTheWillofGallItemUnit");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroChoWillofGallGiveGallItem_Init () {
    libHCHO_gt_HeroChoWillofGallGiveGallItem = TriggerCreate("libHCHO_gt_HeroChoWillofGallGiveGallItem_Func");
    TriggerEnable(libHCHO_gt_HeroChoWillofGallGiveGallItem, false);
    TriggerAddEventUnitBehaviorChange(libHCHO_gt_HeroChoWillofGallGiveGallItem, null, "GallTheWillOfGallCarry", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Gall - The Nether Calls
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroGallTheNetherCalls_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_unitOwner;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate))) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "GallTalentNetherCallsUpgrade", 0);
    }

    if (((EventUnitBehaviorChange() == c_unitBehaviorChangeIncrease))) {
        TechTreeUpgradeAddLevel(UnitGetOwner(EventUnit()), "GallTalentNetherCallsUpgrade", 1);
    }

    if (((EventUnitBehaviorChange() == c_unitBehaviorChangeDestroy))) {
        libNtve_gf_SetUpgradeLevelForPlayer(UnitGetOwner(EventUnit()), "GallTalentNetherCallsUpgrade", 0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroGallTheNetherCalls_Init () {
    libHCHO_gt_HeroGallTheNetherCalls = TriggerCreate("libHCHO_gt_HeroGallTheNetherCalls_Func");
    TriggerEnable(libHCHO_gt_HeroGallTheNetherCalls, false);
    TriggerAddEventUnitBehaviorChange(libHCHO_gt_HeroGallTheNetherCalls, null, "GallNetherCallsStack", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Gall - Dark Descent
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroGallDarkDescent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_player2;
    unit lv_PlayerTeam;
    int lv_choGallPairsTeam;

    // Variable Initialization
    lv_player = libGame_gf_HeroParticipatedInTakedownKillingPlayer();
    lv_player2 = libGame_gf_HeroParticipatedInTakedownKilledPlayer();
    lv_PlayerTeam = libGame_gv_players[lv_player].lv_heroUnit;
    lv_choGallPairsTeam = libGame_gf_TeamNumberOfPlayer(lv_player);

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_player, "GallDarkDescent") == true))) {
            return false;
        }

        if (!((UnitIsAlive(lv_PlayerTeam) == true))) {
            return false;
        }

        if (!((UnitGetType(lv_PlayerTeam) == "HeroGall"))) {
            return false;
        }

        if (!((UnitBehaviorCount(lv_PlayerTeam, "GallRunicBlastDarkDescentToken") < 4))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_PlayerTeam, "GallRunicBlastDarkDescentIncrementToken", lv_PlayerTeam);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroGallDarkDescent_Init () {
    libHCHO_gt_HeroGallDarkDescent = TriggerCreate("libHCHO_gt_HeroGallDarkDescent_Func");
    TriggerEnable(libHCHO_gt_HeroGallDarkDescent, false);
    libGame_gf_HeroParticipatedInTakedown(libHCHO_gt_HeroGallDarkDescent);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Gall - Dark Descent Reset
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroGallDarkDescentReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killedPlayer;

    // Variable Initialization
    lv_killedPlayer = libGame_gf_HeroKilledPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_killedPlayer, "GallDarkDescent") == true))) {
            return false;
        }

        if (!((UnitGetType(libGame_gf_HeroKilledUnit()) == "HeroGall"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gf_HeroKilledUnit(), "GallRunicBlastDarkDescentResetToken", libGame_gf_HeroKilledUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroGallDarkDescentReset_Init () {
    libHCHO_gt_HeroGallDarkDescentReset = TriggerCreate("libHCHO_gt_HeroGallDarkDescentReset_Func");
    TriggerEnable(libHCHO_gt_HeroGallDarkDescentReset, false);
    libGame_gf_HeroKilled(libHCHO_gt_HeroGallDarkDescentReset);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Cho - Molten Block Overlay On
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroChoMoltenBlockOverlayOn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventUnit()) == true) && (UnitTestState(EventUnit(), c_unitStateHallucination) == false) && (UnitHasBehavior2(EventUnit(), "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(EventPlayer(), libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI_StasisOverlay.StormCutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroChoMoltenBlockOverlayOn_Init () {
    libHCHO_gt_HeroChoMoltenBlockOverlayOn = TriggerCreate("libHCHO_gt_HeroChoMoltenBlockOverlayOn_Func");
    TriggerEnable(libHCHO_gt_HeroChoMoltenBlockOverlayOn, false);
    TriggerAddEventUnitBehaviorChange(libHCHO_gt_HeroChoMoltenBlockOverlayOn, null, "ChoTalentMoltenBlock", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Cho - Molten Block Overlay Off
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroChoMoltenBlockOverlayOff_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(EventPlayer(), "Cutscenes\\GameUI_StasisOverlay.StormCutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroChoMoltenBlockOverlayOff_Init () {
    libHCHO_gt_HeroChoMoltenBlockOverlayOff = TriggerCreate("libHCHO_gt_HeroChoMoltenBlockOverlayOff_Func");
    TriggerEnable(libHCHO_gt_HeroChoMoltenBlockOverlayOff, false);
    TriggerAddEventUnitBehaviorChange(libHCHO_gt_HeroChoMoltenBlockOverlayOff, null, "ChoTalentMoltenBlock", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hurry Up Oaf - Cho Cooldown Behavior modifier - temp - delete me after ui support
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HurryUpOafChoCooldownBehaviormodifiertempdeletemeafteruisupport_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_choGallTeamID;
    fixed lv_cooldownBehaviorDuration;
    string lv_cooldownLink;

    // Variable Initialization
    lv_choGallTeamID = libGame_gf_TeamNumberOfPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));

    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) == libGDHL_gv_chogallPairs[lv_choGallTeamID].lv_gallUnit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, "GallHurryUpOaf", "Cost[" + IntToString(0) + "].Cooldown.Link", libGDHL_gv_chogallPairs[lv_choGallTeamID].lv_gallPlayer);
    lv_cooldownBehaviorDuration = UnitGetCooldown(libGDHL_gv_chogallPairs[lv_choGallTeamID].lv_gallUnit, lv_cooldownLink);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HurryUpOafChoCooldownBehaviormodifiertempdeletemeafteruisupport_Init () {
    libHCHO_gt_HurryUpOafChoCooldownBehaviormodifiertempdeletemeafteruisupport = TriggerCreate("libHCHO_gt_HurryUpOafChoCooldownBehaviormodifiertempdeletemeafteruisupport_Func");
    TriggerEnable(libHCHO_gt_HurryUpOafChoCooldownBehaviormodifiertempdeletemeafteruisupport, false);
    TriggerAddEventPlayerEffectUsed(libHCHO_gt_HurryUpOafChoCooldownBehaviormodifiertempdeletemeafteruisupport, c_playerAny, "GallTalentHurryUpOafSpurredOnwardModifyUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hurry Up Oaf - Mounted Disabler
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HurryUpOafMountedDisabler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_choGallPairsTeam;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroCho"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_choGallPairsTeam = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()));
    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        UnitBehaviorAddPlayer(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit, "GallChoMountedMonitor", libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_choPlayer, 1);
    }
    else {
        UnitBehaviorRemove(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit, "GallChoMountedMonitor", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HurryUpOafMountedDisabler_Init () {
    libHCHO_gt_HurryUpOafMountedDisabler = TriggerCreate("libHCHO_gt_HurryUpOafMountedDisabler_Func");
    TriggerEnable(libHCHO_gt_HurryUpOafMountedDisabler, false);
    TriggerAddEventUnitBehaviorChange(libHCHO_gt_HurryUpOafMountedDisabler, null, "Mounted", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Surging Fist - Fake Cast Activated
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_SurgingFistFakeCastActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_cho;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cho = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    libHCHO_gv_surgingFistActiveFlag[UnitGetOwner(lv_cho)] = true;
    libHCHO_gv_surgingFistActiveCasters = (libHCHO_gv_surgingFistActiveCasters + 1);
    TriggerEnable(libHCHO_gt_SurgingFistMouseTracker, true);
    while ((UnitHasBehavior2(lv_cho, "ChoSurgingFistInitialFakeCast") == true)) {
        Wait(0.0625, c_timeGame);
    }
    TriggerEnable(libHCHO_gt_SurgingFistExecuteChargetomouse, true);
    while ((UnitHasBehavior2(lv_cho, "ChoSurgingFistFakeChannel") == true)) {
        Wait(0.0625, c_timeGame);
    }
    libHCHO_gv_surgingFistActiveFlag[UnitGetOwner(lv_cho)] = false;
    libHCHO_gv_surgingFistActiveCasters = (libHCHO_gv_surgingFistActiveCasters - 1);
    if ((libHCHO_gv_surgingFistActiveCasters == 0)) {
        TriggerEnable(libHCHO_gt_SurgingFistMouseTracker, false);
        TriggerEnable(libHCHO_gt_SurgingFistExecuteChargetomouse, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_SurgingFistFakeCastActivated_Init () {
    libHCHO_gt_SurgingFistFakeCastActivated = TriggerCreate("libHCHO_gt_SurgingFistFakeCastActivated_Func");
    TriggerEnable(libHCHO_gt_SurgingFistFakeCastActivated, false);
    TriggerAddEventPlayerEffectUsed(libHCHO_gt_SurgingFistFakeCastActivated, c_playerAny, "ChoSurgingFistApplyInitialFakeCastBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Surging Fist - Mouse Tracker
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_SurgingFistMouseTracker_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libHCHO_gv_surgingFistActiveFlag[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libHCHO_gv_surgingFistMousePosition[EventPlayer()] = Point(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_SurgingFistMouseTracker_Init () {
    libHCHO_gt_SurgingFistMouseTracker = TriggerCreate("libHCHO_gt_SurgingFistMouseTracker_Func");
    TriggerEnable(libHCHO_gt_SurgingFistMouseTracker, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Surging Fist Execute Charge to mouse
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_SurgingFistExecuteChargetomouse_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitBehaviorCount(libGame_gv_players[EventPlayer()].lv_heroUnit, "ChoSurgingFistFakeChannel") == 1) || (UnitBehaviorCount(libGame_gv_players[EventPlayer()].lv_activeVehicle, "ChoSurgingFistFakeChannel") == 1)))) {
            return false;
        }

        if (!((libHCHO_gv_surgingFistActiveFlag[EventPlayer()] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libGame_gv_players[EventPlayer()].lv_heroUnit) == "HeroAbathur")) {
        UnitIssueOrder(libGame_gv_players[EventPlayer()].lv_activeVehicle, OrderTargetingPoint(AbilityCommand("ChoSurgingFistExecute", 0), libHCHO_gv_surgingFistMousePosition[EventPlayer()]), c_orderQueueReplace);
    }
    else {
        UnitIssueOrder(libGame_gv_players[EventPlayer()].lv_heroUnit, OrderTargetingPoint(AbilityCommand("ChoSurgingFistExecute", 0), libHCHO_gv_surgingFistMousePosition[EventPlayer()]), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_SurgingFistExecuteChargetomouse_Init () {
    libHCHO_gt_SurgingFistExecuteChargetomouse = TriggerCreate("libHCHO_gt_SurgingFistExecuteChargetomouse_Func");
    TriggerEnable(libHCHO_gt_SurgingFistExecuteChargetomouse, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Surging Fist - Roots On - Monitor
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_SurgingFistRootsOnMonitor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pairsTeamID;

    // Variable Initialization
    lv_pairsTeamID = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()));

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((libHCHO_gv_surgingFistActiveFlag[UnitGetOwner(EventUnit())] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilityEnable(EventUnit(), "ChoSurgingFistTrigger", false);
    libHCHO_gv_surgingFistActiveFlag[UnitGetOwner(EventUnit())] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_SurgingFistRootsOnMonitor_Init () {
    libHCHO_gt_SurgingFistRootsOnMonitor = TriggerCreate("libHCHO_gt_SurgingFistRootsOnMonitor_Func");
    TriggerEnable(libHCHO_gt_SurgingFistRootsOnMonitor, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libHCHO_gt_SurgingFistRootsOnMonitor, null, c_behaviorCategoryUser5, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libHCHO_gt_SurgingFistRootsOnMonitor, null, c_behaviorCategoryUser5, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Surging Fist - Roots Off - Monitor
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_SurgingFistRootsOffMonitor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pairsTeamID;

    // Variable Initialization
    lv_pairsTeamID = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()));

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior2(EventUnit(), "ChoSurgingFistFakeChannel") == true) || (UnitHasBehavior2(EventUnit(), "ChoSurgingFistInitialFakeCast") == true))) {
        libHCHO_gv_surgingFistActiveFlag[UnitGetOwner(EventUnit())] = true;
    }

    UnitAbilityEnable(EventUnit(), "ChoSurgingFistTrigger", true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_SurgingFistRootsOffMonitor_Init () {
    libHCHO_gt_SurgingFistRootsOffMonitor = TriggerCreate("libHCHO_gt_SurgingFistRootsOffMonitor_Func");
    TriggerEnable(libHCHO_gt_SurgingFistRootsOffMonitor, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libHCHO_gt_SurgingFistRootsOffMonitor, null, c_behaviorCategoryUser5, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gall - Rune Bomb - Behavior Timer Controller
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_GallRuneBombBehaviorTimerControllerTrigger_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_runeBomb;
    int lv_playerNumber;

    // Variable Initialization
    lv_runeBomb = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_playerNumber = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));

    // Conditions
    if (testConds) {
        if (!((libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_playerNumber)].lv_gallUnit != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libHCHO_gf_GallRuneBombBeahviorTimerController(lv_playerNumber, lv_runeBomb);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_GallRuneBombBehaviorTimerControllerTrigger_Init () {
    libHCHO_gt_GallRuneBombBehaviorTimerControllerTrigger = TriggerCreate("libHCHO_gt_GallRuneBombBehaviorTimerControllerTrigger_Func");
    TriggerEnable(libHCHO_gt_GallRuneBombBehaviorTimerControllerTrigger, false);
    TriggerAddEventPlayerEffectUsed(libHCHO_gt_GallRuneBombBehaviorTimerControllerTrigger, c_playerAny, "ChoTalentRollbackReturnMissileSearchPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Cho - Rune Bomb - Spawn
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_ChoRuneBombSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_choGallPairsTeam;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_choGallPairsTeam = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    if ((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_choPlayer)) {
        UnitCreateEffectUnit(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit, "GallRunicBlastRuneBombVisibilityLink", EventPlayerEffectUsedUnit(c_effectUnitSource));
    }
    else {
        UnitCreateEffectUnit(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit, "ChoRuneBombApplyDetonationImmunity", EventPlayerEffectUsedUnit(c_effectUnitSource));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_ChoRuneBombSpawn_Init () {
    libHCHO_gt_ChoRuneBombSpawn = TriggerCreate("libHCHO_gt_ChoRuneBombSpawn_Func");
    TriggerEnable(libHCHO_gt_ChoRuneBombSpawn, false);
    TriggerAddEventPlayerEffectUsed(libHCHO_gt_ChoRuneBombSpawn, c_playerAny, "ChoRuneBombFindGallSetupOrbDetonation");
    TriggerAddEventPlayerEffectUsed(libHCHO_gt_ChoRuneBombSpawn, c_playerAny, "ChoRuneBombTalentRollbackFindGallSetupReturnOrbDetonation");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gall - Rune Bomb - Detonation - Cooldown Control
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_GallRuneBombDetonationCooldownControl_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_choGallPairsTeam;
    fixed lv_time;
    string lv_cooldownLink;
    string lv_cooldownLink2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "ChoRuneBombImpactDummy") && (PlayerHasTalent(EventPlayer(), "ChoRollback") == true)) {
    }
    else {
        lv_choGallPairsTeam = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
        lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, "ChoRuneBomb", "Cost[" + IntToString(0) + "].Cooldown.Link", libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_choPlayer);
        lv_time = UnitGetCooldown(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_choUnit, lv_cooldownLink);
        lv_cooldownLink2 = CatalogFieldValueGet(c_gameCatalogAbil, "GallRunicBlast", "Cost[" + IntToString(0) + "].Cooldown.Link", libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallPlayer);
        UnitModifyCooldown(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit, lv_cooldownLink2, lv_time, c_cooldownOperationSet);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_GallRuneBombDetonationCooldownControl_Init () {
    libHCHO_gt_GallRuneBombDetonationCooldownControl = TriggerCreate("libHCHO_gt_GallRuneBombDetonationCooldownControl_Func");
    TriggerEnable(libHCHO_gt_GallRuneBombDetonationCooldownControl, false);
    TriggerAddEventPlayerEffectUsed(libHCHO_gt_GallRuneBombDetonationCooldownControl, c_playerAny, "GallRunicBlastOrbImpactSet");
    TriggerAddEventPlayerEffectUsed(libHCHO_gt_GallRuneBombDetonationCooldownControl, c_playerAny, "ChoTalentRollbackReturnMissileImpactDummy");
    TriggerAddEventPlayerEffectUsed(libHCHO_gt_GallRuneBombDetonationCooldownControl, c_playerAny, "ChoRuneBombTalentRunicFeedbackModifyCooldown");
    TriggerAddEventPlayerEffectUsed(libHCHO_gt_GallRuneBombDetonationCooldownControl, c_playerAny, "ChoRuneBombImpactDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Init - Misc Mod Initialization
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_InitMiscModInitialization_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_DataHeroesAddManualSpawnHero(libCore_gf_GetIndexFromHero("Gall"), true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_InitMiscModInitialization_Init () {
    libHCHO_gt_InitMiscModInitialization = TriggerCreate("libHCHO_gt_InitMiscModInitialization_Func");
    libCore_gf_IncludeModInitialization(libHCHO_gt_InitMiscModInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Cho'Gall - Video Swap Cheat
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_DEBUGChoGallVideoSwapCheat_Func (bool testConds, bool runActions) {
    int auto585F311C_ae;
    int auto585F311C_ai;

    // Variable Declarations
    int lv_initialGallPlayerID;
    int lv_initialChoPlayerID;
    unit lv_gallUnit;
    unit lv_choUnit;
    int lv_choGallTeamID;
    int[8] lv_savedTalentsCho;
    int[8] lv_savedTalentsGall;
    int lv_itTalent;
    int lv_numberOfPreviousTalents;
    int lv_savedScore;

    // Variable Initialization
    lv_choGallTeamID = libGame_gf_TeamNumberOfPlayer(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((libGDHL_gv_chogallPairs[lv_choGallTeamID].lv_choUnit != null))) {
            return false;
        }

        if (!((libGDHL_gv_chogallPairs[lv_choGallTeamID].lv_gallUnit != null))) {
            return false;
        }

        if (!(((UnitGetType(libGame_gv_players[EventPlayer()].lv_heroUnit) == "HeroCho") || (UnitGetType(libGame_gv_players[EventPlayer()].lv_heroUnit) == "HeroGall")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_choGallTeamID = libGame_gf_TeamNumberOfPlayer(lv_choGallTeamID);
    lv_initialChoPlayerID = libGDHL_gv_chogallPairs[lv_choGallTeamID].lv_choPlayer;
    lv_initialGallPlayerID = libGDHL_gv_chogallPairs[lv_choGallTeamID].lv_gallPlayer;
    lv_gallUnit = libGDHL_gv_chogallPairs[lv_choGallTeamID].lv_gallUnit;
    lv_choUnit = libGDHL_gv_chogallPairs[lv_choGallTeamID].lv_choUnit;
    libGame_gv_players[lv_initialChoPlayerID].lv_heroUnit = lv_gallUnit;
    libGame_gv_players[lv_initialGallPlayerID].lv_heroUnit = lv_choUnit;
    libGame_gv_players[lv_initialChoPlayerID].lv_heroIndex = libCore_gf_GetIndexFromHero("Gall");
    libGame_gv_players[lv_initialChoPlayerID].lv_heroRequiresCustomRespawn = true;
    libGame_gv_players[lv_initialGallPlayerID].lv_heroIndex = libCore_gf_GetIndexFromHero("Cho");
    libGame_gv_players[lv_initialGallPlayerID].lv_heroRequiresCustomRespawn = false;
    auto585F311C_ae = 7;
    auto585F311C_ai = 1;
    lv_itTalent = 1;
    for ( ; ( (auto585F311C_ai >= 0 && lv_itTalent <= auto585F311C_ae) || (auto585F311C_ai <= 0 && lv_itTalent >= auto585F311C_ae) ) ; lv_itTalent += auto585F311C_ai ) {
        lv_savedTalentsGall[lv_itTalent] = libGame_gv_talents_TalentChoices[lv_initialGallPlayerID][lv_itTalent].lv_selection;
        lv_savedTalentsCho[lv_itTalent] = libGame_gv_talents_TalentChoices[lv_initialChoPlayerID][lv_itTalent].lv_selection;
    }
    PlayerSetHero(lv_initialGallPlayerID, "Cho");
    UnitSetOwner(lv_choUnit, lv_initialGallPlayerID, true);
    UnitGroupClear(libGame_gv_players[lv_initialGallPlayerID].lv_heroUnitGroup);
    UnitGroupAdd(libGame_gv_players[lv_initialGallPlayerID].lv_heroUnitGroup, lv_choUnit);
    UnitSelect(lv_gallUnit, lv_initialGallPlayerID, false);
    UnitSelect(libGame_gv_players[lv_initialGallPlayerID].lv_heroUnit, lv_initialGallPlayerID, true);
    libGame_gv_players[lv_initialGallPlayerID].lv_heroIndex = libCore_gf_GetIndexFromHero("Cho");
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(libGame_gv_players[lv_initialGallPlayerID].lv_heroUnit, lv_initialGallPlayerID);
    libUIUI_gf_UIUpdateEventPlayerStatsChange(lv_initialGallPlayerID);
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(libGame_gv_players[lv_initialGallPlayerID].lv_heroUnit, lv_initialGallPlayerID);
    libGame_gf_TalentsSetupTalentChoicesFromHeroDataForPlayer(libGame_gv_players[lv_initialGallPlayerID].lv_heroIndex, lv_initialGallPlayerID);
    UISetCommandAllowed(PlayerGroupSingle(lv_initialGallPlayerID), c_uiCommandAllowQueue, true);
    PlayerSetHero(lv_initialChoPlayerID, "Gall");
    UnitSetOwner(lv_gallUnit, lv_initialChoPlayerID, true);
    UnitGroupClear(libGame_gv_players[lv_initialChoPlayerID].lv_heroUnitGroup);
    UnitGroupAdd(libGame_gv_players[lv_initialChoPlayerID].lv_heroUnitGroup, lv_gallUnit);
    UnitSelect(lv_choUnit, lv_initialChoPlayerID, false);
    UnitSelect(libGame_gv_players[lv_initialChoPlayerID].lv_heroUnit, lv_initialChoPlayerID, true);
    libGame_gv_players[lv_initialChoPlayerID].lv_heroIndex = libCore_gf_GetIndexFromHero("Gall");
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(libGDHL_gv_chogallPairs[lv_choGallTeamID].lv_choUnit, lv_initialChoPlayerID);
    if ((libUIUI_gv_uIHeroStatusFrames[lv_initialChoPlayerID].lv_unitCount > 0)) {
        libUIUI_gv_uIHeroStatusFrames[lv_initialChoPlayerID].lv_unitCount -= 1;
    }

    libUIUI_gf_UIUnitStatusFramesUpdateUnitStatusFramesForUnit(lv_initialChoPlayerID, lv_choUnit);
    libGame_gv_players[lv_initialChoPlayerID].lv_unitStatusBarsMonitorUnit_StunDeath = lv_choUnit;
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame, libGame_gv_players[lv_initialChoPlayerID].lv_unitStatusBarsMonitorUnit_StunDeath, libCore_gv_playerGroupFromPlayer[lv_initialChoPlayerID]);
    libGame_gv_players[lv_initialChoPlayerID].lv_unitStatusBarsMonitorUnit_Channel = lv_gallUnit;
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_heroConsoleUnitStatusBars.lv_castChannelBarParentFrame, libGame_gv_players[lv_initialChoPlayerID].lv_unitStatusBarsMonitorUnit_Channel, libCore_gv_playerGroupFromPlayer[lv_initialChoPlayerID]);
    libGame_gv_players[lv_initialChoPlayerID].lv_unitStatusBarsMonitorUnit_Behavior = lv_gallUnit;
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame, libGame_gv_players[lv_initialChoPlayerID].lv_unitStatusBarsMonitorUnit_Behavior, libCore_gv_playerGroupFromPlayer[lv_initialChoPlayerID]);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrameRight, libGame_gv_players[lv_initialChoPlayerID].lv_unitStatusBarsMonitorUnit_Behavior, libCore_gv_playerGroupFromPlayer[lv_initialChoPlayerID]);
    libUIUI_gf_UIHeroConsoleShowHideForPlayer(true, lv_initialChoPlayerID);
    UISetCommandAllowed(PlayerGroupSingle(lv_initialChoPlayerID), c_uiCommandAllowQueue, false);
    libGDHL_gv_chogallPairs[lv_choGallTeamID].lv_choPlayer = lv_initialGallPlayerID;
    libGDHL_gv_chogallPairs[lv_choGallTeamID].lv_gallPlayer = lv_initialChoPlayerID;
    UnitCreateEffectUnit(libGDHL_gv_chogallPairs[lv_choGallTeamID].lv_gallUnit, "ChoGallLinkUnitsDummyEffect", lv_choUnit);
    UnitBehaviorRemove(lv_gallUnit, "GallIAMHurryingCarry", 1);
    PlayerScoreValueSetFromInt(lv_initialChoPlayerID, "GenericHeroTalentStackCounter", PlayerScoreValueGetAsInt(lv_initialGallPlayerID, "GenericHeroTalentStackCounter"));
    PlayerScoreValueSetFromInt(lv_initialGallPlayerID, "GenericHeroTalentStackCounter", 0);
    libGame_gf_TalentsRespecHeroForPlayer(lv_initialGallPlayerID);
    libGame_gf_TalentsRespecHeroForPlayer(lv_initialChoPlayerID);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_DEBUGChoGallVideoSwapCheat_Init () {
    libHCHO_gt_DEBUGChoGallVideoSwapCheat = TriggerCreate("libHCHO_gt_DEBUGChoGallVideoSwapCheat_Func");
    TriggerEnable(libHCHO_gt_DEBUGChoGallVideoSwapCheat, false);
    TriggerAddEventChatMessage(libHCHO_gt_DEBUGChoGallVideoSwapCheat, c_playerAny, "swapchogall", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Cho'Gall - Swap and Respawn
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroChoGallSwapandRespawn_Func (bool testConds, bool runActions) {
    int auto9411708E_ae;
    int auto9411708E_ai;

    // Variable Declarations
    bool lv_aIRequiresRestart;
    int lv_choGallTeamID;
    int lv_itTalent;
    int lv_localPlayer;
    int lv_nonLocalPlayer;
    fixed lv_xPValue;
    int lv_numberOfPreviousTalents;

    // Variable Initialization
    lv_choGallTeamID = libGame_gf_TeamNumberOfPlayer(libGame_gf_TryMeCustomButton1PressedPlayer());
    lv_localPlayer = libGame_gf_TryMeCustomButton1PressedPlayer();

    // Conditions
    if (testConds) {
        if (!(((libCore_gv_dEBUGDebuggingEnabled == true) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_TryMe)))) {
            return false;
        }

        if (!(((PlayerHero(lv_localPlayer) == "Cho") || (PlayerHero(lv_localPlayer) == "Gall")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libHCHO_gv_tryMeChoGallIsSwapping = true;
    if ((libGDHL_gv_chogallPairs[lv_choGallTeamID].lv_choPlayer == lv_localPlayer)) {
        lv_nonLocalPlayer = libGDHL_gv_chogallPairs[lv_choGallTeamID].lv_gallPlayer;
    }
    else {
        lv_nonLocalPlayer = libGDHL_gv_chogallPairs[lv_choGallTeamID].lv_choPlayer;
    }
    libAIAI_gf_HeroAIDisableAIForPlayer(lv_nonLocalPlayer);
    auto9411708E_ae = 7;
    auto9411708E_ai = 1;
    lv_itTalent = 1;
    for ( ; ( (auto9411708E_ai >= 0 && lv_itTalent <= auto9411708E_ae) || (auto9411708E_ai <= 0 && lv_itTalent >= auto9411708E_ae) ) ; lv_itTalent += auto9411708E_ai ) {
        libHCHO_gv_choGallSwapandRespawnSavedTalents[lv_itTalent] = libGame_gv_talents_TalentChoices[lv_localPlayer][lv_itTalent].lv_selection;
    }
    lv_xPValue = UnitGetPropertyFixed(libGame_gv_players[lv_localPlayer].lv_heroUnit, c_unitPropXP, c_unitPropCurrent);
    libGame_gf_RemoveLevelUpHeroStatsForPlayer("HeroGall", libGDHL_gv_chogallPairs[lv_choGallTeamID].lv_gallPlayer);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Cho"), libGame_gv_players[lv_localPlayer].lv_selectedSkin, libGame_gv_players[lv_localPlayer].lv_selectedMount, lv_xPValue, libGDHL_gv_chogallPairs[lv_choGallTeamID].lv_gallPlayer, 0);
    libGame_gf_RemoveLevelUpHeroStatsForPlayer("HeroGall", libGDHL_gv_chogallPairs[lv_choGallTeamID].lv_choPlayer);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Gall"), libGame_gv_players[lv_localPlayer].lv_selectedSkin, libGame_gv_players[lv_localPlayer].lv_selectedMount, lv_xPValue, libGDHL_gv_chogallPairs[lv_choGallTeamID].lv_choPlayer, 0);
    libHCHO_gv_tryMeChoGallIsSwapping = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroChoGallSwapandRespawn_Init () {
    libHCHO_gt_HeroChoGallSwapandRespawn = TriggerCreate("libHCHO_gt_HeroChoGallSwapandRespawn_Func");
    TriggerEnable(libHCHO_gt_HeroChoGallSwapandRespawn, false);
    libGame_gf_TryMeCustomButton1Pressed(libHCHO_gt_HeroChoGallSwapandRespawn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Cho'gall - Cho Spawn
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroChogallChoSpawn_Func (bool testConds, bool runActions) {
    int auto1D2EA5CE_n;
    int auto1D2EA5CE_i;
    playergroup autoBC35E908_g;
    int autoBC35E908_p;

    // Variable Declarations
    int lv_playerID;
    int lv_itPlayer;
    bool lv_gallFound;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(libGame_gv_players[libGame_gf_HeroSpawnPlayer()].lv_heroUnit) == "HeroCho") || (UnitGetType(libGame_gv_players[libGame_gf_HeroSpawnPlayer()].lv_heroUnit) == "HeroAbathur")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerID = libGame_gf_HeroSpawnPlayer();
    TriggerAddEventMouseMoved(libHCHO_gt_SurgingFistMouseTracker, lv_playerID);
    TriggerAddEventMouseClicked(libHCHO_gt_SurgingFistExecuteChargetomouse, lv_playerID, c_mouseButtonLeft,true);
    TriggerAddEventPlayerEffectUsed(libHCHO_gt_SurgingFistExecuteChargetomouse, lv_playerID,"ChoSurgingFistTriggerDummyEffect");
    if (((UnitGetType(libGame_gv_players[lv_playerID].lv_activeVehicle) == "HeroCho") || (UnitGetType(libGame_gv_players[lv_playerID].lv_heroUnit) == "HeroCho"))) {
        libGame_gv_players[lv_playerID].lv_heroUsesAnnouncementAlias = true;
        libGame_gv_players[lv_playerID].lv_heroAnnouncementAliasText = StringExternal("Param/Value/lib_HCHO_6C6EBBEC");
        libGame_gv_players[lv_playerID].lv_heroAnnouncementAliasIcon = "Assets\\Textures\\storm_ui_icon_cho_twoheaded.dds";
    }

    if ((UnitGetType(libGame_gv_players[libGame_gf_HeroSpawnPlayer()].lv_heroUnit) == "HeroAbathur")) {
        return true;
    }

    if ((libHCHO_gv_tryMeChoGallIsSwapping == false) && (libCore_gv_sYSGameMode == libCore_ge_GameModes_TryMe) && (lv_playerID == 1)) {
        libGame_gv_players[3].lv_selectedSkin = libGame_gv_players[lv_playerID].lv_selectedSkin;
        libGame_gv_players[3].lv_selectedMount = libGame_gv_players[lv_playerID].lv_selectedMount;
        if ((libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_playerID)].lv_gallUnit != null)) {
            libGame_gf_RemoveLevelUpHeroStatsForPlayer("HeroGall", libHCHO_gv_tryMe_ChoGall_PairedPlayer_C);
        }

        libGame_gf_SendEventManualHeroSpawn(3, libCore_gf_GetIndexFromHero("Gall"), UnitGetPropertyFixed(libGame_gv_players[libGame_gf_HeroSpawnPlayer()].lv_heroUnit, c_unitPropXP, c_unitPropCurrent));
        lv_gallFound = true;
    }

    if ((lv_playerID == libHCHO_gv_tryMe_ChoGall_PairedPlayer_C) && (libCore_gv_sYSGameMode == libCore_ge_GameModes_TryMe) && ((libHCHO_gv_tryMeChoGallIsSwapping == false) || (libHCHO_gv_tryMeChoGallAIRequiresRestart == true))) {
        lv_gallFound = true;
        libHCHO_gf_ChoGallSwapandRespawnApplySavedTalents(3);
        libAIAI_gf_HeroAIEnableAIForPlayer(3);
        libHCHO_gv_tryMeChoGallAIRequiresRestart = false;
    }

    if ((libCore_gv_sYSGameMode != libCore_ge_GameModes_TryMe) && (lv_gallFound == false) && (libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_playerID)].lv_gallPlayer == 0)) {
        auto1D2EA5CE_n = (libCore_gv_bALMaxPlayersOnATeam + 1);
        for (auto1D2EA5CE_i = 1; auto1D2EA5CE_i <= auto1D2EA5CE_n; auto1D2EA5CE_i += 1) {
            autoBC35E908_g = libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_playerID)].lv_teamPlayerGroup; 
            autoBC35E908_p = 1;
            for ( ; autoBC35E908_p <= PlayerGroupCount(autoBC35E908_g) ; autoBC35E908_p += (lv_itPlayer == PlayerGroupPlayer(autoBC35E908_g, autoBC35E908_p)) ) {
                lv_itPlayer = PlayerGroupPlayer(autoBC35E908_g, autoBC35E908_p);
                if ((UnitGetType(libGame_gv_players[lv_itPlayer].lv_heroUnit) == "HeroGall")) {
                    lv_gallFound = true;
                    break;
                }

            }
            if ((lv_gallFound == true)) {
                break;
            }
            else {
                Wait(libGame_gv_individualHeroSpawnMiniDelay_C, c_timeGame);
            }
        }
    }

    if ((libCore_gv_sYSGameMode != libCore_ge_GameModes_TryMe) && (libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_playerID)].lv_gallPlayer == 0) && (lv_gallFound == false)) {
        if ((libCore_gv_dEBUGDebuggingEnabled == true)) {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_HCHO_884CA74A"), true);
        }
        else {
            StatEventCreate("ChoGall Cho Spawn Error");
            StatEventAddDataInt(StatEventLastCreated(), "PlayerID", lv_playerID);
            StatEventSend(StatEventLastCreated());
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroChogallChoSpawn_Init () {
    libHCHO_gt_HeroChogallChoSpawn = TriggerCreate("libHCHO_gt_HeroChogallChoSpawn_Func");
    libGame_gf_HeroSpawn(libHCHO_gt_HeroChogallChoSpawn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Cho'gall - Gall Spawn
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroChogallGallSpawn_Func (bool testConds, bool runActions) {
    int auto2CC7223C_ae;
    int auto2CC7223C_ai;
    int auto0DD2DD44_n;
    int auto0DD2DD44_i;
    playergroup auto62352D2D_g;
    int auto62352D2D_p;

    // Variable Declarations
    int lv_numberOfPreviousTalents;
    int[8] lv_tryMeSavedChoTalents;
    int lv_itTalent;
    fixed lv_debugXPValue;
    int lv_itAlliedPlayer;
    playergroup lv_gallAlliedPlayerGroup;
    int lv_chogallTeam;
    int lv_choPlayer;
    int lv_gallPlayer;
    unit lv_choUnit;
    bool lv_choUnitFound;
    int lv_choMountCount;
    int lv_itMount;
    int[33] lv_choMountArray;
    int lv_gallIndex;

    // Variable Initialization
    lv_debugXPValue = libGame_gf_ManualHeroSpawnDebugXP();
    lv_gallAlliedPlayerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libGame_gf_ManualHeroSpawnHeroID() == libCore_gf_GetIndexFromHero("Gall")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_gallPlayer = libGame_gf_ManualHeroSpawnPlayer();
    lv_chogallTeam = libGame_gf_TeamNumberOfPlayer(lv_gallPlayer);
    lv_gallAlliedPlayerGroup = libGame_gv_teams[lv_chogallTeam].lv_teamPlayerGroup;
    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_TryMe) && (lv_gallPlayer == 1) && (libGDHL_gv_chogallPairs[lv_chogallTeam].lv_choUnit == null) && (libHCHO_gv_tryMeChoGallIsSwapping == false)) {
        lv_choPlayer = libHCHO_gv_tryMe_ChoGall_PairedPlayer_C;
        libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Cho"), libGame_gv_players[lv_gallPlayer].lv_selectedSkin, libGame_gv_players[lv_gallPlayer].lv_selectedMount, lv_debugXPValue, lv_choPlayer, 0);
        lv_choUnitFound = true;
    }

    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_TryMe) && (lv_gallPlayer == 1) && (libGDHL_gv_chogallPairs[lv_chogallTeam].lv_choUnit != null) && (lv_debugXPValue != UnitGetPropertyFixed(libGDHL_gv_chogallPairs[lv_chogallTeam].lv_choUnit, c_unitPropXP, c_unitPropCurrent)) && (libHCHO_gv_tryMeChoGallIsSwapping == false)) {
        lv_choPlayer = libHCHO_gv_tryMe_ChoGall_PairedPlayer_C;
        auto2CC7223C_ae = 7;
        auto2CC7223C_ai = 1;
        lv_itTalent = 1;
        for ( ; ( (auto2CC7223C_ai >= 0 && lv_itTalent <= auto2CC7223C_ae) || (auto2CC7223C_ai <= 0 && lv_itTalent >= auto2CC7223C_ae) ) ; lv_itTalent += auto2CC7223C_ai ) {
            lv_tryMeSavedChoTalents[lv_itTalent] = libGame_gv_talents_TalentChoices[lv_choPlayer][lv_itTalent].lv_selection;
        }
        libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Cho"), libGame_gv_players[lv_gallPlayer].lv_selectedSkin, libGame_gv_players[lv_gallPlayer].lv_selectedMount, lv_debugXPValue, lv_choPlayer, 0);
        lv_choUnitFound = true;
    }

    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_TryMe) && (lv_gallPlayer == 1) && (libGDHL_gv_chogallPairs[lv_chogallTeam].lv_choUnit != null) && (lv_debugXPValue == UnitGetPropertyFixed(libGDHL_gv_chogallPairs[lv_chogallTeam].lv_choUnit, c_unitPropXP, c_unitPropCurrent)) && (libHCHO_gv_tryMeChoGallIsSwapping == true)) {
        libGame_gf_RemoveLevelUpHeroStatsForPlayer("HeroGall", lv_gallPlayer);
        libGame_gf_RemoveLevelUpHeroStatsForPlayer("HeroCho", lv_gallPlayer);
        libGame_gf_RemoveLevelUpHeroStatsForPlayer("HeroGall", lv_choPlayer);
        libGame_gf_RemoveLevelUpHeroStatsForPlayer("HeroCho", lv_choPlayer);
        lv_choPlayer = libHCHO_gv_tryMe_ChoGall_PairedPlayer_C;
        lv_choUnitFound = true;
    }

    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_TryMe) && (lv_gallPlayer == libHCHO_gv_tryMe_ChoGall_PairedPlayer_C)) {
        lv_choPlayer = 1;
        lv_choUnitFound = true;
    }

    if ((lv_choUnitFound == false)) {
        auto0DD2DD44_n = (libCore_gv_bALMaxPlayersOnATeam + 1);
        for (auto0DD2DD44_i = 1; auto0DD2DD44_i <= auto0DD2DD44_n; auto0DD2DD44_i += 1) {
            auto62352D2D_g = lv_gallAlliedPlayerGroup; 
            auto62352D2D_p = 1;
            for ( ; auto62352D2D_p <= PlayerGroupCount(auto62352D2D_g) ; auto62352D2D_p += (lv_itAlliedPlayer == PlayerGroupPlayer(auto62352D2D_g, auto62352D2D_p)) ) {
                lv_itAlliedPlayer = PlayerGroupPlayer(auto62352D2D_g, auto62352D2D_p);
                if (((UnitGetType(libGame_gv_players[lv_itAlliedPlayer].lv_heroUnit) == "HeroCho") && (lv_itAlliedPlayer != lv_gallPlayer))) {
                    lv_choPlayer = lv_itAlliedPlayer;
                    lv_choUnitFound = true;
                    break;
                }

            }
            if ((lv_choUnitFound == true)) {
                break;
            }
            else {
                Wait(libGame_gv_individualHeroSpawnMiniDelay_C, c_timeGame);
            }
        }
    }

    if ((lv_choUnitFound == false)) {
        libCore_gf_DataClearHeroDataAtIndex(lv_gallPlayer);
        libCore_gf_DataLoadHeroDataIntoIndex(libCore_gf_GetHeroFromIndex(libGame_gf_HeroSelectionRandomlyPickAnyUnusedHero(lv_gallPlayer, true, false)), lv_gallPlayer);
        libGame_gf_SpawnHero(lv_gallPlayer, lv_gallPlayer, libGame_gv_players[lv_gallPlayer].lv_spawnPoint);
        StatEventCreate("ChoGall Gall Spawn Error");
        StatEventAddDataInt(StatEventLastCreated(), "PlayerID", lv_gallPlayer);
        StatEventSend(StatEventLastCreated());
        if ((PlayerType(lv_gallPlayer) == c_playerTypeComputer)) {
            libAIAI_gf_HeroAIEnableAIForPlayer(lv_gallPlayer);
        }

        return true;
    }

    if ((UnitIsValid(libGame_gv_players[lv_gallPlayer].lv_heroUnit) == true) && (UnitGetType(libGame_gv_players[lv_gallPlayer].lv_heroUnit) == "HeroGall")) {
        UnitRemove(libGame_gv_players[lv_gallPlayer].lv_heroUnit);
    }

    lv_choUnit = libGame_gv_players[lv_choPlayer].lv_heroUnit;
    libGDHL_gv_chogallPairs[lv_chogallTeam].lv_choPlayer = lv_choPlayer;
    libGDHL_gv_chogallPairs[lv_chogallTeam].lv_gallPlayer = lv_gallPlayer;
    libGDHL_gv_chogallPairs[lv_chogallTeam].lv_choUnit = lv_choUnit;
    libNtve_gf_CreateUnitsAtPoint2(1, "HeroGall", 0, lv_gallPlayer, UnitGetPosition(lv_choUnit));
    libGame_gv_players[lv_gallPlayer].lv_heroUnit = UnitLastCreated();
    libGDHL_gv_chogallPairs[lv_chogallTeam].lv_gallUnit = UnitLastCreated();
    libGame_gv_players[lv_gallPlayer].lv_heroRequiresCustomRespawn = true;
    UnitGroupClear(libGame_gv_players[lv_gallPlayer].lv_heroUnitGroup);
    UnitGroupAdd(libGame_gv_players[lv_gallPlayer].lv_heroUnitGroup, libGame_gv_players[lv_gallPlayer].lv_heroUnit);
    libGame_gv_players[lv_gallPlayer].lv_heroIndex = lv_gallPlayer;
    libGame_gv_players[lv_gallPlayer].lv_portraitIcon = libGame_gv_players[lv_gallPlayer].lv_heroData.lv_portrait;
    UnitGroupAdd(libGame_gv_heroes, libGame_gv_players[lv_gallPlayer].lv_heroUnit);
    UnitSelect(libGDHL_gv_chogallPairs[lv_chogallTeam].lv_gallUnit, lv_gallPlayer, true);
    libGame_gv_players[lv_gallPlayer].lv_playerStatus = libGame_ge_PlayerStatusStorm_Playing;
    libNtve_gf_SimpleLookAtStart(libGDHL_gv_chogallPairs[lv_chogallTeam].lv_choUnit, "FastHeadOnly", libNtve_gf_LookAtTargetFromUnitAttachPoint(libGDHL_gv_chogallPairs[lv_chogallTeam].lv_choUnit, "Ref_Attacher"));
    UnitCreateEffectUnit(libGDHL_gv_chogallPairs[lv_chogallTeam].lv_gallUnit, "ChoGallLinkUnitsDummyEffect", lv_choUnit);
    UnitCreateEffectUnit(lv_choUnit, "HeroGenericTimeStopListenerApplyBehavior", libGDHL_gv_chogallPairs[lv_chogallTeam].lv_gallUnit);
    libNtve_gf_SendActorMessageToUnit(lv_choUnit, "Signal GallReady");
    libCore_gf_DataHeroVOReloadHeroVODataForHero(lv_gallPlayer);
    libCore_gf_DataClearAnnouncerVOOverridesPlayer(lv_gallPlayer);
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(libGDHL_gv_chogallPairs[lv_chogallTeam].lv_choUnit, lv_gallPlayer);
    if ((libUIUI_gv_uIHeroStatusFrames[lv_gallPlayer].lv_unitCount > 0)) {
        libUIUI_gv_uIHeroStatusFrames[lv_gallPlayer].lv_unitCount -= 1;
    }

    libUIUI_gf_UIUnitStatusFramesUpdateUnitStatusFramesForUnit(lv_gallPlayer, lv_choUnit);
    libGame_gv_players[lv_gallPlayer].lv_unitStatusBarsMonitorUnit_StunDeath = libGDHL_gv_chogallPairs[lv_chogallTeam].lv_choUnit;
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame, libGame_gv_players[lv_gallPlayer].lv_unitStatusBarsMonitorUnit_StunDeath, libCore_gv_playerGroupFromPlayer[lv_gallPlayer]);
    libGame_gv_players[lv_gallPlayer].lv_unitStatusBarsMonitorUnit_Channel = libGDHL_gv_chogallPairs[lv_chogallTeam].lv_gallUnit;
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_heroConsoleUnitStatusBars.lv_castChannelBarParentFrame, libGame_gv_players[lv_gallPlayer].lv_unitStatusBarsMonitorUnit_Channel, libCore_gv_playerGroupFromPlayer[lv_gallPlayer]);
    libGame_gv_players[lv_gallPlayer].lv_unitStatusBarsMonitorUnit_Behavior = libGDHL_gv_chogallPairs[lv_chogallTeam].lv_gallUnit;
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame, libGame_gv_players[lv_gallPlayer].lv_unitStatusBarsMonitorUnit_Behavior, libCore_gv_playerGroupFromPlayer[lv_gallPlayer]);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrameRight, libGame_gv_players[lv_gallPlayer].lv_unitStatusBarsMonitorUnit_Behavior, libCore_gv_playerGroupFromPlayer[lv_gallPlayer]);
    libUIUI_gf_UIHeroConsoleShowHideForPlayer(true, lv_gallPlayer);
    if ((libNtve_gf_PlayerInCinematicMode(lv_gallPlayer) == false)) {
        UISetMode(libCore_gv_playerGroupFromPlayer[lv_gallPlayer], c_uiModeConsole, c_transitionDurationImmediate);
        libUIUI_gf_TopBarPanelShowHideForPlayer(true, lv_gallPlayer);
        libUIUI_gf_UIGameUIShowHideConsolePanelForPlayer(true, lv_gallPlayer);
    }

    lv_gallIndex = lv_gallPlayer;
    PlayerSetHero(lv_gallPlayer, libGame_gv_players[lv_gallIndex].lv_heroData.lv_heroCatalogLink);
    StatEventCreate("PlayerSpawned");
    StatEventAddDataInt(StatEventLastCreated(), "PlayerID", lv_gallPlayer);
    StatEventAddDataString(StatEventLastCreated(), "Hero", (libGame_gv_players[lv_gallIndex].lv_heroData.lv_unitType));
    StatEventSend(StatEventLastCreated());
    libGame_gv_players[lv_gallPlayer].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[lv_gallPlayer].lv_heroUnitGroup;
    libGame_gf_CameraUpdateCameraForPlayer(lv_gallPlayer);
    libGame_gf_GrantXPToPlayer(UnitGetPropertyFixed(libGame_gv_players[lv_choPlayer].lv_heroUnit, c_unitPropXP, c_unitPropCurrent), lv_gallPlayer, libGame_ge_XPSources_Debug);
    libGame_gf_TalentsSetupTalentChoicesFromHeroDataForPlayer(libGame_gv_players[lv_gallPlayer].lv_heroIndex, lv_gallPlayer);
    SetTalentTreeHeroLevel(lv_gallPlayer, 0);
    libGame_gf_LevelUpHero(libGame_gv_players[lv_gallPlayer].lv_heroUnit);
    libUIUI_gf_UIObserverUIAddPlayerToObserverUI(lv_gallPlayer);
    libGDHL_gv_chogallPairs[lv_chogallTeam].lv_gallFollowUnit = lv_choUnit;
    libHCHO_gf_HeroChogallGallFollow(libGDHL_gv_chogallPairs[lv_chogallTeam].lv_gallUnit);
    UISetCommandAllowed(PlayerGroupSingle(lv_gallPlayer), c_uiCommandAllowQueue, false);
    TriggerAddEventMouseMoved(libHCHO_gt_SurgingFistMouseTracker, lv_gallPlayer);
    TriggerAddEventMouseClicked(libHCHO_gt_SurgingFistExecuteChargetomouse, lv_gallPlayer, c_mouseButtonLeft,true);
    TriggerAddEventPlayerEffectUsed(libHCHO_gt_SurgingFistExecuteChargetomouse, lv_gallPlayer,"ChoSurgingFistTriggerDummyEffect");
    libGame_gv_players[lv_gallPlayer].lv_suppressHeroAnnouncements = true;
    libCore_gf_SetTalentsTierLevels(lv_gallPlayer);
    if ((libGame_gv_afk_DebugOn == false) && ((GameIsMatchmade() == false) || (libStEx_gf_InTrainingMode() == true))) {
    }
    else {
        libHCHO_gf_HeroGallStartAFKTimer(lv_gallPlayer);
    }
    if ((lv_gallPlayer == libHCHO_gv_tryMe_ChoGall_PairedPlayer_C) && (libCore_gv_sYSGameMode == libCore_ge_GameModes_TryMe) && ((libHCHO_gv_tryMeChoGallIsSwapping == false) || (libHCHO_gv_tryMeChoGallAIRequiresRestart == true))) {
        libHCHO_gf_ChoGallSwapandRespawnApplySavedTalents(libHCHO_gv_tryMe_ChoGall_PairedPlayer_C);
        libAIAI_gf_HeroAIEnableAIForPlayer(libHCHO_gv_tryMe_ChoGall_PairedPlayer_C);
        libHCHO_gv_tryMeChoGallAIRequiresRestart = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroChogallGallSpawn_Init () {
    libHCHO_gt_HeroChogallGallSpawn = TriggerCreate("libHCHO_gt_HeroChogallGallSpawn_Func");
    libGame_gf_ManualHeroSpawn(libHCHO_gt_HeroChogallGallSpawn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Show Gall
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_DEBUGShowGall_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitGetType(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit) == "HeroGall")) {
            libNtve_gf_SendActorMessageToUnit(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, "ModelSwap AbathurSymbiote");
            libNtve_gf_SendActorMessageToUnit(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, "SetScale 2.000000");
        }

    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_DEBUGShowGall_Init () {
    libHCHO_gt_DEBUGShowGall = TriggerCreate("libHCHO_gt_DEBUGShowGall_Func");
    TriggerEnable(libHCHO_gt_DEBUGShowGall, false);
    TriggerAddEventChatMessage(libHCHO_gt_DEBUGShowGall, c_playerAny, "showgall", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - SwapChoGall Cheat
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_DEBUGSwapChoGallCheat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_choGallPairsTeamID;

    // Variable Initialization
    lv_choGallPairsTeamID = libGame_gf_TeamNumberOfPlayer(EventPlayer());

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitIsAlive(libGDHL_gv_chogallPairs[lv_choGallPairsTeamID].lv_choUnit) == false) || (UnitIsAlive(libGDHL_gv_chogallPairs[lv_choGallPairsTeamID].lv_gallUnit) == false))) {
        libNtve_gf_UIErrorMessage(PlayerGroupSingle(EventPlayer()), StringExternal("Param/Value/lib_HCHO_35C15FA3"), SoundLink("UI_GenericError_Heroes", -1));
    }
    else {
        libGame_gf_SendEventTryMeCustomButton1Pressed(EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_DEBUGSwapChoGallCheat_Init () {
    libHCHO_gt_DEBUGSwapChoGallCheat = TriggerCreate("libHCHO_gt_DEBUGSwapChoGallCheat_Func");
    TriggerEnable(libHCHO_gt_DEBUGSwapChoGallCheat, false);
    TriggerAddEventChatMessage(libHCHO_gt_DEBUGSwapChoGallCheat, c_playerAny, "ChoGallTryMeSwap", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Root
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_CCRecognitionRoot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_behavior;
    int lv_gallPlayer;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_behavior = EventUnitBehavior();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()))].lv_choPlayer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_gallPlayer = libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()))].lv_gallPlayer;
    UIAlert("YourHeroHasBeenRooted", lv_gallPlayer, StringToText(""), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_CCRecognitionRoot_Init () {
    libHCHO_gt_CCRecognitionRoot = TriggerCreate("libHCHO_gt_CCRecognitionRoot_Func");
    TriggerEnable(libHCHO_gt_CCRecognitionRoot, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libHCHO_gt_CCRecognitionRoot, null, c_behaviorCategoryUser5, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libHCHO_gt_CCRecognitionRoot, null, c_behaviorCategoryUser5, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Void Prison Stasis Overlay
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_CCRecognitionVoidPrisonStasisOverlay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_behavior;
    int lv_gallPlayer;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_behavior = EventUnitBehavior();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()))].lv_choPlayer))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_gallPlayer = libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()))].lv_gallPlayer;
    libUIUI_gf_FullscreenOverlaysCreateCCEffectFlashForPlayer(lv_gallPlayer, UnitBehaviorDuration(lv_unit, lv_behavior));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_CCRecognitionVoidPrisonStasisOverlay_Init () {
    libHCHO_gt_CCRecognitionVoidPrisonStasisOverlay = TriggerCreate("libHCHO_gt_CCRecognitionVoidPrisonStasisOverlay_Func");
    TriggerEnable(libHCHO_gt_CCRecognitionVoidPrisonStasisOverlay, false);
    TriggerAddEventUnitBehaviorChange(libHCHO_gt_CCRecognitionVoidPrisonStasisOverlay, null, "VoidPrisonDisplay", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Cho'gall - Haunted Mines camera plane change
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroChogallHauntedMinescameraplanechange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_choGallPairsTeamID;

    // Variable Initialization
    lv_choGallPairsTeamID = libGame_gf_TeamNumberOfPlayer(libGame_gf_MapHauntedMinesPlayerChangesPlanePlayer());

    // Conditions
    if (testConds) {
        if (!((libGDHL_gv_chogallPairs[lv_choGallPairsTeamID].lv_choPlayer == libGame_gf_MapHauntedMinesPlayerChangesPlanePlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(libGDHL_gv_chogallPairs[lv_choGallPairsTeamID].lv_gallPlayer, UnitGetPosition(libGDHL_gv_chogallPairs[lv_choGallPairsTeamID].lv_gallFollowUnit), 0.0, -1, 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroChogallHauntedMinescameraplanechange_Init () {
    libHCHO_gt_HeroChogallHauntedMinescameraplanechange = TriggerCreate("libHCHO_gt_HeroChogallHauntedMinescameraplanechange_Func");
    TriggerEnable(libHCHO_gt_HeroChogallHauntedMinescameraplanechange, false);
    libGame_gf_MapHauntedMinesPlayerChangesPlane(libHCHO_gt_HeroChogallHauntedMinescameraplanechange);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Cho'gall - Cho Dies - Kill Gall
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroChogallChoDiesKillGall_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_choGallPairsTeam;
    unit lv_deadUnit;
    int lv_deadPlayer;
    int lv_killingPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(libGame_gf_HeroKilledPlayer())].lv_choUnit == libGame_gf_HeroKilledUnit()))) {
            return false;
        }

        if (!((UnitGetType(libGame_gv_players[libGame_gf_HeroKilledPlayer()].lv_heroUnit) == "HeroCho"))) {
            return false;
        }

        if (!((UnitGetType(libGame_gv_players[UnitGetOwner(libGame_gf_HeroKilledUnit())].lv_heroUnit) != "HeroAbathur"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_choGallPairsTeam = libGame_gf_TeamNumberOfPlayer(libGame_gf_HeroKilledPlayer());
    if ((libGame_gf_HeroKilledKillingPlayer() == 16)) {
        TextExpressionSetToken("Param/Expression/lib_HCHO_03A3A210", "A", IntToText(libGame_gf_HeroKilledKillingPlayer()));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_HCHO_03A3A210"), true);
        UnitKill(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit);
        return true;
    }

    if (((libGame_gf_HeroKilledKillingPlayer() <= 0) || (libGame_gf_HeroKilledKillingPlayer() > libCore_gv_bALMaxPlayers))) {
        PlayerCreateEffectUnit(libGame_gf_HeroKilledKillingPlayer(), "GallDeathSwitch", libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit);
    }
    else {
        UnitCreateEffectUnit(libGame_gv_players[libGame_gf_HeroKilledKillingPlayer()].lv_heroUnit, "GallDeathSwitch", libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit);
    }
    lv_deadUnit = libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit;
    lv_deadPlayer = UnitGetOwner(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit);
    lv_killingPlayer = libGame_gf_HeroKilledKillingPlayer();
    libGame_gv_players[lv_deadPlayer].lv_lastKillingPlayer = lv_killingPlayer;
    libGame_gf_SendEventHeroKilled(lv_killingPlayer, lv_deadUnit);
    UnitBehaviorAdd(lv_deadUnit, "Dead", lv_deadUnit, 1);
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_deadPlayer, UnitGetPosition(lv_deadUnit), 0.25, -1, 0.0, false);
    libGame_gf_HeroDeathStartRespawnTimer(lv_deadPlayer, libCore_gf_HeroDeathTime(lv_deadPlayer, UnitLevel(libGame_gv_players[lv_deadPlayer].lv_heroUnit)));
    libUIUI_gf_DeathAnnouncementPanelRegisterDeath(lv_deadPlayer, lv_killingPlayer, libGame_gv_players[libGame_gv_players[lv_deadPlayer].lv_heroIndex].lv_heroData.lv_portrait, libGame_gv_players[lv_deadPlayer].lv_heroUnit, libGame_gv_players[lv_deadPlayer].lv_heroData.lv_name, libGame_gv_players[lv_deadPlayer].lv_respawnTimer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroChogallChoDiesKillGall_Init () {
    libHCHO_gt_HeroChogallChoDiesKillGall = TriggerCreate("libHCHO_gt_HeroChogallChoDiesKillGall_Func");
    TriggerEnable(libHCHO_gt_HeroChogallChoDiesKillGall, false);
    libGame_gf_HeroKilled(libHCHO_gt_HeroChogallChoDiesKillGall);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Cho'Gall - Cho Removed - Remove Gall
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroChoGallChoRemovedRemoveGall_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_choGallPairsTeam;
    int lv_choPlayer;
    int lv_gallPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroCho"))) {
            return false;
        }

        if (!((UnitGetType(libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit) != "HeroAbathur"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_choGallPairsTeam = libGame_gf_TeamNumberOfPlayer(EventPlayer());
    lv_choPlayer = libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_choPlayer;
    lv_gallPlayer = libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallPlayer;
    libAIAI_gf_HeroAIDisableAIForPlayer(lv_gallPlayer);
    UnitRemove(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit);
    libGame_gv_players[lv_choPlayer].lv_heroUsesAnnouncementAlias = false;
    libGame_gv_players[lv_choPlayer].lv_heroAnnouncementAliasText = null;
    libGame_gv_players[lv_choPlayer].lv_heroAnnouncementAliasIcon = null;
    libGame_gv_players[lv_gallPlayer].lv_suppressHeroAnnouncements = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroChoGallChoRemovedRemoveGall_Init () {
    libHCHO_gt_HeroChoGallChoRemovedRemoveGall = TriggerCreate("libHCHO_gt_HeroChoGallChoRemovedRemoveGall_Func");
    TriggerEnable(libHCHO_gt_HeroChoGallChoRemovedRemoveGall, false);
    TriggerAddEventUnitRemoved(libHCHO_gt_HeroChoGallChoRemovedRemoveGall, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Cho'gall - Cho Respawns - Respawn Gall
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroChogallChoRespawnsRespawnGall_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_gallPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(libGame_gf_HeroRespawnPlayer())].lv_choPlayer == libGame_gf_HeroRespawnPlayer()))) {
            return false;
        }

        if (!((UnitGetType(libGame_gv_players[libGame_gf_HeroRespawnPlayer()].lv_heroUnit) == "HeroCho"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_gallPlayer = libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(libGame_gf_HeroRespawnPlayer())].lv_gallPlayer;
    if ((UnitHasBehavior2(libGame_gv_players[lv_gallPlayer].lv_heroUnit, "GallPsychoticBreakDyingBehavior") == true)) {
        UnitBehaviorRemove(libGame_gv_players[lv_gallPlayer].lv_heroUnit, "GallPsychoticBreakDyingBehavior", 1);
        libNtve_gf_SendActorMessageToGameRegion(RegionCircle(UnitGetPosition(libGame_gv_players[lv_gallPlayer].lv_heroUnit), 0.5), "Signal RezDestroy");
        Wait(0.0625, c_timeGame);
    }

    libGame_gf_HeroDeathRespawnHeroforPlayer(false, lv_gallPlayer, libGame_gv_players[lv_gallPlayer].lv_spawnPoint, 100);
    UnitCreateEffectUnit(libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_gallPlayer)].lv_gallUnit, "ChoGallLinkUnitsDummyEffect", libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_gallPlayer)].lv_choUnit);
    UnitCreateEffectUnit(libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_gallPlayer)].lv_choUnit, "HeroGenericTimeStopListenerApplyBehavior", libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_gallPlayer)].lv_gallUnit);
    libHCHO_gf_HeroChogallGallFollow(libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_gallPlayer)].lv_gallUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroChogallChoRespawnsRespawnGall_Init () {
    libHCHO_gt_HeroChogallChoRespawnsRespawnGall = TriggerCreate("libHCHO_gt_HeroChogallChoRespawnsRespawnGall_Func");
    TriggerEnable(libHCHO_gt_HeroChogallChoRespawnsRespawnGall, false);
    libGame_gf_HeroRespawn(libHCHO_gt_HeroChogallChoRespawnsRespawnGall);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Cho'gall - Gall Stunned or Silenced Stop
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroChogallGallStunnedorSilencedStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pairsTeamID;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroCho"))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "AbathurUltimateEvolutionControlBehavior") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pairsTeamID = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()));
    UnitBehaviorRemove(libGDHL_gv_chogallPairs[lv_pairsTeamID].lv_gallUnit, "ChogallGallSilence", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroChogallGallStunnedorSilencedStop_Init () {
    libHCHO_gt_HeroChogallGallStunnedorSilencedStop = TriggerCreate("libHCHO_gt_HeroChogallGallStunnedorSilencedStop_Func");
    TriggerEnable(libHCHO_gt_HeroChogallGallStunnedorSilencedStop, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libHCHO_gt_HeroChogallGallStunnedorSilencedStop, null, c_behaviorCategoryStun, c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libHCHO_gt_HeroChogallGallStunnedorSilencedStop, null, c_behaviorCategoryUser6, c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libHCHO_gt_HeroChogallGallStunnedorSilencedStop, null, c_behaviorCategoryUser7, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Cho'gall - Damage Reduction Behavior Forwarding
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroChogallDamageReductionBehaviorForwarding_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_choGallPairsTeam;

    // Variable Initialization
    lv_choGallPairsTeam = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()));

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroCho"))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "AbathurUltimateEvolutionControlBehavior") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehavior() == "TalentBucketShrinkRayDamageReduction")) {
        UnitBehaviorAdd(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit, "GallSpecificShrinkRayDamageReduction", UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, 0), 1);
    }
    else {
        UnitBehaviorAdd(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit, EventUnitBehavior(), UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, 0), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroChogallDamageReductionBehaviorForwarding_Init () {
    libHCHO_gt_HeroChogallDamageReductionBehaviorForwarding = TriggerCreate("libHCHO_gt_HeroChogallDamageReductionBehaviorForwarding_Func");
    TriggerEnable(libHCHO_gt_HeroChogallDamageReductionBehaviorForwarding, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libHCHO_gt_HeroChogallDamageReductionBehaviorForwarding, null, c_behaviorCategoryUser10, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libHCHO_gt_HeroChogallDamageReductionBehaviorForwarding, null, c_behaviorCategoryUser10, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Cho'gall - Stasis Behavior Forwarding
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroChogallStasisBehaviorForwarding_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_choGallPairsTeam;

    // Variable Initialization
    lv_choGallPairsTeam = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()));

    // Conditions
    if (testConds) {
        if (!((EventUnitBehavior() != "ChoTalentMoltenBlock"))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) == "HeroCho"))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "AbathurUltimateEvolutionControlBehavior") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        UnitBehaviorAdd(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit, "GallForwardedStasis", UnitBehaviorEffectUnit(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_choUnit, EventUnitBehavior(), c_effectUnitCaster, 0), 1);
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeDestroy)) {
        UnitBehaviorRemove(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit, "GallForwardedStasis", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroChogallStasisBehaviorForwarding_Init () {
    libHCHO_gt_HeroChogallStasisBehaviorForwarding = TriggerCreate("libHCHO_gt_HeroChogallStasisBehaviorForwarding_Func");
    TriggerEnable(libHCHO_gt_HeroChogallStasisBehaviorForwarding, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libHCHO_gt_HeroChogallStasisBehaviorForwarding, null, c_behaviorCategoryUser6, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libHCHO_gt_HeroChogallStasisBehaviorForwarding, null, c_behaviorCategoryUser6, c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChangeFromCategory(libHCHO_gt_HeroChogallStasisBehaviorForwarding, null, c_behaviorCategoryUser6, c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Cho'gall - Molten Block
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroChogallMoltenBlock_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_choGallPairsTeam;

    // Variable Initialization
    lv_choGallPairsTeam = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()));

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroCho"))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "AbathurUltimateEvolutionControlBehavior") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        UnitBehaviorAdd(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit, "GallMoltenBlockStasis", libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_choUnit, 1);
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeDestroy)) {
        UnitBehaviorRemove(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit, "GallMoltenBlockStasis", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroChogallMoltenBlock_Init () {
    libHCHO_gt_HeroChogallMoltenBlock = TriggerCreate("libHCHO_gt_HeroChogallMoltenBlock_Func");
    TriggerEnable(libHCHO_gt_HeroChogallMoltenBlock, false);
    TriggerAddEventUnitBehaviorChange(libHCHO_gt_HeroChogallMoltenBlock, null, "ChoTalentMoltenBlock", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libHCHO_gt_HeroChogallMoltenBlock, null, "ChoTalentMoltenBlock", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Cho'gall - Healing Fountain Cooldown for Gall
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroChogallHealingFountainCooldownforGall_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_choGallPairsTeam;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroCho"))) {
            return false;
        }

        if (!((EventUnit() == libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()))].lv_choUnit))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "AbathurUltimateEvolutionControlBehavior") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_choGallPairsTeam = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()));
    libUIUI_gv_uIHealingFountainsHelpTextHasFountainBeenUsed[libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallPlayer] = true;
    libUIUI_gf_UIHealingFountainsHelpTextShowHideForPlayer(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallPlayer, false);
    UnitBehaviorAdd(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit, "HealingFountainCooldown", UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, 0), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroChogallHealingFountainCooldownforGall_Init () {
    libHCHO_gt_HeroChogallHealingFountainCooldownforGall = TriggerCreate("libHCHO_gt_HeroChogallHealingFountainCooldownforGall_Func");
    TriggerEnable(libHCHO_gt_HeroChogallHealingFountainCooldownforGall, false);
    TriggerAddEventUnitBehaviorChange(libHCHO_gt_HeroChogallHealingFountainCooldownforGall, null, "HealingFountainCooldown", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Cho'gall - Cho Enters Transport
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroChogallChoEntersTransport_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_choGallPairsTeam;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[libGame_gf_HeroEnteredTransportPlayerEntering()].lv_heroUnit) == "HeroCho"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_choGallPairsTeam = libGame_gf_TeamNumberOfPlayer(libGame_gf_HeroEnteredTransportPlayerEntering());
    UnitBehaviorAdd(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit, "ChogallGallSilence", libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit, 1);
    libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallFollowUnit = UnitTransport(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_choUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroChogallChoEntersTransport_Init () {
    libHCHO_gt_HeroChogallChoEntersTransport = TriggerCreate("libHCHO_gt_HeroChogallChoEntersTransport_Func");
    TriggerEnable(libHCHO_gt_HeroChogallChoEntersTransport, false);
    libGame_gf_HeroEnteredTransport(libHCHO_gt_HeroChogallChoEntersTransport);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Cho'gall - Cho Exits Transport
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroChogallChoExitsTransport_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_choGallPairsTeam;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[libGame_gf_HeroExitingTransportPlayerExiting()].lv_heroUnit) == "HeroCho"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_choGallPairsTeam = libGame_gf_TeamNumberOfPlayer(libGame_gf_HeroExitingTransportPlayerExiting());
    UnitBehaviorRemove(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit, "ChogallGallSilence", 1);
    libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallFollowUnit = libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_choUnit;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroChogallChoExitsTransport_Init () {
    libHCHO_gt_HeroChogallChoExitsTransport = TriggerCreate("libHCHO_gt_HeroChogallChoExitsTransport_Func");
    TriggerEnable(libHCHO_gt_HeroChogallChoExitsTransport, false);
    libGame_gf_HeroExitedTransport(libHCHO_gt_HeroChogallChoExitsTransport);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Cho'gall - Vehicle Start
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroChogallVehicleStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localTriggeringPlayer;
    int lv_choGallPairsTeam;

    // Variable Initialization
    lv_localTriggeringPlayer = EventPlayer();
    lv_choGallPairsTeam = libGame_gf_TeamNumberOfPlayer(lv_localTriggeringPlayer);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[lv_localTriggeringPlayer].lv_heroUnit) == "HeroCho"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit, "GallVehicleRestrictions", libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit, 1);
    Wait(0.125, c_timeGame);
    libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallFollowUnit = libGame_gv_players[lv_localTriggeringPlayer].lv_activeVehicle;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroChogallVehicleStart_Init () {
    libHCHO_gt_HeroChogallVehicleStart = TriggerCreate("libHCHO_gt_HeroChogallVehicleStart_Func");
    TriggerEnable(libHCHO_gt_HeroChogallVehicleStart, false);
    TriggerAddEventPlayerEffectUsed(libHCHO_gt_HeroChogallVehicleStart, c_playerAny, "UseVehicleCastCompleteSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Cho'gall - Vehicle Stop
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroChogallVehicleStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localTriggeringPlayer;
    int lv_choGallPairsTeam;

    // Variable Initialization
    lv_localTriggeringPlayer = EventPlayer();
    lv_choGallPairsTeam = libGame_gf_TeamNumberOfPlayer(lv_localTriggeringPlayer);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[lv_localTriggeringPlayer].lv_heroUnit) == "HeroCho"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    UnitBehaviorRemove(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallUnit, "GallVehicleRestrictions", 1);
    libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallFollowUnit = libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_choUnit;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroChogallVehicleStop_Init () {
    libHCHO_gt_HeroChogallVehicleStop = TriggerCreate("libHCHO_gt_HeroChogallVehicleStop_Func");
    TriggerEnable(libHCHO_gt_HeroChogallVehicleStop, false);
    TriggerAddEventPlayerEffectUsed(libHCHO_gt_HeroChogallVehicleStop, c_playerAny, "UseVehicleFinalDummy");
    TriggerAddEventPlayerEffectUsed(libHCHO_gt_HeroChogallVehicleStop, c_playerAny, "LeaveVehicleApplyTimedLife");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - ChoGall - Death Recap - Special Case for Gall - Cho Dies
//--------------------------------------------------------------------------------------------------
bool libHCHO_gt_HeroChoGallDeathRecapSpecialCaseforGallChoDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_choGallPairsTeam;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[libGame_gf_HeroKilledPlayer()].lv_heroUnit) == "HeroCho"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_choGallPairsTeam = libGame_gf_TeamNumberOfPlayer(libGame_gf_HeroKilledPlayer());
    libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer(libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_choUnit, libGDHL_gv_chogallPairs[lv_choGallPairsTeam].lv_gallPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHCHO_gt_HeroChoGallDeathRecapSpecialCaseforGallChoDies_Init () {
    libHCHO_gt_HeroChoGallDeathRecapSpecialCaseforGallChoDies = TriggerCreate("libHCHO_gt_HeroChoGallDeathRecapSpecialCaseforGallChoDies_Func");
    TriggerEnable(libHCHO_gt_HeroChoGallDeathRecapSpecialCaseforGallChoDies, false);
    libGame_gf_HeroKilled(libHCHO_gt_HeroChoGallDeathRecapSpecialCaseforGallChoDies);
}

void libHCHO_InitTriggers () {
    libHCHO_gt_HeroAIMiscModInitialization_Init();
    libHCHO_gt_HeroAIAddToTierDataChoGall_Init();
    libHCHO_gt_HeroAIInitAbilitiesChoGall_Init();
    libHCHO_gt_ForceIncludeDataMods_Init();
    libHCHO_gt_ChoGallPortBackToBaseSpecialCase_Init();
    libHCHO_gt_GallAbilityCastAFKDetection_Init();
    libHCHO_gt_HeroGallShadowBoltVolleyCast_Init();
    libHCHO_gt_HeroGallShadowBoltVolleyEnd_Init();
    libHCHO_gt_HeroChoShadowBoltVolleyVehicleActorHook_Init();
    libHCHO_gt_HeroGallShoveRootOn_Init();
    libHCHO_gt_HeroGallShoveRootOff_Init();
    libHCHO_gt_HeroChoIamHurrying_Init();
    libHCHO_gt_HeroGallPsychoticBreakRespawnTimerAdjustment_Init();
    libHCHO_gt_HeroGallBombsAwayBehavior_Init();
    libHCHO_gt_HeroChoWillofGallGiveGallItem_Init();
    libHCHO_gt_HeroGallTheNetherCalls_Init();
    libHCHO_gt_HeroGallDarkDescent_Init();
    libHCHO_gt_HeroGallDarkDescentReset_Init();
    libHCHO_gt_HeroChoMoltenBlockOverlayOn_Init();
    libHCHO_gt_HeroChoMoltenBlockOverlayOff_Init();
    libHCHO_gt_HurryUpOafChoCooldownBehaviormodifiertempdeletemeafteruisupport_Init();
    libHCHO_gt_HurryUpOafMountedDisabler_Init();
    libHCHO_gt_SurgingFistFakeCastActivated_Init();
    libHCHO_gt_SurgingFistMouseTracker_Init();
    libHCHO_gt_SurgingFistExecuteChargetomouse_Init();
    libHCHO_gt_SurgingFistRootsOnMonitor_Init();
    libHCHO_gt_SurgingFistRootsOffMonitor_Init();
    libHCHO_gt_GallRuneBombBehaviorTimerControllerTrigger_Init();
    libHCHO_gt_ChoRuneBombSpawn_Init();
    libHCHO_gt_GallRuneBombDetonationCooldownControl_Init();
    libHCHO_gt_InitMiscModInitialization_Init();
    libHCHO_gt_DEBUGChoGallVideoSwapCheat_Init();
    libHCHO_gt_HeroChoGallSwapandRespawn_Init();
    libHCHO_gt_HeroChogallChoSpawn_Init();
    libHCHO_gt_HeroChogallGallSpawn_Init();
    libHCHO_gt_DEBUGShowGall_Init();
    libHCHO_gt_DEBUGSwapChoGallCheat_Init();
    libHCHO_gt_CCRecognitionRoot_Init();
    libHCHO_gt_CCRecognitionVoidPrisonStasisOverlay_Init();
    libHCHO_gt_HeroChogallHauntedMinescameraplanechange_Init();
    libHCHO_gt_HeroChogallChoDiesKillGall_Init();
    libHCHO_gt_HeroChoGallChoRemovedRemoveGall_Init();
    libHCHO_gt_HeroChogallChoRespawnsRespawnGall_Init();
    libHCHO_gt_HeroChogallGallStunnedorSilencedStop_Init();
    libHCHO_gt_HeroChogallDamageReductionBehaviorForwarding_Init();
    libHCHO_gt_HeroChogallStasisBehaviorForwarding_Init();
    libHCHO_gt_HeroChogallMoltenBlock_Init();
    libHCHO_gt_HeroChogallHealingFountainCooldownforGall_Init();
    libHCHO_gt_HeroChogallChoEntersTransport_Init();
    libHCHO_gt_HeroChogallChoExitsTransport_Init();
    libHCHO_gt_HeroChogallVehicleStart_Init();
    libHCHO_gt_HeroChogallVehicleStop_Init();
    libHCHO_gt_HeroChoGallDeathRecapSpecialCaseforGallChoDies_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libHCHO_InitLib_completed = false;

void libHCHO_InitLib () {
    if (libHCHO_InitLib_completed) {
        return;
    }

    libHCHO_InitLib_completed = true;

    libHCHO_InitLibraries();
    libHCHO_InitVariables();
    libHCHO_InitCustomScript();
    libHCHO_InitTriggers();
}

