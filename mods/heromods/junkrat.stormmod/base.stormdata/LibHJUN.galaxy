include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"

include "LibHJUN_h"

//--------------------------------------------------------------------------------------------------
// Library: Junkrat
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libHJUN_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libAIAI_InitVariables();
    libUIUI_InitVariables();
}

// Variable Initialization
bool libHJUN_InitVariables_completed = false;

void libHJUN_InitVariables () {
    int init_i;

    if (libHJUN_InitVariables_completed) {
        return;
    }

    libHJUN_InitVariables_completed = true;

    for (init_i = 0; init_i <= libHJUN_gv_heroJunkratMaxSteelTraps; init_i += 1) {
        libHJUN_gv_heroJunkratSteelTrapsFrames[init_i] = c_invalidDialogControlId;
    }
}

// Functions
void libHJUN_gf_HeroJunkratIncrementHeroCountFunction () {
    // Automatic Variable Declarations
    // Implementation
    libHJUN_gv_heroJunkratTriggerRegistrationVariable += 1;
    if ((libHJUN_gv_heroJunkratTriggerRegistrationVariable == 1)) {
        TriggerEnable(libHJUN_gt_HeroJunkratFragLauncherBurstFireTalentRespec, true);
        TriggerEnable(libHJUN_gt_HeroJunkratFragLauncherSpreadVolleyCast, true);
        TriggerEnable(libHJUN_gt_HeroJunkratHeroicAbilityCastNormalMove, true);
        TriggerEnable(libHJUN_gt_HeroJunkratHeroicAbilityExpires, true);
        TriggerEnable(libHJUN_gt_HeroJunkratRocketRideLand, true);
        TriggerEnable(libHJUN_gt_HeroJunrkatRocketRideLandEnd, true);
        TriggerEnable(libHJUN_gt_HeroJunkratRocketRideMount, true);
        TriggerEnable(libHJUN_gt_HeroJunkratRocketRideDismount, true);
        TriggerEnable(libHJUN_gt_HeroJunkratRocketRideDismountOnCheerDanceTauntUsed, true);
        TriggerEnable(libHJUN_gt_HeroJunkratConcussionMineCameraLock, true);
        TriggerEnable(libHJUN_gt_HeroJunkratSteelTrapUILogic, true);
        TriggerEnable(libHJUN_gt_HeroJunkratSteelTrapRoots, true);
        TriggerEnable(libHJUN_gt_HeroJunkratSteelTrapandConcussionMineAbathurCleanup, true);
    }

}

void libHJUN_gf_HeroJunkratDecrementHeroCountFunction () {
    // Automatic Variable Declarations
    // Implementation
    libHJUN_gv_heroJunkratTriggerRegistrationVariable -= 1;
    if ((libHJUN_gv_heroJunkratTriggerRegistrationVariable < 0)) {
        libHJUN_gv_heroJunkratTriggerRegistrationVariable = 0;
    }

    if ((libHJUN_gv_heroJunkratTriggerRegistrationVariable == 0)) {
        TriggerEnable(libHJUN_gt_HeroJunkratFragLauncherBurstFireTalentRespec, false);
        TriggerEnable(libHJUN_gt_HeroJunkratFragLauncherSpreadVolleyCast, false);
        TriggerEnable(libHJUN_gt_HeroJunkratHeroicAbilityExpires, false);
        TriggerEnable(libHJUN_gt_HeroJunkratHeroicAbilityCastNormalMove, false);
        TriggerEnable(libHJUN_gt_HeroJunkratRocketRideLand, false);
        TriggerEnable(libHJUN_gt_HeroJunrkatRocketRideLandEnd, false);
        TriggerEnable(libHJUN_gt_HeroJunkratRocketRideMount, false);
        TriggerEnable(libHJUN_gt_HeroJunkratRocketRideDismount, false);
        TriggerEnable(libHJUN_gt_HeroJunkratRocketRideDismountOnCheerDanceTauntUsed, false);
        TriggerEnable(libHJUN_gt_HeroJunkratConcussionMineCameraLock, false);
        TriggerEnable(libHJUN_gt_HeroJunkratSteelTrapUILogic, false);
        TriggerEnable(libHJUN_gt_HeroJunkratSteelTrapRoots, false);
        TriggerEnable(libHJUN_gt_HeroJunkratSteelTrapandConcussionMineAbathurCleanup, false);
    }

}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Misc Mod Initialization
//--------------------------------------------------------------------------------------------------
bool libHJUN_gt_HeroAIMiscModInitialization_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_RegisterSegregationTrigger(libCore_ge_SegregationTriggerTypes_HeroAIInitializeHeroTierData, libHJUN_gt_HeroAIAddToTierDataJunkrat);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHJUN_gt_HeroAIMiscModInitialization_Init () {
    libHJUN_gt_HeroAIMiscModInitialization = TriggerCreate("libHJUN_gt_HeroAIMiscModInitialization_Func");
    TriggerAddEventMapInit(libHJUN_gt_HeroAIMiscModInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Add To Tier Data - Junkrat
//--------------------------------------------------------------------------------------------------
bool libHJUN_gt_HeroAIAddToTierDataJunkrat_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "Junkrat");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHJUN_gt_HeroAIAddToTierDataJunkrat_Init () {
    libHJUN_gt_HeroAIAddToTierDataJunkrat = TriggerCreate("libHJUN_gt_HeroAIAddToTierDataJunkrat_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Junkrat - Frag Launcher - Burst Fire - Talent Respec
//--------------------------------------------------------------------------------------------------
bool libHJUN_gt_HeroJunkratFragLauncherBurstFireTalentRespec_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_junkratPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_junkratPlayer = libGame_gf_HeroRespecsTalentsPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[lv_junkratPlayer].lv_heroUnit) == "HeroJunkrat"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(libGame_gv_players[lv_junkratPlayer].lv_heroUnit, c_unitPropEnergy, 100.0);
    UnitAbilityReset(libGame_gv_players[lv_junkratPlayer].lv_heroUnit, AbilityCommand("JunkratFragLauncher", 0), c_spendLocationAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHJUN_gt_HeroJunkratFragLauncherBurstFireTalentRespec_Init () {
    libHJUN_gt_HeroJunkratFragLauncherBurstFireTalentRespec = TriggerCreate("libHJUN_gt_HeroJunkratFragLauncherBurstFireTalentRespec_Func");
    TriggerEnable(libHJUN_gt_HeroJunkratFragLauncherBurstFireTalentRespec, false);
    libGame_gf_HeroRespecsTalents(libHJUN_gt_HeroJunkratFragLauncherBurstFireTalentRespec);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Junkrat - Frag Launcher - Spread Volley Cast
//--------------------------------------------------------------------------------------------------
bool libHJUN_gt_HeroJunkratFragLauncherSpreadVolleyCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_junkratUnit;
    point lv_positionOfJunkratUnit;
    int lv_junkratPlayer;
    point lv_targetPoint;
    fixed lv_distanceBetweenJunkratUnitAndTargetPoint;
    fixed lv_xOffsetForLeftMissile;
    fixed lv_xOffsetForRightMissile;
    fixed lv_yOffsetMissiles;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_junkratUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_positionOfJunkratUnit = UnitGetPosition(lv_junkratUnit);
    lv_junkratPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_distanceBetweenJunkratUnitAndTargetPoint = DistanceBetweenPoints(lv_positionOfJunkratUnit, lv_targetPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_xOffsetForLeftMissile = (lv_distanceBetweenJunkratUnitAndTargetPoint * libHJUN_gv_heroJunkratFragLauncherSpreadVolleyXMultiplier);
    lv_xOffsetForRightMissile = (-1.0 * lv_xOffsetForLeftMissile);
    lv_yOffsetMissiles = (lv_distanceBetweenJunkratUnitAndTargetPoint * libHJUN_gv_heroJunkratFragLauncherSpreadVolleyYMultiplier);
    UnitCreateEffectPoint(lv_junkratUnit, "JunkratFragLauncherSpreadVolleyArcLaunchPersistentLeft", PointWithOffsetPolar(libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, lv_yOffsetMissiles, lv_positionOfJunkratUnit), lv_xOffsetForLeftMissile, (UnitGetFacing(lv_junkratUnit) - 90.0)));
    UnitCreateEffectPoint(lv_junkratUnit, "JunkratFragLauncherSpreadVolleyArcLaunchPersistentRight", PointWithOffsetPolar(libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, lv_yOffsetMissiles, lv_positionOfJunkratUnit), lv_xOffsetForRightMissile, (UnitGetFacing(lv_junkratUnit) - 90.0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHJUN_gt_HeroJunkratFragLauncherSpreadVolleyCast_Init () {
    libHJUN_gt_HeroJunkratFragLauncherSpreadVolleyCast = TriggerCreate("libHJUN_gt_HeroJunkratFragLauncherSpreadVolleyCast_Func");
    TriggerEnable(libHJUN_gt_HeroJunkratFragLauncherSpreadVolleyCast, false);
    TriggerAddEventPlayerEffectUsed(libHJUN_gt_HeroJunkratFragLauncherSpreadVolleyCast, c_playerAny, "JunkratFragLauncherSpreadVolleyCreateDummyPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Junkrat - Steel Traps UI Initialization
//--------------------------------------------------------------------------------------------------
bool libHJUN_gt_HeroJunkratSteelTrapsUIInitialization_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_panel;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_panel = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookup(libUIUI_gv_heroSpecificStatusContainer, c_triggerControlTypePanel, "JunkratFrame");
    lv_panel = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeUnitStatus, "UnitStatusFrame0/SteelTrap1");
    libHJUN_gv_heroJunkratSteelTrapsFrames[1] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeUnitStatus, "UnitStatusFrame0/SteelTrap2");
    libHJUN_gv_heroJunkratSteelTrapsFrames[2] = DialogControlLastCreated();
    DialogControlHookup(lv_panel, c_triggerControlTypeUnitStatus, "UnitStatusFrame0/SteelTrap3");
    libHJUN_gv_heroJunkratSteelTrapsFrames[3] = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHJUN_gt_HeroJunkratSteelTrapsUIInitialization_Init () {
    libHJUN_gt_HeroJunkratSteelTrapsUIInitialization = TriggerCreate("libHJUN_gt_HeroJunkratSteelTrapsUIInitialization_Func");
    libCore_gf_IncludeModInitialization(libHJUN_gt_HeroJunkratSteelTrapsUIInitialization);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Junkrat - Steel Trap UI Logic
//--------------------------------------------------------------------------------------------------
bool libHJUN_gt_HeroJunkratSteelTrapUILogic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_junkrat;
    int lv_junkratPlayer;
    int lv_arrayIterator;
    unit lv_trap;
    unitgroup lv_junkratTrackedTraps;

    // Automatic Variable Declarations
    const int auto4B46B7E5_ae = libHJUN_gv_heroJunkratMaxSteelTraps;
    const int auto4B46B7E5_ai = 1;

    // Variable Initialization
    lv_junkrat = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_junkratPlayer = UnitGetOwner(lv_junkrat);
    lv_trap = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_junkratTrackedTraps = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_trap) == "JunkratSteelTrap"))) {
            return false;
        }

        if (!((UnitGetType(libGame_gv_players[lv_junkratPlayer].lv_heroUnit) == "HeroJunkrat"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_junkratTrackedTraps = UnitGetTrackedUnitGroup(lv_junkrat, "JunkratSteelTrapUnitTracker");
    lv_arrayIterator = 1;
    for ( ; ( (auto4B46B7E5_ai >= 0 && lv_arrayIterator <= auto4B46B7E5_ae) || (auto4B46B7E5_ai < 0 && lv_arrayIterator >= auto4B46B7E5_ae) ) ; lv_arrayIterator += auto4B46B7E5_ai ) {
        if ((UnitGroupHasUnit(lv_junkratTrackedTraps, libHJUN_gv_heroJunkratSteelTraps[lv_junkratPlayer][lv_arrayIterator]) == false)) {
            libHJUN_gv_heroJunkratSteelTraps[lv_junkratPlayer][lv_arrayIterator] = lv_trap;
            libNtve_gf_SetDialogItemUnit(libHJUN_gv_heroJunkratSteelTrapsFrames[lv_arrayIterator], lv_trap, libCore_gv_playerGroupFromPlayer[lv_junkratPlayer]);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHJUN_gt_HeroJunkratSteelTrapUILogic_Init () {
    libHJUN_gt_HeroJunkratSteelTrapUILogic = TriggerCreate("libHJUN_gt_HeroJunkratSteelTrapUILogic_Func");
    TriggerEnable(libHJUN_gt_HeroJunkratSteelTrapUILogic, false);
    TriggerAddEventPlayerEffectUsed(libHJUN_gt_HeroJunkratSteelTrapUILogic, c_playerAny, "JunkratSteelTrapAddTrackedUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Junkrat - Steel Trap Roots
//--------------------------------------------------------------------------------------------------
bool libHJUN_gt_HeroJunkratSteelTrapRoots_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTrap;
    unit lv_trap;
    int lv_junkratPlayer;

    // Automatic Variable Declarations
    const int auto93718D05_ae = libHJUN_gv_heroJunkratMaxSteelTraps;
    const int auto93718D05_ai = 1;

    // Variable Initialization
    lv_trap = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_junkratPlayer = UnitGetOwner(lv_trap);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_trap) == "JunkratSteelTrap"))) {
            return false;
        }

        if (!((UnitGetType(libGame_gv_players[lv_junkratPlayer].lv_heroUnit) == "HeroJunkrat"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_junkratPlayer = UnitGetOwner(lv_trap);
    lv_itTrap = 1;
    for ( ; ( (auto93718D05_ai >= 0 && lv_itTrap <= auto93718D05_ae) || (auto93718D05_ai < 0 && lv_itTrap >= auto93718D05_ae) ) ; lv_itTrap += auto93718D05_ai ) {
        if ((libHJUN_gv_heroJunkratSteelTraps[lv_junkratPlayer][lv_itTrap] == lv_trap)) {
            libHJUN_gv_heroJunkratSteelTraps[lv_junkratPlayer][lv_itTrap] = null;
            DialogControlHookup(libHJUN_gv_heroJunkratSteelTrapsFrames[lv_itTrap], c_triggerControlTypeImage, "SteelTrapActiveFrame");
            DialogControlSendAnimationEvent(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[lv_junkratPlayer], "PulseAnim");
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHJUN_gt_HeroJunkratSteelTrapRoots_Init () {
    libHJUN_gt_HeroJunkratSteelTrapRoots = TriggerCreate("libHJUN_gt_HeroJunkratSteelTrapRoots_Func");
    TriggerEnable(libHJUN_gt_HeroJunkratSteelTrapRoots, false);
    TriggerAddEventPlayerEffectUsed(libHJUN_gt_HeroJunkratSteelTrapRoots, c_playerAny, "JunkratSteelTrapKillOldTrapSource");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Junkrat - Steel Trap and Concussion Mine Abathur Cleanup
//--------------------------------------------------------------------------------------------------
bool libHJUN_gt_HeroJunkratSteelTrapandConcussionMineAbathurCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_triggeringUnit;
    unit lv_createdUnit;
    int lv_ownerOfTriggeringUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringUnit = EventUnit();
    lv_createdUnit = EventUnitCreatedUnit();
    lv_ownerOfTriggeringUnit = UnitGetOwner(lv_triggeringUnit);

    // Conditions
    if (testConds) {
        if (!((libGame_gv_players[lv_ownerOfTriggeringUnit].lv_heroData.lv_heroCatalogLink == "Abathur"))) {
            return false;
        }

        if (!(((UnitGetType(lv_createdUnit) == "JunkratConcussionMine") || (UnitGetType(lv_createdUnit) == "JunkratSteelTrap")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_createdUnit, "AbathurUltimateEvolutionCleanupTarget", lv_triggeringUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHJUN_gt_HeroJunkratSteelTrapandConcussionMineAbathurCleanup_Init () {
    libHJUN_gt_HeroJunkratSteelTrapandConcussionMineAbathurCleanup = TriggerCreate("libHJUN_gt_HeroJunkratSteelTrapandConcussionMineAbathurCleanup_Func");
    TriggerEnable(libHJUN_gt_HeroJunkratSteelTrapandConcussionMineAbathurCleanup, false);
    TriggerAddEventUnitCreated(libHJUN_gt_HeroJunkratSteelTrapandConcussionMineAbathurCleanup, null, "JunkratSteelTrap", null);
    TriggerAddEventUnitCreated(libHJUN_gt_HeroJunkratSteelTrapandConcussionMineAbathurCleanup, null, "JunkratConcussionMine", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Junkrat - Concussion Mine Camera Lock
//--------------------------------------------------------------------------------------------------
bool libHJUN_gt_HeroJunkratConcussionMineCameraLock_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_PlayerHeroDisplacementCameraLock(EventUnit(), EventUnitBehavior());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHJUN_gt_HeroJunkratConcussionMineCameraLock_Init () {
    libHJUN_gt_HeroJunkratConcussionMineCameraLock = TriggerCreate("libHJUN_gt_HeroJunkratConcussionMineCameraLock_Func");
    TriggerEnable(libHJUN_gt_HeroJunkratConcussionMineCameraLock, false);
    TriggerAddEventUnitBehaviorChange(libHJUN_gt_HeroJunkratConcussionMineCameraLock, null, "JunkratConcussionMineLaunchTarget", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Junkrat - Heroic Ability - Cast (Normal Move)
//--------------------------------------------------------------------------------------------------
bool libHJUN_gt_HeroJunkratHeroicAbilityCastNormalMove_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_junkrat;
    int lv_player;
    unit lv_controllerUnit;
    bool lv_ripTireMoveEnable;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_junkrat = EventUnit();
    lv_player = UnitGetOwner(lv_junkrat);
    lv_controllerUnit = EventUnitCreatedUnit();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(lv_controllerUnit) == "JunkratRocketRideTrackerUnit") || (UnitGetType(lv_controllerUnit) == "JunkratRIPTire")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSelect(lv_controllerUnit, lv_player, true);
    if ((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lv_player) == true)) {
        UnitCreateAIThinkTree(lv_controllerUnit);
    }

    libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_controllerUnit);
    libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHJUN_gt_HeroJunkratHeroicAbilityCastNormalMove_Init () {
    libHJUN_gt_HeroJunkratHeroicAbilityCastNormalMove = TriggerCreate("libHJUN_gt_HeroJunkratHeroicAbilityCastNormalMove_Func");
    TriggerEnable(libHJUN_gt_HeroJunkratHeroicAbilityCastNormalMove, false);
    TriggerAddEventUnitCreated(libHJUN_gt_HeroJunkratHeroicAbilityCastNormalMove, null, "JunkratRocketRide", null);
    TriggerAddEventUnitCreated(libHJUN_gt_HeroJunkratHeroicAbilityCastNormalMove, null, "JunkratRIPTire", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Junkrat - Heroic Ability - Expires
//--------------------------------------------------------------------------------------------------
bool libHJUN_gt_HeroJunkratHeroicAbilityExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[lv_player].lv_heroUnitGroup;
    libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHJUN_gt_HeroJunkratHeroicAbilityExpires_Init () {
    libHJUN_gt_HeroJunkratHeroicAbilityExpires = TriggerCreate("libHJUN_gt_HeroJunkratHeroicAbilityExpires_Func");
    TriggerEnable(libHJUN_gt_HeroJunkratHeroicAbilityExpires, false);
    TriggerAddEventPlayerEffectUsed(libHJUN_gt_HeroJunkratHeroicAbilityExpires, c_playerAny, "JunkratHeroicAbilityUnitDiesDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Junkrat - Rocket Ride - Mount
//--------------------------------------------------------------------------------------------------
bool libHJUN_gt_HeroJunkratRocketRideMount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mountingUnit;
    int lv_mountingPlayer;
    string lv_mountingUnitType;
    actor lv_heroActor;
    int lv_heroIndex;
    fixed lv_mountWalkAnimMoveSpeed;
    string lv_mountModel;
    string lv_actorNameForMount;
    actor lv_mountActor;

    // Automatic Variable Declarations
    fixed auto84AF1970_at;

    // Variable Initialization
    lv_mountingUnit = EventUnit();
    lv_mountingPlayer = UnitGetOwner(lv_mountingUnit);
    lv_mountingUnitType = UnitGetType(lv_mountingUnit);
    lv_heroActor = libNtve_gf_MainActorofUnit(lv_mountingUnit);
    lv_heroIndex = lv_mountingPlayer;
    lv_actorNameForMount = "MountModel";

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(lv_mountingUnit) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(lv_mountingUnit) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mountWalkAnimMoveSpeed = (CatalogFieldValueGetAsFixed(c_gameCatalogUnit, "HeroJunkrat", "Speed", lv_mountingPlayer) * (CatalogFieldValueGetAsFixed(c_gameCatalogBehavior, "JunkratRocketRideMountSpeedBoost", "Modification.UnifiedMoveSpeedFactor", lv_mountingPlayer) + 1.0));
    ActorSend(lv_heroActor, "PhysicsTerminate");
    lv_mountModel = "JunkratRocketRideMount";
    ActorSend(lv_heroActor, libNtve_gf_Create((lv_actorNameForMount), (lv_mountModel)));
    lv_mountActor = ActorFromActor(lv_heroActor, (lv_actorNameForMount));
    ActorSend(lv_mountActor, libNtve_gf_AnimClear("Birth", 0.0));
    ActorSend(lv_heroActor, libNtve_gf_RefSet("::Host", (lv_actorNameForMount)));
    ActorSend(lv_heroActor, libNtve_gf_HostSiteOpsSet("::Host", "SOpAttachMount", 0, 0));
    ActorSend(lv_heroActor, libNtve_gf_RefSet("::HostForProps", "PropsHost"));
    ActorSend(lv_mountActor, libNtve_gf_RefSet("::HostForProps", (lv_mountingUnitType)));
    ActorSend(lv_heroActor, libNtve_gf_SetWalkAnimMoveSpeed(lv_mountWalkAnimMoveSpeed));
    ActorSend(lv_mountActor, libNtve_gf_Signal("MountSound"));
    auto84AF1970_at = 0;
    while (!((UnitBehaviorDuration(lv_mountingUnit, "JunkratRocketRidePostRideBehavior") <= 4.0625)) && auto84AF1970_at <= 1.0625) {
        Wait(0.0625, c_timeGame);
        auto84AF1970_at = auto84AF1970_at + 0.0625;
    }
    ActorSend(lv_mountActor, MakeMsgAnimPlay("Channel", "Birth,Alternate", 0, 0.0, -1.0, 1.0, c_animTimeVariantAsTimeScale));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHJUN_gt_HeroJunkratRocketRideMount_Init () {
    libHJUN_gt_HeroJunkratRocketRideMount = TriggerCreate("libHJUN_gt_HeroJunkratRocketRideMount_Func");
    TriggerEnable(libHJUN_gt_HeroJunkratRocketRideMount, false);
    TriggerAddEventUnitBehaviorChange(libHJUN_gt_HeroJunkratRocketRideMount, null, "JunkratRocketRideMountSpeedBoost", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Junkrat - Rocket Ride - Dismount
//--------------------------------------------------------------------------------------------------
bool libHJUN_gt_HeroJunkratRocketRideDismount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dismountingUnit;
    int lv_dismountingPlayer;
    int lv_heroIndex;
    actor lv_heroActor;
    fixed lv_heroWalkAnimMoveSpeed;
    string lv_mountActorName;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_dismountingUnit = EventUnit();
    lv_dismountingPlayer = UnitGetOwner(lv_dismountingUnit);
    lv_heroIndex = libCore_gf_GetHeroIndexForUnitType(UnitGetType(lv_dismountingUnit));
    lv_heroActor = libNtve_gf_MainActorofUnit(lv_dismountingUnit);
    lv_mountActorName = "MountModel";

    // Conditions
    if (testConds) {
        if (!((lv_dismountingPlayer <= libCore_gv_bALMaxEnginePlayerCount))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroWalkAnimMoveSpeed = CatalogFieldValueGetAsFixed(c_gameCatalogActor, UnitGetType(lv_dismountingUnit), "WalkAnimMoveSpeed", lv_dismountingPlayer);
    ActorSend(lv_heroActor, libNtve_gf_RefClear("::Host"));
    ActorSend(lv_heroActor, libNtve_gf_HostSiteOpsSet("::Host", "SOpBasicScopeFollow", 0, 0));
    ActorSend(lv_heroActor, libNtve_gf_Signal("HostSetFromTriggers"));
    ActorSend(ActorFromScope(ActorScopeFromUnit(lv_dismountingUnit), (lv_mountActorName)), "Destroy Immediate");
    ActorSend(lv_heroActor, libNtve_gf_SetWalkAnimMoveSpeed(lv_heroWalkAnimMoveSpeed));
    if ((UnitIsAlive(lv_dismountingUnit) == true)) {
        ActorSend(lv_heroActor, libNtve_gf_Create("DismountSmokeScreen", ""));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libHJUN_gt_HeroJunkratRocketRideDismount_Init () {
    libHJUN_gt_HeroJunkratRocketRideDismount = TriggerCreate("libHJUN_gt_HeroJunkratRocketRideDismount_Func");
    TriggerEnable(libHJUN_gt_HeroJunkratRocketRideDismount, false);
    TriggerAddEventUnitBehaviorChange(libHJUN_gt_HeroJunkratRocketRideDismount, null, "JunkratRocketRideMountSpeedBoost", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Junkrat - Rocket Ride - Dismount On Cheer Dance Taunt Used
//--------------------------------------------------------------------------------------------------
bool libHJUN_gt_HeroJunkratRocketRideDismountOnCheerDanceTauntUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_triggeringUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_triggeringUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_triggeringUnit, "JunkratRocketRideMountSpeedBoost") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_triggeringUnit, "AbilityUseResponseSetDismount", lv_triggeringUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHJUN_gt_HeroJunkratRocketRideDismountOnCheerDanceTauntUsed_Init () {
    libHJUN_gt_HeroJunkratRocketRideDismountOnCheerDanceTauntUsed = TriggerCreate("libHJUN_gt_HeroJunkratRocketRideDismountOnCheerDanceTauntUsed_Func");
    TriggerEnable(libHJUN_gt_HeroJunkratRocketRideDismountOnCheerDanceTauntUsed, false);
    TriggerAddEventUnitAbility(libHJUN_gt_HeroJunkratRocketRideDismountOnCheerDanceTauntUsed, null, AbilityCommand("HoldFire", 3), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libHJUN_gt_HeroJunkratRocketRideDismountOnCheerDanceTauntUsed, null, AbilityCommand("HoldFire", 4), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Junkrat - Rocket Ride - Land
//--------------------------------------------------------------------------------------------------
bool libHJUN_gt_HeroJunkratRocketRideLand_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_junkratUnit;
    int lv_junkratPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_junkratUnit = EventUnit();
    lv_junkratPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_FullscreenOverlayAddItemForPlayer(lv_junkratPlayer, libUIUI_ge_FullscreenOverlayPriorities_Death, "Cutscenes\\GameUI_JunkratRespawnOverlay.StormCutscene", "Dead");
    Wait(1.0, c_timeGame);
    UnitCreateEffectUnit(lv_junkratUnit, "JunkratRocketRidePortBackToBase", lv_junkratUnit);
    UnitSetFacing(lv_junkratUnit, PointGetFacing(PlayerStartLocation(lv_junkratPlayer)), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHJUN_gt_HeroJunkratRocketRideLand_Init () {
    libHJUN_gt_HeroJunkratRocketRideLand = TriggerCreate("libHJUN_gt_HeroJunkratRocketRideLand_Func");
    TriggerEnable(libHJUN_gt_HeroJunkratRocketRideLand, false);
    TriggerAddEventUnitBehaviorChange(libHJUN_gt_HeroJunkratRocketRideLand, null, "JunkratRocketRidePostRideBehavior", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Junrkat - Rocket Ride - Land End
//--------------------------------------------------------------------------------------------------
bool libHJUN_gt_HeroJunrkatRocketRideLandEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_junkratUnit;
    int lv_junkratPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_junkratUnit = EventUnit();
    lv_junkratPlayer = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(UnitGetOwner(libGame_gv_players[lv_junkratPlayer].lv_heroUnit), "Cutscenes\\GameUI_JunkratRespawnOverlay.StormCutscene", "Dead");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libHJUN_gt_HeroJunrkatRocketRideLandEnd_Init () {
    libHJUN_gt_HeroJunrkatRocketRideLandEnd = TriggerCreate("libHJUN_gt_HeroJunrkatRocketRideLandEnd_Func");
    TriggerEnable(libHJUN_gt_HeroJunrkatRocketRideLandEnd, false);
    TriggerAddEventUnitBehaviorChange(libHJUN_gt_HeroJunrkatRocketRideLandEnd, null, "JunkratRocketRidePostRideBehavior", c_unitBehaviorChangeDeactivate);
}

void libHJUN_InitTriggers () {
    libHJUN_gt_HeroAIMiscModInitialization_Init();
    libHJUN_gt_HeroAIAddToTierDataJunkrat_Init();
    libHJUN_gt_HeroJunkratFragLauncherBurstFireTalentRespec_Init();
    libHJUN_gt_HeroJunkratFragLauncherSpreadVolleyCast_Init();
    libHJUN_gt_HeroJunkratSteelTrapsUIInitialization_Init();
    libHJUN_gt_HeroJunkratSteelTrapUILogic_Init();
    libHJUN_gt_HeroJunkratSteelTrapRoots_Init();
    libHJUN_gt_HeroJunkratSteelTrapandConcussionMineAbathurCleanup_Init();
    libHJUN_gt_HeroJunkratConcussionMineCameraLock_Init();
    libHJUN_gt_HeroJunkratHeroicAbilityCastNormalMove_Init();
    libHJUN_gt_HeroJunkratHeroicAbilityExpires_Init();
    libHJUN_gt_HeroJunkratRocketRideMount_Init();
    libHJUN_gt_HeroJunkratRocketRideDismount_Init();
    libHJUN_gt_HeroJunkratRocketRideDismountOnCheerDanceTauntUsed_Init();
    libHJUN_gt_HeroJunkratRocketRideLand_Init();
    libHJUN_gt_HeroJunrkatRocketRideLandEnd_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libHJUN_InitLib_completed = false;

void libHJUN_InitLib () {
    if (libHJUN_InitLib_completed) {
        return;
    }

    libHJUN_InitLib_completed = true;

    libHJUN_InitLibraries();
    libHJUN_InitVariables();
    libHJUN_InitTriggers();
}

