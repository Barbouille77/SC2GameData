//--------------------------------------------------------------------------------------------------
// Zarya Tactical
//--------------------------------------------------------------------------------------------------

// Abilities
const string c_AB_ZaryaParticleGrenade                          = "ZaryaParticleGrenade";
const string c_AB_ZaryaPersonalBarrier                          = "ZaryaPersonalBarrier";
const string c_AB_ZaryaShieldAlly                               = "ZaryaShieldAlly";
const string c_AB_ZaryaGravitonSurge                            = "ZaryaGravitonSurge";
const string c_AB_ZaryaExpulsionZone                            = "ZaryaExpulsionZone";


const fixed c_AB_ZaryaParticleGrenadeRange                      = 15.0;
const fixed c_AB_ZaryaParticleGrenadeChargeMax                  = 4;
const fixed c_AB_ZaryaParticleGrenadeRadius                     = 2.25;
const string c_AB_ZaryaParticleGrenadeGrenadierTalent           = "ZaryaParticleGrenadeGrenadier";

const fixed c_AB_ZaryaShieldAllyRange                           = 10.0;

const fixed c_AB_ZaryaGravitonSurgeRange                        = 10.0;
const fixed c_AB_ZaryaGravitonSurgeRadius                       = 4.0;

const fixed c_AB_ZaryaExpulsionZoneRange                        = 10.0;
const fixed c_AB_ZaryaExpulsionZoneRadius                       = 3.5;

const string c_ZaryaPainIsTemporaryItem                         = "ZaryaPainIsTemporaryItem";

//--------------------------------------------------------------------------------------------------
bool ZaryaParticleGrenade (int player, unit aiUnit, unitgroup scanGroup) {
    //Small low-cooldown damage AE
    unit targetEnemy;
    order ord;
    fixed energy;
    fixed chargesUsed;
    Storm_AI_TargetQueryOptions query;

    ord = StormHeroAICreateOrder(player, c_AB_ZaryaParticleGrenade, 0);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return false;
    }

    // Reserve some charges if at low energy, aggressively spend them if high (or with Grenadier)
    if (!PlayerHasTalent(player, c_AB_ZaryaParticleGrenadeGrenadierTalent)) {
        energy = UnitGetPropertyFixed(aiUnit, c_unitPropEnergyPercent, c_unitPropCurrent);
        chargesUsed = 
            UnitGetChargeUsed(
                aiUnit,
                CatalogFieldValueGet(
                    c_gameCatalogAbil,
                    c_AB_ZaryaParticleGrenade,
                    "Cost[0].Charge.Link",
                    c_playerAny
                )
            );
        if ((chargesUsed/c_AB_ZaryaParticleGrenadeChargeMax > 0.5 )
         && (energy <= libAIAI_gv_aIHeroLowEnergyPercent)) {
            query.lv_maxHealthPercent = libAIAI_gv_aIHeroMediumHealthPercent;
        }
    }
    query.lv_healthFactor = c_Storm_AI_PreferUnhealthyTargets;
    query.lv_distanceFactor = c_Storm_AI_PreferCloserTargets;
    query.lv_maxDistance = c_AB_ZaryaParticleGrenadeRange;
    targetEnemy = FindBestTacticalTarget(scanGroup, aiUnit, query);
    if (!UnitIsValid(targetEnemy)) {
        return false;
    }

    if (!EnoughEnemiesInArea(
            scanGroup, 
            UnitGetPosition(targetEnemy),
            c_AB_ZaryaParticleGrenadeRadius,
            c_Storm_AI_AtLeast1Hero,
            c_Storm_AI_AtLeast1Creep,
            c_Storm_AI_AtLeast3Minions)
        ) {
        return false;
    }

    return HeroIssueOrder (
               player,
               aiUnit,
               ord,
               null,
               c_orderQueueReplace,
               null,
               UnitGetPosition(targetEnemy)
           );

}

//---------------------------------------------------------------------------------------------
bool ZaryaPersonalBarrier (int player, unit aiUnit, unitgroup scanGroup) {
    //Self-buff shield
    order ord;

    ord = StormHeroAICreateOrder(player, c_AB_ZaryaPersonalBarrier, 0);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return false;
    }

    if (!HaveBeenAttackedRecently(aiUnit)) {
        return false;
    }

    return HeroIssueOrder (player, aiUnit, ord, null, c_orderQueueAddToFront, null, null);
}

//---------------------------------------------------------------------------------------------
bool ZaryaShieldAlly (int player, unit aiUnit, unitgroup scanGroup) {
    //Shield for targeted ally
    order ord;
    unit targetAlly;
    unit allyHero;
    int numAllies;
    int allyHeroIndex;
    fixed allyHealth;
    fixed bestAllyHealth;
    unitgroup allyUnitGroup;

    ord = StormHeroAICreateOrder(player, c_AB_ZaryaShieldAlly, 0);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return false;
    }

    allyUnitGroup = AllyHeroUnitsInArea(
                        player, 
                        UnitGetPosition(aiUnit),
                        c_AB_ZaryaShieldAllyRange
                    );
    if (allyUnitGroup == null) {
        return false;
    }

    numAllies = CountPlayersInUnitGroup(allyUnitGroup);
    bestAllyHealth = libAIAI_gv_aIHeroMediumHealthPercent;
    // Cast on a low-health ally near enemy units
    for (allyHeroIndex = 1; allyHeroIndex <= numAllies; allyHeroIndex += 1) {
        allyHero = UnitGroupUnit(allyUnitGroup, allyHeroIndex);
        if (
            UnitIsValid(allyHero) 
            && AnyEnemiesInArea(scanGroup, UnitGetPosition(allyHero), c_AB_ZaryaShieldAllyRange)
            ) {
            allyHealth =
                UnitGetPropertyFixed(
                    allyHero, 
                    c_unitPropLifePercent,
                    c_unitPropCurrent
                );
            if (allyHealth < bestAllyHealth) {
                targetAlly = allyHero;
                bestAllyHealth = allyHealth;
            }
        }
    }
    if (!UnitIsValid(targetAlly)) {
        return false;
    }
    return HeroIssueOrder (player, aiUnit, ord, null, c_orderQueueAddToFront, targetAlly, null);

}

//---------------------------------------------------------------------------------------------
bool ZaryaGravitonSurge (int player, unit aiUnit, unitgroup scanGroup) {
    // AE that initially pulls in enemies and holds them within a smaller radius
    order ord;
    unit targetEnemy;
    unit enemyHero;
    unitgroup enemyUnitGroup;
    int enemyHeroIndex;
    int numEnemies;
    int minEnemies;
    fixed energy = UnitGetPropertyFixed(aiUnit, c_unitPropEnergyPercent, c_unitPropCurrent);
    Storm_AI_TargetQueryOptions query;

    ord = StormHeroAICreateOrder(player, c_AB_ZaryaGravitonSurge, 0);
    if (!UnitOrderIsValid(aiUnit, ord)) {
        return false;
    }
    if (
        !TeamFightInArea(
             player,
             scanGroup,
             UnitGetPosition(aiUnit),
             c_Storm_AI_DefaultTeamfightRange
        )
    ) {
        return false;
    }

    query.lv_healthFactor = c_Storm_AI_PreferUnhealthyTargets;
    query.lv_distanceFactor = c_Storm_AI_PreferCloserTargets;
    query.lv_maxHealthPercent = libAIAI_gv_aIHeroMediumHealthPercent;
    query.lv_maxDistance = c_AB_ZaryaGravitonSurgeRange;
    targetEnemy = FindBestHero(scanGroup, aiUnit, query);
    if (!UnitIsValid(targetEnemy)) {
        return false;
    }

    return HeroIssueOrder(
               player,
               aiUnit,
               ord,
               null,
               c_orderQueueReplace,
               null,
               UnitGetPosition(targetEnemy)
           );
}

//---------------------------------------------------------------------------------------------
bool ZaryaExpulsionZone (int player, unit aiUnit, unitgroup scanGroup) {
    // Missile that knocks back, blinds, and damages enemies in an area when detonated 
    // (or reaches the end of it's range)
    order spellOrd;
    order attackOrd;
    unit targetHero;
    unitgroup enemyUnitGroup;
    int numEnemies;
    int enemyHeroIndex;
    unit enemyHero;
    fixed healthReq;

    spellOrd = StormHeroAICreateOrder(player, c_AB_ZaryaExpulsionZone, 0);
    if (!UnitOrderIsValid(aiUnit, spellOrd)) {
        return false;
    }

    attackOrd = StormHeroAICreateOrder(player, c_Storm_AB_Attack, 0);
    if (!UnitOrderIsValid(aiUnit, attackOrd)) {
        return false;
    }

    if (
        !TeamFightInArea(
            player,
            scanGroup,
            UnitGetPosition(aiUnit),
            c_AB_ZaryaExpulsionZoneRange
        )
    ) {
        return false;
    }
    healthReq = 100.0;
    // Iterate through nearby enemies and cast if one is found with enough enemies surrounding it,
    // preferring the lower health target
    enemyUnitGroup = UnitGroupFilterHeroes(
                        UnitsInArea(
                            scanGroup,
                            UnitGetPosition(aiUnit),
                            c_AB_ZaryaExpulsionZoneRange
                        )
                     );
    numEnemies = CountPlayersInUnitGroup(enemyUnitGroup);
    for (enemyHeroIndex = 1; enemyHeroIndex <= numEnemies; enemyHeroIndex += 1) {
        enemyHero = UnitGroupUnit(enemyUnitGroup, enemyHeroIndex);
        if (UnitIsValid(enemyHero)) {
            if (
                UnitGetPropertyFixed(
                    enemyHero,
                    c_unitPropLifePercent,
                    c_unitPropCurrent
                ) < healthReq
             && EnoughEnemiesInArea(
                    scanGroup,
                    UnitGetPosition(enemyHero),
                    c_AB_ZaryaExpulsionZoneRadius,
                    c_Storm_AI_AtLeast2Heroes,
                    c_Storm_AI_AtLeast4Creeps,
                    c_Storm_AI_AtLeast6Minions
                )
            ) {
                targetHero = enemyHero;
                healthReq =
                    UnitGetPropertyFixed(
                        targetHero,
                        c_unitPropLifePercent,
                        c_unitPropCurrent
                    );
            }
        }
    }
    if (!UnitIsValid(targetHero)) {
        return false;
    }

    return HeroIssueOrder (
               player,
               aiUnit,
               spellOrd,
               attackOrd,
               c_orderQueueAddToFront,
               targetHero,
               UnitGetPosition(targetHero)
           );
}

//---------------------------------------------------------------------------------------------
bool ZaryaDefensiveItemCallback (int player, unit aiUnit, unitgroup scanGroup, string itemType, order ord, order ordTarget, order ordTogOn, order ordTogOff) {
    if (itemType == c_ZaryaPainIsTemporaryItem) {
        if (
            !HaveBeenAttackedRecently(aiUnit)
         || UnitGetPropertyFixed(
                aiUnit, 
                c_unitPropEnergyPercent, 
                c_unitPropCurrent
            ) < libAIAI_gv_aIHeroLowEnergyPercent
         || UnitGetPropertyFixed(
                aiUnit,
                c_unitPropLifePercent,
                c_unitPropCurrent
            ) > libAIAI_gv_aIHeroes[player].lv_endOffensiveHealth
        ) {
            return false;
        }
        return UnitIssueOrder(aiUnit, ord, c_orderQueueAddToFront);
    }
    return false;
}

//---------------------------------------------------------------------------------------------
void AIThinkZarya (int player, unit aiUnit, unitgroup scanGroup) {

    if (HeroSkipTactical(player, aiUnit)) {
        return;
    }

    if (HeroSkipOffensiveTactical(player, aiUnit)) {
        return;
    }

    if (ZaryaPersonalBarrier(player, aiUnit, scanGroup)) {
        return;
    }

    if (UseItem(player, aiUnit, scanGroup, ZaryaDefensiveItemCallback)) {
        return;
    }

    if (ZaryaShieldAlly(player, aiUnit, scanGroup)) {
        return;
    }

    if (libAIAI_gf_HeroAIShouldUseUltimates(player)) {
        if (ZaryaGravitonSurge(player, aiUnit, scanGroup)) {
            return;
        }
        if (ZaryaExpulsionZone(player, aiUnit, scanGroup)) {
            return;
        }
    }

    if (ZaryaParticleGrenade(player, aiUnit, scanGroup)) {
        return;
    }

    if (RevealCloakedEnemies(player, aiUnit, scanGroup)) {
        return;
    }
}
