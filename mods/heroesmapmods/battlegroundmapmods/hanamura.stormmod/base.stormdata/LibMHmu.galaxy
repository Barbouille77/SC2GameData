include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/MapMechanicsLib"
include "TriggerLibs/UILib"

include "LibMHmu_h"

//--------------------------------------------------------------------------------------------------
// Library: Hanamura
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libMHmu_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libMapM_InitVariables();
    libUIUI_InitVariables();
}

// Variable Initialization
bool libMHmu_InitVariables_completed = false;

void libMHmu_InitVariables () {
    int init_i;
    int init_i1;
    int init_j1;

    if (libMHmu_InitVariables_completed) {
        return;
    }

    libMHmu_InitVariables_completed = true;

    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libMHmu_gv_maxPayloadCount_C; init_i1 += 1) {
            libMHmu_gv_payloadTimers[init_i].lv_spawnTimer[init_i1] = TimerCreate();
        }
        for (init_i1 = 0; init_i1 <= libMHmu_gv_maxPayloadCount_C; init_i1 += 1) {
            libMHmu_gv_payloadTimers[init_i].lv_showWarningTimer[init_i1] = TimerCreate();
        }
        for (init_i1 = 0; init_i1 <= libMHmu_gv_maxPayloadCount_C; init_i1 += 1) {
            libMHmu_gv_payloadTimers[init_i].lv_warningTimer[init_i1] = TimerCreate();
        }
        for (init_i1 = 0; init_i1 <= libMHmu_gv_maxPayloadCount_C; init_i1 += 1) {
            libMHmu_gv_payloadTimers[init_i].lv_audioTimer[init_i1] = TimerCreate();
        }
    }
    libMHmu_gv_payloadWarningDuration = 30;
    libMHmu_gv_payloadRespawnTimerDuration_C = 225;
    libMHmu_gv_bossCapturedVolleyAmount = 1;
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libMHmu_gv_payloadPath[init_i].lv_pathIndex = -1;
        for (init_i1 = 0; init_i1 <= libMHmu_gv_maxPayloadCount_C; init_i1 += 1) {
            libMHmu_gv_payloadPath[init_i].lv_lastCheckpointReachedIndex[init_i1] = 1;
        }
        for (init_i1 = 0; init_i1 <= libMHmu_gv_maxPayloadCount_C; init_i1 += 1) {
            libMHmu_gv_payloadPath[init_i].lv_payloadCurrentIndex[init_i1] = 1;
        }
        for (init_i1 = 0; init_i1 <= libMHmu_gv_maxPayloadCount_C; init_i1 += 1) {
            libMHmu_gv_payloadPath[init_i].lv_payloadCurrentDestinationPointIndex[init_i1] = 1;
        }
        for (init_i1 = 0; init_i1 <= libMHmu_gv_maxPayloadCount_C; init_i1 += 1) {
            libMHmu_gv_payloadPath[init_i].lv_pathCurrentIndex[init_i1] = 1;
        }
        for (init_i1 = 0; init_i1 <= libMHmu_gv_maxPayloadCount_C; init_i1 += 1) {
            libMHmu_gv_payloadPath[init_i].lv_pathIndexMax[init_i1] = 1;
        }
        for (init_i1 = 0; init_i1 <= libMHmu_gv_maxPayloadCount_C; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= libMHmu_gv_maxPathWaypoint_C; init_j1 += 1) {
                libMHmu_gv_payloadPath[init_i].lv_checkpointTextTagAlly[init_i1][init_j1] = c_textTagNone;
            }
        }
        for (init_i1 = 0; init_i1 <= libMHmu_gv_maxPayloadCount_C; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= libMHmu_gv_maxPathWaypoint_C; init_j1 += 1) {
                libMHmu_gv_payloadPath[init_i].lv_checkpointTextTagEnemy[init_i1][init_j1] = c_textTagNone;
            }
        }
    }
    libMHmu_gv_payloadDefaultPowerLevel = 1;
    libMHmu_gv_payloadEmpowermentValue_KeepDestroyed = 2;
    libMHmu_gv_payloadEmpowermentValue_FortDestroyed = 1;
    libMHmu_gv_hanamuraUI.lv_mainPanel = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadPanel = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadSpawningOrder = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadSpawningChaos = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadSpawningBoth = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadSpawningNotificationLabel_Both = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadSpawningNotificationLabelOrder = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadSpawningNotificationLabelChaos = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerFrameOrder_Path1 = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerFrameOrder_Path2 = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerFrameChaos_Path1 = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerFrameChaos_Path2 = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabel_Both = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabelOrder_Path1 = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabelOrder_Path2 = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabelChaos_Path1 = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabelChaos_Path2 = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_orderTeamAttackedCoreFrame = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_chaosTeamAttackedCoreFrame = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_orderTeamAttackedCoreLabel = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_chaosTeamAttackedCoreLabel = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_potentialShotsPanel = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_potentialShotsLabel = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_leftPotentialShotsLabel = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_rightPotentialShotsLabel = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadBGBarOrderPath1 = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadBGBarOrderPath2 = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadBGBarChaosPath1 = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadBGBarChaosPath2 = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadProgressBarOrderPath1 = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadProgressBarOrderPath2 = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadProgressBarChaosPath1 = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadProgressBarChaosPath2 = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadStatusFrameOrderPath1 = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadStatusFrameOrderPath2 = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadStatusFrameChaosPath1 = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadStatusFrameChaosPath2 = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadBlockedLabelFrame = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameTop = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameBottom = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadContestedFrame = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadBlockedIndicatorTopOrder = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadBlockedIndicatorTopChaos = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadBlockedIndicatorBottomOrder = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadBlockedIndicatorBottomChaos = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameTopOrder = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameTopChaos = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameBottomOrder = c_invalidDialogControlId;
    libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameBottomChaos = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libMHmu_gv_eOMPusherTimer[init_i] = TimerCreate();
    }
}

// Functions
void libMHmu_gf_ResetPayloadPathInformation (int lp_team, int lp_pathIndex) {
    // Automatic Variable Declarations
    // Implementation
    libMHmu_gv_payloadPath[lp_team].lv_payloadCurrentIndex[lp_pathIndex] = 1;
    libMHmu_gv_payloadPath[lp_team].lv_lastCheckpointReachedIndex[lp_pathIndex] = 1;
    PathSetVisible(libMHmu_gv_payloadPath[lp_team].lv_pathDisplay_Minimap[lp_pathIndex], c_pathLocationMinimap, false);
}

void libMHmu_gf_CreatePayloadPathForward (unit lp_payloadUnit) {
    // Variable Declarations
    int lv_team;
    int lv_pathIndex;
    int lv_waypointIndex;

    // Automatic Variable Declarations
    int autoB4170F5F_ae;
    const int autoB4170F5F_ai = 1;

    // Variable Initialization
    lv_team = libCore_gf_IntegerStoredForUnit(lp_payloadUnit, 2);
    lv_pathIndex = libCore_gf_IntegerStoredForUnit(lp_payloadUnit, 1);

    // Implementation
    if ((UnitIsAlive(lp_payloadUnit) == false)) {
        return ;
    }

    if ((libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex] != 0)) {
        PathClearWayPoints(libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex]);
        PathDestroy(libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex]);
        libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex] = 0;
        libMHmu_gv_payloadPath[lv_team].lv_pathCurrentIndex[lv_pathIndex] = 1;
        libMHmu_gv_payloadPath[lv_team].lv_pathIndexMax[lv_pathIndex] = 1;
    }

    PathCreateForUnit(PlayerGroupAll(), lp_payloadUnit);
    libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex] = PathLastCreated();
    PathSetOwnerPlayerId(libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex], UnitGetOwner(lp_payloadUnit));
    PathSetLineTexture(libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex], c_pathLocationMinimap, "Assets\\Textures\\storm_waypointline.dds");
    PathSetVisible(libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex], c_pathLocationWorld, false);
    PathSetVisible(libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex], c_pathLocationMinimap, true);
    PathSetDestinationPoint(libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex], libMHmu_gv_payloadPath[lv_team].lv_path[lv_pathIndex][libMHmu_gv_payloadPath[lv_team].lv_finalWaypointIndex[lv_pathIndex]]);
    autoB4170F5F_ae = (libMHmu_gv_payloadPath[lv_team].lv_finalWaypointIndex[lv_pathIndex] - 1);
    lv_waypointIndex = (libMHmu_gv_payloadPath[lv_team].lv_payloadCurrentIndex[lv_pathIndex] + 1);
    for ( ; ( (autoB4170F5F_ai >= 0 && lv_waypointIndex <= autoB4170F5F_ae) || (autoB4170F5F_ai < 0 && lv_waypointIndex >= autoB4170F5F_ae) ) ; lv_waypointIndex += autoB4170F5F_ai ) {
        PathAddWayPoint(libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex], libMHmu_gv_payloadPath[lv_team].lv_path[lv_pathIndex][lv_waypointIndex]);
        libMHmu_gv_payloadPath[lv_team].lv_pathIndexMax[lv_pathIndex] += 1;
    }
}

void libMHmu_gf_CreatePayloadPathBackward (unit lp_payloadUnit) {
    // Variable Declarations
    int lv_team;
    int lv_pathIndex;
    int lv_waypointIndex;

    // Automatic Variable Declarations
    int autoA0F3532C_ae;
    const int autoA0F3532C_ai = -1;

    // Variable Initialization
    lv_team = libCore_gf_IntegerStoredForUnit(lp_payloadUnit, 2);
    lv_pathIndex = libCore_gf_IntegerStoredForUnit(lp_payloadUnit, 1);

    // Implementation
    if ((UnitIsAlive(lp_payloadUnit) == false)) {
        return ;
    }

    if ((libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex] != 0)) {
        PathClearWayPoints(libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex]);
        PathDestroy(libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex]);
        libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex] = 0;
        libMHmu_gv_payloadPath[lv_team].lv_pathCurrentIndex[lv_pathIndex] = 1;
        libMHmu_gv_payloadPath[lv_team].lv_pathIndexMax[lv_pathIndex] = 1;
    }

    PathCreateForUnit(PlayerGroupAll(), lp_payloadUnit);
    libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex] = PathLastCreated();
    PathSetOwnerPlayerId(libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex], UnitGetOwner(lp_payloadUnit));
    PathSetLineTexture(libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex], c_pathLocationMinimap, "Assets\\Textures\\storm_waypointline.dds");
    PathSetVisible(libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex], c_pathLocationWorld, false);
    PathSetVisible(libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex], c_pathLocationMinimap, true);
    PathSetDestinationPoint(libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex], libMHmu_gv_payloadPath[lv_team].lv_path[lv_team][libMHmu_gv_payloadPath[lv_team].lv_lastCheckpointReachedIndex[lv_pathIndex]]);
    autoA0F3532C_ae = libMHmu_gv_payloadPath[lv_team].lv_lastCheckpointReachedIndex[lv_pathIndex];
    lv_waypointIndex = libMHmu_gv_payloadPath[lv_team].lv_payloadCurrentIndex[lv_pathIndex];
    for ( ; ( (autoA0F3532C_ai >= 0 && lv_waypointIndex <= autoA0F3532C_ae) || (autoA0F3532C_ai < 0 && lv_waypointIndex >= autoA0F3532C_ae) ) ; lv_waypointIndex += autoA0F3532C_ai ) {
        PathAddWayPoint(libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex], libMHmu_gv_payloadPath[lv_team].lv_path[lv_pathIndex][lv_waypointIndex]);
        libMHmu_gv_payloadPath[lv_team].lv_pathIndexMax[lv_pathIndex] += 1;
    }
}

trigger auto_libMHmu_gf_CreatePayloadWarningForTeam_Trigger = null;
int auto_libMHmu_gf_CreatePayloadWarningForTeam_lp_team;
int auto_libMHmu_gf_CreatePayloadWarningForTeam_lp_pathIndex;

void libMHmu_gf_CreatePayloadWarningForTeam (int lp_team, int lp_pathIndex) {
    auto_libMHmu_gf_CreatePayloadWarningForTeam_lp_team = lp_team;
    auto_libMHmu_gf_CreatePayloadWarningForTeam_lp_pathIndex = lp_pathIndex;

    if (auto_libMHmu_gf_CreatePayloadWarningForTeam_Trigger == null) {
        auto_libMHmu_gf_CreatePayloadWarningForTeam_Trigger = TriggerCreate("auto_libMHmu_gf_CreatePayloadWarningForTeam_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_CreatePayloadWarningForTeam_Trigger, false, false);
}

bool auto_libMHmu_gf_CreatePayloadWarningForTeam_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libMHmu_gf_CreatePayloadWarningForTeam_lp_team;
    int lp_pathIndex = auto_libMHmu_gf_CreatePayloadWarningForTeam_lp_pathIndex;

    // Variable Declarations
    int lv_payloadOwner;
    timer lv_timer;
    unit lv_warningUnit;
    bool lv_warningCountdownPlayed;
    int lv_dialogItem;

    // Automatic Variable Declarations
    fixed autoB0C33AD2_at;
    fixed auto606C0E0E_at;

    // Variable Initialization
    lv_timer = TimerCreate();
    lv_dialogItem = c_invalidDialogControlId;

    // Implementation
    if ((lp_team == libGame_gv_teamOrderIndex_C)) {
        lv_payloadOwner = libCore_gv_cOMPUTER_TeamOrder;
        if ((lp_pathIndex == 1)) {
            lv_dialogItem = libMHmu_gv_hanamuraUI.lv_payloadBGBarOrderPath1;
        }
        else {
            lv_dialogItem = libMHmu_gv_hanamuraUI.lv_payloadBGBarOrderPath2;
        }
    }
    else {
        lv_payloadOwner = libCore_gv_cOMPUTER_TeamChaos;
        if ((lp_pathIndex == 1)) {
            lv_dialogItem = libMHmu_gv_hanamuraUI.lv_payloadBGBarChaosPath1;
        }
        else {
            lv_dialogItem = libMHmu_gv_hanamuraUI.lv_payloadBGBarChaosPath2;
        }
    }
    lv_timer = libMHmu_gv_payloadTimers[lp_team].lv_warningTimer[lp_pathIndex];
    if ((lp_pathIndex == 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_MHmu_C5783FBD"), true);
        return true;
    }

    libMHmu_gv_payload[lp_team].lv_spawnTime[lp_pathIndex] = TimerGetElapsed(libGame_gv_gameTimer);
    Wait(0.5, c_timeGame);
    libCore_gf_SendActorMessageToDoodadsInRegion("Signal Payload", RegionCircle(libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][1], 5.0), "Storm_Building_OWHana_Payload_Exit");
    libCore_gf_CreateMinimapPingStormWithPlayerId(PlayerGroupAll(), "OWHanaPayloadWarning", libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][1], ColorWithAlpha(0,0,0,0), libMHmu_gv_payloadWarningDuration, lv_payloadOwner);
    AddPointOfInterest(libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][1], libMHmu_gv_payloadNearbyRadius_C, libMHmu_gv_payloadWarningDuration, "PrepareForPayload", libNtve_ge_GoalTeam_Both, 0);
    TimerStart(lv_timer, libMHmu_gv_payloadWarningDuration, false, c_timeGame);
    if ((libMHmu_gv_path1PayloadsInitiallySpawned == false)) {
        libMHmu_gf_ShowPayloadsSpawningFrameCombined();
    }
    else {
        libMHmu_gf_ShowPayloadArrows(lp_team, lp_pathIndex);
    }
    autoB0C33AD2_at = 0;
    while (!((TimerGetRemaining(lv_timer) <= 2.0)) && autoB0C33AD2_at <= 30.0) {
        Wait(1.0, c_timeGame);
        autoB0C33AD2_at = autoB0C33AD2_at + 1.0;
    }
    DialogControlSetVisible(lv_dialogItem, PlayerGroupAll(), true);
    auto606C0E0E_at = 0;
    while (!((TimerGetRemaining(lv_timer) <= 0.0)) && auto606C0E0E_at <= 2.0) {
        Wait(1.0, c_timeGame);
        auto606C0E0E_at = auto606C0E0E_at + 1.0;
    }
    RemovePointOfInterest(libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][1], "PrepareForPayload", libNtve_ge_GoalTeam_Both);
    libMHmu_gf_CreatePayloadForTeam(lp_pathIndex, lp_team, lv_payloadOwner);
    Wait(1.0, c_timeGame);
    libCore_gf_SendActorMessageToDoodadsInRegion("AnimBracketStop Birth 0 1.000000 AsTimeScale", RegionCircle(libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][1], 5.0), "Storm_Building_OWHana_Payload_Exit");
    libMHmu_gf_ShowRelevantPayloadTimers();
    return true;
}

void libMHmu_gf_CreatePayloadForTeam (int lp_pathIndex, int lp_team, int lp_payloadOwner) {
    // Variable Declarations
    int lv_dummyPlayer;
    int lv_payloadPlayer;
    int lv_minimapUnitPlayer;
    int lv_itPathPoint;
    string lv_ammoLevelActorMessage;
    int lv_powerLevel;

    // Automatic Variable Declarations
    int autoA20847BC_ae;
    const int autoA20847BC_ai = 1;
    playergroup auto449949E7_g;
    int auto449949E7_var;
    int auto39EE7BCB_ae;
    const int auto39EE7BCB_ai = 1;

    // Variable Initialization
    lv_ammoLevelActorMessage = "";

    // Implementation
    libMHmu_gf_PayloadSpawnedSetUI(lp_team, lp_pathIndex);
    if ((lp_team == libGame_gv_teamOrderIndex_C)) {
        lv_dummyPlayer = libCore_gv_cOMPUTER_NoVision_TeamChaos;
        lv_payloadPlayer = libCore_gv_cOMPUTER_TeamOrder;
        lv_minimapUnitPlayer = libCore_gv_cOMPUTER_NoVision_TeamOrder;
    }
    else {
        lv_dummyPlayer = libCore_gv_cOMPUTER_NoVision_TeamOrder;
        lv_payloadPlayer = libCore_gv_cOMPUTER_TeamChaos;
        lv_minimapUnitPlayer = libCore_gv_cOMPUTER_NoVision_TeamChaos;
    }
    autoA20847BC_ae = libMHmu_gv_payloadPath[lp_team].lv_finalWaypointIndex[lp_pathIndex];
    lv_itPathPoint = 1;
    for ( ; ( (autoA20847BC_ai >= 0 && lv_itPathPoint <= autoA20847BC_ae) || (autoA20847BC_ai < 0 && lv_itPathPoint >= autoA20847BC_ae) ) ; lv_itPathPoint += autoA20847BC_ai ) {
        if ((libMHmu_gv_payloadPath[lp_team].lv_pathPointIsWaypoint[lp_pathIndex][lv_itPathPoint] == true)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "PayloadCheckpointUnit", c_unitCreateIgnorePlacement, lv_minimapUnitPlayer, libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][lv_itPathPoint]);
            libMHmu_gv_payloadPath[lp_team].lv_payloadCheckpointUnit[lp_pathIndex][lv_itPathPoint] = UnitLastCreated();
            TextTagCreate(StringExternal("Param/Value/lib_MHmu_3EBDCC2D"), 18, UnitGetPosition(UnitLastCreated()), 1.0, true, false, libGame_gf_PlayersOnTeamHeroes(lp_team, false));
            libMHmu_gv_payloadPath[lp_team].lv_checkpointTextTagAlly[lp_pathIndex][lv_itPathPoint] = TextTagLastCreated();
            TextTagCreate(StringExternal("Param/Value/lib_MHmu_9CAC0514"), 18, UnitGetPosition(UnitLastCreated()), 1.0, true, true, libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeam(lp_team), false));
            libMHmu_gv_payloadPath[lp_team].lv_checkpointTextTagEnemy[lp_pathIndex][lv_itPathPoint] = TextTagLastCreated();
        }

    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "PayloadDestinationMinimapIcon", c_unitCreateIgnorePlacement, lv_minimapUnitPlayer, libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][libMHmu_gv_payloadPath[lp_team].lv_finalWaypointIndex[lp_pathIndex]]);
    libMHmu_gv_payload[lp_team].lv_payloadDestinationMinimapUnit[lp_pathIndex] = UnitLastCreated();
    if ((lp_team == libGame_gv_teamOrderIndex_C)) {
        if ((lp_pathIndex == 1)) {
            libNtve_gf_UnitCreateFacingPoint(1, "PayloadOrderPath1", c_unitCreateIgnorePlacement, lv_payloadPlayer, libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][1], libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][2]);
            libNtve_gf_SetDialogItemUnit(libMHmu_gv_hanamuraUI.lv_payloadStatusFrameOrderPath1, UnitLastCreated(), PlayerGroupAll());
        }

        if ((lp_pathIndex == 2)) {
            libNtve_gf_UnitCreateFacingPoint(1, "PayloadOrderPath2", c_unitCreateIgnorePlacement, lv_payloadPlayer, libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][1], libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][2]);
            libNtve_gf_SetDialogItemUnit(libMHmu_gv_hanamuraUI.lv_payloadStatusFrameOrderPath2, UnitLastCreated(), PlayerGroupAll());
        }

    }
    else {
        if ((lp_team == libGame_gv_teamChaosIndex_C)) {
            if ((lp_pathIndex == 1)) {
                libNtve_gf_UnitCreateFacingPoint(1, "PayloadChaosPath1", c_unitCreateIgnorePlacement, lv_payloadPlayer, libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][1], libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][2]);
                libNtve_gf_SetDialogItemUnit(libMHmu_gv_hanamuraUI.lv_payloadStatusFrameChaosPath1, UnitLastCreated(), PlayerGroupAll());
            }

            if ((lp_pathIndex == 2)) {
                libNtve_gf_UnitCreateFacingPoint(1, "PayloadChaosPath2", c_unitCreateIgnorePlacement, lv_payloadPlayer, libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][1], libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][2]);
                libNtve_gf_SetDialogItemUnit(libMHmu_gv_hanamuraUI.lv_payloadStatusFrameChaosPath2, UnitLastCreated(), PlayerGroupAll());
            }

        }

    }
    libMHmu_gv_payload[lp_team].lv_payload[lp_pathIndex] = UnitLastCreated();
    auto449949E7_g = libGame_gf_PlayersOnTeamHeroes(lp_team, false);
    auto449949E7_var = -1;
    while (true) {
        	auto449949E7_var = PlayerGroupNextPlayer(auto449949E7_g, auto449949E7_var);
        	if (auto449949E7_var<0) { break; }
        	UnitSetStateForPlayer(libMHmu_gv_payload[lp_team].lv_payload[lp_pathIndex], c_unitStateTargetable, auto449949E7_var, true);
    }
    AddUnitOfInterest(UnitLastCreated(), libMHmu_gv_payloadNearbyRadius_C, 0.0, "EscortPayload", libNtve_ge_GoalTeam_Both, 0);
    AddUnitOfInterest(UnitLastCreated(), libMHmu_gv_payloadNearbyRadius_C, 0.0, "EscortEnemyPayload", libNtve_ge_GoalTeam_Both, 0);
    UnitCreateEffectUnit(libGame_gv_teams[libGame_gf_EnemyTeam(lp_team)].lv_core, "PayloadAndEnemyCoreSyncEffect", libMHmu_gv_payload[lp_team].lv_payload[lp_pathIndex]);
    UnitBehaviorAdd(UnitLastCreated(), "PayloadAtStartPointBehavior", UnitLastCreated(), 1);
    auto39EE7BCB_ae = (libMHmu_gv_teamEmpowermentLevel[lp_team] - 1);
    lv_powerLevel = 1;
    for ( ; ( (auto39EE7BCB_ai >= 0 && lv_powerLevel <= auto39EE7BCB_ae) || (auto39EE7BCB_ai < 0 && lv_powerLevel >= auto39EE7BCB_ae) ) ; lv_powerLevel += auto39EE7BCB_ai ) {
        lv_ammoLevelActorMessage = ("Signal Ammo" + IntToString(lv_powerLevel));
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), lv_ammoLevelActorMessage);
    }
    SoundPlayAtPointForPlayer(SoundLink("UI_Game_Ping_Payload_Ready", -1), c_maxPlayers, PlayerGroupAll(), libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][1], 2.0, 100.0, 0.0);
    libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormAlert", libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][1], ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 5.0);
    libCore_gf_StoreIntegerForUnit(UnitLastCreated(), 2, lp_team);
    libCore_gf_StoreIntegerForUnit(UnitLastCreated(), 1, lp_pathIndex);
    libMHmu_gf_MovePayloadForward(UnitLastCreated());
}

trigger auto_libMHmu_gf_MovePayloadForward_Trigger = null;
unit auto_libMHmu_gf_MovePayloadForward_lp_payloadUnit;

void libMHmu_gf_MovePayloadForward (unit lp_payloadUnit) {
    auto_libMHmu_gf_MovePayloadForward_lp_payloadUnit = lp_payloadUnit;

    if (auto_libMHmu_gf_MovePayloadForward_Trigger == null) {
        auto_libMHmu_gf_MovePayloadForward_Trigger = TriggerCreate("auto_libMHmu_gf_MovePayloadForward_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_MovePayloadForward_Trigger, false, false);
}

bool auto_libMHmu_gf_MovePayloadForward_TriggerFunc (bool testConds, bool runActions) {
    unit lp_payloadUnit = auto_libMHmu_gf_MovePayloadForward_lp_payloadUnit;

    // Variable Declarations
    int lv_owningTeam;
    int lv_enemyTeam;
    int lv_pathIndex;
    int lv_lastTravelledWaypointIndex;
    int lv_waypointIndex;
    timer lv_respawnTimer;
    timer lv_respawnWarningTimer;
    timer lv_respawnAudioTimer;
    int lv_progressBar;
    unit lv_destinationBannerSconce;
    unit lv_destinationBannerHero;
    int lv_empowermentLevelUponAttackingCore;
    int lv_itEmpowermentLevel;

    // Automatic Variable Declarations
    int autoA5018248_ae;
    const int autoA5018248_ai = 1;
    playergroup auto4F239723_g;
    int auto4F239723_var;

    // Variable Initialization
    lv_owningTeam = -1;
    lv_enemyTeam = -1;
    lv_pathIndex = libCore_gf_IntegerStoredForUnit(lp_payloadUnit, 1);
    lv_lastTravelledWaypointIndex = -1;
    lv_respawnTimer = TimerCreate();
    lv_respawnWarningTimer = TimerCreate();
    lv_respawnAudioTimer = TimerCreate();
    lv_progressBar = c_invalidDialogControlId;

    // Implementation
    if ((libCore_gf_IntegerStoredForUnit(lp_payloadUnit, 2) == libGame_gv_teamOrderIndex_C)) {
        lv_owningTeam = libGame_gv_teamOrderIndex_C;
        if ((lv_pathIndex == 1)) {
            lv_progressBar = libMHmu_gv_hanamuraUI.lv_payloadProgressBarOrderPath1;
        }
        else {
            lv_progressBar = libMHmu_gv_hanamuraUI.lv_payloadProgressBarOrderPath2;
        }
    }
    else {
        lv_owningTeam = libGame_gv_teamChaosIndex_C;
        if ((lv_pathIndex == 1)) {
            lv_progressBar = libMHmu_gv_hanamuraUI.lv_payloadProgressBarChaosPath1;
        }
        else {
            lv_progressBar = libMHmu_gv_hanamuraUI.lv_payloadProgressBarChaosPath2;
        }
    }
    lv_respawnAudioTimer = libMHmu_gv_payloadTimers[lv_owningTeam].lv_audioTimer[lv_pathIndex];
    lv_respawnWarningTimer = libMHmu_gv_payloadTimers[lv_owningTeam].lv_showWarningTimer[lv_pathIndex];
    lv_respawnTimer = libMHmu_gv_payloadTimers[lv_owningTeam].lv_spawnTimer[lv_pathIndex];
    lv_enemyTeam = libGame_gf_EnemyTeam(lv_owningTeam);
    lv_lastTravelledWaypointIndex = libMHmu_gv_payloadPath[lv_owningTeam].lv_payloadCurrentIndex[lv_pathIndex];
    UnitIssueOrder(lp_payloadUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    autoA5018248_ae = libMHmu_gv_payloadPath[lv_owningTeam].lv_finalWaypointIndex[lv_pathIndex];
    lv_waypointIndex = (lv_lastTravelledWaypointIndex + 1);
    for ( ; ( (autoA5018248_ai >= 0 && lv_waypointIndex <= autoA5018248_ae) || (autoA5018248_ai < 0 && lv_waypointIndex >= autoA5018248_ae) ) ; lv_waypointIndex += autoA5018248_ai ) {
        UnitIssueOrder(lp_payloadUnit, OrderTargetingPoint(AbilityCommand("move", 0), libMHmu_gv_payloadPath[lv_owningTeam].lv_path[lv_pathIndex][lv_waypointIndex]), c_orderQueueAddToEnd);
    }
    libMHmu_gv_payloadPath[lv_owningTeam].lv_payloadCurrentDestinationPointIndex[lv_pathIndex] = (lv_lastTravelledWaypointIndex + 1);
    libMHmu_gf_CreatePayloadPathForward(lp_payloadUnit);
    while (true) {
        if ((UnitHasBehavior2(lp_payloadUnit, "PayloadReverseBehavior") == true)) {
            return true;
        }

        if ((UnitOrderCount(lp_payloadUnit) == 0) && (libMHmu_gv_payloadPath[lv_owningTeam].lv_payloadCurrentDestinationPointIndex[lv_pathIndex] == libMHmu_gv_payloadPath[lv_owningTeam].lv_finalWaypointIndex[lv_pathIndex])) {
            libMHmu_gv_payloadPath[lv_owningTeam].lv_payloadCurrentIndex[lv_pathIndex] += 1;
            libMHmu_gv_payloadPath[lv_owningTeam].lv_payloadCurrentDestinationPointIndex[lv_pathIndex] += 1;
            libMHmu_gv_payload[lv_owningTeam].lv_timeWhenLastPayloadReachedDestination = GameGetMissionTime();
            UnitCreateEffectUnit(lp_payloadUnit, "RegenGlobePickupSearchSet", lp_payloadUnit);
            libNtve_gf_CreateActorAtPoint("MMPayloadSearch", UnitGetPosition(lp_payloadUnit));
            ActorSend(libNtve_gf_ActorLastCreated(), "Signal Payload");
            lv_destinationBannerSconce = UnitGroupClosestToPoint(UnitGroup("LootBannerSconce", c_playerAny, RegionCircle(UnitGetPosition(lp_payloadUnit), 14.0), UnitFilter(0, 0, 0, 0), 2), libMHmu_gv_payloadPath[lv_owningTeam].lv_path[lv_pathIndex][libMHmu_gv_payloadPath[lv_owningTeam].lv_finalWaypointIndex[lv_pathIndex]]);
            lv_destinationBannerHero = UnitGroupClosestToPoint(UnitGroupAlliance(libGame_gf_ComputerPlayerInTeam(lv_owningTeam), c_unitAllianceAlly, RegionCircle(UnitGetPosition(lp_payloadUnit), 14.0), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterHallucination - 32)) | (1 << (c_targetFilterSummoned - 32))), 0), libMHmu_gv_payloadPath[lv_owningTeam].lv_path[lv_pathIndex][libMHmu_gv_payloadPath[lv_owningTeam].lv_finalWaypointIndex[lv_pathIndex]]);
            if ((lv_destinationBannerSconce != null) && (lv_destinationBannerHero != null) && (UnitGetOwner(lv_destinationBannerHero) >= 1) && (UnitGetOwner(lv_destinationBannerHero) <= libCore_gv_bALMaxPlayers)) {
                libGame_gf_DropLootBannerinSconce(lv_destinationBannerSconce, libGame_gv_players[UnitGetOwner(lv_destinationBannerHero)].lv_lootContent.lv_loot_Banner.lv_bannerID, UnitGetOwner(lv_destinationBannerHero), true);
            }

            SoundPlayForPlayer(SoundLink("UI_Game_Payload_Delivered_Enemy", -1), c_maxPlayers, libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeamNumberOfPlayer(UnitGetOwner(lp_payloadUnit)), false), 100.0, 0.0);
            SoundPlayForPlayer(SoundLink("MX_Event_Payload_Delivered_Enemy", -1), c_maxPlayers, libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeamNumberOfPlayer(UnitGetOwner(lp_payloadUnit)), false), 100.0, 0.0);
            SoundPlayForPlayer(SoundLink("UI_Game_Payload_Delivered_Ally", -1), c_maxPlayers, libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_payloadUnit)), false), 100.0, 0.0);
            SoundPlayForPlayer(SoundLink("MX_Event_Payload_Delivered_Ally", -1), c_maxPlayers, libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_payloadUnit)), false), 100.0, 0.0);
            RemoveUnitOfInterest(lp_payloadUnit, "EscortPayload", libNtve_ge_GoalTeam_Both);
            RemoveUnitOfInterest(lp_payloadUnit, "EscortEnemyPayload", libNtve_ge_GoalTeam_Both);
            UnitBehaviorRemove(lp_payloadUnit, "PayloadDisableTurret", 1);
            UnitBehaviorAdd(lp_payloadUnit, "PayloadReachedDestination", lp_payloadUnit, 1);
            UnitKill(libMHmu_gv_payload[lv_owningTeam].lv_payloadDestinationMinimapUnit[lv_pathIndex]);
            auto4F239723_g = libGame_gf_PlayersOnTeamHeroes(lv_owningTeam, false);
            auto4F239723_var = -1;
            while (true) {
                	auto4F239723_var = PlayerGroupNextPlayer(auto4F239723_g, auto4F239723_var);
                	if (auto4F239723_var<0) { break; }
                	libGame_gf_GrantXPToPlayer(libMHmu_gv_payload_XP_Reward_Amount_C, auto4F239723_var, libGame_ge_XPSources_Creep);
                libUIUI_gf_UIFloatingCombatTextH16MidXP(auto4F239723_var, lp_payloadUnit, libCore_ge_FloatingTextType_XPLarge, libMHmu_gv_payload_XP_Reward_Amount_C);
            }
            libMHmu_gf_ShowHideAttackingEnemyCoreFrameForTeam(true, lv_owningTeam);
            if ((lv_owningTeam == libGame_gv_teamOrderIndex_C)) {
                libMHmu_gf_PayloadsPathCompletedOrder();
            }
            else {
                libMHmu_gf_PayloadsPathCompletedChaos();
            }
            lv_empowermentLevelUponAttackingCore = libMHmu_gv_teamEmpowermentLevel[lv_owningTeam];
            libMHmu_gv_teamEmpowermentLevel[lv_owningTeam] = libMHmu_gv_payloadDefaultPowerLevel;
            if ((UnitIsAlive(libMHmu_gv_payload[lv_owningTeam].lv_payload[(3 - lv_pathIndex)]) == true)) {
                libNtve_gf_SendActorMessageToUnit(libMHmu_gv_payload[lv_owningTeam].lv_payload[(3 - lv_pathIndex)], "Signal ResetAmmo");
            }

            Wait(1.75, c_timeGame);
            UnitCreateEffectUnit(lp_payloadUnit, "PayloadAttackCoreModifyTurret", libGame_gv_teams[lv_enemyTeam].lv_core);
            Wait(0.25, c_timeGame);
            libMHmu_gf_MakePayloadAttackCore(lv_owningTeam, lp_payloadUnit, libGame_gv_teams[lv_enemyTeam].lv_core, lv_pathIndex, lv_empowermentLevelUponAttackingCore);
            if ((libMHmu_gv_teamEmpowermentLevel[lv_owningTeam] == libMHmu_gv_payloadDefaultPowerLevel)) {
                DialogControlSendAnimationEvent(libMHmu_gv_hanamuraUI.lv_potentialShotsPanel, PlayerGroupAll(), ("Team" + IntToString(lv_owningTeam) + "NotEmpowered"));
            }

            libMHmu_gf_UpdatePotentialPointsPanelForTeam(lv_owningTeam);
            libMHmu_gv_payload[lv_owningTeam].lv_spawnTime[lv_pathIndex] = 0.0;
            libMHmu_gf_ResetPayloadPathInformation(lv_owningTeam, lv_pathIndex);
            TimerStart(lv_respawnTimer, libMHmu_gv_payloadRespawnTimerDuration_C, false, c_timeGame);
            TimerStart(lv_respawnWarningTimer, (libMHmu_gv_payloadRespawnTimerDuration_C - libMHmu_gv_payloadWarningDuration), false, c_timeGame);
            TimerStart(lv_respawnAudioTimer, libMHmu_gv_payloadRespawnWarningCoundownDuration_C, false, c_timeGame);
            Wait(3.0, c_timeGame);
            libMHmu_gf_PayloadTimerResetSetUI(lv_owningTeam, lv_pathIndex);
            libMHmu_gf_ResetProgressBarForPayload(lv_progressBar);
            libMHmu_gf_ShowHideAttackingEnemyCoreFrameForTeam(false, lv_owningTeam);
            return true;
        }
        else {
            if ((OrderGetTargetPoint(UnitOrder(lp_payloadUnit, 0)) == libMHmu_gv_payloadPath[lv_owningTeam].lv_path[lv_pathIndex][(libMHmu_gv_payloadPath[lv_owningTeam].lv_payloadCurrentDestinationPointIndex[lv_pathIndex] + 1)])) {
                if ((libMHmu_gv_payloadPath[lv_owningTeam].lv_pathPointIsWaypoint[lv_pathIndex][libMHmu_gv_payloadPath[lv_owningTeam].lv_payloadCurrentDestinationPointIndex[lv_pathIndex]] == true)) {
                    libMHmu_gv_payloadPath[lv_owningTeam].lv_lastCheckpointReachedIndex[lv_pathIndex] = libMHmu_gv_payloadPath[lv_owningTeam].lv_payloadCurrentDestinationPointIndex[lv_pathIndex];
                    UnitKill(libMHmu_gv_payloadPath[lv_owningTeam].lv_payloadCheckpointUnit[lv_pathIndex][libMHmu_gv_payloadPath[lv_owningTeam].lv_payloadCurrentDestinationPointIndex[lv_pathIndex]]);
                    TextTagDestroy(libMHmu_gv_payloadPath[lv_owningTeam].lv_checkpointTextTagAlly[lv_pathIndex][libMHmu_gv_payloadPath[lv_owningTeam].lv_payloadCurrentDestinationPointIndex[lv_pathIndex]]);
                    TextTagDestroy(libMHmu_gv_payloadPath[lv_owningTeam].lv_checkpointTextTagEnemy[lv_pathIndex][libMHmu_gv_payloadPath[lv_owningTeam].lv_payloadCurrentDestinationPointIndex[lv_pathIndex]]);
                }

                libMHmu_gv_payloadPath[lv_owningTeam].lv_payloadCurrentIndex[lv_pathIndex] += 1;
                libMHmu_gv_payloadPath[lv_owningTeam].lv_payloadCurrentDestinationPointIndex[lv_pathIndex] += 1;
                libMHmu_gv_payloadPath[lv_owningTeam].lv_pathCurrentIndex[lv_pathIndex] += 1;
                if ((libMHmu_gv_payloadPath[lv_owningTeam].lv_pathCurrentIndex[lv_pathIndex] < libMHmu_gv_payloadPath[lv_owningTeam].lv_pathIndexMax[lv_pathIndex]) && (libMHmu_gv_payloadPath[lv_owningTeam].lv_pathDisplay_Minimap[lv_pathIndex] != 0)) {
                    PathSetWayPointIndexStart(libMHmu_gv_payloadPath[lv_owningTeam].lv_pathDisplay_Minimap[lv_pathIndex], libMHmu_gv_payloadPath[lv_owningTeam].lv_pathCurrentIndex[lv_pathIndex]);
                }

            }

        }
        libMHmu_gf_UpdateProgressBarForPayload(lv_owningTeam, lv_pathIndex, lv_progressBar);
        Wait(0.0625, c_timeGame);
    }
    return true;
}

void libMHmu_gf_MovePayloadBackward (unit lp_payloadUnit) {
    // Variable Declarations
    int lv_owningTeam;
    int lv_pathIndex;
    int lv_lastTravelledWaypointIndex;
    int lv_lastKnownCheckpointIndex;
    int lv_waypointIndex;
    int lv_currentDestinationPointIndex;
    int lv_progressBar;

    // Automatic Variable Declarations
    int autoFD633892_ae;
    const int autoFD633892_ai = -1;

    // Variable Initialization
    lv_pathIndex = libCore_gf_IntegerStoredForUnit(lp_payloadUnit, 1);
    lv_progressBar = c_invalidDialogControlId;

    // Implementation
    if ((libCore_gf_IntegerStoredForUnit(lp_payloadUnit, 2) == libGame_gv_teamOrderIndex_C)) {
        lv_owningTeam = libGame_gv_teamOrderIndex_C;
        if ((lv_pathIndex == 1)) {
            lv_progressBar = libMHmu_gv_hanamuraUI.lv_payloadProgressBarOrderPath1;
        }
        else {
            lv_progressBar = libMHmu_gv_hanamuraUI.lv_payloadProgressBarOrderPath2;
        }
    }
    else {
        lv_owningTeam = libGame_gv_teamChaosIndex_C;
        if ((lv_pathIndex == 1)) {
            lv_progressBar = libMHmu_gv_hanamuraUI.lv_payloadProgressBarChaosPath1;
        }
        else {
            lv_progressBar = libMHmu_gv_hanamuraUI.lv_payloadProgressBarChaosPath2;
        }
    }
    lv_lastTravelledWaypointIndex = libMHmu_gv_payloadPath[lv_owningTeam].lv_payloadCurrentIndex[lv_pathIndex];
    lv_lastKnownCheckpointIndex = libMHmu_gv_payloadPath[lv_owningTeam].lv_lastCheckpointReachedIndex[lv_pathIndex];
    UnitIssueOrder(lp_payloadUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    autoFD633892_ae = lv_lastKnownCheckpointIndex;
    lv_waypointIndex = lv_lastTravelledWaypointIndex;
    for ( ; ( (autoFD633892_ai >= 0 && lv_waypointIndex <= autoFD633892_ae) || (autoFD633892_ai < 0 && lv_waypointIndex >= autoFD633892_ae) ) ; lv_waypointIndex += autoFD633892_ai ) {
        UnitIssueOrder(lp_payloadUnit, OrderTargetingPoint(AbilityCommand("move", 0), libMHmu_gv_payloadPath[lv_owningTeam].lv_path[lv_pathIndex][lv_waypointIndex]), c_orderQueueAddToEnd);
    }
    lv_currentDestinationPointIndex = lv_lastTravelledWaypointIndex;
    libMHmu_gf_CreatePayloadPathBackward(lp_payloadUnit);
    while (true) {
        if ((UnitHasBehavior2(lp_payloadUnit, "PayloadReverseBehavior") == false)) {
            return ;
        }

        if ((UnitHasBehavior2(lp_payloadUnit, "PayloadAtStartPointBehavior") == false) && (UnitOrderCount(lp_payloadUnit) == 0) && (lv_currentDestinationPointIndex == lv_lastKnownCheckpointIndex)) {
            libMHmu_gv_payloadPath[lv_owningTeam].lv_payloadCurrentIndex[lv_pathIndex] -= 1;
            lv_currentDestinationPointIndex -= 1;
            UnitBehaviorRemove(lp_payloadUnit, "PayloadReverseBehavior", 1);
            UnitBehaviorAdd(lp_payloadUnit, "PayloadAtStartPointBehavior", lp_payloadUnit, 1);
            return ;
        }
        else {
            if ((OrderGetTargetPoint(UnitOrder(lp_payloadUnit, 0)) == libMHmu_gv_payloadPath[lv_owningTeam].lv_path[lv_pathIndex][(lv_currentDestinationPointIndex - 1)])) {
                libMHmu_gv_payloadPath[lv_owningTeam].lv_payloadCurrentIndex[lv_pathIndex] -= 1;
                lv_currentDestinationPointIndex -= 1;
                libMHmu_gv_payloadPath[lv_owningTeam].lv_pathCurrentIndex[lv_pathIndex] += 1;
                if ((libMHmu_gv_payloadPath[lv_owningTeam].lv_pathCurrentIndex[lv_pathIndex] < libMHmu_gv_payloadPath[lv_owningTeam].lv_pathIndexMax[lv_pathIndex]) && (libMHmu_gv_payloadPath[lv_owningTeam].lv_pathDisplay_Minimap[lv_pathIndex] != 0)) {
                    PathSetWayPointIndexStart(libMHmu_gv_payloadPath[lv_owningTeam].lv_pathDisplay_Minimap[lv_pathIndex], libMHmu_gv_payloadPath[lv_owningTeam].lv_pathCurrentIndex[lv_pathIndex]);
                }

            }

        }
        libMHmu_gf_UpdateProgressBarForPayload(lv_owningTeam, lv_pathIndex, lv_progressBar);
        Wait(0.0625, c_timeGame);
    }
}

int libMHmu_gf_OtherPathIndex (int lp_pathIndex) {
    // Automatic Variable Declarations
    // Implementation
    return (3 - lp_pathIndex);
}

void libMHmu_gf_MakePayloadAttackCore (int lp_team, unit lp_payload, unit lp_enemyCore, int lp_pathIndex, int lp_powerLevel) {
    // Automatic Variable Declarations
    int auto3E160531_n;
    int auto3E160531_i;

    // Implementation
    libMHmu_gv_payload[lp_team].lv_payloadAttackingCore[lp_pathIndex] = true;
    auto3E160531_n = lp_powerLevel;
    for (auto3E160531_i = 1; auto3E160531_i <= auto3E160531_n; auto3E160531_i += 1) {
        UnitCreateEffectUnit(lp_payload, "AttackCoreLaunchMissile6Seconds", lp_enemyCore);
        Wait(1.0, c_timeGame);
    }
    libMHmu_gv_payload[lp_team].lv_payloadAttackingCore[lp_pathIndex] = false;
    libCore_gf_SendActorMessageToDoodadsInRegion("Signal PayloadDone", RegionCircle(UnitGetPosition(lp_payload), 5.0), "Storm_Building_OWHana_Payload_Entrance");
    UnitKill(lp_payload);
}

void libMHmu_gf_AttackCoreShakeMissile (point lp_targetLocation) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int autoD784FB3E_ae = libCore_gv_bALMaxPlayers;
    const int autoD784FB3E_ai = 1;

    // Variable Initialization

    // Implementation
    lv_itPlayer = 1;
    for ( ; ( (autoD784FB3E_ai >= 0 && lv_itPlayer <= autoD784FB3E_ae) || (autoD784FB3E_ai < 0 && lv_itPlayer >= autoD784FB3E_ae) ) ; lv_itPlayer += autoD784FB3E_ai ) {
        if ((PlayerStatus(lv_itPlayer) != c_playerStatusActive)) {
            continue;
        }

        if ((DistanceBetweenPoints(CameraGetTarget(lv_itPlayer), lp_targetLocation) <= 15.0)) {
            CameraShake(lv_itPlayer, "Medium", "Earthquake", 0.0, 0.5, 0.75);
        }
        else if ((DistanceBetweenPoints(CameraGetTarget(lv_itPlayer), lp_targetLocation) <= 30.0)) {
            CameraShake(lv_itPlayer, "Creep", "Earthquake", 0.0, 0.5, 0.5);
        }
    }
}

void libMHmu_gf_MapMechanicUIInit (int lp_parentPanel) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Automatic Variable Declarations
    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    DialogControlCreateInPanelFromTemplate(lp_parentPanel, c_triggerControlTypePanel, "Hanamura/HanamuraPanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libMHmu_gv_hanamuraUI.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PayloadPanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libMHmu_gv_hanamuraUI.lv_payloadPanel = DialogControlLastCreated();
    DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadPanel, PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "PayloadPortraitLeft");
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "PayloadPortraitRight");
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PayloadBlockedFrameLeftPath1");
    libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameBottomOrder = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PayloadBlockedFrameLeftPath2");
    libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameTopOrder = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PayloadBlockedFrameRightPath1");
    libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameTopChaos = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PayloadBlockedFrameRightPath2");
    libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameBottomChaos = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PayloadBarLeftPath1");
    libMHmu_gv_hanamuraUI.lv_payloadBGBarOrderPath1 = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeProgressBar, "PayloadProgressBar");
    libMHmu_gv_hanamuraUI.lv_payloadProgressBarOrderPath1 = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PayloadBarLeftPath2");
    libMHmu_gv_hanamuraUI.lv_payloadBGBarOrderPath2 = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeProgressBar, "PayloadProgressBar");
    libMHmu_gv_hanamuraUI.lv_payloadProgressBarOrderPath2 = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PayloadBarRightPath1");
    libMHmu_gv_hanamuraUI.lv_payloadBGBarChaosPath1 = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeProgressBar, "PayloadProgressBar");
    libMHmu_gv_hanamuraUI.lv_payloadProgressBarChaosPath1 = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PayloadBarRightPath2");
    libMHmu_gv_hanamuraUI.lv_payloadBGBarChaosPath2 = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeProgressBar, "PayloadProgressBar");
    libMHmu_gv_hanamuraUI.lv_payloadProgressBarChaosPath2 = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "OrderProgressUnitStatusPath1");
    libMHmu_gv_hanamuraUI.lv_payloadStatusFrameOrderPath1 = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "OrderProgressUnitStatusPath2");
    libMHmu_gv_hanamuraUI.lv_payloadStatusFrameOrderPath2 = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "ChaosProgressUnitStatusPath1");
    libMHmu_gv_hanamuraUI.lv_payloadStatusFrameChaosPath1 = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "ChaosProgressUnitStatusPath2");
    libMHmu_gv_hanamuraUI.lv_payloadStatusFrameChaosPath2 = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TopPayloadsBlockedFrame");
    libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameTop = DialogControlLastCreated();
    DialogControlHookup(libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameTop, c_triggerControlTypeImage, "TopPayloadBarBlockedLeftBar");
    libMHmu_gv_hanamuraUI.lv_payloadBlockedIndicatorTopOrder = DialogControlLastCreated();
    DialogControlHookup(libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameTop, c_triggerControlTypeImage, "TopPayloadBarBlockedRightBar");
    libMHmu_gv_hanamuraUI.lv_payloadBlockedIndicatorTopChaos = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "BottomPayloadsBlockedFrame");
    libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameBottom = DialogControlLastCreated();
    DialogControlHookup(libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameBottom, c_triggerControlTypeImage, "BottomPayloadBarBlockedLeftBar");
    libMHmu_gv_hanamuraUI.lv_payloadBlockedIndicatorBottomOrder = DialogControlLastCreated();
    DialogControlHookup(libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameBottom, c_triggerControlTypeImage, "BottomPayloadBarBlockedRightBar");
    libMHmu_gv_hanamuraUI.lv_payloadBlockedIndicatorBottomChaos = DialogControlLastCreated();
    DialogControlHookup(libMHmu_gv_hanamuraUI.lv_mainPanel, c_triggerControlTypePanel, "BlockedLabelFrame");
    libMHmu_gv_hanamuraUI.lv_payloadBlockedLabelFrame = DialogControlLastCreated();
    DialogControlHookup(libMHmu_gv_hanamuraUI.lv_mainPanel, c_triggerControlTypePanel, "ContestedFrame");
    libMHmu_gv_hanamuraUI.lv_payloadContestedFrame = DialogControlLastCreated();
    DialogControlHookup(libMHmu_gv_hanamuraUI.lv_payloadPanel, c_triggerControlTypePanel, "TimerFrameBottomLeft");
    libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerFrameOrder_Path1 = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libMHmu_gv_hanamuraUI.lv_payloadPanel, c_triggerControlTypePanel, "TimerFrameTopLeft");
    libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerFrameOrder_Path2 = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libMHmu_gv_hanamuraUI.lv_payloadPanel, c_triggerControlTypeLabel, "TimerWarningLabelBottomLeft");
    libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabelOrder_Path1 = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libMHmu_gv_hanamuraUI.lv_payloadPanel, c_triggerControlTypeLabel, "TimerWarningLabelTopLeft");
    libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabelOrder_Path2 = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libMHmu_gv_hanamuraUI.lv_payloadPanel, c_triggerControlTypePanel, "TimerFrameBottomRight");
    libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerFrameChaos_Path2 = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libMHmu_gv_hanamuraUI.lv_payloadPanel, c_triggerControlTypeLabel, "TimerWarningLabelBottomRight");
    libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabelChaos_Path2 = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libMHmu_gv_hanamuraUI.lv_payloadPanel, c_triggerControlTypePanel, "TimerFrameTopRight");
    libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerFrameChaos_Path1 = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libMHmu_gv_hanamuraUI.lv_payloadPanel, c_triggerControlTypeLabel, "TimerWarningLabelTopRight");
    libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabelChaos_Path1 = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PayloadSpawningFrameBoth");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libMHmu_gv_hanamuraUI.lv_payloadSpawningBoth = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "NotificationLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_MHmu_8985404F"), PlayerGroupAll());
    libMHmu_gv_hanamuraUI.lv_payloadSpawningNotificationLabel_Both = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimerLabel");
    libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabel_Both = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AttackingCoreFrameOrder");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libMHmu_gv_hanamuraUI.lv_orderTeamAttackedCoreFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "NotificationIcon");
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "NotificationLabel");
    libMHmu_gv_hanamuraUI.lv_orderTeamAttackedCoreLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_MHmu_13898C64"), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, true));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_MHmu_47C1330E"), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, true));
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AttackingCoreFrameChaos");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libMHmu_gv_hanamuraUI.lv_chaosTeamAttackedCoreFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "NotificationIcon");
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "NotificationLabel");
    libMHmu_gv_hanamuraUI.lv_chaosTeamAttackedCoreLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_MHmu_D8AF7066"), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, true));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_MHmu_C73041FD"), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, true));
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PotentialPointsPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libMHmu_gv_hanamuraUI.lv_potentialShotsPanel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team1CollectionIcon");
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, true), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team1CollectionAltIcon");
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, true), true);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team1Background");
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, true), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team1Background");
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, true), true);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team1CollectionCounter");
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team2CollectionCounter");
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team2CollectionIcon");
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, true), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team2CollectionAltIcon");
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, true), true);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team2BackgroundRed");
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, true), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team2BackgroundBlue");
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, true), true);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PotentialPointsTitle");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_MHmu_52ED5C37"), PlayerGroupAll());
    libMHmu_gv_hanamuraUI.lv_potentialShotsLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "LeftPotentialPoints");
    libMHmu_gv_hanamuraUI.lv_leftPotentialShotsLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libMHmu_gv_hanamuraUI.lv_leftPotentialShotsLabel, IntToText(1), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "RightPotentialPoints");
    libMHmu_gv_hanamuraUI.lv_rightPotentialShotsLabel = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libMHmu_gv_hanamuraUI.lv_rightPotentialShotsLabel, IntToText(1), PlayerGroupAll());
    lv_currentPanelLayer -= 1;
    lv_currentPanelLayer -= 1;
}

trigger auto_libMHmu_gf_ShowPayloadsSpawningFrameCombined_Trigger = null;

void libMHmu_gf_ShowPayloadsSpawningFrameCombined () {
    if (auto_libMHmu_gf_ShowPayloadsSpawningFrameCombined_Trigger == null) {
        auto_libMHmu_gf_ShowPayloadsSpawningFrameCombined_Trigger = TriggerCreate("auto_libMHmu_gf_ShowPayloadsSpawningFrameCombined_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_ShowPayloadsSpawningFrameCombined_Trigger, false, false);
}

bool auto_libMHmu_gf_ShowPayloadsSpawningFrameCombined_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    timer lv_timer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timer = TimerCreate();

    // Implementation
    DialogControlSendAnimationEvent(libMHmu_gv_hanamuraUI.lv_payloadSpawningBoth, PlayerGroupAll(), "Show");
    libNtve_gf_SetDialogItemText(libMHmu_gv_hanamuraUI.lv_payloadSpawningNotificationLabel_Both, StringExternal("Param/Value/lib_MHmu_2602CF17"), PlayerGroupAll());
    lv_timer = libMHmu_gv_payloadTimers[libGame_gv_teamOrderIndex_C].lv_warningTimer[1];
    DialogControlSendAnimationEvent(libMHmu_gv_hanamuraUI.lv_payloadSpawningBoth, PlayerGroupAll(), "ChangeAnchor");
    while ((TimerGetRemaining(lv_timer) > 0.0)) {
        libNtve_gf_SetDialogItemText(libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabel_Both, TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(lv_timer))), PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_SetDialogItemText(libMHmu_gv_hanamuraUI.lv_payloadSpawningNotificationLabel_Both, StringExternal("Param/Value/lib_MHmu_BCE879A6"), PlayerGroupAll());
    DialogControlSendAnimationEvent(libMHmu_gv_hanamuraUI.lv_payloadSpawningBoth, PlayerGroupAll(), "Hide");
    return true;
}

void libMHmu_gf_ShowRelevantPayloadTimers () {
    // Automatic Variable Declarations
    // Implementation
    if ((UnitIsAlive(libMHmu_gv_payload[libGame_gv_teamOrderIndex_C].lv_payload[1]) == false)) {
        libMHmu_gf_ShowPayloadTimers(libGame_gv_teamOrderIndex_C, 1);
    }

    if ((UnitIsAlive(libMHmu_gv_payload[libGame_gv_teamOrderIndex_C].lv_payload[2]) == false)) {
        libMHmu_gf_ShowPayloadTimers(libGame_gv_teamOrderIndex_C, 2);
    }

    if ((UnitIsAlive(libMHmu_gv_payload[libGame_gv_teamChaosIndex_C].lv_payload[1]) == false)) {
        libMHmu_gf_ShowPayloadTimers(libGame_gv_teamChaosIndex_C, 1);
    }

    if ((UnitIsAlive(libMHmu_gv_payload[libGame_gv_teamChaosIndex_C].lv_payload[2]) == false)) {
        libMHmu_gf_ShowPayloadTimers(libGame_gv_teamChaosIndex_C, 2);
    }

}

trigger auto_libMHmu_gf_ShowPayloadTimers_Trigger = null;
int auto_libMHmu_gf_ShowPayloadTimers_lp_teamOfPayload;
int auto_libMHmu_gf_ShowPayloadTimers_lp_pathIndex;

void libMHmu_gf_ShowPayloadTimers (int lp_teamOfPayload, int lp_pathIndex) {
    auto_libMHmu_gf_ShowPayloadTimers_lp_teamOfPayload = lp_teamOfPayload;
    auto_libMHmu_gf_ShowPayloadTimers_lp_pathIndex = lp_pathIndex;

    if (auto_libMHmu_gf_ShowPayloadTimers_Trigger == null) {
        auto_libMHmu_gf_ShowPayloadTimers_Trigger = TriggerCreate("auto_libMHmu_gf_ShowPayloadTimers_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_ShowPayloadTimers_Trigger, false, false);
}

bool auto_libMHmu_gf_ShowPayloadTimers_TriggerFunc (bool testConds, bool runActions) {
    int lp_teamOfPayload = auto_libMHmu_gf_ShowPayloadTimers_lp_teamOfPayload;
    int lp_pathIndex = auto_libMHmu_gf_ShowPayloadTimers_lp_pathIndex;

    // Variable Declarations
    int lv_enemyTeam;
    int lv_timerFrameToModify;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyTeam = libGame_gf_EnemyTeam(lp_teamOfPayload);
    lv_timerFrameToModify = c_invalidDialogControlId;

    // Implementation
    if ((lp_teamOfPayload == libGame_gv_teamOrderIndex_C)) {
        if ((lp_pathIndex == 1)) {
            lv_timerFrameToModify = libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabelOrder_Path1;
        }
        else {
            lv_timerFrameToModify = libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabelOrder_Path2;
        }
    }
    else {
        if ((lp_pathIndex == 1)) {
            lv_timerFrameToModify = libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabelChaos_Path1;
        }
        else {
            lv_timerFrameToModify = libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabelChaos_Path2;
        }
    }
    DialogControlSetVisible(lv_timerFrameToModify, PlayerGroupAll(), true);
    libMHmu_gf_SetPayloadTimerText(libMHmu_gv_payloadTimers[lp_teamOfPayload].lv_spawnTimer[lp_pathIndex], lv_timerFrameToModify);
    return true;
}

trigger auto_libMHmu_gf_SetPayloadTimerText_Trigger = null;
timer auto_libMHmu_gf_SetPayloadTimerText_lp_timer;
int auto_libMHmu_gf_SetPayloadTimerText_lp_dialogItem;

void libMHmu_gf_SetPayloadTimerText (timer lp_timer, int lp_dialogItem) {
    auto_libMHmu_gf_SetPayloadTimerText_lp_timer = lp_timer;
    auto_libMHmu_gf_SetPayloadTimerText_lp_dialogItem = lp_dialogItem;

    if (auto_libMHmu_gf_SetPayloadTimerText_Trigger == null) {
        auto_libMHmu_gf_SetPayloadTimerText_Trigger = TriggerCreate("auto_libMHmu_gf_SetPayloadTimerText_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_SetPayloadTimerText_Trigger, false, false);
}

bool auto_libMHmu_gf_SetPayloadTimerText_TriggerFunc (bool testConds, bool runActions) {
    timer lp_timer = auto_libMHmu_gf_SetPayloadTimerText_lp_timer;
    int lp_dialogItem = auto_libMHmu_gf_SetPayloadTimerText_lp_dialogItem;

    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemStyle(lp_dialogItem, "Storm_MapMechanic_MechanicCounterCentered_Small", PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lp_dialogItem, TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timer))), PlayerGroupAll());
    while ((TimerGetRemaining(lp_timer) > 0.0)) {
        Wait(1.0, c_timeGame);
        libNtve_gf_SetDialogItemText(lp_dialogItem, TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(lp_timer))), PlayerGroupAll());
    }
    return true;
}

trigger auto_libMHmu_gf_ShowPayloadArrows_Trigger = null;
int auto_libMHmu_gf_ShowPayloadArrows_lp_teamOfPayload;
int auto_libMHmu_gf_ShowPayloadArrows_lp_pathIndex;

void libMHmu_gf_ShowPayloadArrows (int lp_teamOfPayload, int lp_pathIndex) {
    auto_libMHmu_gf_ShowPayloadArrows_lp_teamOfPayload = lp_teamOfPayload;
    auto_libMHmu_gf_ShowPayloadArrows_lp_pathIndex = lp_pathIndex;

    if (auto_libMHmu_gf_ShowPayloadArrows_Trigger == null) {
        auto_libMHmu_gf_ShowPayloadArrows_Trigger = TriggerCreate("auto_libMHmu_gf_ShowPayloadArrows_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_ShowPayloadArrows_Trigger, false, false);
}

bool auto_libMHmu_gf_ShowPayloadArrows_TriggerFunc (bool testConds, bool runActions) {
    int lp_teamOfPayload = auto_libMHmu_gf_ShowPayloadArrows_lp_teamOfPayload;
    int lp_pathIndex = auto_libMHmu_gf_ShowPayloadArrows_lp_pathIndex;

    // Variable Declarations
    int lv_frameToDisplay;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_frameToDisplay = c_invalidDialogControlId;

    // Implementation
    if ((lp_teamOfPayload == libGame_gv_teamOrderIndex_C)) {
        if ((lp_pathIndex == 1)) {
            lv_frameToDisplay = libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerFrameOrder_Path1;
        }
        else {
            lv_frameToDisplay = libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerFrameOrder_Path2;
        }
    }
    else {
        if ((lp_pathIndex == 1)) {
            lv_frameToDisplay = libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerFrameChaos_Path1;
        }
        else {
            lv_frameToDisplay = libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerFrameChaos_Path2;
        }
    }
    DialogControlSetVisible(lv_frameToDisplay, PlayerGroupAll(), true);
    return true;
}

trigger auto_libMHmu_gf_PayloadSpawnedSetUI_Trigger = null;
int auto_libMHmu_gf_PayloadSpawnedSetUI_lp_teamOfPayload;
int auto_libMHmu_gf_PayloadSpawnedSetUI_lp_pathIndex;

void libMHmu_gf_PayloadSpawnedSetUI (int lp_teamOfPayload, int lp_pathIndex) {
    auto_libMHmu_gf_PayloadSpawnedSetUI_lp_teamOfPayload = lp_teamOfPayload;
    auto_libMHmu_gf_PayloadSpawnedSetUI_lp_pathIndex = lp_pathIndex;

    if (auto_libMHmu_gf_PayloadSpawnedSetUI_Trigger == null) {
        auto_libMHmu_gf_PayloadSpawnedSetUI_Trigger = TriggerCreate("auto_libMHmu_gf_PayloadSpawnedSetUI_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_PayloadSpawnedSetUI_Trigger, false, false);
}

bool auto_libMHmu_gf_PayloadSpawnedSetUI_TriggerFunc (bool testConds, bool runActions) {
    int lp_teamOfPayload = auto_libMHmu_gf_PayloadSpawnedSetUI_lp_teamOfPayload;
    int lp_pathIndex = auto_libMHmu_gf_PayloadSpawnedSetUI_lp_pathIndex;

    // Variable Declarations
    int lv_timerFrameToModify;
    bool lv_doNotShowArrows;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timerFrameToModify = c_invalidDialogControlId;

    // Implementation
    if ((lp_pathIndex == 1) && (libMHmu_gv_path2PayloadsInitiallySpawned == false)) {
        lv_doNotShowArrows = true;
    }

    if ((lp_teamOfPayload == libGame_gv_teamOrderIndex_C)) {
        if ((lp_pathIndex == 1)) {
            lv_timerFrameToModify = libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabelOrder_Path1;
        }
        else {
            lv_timerFrameToModify = libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabelOrder_Path2;
        }
    }
    else {
        if ((lp_pathIndex == 1)) {
            lv_timerFrameToModify = libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabelChaos_Path1;
        }
        else {
            lv_timerFrameToModify = libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabelChaos_Path2;
        }
    }
    if ((lv_doNotShowArrows == false)) {
        libMHmu_gf_ShowPayloadArrows(lp_teamOfPayload, lp_pathIndex);
    }

    libNtve_gf_SetDialogItemStyle(lv_timerFrameToModify, "Storm_MapMechanic_MechanicCounterCentered_Tiny", PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lv_timerFrameToModify, StringExternal("Param/Value/lib_MHmu_D4D21C44"), PlayerGroupAll());
    Wait(3.0, c_timeGame);
    DialogControlSetVisible(lv_timerFrameToModify, PlayerGroupAll(), false);
    return true;
}

trigger auto_libMHmu_gf_PayloadTimerResetSetUI_Trigger = null;
int auto_libMHmu_gf_PayloadTimerResetSetUI_lp_teamOfPayload;
int auto_libMHmu_gf_PayloadTimerResetSetUI_lp_pathIndex;

void libMHmu_gf_PayloadTimerResetSetUI (int lp_teamOfPayload, int lp_pathIndex) {
    auto_libMHmu_gf_PayloadTimerResetSetUI_lp_teamOfPayload = lp_teamOfPayload;
    auto_libMHmu_gf_PayloadTimerResetSetUI_lp_pathIndex = lp_pathIndex;

    if (auto_libMHmu_gf_PayloadTimerResetSetUI_Trigger == null) {
        auto_libMHmu_gf_PayloadTimerResetSetUI_Trigger = TriggerCreate("auto_libMHmu_gf_PayloadTimerResetSetUI_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_PayloadTimerResetSetUI_Trigger, false, false);
}

bool auto_libMHmu_gf_PayloadTimerResetSetUI_TriggerFunc (bool testConds, bool runActions) {
    int lp_teamOfPayload = auto_libMHmu_gf_PayloadTimerResetSetUI_lp_teamOfPayload;
    int lp_pathIndex = auto_libMHmu_gf_PayloadTimerResetSetUI_lp_pathIndex;

    // Variable Declarations
    int lv_timerFrameToModify;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_timerFrameToModify = c_invalidDialogControlId;

    // Implementation
    if ((lp_teamOfPayload == libGame_gv_teamOrderIndex_C)) {
        if ((lp_pathIndex == 1)) {
            lv_timerFrameToModify = libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabelOrder_Path1;
        }
        else {
            lv_timerFrameToModify = libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabelOrder_Path2;
        }
    }
    else {
        if ((lp_pathIndex == 1)) {
            lv_timerFrameToModify = libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabelChaos_Path1;
        }
        else {
            lv_timerFrameToModify = libMHmu_gv_hanamuraUI.lv_payloadSpawningTimerLabelChaos_Path2;
        }
    }
    libNtve_gf_SetDialogItemStyle(lv_timerFrameToModify, "Storm_MapMechanic_MechanicCounterCentered_Tiny", PlayerGroupAll());
    libNtve_gf_SetDialogItemText(lv_timerFrameToModify, StringExternal("Param/Value/lib_MHmu_B1B66BA0"), PlayerGroupAll());
    DialogControlSetVisible(lv_timerFrameToModify, PlayerGroupAll(), true);
    libMHmu_gf_ShowPayloadArrows(lp_teamOfPayload, lp_pathIndex);
    Wait(2.0, c_timeGame);
    libMHmu_gf_ShowRelevantPayloadTimers();
    return true;
}

trigger auto_libMHmu_gf_ShowHideAttackingEnemyCoreFrameForTeam_Trigger = null;
bool auto_libMHmu_gf_ShowHideAttackingEnemyCoreFrameForTeam_lp_showHide;
int auto_libMHmu_gf_ShowHideAttackingEnemyCoreFrameForTeam_lp_teamOfPayload;

void libMHmu_gf_ShowHideAttackingEnemyCoreFrameForTeam (bool lp_showHide, int lp_teamOfPayload) {
    auto_libMHmu_gf_ShowHideAttackingEnemyCoreFrameForTeam_lp_showHide = lp_showHide;
    auto_libMHmu_gf_ShowHideAttackingEnemyCoreFrameForTeam_lp_teamOfPayload = lp_teamOfPayload;

    if (auto_libMHmu_gf_ShowHideAttackingEnemyCoreFrameForTeam_Trigger == null) {
        auto_libMHmu_gf_ShowHideAttackingEnemyCoreFrameForTeam_Trigger = TriggerCreate("auto_libMHmu_gf_ShowHideAttackingEnemyCoreFrameForTeam_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_ShowHideAttackingEnemyCoreFrameForTeam_Trigger, false, false);
}

bool auto_libMHmu_gf_ShowHideAttackingEnemyCoreFrameForTeam_TriggerFunc (bool testConds, bool runActions) {
    bool lp_showHide = auto_libMHmu_gf_ShowHideAttackingEnemyCoreFrameForTeam_lp_showHide;
    int lp_teamOfPayload = auto_libMHmu_gf_ShowHideAttackingEnemyCoreFrameForTeam_lp_teamOfPayload;

    // Variable Declarations
    int lv_enemyTeam;
    int lv_frameToDisplay;

    // Automatic Variable Declarations
    bool auto42F060D6_val;

    // Variable Initialization
    lv_enemyTeam = libGame_gf_EnemyTeam(lp_teamOfPayload);
    lv_frameToDisplay = c_invalidDialogControlId;

    // Implementation
    if ((lp_teamOfPayload == libGame_gv_teamOrderIndex_C)) {
        lv_frameToDisplay = libMHmu_gv_hanamuraUI.lv_orderTeamAttackedCoreFrame;
    }
    else {
        lv_frameToDisplay = libMHmu_gv_hanamuraUI.lv_chaosTeamAttackedCoreFrame;
    }
    auto42F060D6_val = lp_showHide;
    if (auto42F060D6_val == true) {
        DialogControlSendAnimationEvent(lv_frameToDisplay, PlayerGroupAll(), "Show");
    }
    else if (auto42F060D6_val == false) {
        DialogControlSendAnimationEvent(lv_frameToDisplay, PlayerGroupAll(), "Hide");
    }
    else {
    }
    return true;
}

void libMHmu_gf_ShowHidePotentialPointsPanel (bool lp_showHide) {
    // Automatic Variable Declarations
    // Implementation
    DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_potentialShotsPanel, PlayerGroupAll(), lp_showHide);
}

trigger auto_libMHmu_gf_UpdatePotentialPointsPanelForTeam_Trigger = null;
int auto_libMHmu_gf_UpdatePotentialPointsPanelForTeam_lp_team;

void libMHmu_gf_UpdatePotentialPointsPanelForTeam (int lp_team) {
    auto_libMHmu_gf_UpdatePotentialPointsPanelForTeam_lp_team = lp_team;

    if (auto_libMHmu_gf_UpdatePotentialPointsPanelForTeam_Trigger == null) {
        auto_libMHmu_gf_UpdatePotentialPointsPanelForTeam_Trigger = TriggerCreate("auto_libMHmu_gf_UpdatePotentialPointsPanelForTeam_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_UpdatePotentialPointsPanelForTeam_Trigger, false, false);
}

bool auto_libMHmu_gf_UpdatePotentialPointsPanelForTeam_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libMHmu_gf_UpdatePotentialPointsPanelForTeam_lp_team;

    // Variable Declarations
    int lv_labelToModify;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_labelToModify = c_invalidDialogControlId;

    // Implementation
    if ((lp_team == libGame_gv_teamOrderIndex_C)) {
        lv_labelToModify = libMHmu_gv_hanamuraUI.lv_leftPotentialShotsLabel;
    }
    else {
        lv_labelToModify = libMHmu_gv_hanamuraUI.lv_rightPotentialShotsLabel;
    }
    if ((libMHmu_gv_payload[lp_team].lv_payloadAttackingCore[1] == false) && (libMHmu_gv_payload[lp_team].lv_payloadAttackingCore[2] == false)) {
        libNtve_gf_SetDialogItemText(lv_labelToModify, IntToText(libMHmu_gv_teamEmpowermentLevel[lp_team]), PlayerGroupAll());
    }
    else {
        while (!((libMHmu_gv_payload[lp_team].lv_payloadAttackingCore[1] == false) && (libMHmu_gv_payload[lp_team].lv_payloadAttackingCore[2] == false))) {
            Wait(0.0625, c_timeGame);
        }
        libNtve_gf_SetDialogItemText(lv_labelToModify, IntToText(libMHmu_gv_teamEmpowermentLevel[lp_team]), PlayerGroupAll());
    }
    return true;
}

fixed libMHmu_gf_CalculatePayloadTravelDistancetoDestination (int lp_team, int lp_pathIndex) {
    // Variable Declarations
    fixed lv_totalDistance;
    int lv_itPoints;
    fixed lv_distance;

    // Automatic Variable Declarations
    int autoCE1BEA7C_ae;
    const int autoCE1BEA7C_ai = 1;

    // Variable Initialization

    // Implementation
    autoCE1BEA7C_ae = (libMHmu_gv_payloadPath[lp_team].lv_finalWaypointIndex[lp_pathIndex] - 1);
    lv_itPoints = 1;
    for ( ; ( (autoCE1BEA7C_ai >= 0 && lv_itPoints <= autoCE1BEA7C_ae) || (autoCE1BEA7C_ai < 0 && lv_itPoints >= autoCE1BEA7C_ae) ) ; lv_itPoints += autoCE1BEA7C_ai ) {
        lv_distance = DistanceBetweenPoints(libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][lv_itPoints], libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][(lv_itPoints + 1)]);
        lv_totalDistance += lv_distance;
    }
    return lv_totalDistance;
}

fixed libMHmu_gf_CalculatePayloadTravelDistanceToCheckPoint (int lp_pathIndex, int lp_team) {
    // Variable Declarations
    fixed lv_totalDistance;
    int lv_itPoint;
    fixed lv_distance;
    int lv_checkPointIndex;
    fixed lv_distanceFromCurrentIndex;

    // Automatic Variable Declarations
    int auto9775115D_ae;
    const int auto9775115D_ai = 1;
    int auto8EE07EBD_ae;
    const int auto8EE07EBD_ai = 1;

    // Variable Initialization

    // Implementation
    auto9775115D_ae = (libMHmu_gv_payloadPath[lp_team].lv_finalWaypointIndex[lp_pathIndex] - 1);
    lv_itPoint = libMHmu_gv_payloadPath[lp_team].lv_payloadCurrentIndex[lp_pathIndex];
    for ( ; ( (auto9775115D_ai >= 0 && lv_itPoint <= auto9775115D_ae) || (auto9775115D_ai < 0 && lv_itPoint >= auto9775115D_ae) ) ; lv_itPoint += auto9775115D_ai ) {
        if ((libMHmu_gv_payloadPath[lp_team].lv_pathPointIsWaypoint[lp_pathIndex][lv_itPoint] == true)) {
            lv_checkPointIndex = lv_itPoint;
            break;
        }

    }
    auto8EE07EBD_ae = (lv_checkPointIndex - 1);
    lv_itPoint = libMHmu_gv_payloadPath[lp_team].lv_payloadCurrentIndex[lp_pathIndex];
    for ( ; ( (auto8EE07EBD_ai >= 0 && lv_itPoint <= auto8EE07EBD_ae) || (auto8EE07EBD_ai < 0 && lv_itPoint >= auto8EE07EBD_ae) ) ; lv_itPoint += auto8EE07EBD_ai ) {
        lv_distance = DistanceBetweenPoints(libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][lv_itPoint], libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][(lv_itPoint + 1)]);
        lv_totalDistance += lv_distance;
    }
    lv_distanceFromCurrentIndex = DistanceBetweenPoints(libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][libMHmu_gv_payloadPath[lp_team].lv_payloadCurrentIndex[lp_pathIndex]], UnitGetPosition(libMHmu_gv_payload[lp_team].lv_payload[lp_pathIndex]));
    lv_totalDistance -= lv_distanceFromCurrentIndex;
    return lv_totalDistance;
}

fixed libMHmu_gf_PayloadCurrentDistance (int lp_team, int lp_pathIndex) {
    // Variable Declarations
    int lv_itPoints;
    fixed lv_totalDistance;
    fixed lv_distance;

    // Automatic Variable Declarations
    int auto701ADAED_ae;
    const int auto701ADAED_ai = 1;

    // Variable Initialization

    // Implementation
    auto701ADAED_ae = (libMHmu_gv_payloadPath[lp_team].lv_payloadCurrentIndex[lp_pathIndex] - 1);
    lv_itPoints = 1;
    for ( ; ( (auto701ADAED_ai >= 0 && lv_itPoints <= auto701ADAED_ae) || (auto701ADAED_ai < 0 && lv_itPoints >= auto701ADAED_ae) ) ; lv_itPoints += auto701ADAED_ai ) {
        lv_distance = DistanceBetweenPoints(libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][lv_itPoints], libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][(lv_itPoints + 1)]);
        lv_totalDistance += lv_distance;
    }
    if ((libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][libMHmu_gv_payloadPath[lp_team].lv_payloadCurrentIndex[lp_pathIndex]] != null)) {
        lv_totalDistance += DistanceBetweenPoints(UnitGetPosition(libMHmu_gv_payload[lp_team].lv_payload[lp_pathIndex]), libMHmu_gv_payloadPath[lp_team].lv_path[lp_pathIndex][libMHmu_gv_payloadPath[lp_team].lv_payloadCurrentIndex[lp_pathIndex]]);
    }

    return lv_totalDistance;
}

void libMHmu_gf_UpdateProgressBarForPayload (int lp_team, int lp_pathIndex, int lp_progressBar) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemCurrentValue(lp_progressBar, ((libMHmu_gf_PayloadCurrentDistance(lp_team, lp_pathIndex) / libMHmu_gv_payloadPath[lp_team].lv_totalDistance[lp_pathIndex]) * 100.0), PlayerGroupAll());
}

void libMHmu_gf_ResetProgressBarForPayload (int lp_progressBar) {
    // Automatic Variable Declarations
    // Implementation
    libNtve_gf_SetDialogItemCurrentValue(lp_progressBar, 0.0, PlayerGroupAll());
}

trigger auto_libMHmu_gf_DeactivateAndKillUnit_Trigger = null;
unit auto_libMHmu_gf_DeactivateAndKillUnit_lp_unit;
int auto_libMHmu_gf_DeactivateAndKillUnit_lp_team;

void libMHmu_gf_DeactivateAndKillUnit (unit lp_unit, int lp_team) {
    auto_libMHmu_gf_DeactivateAndKillUnit_lp_unit = lp_unit;
    auto_libMHmu_gf_DeactivateAndKillUnit_lp_team = lp_team;

    if (auto_libMHmu_gf_DeactivateAndKillUnit_Trigger == null) {
        auto_libMHmu_gf_DeactivateAndKillUnit_Trigger = TriggerCreate("auto_libMHmu_gf_DeactivateAndKillUnit_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_DeactivateAndKillUnit_Trigger, false, false);
}

bool auto_libMHmu_gf_DeactivateAndKillUnit_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libMHmu_gf_DeactivateAndKillUnit_lp_unit;
    int lp_team = auto_libMHmu_gf_DeactivateAndKillUnit_lp_team;

    // Automatic Variable Declarations
    // Implementation
    UnitCreateEffectUnit(libGame_gv_teams[lp_team].lv_core, "DeadzoneMinionApplyBehavior", lp_unit);
    return true;
}

trigger auto_libMHmu_gf_PayloadsInitiallySpawning_Trigger = null;

void libMHmu_gf_PayloadsInitiallySpawning () {
    if (auto_libMHmu_gf_PayloadsInitiallySpawning_Trigger == null) {
        auto_libMHmu_gf_PayloadsInitiallySpawning_Trigger = TriggerCreate("auto_libMHmu_gf_PayloadsInitiallySpawning_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_PayloadsInitiallySpawning_Trigger, false, false);
}

bool auto_libMHmu_gf_PayloadsInitiallySpawning_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("HanamuraVO", ("Left"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Right"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Hanamura - Payload Spawning First", "Value", 1, 1);
    ConversationDataRun("HanamuraVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHmu_gf_PayloadsInitiallySpawned_Trigger = null;

void libMHmu_gf_PayloadsInitiallySpawned () {
    if (auto_libMHmu_gf_PayloadsInitiallySpawned_Trigger == null) {
        auto_libMHmu_gf_PayloadsInitiallySpawned_Trigger = TriggerCreate("auto_libMHmu_gf_PayloadsInitiallySpawned_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_PayloadsInitiallySpawned_Trigger, false, false);
}

bool auto_libMHmu_gf_PayloadsInitiallySpawned_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("HanamuraVO", ("Left"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Right"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Hanamura - Payload Spawn First", "Value", 1, 1);
    ConversationDataRun("HanamuraVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHmu_gf_PayloadsSpawningOrder_Trigger = null;

void libMHmu_gf_PayloadsSpawningOrder () {
    if (auto_libMHmu_gf_PayloadsSpawningOrder_Trigger == null) {
        auto_libMHmu_gf_PayloadsSpawningOrder_Trigger = TriggerCreate("auto_libMHmu_gf_PayloadsSpawningOrder_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_PayloadsSpawningOrder_Trigger, false, false);
}

bool auto_libMHmu_gf_PayloadsSpawningOrder_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupOrder;
    playergroup lv_groupChaos;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupOrder = PlayerGroupEmpty();
    lv_groupChaos = PlayerGroupEmpty();
    lv_groupObserver = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("HanamuraVO", ("Left"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Right"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Hanamura - Payload Spawning Left", "Value", 1, 1);
    lv_groupOrder = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupChaos = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("HanamuraVO", ("Left"), lv_groupOrder);
    ConversationDataLineSetPlayers("HanamuraVO", ("Right"), lv_groupChaos);
    ConversationDataLineSetPlayers("HanamuraVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("HanamuraVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHmu_gf_PayloadsSpawningChaos_Trigger = null;

void libMHmu_gf_PayloadsSpawningChaos () {
    if (auto_libMHmu_gf_PayloadsSpawningChaos_Trigger == null) {
        auto_libMHmu_gf_PayloadsSpawningChaos_Trigger = TriggerCreate("auto_libMHmu_gf_PayloadsSpawningChaos_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_PayloadsSpawningChaos_Trigger, false, false);
}

bool auto_libMHmu_gf_PayloadsSpawningChaos_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupOrder;
    playergroup lv_groupChaos;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupOrder = PlayerGroupEmpty();
    lv_groupChaos = PlayerGroupEmpty();
    lv_groupObserver = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("HanamuraVO", ("Left"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Right"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Hanamura - Payload Spawning Right", "Value", 1, 1);
    lv_groupOrder = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupChaos = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("HanamuraVO", ("Left"), lv_groupOrder);
    ConversationDataLineSetPlayers("HanamuraVO", ("Right"), lv_groupChaos);
    ConversationDataLineSetPlayers("HanamuraVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("HanamuraVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHmu_gf_PayloadsSpawningBoth_Trigger = null;

void libMHmu_gf_PayloadsSpawningBoth () {
    if (auto_libMHmu_gf_PayloadsSpawningBoth_Trigger == null) {
        auto_libMHmu_gf_PayloadsSpawningBoth_Trigger = TriggerCreate("auto_libMHmu_gf_PayloadsSpawningBoth_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_PayloadsSpawningBoth_Trigger, false, false);
}

bool auto_libMHmu_gf_PayloadsSpawningBoth_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("HanamuraVO", ("Left"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Right"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Hanamura - Payload Spawning Both", "Value", 1, 1);
    ConversationDataRun("HanamuraVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHmu_gf_PayloadsSpawnedOrder_Trigger = null;

void libMHmu_gf_PayloadsSpawnedOrder () {
    if (auto_libMHmu_gf_PayloadsSpawnedOrder_Trigger == null) {
        auto_libMHmu_gf_PayloadsSpawnedOrder_Trigger = TriggerCreate("auto_libMHmu_gf_PayloadsSpawnedOrder_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_PayloadsSpawnedOrder_Trigger, false, false);
}

bool auto_libMHmu_gf_PayloadsSpawnedOrder_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupOrder;
    playergroup lv_groupChaos;
    playergroup lv_groupObserver;
    int lv_itLineIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupOrder = PlayerGroupEmpty();
    lv_groupChaos = PlayerGroupEmpty();
    lv_groupObserver = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("HanamuraVO", ("Left"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Right"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Hanamura - Payload Spawn Left", "Value", 1, 1);
    lv_groupOrder = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupChaos = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("HanamuraVO", ("Left"), lv_groupOrder);
    ConversationDataLineSetPlayers("HanamuraVO", ("Right"), lv_groupChaos);
    ConversationDataLineSetPlayers("HanamuraVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("HanamuraVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHmu_gf_PayloadsSpawnedChaos_Trigger = null;

void libMHmu_gf_PayloadsSpawnedChaos () {
    if (auto_libMHmu_gf_PayloadsSpawnedChaos_Trigger == null) {
        auto_libMHmu_gf_PayloadsSpawnedChaos_Trigger = TriggerCreate("auto_libMHmu_gf_PayloadsSpawnedChaos_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_PayloadsSpawnedChaos_Trigger, false, false);
}

bool auto_libMHmu_gf_PayloadsSpawnedChaos_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupOrder;
    playergroup lv_groupChaos;
    playergroup lv_groupObserver;
    int lv_itLineIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupOrder = PlayerGroupEmpty();
    lv_groupChaos = PlayerGroupEmpty();
    lv_groupObserver = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("HanamuraVO", ("Left"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Right"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Hanamura - Payload Spawn Right", "Value", 1, 1);
    lv_groupOrder = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupChaos = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("HanamuraVO", ("Left"), lv_groupOrder);
    ConversationDataLineSetPlayers("HanamuraVO", ("Right"), lv_groupChaos);
    ConversationDataLineSetPlayers("HanamuraVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("HanamuraVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHmu_gf_PayloadsSpawnedBoth_Trigger = null;

void libMHmu_gf_PayloadsSpawnedBoth () {
    if (auto_libMHmu_gf_PayloadsSpawnedBoth_Trigger == null) {
        auto_libMHmu_gf_PayloadsSpawnedBoth_Trigger = TriggerCreate("auto_libMHmu_gf_PayloadsSpawnedBoth_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_PayloadsSpawnedBoth_Trigger, false, false);
}

bool auto_libMHmu_gf_PayloadsSpawnedBoth_TriggerFunc (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("HanamuraVO", ("Left"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Right"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Hanamura - Payload Spawn Both", "Value", 1, 1);
    ConversationDataRun("HanamuraVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHmu_gf_PayloadsPathCompletedOrder_Trigger = null;

void libMHmu_gf_PayloadsPathCompletedOrder () {
    if (auto_libMHmu_gf_PayloadsPathCompletedOrder_Trigger == null) {
        auto_libMHmu_gf_PayloadsPathCompletedOrder_Trigger = TriggerCreate("auto_libMHmu_gf_PayloadsPathCompletedOrder_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_PayloadsPathCompletedOrder_Trigger, false, false);
}

bool auto_libMHmu_gf_PayloadsPathCompletedOrder_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupOrder;
    playergroup lv_groupChaos;
    playergroup lv_groupObserver;
    int lv_itLineIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupOrder = PlayerGroupEmpty();
    lv_groupChaos = PlayerGroupEmpty();
    lv_groupObserver = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("HanamuraVO", ("Left"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Right"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Hanamura - Payload End Left", "Value", 1, 1);
    lv_groupOrder = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupChaos = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("HanamuraVO", ("Left"), lv_groupOrder);
    ConversationDataLineSetPlayers("HanamuraVO", ("Right"), lv_groupChaos);
    ConversationDataLineSetPlayers("HanamuraVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("HanamuraVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHmu_gf_PayloadsPathCompletedChaos_Trigger = null;

void libMHmu_gf_PayloadsPathCompletedChaos () {
    if (auto_libMHmu_gf_PayloadsPathCompletedChaos_Trigger == null) {
        auto_libMHmu_gf_PayloadsPathCompletedChaos_Trigger = TriggerCreate("auto_libMHmu_gf_PayloadsPathCompletedChaos_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_PayloadsPathCompletedChaos_Trigger, false, false);
}

bool auto_libMHmu_gf_PayloadsPathCompletedChaos_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupOrder;
    playergroup lv_groupChaos;
    playergroup lv_groupObserver;
    int lv_itLineIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupOrder = PlayerGroupEmpty();
    lv_groupChaos = PlayerGroupEmpty();
    lv_groupObserver = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("HanamuraVO", ("Left"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Right"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Hanamura - Payload End Right", "Value", 1, 1);
    lv_groupOrder = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupChaos = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("HanamuraVO", ("Left"), lv_groupOrder);
    ConversationDataLineSetPlayers("HanamuraVO", ("Right"), lv_groupChaos);
    ConversationDataLineSetPlayers("HanamuraVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("HanamuraVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHmu_gf_OrderCoreAt1HP_Trigger = null;

void libMHmu_gf_OrderCoreAt1HP () {
    if (auto_libMHmu_gf_OrderCoreAt1HP_Trigger == null) {
        auto_libMHmu_gf_OrderCoreAt1HP_Trigger = TriggerCreate("auto_libMHmu_gf_OrderCoreAt1HP_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_OrderCoreAt1HP_Trigger, false, false);
}

bool auto_libMHmu_gf_OrderCoreAt1HP_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupOrder;
    playergroup lv_groupChaos;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupOrder = PlayerGroupEmpty();
    lv_groupChaos = PlayerGroupEmpty();
    lv_groupObserver = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("HanamuraVO", ("Left"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Right"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Hanamura - Core 1 HP Left", "Value", 1, 1);
    lv_groupOrder = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupChaos = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("HanamuraVO", ("Left"), lv_groupOrder);
    ConversationDataLineSetPlayers("HanamuraVO", ("Right"), lv_groupChaos);
    ConversationDataLineSetPlayers("HanamuraVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("HanamuraVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMHmu_gf_ChaosCoreAt1HP_Trigger = null;

void libMHmu_gf_ChaosCoreAt1HP () {
    if (auto_libMHmu_gf_ChaosCoreAt1HP_Trigger == null) {
        auto_libMHmu_gf_ChaosCoreAt1HP_Trigger = TriggerCreate("auto_libMHmu_gf_ChaosCoreAt1HP_TriggerFunc");
    }

    TriggerExecute(auto_libMHmu_gf_ChaosCoreAt1HP_Trigger, false, false);
}

bool auto_libMHmu_gf_ChaosCoreAt1HP_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_groupOrder;
    playergroup lv_groupChaos;
    playergroup lv_groupObserver;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_groupOrder = PlayerGroupEmpty();
    lv_groupChaos = PlayerGroupEmpty();
    lv_groupObserver = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("HanamuraVO", ("Left"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Right"));
    ConversationDataLineResetPlayers("HanamuraVO", ("Observer"));
    UserDataSetInt("MapVOEvent", "Hanamura - Core 1 HP Right", "Value", 1, 1);
    lv_groupOrder = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_groupChaos = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_groupObserver = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("HanamuraVO", ("Left"), lv_groupOrder);
    ConversationDataLineSetPlayers("HanamuraVO", ("Right"), lv_groupChaos);
    ConversationDataLineSetPlayers("HanamuraVO", ("Observer"), lv_groupObserver);
    ConversationDataRun("HanamuraVO", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

void libMHmu_gf_EOMInitializeEndofMatchAward () {
    // Variable Declarations
    int lv_iterator;

    // Automatic Variable Declarations
    int auto7398B425_ae;

    // Variable Initialization

    // Implementation
    auto7398B425_ae = libCore_gv_bALMaxPlayers;
    lv_iterator = 1;
    for ( ; lv_iterator <= auto7398B425_ae ; lv_iterator += 1 ) {
        TimerStart(libMHmu_gv_eOMPusherTimer[lv_iterator], c_timerDurationInfinite, false, c_timeGame);
        TimerPause(TimerLastStarted(), true);
    }
    libGame_gf_SendMapSpecificAwardInitializeEventwithUserData(null, "Generic Instance");
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Map Mechanic Initialized
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_MapMechanicInitialized_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Automatic Variable Declarations
    const int autoDDC47D48_ae = 12;
    const int autoDDC47D48_ai = 1;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gf_MapMechanicInitializationMechanicType() == libMHmu_gv_hanamuraMechanicName_C))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_towerMapPlaysCoreWarning = false;
    TriggerExecute(libMHmu_gt_SetUpMinionData, true, false);
    TriggerExecute(libMHmu_gt_MinionScalingData, true, false);
    lv_itPlayer = 1;
    for ( ; ( (autoDDC47D48_ai >= 0 && lv_itPlayer <= autoDDC47D48_ae) || (autoDDC47D48_ai < 0 && lv_itPlayer >= autoDDC47D48_ae) ) ; lv_itPlayer += autoDDC47D48_ai ) {
        TechTreeUpgradeAddLevel(lv_itPlayer, "DisplayLockedMapMechanicAbility", 1);
    }
    libMHmu_gv_payloadPath[libGame_gv_teamOrderIndex_C].lv_totalDistance[1] = libMHmu_gf_CalculatePayloadTravelDistancetoDestination(libGame_gv_teamOrderIndex_C, 1);
    libMHmu_gv_payloadPath[libGame_gv_teamOrderIndex_C].lv_totalDistance[2] = libMHmu_gf_CalculatePayloadTravelDistancetoDestination(libGame_gv_teamOrderIndex_C, 2);
    libMHmu_gv_payloadPath[libGame_gv_teamChaosIndex_C].lv_totalDistance[1] = libMHmu_gf_CalculatePayloadTravelDistancetoDestination(libGame_gv_teamChaosIndex_C, 1);
    libMHmu_gv_payloadPath[libGame_gv_teamChaosIndex_C].lv_totalDistance[2] = libMHmu_gf_CalculatePayloadTravelDistancetoDestination(libGame_gv_teamChaosIndex_C, 2);
    libUIUI_gf_UIPartyFrameShowHideCoreHealth(true);
    libMHmu_gf_EOMInitializeEndofMatchAward();
    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true)) {
        TriggerEnable(libMHmu_gt_DebugSetWarningTime, true);
        TriggerEnable(libMHmu_gt_DebugDeliverAllyPayload, true);
        TriggerEnable(libMHmu_gt_DebugDeliverEnemyPayload, true);
        TriggerEnable(libMHmu_gt_DebugDeliverAllyAndEnemyPayload, true);
        TriggerEnable(libMHmu_gt_DebugDisableEvent, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_MapMechanicInitialized_Init () {
    libMHmu_gt_MapMechanicInitialized = TriggerCreate("libMHmu_gt_MapMechanicInitialized_Func");
    libGame_gf_MapMechanicInitialization(libMHmu_gt_MapMechanicInitialized);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Variables
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_InitializeVariables_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itTeam;

    // Automatic Variable Declarations
    const int auto36A9856C_ae = libCore_gv_bALMaxTeams;
    const int auto36A9856C_ai = 1;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_itTeam = 1;
    for ( ; ( (auto36A9856C_ai >= 0 && lv_itTeam <= auto36A9856C_ae) || (auto36A9856C_ai < 0 && lv_itTeam >= auto36A9856C_ae) ) ; lv_itTeam += auto36A9856C_ai ) {
        libMHmu_gv_teamEmpowermentLevel[lv_itTeam] = libMHmu_gv_payloadDefaultPowerLevel;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_InitializeVariables_Init () {
    libMHmu_gt_InitializeVariables = TriggerCreate("libMHmu_gt_InitializeVariables_Func");
    libCore_gf_IncludeModInitialization(libMHmu_gt_InitializeVariables);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open The Gates Timer Expires
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_OpenTheGatesTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_timerUntilWarningPath1;
    int lv_timerUntilWarningPath2;
    timer lv_payloadWarningTimer1;
    timer lv_payloadWarningTimer2;
    int lv_audioCountdownDurationPath1;
    int lv_audioCountdownDurationPath2;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_payloadWarningTimer1 = TimerCreate();
    lv_payloadWarningTimer2 = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_timerUntilWarningPath1 = (libMHmu_gv_firstPayloadTimerDuration_C - libMHmu_gv_payloadWarningDuration);
    lv_audioCountdownDurationPath1 = (libMHmu_gv_firstPayloadTimerDuration_C - libMHmu_gv_payloadWarningCoundownDuration_C);
    lv_timerUntilWarningPath2 = (libMHmu_gv_secondPayloadTimerDuration_C - libMHmu_gv_payloadWarningDuration);
    lv_audioCountdownDurationPath2 = (libMHmu_gv_secondPayloadTimerDuration_C - libMHmu_gv_payloadWarningCoundownDuration_C);
    TimerStart(libMHmu_gv_payloadTimers[libGame_gv_teamOrderIndex_C].lv_spawnTimer[1], libMHmu_gv_firstPayloadTimerDuration_C, false, c_timeGame);
    TimerStart(libMHmu_gv_payloadTimers[libGame_gv_teamChaosIndex_C].lv_spawnTimer[1], libMHmu_gv_firstPayloadTimerDuration_C, false, c_timeGame);
    TimerStart(libMHmu_gv_payloadTimers[libGame_gv_teamOrderIndex_C].lv_spawnTimer[2], libMHmu_gv_secondPayloadTimerDuration_C, false, c_timeGame);
    TimerStart(libMHmu_gv_payloadTimers[libGame_gv_teamChaosIndex_C].lv_spawnTimer[2], libMHmu_gv_secondPayloadTimerDuration_C, false, c_timeGame);
    TimerStart(libMHmu_gv_payloadTimers[libGame_gv_teamOrderIndex_C].lv_showWarningTimer[1], lv_timerUntilWarningPath1, false, c_timeGame);
    lv_payloadWarningTimer1 = TimerLastStarted();
    TimerStart(libMHmu_gv_payloadTimers[libGame_gv_teamChaosIndex_C].lv_showWarningTimer[1], lv_timerUntilWarningPath1, false, c_timeGame);
    TimerStart(libMHmu_gv_payloadTimers[libGame_gv_teamOrderIndex_C].lv_showWarningTimer[2], lv_timerUntilWarningPath2, false, c_timeGame);
    lv_payloadWarningTimer2 = TimerLastStarted();
    TimerStart(libMHmu_gv_payloadTimers[libGame_gv_teamChaosIndex_C].lv_showWarningTimer[2], lv_timerUntilWarningPath2, false, c_timeGame);
    TimerStart(libMHmu_gv_payloadTimers[libGame_gv_teamOrderIndex_C].lv_audioTimer[1], lv_audioCountdownDurationPath1, false, c_timeGame);
    TimerStart(libMHmu_gv_payloadTimers[libGame_gv_teamChaosIndex_C].lv_audioTimer[1], lv_audioCountdownDurationPath1, false, c_timeGame);
    TimerStart(libMHmu_gv_payloadTimers[libGame_gv_teamOrderIndex_C].lv_audioTimer[2], lv_audioCountdownDurationPath2, false, c_timeGame);
    TimerStart(libMHmu_gv_payloadTimers[libGame_gv_teamChaosIndex_C].lv_audioTimer[2], lv_audioCountdownDurationPath2, false, c_timeGame);
    libNtve_gf_WaitForTimer(lv_payloadWarningTimer1, 0.0, false);
    libMHmu_gf_PayloadsInitiallySpawning();
    Wait(libMHmu_gv_payloadWarningDuration, c_timeGame);
    libMHmu_gf_PayloadsInitiallySpawned();
    libMHmu_gv_path1PayloadsInitiallySpawned = true;
    libNtve_gf_WaitForTimer(lv_payloadWarningTimer2, 0.0, false);
    libMHmu_gf_PayloadsInitiallySpawning();
    Wait(libMHmu_gv_payloadWarningDuration, c_timeGame);
    libMHmu_gf_PayloadsInitiallySpawned();
    libMHmu_gv_path2PayloadsInitiallySpawned = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_OpenTheGatesTimerExpires_Init () {
    libMHmu_gt_OpenTheGatesTimerExpires = TriggerCreate("libMHmu_gt_OpenTheGatesTimerExpires_Func");
    TriggerAddEventTimer(libMHmu_gt_OpenTheGatesTimerExpires, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Order Payload Warning Timer Expires
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_OrderPayloadWarningTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pathIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventTimer() == libMHmu_gv_payloadTimers[libGame_gv_teamOrderIndex_C].lv_showWarningTimer[1])) {
        lv_pathIndex = 1;
    }
    else {
        lv_pathIndex = 2;
    }
    libMHmu_gf_CreatePayloadWarningForTeam(libGame_gv_teamOrderIndex_C, lv_pathIndex);
    if ((libMHmu_gv_path1PayloadsInitiallySpawned == false) && (lv_pathIndex == 1)) {
        Wait(libMHmu_gv_payloadWarningDuration, c_timeGame);
        libMHmu_gf_ShowHidePotentialPointsPanel(true);
        DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadPanel, PlayerGroupAll(), true);
    }
    else {
        if ((libMHmu_gv_path1PayloadsInitiallySpawned == true) && (lv_pathIndex == 1)) {
            libMHmu_gf_PayloadsSpawningOrder();
            Wait(libMHmu_gv_payloadWarningDuration, c_timeGame);
            libMHmu_gf_PayloadsSpawnedOrder();
        }
        else {
            if ((libMHmu_gv_path2PayloadsInitiallySpawned == true) && (lv_pathIndex == 2)) {
                libMHmu_gf_PayloadsSpawningOrder();
                Wait(libMHmu_gv_payloadWarningDuration, c_timeGame);
                libMHmu_gf_PayloadsSpawnedOrder();
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_OrderPayloadWarningTimerExpires_Init () {
    libMHmu_gt_OrderPayloadWarningTimerExpires = TriggerCreate("libMHmu_gt_OrderPayloadWarningTimerExpires_Func");
    TriggerAddEventTimer(libMHmu_gt_OrderPayloadWarningTimerExpires, libMHmu_gv_payloadTimers[libGame_gv_teamOrderIndex_C].lv_showWarningTimer[1]);
    TriggerAddEventTimer(libMHmu_gt_OrderPayloadWarningTimerExpires, libMHmu_gv_payloadTimers[libGame_gv_teamOrderIndex_C].lv_showWarningTimer[2]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Order Payload Audio Timer Expires
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_OrderPayloadAudioTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("UI_Game_Payload_Countdown_Ally", -1), c_maxPlayers, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_OrderPayloadAudioTimerExpires_Init () {
    libMHmu_gt_OrderPayloadAudioTimerExpires = TriggerCreate("libMHmu_gt_OrderPayloadAudioTimerExpires_Func");
    TriggerAddEventTimer(libMHmu_gt_OrderPayloadAudioTimerExpires, libMHmu_gv_payloadTimers[libGame_gv_teamOrderIndex_C].lv_audioTimer[1]);
    TriggerAddEventTimer(libMHmu_gt_OrderPayloadAudioTimerExpires, libMHmu_gv_payloadTimers[libGame_gv_teamOrderIndex_C].lv_audioTimer[2]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chaos Payload Warning Timer Expires
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_ChaosPayloadWarningTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pathIndex;

    // Automatic Variable Declarations
    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventTimer() == libMHmu_gv_payloadTimers[libGame_gv_teamChaosIndex_C].lv_showWarningTimer[1])) {
        lv_pathIndex = 1;
    }
    else {
        lv_pathIndex = 2;
    }
    libMHmu_gf_CreatePayloadWarningForTeam(libGame_gv_teamChaosIndex_C, lv_pathIndex);
    if ((libMHmu_gv_path1PayloadsInitiallySpawned == true) && (lv_pathIndex == 1)) {
        libMHmu_gf_PayloadsSpawningChaos();
        Wait(libMHmu_gv_payloadWarningDuration, c_timeGame);
        libMHmu_gf_PayloadsSpawnedChaos();
    }

    if ((libMHmu_gv_path2PayloadsInitiallySpawned == true) && (lv_pathIndex == 2)) {
        libMHmu_gf_PayloadsSpawningChaos();
        Wait(libMHmu_gv_payloadWarningDuration, c_timeGame);
        libMHmu_gf_PayloadsSpawnedChaos();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_ChaosPayloadWarningTimerExpires_Init () {
    libMHmu_gt_ChaosPayloadWarningTimerExpires = TriggerCreate("libMHmu_gt_ChaosPayloadWarningTimerExpires_Func");
    TriggerAddEventTimer(libMHmu_gt_ChaosPayloadWarningTimerExpires, libMHmu_gv_payloadTimers[libGame_gv_teamChaosIndex_C].lv_showWarningTimer[1]);
    TriggerAddEventTimer(libMHmu_gt_ChaosPayloadWarningTimerExpires, libMHmu_gv_payloadTimers[libGame_gv_teamChaosIndex_C].lv_showWarningTimer[2]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Chaos Payload Audio Timer Expires
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_ChaosPayloadAudioTimerExpires_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("UI_Game_Payload_Countdown_Ally", -1), c_maxPlayers, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_ChaosPayloadAudioTimerExpires_Init () {
    libMHmu_gt_ChaosPayloadAudioTimerExpires = TriggerCreate("libMHmu_gt_ChaosPayloadAudioTimerExpires_Func");
    TriggerAddEventTimer(libMHmu_gt_ChaosPayloadAudioTimerExpires, libMHmu_gv_payloadTimers[libGame_gv_teamChaosIndex_C].lv_audioTimer[1]);
    TriggerAddEventTimer(libMHmu_gt_ChaosPayloadAudioTimerExpires, libMHmu_gv_payloadTimers[libGame_gv_teamChaosIndex_C].lv_audioTimer[2]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Boss Camp Captured
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_BossCampCaptured_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_teamOfUnit;
    int lv_enemyTeam;
    int lv_itVolley;
    unitgroup lv_destroyUnits;

    // Automatic Variable Declarations
    int auto662E2F28_ae;
    const int auto662E2F28_ai = 1;
    unitgroup auto605967F2_g;
    int auto605967F2_u;
    unit auto605967F2_var;

    // Variable Initialization
    lv_destroyUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libMapM_gv_jungleCreepCamps[libGame_gf_MercCampRewardGrantedCampIndex()].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gf_MercCampRewardGrantedPlayer() == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_teamOfUnit = libGame_gv_teamOrderIndex_C;
    }
    else {
        lv_teamOfUnit = libGame_gv_teamChaosIndex_C;
    }
    lv_enemyTeam = libGame_gf_EnemyTeam(lv_teamOfUnit);
    libNtve_gf_UnitCreateFacingPoint(1, "AttackCoreSourceInvisibleUnit", c_unitCreateIgnorePlacement, libGame_gf_MercCampRewardGrantedPlayer(), libMapM_gv_jungleCreepCamps[libGame_gf_MercCampRewardGrantedCampIndex()].lv_mapDataCampCaptainSpawnPoint, UnitGetPosition(libGame_gv_teams[lv_enemyTeam].lv_core));
    Wait(1.0, c_timeGame);
    auto662E2F28_ae = libMHmu_gv_bossCapturedVolleyAmount;
    lv_itVolley = 1;
    for ( ; ( (auto662E2F28_ai >= 0 && lv_itVolley <= auto662E2F28_ae) || (auto662E2F28_ai < 0 && lv_itVolley >= auto662E2F28_ae) ) ; lv_itVolley += auto662E2F28_ai ) {
        UnitCreateEffectUnit(UnitLastCreated(), "BossAttackCoreLaunchMissile", libGame_gv_teams[lv_enemyTeam].lv_core);
        UnitGroupAdd(lv_destroyUnits, UnitLastCreated());
        Wait(0.25, c_timeGame);
    }
    Wait(5.0, c_timeGame);
    auto605967F2_g = lv_destroyUnits;
    auto605967F2_u = UnitGroupCount(auto605967F2_g, c_unitCountAll);
    for (;; auto605967F2_u -= 1) {
        auto605967F2_var = UnitGroupUnitFromEnd(auto605967F2_g, auto605967F2_u);
        if (auto605967F2_var == null) { break; }
        UnitRemove(auto605967F2_var);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_BossCampCaptured_Init () {
    libMHmu_gt_BossCampCaptured = TriggerCreate("libMHmu_gt_BossCampCaptured_Func");
    libGame_gf_MercCampRewardGranted(libMHmu_gt_BossCampCaptured);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Boss Camp Captured Attack Core
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_DebugBossCampCapturedAttackCore_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "AttackCoreSourceInvisibleUnit", c_unitCreateIgnorePlacement, EventPlayer(), UnitGetPosition(libGame_gv_players[EventPlayer()].lv_heroUnit), UnitGetPosition(libGame_gv_teams[libGame_gf_EnemyTeamNumberOfPlayer(EventPlayer())].lv_core));
    Wait(1.0, c_timeGame);
    UnitCreateEffectUnit(UnitLastCreated(), "BossAttackCoreLaunchMissile", libGame_gv_teams[libGame_gf_EnemyTeamNumberOfPlayer(EventPlayer())].lv_core);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_DebugBossCampCapturedAttackCore_Init () {
    libMHmu_gt_DebugBossCampCapturedAttackCore = TriggerCreate("libMHmu_gt_DebugBossCampCapturedAttackCore_Func");
    TriggerAddEventChatMessage(libMHmu_gt_DebugBossCampCapturedAttackCore, c_playerAny, "fireboss", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Payload Gains Reverse Behavior
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_PayloadGainsReverseBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libMHmu_gf_MovePayloadBackward(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_PayloadGainsReverseBehavior_Init () {
    libMHmu_gt_PayloadGainsReverseBehavior = TriggerCreate("libMHmu_gt_PayloadGainsReverseBehavior_Func");
    TriggerAddEventUnitBehaviorChange(libMHmu_gt_PayloadGainsReverseBehavior, null, "PayloadReverseBehavior", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Payload Loses Reverse Behavior
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_PayloadLosesReverseBehavior_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libMHmu_gf_MovePayloadForward(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_PayloadLosesReverseBehavior_Init () {
    libMHmu_gt_PayloadLosesReverseBehavior = TriggerCreate("libMHmu_gt_PayloadLosesReverseBehavior_Func");
    TriggerAddEventUnitBehaviorChange(libMHmu_gt_PayloadLosesReverseBehavior, null, "PayloadReverseBehavior", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Attack Core Missile Created
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_AttackCoreMissileCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_missile;
    point lv_missilePosition;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "AttackCoreMissile") || (UnitGetType(EventUnitCreatedUnit()) == "AttackCoreBossMissile")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    lv_missile = EventUnitCreatedUnit();
    Wait(0.125, c_timeGame);
    while (true) {
        if ((UnitIsAlive(lv_missile) == false)) {
            libMHmu_gf_AttackCoreShakeMissile(lv_missilePosition);
            return true;
        }

        lv_missilePosition = UnitGetPosition(lv_missile);
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_AttackCoreMissileCreated_Init () {
    libMHmu_gt_AttackCoreMissileCreated = TriggerCreate("libMHmu_gt_AttackCoreMissileCreated_Func");
    TriggerAddEventUnitCreated(libMHmu_gt_AttackCoreMissileCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Mechanic UI Initialize
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_MapMechanicUIInitialize_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Actions
    if (!runActions) {
        return true;
    }

    libMHmu_gf_MapMechanicUIInit(libUIUI_gv_mapMechanicsPanel.lv_mainPanel);
    libMHmu_gf_UpdatePotentialPointsPanelForTeam(libGame_gv_teamOrderIndex_C);
    libMHmu_gf_UpdatePotentialPointsPanelForTeam(libGame_gv_teamChaosIndex_C);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_MapMechanicUIInitialize_Init () {
    libMHmu_gt_MapMechanicUIInitialize = TriggerCreate("libMHmu_gt_MapMechanicUIInitialize_Func");
    libCore_gf_IncludeModInitialization(libMHmu_gt_MapMechanicUIInitialize);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Payload Gains Blocked Behavior
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_PayloadGainsBlockedBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pathIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pathIndex = libCore_gf_IntegerStoredForUnit(EventUnit(), 1);

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedLabelFrame, PlayerGroupAll(), true);
    if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamOrder)) {
        if ((lv_pathIndex == 1)) {
            DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameBottom, PlayerGroupAll(), true);
            DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedIndicatorBottomOrder, PlayerGroupAll(), true);
            DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameBottomOrder, PlayerGroupAll(), true);
        }
        else {
            DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameTop, PlayerGroupAll(), true);
            DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedIndicatorTopOrder, PlayerGroupAll(), true);
            DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameTopOrder, PlayerGroupAll(), true);
        }
    }
    else {
        if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamChaos)) {
            if ((lv_pathIndex == 1)) {
                DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameTop, PlayerGroupAll(), true);
                DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedIndicatorTopChaos, PlayerGroupAll(), true);
                DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameTopChaos, PlayerGroupAll(), true);
            }
            else {
                DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameBottom, PlayerGroupAll(), true);
                DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedIndicatorBottomChaos, PlayerGroupAll(), true);
                DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameBottomChaos, PlayerGroupAll(), true);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_PayloadGainsBlockedBehavior_Init () {
    libMHmu_gt_PayloadGainsBlockedBehavior = TriggerCreate("libMHmu_gt_PayloadGainsBlockedBehavior_Func");
    TriggerAddEventUnitBehaviorChange(libMHmu_gt_PayloadGainsBlockedBehavior, null, "PayloadObstaclesInTheWay", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Payload Loses Blocked Behavior
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_PayloadLosesBlockedBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pathIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pathIndex = libCore_gf_IntegerStoredForUnit(EventUnit(), 1);

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitIsAlive(libMHmu_gv_payload[libGame_gv_teamChaosIndex_C].lv_payload[1]) == true) || (UnitBehaviorCount(libMHmu_gv_payload[libGame_gv_teamChaosIndex_C].lv_payload[1], "PayloadObstaclesInTheWay") == 0)) && ((UnitIsAlive(libMHmu_gv_payload[libGame_gv_teamChaosIndex_C].lv_payload[2]) == false) || (UnitBehaviorCount(libMHmu_gv_payload[libGame_gv_teamChaosIndex_C].lv_payload[2], "PayloadObstaclesInTheWay") == 0)) && ((UnitIsAlive(libMHmu_gv_payload[libGame_gv_teamOrderIndex_C].lv_payload[1]) == false) || (UnitBehaviorCount(libMHmu_gv_payload[libGame_gv_teamOrderIndex_C].lv_payload[1], "PayloadObstaclesInTheWay") == 0)) && ((UnitIsAlive(libMHmu_gv_payload[libGame_gv_teamOrderIndex_C].lv_payload[2]) == false) || (UnitBehaviorCount(libMHmu_gv_payload[libGame_gv_teamOrderIndex_C].lv_payload[2], "PayloadObstaclesInTheWay") == 0))) {
        DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedLabelFrame, PlayerGroupAll(), false);
    }

    if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamOrder)) {
        if ((lv_pathIndex == 1)) {
            if (((UnitIsAlive(libMHmu_gv_payload[libGame_gv_teamChaosIndex_C].lv_payload[2]) == false) || (UnitBehaviorCount(libMHmu_gv_payload[libGame_gv_teamChaosIndex_C].lv_payload[2], "PayloadObstaclesInTheWay") == 0))) {
                DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameBottom, PlayerGroupAll(), false);
            }

            DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedIndicatorBottomOrder, PlayerGroupAll(), false);
            DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameBottomOrder, PlayerGroupAll(), false);
        }
        else {
            if (((UnitIsAlive(libMHmu_gv_payload[libGame_gv_teamChaosIndex_C].lv_payload[1]) == false) || (UnitBehaviorCount(libMHmu_gv_payload[libGame_gv_teamChaosIndex_C].lv_payload[1], "PayloadObstaclesInTheWay") == 0))) {
                DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameTop, PlayerGroupAll(), false);
            }

            DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedIndicatorTopOrder, PlayerGroupAll(), false);
            DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameTopOrder, PlayerGroupAll(), false);
        }
    }
    else {
        if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamChaos)) {
            if ((lv_pathIndex == 1)) {
                if (((UnitIsAlive(libMHmu_gv_payload[libGame_gv_teamOrderIndex_C].lv_payload[2]) == false) || (UnitBehaviorCount(libMHmu_gv_payload[libGame_gv_teamOrderIndex_C].lv_payload[2], "PayloadObstaclesInTheWay") == 0))) {
                    DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameTop, PlayerGroupAll(), false);
                }

                DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedIndicatorTopChaos, PlayerGroupAll(), false);
                DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameTopChaos, PlayerGroupAll(), false);
            }
            else {
                if (((UnitIsAlive(libMHmu_gv_payload[libGame_gv_teamOrderIndex_C].lv_payload[1]) == false) || (UnitBehaviorCount(libMHmu_gv_payload[libGame_gv_teamOrderIndex_C].lv_payload[1], "PayloadObstaclesInTheWay") == 0))) {
                    DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameBottom, PlayerGroupAll(), false);
                }

                DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedIndicatorBottomChaos, PlayerGroupAll(), false);
                DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadBlockedFrameBottomChaos, PlayerGroupAll(), false);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_PayloadLosesBlockedBehavior_Init () {
    libMHmu_gt_PayloadLosesBlockedBehavior = TriggerCreate("libMHmu_gt_PayloadLosesBlockedBehavior_Func");
    TriggerAddEventUnitBehaviorChange(libMHmu_gt_PayloadLosesBlockedBehavior, null, "PayloadObstaclesInTheWay", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Payload Gains Contested Behavior
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_PayloadGainsContestedBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pathIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pathIndex = libCore_gf_IntegerStoredForUnit(EventUnit(), 1);

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadContestedFrame, PlayerGroupAll(), true);
    if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamOrder)) {
        if ((lv_pathIndex == 1)) {
            DialogControlSendAnimationEvent(libMHmu_gv_hanamuraUI.lv_payloadProgressBarOrderPath1, PlayerGroupAll(), "Contested");
        }
        else {
            DialogControlSendAnimationEvent(libMHmu_gv_hanamuraUI.lv_payloadProgressBarOrderPath2, PlayerGroupAll(), "Contested");
        }
    }
    else {
        if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamChaos)) {
            if ((lv_pathIndex == 1)) {
                DialogControlSendAnimationEvent(libMHmu_gv_hanamuraUI.lv_payloadProgressBarChaosPath1, PlayerGroupAll(), "Contested");
            }
            else {
                DialogControlSendAnimationEvent(libMHmu_gv_hanamuraUI.lv_payloadProgressBarChaosPath2, PlayerGroupAll(), "Contested");
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_PayloadGainsContestedBehavior_Init () {
    libMHmu_gt_PayloadGainsContestedBehavior = TriggerCreate("libMHmu_gt_PayloadGainsContestedBehavior_Func");
    TriggerAddEventUnitBehaviorChange(libMHmu_gt_PayloadGainsContestedBehavior, null, "PayloadIsContestedBehavior", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Payload Loses Contested Behavior
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_PayloadLosesContestedBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pathIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pathIndex = libCore_gf_IntegerStoredForUnit(EventUnit(), 1);

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitIsAlive(libMHmu_gv_payload[libGame_gv_teamChaosIndex_C].lv_payload[1]) == true) || (UnitBehaviorCount(libMHmu_gv_payload[libGame_gv_teamChaosIndex_C].lv_payload[1], "PayloadIsContestedBehavior") == 0)) && ((UnitIsAlive(libMHmu_gv_payload[libGame_gv_teamChaosIndex_C].lv_payload[2]) == false) || (UnitBehaviorCount(libMHmu_gv_payload[libGame_gv_teamChaosIndex_C].lv_payload[2], "PayloadIsContestedBehavior") == 0)) && ((UnitIsAlive(libMHmu_gv_payload[libGame_gv_teamOrderIndex_C].lv_payload[1]) == false) || (UnitBehaviorCount(libMHmu_gv_payload[libGame_gv_teamOrderIndex_C].lv_payload[1], "PayloadIsContestedBehavior") == 0)) && ((UnitIsAlive(libMHmu_gv_payload[libGame_gv_teamOrderIndex_C].lv_payload[2]) == false) || (UnitBehaviorCount(libMHmu_gv_payload[libGame_gv_teamOrderIndex_C].lv_payload[2], "PayloadIsContestedBehavior") == 0))) {
        DialogControlSetVisible(libMHmu_gv_hanamuraUI.lv_payloadContestedFrame, PlayerGroupAll(), false);
    }

    if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamOrder)) {
        if ((lv_pathIndex == 1)) {
            DialogControlSendAnimationEvent(libMHmu_gv_hanamuraUI.lv_payloadProgressBarOrderPath1, PlayerGroupAll(), "Uncontested");
        }
        else {
            DialogControlSendAnimationEvent(libMHmu_gv_hanamuraUI.lv_payloadProgressBarOrderPath2, PlayerGroupAll(), "Uncontested");
        }
    }
    else {
        if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamChaos)) {
            if ((lv_pathIndex == 1)) {
                DialogControlSendAnimationEvent(libMHmu_gv_hanamuraUI.lv_payloadProgressBarChaosPath1, PlayerGroupAll(), "Uncontested");
            }
            else {
                DialogControlSendAnimationEvent(libMHmu_gv_hanamuraUI.lv_payloadProgressBarChaosPath2, PlayerGroupAll(), "Uncontested");
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_PayloadLosesContestedBehavior_Init () {
    libMHmu_gt_PayloadLosesContestedBehavior = TriggerCreate("libMHmu_gt_PayloadLosesContestedBehavior_Func");
    TriggerAddEventUnitBehaviorChange(libMHmu_gt_PayloadLosesContestedBehavior, null, "PayloadIsContestedBehavior", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Up Minion Data
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_SetUpMinionData_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_composition;
    int lv_group;

    // Automatic Variable Declarations
    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSCustomMinionsEnabled == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_composition = (libCore_ge_MinionWaveCompositionsTypes_Standard);
    lv_group = 0;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_name = StringExternal("Param/Value/lib_MHmu_9D807203");
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_enabled = true;
    lv_group += 1;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionType[lv_group] = libCore_ge_MinionTypes_Footmen;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionCount[lv_group] = 3;
    lv_group += 1;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionType[lv_group] = libCore_ge_MinionTypes_Wizard;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionCount[lv_group] = 1;
    lv_group += 1;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionType[lv_group] = libCore_ge_MinionTypes_Ranged;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionCount[lv_group] = 3;
    lv_group += 1;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionType[lv_group] = libCore_ge_MinionTypes_CustomCatapult1;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_groupMinionCount[lv_group] = 1;
    libCore_gv_dataMinionWaveCompositions[lv_composition].lv_numberOfGroups = lv_group;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_SetUpMinionData_Init () {
    libMHmu_gt_SetUpMinionData = TriggerCreate("libMHmu_gt_SetUpMinionData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minion Scaling Data
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_MinionScalingData_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSCustomMinionsEnabled == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_DataInitializeScalingDataForMinion("FootmanMinion", libCore_ge_MinionTypes_Footmen);
    libCore_gf_DataInitializeScalingDataForMinion("WizardMinion", libCore_ge_MinionTypes_Wizard);
    libCore_gf_DataInitializeScalingDataForMinion("RangedMinion", libCore_ge_MinionTypes_Ranged);
    libCore_gf_DataInitializeScalingDataForMinion("MercGoblinSapperLaner", libCore_ge_MinionTypes_CustomCatapult1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_MinionScalingData_Init () {
    libMHmu_gt_MinionScalingData = TriggerCreate("libMHmu_gt_MinionScalingData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fort Or Keep Dies
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_FortOrKeepDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dyingStructureUnit;
    int lv_teamOfStructure;
    int lv_teamThatKilledStructure;
    string lv_ammoLevelActorMessage;
    int lv_itPathIndex;

    // Automatic Variable Declarations
    const int autoD899506F_ae = libMHmu_gv_maxPayloadCount_C;
    const int autoD899506F_ai = 1;

    // Variable Initialization
    lv_dyingStructureUnit = EventUnit();
    lv_ammoLevelActorMessage = "";

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(lv_dyingStructureUnit) == "TownTownHallL2") || (UnitGetType(lv_dyingStructureUnit) == "TownTownHallL3")))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(lv_dyingStructureUnit), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(lv_dyingStructureUnit), c_unitAttributeSummoned) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_teamOfStructure = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_dyingStructureUnit));
    lv_teamThatKilledStructure = libGame_gf_EnemyTeam(lv_teamOfStructure);
    DialogControlSendAnimationEvent(libMHmu_gv_hanamuraUI.lv_potentialShotsPanel, PlayerGroupAll(), ("Team" + IntToString(lv_teamThatKilledStructure) + "Empowered"));
    if ((UnitGetType(lv_dyingStructureUnit) == "TownTownHallL2")) {
        libMHmu_gv_teamEmpowermentLevel[lv_teamThatKilledStructure] += libMHmu_gv_payloadEmpowermentValue_FortDestroyed;
    }
    else {
        if ((UnitGetType(lv_dyingStructureUnit) == "TownTownHallL3")) {
            libMHmu_gv_teamEmpowermentLevel[lv_teamThatKilledStructure] += libMHmu_gv_payloadEmpowermentValue_KeepDestroyed;
        }

    }
    lv_ammoLevelActorMessage = ("Signal Ammo" + IntToString((libMHmu_gv_teamEmpowermentLevel[lv_teamThatKilledStructure] - 1)));
    lv_itPathIndex = 1;
    for ( ; ( (autoD899506F_ai >= 0 && lv_itPathIndex <= autoD899506F_ae) || (autoD899506F_ai < 0 && lv_itPathIndex >= autoD899506F_ae) ) ; lv_itPathIndex += autoD899506F_ai ) {
        if ((UnitIsAlive(libMHmu_gv_payload[lv_teamThatKilledStructure].lv_payload[lv_itPathIndex]) == true) && (libMHmu_gv_payload[lv_teamThatKilledStructure].lv_payloadAttackingCore[lv_itPathIndex] == false)) {
            libNtve_gf_SendActorMessageToUnit(libMHmu_gv_payload[lv_teamThatKilledStructure].lv_payload[lv_itPathIndex], lv_ammoLevelActorMessage);
        }

    }
    libMHmu_gf_UpdatePotentialPointsPanelForTeam(lv_teamThatKilledStructure);
    libMHmu_gf_ShowHidePotentialPointsPanel(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_FortOrKeepDies_Init () {
    libMHmu_gt_FortOrKeepDies = TriggerCreate("libMHmu_gt_FortOrKeepDies_Func");
    TriggerAddEventUnitDied(libMHmu_gt_FortOrKeepDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Payload Target On
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_PayloadTargetOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;

    // Automatic Variable Declarations
    unitgroup autoF299F3A1_g;
    int autoF299F3A1_u;
    unit autoF299F3A1_var;

    // Variable Initialization
    lv_team = libGame_gf_TeamNumberOfPlayer(EventPlayer());

    // Actions
    if (!runActions) {
        return true;
    }

    autoF299F3A1_g = libGame_gv_players[EventPlayer()].lv_heroUnitGroup;
    autoF299F3A1_u = UnitGroupCount(autoF299F3A1_g, c_unitCountAll);
    for (;; autoF299F3A1_u -= 1) {
        autoF299F3A1_var = UnitGroupUnitFromEnd(autoF299F3A1_g, autoF299F3A1_u);
        if (autoF299F3A1_var == null) { break; }
        if ((UnitIsSelected(autoF299F3A1_var, EventPlayer()) == true) && (UnitGetType(autoF299F3A1_var) != "HeroLostVikingsController")) {
            libMHmu_gv_heroInTargetMode[EventPlayer()] = autoF299F3A1_var;
            break;
        }

    }
    if ((libMHmu_gv_payload[lv_team].lv_payload[1] != null)) {
        UnitCreateEffectUnit(libMHmu_gv_heroInTargetMode[EventPlayer()], "PayloadTurretDummyEffectToMakePlaceholderImage", libMHmu_gv_payload[lv_team].lv_payload[1]);
    }

    if ((libMHmu_gv_payload[lv_team].lv_payload[2] != null)) {
        UnitCreateEffectUnit(libMHmu_gv_heroInTargetMode[EventPlayer()], "PayloadTurretDummyEffectToMakePlaceholderImagePayload2", libMHmu_gv_payload[lv_team].lv_payload[2]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_PayloadTargetOn_Init () {
    libMHmu_gt_PayloadTargetOn = TriggerCreate("libMHmu_gt_PayloadTargetOn_Func");
    TriggerAddEventTargetModeUpdate(libMHmu_gt_PayloadTargetOn, c_playerAny, AbilityCommand("MapMechanicAbilityTarget", 0), c_targetModeStateOn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Payload Target Off
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_PayloadTargetOff_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    unitgroup auto52F595B8_g;
    int auto52F595B8_u;
    unit auto52F595B8_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto52F595B8_g = libGame_gv_players[EventPlayer()].lv_heroUnitGroup;
    auto52F595B8_u = UnitGroupCount(auto52F595B8_g, c_unitCountAll);
    for (;; auto52F595B8_u -= 1) {
        auto52F595B8_var = UnitGroupUnitFromEnd(auto52F595B8_g, auto52F595B8_u);
        if (auto52F595B8_var == null) { break; }
        UnitCreateEffectUnit(auto52F595B8_var, "PayloadTurretDummyEffectToDestroyPlaceholderImage", auto52F595B8_var);
    }
    libMHmu_gv_heroInTargetMode[EventPlayer()] = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_PayloadTargetOff_Init () {
    libMHmu_gt_PayloadTargetOff = TriggerCreate("libMHmu_gt_PayloadTargetOff_Func");
    TriggerAddEventTargetModeUpdate(libMHmu_gt_PayloadTargetOff, c_playerAny, AbilityCommand("MapMechanicAbilityTarget", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Payload Turret Behavior Increment
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_PayloadTurretBehaviorIncrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup auto6F70AB72_g;
    int auto6F70AB72_var;

    // Actions
    if (!runActions) {
        return true;
    }

    auto6F70AB72_g = libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeamNumberOfPlayer(UnitGetOwner(EventUnit())), false);
    auto6F70AB72_var = -1;
    while (true) {
        	auto6F70AB72_var = PlayerGroupNextPlayer(auto6F70AB72_g, auto6F70AB72_var);
        	if (auto6F70AB72_var<0) { break; }
        	UnitSetStateForPlayer(EventUnit(), c_unitStateTargetable, auto6F70AB72_var, true);
    }
    UnitXPAddXP(EventUnit(), "OverwatchTurretPlayerScaling", libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(EventPlayer())].lv_teamLevel);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_PayloadTurretBehaviorIncrement_Init () {
    libMHmu_gt_PayloadTurretBehaviorIncrement = TriggerCreate("libMHmu_gt_PayloadTurretBehaviorIncrement_Func");
    TriggerAddEventUnitBehaviorChange(libMHmu_gt_PayloadTurretBehaviorIncrement, null, "PayloadHasTurret", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Payload Turret Behavior Decrement
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_PayloadTurretBehaviorDecrement_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    playergroup autoD4E4BAB8_g;
    int autoD4E4BAB8_var;

    // Actions
    if (!runActions) {
        return true;
    }

    autoD4E4BAB8_g = libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeamNumberOfPlayer(UnitGetOwner(EventUnit())), false);
    autoD4E4BAB8_var = -1;
    while (true) {
        	autoD4E4BAB8_var = PlayerGroupNextPlayer(autoD4E4BAB8_g, autoD4E4BAB8_var);
        	if (autoD4E4BAB8_var<0) { break; }
        	UnitSetStateForPlayer(EventUnit(), c_unitStateTargetable, autoD4E4BAB8_var, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_PayloadTurretBehaviorDecrement_Init () {
    libMHmu_gt_PayloadTurretBehaviorDecrement = TriggerCreate("libMHmu_gt_PayloadTurretBehaviorDecrement_Func");
    TriggerAddEventUnitBehaviorChange(libMHmu_gt_PayloadTurretBehaviorDecrement, null, "PayloadHasTurret", c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EOM Initialize Pusher Behaviors
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_EOMInitializePusherBehaviors_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_iteratorUnit;
    int lv_iterator;

    // Automatic Variable Declarations
    int auto3D2683EB_ae;
    unitgroup autoA14C2C83_g;
    int autoA14C2C83_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto3D2683EB_ae = libCore_gv_bALMaxPlayers;
    lv_iterator = 1;
    for ( ; lv_iterator <= auto3D2683EB_ae ; lv_iterator += 1 ) {
        autoA14C2C83_g = libGame_gv_players[lv_iterator].lv_heroUnitGroup;
        autoA14C2C83_u = UnitGroupCount(autoA14C2C83_g, c_unitCountAll);
        for (;; autoA14C2C83_u -= 1) {
            lv_iteratorUnit = UnitGroupUnitFromEnd(autoA14C2C83_g, autoA14C2C83_u);
            if (lv_iteratorUnit == null) { break; }
            UnitCreateEffectUnit(lv_iteratorUnit, "ApplyAllyPayloadPusherBehavior", lv_iteratorUnit);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_EOMInitializePusherBehaviors_Init () {
    libMHmu_gt_EOMInitializePusherBehaviors = TriggerCreate("libMHmu_gt_EOMInitializePusherBehaviors_Func");
    TriggerAddEventTimer(libMHmu_gt_EOMInitializePusherBehaviors, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EOM Pusher Added
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_EOMPusherAdded_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pushingPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pushingPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((lv_pushingPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((lv_pushingPlayer > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(libMHmu_gv_eOMPusherTimer[lv_pushingPlayer], false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_EOMPusherAdded_Init () {
    libMHmu_gt_EOMPusherAdded = TriggerCreate("libMHmu_gt_EOMPusherAdded_Func");
    TriggerAddEventUnitBehaviorChange(libMHmu_gt_EOMPusherAdded, null, "AllyPayloadPusherBehavior", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EOM Pusher Removed
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_EOMPusherRemoved_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pushingPlayer;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_pushingPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((lv_pushingPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((lv_pushingPlayer > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(libMHmu_gv_eOMPusherTimer[lv_pushingPlayer], true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_EOMPusherRemoved_Init () {
    libMHmu_gt_EOMPusherRemoved = TriggerCreate("libMHmu_gt_EOMPusherRemoved_Func");
    TriggerAddEventUnitBehaviorChange(libMHmu_gt_EOMPusherRemoved, null, "AllyPayloadPusherBehavior", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: EOM Report Pushing Score
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_EOMReportPushingScore_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_iterator;

    // Automatic Variable Declarations
    int auto9692B77F_ae;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto9692B77F_ae = libCore_gv_bALMaxPlayers;
    lv_iterator = 1;
    for ( ; lv_iterator <= auto9692B77F_ae ; lv_iterator += 1 ) {
        libGame_gf_ScoreValuesReportRealValueAndLog(lv_iterator, "TimeOnPayload", TimerGetDuration(libMHmu_gv_eOMPusherTimer[lv_iterator]));
        libGame_gf_SendMapSpecificAwardEvent(lv_iterator, TimerGetDuration(libMHmu_gv_eOMPusherTimer[lv_iterator]), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_EOMReportPushingScore_Init () {
    libMHmu_gt_EOMReportPushingScore = TriggerCreate("libMHmu_gt_EOMReportPushingScore_Func");
    libGame_gf_GameOverEvent(libMHmu_gt_EOMReportPushingScore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Set Warning Time
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_DebugSetWarningTime_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != "")) {
        libMHmu_gv_payloadWarningDuration = StringToInt(StringWord(EventChatMessage(false), 2));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_DebugSetWarningTime_Init () {
    libMHmu_gt_DebugSetWarningTime = TriggerCreate("libMHmu_gt_DebugSetWarningTime_Func");
    TriggerEnable(libMHmu_gt_DebugSetWarningTime, false);
    TriggerAddEventChatMessage(libMHmu_gt_DebugSetWarningTime, c_playerAny, "-payloadwarningtime", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Deliver Ally Payload
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_DebugDeliverAllyPayload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    int lv_pathIndex;
    unit lv_payloadUnit;

    // Automatic Variable Declarations
    unitgroup auto3269845D_g;
    int auto3269845D_u;
    unit auto3269845D_var;

    // Variable Initialization
    lv_team = libGame_gf_TeamNumberOfPlayer(EventPlayer());
    lv_pathIndex = StringToInt(StringWord(EventChatMessage(false), 2));
    lv_payloadUnit = libMHmu_gv_payload[lv_team].lv_payload[lv_pathIndex];

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex] != 0)) {
        PathClearWayPoints(libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex]);
        PathDestroy(libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex]);
        libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex] = 0;
    }

    libMHmu_gv_payloadPath[lv_team].lv_lastCheckpointReachedIndex[lv_pathIndex] = (libMHmu_gv_payloadPath[lv_team].lv_finalWaypointIndex[lv_pathIndex] - 1);
    libMHmu_gv_payloadPath[lv_team].lv_payloadCurrentDestinationPointIndex[lv_pathIndex] = libMHmu_gv_payloadPath[lv_team].lv_finalWaypointIndex[lv_pathIndex];
    auto3269845D_g = libGame_gv_players[EventPlayer()].lv_heroUnitGroup;
    auto3269845D_u = UnitGroupCount(auto3269845D_g, c_unitCountAll);
    for (;; auto3269845D_u -= 1) {
        auto3269845D_var = UnitGroupUnitFromEnd(auto3269845D_g, auto3269845D_u);
        if (auto3269845D_var == null) { break; }
        UnitSetPosition(auto3269845D_var, libMHmu_gv_payloadPath[lv_team].lv_path[lv_pathIndex][(libMHmu_gv_payloadPath[lv_team].lv_finalWaypointIndex[lv_pathIndex] - 1)], false);
    }
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(EventPlayer(), libMHmu_gv_payloadPath[lv_team].lv_path[lv_pathIndex][(libMHmu_gv_payloadPath[lv_team].lv_finalWaypointIndex[lv_pathIndex] - 1)], 0.0, -1, 0.0, false);
    UnitSetPosition(libMHmu_gv_payload[lv_team].lv_payload[lv_pathIndex], libMHmu_gv_payloadPath[lv_team].lv_path[lv_pathIndex][(libMHmu_gv_payloadPath[lv_team].lv_finalWaypointIndex[lv_pathIndex] - 1)], false);
    libNtve_gf_MakeUnitFacePoint(libMHmu_gv_payload[lv_team].lv_payload[lv_pathIndex], libMHmu_gv_payloadPath[lv_team].lv_path[lv_pathIndex][libMHmu_gv_payloadPath[lv_team].lv_finalWaypointIndex[lv_pathIndex]], 0.0);
    UnitIssueOrder(libMHmu_gv_payload[lv_team].lv_payload[lv_pathIndex], OrderTargetingPoint(AbilityCommand("move", 0), libMHmu_gv_payloadPath[lv_team].lv_path[lv_pathIndex][libMHmu_gv_payloadPath[lv_team].lv_finalWaypointIndex[lv_pathIndex]]), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_DebugDeliverAllyPayload_Init () {
    libMHmu_gt_DebugDeliverAllyPayload = TriggerCreate("libMHmu_gt_DebugDeliverAllyPayload_Func");
    TriggerEnable(libMHmu_gt_DebugDeliverAllyPayload, false);
    TriggerAddEventChatMessage(libMHmu_gt_DebugDeliverAllyPayload, c_playerAny, "-deliverallypayload", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Deliver Enemy Payload
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_DebugDeliverEnemyPayload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    int lv_pathIndex;
    unit lv_payloadUnit;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_team = libGame_gf_EnemyTeamNumberOfPlayer(EventPlayer());
    lv_pathIndex = StringToInt(StringWord(EventChatMessage(false), 2));
    lv_payloadUnit = libMHmu_gv_payload[lv_team].lv_payload[lv_pathIndex];

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex] != 0)) {
        PathClearWayPoints(libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex]);
        PathDestroy(libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex]);
        libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex] = 0;
    }

    libMHmu_gv_payloadPath[lv_team].lv_lastCheckpointReachedIndex[lv_pathIndex] = (libMHmu_gv_payloadPath[lv_team].lv_finalWaypointIndex[lv_pathIndex] - 1);
    libMHmu_gv_payloadPath[lv_team].lv_payloadCurrentDestinationPointIndex[lv_pathIndex] = libMHmu_gv_payloadPath[lv_team].lv_finalWaypointIndex[lv_pathIndex];
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HeroDiablo", c_unitCreateIgnorePlacement, PlayerGroupPlayer(libGame_gf_PlayersOnTeamHeroes(lv_team, false), 1), libMHmu_gv_payloadPath[lv_team].lv_path[lv_pathIndex][(libMHmu_gv_payloadPath[lv_team].lv_finalWaypointIndex[lv_pathIndex] - 1)]);
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(EventPlayer(), libMHmu_gv_payloadPath[lv_team].lv_path[lv_pathIndex][(libMHmu_gv_payloadPath[lv_team].lv_finalWaypointIndex[lv_pathIndex] - 1)], 0.0, -1, 0.0, false);
    UnitSetPosition(libMHmu_gv_payload[lv_team].lv_payload[lv_pathIndex], libMHmu_gv_payloadPath[lv_team].lv_path[lv_pathIndex][(libMHmu_gv_payloadPath[lv_team].lv_finalWaypointIndex[lv_pathIndex] - 1)], false);
    libNtve_gf_MakeUnitFacePoint(libMHmu_gv_payload[lv_team].lv_payload[lv_pathIndex], libMHmu_gv_payloadPath[lv_team].lv_path[lv_pathIndex][libMHmu_gv_payloadPath[lv_team].lv_finalWaypointIndex[lv_pathIndex]], 0.0);
    UnitIssueOrder(libMHmu_gv_payload[lv_team].lv_payload[lv_pathIndex], OrderTargetingPoint(AbilityCommand("move", 0), libMHmu_gv_payloadPath[lv_team].lv_path[lv_pathIndex][libMHmu_gv_payloadPath[lv_team].lv_finalWaypointIndex[lv_pathIndex]]), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_DebugDeliverEnemyPayload_Init () {
    libMHmu_gt_DebugDeliverEnemyPayload = TriggerCreate("libMHmu_gt_DebugDeliverEnemyPayload_Func");
    TriggerEnable(libMHmu_gt_DebugDeliverEnemyPayload, false);
    TriggerAddEventChatMessage(libMHmu_gt_DebugDeliverEnemyPayload, c_playerAny, "-deliverenemypayload", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Deliver Ally And Enemy Payload
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_DebugDeliverAllyAndEnemyPayload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_enemyTeam;
    unit lv_enemyPayloadUnit;
    int lv_team;
    int lv_pathIndex;

    // Automatic Variable Declarations
    // Variable Initialization
    lv_enemyTeam = libGame_gf_EnemyTeamNumberOfPlayer(EventPlayer());
    lv_enemyPayloadUnit = libMHmu_gv_payload[lv_enemyTeam].lv_payload[lv_pathIndex];
    lv_team = libGame_gf_TeamNumberOfPlayer(EventPlayer());
    lv_pathIndex = StringToInt(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex] != 0)) {
        PathClearWayPoints(libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex]);
        PathDestroy(libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex]);
        libMHmu_gv_payloadPath[lv_team].lv_pathDisplay_Minimap[lv_pathIndex] = 0;
    }

    libMHmu_gv_payloadPath[lv_team].lv_lastCheckpointReachedIndex[lv_pathIndex] = (libMHmu_gv_payloadPath[lv_team].lv_finalWaypointIndex[lv_pathIndex] - 1);
    libMHmu_gv_payloadPath[lv_team].lv_payloadCurrentDestinationPointIndex[lv_pathIndex] = libMHmu_gv_payloadPath[lv_team].lv_finalWaypointIndex[lv_pathIndex];
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HeroDiablo", c_unitCreateIgnorePlacement, PlayerGroupPlayer(libGame_gf_PlayersOnTeamHeroes(lv_team, false), 1), libMHmu_gv_payloadPath[lv_team].lv_path[lv_pathIndex][(libMHmu_gv_payloadPath[lv_team].lv_finalWaypointIndex[lv_pathIndex] - 1)]);
    UnitSetPosition(libMHmu_gv_payload[lv_team].lv_payload[lv_pathIndex], libMHmu_gv_payloadPath[lv_team].lv_path[lv_pathIndex][(libMHmu_gv_payloadPath[lv_team].lv_finalWaypointIndex[lv_pathIndex] - 1)], false);
    libNtve_gf_MakeUnitFacePoint(libMHmu_gv_payload[lv_team].lv_payload[lv_pathIndex], libMHmu_gv_payloadPath[lv_team].lv_path[lv_pathIndex][libMHmu_gv_payloadPath[lv_team].lv_finalWaypointIndex[lv_pathIndex]], 0.0);
    UnitIssueOrder(libMHmu_gv_payload[lv_team].lv_payload[lv_pathIndex], OrderTargetingPoint(AbilityCommand("move", 0), libMHmu_gv_payloadPath[lv_team].lv_path[lv_pathIndex][libMHmu_gv_payloadPath[lv_team].lv_finalWaypointIndex[lv_pathIndex]]), c_orderQueueReplace);
    if ((libMHmu_gv_payloadPath[lv_enemyTeam].lv_pathDisplay_Minimap[lv_pathIndex] != 0)) {
        PathClearWayPoints(libMHmu_gv_payloadPath[lv_enemyTeam].lv_pathDisplay_Minimap[lv_pathIndex]);
        PathDestroy(libMHmu_gv_payloadPath[lv_enemyTeam].lv_pathDisplay_Minimap[lv_pathIndex]);
        libMHmu_gv_payloadPath[lv_enemyTeam].lv_pathDisplay_Minimap[lv_pathIndex] = 0;
    }

    libMHmu_gv_payloadPath[lv_enemyTeam].lv_lastCheckpointReachedIndex[lv_pathIndex] = (libMHmu_gv_payloadPath[lv_enemyTeam].lv_finalWaypointIndex[lv_pathIndex] - 1);
    libMHmu_gv_payloadPath[lv_enemyTeam].lv_payloadCurrentDestinationPointIndex[lv_pathIndex] = libMHmu_gv_payloadPath[lv_enemyTeam].lv_finalWaypointIndex[lv_pathIndex];
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "HeroDiablo", c_unitCreateIgnorePlacement, PlayerGroupPlayer(libGame_gf_PlayersOnTeamHeroes(lv_enemyTeam, false), 1), libMHmu_gv_payloadPath[lv_enemyTeam].lv_path[lv_pathIndex][(libMHmu_gv_payloadPath[lv_enemyTeam].lv_finalWaypointIndex[lv_pathIndex] - 1)]);
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(EventPlayer(), libMHmu_gv_payloadPath[lv_enemyTeam].lv_path[lv_pathIndex][(libMHmu_gv_payloadPath[lv_enemyTeam].lv_finalWaypointIndex[lv_pathIndex] - 1)], 0.0, -1, 0.0, false);
    UnitSetPosition(libMHmu_gv_payload[lv_enemyTeam].lv_payload[lv_pathIndex], libMHmu_gv_payloadPath[lv_enemyTeam].lv_path[lv_pathIndex][(libMHmu_gv_payloadPath[lv_enemyTeam].lv_finalWaypointIndex[lv_pathIndex] - 1)], false);
    libNtve_gf_MakeUnitFacePoint(libMHmu_gv_payload[lv_enemyTeam].lv_payload[lv_pathIndex], libMHmu_gv_payloadPath[lv_enemyTeam].lv_path[lv_pathIndex][libMHmu_gv_payloadPath[lv_enemyTeam].lv_finalWaypointIndex[lv_pathIndex]], 0.0);
    UnitIssueOrder(libMHmu_gv_payload[lv_enemyTeam].lv_payload[lv_pathIndex], OrderTargetingPoint(AbilityCommand("move", 0), libMHmu_gv_payloadPath[lv_enemyTeam].lv_path[lv_pathIndex][libMHmu_gv_payloadPath[lv_enemyTeam].lv_finalWaypointIndex[lv_pathIndex]]), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_DebugDeliverAllyAndEnemyPayload_Init () {
    libMHmu_gt_DebugDeliverAllyAndEnemyPayload = TriggerCreate("libMHmu_gt_DebugDeliverAllyAndEnemyPayload_Func");
    TriggerEnable(libMHmu_gt_DebugDeliverAllyAndEnemyPayload, false);
    TriggerAddEventChatMessage(libMHmu_gt_DebugDeliverAllyAndEnemyPayload, c_playerAny, "-deliverbothpayloads", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Disable Event
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_DebugDisableEvent_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerPause(libMHmu_gv_payloadTimers[libGame_gv_teamOrderIndex_C].lv_spawnTimer[1], true);
    TimerPause(libMHmu_gv_payloadTimers[libGame_gv_teamOrderIndex_C].lv_spawnTimer[2], true);
    TimerPause(libMHmu_gv_payloadTimers[libGame_gv_teamOrderIndex_C].lv_showWarningTimer[1], true);
    TimerPause(libMHmu_gv_payloadTimers[libGame_gv_teamOrderIndex_C].lv_showWarningTimer[2], true);
    TimerPause(libMHmu_gv_payloadTimers[libGame_gv_teamOrderIndex_C].lv_audioTimer[1], true);
    TimerPause(libMHmu_gv_payloadTimers[libGame_gv_teamOrderIndex_C].lv_audioTimer[2], true);
    TimerPause(libMHmu_gv_payloadTimers[libGame_gv_teamChaosIndex_C].lv_spawnTimer[1], true);
    TimerPause(libMHmu_gv_payloadTimers[libGame_gv_teamChaosIndex_C].lv_spawnTimer[2], true);
    TimerPause(libMHmu_gv_payloadTimers[libGame_gv_teamChaosIndex_C].lv_showWarningTimer[1], true);
    TimerPause(libMHmu_gv_payloadTimers[libGame_gv_teamChaosIndex_C].lv_showWarningTimer[2], true);
    TimerPause(libMHmu_gv_payloadTimers[libGame_gv_teamChaosIndex_C].lv_audioTimer[1], true);
    TimerPause(libMHmu_gv_payloadTimers[libGame_gv_teamChaosIndex_C].lv_audioTimer[2], true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_DebugDisableEvent_Init () {
    libMHmu_gt_DebugDisableEvent = TriggerCreate("libMHmu_gt_DebugDisableEvent_Func");
    TriggerEnable(libMHmu_gt_DebugDisableEvent, false);
    TriggerAddEventChatMessage(libMHmu_gt_DebugDisableEvent, c_playerAny, "-disableevent", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Show Living Payloads
//--------------------------------------------------------------------------------------------------
bool libMHmu_gt_DebugShowLivingPayloads_Func (bool testConds, bool runActions) {
    // Automatic Variable Declarations
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libMHmu_gf_ShowRelevantPayloadTimers();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMHmu_gt_DebugShowLivingPayloads_Init () {
    libMHmu_gt_DebugShowLivingPayloads = TriggerCreate("libMHmu_gt_DebugShowLivingPayloads_Func");
    TriggerAddEventChatMessage(libMHmu_gt_DebugShowLivingPayloads, c_playerAny, "-livingpayloads", true);
}

void libMHmu_InitTriggers () {
    libMHmu_gt_MapMechanicInitialized_Init();
    libMHmu_gt_InitializeVariables_Init();
    libMHmu_gt_OpenTheGatesTimerExpires_Init();
    libMHmu_gt_OrderPayloadWarningTimerExpires_Init();
    libMHmu_gt_OrderPayloadAudioTimerExpires_Init();
    libMHmu_gt_ChaosPayloadWarningTimerExpires_Init();
    libMHmu_gt_ChaosPayloadAudioTimerExpires_Init();
    libMHmu_gt_BossCampCaptured_Init();
    libMHmu_gt_DebugBossCampCapturedAttackCore_Init();
    libMHmu_gt_PayloadGainsReverseBehavior_Init();
    libMHmu_gt_PayloadLosesReverseBehavior_Init();
    libMHmu_gt_AttackCoreMissileCreated_Init();
    libMHmu_gt_MapMechanicUIInitialize_Init();
    libMHmu_gt_PayloadGainsBlockedBehavior_Init();
    libMHmu_gt_PayloadLosesBlockedBehavior_Init();
    libMHmu_gt_PayloadGainsContestedBehavior_Init();
    libMHmu_gt_PayloadLosesContestedBehavior_Init();
    libMHmu_gt_SetUpMinionData_Init();
    libMHmu_gt_MinionScalingData_Init();
    libMHmu_gt_FortOrKeepDies_Init();
    libMHmu_gt_PayloadTargetOn_Init();
    libMHmu_gt_PayloadTargetOff_Init();
    libMHmu_gt_PayloadTurretBehaviorIncrement_Init();
    libMHmu_gt_PayloadTurretBehaviorDecrement_Init();
    libMHmu_gt_EOMInitializePusherBehaviors_Init();
    libMHmu_gt_EOMPusherAdded_Init();
    libMHmu_gt_EOMPusherRemoved_Init();
    libMHmu_gt_EOMReportPushingScore_Init();
    libMHmu_gt_DebugSetWarningTime_Init();
    libMHmu_gt_DebugDeliverAllyPayload_Init();
    libMHmu_gt_DebugDeliverEnemyPayload_Init();
    libMHmu_gt_DebugDeliverAllyAndEnemyPayload_Init();
    libMHmu_gt_DebugDisableEvent_Init();
    libMHmu_gt_DebugShowLivingPayloads_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libMHmu_InitLib_completed = false;

void libMHmu_InitLib () {
    if (libMHmu_InitLib_completed) {
        return;
    }

    libMHmu_InitLib_completed = true;

    libMHmu_InitLibraries();
    libMHmu_InitVariables();
    libMHmu_InitTriggers();
}

