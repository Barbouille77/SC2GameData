include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"
include "TriggerLibs/SoundLib"

include "LibMuHS_h"

//--------------------------------------------------------------------------------------------------
// Library: In Game Hero Selection
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libMuHS_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libAIAI_InitVariables();
    libUIUI_InitVariables();
    libSond_InitVariables();
}

// Variable Initialization
bool libMuHS_InitVariables_completed = false;

void libMuHS_InitVariables () {
    int init_i;
    int init_i1;
    int init_j1;
    int init_k1;

    if (libMuHS_InitVariables_completed) {
        return;
    }

    libMuHS_InitVariables_completed = true;

    libMuHS_gv_aRM_TeamComp_CompTypes = PlayerGroupEmpty();
    libMuHS_gv_aRM_TeamComp_MaxNumberOfSupports_C = 2;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libMuHS_gv_aRM_TeamComp_AvailableClasses[init_i] = c_heroRoleSupport;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayersOnATeam; init_i += 1) {
        libMuHS_gv_aRM_TeamComp_Classes[init_i] = c_heroRoleWarrior;
    }
    libMuHS_gv_iGHS_TeamComp_MaxNumberOfWarriors = 2;
    libMuHS_gv_iGHS_TeamComp_MaxNumberOfSupports = 2;
    libMuHS_gv_aRM_HeroPickPanelUI.lv_dialog = c_invalidDialogId;
    libMuHS_gv_aRM_HeroPickPanelUI.lv_mainPanel = c_invalidDialogControlId;
    libMuHS_gv_aRM_HeroPickPanelUI.lv_countdownLabel = c_invalidDialogControlId;
    libMuHS_gv_aRM_HeroPickPanelUI.lv_finalCountdownFrame = c_invalidDialogControlId;
    libMuHS_gv_aRM_HeroPickPanelUI.lv_roundLabel = c_invalidDialogControlId;
    libMuHS_gv_aRM_HeroPickPanelUI.lv_arenaModeTitlePanel = c_invalidDialogControlId;
    libMuHS_gv_aRM_HeroPickPanelUI.lv_nonArenaModeTitlePanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libMuHS_gv_aRM_HeroPickPanelUI.lv_teamRoundIndicatorFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxTeams; init_j1 += 1) {
            for (init_k1 = 0; init_k1 <= 2; init_k1 += 1) {
                libMuHS_gv_aRM_HeroPickPanelUI.lv_roundWinIndicatorImages[init_i1][init_j1][init_k1] = c_invalidDialogControlId;
            }
        }
    }
    libMuHS_gv_aRM_HeroPickPanelUI.lv_pickHeroPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroPanelPerPlayer[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libMuHS_gv_aRM_HeroPickPanelUI.lv_playerNameLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libMuHS_gv_aRM_HeroPickPanelUI.lv_playerClassLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libMuHS_gv_aRM_HeroPickPanelUI.lv_playerReadyButton[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libMuHS_gv_aRM_HeroPickPanelUI.lv_playerReadyLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libMuHS_gv_aRM_HeroPickPanelUI.lv_heroContainerFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libMuHS_gv_aRM_HeroPickPanelUI.lv_heroCutsceneFrame[init_i1] = c_invalidDialogControlId;
    }
    libMuHS_gv_aRM_HeroPickPanelUI.lv_abilitiesInfoButton = c_invalidDialogControlId;
    libMuHS_gv_aRM_HeroPickPanelUI.lv_talentsInfoButton = c_invalidDialogControlId;
    libMuHS_gv_aRM_HeroPickPanelUI.lv_mapMechanicPanel = c_invalidDialogControlId;
    libMuHS_gv_aRM_HeroPickPanelUI.lv_mapMechanicImage = c_invalidDialogControlId;
    libMuHS_gv_aRM_HeroPickPanelUI.lv_mapMechanicInfo = c_invalidDialogControlId;
    libMuHS_gv_aRM_HeroPickPanelUI.lv_debugCrazyBtn = c_invalidDialogControlId;
    libMuHS_gv_aRM_HeroPickPanelUI.lv_debugRerollBtn = c_invalidDialogControlId;
    libMuHS_gv_iGHS_RoundNumber = 1;
}

// Functions
bool libMuHS_gf_ARM_HeroIsGoodForArenaMode (int lp_heroIndex, bool lp_crazyMode) {
    // Implementation
    if ((lp_crazyMode == true)) {
        if ((CatalogFieldValueGet(c_gameCatalogHero, libCore_gf_GetHeroFromIndex(lp_heroIndex), "Flags[" + IntToString(c_heroFlagGoodForModeB) + "]", c_playerAny) == "1")) {
            return true;
        }

    }
    else {
        if ((CatalogFieldValueGet(c_gameCatalogHero, libCore_gf_GetHeroFromIndex(lp_heroIndex), "Flags[" + IntToString(c_heroFlagGoodForModeA) + "]", c_playerAny) == "1")) {
            return true;
        }

    }
    return false;
}

bool libMuHS_gf_ARM_TeamCompClassAvailable (int lp_role, int lp_teamCompCount) {
    int autoDDBE7C67_ae;
    int autoDDBE7C67_ai;
    int auto2CFD7161_val;

    // Variable Declarations
    int lv_itSlot;
    int lv_count;

    // Variable Initialization

    // Implementation
    autoDDBE7C67_ae = lp_teamCompCount;
    autoDDBE7C67_ai = 1;
    lv_itSlot = 1;
    for ( ; ( (autoDDBE7C67_ai >= 0 && lv_itSlot <= autoDDBE7C67_ae) || (autoDDBE7C67_ai <= 0 && lv_itSlot >= autoDDBE7C67_ae) ) ; lv_itSlot += autoDDBE7C67_ai ) {
        if ((libMuHS_gv_aRM_TeamComp_Classes[lv_itSlot] == lp_role)) {
            lv_count += 1;
        }

    }
    auto2CFD7161_val = lp_role;
    if (auto2CFD7161_val == c_heroRoleWarrior) {
        return (lv_count < 2);
    }
    else if (auto2CFD7161_val == c_heroRoleSupport) {
        return (lv_count < 2);
    }
    else {
    }
    return true;
}

int libMuHS_gf_ARM_TeamCompPlayerClass (int lp_player) {
    // Implementation
    return libMuHS_gv_aRM_TeamComp_Classes[libMuHS_gv_aRM_TeamComp_PlayerSlots[lp_player]];
}

fixed libMuHS_gf_ARM_TeamComp_ClassWeight (int lp_class) {
    int auto455896FD_val;

    // Implementation
    auto455896FD_val = lp_class;
    if (auto455896FD_val == c_heroRoleDamage) {
        return 0.4;
    }
    else if (auto455896FD_val == c_heroRoleSpecialist) {
        return 0.2;
    }
    else if (auto455896FD_val == c_heroRoleSupport) {
        return 0.15;
    }
    else if (auto455896FD_val == c_heroRoleWarrior) {
        return 0.25;
    }
    else {
    }
    return 0.0;
}

int libMuHS_gf_ARM_TeamComp_RandomAvailableClass () {
    int auto842E989C_ae;
    int auto842E989C_ai;
    int autoDEEF895A_ae;
    int autoDEEF895A_ai;

    // Variable Declarations
    int lv_itIndex;
    fixed lv_total;
    fixed lv_random;

    // Variable Initialization

    // Implementation
    lv_total = 0.0;
    auto842E989C_ae = libMuHS_gv_aRM_TeamComp_AvailableClassesCount;
    auto842E989C_ai = 1;
    lv_itIndex = 1;
    for ( ; ( (auto842E989C_ai >= 0 && lv_itIndex <= auto842E989C_ae) || (auto842E989C_ai <= 0 && lv_itIndex >= auto842E989C_ae) ) ; lv_itIndex += auto842E989C_ai ) {
        lv_total += libMuHS_gf_ARM_TeamComp_ClassWeight(libMuHS_gv_aRM_TeamComp_AvailableClasses[lv_itIndex]);
    }
    lv_random = RandomFixed(0.0, lv_total);
    lv_total = 0.0;
    autoDEEF895A_ae = libMuHS_gv_aRM_TeamComp_AvailableClassesCount;
    autoDEEF895A_ai = 1;
    lv_itIndex = 1;
    for ( ; ( (autoDEEF895A_ai >= 0 && lv_itIndex <= autoDEEF895A_ae) || (autoDEEF895A_ai <= 0 && lv_itIndex >= autoDEEF895A_ae) ) ; lv_itIndex += autoDEEF895A_ai ) {
        lv_total += libMuHS_gf_ARM_TeamComp_ClassWeight(libMuHS_gv_aRM_TeamComp_AvailableClasses[lv_itIndex]);
        if ((lv_random <= lv_total)) {
            return lv_itIndex;
        }

    }
    return c_heroRoleDamage;
}

int libMuHS_gf_IGHS_SetClassAsAssassinOrSpecialist () {
    // Variable Declarations
    int lv_numberOfAssassins;
    int lv_numberOfSpecialists;
    int lv_totalHeroCount;
    int lv_randomInt;

    // Variable Initialization

    // Implementation
    lv_numberOfAssassins = DataTableGetInt(true, ("Heroes_HeroClass_" + IntToString(CatalogFieldValueGetAsInt(c_gameCatalogHero, "Kerrigan", "Role", c_playerAny)) + "_HeroCount"));
    lv_numberOfSpecialists = DataTableGetInt(true, ("Heroes_HeroClass_" + IntToString(CatalogFieldValueGetAsInt(c_gameCatalogHero, "Abathur", "Role", c_playerAny)) + "_HeroCount"));
    lv_totalHeroCount = (lv_numberOfAssassins + lv_numberOfSpecialists);
    lv_randomInt = RandomInt(1, lv_totalHeroCount);
    if ((lv_randomInt <= lv_numberOfAssassins)) {
        return c_heroRoleDamage;
    }
    else {
        return c_heroRoleSpecialist;
    }
}

void libMuHS_gf_ARM_TeamCompBuilder (int lp_numberOfWarriors, int lp_numberOfSupports, playergroup lp_playerSlot) {
    // Variable Declarations
    int lv_numberOfWarriors;
    int lv_numberOfSupports;
    int lv_itPlayer;

    // Variable Initialization
    lv_numberOfWarriors = lp_numberOfWarriors;
    lv_numberOfSupports = lp_numberOfSupports;

    // Implementation
    while ((lv_numberOfWarriors > 0) && (PlayerGroupCount(lp_playerSlot) > 0)) {
        lv_itPlayer = PlayerGroupPlayer(lp_playerSlot, RandomInt(1, PlayerGroupCount(lp_playerSlot)));
        PlayerGroupRemove(lp_playerSlot, lv_itPlayer);
        libMuHS_gv_aRM_TeamComp_Classes[lv_itPlayer] = c_heroRoleWarrior;
        lv_numberOfWarriors -= 1;
    }
    while ((lp_numberOfSupports > 0) && (PlayerGroupCount(lp_playerSlot) > 0)) {
        lv_itPlayer = PlayerGroupPlayer(lp_playerSlot, RandomInt(1, PlayerGroupCount(lp_playerSlot)));
        PlayerGroupRemove(lp_playerSlot, lv_itPlayer);
        libMuHS_gv_aRM_TeamComp_Classes[lv_itPlayer] = c_heroRoleSupport;
        lp_numberOfSupports -= 1;
    }
    if ((PlayerGroupCount(lp_playerSlot) > 0)) {
        lv_itPlayer = PlayerGroupPlayer(lp_playerSlot, RandomInt(1, PlayerGroupCount(lp_playerSlot)));
        PlayerGroupRemove(lp_playerSlot, lv_itPlayer);
        libMuHS_gv_aRM_TeamComp_Classes[lv_itPlayer] = c_heroRoleDamage;
    }

    while ((PlayerGroupCount(lp_playerSlot) > 0)) {
        lv_itPlayer = PlayerGroupPlayer(lp_playerSlot, RandomInt(1, PlayerGroupCount(lp_playerSlot)));
        PlayerGroupRemove(lp_playerSlot, lv_itPlayer);
        libMuHS_gv_aRM_TeamComp_Classes[lv_itPlayer] = libMuHS_gf_IGHS_SetClassAsAssassinOrSpecialist();
    }
}

void libMuHS_gf_ARM_CalculatePlayerSlots () {
    int auto5996F602_ae;
    int auto5996F602_ai;
    int auto5AF8D0F1_ae;
    int auto5AF8D0F1_ai;
    playergroup autoFC650C25_g;
    int autoFC650C25_p;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;
    int lv_slot;

    // Variable Initialization

    // Implementation
    auto5996F602_ae = libCore_gv_bALMaxPlayers;
    auto5996F602_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto5996F602_ai >= 0 && lv_itPlayer <= auto5996F602_ae) || (auto5996F602_ai <= 0 && lv_itPlayer >= auto5996F602_ae) ) ; lv_itPlayer += auto5996F602_ai ) {
        libMuHS_gv_aRM_TeamComp_PlayerSlots[lv_itPlayer] = 0;
    }
    auto5AF8D0F1_ae = libCore_gv_bALMaxTeams;
    auto5AF8D0F1_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (auto5AF8D0F1_ai >= 0 && lv_itTeam <= auto5AF8D0F1_ae) || (auto5AF8D0F1_ai <= 0 && lv_itTeam >= auto5AF8D0F1_ae) ) ; lv_itTeam += auto5AF8D0F1_ai ) {
        lv_slot = 0;
        autoFC650C25_g = libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false); 
        autoFC650C25_p = 1;
        for ( ; autoFC650C25_p <= PlayerGroupCount(autoFC650C25_g) ; autoFC650C25_p += (lv_itPlayer == PlayerGroupPlayer(autoFC650C25_g, autoFC650C25_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(autoFC650C25_g, autoFC650C25_p);
            lv_slot += 1;
            libMuHS_gv_aRM_TeamComp_PlayerSlots[lv_itPlayer] = lv_slot;
        }
    }
}

void libMuHS_gf_ARM_RandomTeamComp () {
    int auto3757966B_ae;
    int auto3757966B_ai;
    int auto11B74815_val;

    // Variable Declarations
    fixed lv_randomPercent;
    fixed lv_totalPercent;
    int lv_itPlayer;
    int lv_itAvailableClass;
    int lv_classesPickedIndex;
    bool lv_assassinPicked;
    int lv_pickedCategory;
    playergroup lv_playerSlot;
    int lv_numberOfWarriors;
    int lv_numberOfSupports;

    // Variable Initialization
    lv_playerSlot = PlayerGroupEmpty();

    // Implementation
    PlayerGroupAdd(libMuHS_gv_aRM_TeamComp_CompTypes, 1);
    PlayerGroupAdd(libMuHS_gv_aRM_TeamComp_CompTypes, 2);
    PlayerGroupAdd(libMuHS_gv_aRM_TeamComp_CompTypes, 3);
    PlayerGroupAdd(libMuHS_gv_aRM_TeamComp_CompTypes, 4);
    lv_randomPercent = libNtve_gf_RandomPercent();
    lv_totalPercent += libMuHS_gv_aRM_TeamComp_CrazyChance_C;
    libMuHS_gv_aRM_TeamComp_FunComp = false;
    if ((lv_randomPercent <= lv_totalPercent) && (libMuHS_gv_aRM_CrazyModeAlreadyPlayed == false) && (libMuHS_gv_iGHS_NoCrazyCompositions == false)) {
        libMuHS_gv_aRM_TeamComp_FunComp = true;
        libMuHS_gv_aRM_CrazyModeAlreadyPlayed = true;
        return ;
    }

    auto3757966B_ae = libCore_gv_bALMaxPlayersOnATeam;
    auto3757966B_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto3757966B_ai >= 0 && lv_itPlayer <= auto3757966B_ae) || (auto3757966B_ai <= 0 && lv_itPlayer >= auto3757966B_ae) ) ; lv_itPlayer += auto3757966B_ai ) {
        PlayerGroupAdd(lv_playerSlot, lv_itPlayer);
    }
    if ((libMuHS_gv_iGHS_RequiresSupport == true)) {
        PlayerGroupRemove(libMuHS_gv_aRM_TeamComp_CompTypes, 2);
        PlayerGroupRemove(libMuHS_gv_aRM_TeamComp_CompTypes, 4);
    }

    lv_pickedCategory = PlayerGroupPlayer(libMuHS_gv_aRM_TeamComp_CompTypes, RandomInt(1, PlayerGroupCount(libMuHS_gv_aRM_TeamComp_CompTypes)));
    PlayerGroupRemove(libMuHS_gv_aRM_TeamComp_CompTypes, lv_pickedCategory);
    auto11B74815_val = lv_pickedCategory;
    if (auto11B74815_val == 1) {
        lv_numberOfWarriors = RandomInt(1, libMuHS_gv_aRM_TeamComp_MaxNumberOfWarriors_C);
        lv_numberOfSupports = RandomInt(1, libMuHS_gv_aRM_TeamComp_MaxNumberOfSupports_C);
        libMuHS_gf_ARM_TeamCompBuilder(lv_numberOfWarriors, lv_numberOfSupports, lv_playerSlot);
    }
    else if (auto11B74815_val == 2) {
        libMuHS_gf_ARM_TeamCompBuilder(lv_numberOfWarriors, lv_numberOfSupports, lv_playerSlot);
    }
    else if (auto11B74815_val == 3) {
        lv_numberOfSupports = RandomInt(1, libMuHS_gv_aRM_TeamComp_MaxNumberOfSupports_C);
        libMuHS_gf_ARM_TeamCompBuilder(lv_numberOfWarriors, lv_numberOfSupports, lv_playerSlot);
    }
    else if (auto11B74815_val == 4) {
        lv_numberOfWarriors = RandomInt(1, libMuHS_gv_aRM_TeamComp_MaxNumberOfWarriors_C);
        libMuHS_gf_ARM_TeamCompBuilder(lv_numberOfWarriors, lv_numberOfSupports, lv_playerSlot);
    }
    else {
    }
}

void libMuHS_gf_ARM_RandomHeroesToPick () {
    int auto5BEDD5F4_ae;
    int auto5BEDD5F4_ai;
    int auto45FF44F0_ae;
    int auto45FF44F0_ai;
    int auto89613910_ae;
    int auto89613910_ai;
    int auto39E52BE7_ae;
    int auto39E52BE7_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itHeroIndex;
    int lv_numUnused;
    int lv_heroPicked;
    int lv_itPick;

    // Variable Initialization

    // Implementation
    if ((libMuHS_gv_aRM_TeamComp_FunComp == true) && (libMuHS_gv_iGHS_UseSpecificHeroPool == false)) {
        auto5BEDD5F4_ae = libCore_gv_dataHeroesNumberOfHeroes;
        auto5BEDD5F4_ai = 1;
        lv_itHeroIndex = 1;
        for ( ; ( (auto5BEDD5F4_ai >= 0 && lv_itHeroIndex <= auto5BEDD5F4_ae) || (auto5BEDD5F4_ai <= 0 && lv_itHeroIndex >= auto5BEDD5F4_ae) ) ; lv_itHeroIndex += auto5BEDD5F4_ai ) {
            if (((CatalogFieldValueGet(c_gameCatalogHero, libCore_gf_GetHeroFromIndex(lv_itHeroIndex), "Unit", c_playerAny)) != null) && (libMuHS_gf_ARM_HeroIsGoodForArenaMode(lv_itHeroIndex, true) == true)) {
                lv_numUnused += 1;
                DataTableSetInt(false, ("ARM_Rand_" + IntToString(lv_numUnused)), lv_itHeroIndex);
            }

        }
        lv_heroPicked = RandomInt(1, lv_numUnused);
        auto89613910_ae = libCore_gv_bALMaxPlayers;
        auto89613910_ai = 1;
        lv_itPlayer = 1;
        for ( ; ( (auto89613910_ai >= 0 && lv_itPlayer <= auto89613910_ae) || (auto89613910_ai <= 0 && lv_itPlayer >= auto89613910_ae) ) ; lv_itPlayer += auto89613910_ai ) {
            auto39E52BE7_ae = libMuHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
            auto39E52BE7_ai = 1;
            lv_itPick = 1;
            for ( ; ( (auto39E52BE7_ai >= 0 && lv_itPick <= auto39E52BE7_ae) || (auto39E52BE7_ai <= 0 && lv_itPick >= auto39E52BE7_ae) ) ; lv_itPick += auto39E52BE7_ai ) {
                libMuHS_gv_aRM_HeroesForPick[lv_itPlayer][lv_itPick] = DataTableGetInt(false, ("ARM_Rand_" + IntToString(lv_heroPicked)));
            }
        }
    }
    else {
        auto45FF44F0_ae = libCore_gv_bALMaxPlayers;
        auto45FF44F0_ai = 1;
        lv_itPlayer = 1;
        for ( ; ( (auto45FF44F0_ai >= 0 && lv_itPlayer <= auto45FF44F0_ae) || (auto45FF44F0_ai <= 0 && lv_itPlayer >= auto45FF44F0_ae) ) ; lv_itPlayer += auto45FF44F0_ai ) {
            libMuHS_gf_ARM_RandomHeroesToPickPerPlayer(lv_itPlayer);
        }
    }
}

void libMuHS_gf_ARM_RandomHeroesToPickPerPlayer (int lp_player) {
    int autoF62C46DC_ae;
    int autoF62C46DC_ai;
    int autoEF0F18DB_ae;
    int autoEF0F18DB_ai;

    // Variable Declarations
    int lv_class;
    int lv_classInt;
    int lv_itHeroIndexInClass;
    int lv_itHeroIndex;
    int lv_heroesAvailableCount;
    int lv_itPick;
    int lv_itPickHeroAvailIndex;

    // Variable Initialization
    lv_class = c_heroRoleWarrior;

    // Implementation
    lv_class = libMuHS_gf_ARM_TeamCompPlayerClass(lp_player);
    lv_classInt = (lv_class);
    autoF62C46DC_ae = DataTableGetInt(true, ("Heroes_HeroClass_" + IntToString(lv_classInt) + "_HeroCount"));
    autoF62C46DC_ai = 1;
    lv_itHeroIndexInClass = 1;
    for ( ; ( (autoF62C46DC_ai >= 0 && lv_itHeroIndexInClass <= autoF62C46DC_ae) || (autoF62C46DC_ai <= 0 && lv_itHeroIndexInClass >= autoF62C46DC_ae) ) ; lv_itHeroIndexInClass += autoF62C46DC_ai ) {
        lv_itHeroIndex = DataTableGetInt(true, ("Heroes_HeroClass_" + IntToString(lv_classInt) + "_Index_" + IntToString(lv_itHeroIndexInClass) + "_Index"));
        if (((CatalogFieldValueGet(c_gameCatalogHero, libCore_gf_GetHeroFromIndex(lv_itHeroIndex), "Unit", c_playerAny)) != null) && ((libMuHS_gf_ARM_HeroIsGoodForArenaMode(lv_itHeroIndex, false) == true) || (libMuHS_gv_iGHS_UseSpecificHeroPool == true)) && ((libMuHS_gv_iGHS_UseSpecificHeroPool == false) || (DataTableGetBool(true, ("IGHS_HeroIndexValid_" + IntToString(lv_itHeroIndex))) == true))) {
            lv_heroesAvailableCount += 1;
            DataTableSetInt(false, ("ARM_RandomHeroesOfClass_" + IntToString(lv_heroesAvailableCount)), lv_itHeroIndex);
        }

    }
    autoEF0F18DB_ae = libMuHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
    autoEF0F18DB_ai = 1;
    lv_itPick = 1;
    for ( ; ( (autoEF0F18DB_ai >= 0 && lv_itPick <= autoEF0F18DB_ae) || (autoEF0F18DB_ai <= 0 && lv_itPick >= autoEF0F18DB_ae) ) ; lv_itPick += autoEF0F18DB_ai ) {
        if ((lv_heroesAvailableCount < 0)) {
            return ;
        }

        while (true) {
            lv_itPickHeroAvailIndex = RandomInt(1, lv_heroesAvailableCount);
            libMuHS_gv_aRM_HeroesForPick[lp_player][lv_itPick] = DataTableGetInt(false, ("ARM_RandomHeroesOfClass_" + IntToString(lv_itPickHeroAvailIndex)));
            if ((libMuHS_gf_IGHS_GetCountofHeroPicksforTeam(libCore_gf_GetIndexFromHero("LostVikings"), libGame_gf_TeamNumberOfPlayer(lp_player)) <= 1)) {
                break;
            }

        }
        DataTableSetInt(false, ("ARM_RandomHeroesOfClass_" + IntToString(lv_itPickHeroAvailIndex)), DataTableGetInt(false, ("ARM_RandomHeroesOfClass_" + IntToString(lv_heroesAvailableCount))));
        DataTableSetInt(false, ("ARM_RandomHeroesOfClass_" + IntToString(lv_heroesAvailableCount)), libMuHS_gv_aRM_HeroesForPick[lp_player][lv_itPick]);
        lv_heroesAvailableCount -= 1;
    }
}

int libMuHS_gf_IGHS_GetCountofHeroPicksforTeam (int lp_heroIndex, int lp_teamIndex) {
    int autoDD14EE3F_ae;
    int autoDD14EE3F_ai;
    int auto6F9A47E0_ae;
    int auto6F9A47E0_ai;

    // Variable Declarations
    int lv_playerIndex;
    int lv_circleIndex;
    int lv_countOfHero;

    // Variable Initialization

    // Implementation
    autoDD14EE3F_ae = 5;
    autoDD14EE3F_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (autoDD14EE3F_ai >= 0 && lv_playerIndex <= autoDD14EE3F_ae) || (autoDD14EE3F_ai <= 0 && lv_playerIndex >= autoDD14EE3F_ae) ) ; lv_playerIndex += autoDD14EE3F_ai ) {
        auto6F9A47E0_ae = libMuHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
        auto6F9A47E0_ai = 1;
        lv_circleIndex = 1;
        for ( ; ( (auto6F9A47E0_ai >= 0 && lv_circleIndex <= auto6F9A47E0_ae) || (auto6F9A47E0_ai <= 0 && lv_circleIndex >= auto6F9A47E0_ae) ) ; lv_circleIndex += auto6F9A47E0_ai ) {
            if ((libMuHS_gv_aRM_HeroesForPick[lv_playerIndex][lv_circleIndex] == lp_heroIndex)) {
                lv_countOfHero += 1;
            }

        }
    }
    return lv_countOfHero;
}

int libMuHS_gf_IGHS_GetClassofHerofromData (string lp_heroLink) {
    string autoAC981AF1_val;

    // Variable Declarations
    string lv_classFromData;

    // Variable Initialization
    lv_classFromData = CatalogFieldValueGet(c_gameCatalogHero, lp_heroLink, "Role", c_playerAny);

    // Implementation
    autoAC981AF1_val = lv_classFromData;
    if (autoAC981AF1_val == "Warrior") {
        return c_heroRoleWarrior;
    }
    else if (autoAC981AF1_val == "Assassin") {
        return c_heroRoleDamage;
    }
    else if (autoAC981AF1_val == "Support") {
        return c_heroRoleSupport;
    }
    else if (autoAC981AF1_val == "Specialist") {
        return c_heroRoleSpecialist;
    }
    else if (autoAC981AF1_val == "Multiclass") {
        return c_heroRoleWarrior;
    }
    else {
        return c_heroRoleDamage;
    }
}

bool libMuHS_gf_IGHS_IsCuratedHeroinRemovedList (string lp_heroLink, int lp_team) {
    int auto48BABFD1_ae;
    int auto48BABFD1_ai;

    // Variable Declarations
    int lv_removedHeroIndex;

    // Variable Initialization

    // Implementation
    auto48BABFD1_ae = libMuHS_gv_iGHS_RemovedCuratedHeroCount;
    auto48BABFD1_ai = 1;
    lv_removedHeroIndex = 1;
    for ( ; ( (auto48BABFD1_ai >= 0 && lv_removedHeroIndex <= auto48BABFD1_ae) || (auto48BABFD1_ai <= 0 && lv_removedHeroIndex >= auto48BABFD1_ae) ) ; lv_removedHeroIndex += auto48BABFD1_ai ) {
        if ((libMuHS_gv_iGHS_RemovedCuratedHeroes[lv_removedHeroIndex].lv_heroLink == lp_heroLink) && ((libMuHS_gv_iGHS_RemovedCuratedHeroes[lv_removedHeroIndex].lv_team == lp_team) || (libMuHS_gv_iGHS_RemovedCuratedHeroes[lv_removedHeroIndex].lv_team == 0))) {
            return true;
        }

    }
    return false;
}

void libMuHS_gf_IGHS_AddCuratedHero (string lp_hero, int lp_team) {
    // Implementation
    if ((libMuHS_gv_iGHS_CuratedHeroCount == libMuHS_gv_iGHS_CuratedHeroCountMax)) {
        TextExpressionSetToken("Param/Expression/lib_MuHS_6CB3A0B3", "A", StringToText(CatalogFieldValueGet(c_gameCatalogHero, lp_hero, "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_MuHS_6CB3A0B3", "B", IntToText(libMuHS_gv_iGHS_CuratedHeroCountMax));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_MuHS_6CB3A0B3"), true);
        return ;
    }

    libMuHS_gv_iGHS_CuratedHeroCount += 1;
    libMuHS_gv_iGHS_CuratedHeroes[libMuHS_gv_iGHS_CuratedHeroCount].lv_heroLink = lp_hero;
    libMuHS_gv_iGHS_CuratedHeroes[libMuHS_gv_iGHS_CuratedHeroCount].lv_team = lp_team;
}

void libMuHS_gf_IGHS_CurateAllFlaggedHeroes () {
    int auto8F319484_ae;
    int auto8F319484_ai;

    // Variable Declarations
    int lv_catalogIndex;

    // Variable Initialization

    // Implementation
    auto8F319484_ae = CatalogEntryCount(c_gameCatalogHero);
    auto8F319484_ai = 1;
    lv_catalogIndex = 1;
    for ( ; ( (auto8F319484_ai >= 0 && lv_catalogIndex <= auto8F319484_ae) || (auto8F319484_ai <= 0 && lv_catalogIndex >= auto8F319484_ae) ) ; lv_catalogIndex += auto8F319484_ai ) {
        if ((CatalogFieldValueGet(c_gameCatalogHero, libCore_gf_GetHeroFromIndex(lv_catalogIndex), "Flags[" + IntToString(c_heroFlagGoodForModeA) + "]", c_playerAny) == "1")) {
            libMuHS_gf_IGHS_AddCuratedHero(libCore_gf_GetHeroFromIndex(lv_catalogIndex), 0);
        }

    }
}

void libMuHS_gf_IGHS_RemoveCuratedHero (string lp_hero, int lp_team) {
    // Variable Declarations
    int lv_curatedHeroIndex;

    // Variable Initialization

    // Implementation
    libMuHS_gv_iGHS_RemovedCuratedHeroCount += 1;
    libMuHS_gv_iGHS_RemovedCuratedHeroes[libMuHS_gv_iGHS_RemovedCuratedHeroCount].lv_heroLink = lp_hero;
    libMuHS_gv_iGHS_RemovedCuratedHeroes[libMuHS_gv_iGHS_RemovedCuratedHeroCount].lv_team = lp_team;
}

void libMuHS_gf_IGHS_SetPickOptionsforPlayerUsingCuratedList (int lp_playerIndex) {
    int auto18B74864_ae;
    int auto18B74864_ai;

    // Variable Declarations
    int lv_classOfPlayer;
    int lv_curatedHeroIndex;
    string[libMuHS_gv_iGHS_CuratedHeroCountMax + 1] lv_possibleHeroes;
    int lv_possibleHeroCount;
    shuffler lv_possibleHeroShuffler;
    bool lv_curatedHeroHasBeenAssignedPreviously;

    // Variable Initialization
    lv_classOfPlayer = libMuHS_gf_ARM_TeamCompPlayerClass(lp_playerIndex);
    lv_possibleHeroShuffler = ShufflerCreate(0);

    // Implementation
    auto18B74864_ae = libMuHS_gv_iGHS_CuratedHeroCount;
    auto18B74864_ai = 1;
    lv_curatedHeroIndex = 1;
    for ( ; ( (auto18B74864_ai >= 0 && lv_curatedHeroIndex <= auto18B74864_ae) || (auto18B74864_ai <= 0 && lv_curatedHeroIndex >= auto18B74864_ae) ) ; lv_curatedHeroIndex += auto18B74864_ai ) {
        lv_curatedHeroHasBeenAssignedPreviously = false;
        PlayerGroupLoopBegin(libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_playerIndex), false));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((PlayerGroupLoopCurrent() != lp_playerIndex) && ((libMuHS_gv_aRM_HeroesForPick[PlayerGroupLoopCurrent()][1] == lv_curatedHeroIndex) || (libMuHS_gv_aRM_HeroesForPick[PlayerGroupLoopCurrent()][2] == lv_curatedHeroIndex) || (libMuHS_gv_aRM_HeroesForPick[PlayerGroupLoopCurrent()][3] == lv_curatedHeroIndex))) {
                lv_curatedHeroHasBeenAssignedPreviously = true;
            }

        }
        PlayerGroupLoopEnd();
        if ((libMuHS_gf_IGHS_IsCuratedHeroinRemovedList(libMuHS_gv_iGHS_CuratedHeroes[lv_curatedHeroIndex].lv_heroLink, 0) == false) && ((CatalogFieldValueGet(c_gameCatalogHero, libMuHS_gv_iGHS_CuratedHeroes[lv_curatedHeroIndex].lv_heroLink, "Flags[" + IntToString(c_heroFlagGoodForModeB) + "]", c_playerAny) == "1") || (lv_curatedHeroHasBeenAssignedPreviously == false)) && ((libMuHS_gv_iGHS_IgnoreClassDuringCuratedHeroPick == true) || (libMuHS_gf_IGHS_GetClassofHerofromData(libMuHS_gv_iGHS_CuratedHeroes[lv_curatedHeroIndex].lv_heroLink) == lv_classOfPlayer)) && ((libMuHS_gv_iGHS_CuratedHeroes[lv_curatedHeroIndex].lv_team == 0) || (libMuHS_gv_iGHS_CuratedHeroes[lv_curatedHeroIndex].lv_team == libGame_gf_TeamNumberOfPlayer(lp_playerIndex)))) {
            lv_possibleHeroCount += 1;
            lv_possibleHeroes[lv_possibleHeroCount] = libMuHS_gv_iGHS_CuratedHeroes[lv_curatedHeroIndex].lv_heroLink;
        }

    }
    if ((lv_possibleHeroCount == 0)) {
        lv_possibleHeroCount += 1;
        lv_possibleHeroes[lv_possibleHeroCount] = "Random";
    }

    lv_possibleHeroShuffler = ShufflerCreate(lv_possibleHeroCount);
    libMuHS_gv_aRM_HeroesForPick[lp_playerIndex][1] = libCore_gf_GetIndexFromHero(lv_possibleHeroes[(ShufflerAdvance(lv_possibleHeroShuffler) + 1)]);
    libMuHS_gv_aRM_HeroesForPick[lp_playerIndex][2] = libCore_gf_GetIndexFromHero(lv_possibleHeroes[(ShufflerAdvance(lv_possibleHeroShuffler) + 1)]);
    libMuHS_gv_aRM_HeroesForPick[lp_playerIndex][3] = libCore_gf_GetIndexFromHero(lv_possibleHeroes[(ShufflerAdvance(lv_possibleHeroShuffler) + 1)]);
}

void libMuHS_gf_IGHS_SetPickOptionsforAllPlayersUsingCuratedList () {
    int autoAC8B5D8A_ae;
    int autoAC8B5D8A_ai;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    autoAC8B5D8A_ae = libCore_gv_bALMaxPlayers;
    autoAC8B5D8A_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (autoAC8B5D8A_ai >= 0 && lv_playerIndex <= autoAC8B5D8A_ae) || (autoAC8B5D8A_ai <= 0 && lv_playerIndex >= autoAC8B5D8A_ae) ) ; lv_playerIndex += autoAC8B5D8A_ai ) {
        libMuHS_gf_IGHS_SetPickOptionsforPlayerUsingCuratedList(lv_playerIndex);
    }
}

void libMuHS_gf_IGHS_AddCuratedSkin (string lp_skin, string lp_heroThatUsesSkin, int lp_team) {
    // Implementation
    if ((libMuHS_gv_iGHS_CuratedHeroCount == libMuHS_gv_iGHS_CuratedHeroCountMax)) {
        TextExpressionSetToken("Param/Expression/lib_MuHS_36920A65", "A", StringToText(CatalogFieldValueGet(c_gameCatalogSkin, lp_skin, "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_MuHS_36920A65", "B", IntToText(libMuHS_gv_iGHS_CuratedSkinCountMax));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_MuHS_36920A65"), true);
        return ;
    }

    libMuHS_gv_iGHS_CuratedSkinCount += 1;
    libMuHS_gv_iGHS_CuratedSkins[libMuHS_gv_iGHS_CuratedSkinCount].lv_skinLink = lp_skin;
    libMuHS_gv_iGHS_CuratedSkins[libMuHS_gv_iGHS_CuratedSkinCount].lv_requiredHero = lp_heroThatUsesSkin;
    libMuHS_gv_iGHS_CuratedSkins[libMuHS_gv_iGHS_CuratedSkinCount].lv_team = lp_team;
}

void libMuHS_gf_IGHS_SetSkinforPlayerUsingCuratedList (int lp_playerIndex) {
    int auto3843BB09_ae;
    int auto3843BB09_ai;

    // Variable Declarations
    int lv_playerTeam;
    string[libMuHS_gv_iGHS_CuratedSkinCountMax + 1] lv_possibleSkins;
    int lv_possibleSkinCount;
    int lv_curatedSkinIndex;
    string lv_dEBUG_RequiredHero;
    string lv_dEBUG_HeroIndex;

    // Variable Initialization
    lv_playerTeam = libGame_gf_TeamNumberOfPlayer(lp_playerIndex);

    // Implementation
    auto3843BB09_ae = libMuHS_gv_iGHS_CuratedSkinCount;
    auto3843BB09_ai = 1;
    lv_curatedSkinIndex = 1;
    for ( ; ( (auto3843BB09_ai >= 0 && lv_curatedSkinIndex <= auto3843BB09_ae) || (auto3843BB09_ai <= 0 && lv_curatedSkinIndex >= auto3843BB09_ae) ) ; lv_curatedSkinIndex += auto3843BB09_ai ) {
        if ((libMuHS_gv_iGHS_CuratedSkins[lv_curatedSkinIndex].lv_requiredHero == libCore_gf_GetHeroFromIndex(libGame_gv_players[lp_playerIndex].lv_heroIndex)) && ((libMuHS_gv_iGHS_CuratedSkins[lv_curatedSkinIndex].lv_team == lv_playerTeam) || (libMuHS_gv_iGHS_CuratedSkins[lv_curatedSkinIndex].lv_team == 0))) {
            lv_possibleSkinCount += 1;
            lv_possibleSkins[lv_possibleSkinCount] = libMuHS_gv_iGHS_CuratedSkins[lv_curatedSkinIndex].lv_skinLink;
        }

    }
    if ((lv_possibleSkinCount > 0)) {
        PlayerSetSkin(lp_playerIndex, lv_possibleSkins[RandomInt(1, lv_possibleSkinCount)]);
    }

}

void libMuHS_gf_IGHS_SetSkinforAllPlayersUsingCuratedList () {
    int auto4FDE96F7_ae;
    int auto4FDE96F7_ai;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    auto4FDE96F7_ae = libCore_gv_bALMaxPlayers;
    auto4FDE96F7_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (auto4FDE96F7_ai >= 0 && lv_playerIndex <= auto4FDE96F7_ae) || (auto4FDE96F7_ai <= 0 && lv_playerIndex >= auto4FDE96F7_ae) ) ; lv_playerIndex += auto4FDE96F7_ai ) {
        libMuHS_gf_IGHS_SetSkinforPlayerUsingCuratedList(lv_playerIndex);
    }
}

void libMuHS_gf_IGHS_AddCuratedMount (string lp_mount, string lp_hero, int lp_team) {
    // Implementation
    if ((libMuHS_gv_iGHS_CuratedHeroCount == libMuHS_gv_iGHS_CuratedHeroCountMax)) {
        TextExpressionSetToken("Param/Expression/lib_MuHS_69723F79", "A", StringToText(CatalogFieldValueGet(c_gameCatalogMount, lp_mount, "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_MuHS_69723F79", "B", IntToText(libMuHS_gv_iGHS_CuratedMountCountMax));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_MuHS_69723F79"), true);
        return ;
    }

    libMuHS_gv_iGHS_CuratedMountCount += 1;
    libMuHS_gv_iGHS_CuratedMounts[libMuHS_gv_iGHS_CuratedMountCount].lv_mountLink = lp_mount;
    libMuHS_gv_iGHS_CuratedMounts[libMuHS_gv_iGHS_CuratedMountCount].lv_requiredHero = lp_hero;
    libMuHS_gv_iGHS_CuratedMounts[libMuHS_gv_iGHS_CuratedMountCount].lv_team = lp_team;
}

void libMuHS_gf_IGHS_SetMountforPlayerUsingCuratedList (int lp_playerIndex) {
    int auto137B9E04_ae;
    int auto137B9E04_ai;

    // Variable Declarations
    int lv_playerTeam;
    string[libMuHS_gv_iGHS_CuratedMountCountMax + 1] lv_possibleMounts;
    int lv_possibleMountCount;
    int lv_curatedMountIndex;

    // Variable Initialization
    lv_playerTeam = libGame_gf_TeamNumberOfPlayer(lp_playerIndex);

    // Implementation
    auto137B9E04_ae = libMuHS_gv_iGHS_CuratedMountCount;
    auto137B9E04_ai = 1;
    lv_curatedMountIndex = 1;
    for ( ; ( (auto137B9E04_ai >= 0 && lv_curatedMountIndex <= auto137B9E04_ae) || (auto137B9E04_ai <= 0 && lv_curatedMountIndex >= auto137B9E04_ae) ) ; lv_curatedMountIndex += auto137B9E04_ai ) {
        if (((libMuHS_gv_iGHS_CuratedMounts[lv_curatedMountIndex].lv_requiredHero == libCore_gf_GetHeroFromIndex(libGame_gv_players[lp_playerIndex].lv_heroIndex)) || (libMuHS_gv_iGHS_CuratedMounts[lv_curatedMountIndex].lv_requiredHero == null)) && ((libMuHS_gv_iGHS_CuratedMounts[lv_curatedMountIndex].lv_team == lv_playerTeam) || (libMuHS_gv_iGHS_CuratedMounts[lv_curatedMountIndex].lv_team == 0))) {
            lv_possibleMountCount += 1;
            lv_possibleMounts[lv_possibleMountCount] = libMuHS_gv_iGHS_CuratedMounts[lv_curatedMountIndex].lv_mountLink;
        }

    }
    if ((lv_possibleMountCount > 0)) {
        PlayerSetMount(lp_playerIndex, lv_possibleMounts[RandomInt(1, lv_possibleMountCount)]);
    }

}

void libMuHS_gf_IGHS_SetMountforAllPlayersUsingCuratedList () {
    int autoDEF0B587_ae;
    int autoDEF0B587_ai;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    autoDEF0B587_ae = libCore_gv_bALMaxPlayers;
    autoDEF0B587_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (autoDEF0B587_ai >= 0 && lv_playerIndex <= autoDEF0B587_ae) || (autoDEF0B587_ai <= 0 && lv_playerIndex >= autoDEF0B587_ae) ) ; lv_playerIndex += autoDEF0B587_ai ) {
        libMuHS_gf_IGHS_SetMountforPlayerUsingCuratedList(lv_playerIndex);
    }
}

bool libMuHS_gf_ARM_HeroPickAllReady () {
    int auto6E3AA49A_ae;
    int auto6E3AA49A_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    auto6E3AA49A_ae = libCore_gv_bALMaxPlayers;
    auto6E3AA49A_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto6E3AA49A_ai >= 0 && lv_itPlayer <= auto6E3AA49A_ae) || (auto6E3AA49A_ai <= 0 && lv_itPlayer >= auto6E3AA49A_ae) ) ; lv_itPlayer += auto6E3AA49A_ai ) {
        if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused) && (libMuHS_gv_aRM_HeroPickReady[lv_itPlayer] == false)) {
            return false;
        }

    }
    return true;
}

int libMuHS_gf_ARM_PlayerForHeroPickPanelLine (int lp_player, int lp_lineIndex) {
    // Implementation
    return libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroPanelForPlayer[lp_lineIndex][lp_player];
}

void libMuHS_gf_ARM_SetPlayerForHeroPickPanelLine (int lp_player, int lp_lineIndex, int lp_forPlayer) {
    // Implementation
    libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroPanelForPlayer[lp_lineIndex][lp_player] = lp_forPlayer;
}

void libMuHS_gf_ARM_HeroPickUIInit () {
    int init_i;

    int auto2F908C58_ae;
    int auto2F908C58_ai;
    int auto5305D6D7_ae;
    int auto5305D6D7_ai;
    int auto8374867C_ae;
    int auto8374867C_ai;
    int autoFBB8B9DE_ae;
    int autoFBB8B9DE_ai;
    int auto0D5AE7AF_ae;
    int auto0D5AE7AF_ai;
    int autoF28DC79E_ae;
    int autoF28DC79E_ai;
    int auto7007A4FF_ae;
    int auto7007A4FF_ai;

    // Variable Declarations
    int[11] lv_panels;
    int lv_currentPanelLayer;
    int lv_itPlayerSlot;
    int lv_itHero;
    int lv_itRound;
    int lv_itTeam;

    // Variable Initialization
    for (init_i = 0; init_i <= 10; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    if ((libMuHS_gv_aRM_HeroPickPanelUI.lv_dialog != c_invalidDialogId)) {
        return ;
    }

    DialogCreate(500, 400, c_anchorCenter, 0, 0, true);
    libMuHS_gv_aRM_HeroPickPanelUI.lv_dialog = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetFullscreen(DialogLastCreated(), true);
    DialogControlCreateFromTemplate(DialogLastCreated(), c_triggerControlTypePanel, "ArenaModePickHeroUI/ArenaPickHeroPanelTemplate");
    libMuHS_gv_aRM_HeroPickPanelUI.lv_mainPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ArenaModeTitleFrame");
    libMuHS_gv_aRM_HeroPickPanelUI.lv_arenaModeTitlePanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "ArenaModeTitleFrame/RoundLabel");
    libMuHS_gv_aRM_HeroPickPanelUI.lv_roundLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "NonArenaModeTitleFrame");
    libMuHS_gv_aRM_HeroPickPanelUI.lv_nonArenaModeTitlePanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CountdownLabel");
    libMuHS_gv_aRM_HeroPickPanelUI.lv_countdownLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "RoundStartCountdownFrame");
    libMuHS_gv_aRM_HeroPickPanelUI.lv_finalCountdownFrame = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "AbilitiesButton");
    libMuHS_gv_aRM_HeroPickPanelUI.lv_abilitiesInfoButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "TalentsButton");
    libMuHS_gv_aRM_HeroPickPanelUI.lv_talentsInfoButton = DialogControlLastCreated();
    auto2F908C58_ae = libCore_gv_bALMaxPlayersOnATeam;
    auto2F908C58_ai = 1;
    lv_itPlayerSlot = 1;
    for ( ; ( (auto2F908C58_ai >= 0 && lv_itPlayerSlot <= auto2F908C58_ae) || (auto2F908C58_ai <= 0 && lv_itPlayerSlot >= auto2F908C58_ae) ) ; lv_itPlayerSlot += auto2F908C58_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeHeroCutscene, "HeroCutsceneFrame" + IntToString(lv_itPlayerSlot -  1));
        libMuHS_gv_aRM_HeroPickPanelUI.lv_heroCutsceneFrame[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }
    auto5305D6D7_ae = libCore_gv_bALMaxPlayersOnATeam;
    auto5305D6D7_ai = 1;
    lv_itPlayerSlot = 1;
    for ( ; ( (auto5305D6D7_ai >= 0 && lv_itPlayerSlot <= auto5305D6D7_ae) || (auto5305D6D7_ai <= 0 && lv_itPlayerSlot >= auto5305D6D7_ae) ) ; lv_itPlayerSlot += auto5305D6D7_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeHeroContainer, "SelectedHero" + IntToString(lv_itPlayerSlot -  1));
        libMuHS_gv_aRM_HeroPickPanelUI.lv_heroContainerFrame[lv_itPlayerSlot] = DialogControlLastCreated();
    }
    auto8374867C_ae = libCore_gv_bALMaxTeams;
    auto8374867C_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (auto8374867C_ai >= 0 && lv_itTeam <= auto8374867C_ae) || (auto8374867C_ai <= 0 && lv_itTeam >= auto8374867C_ae) ) ; lv_itTeam += auto8374867C_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Team" + IntToString(lv_itTeam) + "RoundIndicators");
        libMuHS_gv_aRM_HeroPickPanelUI.lv_teamRoundIndicatorFrame[lv_itTeam] = DialogControlLastCreated();
        if ((libCore_gv_sYSGameMode != libCore_ge_GameModes_ArenaMode)) {
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        }

        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        autoFBB8B9DE_ae = 2;
        autoFBB8B9DE_ai = 1;
        lv_itRound = 1;
        for ( ; ( (autoFBB8B9DE_ai >= 0 && lv_itRound <= autoFBB8B9DE_ae) || (autoFBB8B9DE_ai <= 0 && lv_itRound >= autoFBB8B9DE_ae) ) ; lv_itRound += autoFBB8B9DE_ai ) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "Round" + IntToString(lv_itRound) + "/BlueVictory");
            libMuHS_gv_aRM_HeroPickPanelUI.lv_roundWinIndicatorImages[lv_itTeam][libGame_gv_teamOrderIndex_C][lv_itRound] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "Round" + IntToString(lv_itRound) + "/RedVictory");
            libMuHS_gv_aRM_HeroPickPanelUI.lv_roundWinIndicatorImages[lv_itTeam][libGame_gv_teamChaosIndex_C][lv_itRound] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        }
        lv_currentPanelLayer -= 1;
    }
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "PickHeroFrame");
    libMuHS_gv_aRM_HeroPickPanelUI.lv_pickHeroPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    auto0D5AE7AF_ae = libCore_gv_bALMaxPlayersOnATeam;
    auto0D5AE7AF_ai = 1;
    lv_itPlayerSlot = 1;
    for ( ; ( (auto0D5AE7AF_ai >= 0 && lv_itPlayerSlot <= auto0D5AE7AF_ae) || (auto0D5AE7AF_ai <= 0 && lv_itPlayerSlot >= auto0D5AE7AF_ae) ) ; lv_itPlayerSlot += auto0D5AE7AF_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Player" + IntToString(lv_itPlayerSlot) + "PickHero");
        libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroPanelPerPlayer[lv_itPlayerSlot] = DialogControlLastCreated();
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PlayerName");
        libMuHS_gv_aRM_HeroPickPanelUI.lv_playerNameLabel[lv_itPlayerSlot] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "RoleDescriptionLabel");
        libMuHS_gv_aRM_HeroPickPanelUI.lv_playerClassLabel[lv_itPlayerSlot] = DialogControlLastCreated();
        if ((libMuHS_gv_iGHS_IgnoreClassDuringCuratedHeroPick == true)) {
            DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerClassLabel[lv_itPlayerSlot], PlayerGroupAll(), false);
        }

        autoF28DC79E_ae = libMuHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
        autoF28DC79E_ai = 1;
        lv_itHero = 1;
        for ( ; ( (autoF28DC79E_ai >= 0 && lv_itHero <= autoF28DC79E_ae) || (autoF28DC79E_ai <= 0 && lv_itHero >= autoF28DC79E_ae) ) ; lv_itHero += autoF28DC79E_ai ) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "PlayerHeroButton" + IntToString(lv_itHero));
            libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroButton[lv_itPlayerSlot][lv_itHero] = DialogControlLastCreated();
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "NormalImage");
            libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroButtonBorder[lv_itPlayerSlot][lv_itHero] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "SelectedImage");
            libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroButtonBorderSelected[lv_itPlayerSlot][lv_itHero] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroImage");
            libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroButtonImage[lv_itPlayerSlot][lv_itHero] = DialogControlLastCreated();
            lv_currentPanelLayer -= 1;
        }
        auto7007A4FF_ae = libMuHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
        auto7007A4FF_ai = 1;
        lv_itHero = 1;
        for ( ; ( (auto7007A4FF_ai >= 0 && lv_itHero <= auto7007A4FF_ae) || (auto7007A4FF_ai <= 0 && lv_itHero >= auto7007A4FF_ae) ) ; lv_itHero += auto7007A4FF_ai ) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PlayerHeroButtonName" + IntToString(lv_itHero));
            libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroButtonLabel[lv_itPlayerSlot][lv_itHero] = DialogControlLastCreated();
        }
        if ((lv_itPlayerSlot == 1)) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "ReadyButton");
            libMuHS_gv_aRM_HeroPickPanelUI.lv_playerReadyButton[lv_itPlayerSlot] = DialogControlLastCreated();
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupSingle(libCore_gv_oBSERVER_ObserverUIPlayer), false);
        }

        lv_currentPanelLayer -= 1;
    }
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "DebugFunButton");
    libMuHS_gv_aRM_HeroPickPanelUI.lv_debugCrazyBtn = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_MuHS_C8EAC2E3"), PlayerGroupAll());
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "DebugRerollButton");
    libMuHS_gv_aRM_HeroPickPanelUI.lv_debugRerollBtn = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_MuHS_FD23EBDB"), PlayerGroupAll());
}

void libMuHS_gf_IGHS_UpdateRoundWinIndicators (int lp_orderRoundScore, int lp_chaosRoundScore) {
    // Implementation
    if ((lp_orderRoundScore == 1)) {
        DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_roundWinIndicatorImages[libGame_gv_teamOrderIndex_C][libGame_gv_teamOrderIndex_C][1], GameAttributePlayersForTeam(libGame_gv_teamOrderIndex_C), true);
        DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_roundWinIndicatorImages[libGame_gv_teamOrderIndex_C][libGame_gv_teamChaosIndex_C][1], GameAttributePlayersForTeam(libGame_gv_teamChaosIndex_C), true);
    }
    else {
        if ((lp_orderRoundScore == 2)) {
            DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_roundWinIndicatorImages[libGame_gv_teamOrderIndex_C][libGame_gv_teamOrderIndex_C][2], GameAttributePlayersForTeam(libGame_gv_teamOrderIndex_C), true);
            DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_roundWinIndicatorImages[libGame_gv_teamOrderIndex_C][libGame_gv_teamChaosIndex_C][2], GameAttributePlayersForTeam(libGame_gv_teamChaosIndex_C), true);
        }

    }
    if ((lp_chaosRoundScore == 1)) {
        DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_roundWinIndicatorImages[libGame_gv_teamChaosIndex_C][libGame_gv_teamChaosIndex_C][1], GameAttributePlayersForTeam(libGame_gv_teamOrderIndex_C), true);
        DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_roundWinIndicatorImages[libGame_gv_teamChaosIndex_C][libGame_gv_teamOrderIndex_C][1], GameAttributePlayersForTeam(libGame_gv_teamChaosIndex_C), true);
    }
    else {
        if ((lp_chaosRoundScore == 2)) {
            DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_roundWinIndicatorImages[libGame_gv_teamChaosIndex_C][libGame_gv_teamChaosIndex_C][2], GameAttributePlayersForTeam(libGame_gv_teamOrderIndex_C), true);
            DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_roundWinIndicatorImages[libGame_gv_teamChaosIndex_C][libGame_gv_teamOrderIndex_C][2], GameAttributePlayersForTeam(libGame_gv_teamChaosIndex_C), true);
        }

    }
}

void libMuHS_gf_ARM_UpdateHeroPickPanelLineForPlayer (int lp_player, int lp_lineIndex) {
    int autoC8E7040D_ae;
    int autoC8E7040D_ai;

    // Variable Declarations
    int lv_forPlayer;
    int lv_itButtonIndex;
    string lv_heroLink;

    // Variable Initialization

    // Implementation
    if ((lp_lineIndex <= 0) && (lp_lineIndex > libCore_gv_bALMaxPlayersOnATeam)) {
        return ;
    }

    lv_forPlayer = libMuHS_gf_ARM_PlayerForHeroPickPanelLine(lp_player, lp_lineIndex);
    if (((lv_forPlayer == 0) || (PlayerStatus(lv_forPlayer) == c_playerStatusUnused))) {
        DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroPanelPerPlayer[lp_lineIndex], libCore_gv_playerGroupFromPlayer[lp_player], false);
        return ;
    }

    if ((lp_player == lv_forPlayer)) {
        libNtve_gf_SetDialogItemText(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerNameLabel[lp_lineIndex], StringExternal("Param/Value/lib_MuHS_2DB016B4"), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
        libNtve_gf_SetDialogItemText(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerNameLabel[lp_lineIndex], PlayerName(lv_forPlayer), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    autoC8E7040D_ae = libMuHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
    autoC8E7040D_ai = 1;
    lv_itButtonIndex = 1;
    for ( ; ( (autoC8E7040D_ai >= 0 && lv_itButtonIndex <= autoC8E7040D_ae) || (autoC8E7040D_ai <= 0 && lv_itButtonIndex >= autoC8E7040D_ae) ) ; lv_itButtonIndex += autoC8E7040D_ai ) {
        lv_heroLink = libCore_gf_GetHeroFromIndex(libMuHS_gv_aRM_HeroesForPick[lv_forPlayer][lv_itButtonIndex]);
        libNtve_gf_SetDialogItemImage(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroButtonImage[lp_lineIndex][lv_itButtonIndex], (CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "SelectScreenButtonImage", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroButtonLabel[lp_lineIndex][lv_itButtonIndex], UnitTypeGetName((CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "Unit", c_playerAny))), libCore_gv_playerGroupFromPlayer[lp_player]);
        if ((libMuHS_gv_aRM_HeroPickHeroButtonPickedIndex[lv_forPlayer] == lv_itButtonIndex)) {
            libNtve_gf_SetDialogItemToggled(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroButton[lp_lineIndex][lv_itButtonIndex], true, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            libNtve_gf_SetDialogItemToggled(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroButton[lp_lineIndex][lv_itButtonIndex], false, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        if ((lp_player == lv_forPlayer)) {
            if ((libMuHS_gv_aRM_HeroPickReady[lp_player] == true)) {
                DialogControlSetEnabled(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroButton[lp_lineIndex][lv_itButtonIndex], libCore_gv_playerGroupFromPlayer[lp_player], false);
                if ((libMuHS_gv_aRM_HeroPickHeroButtonPickedIndex[lp_player] == lv_itButtonIndex)) {
                    libNtve_gf_SetDialogItemText(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerNameLabel[lp_lineIndex], UnitTypeGetName((CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "Unit", lp_player))), libCore_gv_playerGroupFromPlayer[lp_player]);
                    DialogControlSetEnabled(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroButton[lp_lineIndex][lv_itButtonIndex], libCore_gv_playerGroupFromPlayer[lp_player], true);
                    libNtve_gf_SetDialogItemHeroLink(libMuHS_gv_aRM_HeroPickPanelUI.lv_heroContainerFrame[lp_lineIndex], lv_heroLink, libCore_gv_playerGroupFromPlayer[lp_player]);
                    libNtve_gf_SetDialogItemSkinLink(libMuHS_gv_aRM_HeroPickPanelUI.lv_heroContainerFrame[lp_lineIndex], PlayerSkin(lp_player), libCore_gv_playerGroupFromPlayer[lp_player]);
                    DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_heroCutsceneFrame[lp_lineIndex], libCore_gv_playerGroupFromPlayer[lp_player], true);
                }

            }
            else {
                if ((libMuHS_gv_aRM_HeroPickHeroButtonPickedIndex[lp_player] == lv_itButtonIndex)) {
                    DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroButtonBorderSelected[lp_lineIndex][lv_itButtonIndex], libCore_gv_playerGroupFromPlayer[lp_player], true);
                    libNtve_gf_SetDialogItemText(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerNameLabel[lp_lineIndex], UnitTypeGetName((CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "Unit", lp_player))), libCore_gv_playerGroupFromPlayer[lp_player]);
                    libNtve_gf_SetDialogItemHeroLink(libMuHS_gv_aRM_HeroPickPanelUI.lv_heroContainerFrame[lp_lineIndex], lv_heroLink, libCore_gv_playerGroupFromPlayer[lp_player]);
                    DialogControlSetEnabled(libMuHS_gv_aRM_HeroPickPanelUI.lv_abilitiesInfoButton, libCore_gv_playerGroupFromPlayer[lp_player], true);
                    DialogControlSetEnabled(libMuHS_gv_aRM_HeroPickPanelUI.lv_talentsInfoButton, libCore_gv_playerGroupFromPlayer[lp_player], true);
                }
                else {
                    DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroButtonBorderSelected[lp_lineIndex][lv_itButtonIndex], libCore_gv_playerGroupFromPlayer[lp_player], false);
                    if ((libMuHS_gv_aRM_HeroPickHeroButtonPickedIndex[lp_player] == 0)) {
                        libNtve_gf_SetDialogItemHeroLink(libMuHS_gv_aRM_HeroPickPanelUI.lv_heroContainerFrame[lp_lineIndex], lv_heroLink, libCore_gv_playerGroupFromPlayer[lp_player]);
                        DialogControlSetEnabled(libMuHS_gv_aRM_HeroPickPanelUI.lv_abilitiesInfoButton, libCore_gv_playerGroupFromPlayer[lp_player], false);
                        DialogControlSetEnabled(libMuHS_gv_aRM_HeroPickPanelUI.lv_talentsInfoButton, libCore_gv_playerGroupFromPlayer[lp_player], false);
                    }

                }
                DialogControlSetEnabled(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroButton[lp_lineIndex][lv_itButtonIndex], libCore_gv_playerGroupFromPlayer[lp_player], true);
            }
        }
        else {
            DialogControlSetEnabled(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroButton[lp_lineIndex][lv_itButtonIndex], libCore_gv_playerGroupFromPlayer[lp_player], false);
            if ((libMuHS_gv_aRM_HeroPickReady[lv_forPlayer] == true)) {
                if ((libMuHS_gv_aRM_HeroPickHeroButtonPickedIndex[lv_forPlayer] == lv_itButtonIndex)) {
                    TextExpressionSetToken("Param/Expression/lib_MuHS_1D5B7A99", "A", PlayerName(lv_forPlayer));
                    TextExpressionSetToken("Param/Expression/lib_MuHS_1D5B7A99", "B", UnitTypeGetName((CatalogFieldValueGet(c_gameCatalogHero, lv_heroLink, "Unit", c_playerAny))));
                    libNtve_gf_SetDialogItemText(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerNameLabel[lp_lineIndex], TextExpressionAssemble("Param/Expression/lib_MuHS_1D5B7A99"), libCore_gv_playerGroupFromPlayer[lp_player]);
                    libNtve_gf_SetDialogItemToggled(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroButton[lp_lineIndex][lv_itButtonIndex], true, libCore_gv_playerGroupFromPlayer[lp_player]);
                    DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroButtonBorderSelected[lp_lineIndex][lv_itButtonIndex], libCore_gv_playerGroupFromPlayer[lp_player], true);
                    libNtve_gf_SetDialogItemHeroLink(libMuHS_gv_aRM_HeroPickPanelUI.lv_heroContainerFrame[lp_lineIndex], lv_heroLink, libCore_gv_playerGroupFromPlayer[lp_player]);
                    libNtve_gf_SetDialogItemSkinLink(libMuHS_gv_aRM_HeroPickPanelUI.lv_heroContainerFrame[lp_lineIndex], PlayerSkin(lv_forPlayer), libCore_gv_playerGroupFromPlayer[lp_player]);
                    DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_heroCutsceneFrame[lp_lineIndex], libCore_gv_playerGroupFromPlayer[lp_player], true);
                }
                else {
                    libNtve_gf_SetDialogItemToggled(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroButton[lp_lineIndex][lv_itButtonIndex], false, libCore_gv_playerGroupFromPlayer[lp_player]);
                    DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroButtonBorderSelected[lp_lineIndex][lv_itButtonIndex], libCore_gv_playerGroupFromPlayer[lp_player], false);
                }
            }
            else {
                if ((libMuHS_gv_aRM_HeroPickHeroButtonPickedIndex[lv_forPlayer] == lv_itButtonIndex)) {
                    DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroButtonBorderSelected[lp_lineIndex][lv_itButtonIndex], libCore_gv_playerGroupFromPlayer[lp_player], true);
                }
                else {
                    DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroButtonBorderSelected[lp_lineIndex][lv_itButtonIndex], libCore_gv_playerGroupFromPlayer[lp_player], false);
                    if ((libMuHS_gv_aRM_HeroPickHeroButtonPickedIndex[lv_forPlayer] == 0)) {
                        libNtve_gf_SetDialogItemHeroLink(libMuHS_gv_aRM_HeroPickPanelUI.lv_heroContainerFrame[lp_lineIndex], lv_heroLink, libCore_gv_playerGroupFromPlayer[lp_player]);
                    }

                }
                DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_heroCutsceneFrame[lp_lineIndex], libCore_gv_playerGroupFromPlayer[lp_player], false);
            }
        }
    }
    if ((lp_player == lv_forPlayer)) {
        if ((libMuHS_gv_aRM_HeroPickReady[lv_forPlayer] == true)) {
            if ((lp_lineIndex != 1)) {
            }

        }
        else {
            if ((lp_lineIndex != 1)) {
                DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerNameLabel[lp_lineIndex], libCore_gv_playerGroupFromPlayer[lp_player], true);
            }

            DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_heroCutsceneFrame[lp_lineIndex], libCore_gv_playerGroupFromPlayer[lp_player], false);
            if ((libMuHS_gv_aRM_HeroPickHeroButtonPickedIndex[lv_forPlayer] == 0)) {
                DialogControlSetEnabled(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerReadyButton[lp_lineIndex], libCore_gv_playerGroupFromPlayer[lp_player], false);
            }
            else {
                DialogControlSetEnabled(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerReadyButton[lp_lineIndex], libCore_gv_playerGroupFromPlayer[lp_player], true);
            }
        }
    }
    else {
        if ((libMuHS_gv_aRM_HeroPickReady[lv_forPlayer] == true)) {
            if ((lp_lineIndex != 1)) {
            }

        }
        else {
            if ((lp_lineIndex != 1)) {
                DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_playerNameLabel[lp_lineIndex], libCore_gv_playerGroupFromPlayer[lp_player], true);
            }

        }
    }
}

void libMuHS_gf_ARM_UpdateHeroPickPanelForPlayer (int lp_player) {
    playergroup autoD8A4C213_g;
    int autoD8A4C213_p;
    playergroup auto0A690E43_g;
    int auto0A690E43_p;
    int auto2A7FD5A9_ae;
    int auto2A7FD5A9_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itHeroPanelLine;

    // Variable Initialization

    // Implementation
    if ((PlayerStatus(lp_player) == c_playerStatusUnused)) {
        return ;
    }

    lv_itHeroPanelLine = 0;
    if ((lp_player != libCore_gv_oBSERVER_ObserverUIPlayer)) {
        auto0A690E43_g = libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false); 
        auto0A690E43_p = 1;
        for ( ; auto0A690E43_p <= PlayerGroupCount(auto0A690E43_g) ; auto0A690E43_p += (lv_itPlayer == PlayerGroupPlayer(auto0A690E43_g, auto0A690E43_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto0A690E43_g, auto0A690E43_p);
            lv_itHeroPanelLine += 1;
            libMuHS_gf_ARM_UpdateHeroPickPanelLineForPlayer(lp_player, lv_itHeroPanelLine);
        }
    }
    else {
        autoD8A4C213_g = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false); 
        autoD8A4C213_p = 1;
        for ( ; autoD8A4C213_p <= PlayerGroupCount(autoD8A4C213_g) ; autoD8A4C213_p += (lv_itPlayer == PlayerGroupPlayer(autoD8A4C213_g, autoD8A4C213_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(autoD8A4C213_g, autoD8A4C213_p);
            lv_itHeroPanelLine += 1;
            libMuHS_gf_ARM_UpdateHeroPickPanelLineForPlayer(lp_player, lv_itHeroPanelLine);
        }
    }
    auto2A7FD5A9_ae = libCore_gv_bALMaxPlayersOnATeam;
    auto2A7FD5A9_ai = 1;
    lv_itHeroPanelLine = (lv_itHeroPanelLine + 1);
    for ( ; ( (auto2A7FD5A9_ai >= 0 && lv_itHeroPanelLine <= auto2A7FD5A9_ae) || (auto2A7FD5A9_ai <= 0 && lv_itHeroPanelLine >= auto2A7FD5A9_ae) ) ; lv_itHeroPanelLine += auto2A7FD5A9_ai ) {
        libMuHS_gf_ARM_UpdateHeroPickPanelLineForPlayer(lp_player, lv_itHeroPanelLine);
    }
}

void libMuHS_gf_ARM_UpdateHeroPicked () {
    int autoED874716_ae;
    int autoED874716_ai;
    int auto7C4CECDB_ae;
    int auto7C4CECDB_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;

    // Variable Initialization

    // Implementation
    autoED874716_ae = libCore_gv_bALMaxPlayers;
    autoED874716_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoED874716_ai >= 0 && lv_itPlayer <= autoED874716_ae) || (autoED874716_ai <= 0 && lv_itPlayer >= autoED874716_ae) ) ; lv_itPlayer += autoED874716_ai ) {
        if ((libMuHS_gv_aRM_HeroPickHeroButtonPickedIndex[lv_itPlayer] > 0)) {
            libGame_gv_players[lv_itPlayer].lv_heroIndex = libMuHS_gv_aRM_HeroesForPick[lv_itPlayer][libMuHS_gv_aRM_HeroPickHeroButtonPickedIndex[lv_itPlayer]];
        }

    }
    auto7C4CECDB_ae = libCore_gv_bALMaxTeams;
    auto7C4CECDB_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (auto7C4CECDB_ai >= 0 && lv_itTeam <= auto7C4CECDB_ae) || (auto7C4CECDB_ai <= 0 && lv_itTeam >= auto7C4CECDB_ae) ) ; lv_itTeam += auto7C4CECDB_ai ) {
        libGame_gf_PreloadHeroesForTeam(lv_itTeam);
    }
}

void libMuHS_gf_ARM_HeroPickUIDisplayForPlayer (int lp_player) {
    playergroup auto505827C6_g;
    int auto505827C6_p;
    int auto2DF3BA29_ae;
    int auto2DF3BA29_ai;

    // Variable Declarations
    int lv_itPlayer;
    playergroup lv_forPlayerGroup;
    int lv_team;
    playergroup lv_teamPlayers;
    int lv_enemyTeam;
    int lv_itHeroPanelLine;
    int lv_observedPlayer;

    // Variable Initialization
    lv_forPlayerGroup = PlayerGroupEmpty();
    lv_teamPlayers = PlayerGroupEmpty();

    // Implementation
    if ((lp_player != libCore_gv_oBSERVER_ObserverUIPlayer)) {
        lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);
        lv_teamPlayers = libGame_gf_PlayersOnTeamHeroes(lv_team, false);
        lv_forPlayerGroup = libCore_gv_playerGroupFromPlayer[lp_player];
        lv_observedPlayer = lp_player;
    }
    else {
        if ((PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false)) >= 1)) {
            lv_team = libGame_gv_teamOrderIndex_C;
            lv_teamPlayers = libGame_gf_PlayersOnTeamHeroes(lv_team, false);
            lv_forPlayerGroup = libCore_gv_playerGroupFromPlayer[PlayerGroupPlayer(libGame_gf_PlayersOnTeamHeroes(lv_team, false), 1)];
            lv_observedPlayer = PlayerGroupPlayer(lv_forPlayerGroup, 1);
        }
        else {
            lv_team = libGame_gv_teamChaosIndex_C;
            lv_teamPlayers = libGame_gf_PlayersOnTeamHeroes(lv_team, false);
            lv_forPlayerGroup = libCore_gv_playerGroupFromPlayer[PlayerGroupPlayer(libGame_gf_PlayersOnTeamHeroes(lv_team, false), 1)];
            lv_observedPlayer = PlayerGroupPlayer(lv_forPlayerGroup, 1);
        }
    }
    lv_itHeroPanelLine += 1;
    if ((lp_player != libCore_gv_oBSERVER_ObserverUIPlayer)) {
        libMuHS_gf_ARM_SetPlayerForHeroPickPanelLine(lp_player, lv_itHeroPanelLine, lp_player);
    }
    else {
        libMuHS_gf_ARM_SetPlayerForHeroPickPanelLine(lp_player, lv_itHeroPanelLine, lv_observedPlayer);
    }
    auto505827C6_g = lv_teamPlayers; 
    auto505827C6_p = 1;
    for ( ; auto505827C6_p <= PlayerGroupCount(auto505827C6_g) ; auto505827C6_p += (lv_itPlayer == PlayerGroupPlayer(auto505827C6_g, auto505827C6_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto505827C6_g, auto505827C6_p);
        if ((lv_itPlayer != lp_player) && (lv_itPlayer != lv_observedPlayer)) {
            lv_itHeroPanelLine += 1;
            if ((lv_itHeroPanelLine > libCore_gv_bALMaxPlayersOnATeam)) {
                TriggerDebugOutput(1, StringExternal("Param/Value/lib_MuHS_94887E93"), true);
                break;
            }

            libMuHS_gf_ARM_SetPlayerForHeroPickPanelLine(lp_player, lv_itHeroPanelLine, lv_itPlayer);
        }

    }
    auto2DF3BA29_ae = libCore_gv_bALMaxPlayersOnATeam;
    auto2DF3BA29_ai = 1;
    lv_itHeroPanelLine = (lv_itHeroPanelLine + 1);
    for ( ; ( (auto2DF3BA29_ai >= 0 && lv_itHeroPanelLine <= auto2DF3BA29_ae) || (auto2DF3BA29_ai <= 0 && lv_itHeroPanelLine >= auto2DF3BA29_ae) ) ; lv_itHeroPanelLine += auto2DF3BA29_ai ) {
        libMuHS_gf_ARM_SetPlayerForHeroPickPanelLine(lp_player, lv_itHeroPanelLine, 0);
    }
    libMuHS_gf_ARM_UpdateHeroPickPanelForPlayer(lp_player);
}

void libMuHS_gf_ARM_HeroPickUIDisplay () {
    int autoD23DD02F_ae;
    int autoD23DD02F_ai;
    int autoFF9A99CE_ae;
    int autoFF9A99CE_ai;
    int autoF1780DCB_ae;
    int autoF1780DCB_ai;
    int autoC5FFA20C_ae;
    int autoC5FFA20C_ai;
    int autoBAE0BC4B_ae;
    int autoBAE0BC4B_ai;

    // Variable Declarations
    int lv_itPlayer;
    bool lv_ready;
    int lv_itCount;
    sound lv_crowdSound;

    // Variable Initialization

    // Implementation
    if (((GameTestConfigType() == 1) || (GameTestConfigType() == 2) || (GameTestConfigType() == 3) || (GameTestConfigType() == 4))) {
        return ;
    }

    TriggerEnable(libMuHS_gt_IGHS_HeroPickUIHeroButtonClicked, true);
    TriggerEnable(libMuHS_gt_IGHS_HeroPickUIReadyButtonClicked, true);
    TriggerEnable(libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked, true);
    TriggerEnable(libMuHS_gt_IGHS_HeroPickUIDebugRerollButtonClicked, true);
    TriggerEnable(libMuHS_gt_IGHS_HeroPickUIDebugEnableCrazyButton, true);
    TriggerEnable(libMuHS_gt_IGHS_HeroPickCrazyMode, true);
    CinematicFade(false, 0.0, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
    DialogControlSetVisible(libUIUI_gv_uIObserverUI.lv_mainPanel, PlayerGroupSingle(libCore_gv_oBSERVER_ObserverUIPlayer), false);
    libMuHS_gf_ARM_HeroPickUIInit();
    autoD23DD02F_ae = libCore_gv_bALMaxPlayers;
    autoD23DD02F_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoD23DD02F_ai >= 0 && lv_itPlayer <= autoD23DD02F_ae) || (autoD23DD02F_ai <= 0 && lv_itPlayer >= autoD23DD02F_ae) ) ; lv_itPlayer += autoD23DD02F_ai ) {
        if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
            libMuHS_gf_ARM_HeroPickUIDisplayForPlayer(lv_itPlayer);
        }

    }
    libMuHS_gf_ARM_HeroPickUIDisplayForPlayer(libCore_gv_oBSERVER_ObserverUIPlayer);
    DialogControlSetEnabled(libMuHS_gv_aRM_HeroPickPanelUI.lv_pickHeroPanel, PlayerGroupAll(), true);
    DialogSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_dialog, PlayerGroupAll(), true);
    UISetWorldVisible(PlayerGroupAll(), false);
    DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_countdownLabel, PlayerGroupAll(), true);
    TextExpressionSetToken("Param/Expression/lib_MuHS_294DC7B3", "A", IntToText(libMuHS_gv_aRM_TeamComp_PickHeroTime_C));
    libNtve_gf_SetDialogItemText(libMuHS_gv_aRM_HeroPickPanelUI.lv_countdownLabel, TextExpressionAssemble("Param/Expression/lib_MuHS_294DC7B3"), PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(libMuHS_gv_aRM_HeroPickPanelUI.lv_countdownLabel, "ShufflePick_CountdownLabel", PlayerGroupAll());
    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_ArenaMode)) {
        DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_arenaModeTitlePanel, PlayerGroupAll(), true);
        DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_nonArenaModeTitlePanel, PlayerGroupAll(), false);
        TextExpressionSetToken("Param/Expression/lib_MuHS_ADAE4D02", "B", IntToText(libMuHS_gv_iGHS_RoundNumber));
        libNtve_gf_SetDialogItemText(libMuHS_gv_aRM_HeroPickPanelUI.lv_roundLabel, TextExpressionAssemble("Param/Expression/lib_MuHS_ADAE4D02"), PlayerGroupAll());
    }
    else {
        DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_nonArenaModeTitlePanel, PlayerGroupAll(), true);
        DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_nonArenaModeTitlePanel, PlayerGroupSingle(libCore_gv_oBSERVER_ObserverUIPlayer), false);
        DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_arenaModeTitlePanel, PlayerGroupAll(), false);
    }
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, "ArenaHeroSelect", c_soundtrackCueAny, c_soundtrackIndexAny, false);
    SoundPlayForPlayer(SoundLink("UI_BNet_Draft_Countdown_Start", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("UI_BNet_Arena_Crowd_Cheer_HeroSelect_Start", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("UI_BNet_Arena_Crowd_Walla_HeroSelect", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    lv_crowdSound = SoundLastPlayed();
    Wait(1.0, c_timeGame);
    autoFF9A99CE_ae = libCore_gv_bALMaxPlayers;
    autoFF9A99CE_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoFF9A99CE_ai >= 0 && lv_itPlayer <= autoFF9A99CE_ae) || (autoFF9A99CE_ai <= 0 && lv_itPlayer >= autoFF9A99CE_ae) ) ; lv_itPlayer += autoFF9A99CE_ai ) {
        if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused) && (PlayerType(lv_itPlayer) != c_playerTypeUser)) {
            libMuHS_gv_aRM_HeroPickHeroButtonPickedIndex[lv_itPlayer] = RandomInt(1, libMuHS_gv_aRM_TeamComp_PickHeroHeroesCount_C);
            libMuHS_gv_aRM_HeroPickReady[lv_itPlayer] = true;
            libMuHS_gf_IGHS_SetHeroSkinAndMount(lv_itPlayer);
        }

    }
    autoF1780DCB_ae = libCore_gv_bALMaxPlayers;
    autoF1780DCB_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoF1780DCB_ai >= 0 && lv_itPlayer <= autoF1780DCB_ae) || (autoF1780DCB_ai <= 0 && lv_itPlayer >= autoF1780DCB_ae) ) ; lv_itPlayer += autoF1780DCB_ai ) {
        libMuHS_gf_ARM_UpdateHeroPickPanelForPlayer(lv_itPlayer);
    }
    libMuHS_gf_ARM_UpdateHeroPickPanelForPlayer(libCore_gv_oBSERVER_ObserverUIPlayer);
    autoC5FFA20C_ae = 1;
    autoC5FFA20C_ai = -1;
    libMuHS_gv_aRM_HeroPickCountDownCurrent = libMuHS_gv_aRM_TeamComp_PickHeroTime_C;
    for ( ; ( (autoC5FFA20C_ai >= 0 && libMuHS_gv_aRM_HeroPickCountDownCurrent <= autoC5FFA20C_ae) || (autoC5FFA20C_ai <= 0 && libMuHS_gv_aRM_HeroPickCountDownCurrent >= autoC5FFA20C_ae) ) ; libMuHS_gv_aRM_HeroPickCountDownCurrent += autoC5FFA20C_ai ) {
        if ((libMuHS_gf_ARM_HeroPickAllReady() == true)) {
            break;
        }

        while ((libMuHS_gv_iGHS_PauseTimer == true)) {
            Wait(1.0, c_timeGame);
        }
        if ((libMuHS_gv_aRM_HeroPickCountDownCurrent == 11)) {
            SoundPlayForPlayer(SoundLink("UI_BNet_Draft_Countdown_10Sec", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }
        else {
            SoundPlayForPlayer(SoundLink("UI_BNet_Arena_SelectionCountdown_Increment", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        }
        if ((libMuHS_gv_aRM_HeroPickCountDownCurrent == 5)) {
            libNtve_gf_SetDialogItemStyle(libMuHS_gv_aRM_HeroPickPanelUI.lv_countdownLabel, "ShufflePick_CountdownLabelWarning", PlayerGroupAll());
        }

        TextExpressionSetToken("Param/Expression/lib_MuHS_8843D5F7", "A", IntToText(libMuHS_gv_aRM_HeroPickCountDownCurrent));
        libNtve_gf_SetDialogItemText(libMuHS_gv_aRM_HeroPickPanelUI.lv_countdownLabel, TextExpressionAssemble("Param/Expression/lib_MuHS_8843D5F7"), PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    libMuHS_gv_aRM_HeroPickLocked = true;
    if ((libMuHS_gv_iGHS_AllHeroesPickedSound != null)) {
        SoundPlayForPlayer(libMuHS_gv_iGHS_AllHeroesPickedSound, c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    }

    autoBAE0BC4B_ae = libCore_gv_bALMaxPlayers;
    autoBAE0BC4B_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoBAE0BC4B_ai >= 0 && lv_itPlayer <= autoBAE0BC4B_ae) || (autoBAE0BC4B_ai <= 0 && lv_itPlayer >= autoBAE0BC4B_ae) ) ; lv_itPlayer += autoBAE0BC4B_ai ) {
        if ((PlayerStatus(lv_itPlayer) == c_playerStatusUnused)) {
            continue;
        }

        if ((libMuHS_gv_aRM_HeroPickHeroButtonPickedIndex[lv_itPlayer] == 0)) {
            libMuHS_gv_aRM_HeroPickHeroButtonPickedIndex[lv_itPlayer] = RandomInt(1, libMuHS_gv_aRM_TeamComp_PickHeroHeroesCount_C);
            libMuHS_gf_IGHS_SetHeroSkinAndMount(lv_itPlayer);
        }
        else {
            if ((libMuHS_gv_aRM_HeroPickHeroButtonPickedIndex[lv_itPlayer] != 0) && (libMuHS_gv_aRM_HeroPickReady[lv_itPlayer] == false)) {
                libMuHS_gf_IGHS_SetHeroSkinAndMount(lv_itPlayer);
            }

        }
        libMuHS_gv_aRM_HeroPickReady[lv_itPlayer] = true;
        libMuHS_gf_ARM_UpdateHeroPickPanelForPlayer(lv_itPlayer);
    }
    libMuHS_gf_ARM_UpdateHeroPickPanelForPlayer(libCore_gv_oBSERVER_ObserverUIPlayer);
    libMuHS_gf_ARM_UpdateHeroPicked();
    DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_countdownLabel, PlayerGroupAll(), false);
    SoundPlayForPlayer(SoundLink("UI_BNet_Draft_Countdown", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_finalCountdownFrame, PlayerGroupAll(), true);
    Wait(7.25, c_timeGame);
    DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_finalCountdownFrame, PlayerGroupAll(), false);
    DialogSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_dialog, PlayerGroupAll(), false);
    TriggerEnable(libMuHS_gt_IGHS_HeroPickUIHeroButtonClicked, false);
    TriggerEnable(libMuHS_gt_IGHS_HeroPickUIReadyButtonClicked, false);
    TriggerEnable(libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked, false);
    TriggerEnable(libMuHS_gt_IGHS_HeroPickUIDebugEnableCrazyButton, false);
    TriggerEnable(libMuHS_gt_IGHS_HeroPickCrazyMode, false);
    SoundStop(lv_crowdSound, true);
    SoundtrackStopCurrent(PlayerGroupAll(), c_soundtrackCategoryAmbience, true);
    SoundtrackPlay(PlayerGroupAll(), c_soundtrackCategoryAmbience, libCore_gv_mAPMapAmbience, c_soundtrackCueAny, c_soundtrackIndexAny, false);
    UISetWorldVisible(PlayerGroupAll(), true);
    DialogControlSetVisible(libUIUI_gv_uIObserverUI.lv_mainPanel, PlayerGroupSingle(libCore_gv_oBSERVER_ObserverUIPlayer), true);
    CinematicFade(true, 0.5, c_fadeStyleNormal, Color(0.00, 0.00, 0.00), 0.0, false);
}

void libMuHS_gf_IGHS_SetHeroSkinAndMount (int lp_player) {
    // Implementation
    libGame_gv_players[lp_player].lv_heroIndex = libMuHS_gv_aRM_HeroesForPick[lp_player][libMuHS_gv_aRM_HeroPickHeroButtonPickedIndex[lp_player]];
    libCore_gf_DataClearHeroDataAtIndex(lp_player);
    libCore_gf_DataLoadHeroDataIntoIndex(libCore_gf_GetHeroFromIndex(libGame_gv_players[lp_player].lv_heroIndex), lp_player);
    if ((libGame_gv_randomizeMountsAndSkins == true)) {
        libGame_gf_HeroSelectionRandomlyPickSkin(lp_player);
        libGame_gf_HeroSelectionRandomlyPickMount(lp_player);
    }
    else {
        libMuHS_gf_IGHS_SetSkinforPlayerUsingCuratedList(lp_player);
        libMuHS_gf_IGHS_SetMountforPlayerUsingCuratedList(lp_player);
    }
}

void libMuHS_gf_MuteUnmuteSoundChannelsNotUsedForHeroSelection (bool lp_muteUnmute) {
    // Implementation
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryVoice, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryBuild, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySAmbient, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryUser11, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAlert, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMission, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryFoley, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryMovie, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryDoodad, lp_muteUnmute);
    SoundChannelMute(PlayerGroupAll(), c_soundCategorySpell, lp_muteUnmute);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Map Initialization - Set Heroes Callback
//--------------------------------------------------------------------------------------------------
bool libMuHS_gt_MapInitializationSetHeroesCallback_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_pickingHeroesCallback = libMuHS_gt_IGHS_PickingHeroesArenaMode;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMuHS_gt_MapInitializationSetHeroesCallback_Init () {
    libMuHS_gt_MapInitializationSetHeroesCallback = TriggerCreate("libMuHS_gt_MapInitializationSetHeroesCallback_Func");
    TriggerAddEventMapInit(libMuHS_gt_MapInitializationSetHeroesCallback);
}

//--------------------------------------------------------------------------------------------------
// Trigger: IGHS_HeroPickUIHeroButtonClicked
//--------------------------------------------------------------------------------------------------
bool libMuHS_gt_IGHS_HeroPickUIHeroButtonClicked_Func (bool testConds, bool runActions) {
    int autoE3A9A7C5_ae;
    int autoE3A9A7C5_ai;
    int autoDFEFC3A6_ae;
    int autoDFEFC3A6_ai;
    int auto32A2476B_ae;
    int auto32A2476B_ai;

    // Variable Declarations
    int lv_itLineIndex;
    int lv_itButtonIndex;
    int lv_forPlayer;
    int lv_itPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventPlayer() >= 1))) {
            return false;
        }

        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE3A9A7C5_ae = libCore_gv_bALMaxPlayersOnATeam;
    autoE3A9A7C5_ai = 1;
    lv_itLineIndex = 1;
    for ( ; ( (autoE3A9A7C5_ai >= 0 && lv_itLineIndex <= autoE3A9A7C5_ae) || (autoE3A9A7C5_ai <= 0 && lv_itLineIndex >= autoE3A9A7C5_ae) ) ; lv_itLineIndex += autoE3A9A7C5_ai ) {
        autoDFEFC3A6_ae = libMuHS_gv_aRM_TeamComp_PickHeroHeroesCount_C;
        autoDFEFC3A6_ai = 1;
        lv_itButtonIndex = 1;
        for ( ; ( (autoDFEFC3A6_ai >= 0 && lv_itButtonIndex <= autoDFEFC3A6_ae) || (autoDFEFC3A6_ai <= 0 && lv_itButtonIndex >= autoDFEFC3A6_ae) ) ; lv_itButtonIndex += autoDFEFC3A6_ai ) {
            if ((EventDialogControl() == libMuHS_gv_aRM_HeroPickPanelUI.lv_playerHeroButton[lv_itLineIndex][lv_itButtonIndex])) {
                lv_forPlayer = libMuHS_gf_ARM_PlayerForHeroPickPanelLine(EventPlayer(), lv_itLineIndex);
                if ((lv_forPlayer != EventPlayer())) {
                    TriggerDebugOutput(1, StringExternal("Param/Value/lib_MuHS_20A8B947"), true);
                    return true;
                }

                libMuHS_gv_aRM_HeroPickHeroButtonPickedIndex[lv_forPlayer] = lv_itButtonIndex;
                auto32A2476B_ae = libCore_gv_bALMaxPlayers;
                auto32A2476B_ai = 1;
                lv_itPlayer = 1;
                for ( ; ( (auto32A2476B_ai >= 0 && lv_itPlayer <= auto32A2476B_ae) || (auto32A2476B_ai <= 0 && lv_itPlayer >= auto32A2476B_ae) ) ; lv_itPlayer += auto32A2476B_ai ) {
                    libMuHS_gf_ARM_UpdateHeroPickPanelForPlayer(lv_itPlayer);
                }
                libMuHS_gf_ARM_UpdateHeroPickPanelForPlayer(libCore_gv_oBSERVER_ObserverUIPlayer);
                return true;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMuHS_gt_IGHS_HeroPickUIHeroButtonClicked_Init () {
    libMuHS_gt_IGHS_HeroPickUIHeroButtonClicked = TriggerCreate("libMuHS_gt_IGHS_HeroPickUIHeroButtonClicked_Func");
    TriggerEnable(libMuHS_gt_IGHS_HeroPickUIHeroButtonClicked, false);
    TriggerAddEventDialogControl(libMuHS_gt_IGHS_HeroPickUIHeroButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: IGHS_HeroPickUIReadyButtonClicked
//--------------------------------------------------------------------------------------------------
bool libMuHS_gt_IGHS_HeroPickUIReadyButtonClicked_Func (bool testConds, bool runActions) {
    int auto2FFE9724_ae;
    int auto2FFE9724_ai;
    int auto216A93C5_ae;
    int auto216A93C5_ai;

    // Variable Declarations
    int lv_itLineIndex;
    int lv_forPlayer;
    int lv_itPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventPlayer() >= 1))) {
            return false;
        }

        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((libMuHS_gf_ARM_HeroPickAllReady() == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2FFE9724_ae = libCore_gv_bALMaxPlayersOnATeam;
    auto2FFE9724_ai = 1;
    lv_itLineIndex = 1;
    for ( ; ( (auto2FFE9724_ai >= 0 && lv_itLineIndex <= auto2FFE9724_ae) || (auto2FFE9724_ai <= 0 && lv_itLineIndex >= auto2FFE9724_ae) ) ; lv_itLineIndex += auto2FFE9724_ai ) {
        if ((EventDialogControl() == libMuHS_gv_aRM_HeroPickPanelUI.lv_playerReadyButton[lv_itLineIndex])) {
            lv_forPlayer = libMuHS_gf_ARM_PlayerForHeroPickPanelLine(EventPlayer(), lv_itLineIndex);
            if ((lv_forPlayer != EventPlayer())) {
                TriggerDebugOutput(1, StringExternal("Param/Value/lib_MuHS_8CE37250"), true);
                return true;
            }

            if ((libMuHS_gv_aRM_HeroPickReady[lv_forPlayer] == true)) {
                return true;
            }

            libMuHS_gv_aRM_HeroPickReady[lv_forPlayer] = !(libMuHS_gv_aRM_HeroPickReady[lv_forPlayer]);
            SoundPlayForPlayer(SoundLink("UI_BNet_Arena_Crowd_Cheer_HeroSelected", -1), c_maxPlayers, PlayerGroupSingle(lv_forPlayer), 100.0, 0.0);
            SoundPlayForPlayer(SoundLink("UI_BNet_Arena_HeroConfirm_Ally", -1), c_maxPlayers, PlayerGroupAlliance(c_playerGroupAlly, lv_forPlayer), 100.0, 0.0);
            libMuHS_gf_IGHS_SetHeroSkinAndMount(lv_forPlayer);
            auto216A93C5_ae = libCore_gv_bALMaxPlayers;
            auto216A93C5_ai = 1;
            lv_itPlayer = 1;
            for ( ; ( (auto216A93C5_ai >= 0 && lv_itPlayer <= auto216A93C5_ae) || (auto216A93C5_ai <= 0 && lv_itPlayer >= auto216A93C5_ae) ) ; lv_itPlayer += auto216A93C5_ai ) {
                libMuHS_gf_ARM_UpdateHeroPickPanelForPlayer(lv_itPlayer);
            }
            libMuHS_gf_ARM_UpdateHeroPickPanelForPlayer(libCore_gv_oBSERVER_ObserverUIPlayer);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMuHS_gt_IGHS_HeroPickUIReadyButtonClicked_Init () {
    libMuHS_gt_IGHS_HeroPickUIReadyButtonClicked = TriggerCreate("libMuHS_gt_IGHS_HeroPickUIReadyButtonClicked_Func");
    TriggerEnable(libMuHS_gt_IGHS_HeroPickUIReadyButtonClicked, false);
    TriggerAddEventDialogControl(libMuHS_gt_IGHS_HeroPickUIReadyButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: IGHS_HeroPickUIDebugCrazyButtonClicked
//--------------------------------------------------------------------------------------------------
bool libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked_Func (bool testConds, bool runActions) {
    int auto6D268059_ae;
    int auto6D268059_ai;
    int auto80D117FE_ae;
    int auto80D117FE_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itHero;
    int lv_heroPicked;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventPlayer() >= 1))) {
            return false;
        }

        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((EventDialogControl() == libMuHS_gv_aRM_HeroPickPanelUI.lv_debugCrazyBtn))) {
            return false;
        }

        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libMuHS_gv_aRM_TeamComp_FunComp = true;
    libMuHS_gf_ARM_RandomHeroesToPick();
    auto6D268059_ae = libCore_gv_bALMaxPlayers;
    auto6D268059_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto6D268059_ai >= 0 && lv_itPlayer <= auto6D268059_ae) || (auto6D268059_ai <= 0 && lv_itPlayer >= auto6D268059_ae) ) ; lv_itPlayer += auto6D268059_ai ) {
        libMuHS_gf_IGHS_SetHeroSkinAndMount(lv_itPlayer);
    }
    auto80D117FE_ae = libCore_gv_bALMaxPlayers;
    auto80D117FE_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto80D117FE_ai >= 0 && lv_itPlayer <= auto80D117FE_ae) || (auto80D117FE_ai <= 0 && lv_itPlayer >= auto80D117FE_ae) ) ; lv_itPlayer += auto80D117FE_ai ) {
        libMuHS_gf_ARM_UpdateHeroPickPanelForPlayer(lv_itPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked_Init () {
    libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked = TriggerCreate("libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked_Func");
    TriggerEnable(libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked, false);
    TriggerAddEventDialogControl(libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: IGHS_HeroPickCrazyMode
//--------------------------------------------------------------------------------------------------
bool libMuHS_gt_IGHS_HeroPickCrazyMode_Func (bool testConds, bool runActions) {
    int auto624AD94D_ae;
    int auto624AD94D_ai;
    int autoB8296F4F_ae;
    int autoB8296F4F_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itHero;
    int lv_heroPicked;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutputEnable(false);
    libMuHS_gv_aRM_TeamComp_FunComp = true;
    libMuHS_gf_ARM_RandomHeroesToPick();
    auto624AD94D_ae = libCore_gv_bALMaxPlayers;
    auto624AD94D_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto624AD94D_ai >= 0 && lv_itPlayer <= auto624AD94D_ae) || (auto624AD94D_ai <= 0 && lv_itPlayer >= auto624AD94D_ae) ) ; lv_itPlayer += auto624AD94D_ai ) {
        libMuHS_gf_IGHS_SetHeroSkinAndMount(lv_itPlayer);
    }
    autoB8296F4F_ae = libCore_gv_bALMaxPlayers;
    autoB8296F4F_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoB8296F4F_ai >= 0 && lv_itPlayer <= autoB8296F4F_ae) || (autoB8296F4F_ai <= 0 && lv_itPlayer >= autoB8296F4F_ae) ) ; lv_itPlayer += autoB8296F4F_ai ) {
        libMuHS_gf_ARM_UpdateHeroPickPanelForPlayer(lv_itPlayer);
    }
    TriggerDebugOutputEnable(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMuHS_gt_IGHS_HeroPickCrazyMode_Init () {
    libMuHS_gt_IGHS_HeroPickCrazyMode = TriggerCreate("libMuHS_gt_IGHS_HeroPickCrazyMode_Func");
    TriggerEnable(libMuHS_gt_IGHS_HeroPickCrazyMode, false);
    TriggerAddEventKeyPressed(libMuHS_gt_IGHS_HeroPickCrazyMode, c_playerAny, c_keyC, true, c_keyModifierStateRequire, c_keyModifierStateRequire, c_keyModifierStateRequire);
}

//--------------------------------------------------------------------------------------------------
// Trigger: IGHS_HeroPickUIDebugCrazyButtonClicked1
//--------------------------------------------------------------------------------------------------
bool libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked1_Func (bool testConds, bool runActions) {
    int auto05BFC66F_ae;
    int auto05BFC66F_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itHero;
    int lv_heroPicked;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventPlayer() >= 1))) {
            return false;
        }

        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!(((EventDialogControl() == libMuHS_gv_aRM_HeroPickPanelUI.lv_debugCrazyBtn) || (EventChatMessage(false) == "cccc")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto05BFC66F_ae = libCore_gv_bALMaxPlayers;
    auto05BFC66F_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto05BFC66F_ai >= 0 && lv_itPlayer <= auto05BFC66F_ae) || (auto05BFC66F_ai <= 0 && lv_itPlayer >= auto05BFC66F_ae) ) ; lv_itPlayer += auto05BFC66F_ai ) {
        libMuHS_gf_ARM_UpdateHeroPickPanelForPlayer(lv_itPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked1_Init () {
    libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked1 = TriggerCreate("libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked1_Func");
    TriggerEnable(libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked1, false);
    TriggerAddEventChatMessage(libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked1, c_playerAny, "cccc", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: IGHS_HeroPickUIDebugCrazyButtonClicked2
//--------------------------------------------------------------------------------------------------
bool libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked2_Func (bool testConds, bool runActions) {
    int autoA0B31984_ae;
    int autoA0B31984_ai;
    int auto9D6DF325_ae;
    int auto9D6DF325_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itHero;
    int lv_heroPicked;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventPlayer() >= 1))) {
            return false;
        }

        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA0B31984_ae = 5;
    autoA0B31984_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoA0B31984_ai >= 0 && lv_itPlayer <= autoA0B31984_ae) || (autoA0B31984_ai <= 0 && lv_itPlayer >= autoA0B31984_ae) ) ; lv_itPlayer += autoA0B31984_ai ) {
        libMuHS_gv_aRM_HeroPickHeroButtonPickedIndex[lv_itPlayer] = StringToInt(StringSub(StringWord(EventChatMessage(false), 2), lv_itPlayer, lv_itPlayer));
    }
    auto9D6DF325_ae = libCore_gv_bALMaxPlayers;
    auto9D6DF325_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto9D6DF325_ai >= 0 && lv_itPlayer <= auto9D6DF325_ae) || (auto9D6DF325_ai <= 0 && lv_itPlayer >= auto9D6DF325_ae) ) ; lv_itPlayer += auto9D6DF325_ai ) {
        libMuHS_gf_ARM_UpdateHeroPickPanelForPlayer(lv_itPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked2_Init () {
    libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked2 = TriggerCreate("libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked2_Func");
    TriggerAddEventChatMessage(libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked2, c_playerAny, "dddd", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: IGHS_HeroPickUIDebugRerollButtonClicked
//--------------------------------------------------------------------------------------------------
bool libMuHS_gt_IGHS_HeroPickUIDebugRerollButtonClicked_Func (bool testConds, bool runActions) {
    int auto0BE4E0F2_ae;
    int auto0BE4E0F2_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventPlayer() >= 1))) {
            return false;
        }

        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((EventDialogControl() == libMuHS_gv_aRM_HeroPickPanelUI.lv_debugRerollBtn))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libMuHS_gf_ARM_RandomTeamComp();
    libMuHS_gf_ARM_RandomHeroesToPick();
    auto0BE4E0F2_ae = libCore_gv_bALMaxPlayers;
    auto0BE4E0F2_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto0BE4E0F2_ai >= 0 && lv_itPlayer <= auto0BE4E0F2_ae) || (auto0BE4E0F2_ai <= 0 && lv_itPlayer >= auto0BE4E0F2_ae) ) ; lv_itPlayer += auto0BE4E0F2_ai ) {
        libMuHS_gf_ARM_UpdateHeroPickPanelForPlayer(lv_itPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMuHS_gt_IGHS_HeroPickUIDebugRerollButtonClicked_Init () {
    libMuHS_gt_IGHS_HeroPickUIDebugRerollButtonClicked = TriggerCreate("libMuHS_gt_IGHS_HeroPickUIDebugRerollButtonClicked_Func");
    TriggerEnable(libMuHS_gt_IGHS_HeroPickUIDebugRerollButtonClicked, false);
    TriggerAddEventDialogControl(libMuHS_gt_IGHS_HeroPickUIDebugRerollButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: IGHS_HeroPickUIDebugEnableCrazyButton
//--------------------------------------------------------------------------------------------------
bool libMuHS_gt_IGHS_HeroPickUIDebugEnableCrazyButton_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_debugCrazyBtn, libCore_gv_playerGroupFromPlayer[EventPlayer()], true);
    DialogControlSetVisible(libMuHS_gv_aRM_HeroPickPanelUI.lv_debugRerollBtn, libCore_gv_playerGroupFromPlayer[EventPlayer()], true);
    libMuHS_gv_aRM_HeroPickCountDownCurrent = 200;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMuHS_gt_IGHS_HeroPickUIDebugEnableCrazyButton_Init () {
    libMuHS_gt_IGHS_HeroPickUIDebugEnableCrazyButton = TriggerCreate("libMuHS_gt_IGHS_HeroPickUIDebugEnableCrazyButton_Func");
    TriggerEnable(libMuHS_gt_IGHS_HeroPickUIDebugEnableCrazyButton, false);
    TriggerAddEventChatMessage(libMuHS_gt_IGHS_HeroPickUIDebugEnableCrazyButton, c_playerAny, "-crazy", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: IGHS_Picking Heroes (Arena Mode)
//--------------------------------------------------------------------------------------------------
bool libMuHS_gt_IGHS_PickingHeroesArenaMode_Func (bool testConds, bool runActions) {
    int autoD9663975_ae;
    int autoD9663975_ai;
    int auto83E21646_ae;
    int auto83E21646_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libMuHS_gf_MuteUnmuteSoundChannelsNotUsedForHeroSelection(true);
    libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("MX_Brawl_LockIn", PlayerGroupAll());
    libMuHS_gf_ARM_CalculatePlayerSlots();
    libGame_gv_heroPickDone = false;
    libAIAI_gf_HeroAIGeneralPreInit();
    if ((libMuHS_gv_iGHS_CuratedHeroInitializationCallback != null)) {
        TriggerExecute(libMuHS_gv_iGHS_CuratedHeroInitializationCallback, false, true);
    }
    else {
        libMuHS_gf_ARM_RandomTeamComp();
        libMuHS_gf_ARM_RandomHeroesToPick();
    }
    autoD9663975_ae = libCore_gv_bALMaxPlayers;
    autoD9663975_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoD9663975_ai >= 0 && lv_itPlayer <= autoD9663975_ae) || (autoD9663975_ai <= 0 && lv_itPlayer >= autoD9663975_ae) ) ; lv_itPlayer += autoD9663975_ai ) {
        libMuHS_gv_aRM_HeroPickReady[lv_itPlayer] = false;
    }
    auto83E21646_ae = libCore_gv_bALMaxPlayers;
    auto83E21646_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto83E21646_ai >= 0 && lv_itPlayer <= auto83E21646_ae) || (auto83E21646_ai <= 0 && lv_itPlayer >= auto83E21646_ae) ) ; lv_itPlayer += auto83E21646_ai ) {
        libMuHS_gv_aRM_HeroPickHeroButtonPickedIndex[lv_itPlayer] = 0;
    }
    libMuHS_gv_aRM_HeroPickLocked = false;
    libMuHS_gf_ARM_HeroPickUIDisplay();
    libGame_gv_heroPickDone = true;
    libMuHS_gf_MuteUnmuteSoundChannelsNotUsedForHeroSelection(false);
    libSond_gf_SoundtrackPlayMapSoundtrackAsDefaultSoundtrackForAllPlayers();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMuHS_gt_IGHS_PickingHeroesArenaMode_Init () {
    libMuHS_gt_IGHS_PickingHeroesArenaMode = TriggerCreate("libMuHS_gt_IGHS_PickingHeroesArenaMode_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Role Options For Player
//--------------------------------------------------------------------------------------------------
bool libMuHS_gt_SetRoleOptionsForPlayer_Func (bool testConds, bool runActions) {
    string autoC0624CD0_val;
    int auto40DC370A_ae;
    int auto40DC370A_ai;

    // Variable Declarations
    string lv_role;
    int lv_player;
    int lv_heroClass;
    int lv_itPlayer;

    // Variable Initialization
    lv_role = "";
    lv_heroClass = c_heroRoleWarrior;

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = StringToInt(StringWord(EventChatMessage(false), 2));
    lv_role = StringWord(EventChatMessage(false), 3);
    autoC0624CD0_val = lv_role;
    if (autoC0624CD0_val == "Warrior") {
        lv_heroClass = c_heroRoleWarrior;
    }
    else if (autoC0624CD0_val == "Specialist") {
        lv_heroClass = c_heroRoleSpecialist;
    }
    else if (autoC0624CD0_val == "Support") {
        lv_heroClass = c_heroRoleSupport;
    }
    else if (autoC0624CD0_val == "Assassin") {
        lv_heroClass = c_heroRoleDamage;
    }
    else {
    }
    libMuHS_gv_aRM_TeamComp_Classes[libMuHS_gv_aRM_TeamComp_PlayerSlots[lv_player]] = lv_heroClass;
    libMuHS_gf_ARM_RandomHeroesToPickPerPlayer(lv_player);
    auto40DC370A_ae = libCore_gv_bALMaxPlayers;
    auto40DC370A_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto40DC370A_ai >= 0 && lv_itPlayer <= auto40DC370A_ae) || (auto40DC370A_ai <= 0 && lv_itPlayer >= auto40DC370A_ae) ) ; lv_itPlayer += auto40DC370A_ai ) {
        libMuHS_gf_ARM_UpdateHeroPickPanelForPlayer(lv_itPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMuHS_gt_SetRoleOptionsForPlayer_Init () {
    libMuHS_gt_SetRoleOptionsForPlayer = TriggerCreate("libMuHS_gt_SetRoleOptionsForPlayer_Func");
    TriggerAddEventChatMessage(libMuHS_gt_SetRoleOptionsForPlayer, c_playerAny, "-roleoption", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Set Hero Options For Player
//--------------------------------------------------------------------------------------------------
bool libMuHS_gt_SetHeroOptionsForPlayer_Func (bool testConds, bool runActions) {
    int autoDFB59012_ae;
    int autoDFB59012_ai;

    // Variable Declarations
    string lv_hero1;
    string lv_hero2;
    string lv_hero3;
    int lv_player;
    int lv_itPlayer;
    string lv_heroUnitType1;

    // Variable Initialization
    lv_hero1 = "";
    lv_hero2 = "";
    lv_hero3 = "";

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = StringToInt(StringWord(EventChatMessage(false), 2));
    lv_hero1 = StringWord(EventChatMessage(false), 3);
    lv_hero2 = StringWord(EventChatMessage(false), 4);
    lv_hero3 = StringWord(EventChatMessage(false), 5);
    if ((lv_hero1 == "")) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_MuHS_5D0EDCB1"), true);
        return true;
    }

    if ((lv_hero2 == "")) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_MuHS_0DD0EFBA"), true);
        return true;
    }

    if ((lv_hero3 == "")) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_MuHS_3C158632"), true);
        return true;
    }

    libMuHS_gv_aRM_HeroesForPick[lv_player][1] = libCore_gf_GetIndexFromHero((lv_hero1));
    libMuHS_gv_aRM_HeroesForPick[lv_player][2] = libCore_gf_GetIndexFromHero((lv_hero2));
    libMuHS_gv_aRM_HeroesForPick[lv_player][3] = libCore_gf_GetIndexFromHero((lv_hero3));
    autoDFB59012_ae = libCore_gv_bALMaxPlayers;
    autoDFB59012_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoDFB59012_ai >= 0 && lv_itPlayer <= autoDFB59012_ae) || (autoDFB59012_ai <= 0 && lv_itPlayer >= autoDFB59012_ae) ) ; lv_itPlayer += autoDFB59012_ai ) {
        libMuHS_gf_ARM_UpdateHeroPickPanelForPlayer(lv_itPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMuHS_gt_SetHeroOptionsForPlayer_Init () {
    libMuHS_gt_SetHeroOptionsForPlayer = TriggerCreate("libMuHS_gt_SetHeroOptionsForPlayer_Func");
    TriggerAddEventChatMessage(libMuHS_gt_SetHeroOptionsForPlayer, c_playerAny, "-herooption", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Pause Hero Selection Timer
//--------------------------------------------------------------------------------------------------
bool libMuHS_gt_PauseHeroSelectionTimer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libMuHS_gv_iGHS_PauseTimer == false)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_MuHS_358747D5"), true);
        libMuHS_gv_iGHS_PauseTimer = true;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_MuHS_00FE7DCA"), true);
        libMuHS_gv_iGHS_PauseTimer = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMuHS_gt_PauseHeroSelectionTimer_Init () {
    libMuHS_gt_PauseHeroSelectionTimer = TriggerCreate("libMuHS_gt_PauseHeroSelectionTimer_Func");
    TriggerAddEventChatMessage(libMuHS_gt_PauseHeroSelectionTimer, c_playerAny, "-pauseighs", false);
}

void libMuHS_InitTriggers () {
    libMuHS_gt_MapInitializationSetHeroesCallback_Init();
    libMuHS_gt_IGHS_HeroPickUIHeroButtonClicked_Init();
    libMuHS_gt_IGHS_HeroPickUIReadyButtonClicked_Init();
    libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked_Init();
    libMuHS_gt_IGHS_HeroPickCrazyMode_Init();
    libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked1_Init();
    libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked2_Init();
    libMuHS_gt_IGHS_HeroPickUIDebugRerollButtonClicked_Init();
    libMuHS_gt_IGHS_HeroPickUIDebugEnableCrazyButton_Init();
    libMuHS_gt_IGHS_PickingHeroesArenaMode_Init();
    libMuHS_gt_SetRoleOptionsForPlayer_Init();
    libMuHS_gt_SetHeroOptionsForPlayer_Init();
    libMuHS_gt_PauseHeroSelectionTimer_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libMuHS_InitLib_completed = false;

void libMuHS_InitLib () {
    if (libMuHS_InitLib_completed) {
        return;
    }

    libMuHS_InitLib_completed = true;

    libMuHS_InitLibraries();
    libMuHS_InitVariables();
    libMuHS_InitTriggers();
}

