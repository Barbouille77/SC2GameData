include "TriggerLibs/HeroesLib"

//--------------------------------------------------------------------------------------------------
// Library: In Game Hero Selection
//--------------------------------------------------------------------------------------------------
// Constants
const fixed libMuHS_gv_aRM_TeamComp_CrazyChance_C = 5.0;
const fixed libMuHS_gv_aRM_TeamComp_AllAssassinChance_C = 4.08;
const fixed libMuHS_gv_aRM_TeamComp_AllSpecialistChance_C = 1.97;
const int libMuHS_gv_aRM_TeamComp_PickHeroHeroesCount_C = 3;
const int libMuHS_gv_aRM_TeamComp_PickHeroTime_C = 30;
const int libMuHS_gv_aRM_TeamComp_MaxNumberOfWarriors_C = 2;
const int libMuHS_gv_iGHS_CuratedHeroCountMax = 100;
const int libMuHS_gv_iGHS_CuratedSkinCountMax = 100;
const int libMuHS_gv_iGHS_CuratedMountCountMax = 40;

// Structures
struct libMuHS_gs_IGHS_CuratedHero {
    string lv_heroLink;
    int lv_team;
};

struct libMuHS_gs_IGHS_CuratedSkin {
    string lv_skinLink;
    string lv_requiredHero;
    int lv_team;
};

struct libMuHS_gs_IGHS_CuratedMount {
    string lv_mountLink;
    int lv_team;
    string lv_requiredHero;
};

struct libMuHS_gs_ARM_HeroPickPanel {
    int lv_dialog;
    int lv_mainPanel;
    int lv_countdownLabel;
    int lv_finalCountdownFrame;
    int lv_roundLabel;
    int lv_arenaModeTitlePanel;
    int lv_nonArenaModeTitlePanel;
    int[libCore_gv_bALMaxTeams + 1] lv_teamRoundIndicatorFrame;
    int[libCore_gv_bALMaxTeams + 1][libCore_gv_bALMaxTeams + 1][3] lv_roundWinIndicatorImages;
    int lv_pickHeroPanel;
    int[libCore_gv_bALMaxPlayersOnATeam + 1] lv_playerHeroPanelPerPlayer;
    int[libCore_gv_bALMaxPlayersOnATeam + 1][libCore_gv_bALMaxPlayers + 1] lv_playerHeroPanelForPlayer;
    int[libCore_gv_bALMaxPlayersOnATeam + 1] lv_playerNameLabel;
    int[libCore_gv_bALMaxPlayersOnATeam + 1] lv_playerClassLabel;
    int[libCore_gv_bALMaxPlayersOnATeam + 1][libMuHS_gv_aRM_TeamComp_PickHeroHeroesCount_C + 1] lv_playerHeroButton;
    int[libCore_gv_bALMaxPlayersOnATeam + 1][libMuHS_gv_aRM_TeamComp_PickHeroHeroesCount_C + 1] lv_playerHeroButtonLabel;
    int[libCore_gv_bALMaxPlayersOnATeam + 1][libMuHS_gv_aRM_TeamComp_PickHeroHeroesCount_C + 1] lv_playerHeroButtonImage;
    int[libCore_gv_bALMaxPlayersOnATeam + 1][libMuHS_gv_aRM_TeamComp_PickHeroHeroesCount_C + 1] lv_playerHeroButtonBorder;
    int[libCore_gv_bALMaxPlayersOnATeam + 1][libMuHS_gv_aRM_TeamComp_PickHeroHeroesCount_C + 1] lv_playerHeroButtonBorderSelected;
    int[libCore_gv_bALMaxPlayersOnATeam + 1] lv_playerReadyButton;
    int[libCore_gv_bALMaxPlayersOnATeam + 1] lv_playerReadyLabel;
    int[libCore_gv_bALMaxPlayersOnATeam + 1] lv_heroContainerFrame;
    int[libCore_gv_bALMaxPlayersOnATeam + 1] lv_heroCutsceneFrame;
    int lv_abilitiesInfoButton;
    int lv_talentsInfoButton;
    int lv_mapMechanicPanel;
    int lv_mapMechanicImage;
    int lv_mapMechanicInfo;
    int lv_debugCrazyBtn;
    int lv_debugRerollBtn;
};

// Variable Declarations
bool libMuHS_gv_aRM_TeamComp_FunComp;
playergroup libMuHS_gv_aRM_TeamComp_CompTypes;
int libMuHS_gv_aRM_TeamComp_MaxNumberOfSupports_C;
int[11] libMuHS_gv_aRM_TeamComp_AvailableClasses;
int libMuHS_gv_aRM_TeamComp_AvailableClassesCount;
bool libMuHS_gv_aRM_CrazyModeAlreadyPlayed;
int[libCore_gv_bALMaxPlayersOnATeam + 1] libMuHS_gv_aRM_TeamComp_Classes;
int[libCore_gv_bALMaxPlayers + 1] libMuHS_gv_aRM_TeamComp_PlayerSlots;
bool libMuHS_gv_iGHS_NoCrazyCompositions;
bool libMuHS_gv_iGHS_UseSpecificHeroPool;
bool libMuHS_gv_iGHS_RequiresSupport;
int libMuHS_gv_iGHS_TeamComp_MaxNumberOfWarriors;
int libMuHS_gv_iGHS_TeamComp_MaxNumberOfSupports;
int[libCore_gv_bALMaxPlayers + 1][libMuHS_gv_aRM_TeamComp_PickHeroHeroesCount_C + 1] libMuHS_gv_aRM_HeroesForPick;
libMuHS_gs_IGHS_CuratedHero[libMuHS_gv_iGHS_CuratedHeroCountMax + 1] libMuHS_gv_iGHS_CuratedHeroes;
int libMuHS_gv_iGHS_CuratedHeroCount;
libMuHS_gs_IGHS_CuratedHero[libMuHS_gv_iGHS_CuratedHeroCountMax + 1] libMuHS_gv_iGHS_RemovedCuratedHeroes;
int libMuHS_gv_iGHS_RemovedCuratedHeroCount;
libMuHS_gs_IGHS_CuratedSkin[libMuHS_gv_iGHS_CuratedSkinCountMax + 1] libMuHS_gv_iGHS_CuratedSkins;
int libMuHS_gv_iGHS_CuratedSkinCount;
libMuHS_gs_IGHS_CuratedMount[libMuHS_gv_iGHS_CuratedMountCountMax + 1] libMuHS_gv_iGHS_CuratedMounts;
int libMuHS_gv_iGHS_CuratedMountCount;
bool libMuHS_gv_iGHS_IgnoreClassDuringCuratedHeroPick;
trigger libMuHS_gv_iGHS_CuratedHeroInitializationCallback;
libMuHS_gs_ARM_HeroPickPanel libMuHS_gv_aRM_HeroPickPanelUI;
int[libCore_gv_bALMaxPlayers + 1] libMuHS_gv_aRM_HeroPickHeroButtonPickedIndex;
bool[libCore_gv_bALMaxPlayers + 1] libMuHS_gv_aRM_HeroPickReady;
bool libMuHS_gv_aRM_HeroPickLocked;
int libMuHS_gv_aRM_HeroPickCountDownCurrent;
soundlink libMuHS_gv_iGHS_AllHeroesPickedSound;
bool libMuHS_gv_iGHS_PauseTimer;
int libMuHS_gv_iGHS_RoundNumber;

// Function Declarations
bool libMuHS_gf_ARM_HeroIsGoodForArenaMode (int lp_heroIndex, bool lp_crazyMode);
bool libMuHS_gf_ARM_TeamCompClassAvailable (int lp_role, int lp_teamCompCount);
int libMuHS_gf_ARM_TeamCompPlayerClass (int lp_player);
fixed libMuHS_gf_ARM_TeamComp_ClassWeight (int lp_class);
int libMuHS_gf_ARM_TeamComp_RandomAvailableClass ();
int libMuHS_gf_IGHS_SetClassAsAssassinOrSpecialist ();
void libMuHS_gf_ARM_TeamCompBuilder (int lp_numberOfWarriors, int lp_numberOfSupports, playergroup lp_playerSlot);
void libMuHS_gf_ARM_CalculatePlayerSlots ();
void libMuHS_gf_ARM_RandomTeamComp ();
void libMuHS_gf_ARM_RandomHeroesToPick ();
void libMuHS_gf_ARM_RandomHeroesToPickPerPlayer (int lp_player);
int libMuHS_gf_IGHS_GetCountofHeroPicksforTeam (int lp_heroIndex, int lp_teamIndex);
int libMuHS_gf_IGHS_GetClassofHerofromData (string lp_heroLink);
bool libMuHS_gf_IGHS_IsCuratedHeroinRemovedList (string lp_heroLink, int lp_team);
void libMuHS_gf_IGHS_AddCuratedHero (string lp_hero, int lp_team);
void libMuHS_gf_IGHS_CurateAllFlaggedHeroes ();
void libMuHS_gf_IGHS_RemoveCuratedHero (string lp_hero, int lp_team);
void libMuHS_gf_IGHS_SetPickOptionsforPlayerUsingCuratedList (int lp_playerIndex);
void libMuHS_gf_IGHS_SetPickOptionsforAllPlayersUsingCuratedList ();
void libMuHS_gf_IGHS_AddCuratedSkin (string lp_skin, string lp_heroThatUsesSkin, int lp_team);
void libMuHS_gf_IGHS_SetSkinforPlayerUsingCuratedList (int lp_playerIndex);
void libMuHS_gf_IGHS_SetSkinforAllPlayersUsingCuratedList ();
void libMuHS_gf_IGHS_AddCuratedMount (string lp_mount, string lp_hero, int lp_team);
void libMuHS_gf_IGHS_SetMountforPlayerUsingCuratedList (int lp_playerIndex);
void libMuHS_gf_IGHS_SetMountforAllPlayersUsingCuratedList ();
bool libMuHS_gf_ARM_HeroPickAllReady ();
int libMuHS_gf_ARM_PlayerForHeroPickPanelLine (int lp_player, int lp_lineIndex);
void libMuHS_gf_ARM_SetPlayerForHeroPickPanelLine (int lp_player, int lp_lineIndex, int lp_forPlayer);
void libMuHS_gf_ARM_HeroPickUIInit ();
void libMuHS_gf_IGHS_UpdateRoundWinIndicators (int lp_orderRoundScore, int lp_chaosRoundScore);
void libMuHS_gf_ARM_UpdateHeroPickPanelLineForPlayer (int lp_player, int lp_lineIndex);
void libMuHS_gf_ARM_UpdateHeroPickPanelForPlayer (int lp_player);
void libMuHS_gf_ARM_UpdateHeroPicked ();
void libMuHS_gf_ARM_HeroPickUIDisplayForPlayer (int lp_player);
void libMuHS_gf_ARM_HeroPickUIDisplay ();
void libMuHS_gf_IGHS_SetHeroSkinAndMount (int lp_player);
void libMuHS_gf_MuteUnmuteSoundChannelsNotUsedForHeroSelection (bool lp_muteUnmute);

// Trigger Declarations
trigger libMuHS_gt_MapInitializationSetHeroesCallback;
trigger libMuHS_gt_IGHS_HeroPickUIHeroButtonClicked;
trigger libMuHS_gt_IGHS_HeroPickUIReadyButtonClicked;
trigger libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked;
trigger libMuHS_gt_IGHS_HeroPickCrazyMode;
trigger libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked1;
trigger libMuHS_gt_IGHS_HeroPickUIDebugCrazyButtonClicked2;
trigger libMuHS_gt_IGHS_HeroPickUIDebugRerollButtonClicked;
trigger libMuHS_gt_IGHS_HeroPickUIDebugEnableCrazyButton;
trigger libMuHS_gt_IGHS_PickingHeroesArenaMode;
trigger libMuHS_gt_SetRoleOptionsForPlayer;
trigger libMuHS_gt_SetHeroOptionsForPlayer;
trigger libMuHS_gt_PauseHeroSelectionTimer;

// Library Initialization
void libMuHS_InitVariables ();

