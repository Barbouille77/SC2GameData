include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib_h"
include "TriggerLibs/GameLib_h"
include "TriggerLibs/MapMechanicsLib_h"
include "TriggerLibs/AILib_h"
include "TriggerLibs/UILib_h"
include "TriggerLibs/StartingExperienceLib_h"
include "TriggerLibs/SoundLib_h"
include "TriggerLibs/SupportLib_h"

include "TriggerLibs/GameDataHelperLib_h"

//--------------------------------------------------------------------------------------------------
// Library: Game Data Helper
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libGDHL_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libMapM_InitVariables();
    libAIAI_InitVariables();
    libUIUI_InitVariables();
    libStEx_InitVariables();
    libSond_InitVariables();
    libSprt_InitVariables();
}

// Variable Initialization
bool libGDHL_InitVariables_completed = false;

void libGDHL_InitVariables () {
    int init_i;
    int init_i1;
    int init_j1;

    if (libGDHL_InitVariables_completed) {
        return;
    }

    libGDHL_InitVariables_completed = true;

    libGDHL_gv_seasonalEvents.lv_seasonalEventTimer = TimerCreate();
    libGDHL_gv_seasonalEvents.lv_initialMacguffinActivity = "";
    libGDHL_gv_seasonalEvents.lv_customMacguffinPeriodCount = 2.0;
    libGDHL_gv_seasonalEvents.lv_customMacguffinPeriodDuration = 0.0625;
    libGDHL_gv_seasonalEvents.lv_playerGroup_HasEvent = PlayerGroupEmpty();
    libGDHL_gv_seasonalEvents.lv_playerGroup_NoEvent = PlayerGroupEmpty();
    libGDHL_gv_seasonalEventChance = 100;
    libGDHL_gv_lNY_PlayerGroupForEvent = PlayerGroupEmpty();
    libGDHL_gv_lNY_PlayerGroupNoEvent = PlayerGroupEmpty();
    libGDHL_gv_lNY_PlayerGroupForEventFirst = PlayerGroupEmpty();
    libGDHL_gv_lNY_PlayerGroupForEventRepeat = PlayerGroupEmpty();
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libGDHL_gv_lNY_PlayerGroupEventFailure[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libGDHL_gv_lNY_PlayerGroupEventCompleteFirst[init_i] = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libGDHL_gv_lNY_PlayerGroupEventCompleteRepeat[init_i] = PlayerGroupEmpty();
    }
    libGDHL_gv_lNYTimer = TimerCreate();
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libGDHL_gv_lNYUI.lv_unitStatusBarText[init_i1] = c_invalidDialogControlId;
    }
    libGDHL_gv_lNYUI.lv_hudPanel = c_invalidDialogControlId;
    libGDHL_gv_lNYUI.lv_backgroundPanel = c_invalidDialogControlId;
    libGDHL_gv_lNYUI.lv_healthFrame = c_invalidDialogControlId;
    libGDHL_gv_lNYUI.lv_healthBarBG = c_invalidDialogControlId;
    libGDHL_gv_lNYUI.lv_timer = c_invalidDialogControlId;
    libGDHL_gv_lNYUI.lv_questNotification = c_invalidDialogControlId;
    libGDHL_gv_lNYUI.lv_questCompleteNotification = c_invalidDialogControlId;
    libGDHL_gv_lNYUI.lv_helpPanel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libGDHL_gv_lNYPing[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libGDHL_gv_lNY_UnitGroupToShowGold[init_i] = UnitGroupEmpty();
    }
    libGDHL_gv_lNYNumberOfFireworkVolleys_C = 3;
    libGDHL_gv_lNYNumberOfFireworksPerVolley_C = 6;
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libGDHL_gv_lNYCurrentVO[init_i] = c_invalidTransmissionId;
    }
    libGDHL_gv_starCraftEvent.lv_completelyEndEventTimer = TimerCreate();
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libGDHL_gv_starCraftEvent.lv_continueSpawningArtifacts[init_i1] = true;
    }
    libGDHL_gv_starCraftEvent.lv_hUDPanel = c_invalidDialogControlId;
    libGDHL_gv_starCraftEvent.lv_hUDProgressBar = c_invalidDialogControlId;
    libGDHL_gv_starCraftEvent.lv_hUDProgressBackground = c_invalidDialogControlId;
    libGDHL_gv_starCraftEvent.lv_hUDProgressBackgroundContainer = c_invalidDialogControlId;
    libGDHL_gv_starCraftEvent.lv_hUDNotificationBlink = c_invalidDialogControlId;
    libGDHL_gv_starCraftEvent.lv_hUDTimer = c_invalidDialogControlId;
    libGDHL_gv_starCraftEvent.lv_hUDQuestComplete = c_invalidDialogControlId;
    libGDHL_gv_starCraftEvent.lv_hUDProgressCounter = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libGDHL_gv_starCraftEvent.lv_artifactsNoLongerDetectedVO[init_i1] = c_invalidTransmissionId;
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libGDHL_gv_starCraftEvent.lv_artifactUnitGroup[init_i1] = UnitGroupEmpty();
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libGDHL_gv_starCraftEvent.lv_artifactsThatSCVsCanGather[init_i1] = UnitGroupEmpty();
    }
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libGDHL_gv_starCraftEvent.lv_dropshipUnitGroup[init_i1] = UnitGroupEmpty();
    }
    libGDHL_gv_starCraftEvent.lv_dropshipNullZoneRadius = 8;
    for (init_i1 = 0; init_i1 <= 2; init_i1 += 1) {
        libGDHL_gv_starCraftEvent.lv_sCVUnitGroup[init_i1] = UnitGroupEmpty();
    }
    for (init_i1 = 0; init_i1 <= 3; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxTeams; init_j1 += 1) {
            libGDHL_gv_starCraftEvent.lv_numberOfSCVsAlivePerDropship[init_i1][init_j1] = 2;
        }
    }
    libGDHL_gv_starCraftEvent.lv_helpPanel = c_invalidDialogControlId;
    libGDHL_gv_collectingOfferingString = "Abil/Activity/CollectingOffering";
    libGDHL_gv_lNYRooster_QuestTimer = TimerCreate();
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libGDHL_gv_lNYRooster_Quest[init_i].lv_availableItems = UnitGroupEmpty();
        libGDHL_gv_lNYRooster_Quest[init_i].lv_objectivePool1 = PlayerGroupEmpty();
        libGDHL_gv_lNYRooster_Quest[init_i].lv_objectivePool2 = PlayerGroupEmpty();
        libGDHL_gv_lNYRooster_Quest[init_i].lv_questsRemaining = 4;
        libGDHL_gv_lNYRooster_Quest[init_i].lv_team1BarPortraitFrame = c_invalidDialogControlId;
        libGDHL_gv_lNYRooster_Quest[init_i].lv_team2BarPortraitFrame = c_invalidDialogControlId;
        libGDHL_gv_lNYRooster_Quest[init_i].lv_offeringLabel = c_invalidDialogControlId;
        libGDHL_gv_lNYRooster_Quest[init_i].lv_raceTimeLeftLabel = c_invalidDialogControlId;
        libGDHL_gv_lNYRooster_Quest[init_i].lv_team1Bar1 = c_invalidDialogControlId;
        libGDHL_gv_lNYRooster_Quest[init_i].lv_team1Bar2 = c_invalidDialogControlId;
        libGDHL_gv_lNYRooster_Quest[init_i].lv_team2Bar1 = c_invalidDialogControlId;
        libGDHL_gv_lNYRooster_Quest[init_i].lv_team2Bar2 = c_invalidDialogControlId;
        libGDHL_gv_lNYRooster_Quest[init_i].lv_eventSuccessfullyCompletedFirst = true;
        libGDHL_gv_lNYRooster_Quest[init_i].lv_offeringCutscene = c_invalidDialogControlId;
        libGDHL_gv_lNYRooster_Quest[init_i].lv_offeringBorder = c_invalidDialogControlId;
        libGDHL_gv_lNYRooster_Quest[init_i].lv_questCompletedLabel = c_invalidDialogControlId;
        libGDHL_gv_lNYRooster_Quest[init_i].lv_mainPanel = c_invalidDialogControlId;
        libGDHL_gv_lNYRooster_Quest[init_i].lv_questCompleteCheckMark = c_invalidDialogControlId;
    }
    libGDHL_gv_heroAbathurSpikeBurstSplatScalar = 1.0;
    libGDHL_gv_heroAbathurMonstrosityTimedLifeIncrease = 3.0;
    libGDHL_gv_heroAbathurMonstrosityHealthIncreasePerLevel = 3.6;
    libGDHL_gv_heroAbathurEvolutionCompleteStacksCarryover = 0.25;
    libGDHL_gv_heroBarbarianAncientSpearReDirectDistance = 8;
    libGDHL_gv_heroButcherMaxMeatCount = 125;
    libGDHL_gv_heroButcherEnragedCCReduction_C = 0.75;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGDHL_gv_heroChenStormEarthFireUnits[init_i].lv_stormEarthFireUnits = UnitGroupEmpty();
    }
    libGDHL_gv_cruasder_ShieldGlarePathOfTheCrusade_DurationIncrease = 4.0;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGDHL_gv_heroDemonHunterManticoreIncrementer[init_i] = 1;
    }
    libGDHL_gv_bALHeroJainaIceBarrierDamageModifier = 0.25;
    libGDHL_gv_heroJainaIcyVeinsManaCostModifier = 0.5;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGDHL_gv_verdantSpheresUnitGroup[init_i] = UnitGroupEmpty();
    }
    libGDHL_gv_bALHeroKerriganAssimilationEssenceForEssenceModifier = 2.0;
    libGDHL_gv_bALHeroKerriganAssimilationBaseModifier = 0.1;
    libGDHL_gv_bALHeroKerriganAssimilationHeroicModifier = 0.2;
    libGDHL_gv_bALHeroKerriganAssimilationAggressiveDefenseMasteryModifier = 2.0;
    libGDHL_gv_bALHeroKerriganAssimilationMaelstromOmegastormMasteryModifier = 1.0;
    libGDHL_gv_bALHeroKerriganAssimilationMaxHPLevelModifier = 100.0;
    libGDHL_gv_leoricUI.lv_mainPanel = c_invalidDialogControlId;
    libGDHL_gv_leoricUI.lv_traitLabel = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGDHL_gv_lostVikingsPlayer[init_i].lv_checkpointReachedCarinRespawnTimer = TimerCreate();
        libGDHL_gv_lostVikingsPlayer[init_i].lv_gravestoneTextTag = c_textTagNone;
        libGDHL_gv_lostVikingsPlayer[init_i].lv_erikDeathTimer = TimerCreate();
        libGDHL_gv_lostVikingsPlayer[init_i].lv_baleogDeathTimer = TimerCreate();
        libGDHL_gv_lostVikingsPlayer[init_i].lv_olafDeathTimer = TimerCreate();
        libGDHL_gv_lostVikingsPlayer[init_i].lv_longboatCrew = UnitGroupEmpty();
        libGDHL_gv_lostVikingsPlayer[init_i].lv_erikSelectionIndicator = c_invalidDialogControlId;
        libGDHL_gv_lostVikingsPlayer[init_i].lv_baleogSelectionIndicator = c_invalidDialogControlId;
        libGDHL_gv_lostVikingsPlayer[init_i].lv_olafSelectionIndicator = c_invalidDialogControlId;
        libGDHL_gv_lostVikingsPlayer[init_i].lv_erikIdentityImage = c_invalidDialogControlId;
        libGDHL_gv_lostVikingsPlayer[init_i].lv_baleogIdentityImage = c_invalidDialogControlId;
        libGDHL_gv_lostVikingsPlayer[init_i].lv_olafIdentityImage = c_invalidDialogControlId;
    }
    libGDHL_gv_lostVikingsUI.lv_heroStatsFrame = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_erikUnitStatusFrame = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_erikNameLabel = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_erikHPLabel = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_erikDownedLabel = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_baleogUnitStatusFrame = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_baleogNameLabel = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_baleogHPLabel = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_baleogDownedLabel = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_olafUnitStatusFrame = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_olafNameLabel = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_olafHPLabel = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_olafDownedLabel = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_lostVikingsIconFrame = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_erikSelectedIconImage = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_erikUnselectedIconImage = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_erikDeadImage = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_lostErikDeadImageOverlay = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_baleogSelectedIconImage = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_baleogUnselectedIconImage = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_baleogDeadImage = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_lostBaleogDeadImageOverlay = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_olafSelectedIconImage = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_olafUnselectedIconImage = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_olafDeadImage = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_lostOlafDeadImageOverlay = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_lostVikingsChannelFrame = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_lostVikingsOlafCastChannelBarFrame = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_lostVikingsBaleogCastChannelBarFrame = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_lostVikingsErikCastChannelBarFrame = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_lostVikingsOlafBehaviorChannelBarFrame = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_lostVikingsBaleogBehaviorChannelBarFrame = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_lostVikingsBaleogBehaviorChannelBarDurationBar = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_lostVikingsBaleogBehaviorChannelBarBehaviorLabel = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_lostVikingsErikBehaviorChannelBarFrame = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_lostVikingsErikBehaviorChannelBarDurationBar = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_lostVikingsErikBehaviorChannelBarBehaviorLabel = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_lostVikingsOlafBehaviorChannelBarDurationBar = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_lostVikingsOlafBehaviorChannelBarBehaviorLabel = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_olafDeathStatusFrame = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_baleogDeathStatusFrame = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_erikDeathStatusFrame = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsUI.lv_allDeathStatusFrame = c_invalidDialogControlId;
    libGDHL_gv_bALHeroMalfurionDruidsGiftManaCostReduction = 0.1;
    libGDHL_gv_bALHeroMalfurionDruidsGiftImprovedManaCostReduction = 0.15;
    libGDHL_gv_medicUI.lv_mainPanel = c_invalidDialogControlId;
    libGDHL_gv_medicUI.lv_medivacAlert = c_invalidDialogControlId;
    libGDHL_gv_medicUI.lv_medivacCountdownNumber = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGDHL_gv_medivacTransmissionPortraitOverride[init_i] = c_invalidTransmissionId;
    }
    libGDHL_gv_heroMuradinHaymakerLaunchDistance = -12.6;
    libGDHL_gv_heroMuradinHaymakerCutoffDistance = -1.0;
    libGDHL_gv_murkyUI.lv_mainPanel = c_invalidDialogControlId;
    libGDHL_gv_murkyUI.lv_eggOk = c_invalidDialogControlId;
    libGDHL_gv_murkyUI.lv_eggBroken = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGDHL_gv_murkyRevealPing[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGDHL_gv_murkyEggDeathTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGDHL_gv_heroMurkyEggHuntUnitGroup[init_i] = UnitGroupEmpty();
    }
    libGDHL_gv_bALMurkyAssaultEggSpeedBoost = 0.2;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGDHL_gv_heroNecromancerSkeletonMasteryUnitGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGDHL_gv_novaTripleTapMissileGroup[init_i] = UnitGroupEmpty();
    }
    libGDHL_gv_rexxarUI.lv_mainPanel = c_invalidDialogControlId;
    libGDHL_gv_rexxarUI.lv_rexxarMishaUnitStatus = c_invalidDialogControlId;
    libGDHL_gv_rexxarUI.lv_rexxarMishaHealth = c_invalidDialogControlId;
    libGDHL_gv_rexxarUI.lv_rexxarMishaIcon = c_invalidDialogControlId;
    libGDHL_gv_rexxarUI.lv_rexxarMishaIcon2 = c_invalidDialogControlId;
    libGDHL_gv_rexxarUI.lv_rexxarMishaIcon3 = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGDHL_gv_mishaDeathTimer[init_i] = TimerCreate();
    }
    libGDHL_gv_thrallUI.lv_mainPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libGDHL_gv_thrallTraitMaxStacks; init_i1 += 1) {
        libGDHL_gv_thrallUI.lv_counterImage[init_i1] = c_invalidDialogControlId;
    }
    libGDHL_gv_bALHeroTinkerSalvageCDRAmount = 2.0;
    libGDHL_gv_bALHeroTinkerImprovedSalvageCDRAmount = 4.0;
    libGDHL_gv_tychus_RunAndGunRollingReload_DurationInc = 2.0;
    libGDHL_gv_heroTyraelElDruinsMightTeleportDelay = 0.25;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGDHL_gv_sanctifcationTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGDHL_gv_heroWitchDoctorGargantuanAggroGroup[init_i] = UnitGroupEmpty();
    }
    libGDHL_gv_witchDoctor_Gargantuan_AggroRange_C = 7.75;
    libGDHL_gv_witchDoctor_Gargantuan_LeashRange_C = 6.5;
    libGDHL_gv_witchDoctor_Gargantuan_PersonalSpace_C = 4.0;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGDHL_gv_heroZagaraMaxNydusWorms[init_i] = 10;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGDHL_gv_heroZagaraNydusWormUnitGroup[init_i] = UnitGroupEmpty();
    }
    libGDHL_gv_bALHeroSwiftStormMountSpeedIncrease = 0.2;
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: #Include Tactical Hero AI
//--------------------------------------------------------------------------------------------------
include "StormTactical.galaxy"
include "MedicTactical.galaxy"

void libGDHL_InitCustomScript () {
}

// Presets
// Functions
void libGDHL_gf_SeasonalEventDetermineIfTeamsShouldGetEvent () {
    // Variable Declarations
    int lv_seasonalEventChanceAttempt;

    // Variable Initialization

    // Implementation
    lv_seasonalEventChanceAttempt = RandomInt(1, 100);
    if ((lv_seasonalEventChanceAttempt > (100 - libGDHL_gv_seasonalEventChance))) {
        libGDHL_gv_seasonalEvents.lv_teamGotEventThisGame[libGame_gv_teamOrderIndex_C] = true;
        libGDHL_gv_seasonalEvents.lv_teamGotEventThisGame[libGame_gv_teamChaosIndex_C] = true;
        libGDHL_gf_LNYRoosterPreloadContent();
    }

}

bool libGDHL_gf_SeasonalEventTeamShouldGetEvent (int lp_eventChance, int lp_team) {
    // Variable Declarations
    bool lv_debugBankValueFound;
    int lv_seasonalEventChanceAttempt;

    // Variable Initialization

    // Implementation
    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true)) {
        BankLoad("PlayerSettings", 1);
        if ((BankKeyExists(BankLastCreated(), "SeasonalEventChance", "Chance") == true)) {
            lv_debugBankValueFound = true;
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_GDHL_DEFD77FD"), true);
            lv_seasonalEventChanceAttempt = BankValueGetAsInt(BankLastCreated(), "SeasonalEventChance", "Chance");
            TriggerDebugOutput(1, (StringExternal("Param/Value/lib_GDHL_A001C311") + IntToText(lv_seasonalEventChanceAttempt)), true);
        }
        else {
            lv_seasonalEventChanceAttempt = RandomInt(1, 100);
        }
    }
    else {
        lv_seasonalEventChanceAttempt = RandomInt(1, 100);
    }
    if ((((lv_debugBankValueFound == true) && (GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true)) || (libGDHL_gf_SeasonalEventDoesTeamHaveDailyQuest(lp_team) == true))) {
        if ((lv_seasonalEventChanceAttempt > (100 - lp_eventChance))) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
}

bool libGDHL_gf_SeasonalEventDoesTeamHaveDailyQuest (int lp_team) {
    playergroup auto9F3544DC_g;
    int auto9F3544DC_p;

    // Variable Declarations
    bool lv_pretendQuestBoolean;
    int lv_itPlayer;

    // Variable Initialization
    lv_pretendQuestBoolean = true;

    // Implementation
    auto9F3544DC_g = libGame_gf_PlayersOnTeamHeroes(lp_team, false); 
    auto9F3544DC_p = 1;
    for ( ; auto9F3544DC_p <= PlayerGroupCount(auto9F3544DC_g) ; auto9F3544DC_p += (lv_itPlayer == PlayerGroupPlayer(auto9F3544DC_g, auto9F3544DC_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto9F3544DC_g, auto9F3544DC_p);
        if ((PlayerHasReward(lv_itPlayer, "ArtifactCompleted") == false)) {
            return true;
        }

    }
    return false;
}

void libGDHL_gf_SeasonalEventDetermineIfVictorySequenceShouldPlay (int lp_winningTeam) {
    // Implementation
    if ((libGDHL_gf_StarCraftEventShouldVictorySequencePlay(lp_winningTeam) == true)) {
        libGDHL_gv_seasonalEvents.lv_winningTeam = lp_winningTeam;
        libGame_gf_SendEventTeamGetsVictorySequence(lp_winningTeam);
        if ((libGDHL_gv_seasonalEvents.lv_victoryCallbackTrigger != null)) {
            TriggerExecute(libGDHL_gv_seasonalEvents.lv_victoryCallbackTrigger, true, true);
        }

    }

}

void libGDHL_gf_LNYHUDUIInit (int lp_parentPanel) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_itTeam;
    int lv_enemyTeam;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/LunarNewYearPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    libGDHL_gv_lNYUI.lv_hudPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "LunarNewYearHealthBar");
    libGDHL_gv_lNYUI.lv_healthFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "LunarNewYearTimer");
    libGDHL_gv_lNYUI.lv_timer = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "QuestNotificationFrame");
    libGDHL_gv_lNYUI.lv_questNotification = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "QuestCompleteNotificationFrame");
    libGDHL_gv_lNYUI.lv_questCompleteNotification = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "BackgroundContainer");
    libGDHL_gv_lNYUI.lv_backgroundPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HealthBarBG");
    libGDHL_gv_lNYUI.lv_healthBarBG = DialogControlLastCreated();
}

trigger auto_libGDHL_gf_LNYSplashPanelUIInit_Trigger = null;
int auto_libGDHL_gf_LNYSplashPanelUIInit_lp_team;

void libGDHL_gf_LNYSplashPanelUIInit (int lp_team) {
    auto_libGDHL_gf_LNYSplashPanelUIInit_lp_team = lp_team;

    if (auto_libGDHL_gf_LNYSplashPanelUIInit_Trigger == null) {
        auto_libGDHL_gf_LNYSplashPanelUIInit_Trigger = TriggerCreate("auto_libGDHL_gf_LNYSplashPanelUIInit_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_LNYSplashPanelUIInit_Trigger, false, false);
}

bool auto_libGDHL_gf_LNYSplashPanelUIInit_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libGDHL_gf_LNYSplashPanelUIInit_lp_team;

    playergroup autoEBCACD9A_g;
    int autoEBCACD9A_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "LunarNewYearHelpPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libGDHL_gv_lNYUI.lv_helpPanel = DialogControlLastCreated();
    DialogControlHookup(DialogControlLastCreated(), c_triggerControlTypeImage, "BackgroundImage");
    autoEBCACD9A_g = libGame_gf_PlayersOnTeamHeroes(lp_team, false); 
    autoEBCACD9A_p = 1;
    for ( ; autoEBCACD9A_p <= PlayerGroupCount(autoEBCACD9A_g) ; autoEBCACD9A_p += (lv_itPlayer == PlayerGroupPlayer(autoEBCACD9A_g, autoEBCACD9A_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoEBCACD9A_g, autoEBCACD9A_p);
        if ((PlayerGroupHasPlayer(libStEx_gv_sEMMIntroPlayersInitiallyWatching, lv_itPlayer) == false) && (PlayerHasReward(lv_itPlayer, "MonkeyIsCaught") == false)) {
            DialogControlSetVisible(libGDHL_gv_lNYUI.lv_helpPanel, PlayerGroupSingle(lv_itPlayer), true);
        }
        else {
            DialogControlSetVisible(libGDHL_gv_lNYUI.lv_helpPanel, PlayerGroupSingle(lv_itPlayer), false);
        }
    }
    return true;
}

trigger auto_libGDHL_gf_LNYShowQuestNotification_Trigger = null;
playergroup auto_libGDHL_gf_LNYShowQuestNotification_lp_playerGroup;

void libGDHL_gf_LNYShowQuestNotification (playergroup lp_playerGroup) {
    auto_libGDHL_gf_LNYShowQuestNotification_lp_playerGroup = lp_playerGroup;

    if (auto_libGDHL_gf_LNYShowQuestNotification_Trigger == null) {
        auto_libGDHL_gf_LNYShowQuestNotification_Trigger = TriggerCreate("auto_libGDHL_gf_LNYShowQuestNotification_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_LNYShowQuestNotification_Trigger, false, false);
}

bool auto_libGDHL_gf_LNYShowQuestNotification_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_playerGroup = auto_libGDHL_gf_LNYShowQuestNotification_lp_playerGroup;

    playergroup auto1E42A66B_g;
    int auto1E42A66B_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    DialogControlSetVisible(libGDHL_gv_lNYUI.lv_questNotification, lp_playerGroup, true);
    Wait(5.0, c_timeGame);
    auto1E42A66B_g = lp_playerGroup; 
    auto1E42A66B_p = 1;
    for ( ; auto1E42A66B_p <= PlayerGroupCount(auto1E42A66B_g) ; auto1E42A66B_p += (lv_itPlayer == PlayerGroupPlayer(auto1E42A66B_g, auto1E42A66B_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto1E42A66B_g, auto1E42A66B_p);
        if ((PlayerGroupHasPlayer(libStEx_gv_sEMMIntroPlayersInitiallyWatching, lv_itPlayer) == false)) {
            DialogControlSetVisible(libGDHL_gv_lNYUI.lv_questNotification, lp_playerGroup, false);
        }

    }
    return true;
}

trigger auto_libGDHL_gf_LNYShowQuestNotificationForPlayersWatchingVideo_Trigger = null;
int auto_libGDHL_gf_LNYShowQuestNotificationForPlayersWatchingVideo_lp_player;

void libGDHL_gf_LNYShowQuestNotificationForPlayersWatchingVideo (int lp_player) {
    auto_libGDHL_gf_LNYShowQuestNotificationForPlayersWatchingVideo_lp_player = lp_player;

    if (auto_libGDHL_gf_LNYShowQuestNotificationForPlayersWatchingVideo_Trigger == null) {
        auto_libGDHL_gf_LNYShowQuestNotificationForPlayersWatchingVideo_Trigger = TriggerCreate("auto_libGDHL_gf_LNYShowQuestNotificationForPlayersWatchingVideo_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_LNYShowQuestNotificationForPlayersWatchingVideo_Trigger, false, false);
}

bool auto_libGDHL_gf_LNYShowQuestNotificationForPlayersWatchingVideo_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libGDHL_gf_LNYShowQuestNotificationForPlayersWatchingVideo_lp_player;

    fixed auto6C45D2F7_at;
    fixed auto50F48630_at;

    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Implementation
    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);
    auto6C45D2F7_at = 0;
    while (!((libMapM_gf_MapMechanicIntroFinished(lp_player) == true)) && auto6C45D2F7_at <= 30.0) {
        Wait(0.5, c_timeGame);
        auto6C45D2F7_at = auto6C45D2F7_at + 0.5;
    }
    if ((UnitIsAlive(libGDHL_gv_lNYUnit[lv_team]) == true) && (TimerGetRemaining(libGDHL_gv_lNYTimer) > 5.0)) {
        DialogControlSetVisible(libGDHL_gv_lNYUI.lv_questNotification, PlayerGroupSingle(lp_player), true);
        auto50F48630_at = 0;
        while (!((UnitIsAlive(libGDHL_gv_lNYUnit[lv_team]) == false)) && auto50F48630_at <= 5.0) {
            Wait(0.5, c_timeGame);
            auto50F48630_at = auto50F48630_at + 0.5;
        }
        DialogControlSetVisible(libGDHL_gv_lNYUI.lv_questNotification, PlayerGroupSingle(lp_player), false);
    }

    return true;
}

trigger auto_libGDHL_gf_LNYDetermineWhichPlayersAreWatchingVideo_Trigger = null;
playergroup auto_libGDHL_gf_LNYDetermineWhichPlayersAreWatchingVideo_lp_playerGroup;

void libGDHL_gf_LNYDetermineWhichPlayersAreWatchingVideo (playergroup lp_playerGroup) {
    auto_libGDHL_gf_LNYDetermineWhichPlayersAreWatchingVideo_lp_playerGroup = lp_playerGroup;

    if (auto_libGDHL_gf_LNYDetermineWhichPlayersAreWatchingVideo_Trigger == null) {
        auto_libGDHL_gf_LNYDetermineWhichPlayersAreWatchingVideo_Trigger = TriggerCreate("auto_libGDHL_gf_LNYDetermineWhichPlayersAreWatchingVideo_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_LNYDetermineWhichPlayersAreWatchingVideo_Trigger, false, false);
}

bool auto_libGDHL_gf_LNYDetermineWhichPlayersAreWatchingVideo_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_playerGroup = auto_libGDHL_gf_LNYDetermineWhichPlayersAreWatchingVideo_lp_playerGroup;

    playergroup autoD8440CF3_g;
    int autoD8440CF3_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    Wait(0.0625, c_timeGame);
    autoD8440CF3_g = lp_playerGroup; 
    autoD8440CF3_p = 1;
    for ( ; autoD8440CF3_p <= PlayerGroupCount(autoD8440CF3_g) ; autoD8440CF3_p += (lv_itPlayer == PlayerGroupPlayer(autoD8440CF3_g, autoD8440CF3_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoD8440CF3_g, autoD8440CF3_p);
        if ((PlayerGroupHasPlayer(libStEx_gv_sEMMIntroPlayersInitiallyWatching, lv_itPlayer) == true)) {
            libGDHL_gf_LNYShowQuestNotificationForPlayersWatchingVideo(lv_itPlayer);
        }

    }
    return true;
}

trigger auto_libGDHL_gf_LNYShowQuestCompleteNotification_Trigger = null;
playergroup auto_libGDHL_gf_LNYShowQuestCompleteNotification_lp_playerGroup;

void libGDHL_gf_LNYShowQuestCompleteNotification (playergroup lp_playerGroup) {
    auto_libGDHL_gf_LNYShowQuestCompleteNotification_lp_playerGroup = lp_playerGroup;

    if (auto_libGDHL_gf_LNYShowQuestCompleteNotification_Trigger == null) {
        auto_libGDHL_gf_LNYShowQuestCompleteNotification_Trigger = TriggerCreate("auto_libGDHL_gf_LNYShowQuestCompleteNotification_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_LNYShowQuestCompleteNotification_Trigger, false, false);
}

bool auto_libGDHL_gf_LNYShowQuestCompleteNotification_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_playerGroup = auto_libGDHL_gf_LNYShowQuestCompleteNotification_lp_playerGroup;

    // Implementation
    DialogControlSetVisible(libGDHL_gv_lNYUI.lv_questCompleteNotification, lp_playerGroup, true);
    Wait(5.0, c_timeGame);
    DialogControlSetVisible(libGDHL_gv_lNYUI.lv_questCompleteNotification, lp_playerGroup, false);
    return true;
}

trigger auto_libGDHL_gf_LNYShowHideOffscreenTrackerForTeam_Trigger = null;
bool auto_libGDHL_gf_LNYShowHideOffscreenTrackerForTeam_lp_showHide;
int auto_libGDHL_gf_LNYShowHideOffscreenTrackerForTeam_lp_team;

void libGDHL_gf_LNYShowHideOffscreenTrackerForTeam (bool lp_showHide, int lp_team) {
    auto_libGDHL_gf_LNYShowHideOffscreenTrackerForTeam_lp_showHide = lp_showHide;
    auto_libGDHL_gf_LNYShowHideOffscreenTrackerForTeam_lp_team = lp_team;

    if (auto_libGDHL_gf_LNYShowHideOffscreenTrackerForTeam_Trigger == null) {
        auto_libGDHL_gf_LNYShowHideOffscreenTrackerForTeam_Trigger = TriggerCreate("auto_libGDHL_gf_LNYShowHideOffscreenTrackerForTeam_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_LNYShowHideOffscreenTrackerForTeam_Trigger, false, false);
}

bool auto_libGDHL_gf_LNYShowHideOffscreenTrackerForTeam_TriggerFunc (bool testConds, bool runActions) {
    bool lp_showHide = auto_libGDHL_gf_LNYShowHideOffscreenTrackerForTeam_lp_showHide;
    int lp_team = auto_libGDHL_gf_LNYShowHideOffscreenTrackerForTeam_lp_team;

    playergroup auto40459922_g;
    int auto40459922_p;
    playergroup auto4BC58394_g;
    int auto4BC58394_p;

    // Variable Declarations
    int lv_itPlayer;
    int lv_index;

    // Variable Initialization

    // Implementation
    if ((lp_team == libGame_gv_teamOrderIndex_C)) {
        lv_index = 9;
    }
    else {
        lv_index = 10;
    }
    if ((lp_showHide == true)) {
        libUIUI_gv_uIHeroTrackerArrows.lv_unit[lv_index] = libGDHL_gv_lNYUnit[lp_team];
        auto4BC58394_g = libGame_gv_teams[lp_team].lv_teamPlayerGroup; 
        auto4BC58394_p = 1;
        for ( ; auto4BC58394_p <= PlayerGroupCount(auto4BC58394_g) ; auto4BC58394_p += (lv_itPlayer == PlayerGroupPlayer(auto4BC58394_g, auto4BC58394_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto4BC58394_g, auto4BC58394_p);
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroTrackerArrows.lv_arrow[lv_index], libGDHL_gv_lNYUnit[lp_team], libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_uIHeroTrackerArrows.lv_portraitImageOverride[lv_index], "Assets\\Textures\\storm_ui_mapmechanic_notification_lunarmonkey_offscreenindicator.dds", libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
            DialogControlSetSize(libUIUI_gv_uIHeroTrackerArrows.lv_portraitImageOverride[lv_index], libCore_gv_playerGroupFromPlayer[lv_itPlayer], 120, 120);
            libUIUI_gf_UIHeroTrackerArrowShowHideForPlayer(true, lv_itPlayer);
        }
    }
    else {
        libUIUI_gv_uIHeroTrackerArrows.lv_unit[lv_index] = null;
        auto40459922_g = libGame_gv_teams[lp_team].lv_teamPlayerGroup; 
        auto40459922_p = 1;
        for ( ; auto40459922_p <= PlayerGroupCount(auto40459922_g) ; auto40459922_p += (lv_itPlayer == PlayerGroupPlayer(auto40459922_g, auto40459922_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto40459922_g, auto40459922_p);
            DialogControlSetVisible(libUIUI_gv_uIHeroTrackerArrows.lv_arrow[lv_index], libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
            DialogControlSetVisible(libUIUI_gv_uIHeroTrackerArrows.lv_portraitImageOverride[lv_index], libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
            DialogControlSetSize(libUIUI_gv_uIHeroTrackerArrows.lv_portraitImageOverride[lv_index], libCore_gv_playerGroupFromPlayer[lv_itPlayer], 0, 0);
            if ((PlayerHero(lv_itPlayer) != "LostVikings")) {
                libUIUI_gf_UIHeroTrackerArrowShowHideForPlayer(false, lv_itPlayer);
            }

        }
    }
    return true;
}

bool libGDHL_gf_LNYDoesTeamHaveDailyQuest (int lp_team) {
    playergroup autoEE94EA80_g;
    int autoEE94EA80_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    autoEE94EA80_g = libGame_gf_PlayersOnTeamHeroes(lp_team, false); 
    autoEE94EA80_p = 1;
    for ( ; autoEE94EA80_p <= PlayerGroupCount(autoEE94EA80_g) ; autoEE94EA80_p += (lv_itPlayer == PlayerGroupPlayer(autoEE94EA80_g, autoEE94EA80_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoEE94EA80_g, autoEE94EA80_p);
        if ((PlayerHasReward(lv_itPlayer, "MonkeyIsCaught") == false)) {
            return true;
        }

    }
    return false;
}

void libGDHL_gf_LNYShouldTeamGetEvent (int lp_team) {
    playergroup autoC1E8ACC3_g;
    int autoC1E8ACC3_p;

    // Variable Declarations
    int lv_itPlayer;
    int lv_lunarNewYearSpawnCheck;
    bool lv_debugBankValueFound;

    // Variable Initialization

    // Implementation
    if ((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true)) {
        BankLoad("PlayerSettings", 1);
        if ((BankKeyExists(BankLastCreated(), "SeasonalEventChance", "Chance") == true)) {
            lv_debugBankValueFound = true;
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_GDHL_84C1121F"), true);
            lv_lunarNewYearSpawnCheck = BankValueGetAsInt(BankLastCreated(), "SeasonalEventChance", "Chance");
            TriggerDebugOutput(1, (StringExternal("Param/Value/lib_GDHL_178115A2") + IntToText(lv_lunarNewYearSpawnCheck)), true);
        }
        else {
            lv_lunarNewYearSpawnCheck = RandomInt(0, 100);
        }
    }
    else {
        lv_lunarNewYearSpawnCheck = RandomInt(0, 100);
    }
    if (((lv_debugBankValueFound == true) || (libGDHL_gf_LNYDoesTeamHaveDailyQuest(lp_team) == true))) {
        if ((lv_lunarNewYearSpawnCheck > (100 - libGDHL_gv_lNYSpawnChance))) {
            libGDHL_gv_lNYTeamShouldGetEvent[lp_team] = true;
            libGDHL_gf_LNYSplashPanelUIInit(lp_team);
            libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gf_PlayersOnTeamHeroes(lp_team, false), libGDHL_gv_lNY_PlayerGroupForEvent);
            autoC1E8ACC3_g = libGame_gf_PlayersOnTeamHeroes(lp_team, false); 
            autoC1E8ACC3_p = 1;
            for ( ; autoC1E8ACC3_p <= PlayerGroupCount(autoC1E8ACC3_g) ; autoC1E8ACC3_p += (lv_itPlayer == PlayerGroupPlayer(autoC1E8ACC3_g, autoC1E8ACC3_p)) ) {
                lv_itPlayer = PlayerGroupPlayer(autoC1E8ACC3_g, autoC1E8ACC3_p);
                if ((PlayerHasReward(lv_itPlayer, "MonkeyIsCaught") == true)) {
                    PlayerGroupAdd(libGDHL_gv_lNY_PlayerGroupForEventRepeat, lv_itPlayer);
                }
                else {
                    PlayerGroupAdd(libGDHL_gv_lNY_PlayerGroupForEventFirst, lv_itPlayer);
                }
            }
        }
        else {
            libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gf_PlayersOnTeamHeroes(lp_team, false), libGDHL_gv_lNY_PlayerGroupNoEvent);
        }
    }

}

bool libGDHL_gf_LNYDoesATeamGetEvent () {
    // Variable Declarations
    bool lv_oneTeamGetsEvent;

    // Variable Initialization

    // Implementation
    if ((libGDHL_gv_lNYTeamShouldGetEvent[libGame_gv_teamOrderIndex_C] == true)) {
        lv_oneTeamGetsEvent = true;
        PlayerGroupAdd(libGDHL_gv_lNY_PlayerGroupForEvent, libCore_gv_oBSERVER_ObserverUIPlayer);
    }
    else {
        PlayerGroupAdd(libGDHL_gv_lNY_PlayerGroupNoEvent, libCore_gv_oBSERVER_ObserverUIPlayer);
    }
    if ((libGDHL_gv_lNYTeamShouldGetEvent[libGame_gv_teamChaosIndex_C] == true)) {
        lv_oneTeamGetsEvent = true;
    }

    if ((lv_oneTeamGetsEvent == true)) {
        return true;
    }
    else {
        return false;
    }
}

void libGDHL_gf_LNYSpawnUnitsForTeam (int lp_team) {
    // Variable Declarations
    int lv_computerPlayer;
    region lv_region;

    // Variable Initialization

    // Implementation
    if ((lp_team == libGame_gv_teamOrderIndex_C)) {
        lv_computerPlayer = libCore_gv_cOMPUTER_TeamOrder;
        lv_region = libCore_gv_mAPOrderBaseRegion;
    }
    else {
        lv_computerPlayer = libCore_gv_cOMPUTER_TeamChaos;
        lv_region = libCore_gv_mAPChaosBaseRegion;
    }
    UnitCreate(1, "LNYLunarNewYearUnit", 0, lv_computerPlayer, PointWithOffsetPolar(UnitGetPosition(libGame_gv_teams[lp_team].lv_core), 8.0, (UnitGetFacing(libGame_gv_teams[lp_team].lv_core) + 180.0)), (UnitGetFacing(libGame_gv_teams[lp_team].lv_core) + 180.0));
    libGDHL_gv_lNYUnit[lp_team] = UnitLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "PlateDescription", UnitLastCreated());
    libGDHL_gv_lNYUI.lv_unitStatusBarText[lp_team] = DialogControlLastCreated();
    libNtve_gf_SetDialogItemText(libGDHL_gv_lNYUI.lv_unitStatusBarText[lp_team], StringExternal("Param/Value/lib_GDHL_05578862"), PlayerGroupAll());
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LNYLunarNewYearProgressUnit", c_unitCreateIgnorePlacement, lv_computerPlayer, RegionGetCenter(lv_region));
    libNtve_gf_SetDialogItemUnit(libGDHL_gv_lNYUI.lv_healthFrame, UnitLastCreated(), libGame_gf_PlayersOnTeamHeroes(lp_team, false));
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 0.0001);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LNYLunarNewYearProgressUnit", c_unitCreateIgnorePlacement, lv_computerPlayer, RegionGetCenter(lv_region));
    libGDHL_gv_lNYProgressUnit[lp_team] = UnitLastCreated();
    libGDHL_gf_LNYShowHideOffscreenTrackerForTeam(true, lp_team);
}

trigger auto_libGDHL_gf_LNYLunarNewYearClickableUnitRewardLogic_Trigger = null;
unit auto_libGDHL_gf_LNYLunarNewYearClickableUnitRewardLogic_lp_unit;

void libGDHL_gf_LNYLunarNewYearClickableUnitRewardLogic (unit lp_unit) {
    auto_libGDHL_gf_LNYLunarNewYearClickableUnitRewardLogic_lp_unit = lp_unit;

    if (auto_libGDHL_gf_LNYLunarNewYearClickableUnitRewardLogic_Trigger == null) {
        auto_libGDHL_gf_LNYLunarNewYearClickableUnitRewardLogic_Trigger = TriggerCreate("auto_libGDHL_gf_LNYLunarNewYearClickableUnitRewardLogic_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_LNYLunarNewYearClickableUnitRewardLogic_Trigger, false, false);
}

bool auto_libGDHL_gf_LNYLunarNewYearClickableUnitRewardLogic_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libGDHL_gf_LNYLunarNewYearClickableUnitRewardLogic_lp_unit;

    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Implementation
    if ((UnitGetOwner(lp_unit) == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_team = libGame_gv_teamOrderIndex_C;
    }
    else {
        lv_team = libGame_gv_teamChaosIndex_C;
    }
    libGDHL_gf_LNYShowGoldForPlayersOnTeam(lv_team);
    Wait(3.5, c_timeGame);
    libGDHL_gv_lNYRewardsGiven[lv_team] = true;
    Wait(6.5, c_timeGame);
    UnitRemove(lp_unit);
    return true;
}

void libGDHL_gf_LNYAddUnitsToShowGoldFor (int lp_player, point lp_captureLocationPoint) {
    unitgroup autoE3CA6930_g;
    int autoE3CA6930_u;

    // Variable Declarations
    int lv_team;
    unit lv_itUnit;
    fixed lv_currentClosestDistance;
    unit lv_closestUnit;

    // Variable Initialization

    // Implementation
    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);
    autoE3CA6930_g = libGame_gv_players[lp_player].lv_heroUnitGroup;
    autoE3CA6930_u = 1;
    for ( ; autoE3CA6930_u <= UnitGroupCount(autoE3CA6930_g, c_unitCountAll) ; autoE3CA6930_u += (lv_itUnit == UnitGroupUnit(autoE3CA6930_g, autoE3CA6930_u)) ) {
        lv_itUnit = UnitGroupUnit(autoE3CA6930_g, autoE3CA6930_u);
        if ((lv_currentClosestDistance != 0.0)) {
            if ((DistanceBetweenPoints(lp_captureLocationPoint, UnitGetPosition(lv_itUnit)) < lv_currentClosestDistance)) {
                lv_currentClosestDistance = DistanceBetweenPoints(lp_captureLocationPoint, UnitGetPosition(lv_itUnit));
                lv_closestUnit = lv_itUnit;
            }

        }
        else {
            lv_currentClosestDistance = DistanceBetweenPoints(lp_captureLocationPoint, UnitGetPosition(lv_itUnit));
            lv_closestUnit = lv_itUnit;
        }
    }
    UnitGroupAdd(libGDHL_gv_lNY_UnitGroupToShowGold[lv_team], lv_closestUnit);
}

trigger auto_libGDHL_gf_LNYShowGoldForPlayersOnTeam_Trigger = null;
int auto_libGDHL_gf_LNYShowGoldForPlayersOnTeam_lp_team;

void libGDHL_gf_LNYShowGoldForPlayersOnTeam (int lp_team) {
    auto_libGDHL_gf_LNYShowGoldForPlayersOnTeam_lp_team = lp_team;

    if (auto_libGDHL_gf_LNYShowGoldForPlayersOnTeam_Trigger == null) {
        auto_libGDHL_gf_LNYShowGoldForPlayersOnTeam_Trigger = TriggerCreate("auto_libGDHL_gf_LNYShowGoldForPlayersOnTeam_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_LNYShowGoldForPlayersOnTeam_Trigger, false, false);
}

bool auto_libGDHL_gf_LNYShowGoldForPlayersOnTeam_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libGDHL_gf_LNYShowGoldForPlayersOnTeam_lp_team;

    fixed autoAE70AD84_at;
    unitgroup auto002592C1_g;
    int auto002592C1_u;

    // Variable Declarations
    unit lv_itUnit;
    int lv_player;

    // Variable Initialization

    // Implementation
    autoAE70AD84_at = 0;
    while (!((libGDHL_gv_lNYRewardsGiven[lp_team] == true)) && autoAE70AD84_at <= 20.0) {
        Wait(0.25, c_timeGame);
        autoAE70AD84_at = autoAE70AD84_at + 0.25;
    }
    auto002592C1_g = libGDHL_gv_lNY_UnitGroupToShowGold[lp_team];
    auto002592C1_u = 1;
    for ( ; auto002592C1_u <= UnitGroupCount(auto002592C1_g, c_unitCountAll) ; auto002592C1_u += (lv_itUnit == UnitGroupUnit(auto002592C1_g, auto002592C1_u)) ) {
        lv_itUnit = UnitGroupUnit(auto002592C1_g, auto002592C1_u);
        lv_player = UnitGetOwner(lv_itUnit);
        TextTagCreate(TextExpressionAssemble("Param/Expression/lib_GDHL_65BE7C8A"), 25, UnitGetPosition(lv_itUnit), 3.0, true, true, libCore_gv_playerGroupFromPlayer[lv_player]);
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, libUIUI_gv_floatingCombatTextFadeDuration);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.5);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    }
    return true;
}

trigger auto_libGDHL_gf_LNYMovingLogic_Trigger = null;
unit auto_libGDHL_gf_LNYMovingLogic_lp_unit;

void libGDHL_gf_LNYMovingLogic (unit lp_unit) {
    auto_libGDHL_gf_LNYMovingLogic_lp_unit = lp_unit;

    if (auto_libGDHL_gf_LNYMovingLogic_Trigger == null) {
        auto_libGDHL_gf_LNYMovingLogic_Trigger = TriggerCreate("auto_libGDHL_gf_LNYMovingLogic_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_LNYMovingLogic_Trigger, false, false);
}

bool auto_libGDHL_gf_LNYMovingLogic_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libGDHL_gf_LNYMovingLogic_lp_unit;

    int autoFFDD7EA6_n;
    int autoFFDD7EA6_i;
    int autoF35E6A7A_n;
    int autoF35E6A7A_i;
    int auto7D23CA2D_n;
    int auto7D23CA2D_i;
    fixed auto0476AEDF_at;

    // Variable Declarations
    region lv_baseRegion;
    point lv_positionOfUnit;
    region lv_regionAroundUnit;
    unit lv_closestEnemy;
    unitgroup lv_unitGroup;
    fixed lv_angleBetweenUnitAndClosestUnit;
    fixed lv_angleToRunAt;
    point lv_targetPoint;
    int lv_targetPointRange;
    bool lv_turnedAround;
    fixed lv_angleRange;
    int lv_team;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Implementation
    Wait(3.0, c_timeGame);
    if ((UnitGetOwner(lp_unit) == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_baseRegion = libCore_gv_mAPOrderBaseRegion;
        lv_team = libGame_gv_teamOrderIndex_C;
    }
    else {
        lv_baseRegion = libCore_gv_mAPChaosBaseRegion;
        lv_team = libGame_gv_teamChaosIndex_C;
    }
    while ((UnitIsAlive(lp_unit) == true)) {
        lv_positionOfUnit = UnitGetPosition(lp_unit);
        lv_regionAroundUnit = RegionCircle(UnitGetPosition(lp_unit), 7.0);
        lv_unitGroup = UnitGroup(null, c_playerAny, lv_regionAroundUnit, libCore_gv_filtersHeroic, 0);
        lv_targetPoint = null;
        if ((UnitGroupCount(lv_unitGroup, c_unitCountAlive) > 0)) {
            lv_targetPointRange = 60;
            lv_closestEnemy = UnitGroupClosestToPoint(lv_unitGroup, lv_positionOfUnit);
            lv_angleBetweenUnitAndClosestUnit = AngleBetweenPoints(lv_positionOfUnit, UnitGetPosition(lv_closestEnemy));
            lv_angleRange = RandomFixed(135.0, 225.0);
            lv_angleToRunAt = (lv_angleBetweenUnitAndClosestUnit + lv_angleRange);
            autoFFDD7EA6_n = 20;
            for (autoFFDD7EA6_i = 1; autoFFDD7EA6_i <= autoFFDD7EA6_n; autoFFDD7EA6_i += 1) {
                lv_targetPoint = PointWithOffsetPolar(lv_positionOfUnit, lv_targetPointRange, lv_angleToRunAt);
                if ((DistanceBetweenPoints(lv_positionOfUnit, lv_targetPoint) < 3.0)) {
                    break;
                }

                if (((PathingType(lv_targetPoint) == c_pathingUnpathable) || (PointPathingCost(lv_targetPoint, lv_positionOfUnit) > lv_targetPointRange))) {
                    lv_targetPointRange -= 3;
                }
                else {
                    break;
                }
            }
        }

        if (((RegionContainsPoint(libMapM_gv_mMSafeRegions[lv_team], lv_targetPoint) == true) || (lv_targetPoint == null) || (DistanceBetweenPoints(lv_positionOfUnit, lv_targetPoint) < 3.0) || (PathingType(lv_targetPoint) == c_pathingUnpathable) || (PointPathingCost(lv_targetPoint, lv_positionOfUnit) > lv_targetPointRange))) {
            lv_targetPointRange = 60;
            lv_angleRange = RandomFixed(135.0, 225.0);
            autoF35E6A7A_n = 20;
            for (autoF35E6A7A_i = 1; autoF35E6A7A_i <= autoF35E6A7A_n; autoF35E6A7A_i += 1) {
                lv_targetPoint = PointWithOffsetPolar(UnitGetPosition(lp_unit), lv_targetPointRange, (UnitGetFacing(lp_unit) + lv_angleRange));
                if ((DistanceBetweenPoints(lv_positionOfUnit, lv_targetPoint) < 3.0)) {
                    break;
                }

                if (((PathingType(lv_targetPoint) == c_pathingUnpathable) || (PointPathingCost(lv_targetPoint, lv_positionOfUnit) > lv_targetPointRange))) {
                    lv_targetPointRange -= 3;
                }
                else {
                    break;
                }
            }
        }

        auto7D23CA2D_n = 10;
        for (auto7D23CA2D_i = 1; auto7D23CA2D_i <= auto7D23CA2D_n; auto7D23CA2D_i += 1) {
            if (((RegionContainsPoint(libMapM_gv_mMSafeRegions[lv_team], lv_targetPoint) == true) || (lv_targetPoint == null) || (DistanceBetweenPoints(lv_positionOfUnit, lv_targetPoint) < 3.0) || (PathingType(lv_targetPoint) == c_pathingUnpathable))) {
                lv_targetPoint = RegionRandomPoint(lv_baseRegion);
            }
            else {
                break;
            }
        }
        if (((RegionContainsPoint(libMapM_gv_mMSafeRegions[lv_team], lv_targetPoint) == true) || (lv_targetPoint == null) || (DistanceBetweenPoints(lv_positionOfUnit, lv_targetPoint) < 3.0) || (PathingType(lv_targetPoint) == c_pathingUnpathable))) {
            lv_targetPoint = RegionRandomPoint(lv_baseRegion);
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_targetPoint), c_orderQueueReplace);
        }
        libGDHL_gv_lNY_MonkeyDestinationPoint[lv_team] = lv_targetPoint;
        libGDHL_gf_LNYZigZagMovingLogic(lv_team, lp_unit, lv_targetPoint);
        Wait(0.0625, c_timeGame);
        auto0476AEDF_at = 0;
        while (!(((UnitIsAlive(lp_unit) == false) || (DistanceBetweenPoints(UnitGetPosition(lp_unit), lv_targetPoint) < 3.0) || (UnitGetPropertyFixed(lp_unit, c_unitPropMovementSpeedCurrent, c_unitPropCurrent) < 1))) && auto0476AEDF_at <= 20.0) {
            Wait(0.25, c_timeGame);
            auto0476AEDF_at = auto0476AEDF_at + 0.25;
        }
    }
    return true;
}

trigger auto_libGDHL_gf_LNYZigZagMovingLogic_Trigger = null;
int auto_libGDHL_gf_LNYZigZagMovingLogic_lp_team;
unit auto_libGDHL_gf_LNYZigZagMovingLogic_lp_unit;
point auto_libGDHL_gf_LNYZigZagMovingLogic_lp_finalDestination;

void libGDHL_gf_LNYZigZagMovingLogic (int lp_team, unit lp_unit, point lp_finalDestination) {
    auto_libGDHL_gf_LNYZigZagMovingLogic_lp_team = lp_team;
    auto_libGDHL_gf_LNYZigZagMovingLogic_lp_unit = lp_unit;
    auto_libGDHL_gf_LNYZigZagMovingLogic_lp_finalDestination = lp_finalDestination;

    if (auto_libGDHL_gf_LNYZigZagMovingLogic_Trigger == null) {
        auto_libGDHL_gf_LNYZigZagMovingLogic_Trigger = TriggerCreate("auto_libGDHL_gf_LNYZigZagMovingLogic_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_LNYZigZagMovingLogic_Trigger, false, false);
}

bool auto_libGDHL_gf_LNYZigZagMovingLogic_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libGDHL_gf_LNYZigZagMovingLogic_lp_team;
    unit lp_unit = auto_libGDHL_gf_LNYZigZagMovingLogic_lp_unit;
    point lp_finalDestination = auto_libGDHL_gf_LNYZigZagMovingLogic_lp_finalDestination;

    // Variable Declarations
    int lv_randomDirection;
    point lv_unitPosition;
    point lv_zigZagDestination;
    int lv_zigZagDistance;
    fixed lv_zigZagAngle;
    fixed lv_zigZagAlternateAngle;

    // Variable Initialization

    // Implementation
    Wait(0.5, c_timeGame);
    while ((libGDHL_gv_lNY_MonkeyDestinationPoint[lp_team] == lp_finalDestination) && (UnitIsAlive(lp_unit) == true)) {
        lv_unitPosition = UnitGetPosition(lp_unit);
        lv_zigZagDistance = RandomInt(3, 5);
        lv_randomDirection = RandomInt(1, 2);
        if ((lv_randomDirection == 1)) {
            lv_zigZagAngle = (AngleBetweenPoints(lv_unitPosition, lp_finalDestination) + 45.0);
            lv_zigZagAlternateAngle = (AngleBetweenPoints(lv_unitPosition, lp_finalDestination) - 45.0);
            lv_zigZagDestination = PointWithOffsetPolar(lv_unitPosition, lv_zigZagDistance, lv_zigZagAngle);
        }
        else {
            lv_zigZagAngle = (AngleBetweenPoints(lv_unitPosition, lp_finalDestination) - 45.0);
            lv_zigZagAlternateAngle = (AngleBetweenPoints(lv_unitPosition, lp_finalDestination) + 45.0);
            lv_zigZagDestination = PointWithOffsetPolar(lv_unitPosition, lv_zigZagDistance, lv_zigZagAngle);
        }
        if ((PointPathingPassable(lv_zigZagDestination) == true) && (PointPathingCost(lv_unitPosition, lv_zigZagDestination) <= lv_zigZagDistance) && (RegionContainsPoint(libMapM_gv_mMSafeRegions[lp_team], lv_zigZagDestination) == false)) {
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_zigZagDestination), c_orderQueueReplace);
            UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lp_finalDestination), c_orderQueueAddToEnd);
        }
        else {
            lv_zigZagDestination = PointWithOffsetPolar(lv_unitPosition, lv_zigZagDistance, lv_zigZagAlternateAngle);
            if ((PointPathingPassable(lv_zigZagDestination) == true) && (PointPathingCost(lv_unitPosition, lv_zigZagDestination) <= lv_zigZagDistance) && (RegionContainsPoint(libMapM_gv_mMSafeRegions[lp_team], lv_zigZagDestination) == false)) {
                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lv_zigZagDestination), c_orderQueueReplace);
                UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("move", 0), lp_finalDestination), c_orderQueueAddToEnd);
            }

        }
        Wait(RandomFixed(1.5, 2.0), c_timeGame);
    }
    return true;
}

trigger auto_libGDHL_gf_LNYProgressLogic_Trigger = null;
unit auto_libGDHL_gf_LNYProgressLogic_lp_unit;

void libGDHL_gf_LNYProgressLogic (unit lp_unit) {
    auto_libGDHL_gf_LNYProgressLogic_lp_unit = lp_unit;

    if (auto_libGDHL_gf_LNYProgressLogic_Trigger == null) {
        auto_libGDHL_gf_LNYProgressLogic_Trigger = TriggerCreate("auto_libGDHL_gf_LNYProgressLogic_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_LNYProgressLogic_Trigger, false, false);
}

bool auto_libGDHL_gf_LNYProgressLogic_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libGDHL_gf_LNYProgressLogic_lp_unit;

    int autoBC6530D1_val;

    // Variable Declarations
    int lv_teamPlayerGroup;
    int lv_team;
    fixed lv_baseMovementSpeed;
    fixed lv_progressIncrement;
    fixed lv_accruedProgress;
    const fixed lv__1PlayerProgressIncrement_C = 3.8;
    const fixed lv__2PlayerProgressIncrement_C = 4.5;
    const fixed lv__3PlayerProgressIncrement_C = 4.9;
    const fixed lv__4PlayerProgressIncrement_C = 5.2;
    const fixed lv__5PlayerProgressIncrement_C = 5.5;
    bool lv_progressUnitsSet;

    // Variable Initialization

    // Implementation
    if ((UnitGetOwner(lp_unit) == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_teamPlayerGroup = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_activeHumanPlayers;
        lv_team = libGame_gv_teamOrderIndex_C;
    }
    else {
        lv_teamPlayerGroup = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_activeHumanPlayers;
        lv_team = libGame_gv_teamChaosIndex_C;
    }
    lv_baseMovementSpeed = UnitGetPropertyFixed(lp_unit, c_unitPropMovementSpeed, c_unitPropNormal);
    while ((UnitIsAlive(lp_unit) == true)) {
        lv_progressIncrement = 0.0;
        autoBC6530D1_val = UnitBehaviorCount(lp_unit, "LNYLunarNewYearTargetBehavior5Stacks");
        if (autoBC6530D1_val == 0) {
            UnitSetPropertyFixed(lp_unit, c_unitPropMovementSpeed, lv_baseMovementSpeed);
        }
        else if (autoBC6530D1_val == 1) {
            UnitSetPropertyFixed(lp_unit, c_unitPropMovementSpeed, 5.4);
            lv_progressIncrement = lv__1PlayerProgressIncrement_C;
        }
        else if (autoBC6530D1_val == 2) {
            UnitSetPropertyFixed(lp_unit, c_unitPropMovementSpeed, 5.2);
            lv_progressIncrement = lv__2PlayerProgressIncrement_C;
        }
        else if (autoBC6530D1_val == 3) {
            UnitSetPropertyFixed(lp_unit, c_unitPropMovementSpeed, 5.1);
            lv_progressIncrement = lv__3PlayerProgressIncrement_C;
        }
        else if (autoBC6530D1_val == 4) {
            UnitSetPropertyFixed(lp_unit, c_unitPropMovementSpeed, 4.9);
            lv_progressIncrement = lv__4PlayerProgressIncrement_C;
        }
        else if (autoBC6530D1_val == 5) {
            UnitSetPropertyFixed(lp_unit, c_unitPropMovementSpeed, 4.8);
            lv_progressIncrement = lv__5PlayerProgressIncrement_C;
        }
        else {
        }
        lv_progressIncrement /= 4.0;
        lv_accruedProgress += lv_progressIncrement;
        if ((lv_accruedProgress != 0.0)) {
            UnitSetPropertyFixed(libGDHL_gv_lNYProgressUnit[lv_team], c_unitPropLife, (lv_accruedProgress * 1000.0));
            UnitSetPropertyFixed(libGDHL_gv_lNYUnit[lv_team], c_unitPropEnergyPercent, lv_accruedProgress);
            if ((lv_progressUnitsSet == false)) {
                lv_progressUnitsSet = true;
                libNtve_gf_SetDialogItemUnit(libGDHL_gv_lNYUI.lv_healthFrame, libGDHL_gv_lNYProgressUnit[libGame_gv_teamOrderIndex_C], libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false));
                libNtve_gf_SetDialogItemUnit(libGDHL_gv_lNYUI.lv_healthFrame, libGDHL_gv_lNYProgressUnit[libGame_gv_teamChaosIndex_C], libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false));
            }

        }
        else {
            UnitSetPropertyFixed(libGDHL_gv_lNYUnit[lv_team], c_unitPropEnergyPercent, 0.0);
            UnitSetPropertyFixed(libGDHL_gv_lNYProgressUnit[lv_team], c_unitPropLife, 0.001);
        }
        Wait(0.25, c_timeGame);
        if ((lv_accruedProgress >= 100.0)) {
            libGDHL_gv_lNY_TeamCompletedEvent[lv_team] = true;
            PlayerCreateEffectUnit(lv_teamPlayerGroup, "LNYLunarNewYearKillLunarNewYearUnit", lp_unit);
        }

    }
    return true;
}

trigger auto_libGDHL_gf_LNYSetSmartInteractionRange_Trigger = null;

void libGDHL_gf_LNYSetSmartInteractionRange () {
    if (auto_libGDHL_gf_LNYSetSmartInteractionRange_Trigger == null) {
        auto_libGDHL_gf_LNYSetSmartInteractionRange_Trigger = TriggerCreate("auto_libGDHL_gf_LNYSetSmartInteractionRange_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_LNYSetSmartInteractionRange_Trigger, false, false);
}

bool auto_libGDHL_gf_LNYSetSmartInteractionRange_TriggerFunc (bool testConds, bool runActions) {
    int auto219207BB_ae;
    int auto219207BB_ai;
    fixed autoF557AA4F_at;
    int autoE2F079BD_ae;
    int autoE2F079BD_ai;

    // Variable Declarations
    int lv_itPlayer;
    string lv_defaultRangeValue;

    // Variable Initialization
    lv_defaultRangeValue = "";

    // Implementation
    lv_defaultRangeValue = CatalogFieldValueGet(c_gameCatalogAbil, "SmartCommandUnitInteraction", "Range[" + IntToString(0) + "]", 1);
    auto219207BB_ae = libCore_gv_bALMaxPlayers;
    auto219207BB_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto219207BB_ai >= 0 && lv_itPlayer <= auto219207BB_ae) || (auto219207BB_ai <= 0 && lv_itPlayer >= auto219207BB_ae) ) ; lv_itPlayer += auto219207BB_ai ) {
        CatalogFieldValueSet(c_gameCatalogAbil, "SmartCommandUnitInteraction", "Range[" + IntToString(0) + "]", lv_itPlayer, "4");
    }
    autoF557AA4F_at = 0;
    while (!((TimerGetDuration(libGame_gv_openTheGatesTimer) <= 0.0)) && autoF557AA4F_at <= 35.0) {
        Wait(1.0, c_timeGame);
        autoF557AA4F_at = autoF557AA4F_at + 1.0;
    }
    autoE2F079BD_ae = libCore_gv_bALMaxPlayers;
    autoE2F079BD_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoE2F079BD_ai >= 0 && lv_itPlayer <= autoE2F079BD_ae) || (autoE2F079BD_ai <= 0 && lv_itPlayer >= autoE2F079BD_ae) ) ; lv_itPlayer += autoE2F079BD_ai ) {
        CatalogFieldValueSet(c_gameCatalogAbil, "SmartCommandUnitInteraction", "Range[" + IntToString(0) + "]", lv_itPlayer, lv_defaultRangeValue);
    }
    return true;
}

trigger auto_libGDHL_gf_LNYSetVOPlaying_Trigger = null;

void libGDHL_gf_LNYSetVOPlaying () {
    if (auto_libGDHL_gf_LNYSetVOPlaying_Trigger == null) {
        auto_libGDHL_gf_LNYSetVOPlaying_Trigger = TriggerCreate("auto_libGDHL_gf_LNYSetVOPlaying_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_LNYSetVOPlaying_Trigger, false, false);
}

bool auto_libGDHL_gf_LNYSetVOPlaying_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    libGDHL_gv_lNYVOIntroPlaying = true;
    Wait(12.0, c_timeGame);
    libGDHL_gv_lNYVOIntroPlaying = false;
    return true;
}

void libGDHL_gf_LNYPlayLNYIntroVOForPlayerGroups () {
    // Variable Declarations
    playergroup lv_orderPlayerGroup;
    playergroup lv_chaosPlayerGroup;
    playergroup lv_observerPlayer;

    // Variable Initialization
    lv_orderPlayerGroup = PlayerGroupEmpty();
    lv_chaosPlayerGroup = PlayerGroupEmpty();
    lv_observerPlayer = PlayerGroupEmpty();

    // Implementation
    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("LunarNewYearEvent", ("Left"));
    ConversationDataLineResetPlayers("LunarNewYearEvent", ("Right"));
    UserDataSetInt("MapVOEvent", "Seasonal Event - SpawnFirst", "Value", 1, 1);
    UserDataSetInt("MapVOEvent", "Seasonal Event - SpawnRepeat", "Value", 1, 1);
    ConversationDataLineSetPlayers("LunarNewYearEvent", ("CreateFirst"), libGDHL_gv_lNY_PlayerGroupForEventFirst);
    ConversationDataLineSetPlayers("LunarNewYearEvent", ("CreateRepeat"), libGDHL_gv_lNY_PlayerGroupForEventRepeat);
    ConversationDataRun("LunarNewYearEvent", libGDHL_gv_lNY_PlayerGroupForEvent, c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
}

void libGDHL_gf_LNYPlayLNYOutroVOForTeam (int lp_team) {
    // Variable Declarations
    playergroup lv_playerGroupCompleteFirst;
    playergroup lv_playerGroupCompleteRepeat;
    playergroup lv_playerGroupFailure;
    playergroup lv_vOPlayerGroup;

    // Variable Initialization
    lv_playerGroupCompleteFirst = PlayerGroupEmpty();
    lv_playerGroupCompleteRepeat = PlayerGroupEmpty();
    lv_playerGroupFailure = PlayerGroupEmpty();
    lv_vOPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_playerGroupCompleteFirst = PlayerGroupCopy(libGDHL_gv_lNY_PlayerGroupEventCompleteFirst[lp_team]);
    libNtve_gf_AddPlayerGroupToPlayerGroup(lv_playerGroupCompleteFirst, lv_vOPlayerGroup);
    lv_playerGroupCompleteRepeat = PlayerGroupCopy(libGDHL_gv_lNY_PlayerGroupEventCompleteRepeat[lp_team]);
    libNtve_gf_AddPlayerGroupToPlayerGroup(lv_playerGroupCompleteRepeat, lv_vOPlayerGroup);
    lv_playerGroupFailure = PlayerGroupCopy(libGDHL_gv_lNY_PlayerGroupEventFailure[lp_team]);
    libNtve_gf_AddPlayerGroupToPlayerGroup(lv_playerGroupFailure, lv_vOPlayerGroup);
    PlayerGroupClear(libGDHL_gv_lNY_PlayerGroupEventCompleteFirst[lp_team]);
    PlayerGroupClear(libGDHL_gv_lNY_PlayerGroupEventCompleteRepeat[lp_team]);
    PlayerGroupClear(libGDHL_gv_lNY_PlayerGroupEventFailure[lp_team]);
    libGDHL_gf_LNYDetermineLNYOutroVOFailure(lv_playerGroupFailure);
    libGDHL_gf_LNYDetermineLNYOutroVOEndFirst(lv_playerGroupCompleteFirst);
    libGDHL_gf_LNYDetermineLNYOutroVOEndRepeat(lv_playerGroupCompleteRepeat);
}

void libGDHL_gf_LNYDetermineLNYOutroVOFailure (playergroup lp_playerGroup) {
    int auto1DE95237_val;

    // Variable Declarations
    int lv_random;

    // Variable Initialization

    // Implementation
    lv_random = RandomInt(1, 4);
    auto1DE95237_val = lv_random;
    if (auto1DE95237_val == 1) {
        TransmissionSendForPlayerSelect(lp_playerGroup, TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLink(ConversationDataGetSound("LunarNewYearEvent|Line00023", false), c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else if (auto1DE95237_val == 2) {
        TransmissionSendForPlayerSelect(lp_playerGroup, TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLink(ConversationDataGetSound("LunarNewYearEvent|Line00024", false), c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else if (auto1DE95237_val == 3) {
        TransmissionSendForPlayerSelect(lp_playerGroup, TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLink(ConversationDataGetSound("LunarNewYearEvent|Line00025", false), c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else if (auto1DE95237_val == 4) {
        TransmissionSendForPlayerSelect(lp_playerGroup, TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLink(ConversationDataGetSound("LunarNewYearEvent|Line00030", false), c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else {
    }
}

void libGDHL_gf_LNYDetermineLNYOutroVOEndRepeat (playergroup lp_playerGroup) {
    int auto205B4E56_val;

    // Variable Declarations
    int lv_random;

    // Variable Initialization

    // Implementation
    lv_random = RandomInt(1, 6);
    auto205B4E56_val = lv_random;
    if (auto205B4E56_val == 1) {
        TransmissionSendForPlayerSelect(lp_playerGroup, TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLink(ConversationDataGetSound("LunarNewYearEvent|Line00017", false), c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else if (auto205B4E56_val == 2) {
        TransmissionSendForPlayerSelect(lp_playerGroup, TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLink(ConversationDataGetSound("LunarNewYearEvent|Line00018", false), c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else if (auto205B4E56_val == 3) {
        TransmissionSendForPlayerSelect(lp_playerGroup, TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLink(ConversationDataGetSound("LunarNewYearEvent|Line00019", false), c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else if (auto205B4E56_val == 4) {
        TransmissionSendForPlayerSelect(lp_playerGroup, TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLink(ConversationDataGetSound("LunarNewYearEvent|Line00020", false), c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else if (auto205B4E56_val == 5) {
        TransmissionSendForPlayerSelect(lp_playerGroup, TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLink(ConversationDataGetSound("LunarNewYearEvent|Line00021", false), c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else if (auto205B4E56_val == 6) {
        TransmissionSendForPlayerSelect(lp_playerGroup, TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLink(ConversationDataGetSound("LunarNewYearEvent|Line00029", false), c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else {
    }
}

void libGDHL_gf_LNYDetermineLNYOutroVOEndFirst (playergroup lp_playerGroup) {
    int autoAB0F714D_val;

    // Variable Declarations
    int lv_random;

    // Variable Initialization

    // Implementation
    lv_random = RandomInt(1, 4);
    autoAB0F714D_val = lv_random;
    if (autoAB0F714D_val == 1) {
        TransmissionSendForPlayerSelect(lp_playerGroup, TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLink(ConversationDataGetSound("LunarNewYearEvent|Line00014", false), c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else if (autoAB0F714D_val == 2) {
        TransmissionSendForPlayerSelect(lp_playerGroup, TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLink(ConversationDataGetSound("LunarNewYearEvent|Line00015", false), c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else if (autoAB0F714D_val == 3) {
        TransmissionSendForPlayerSelect(lp_playerGroup, TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLink(ConversationDataGetSound("LunarNewYearEvent|Line00027", false), c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else if (autoAB0F714D_val == 4) {
        TransmissionSendForPlayerSelect(lp_playerGroup, TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLink(ConversationDataGetSound("LunarNewYearEvent|Line00028", false), c_soundIndexAny), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else {
    }
}

void libGDHL_gf_StarCraftEventInitializeEvent () {
    int auto499390FA_ae;
    int auto499390FA_ai;

    // Variable Declarations
    int lv_iPlayer;

    // Variable Initialization

    // Implementation
    if ((libCore_gv_sYSGameMode != libCore_ge_GameModes_Normal)) {
        return ;
    }

    TriggerExecute(libGDHL_gt_StarCraftEventIdentifyGatesAsValidPoints, true, false);
    TriggerEnable(libGDHL_gt_StarCraftEventPlayerBeginsCollectingArtifact, true);
    TriggerEnable(libGDHL_gt_StarCraftEventPlayerStopsCollectingArtifact, true);
    TriggerEnable(libGDHL_gt_StarCraftEventArtifactPieceGetsCollected, true);
    TriggerEnable(libGDHL_gt_StarCraftEventArtifactPieceGetsCollectedBySCV, true);
    TriggerEnable(libGDHL_gt_StarCraftEventOpenTheGatesTimerStartedStartEvent, true);
    TriggerEnable(libGDHL_gt_StarCraftEventEventTimerExpiresSpawningStops, true);
    TriggerEnable(libGDHL_gt_StarCraftEventCompletelyEndEventTimerExpires, true);
    TriggerEnable(libGDHL_gt_StarCraftEventVictorySequenceTriggered, true);
    TriggerEnable(libGDHL_gt_StarCraftEventSCVTurnsInArtifactPiece, true);
    TriggerEnable(libGDHL_gt_StarCraftEventSCVDropsArtifact, true);
    TriggerEnable(libGDHL_gt_StarCraftEventArtifactDies, true);
    TriggerEnable(libGDHL_gt_StarCraftEventSCVDies, true);
    TriggerEnable(libGDHL_gt_StarCraftEventOpenTheGateTimerExpires, true);
    libGDHL_gv_seasonalEvents.lv_initialMacguffinPeriodCount = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "CaptureMacGuffinTwo", "PeriodCount", 1);
    libGDHL_gv_seasonalEvents.lv_initialMacguffinPeriodDuration = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CaptureMacGuffinTwo", "PeriodicPeriodArray[" + IntToString(0) + "]", c_playerAny));
    auto499390FA_ae = 10;
    auto499390FA_ai = 1;
    lv_iPlayer = 1;
    for ( ; ( (auto499390FA_ai >= 0 && lv_iPlayer <= auto499390FA_ae) || (auto499390FA_ai <= 0 && lv_iPlayer >= auto499390FA_ae) ) ; lv_iPlayer += auto499390FA_ai ) {
        CatalogFieldValueSet(c_gameCatalogAbil, "CaptureMacGuffinTwo", "Activity", lv_iPlayer, ("UI/Event/StarCraftEvent/ActivityBar"));
        CatalogFieldValueSet(c_gameCatalogEffect, "CaptureMacGuffinTwo", "PeriodCount", lv_iPlayer, FixedToString(libGDHL_gv_seasonalEvents.lv_customMacguffinPeriodCount, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogEffect, "CaptureMacGuffinTwo", "PeriodicPeriodArray[" + IntToString(0) + "]", lv_iPlayer, FixedToString(libGDHL_gv_seasonalEvents.lv_customMacguffinPeriodDuration, c_fixedPrecisionAny));
    }
}

void libGDHL_gf_StarCraftEventSpawnInitialArtifactsForTeam (int lp_team) {
    int auto09865689_ae;
    int auto09865689_ai;

    // Variable Declarations
    point lv_referencePoint;
    fixed lv_defaultAngle;
    region lv_teamBaseRegion;
    int lv_itArtifact;

    // Variable Initialization

    // Implementation
    if ((lp_team == libGame_gv_teamOrderIndex_C)) {
        lv_teamBaseRegion = libCore_gv_mAPOrderBaseRegion;
        lv_referencePoint = PlayerStartLocation(1);
    }
    else {
        lv_teamBaseRegion = libCore_gv_mAPChaosBaseRegion;
        lv_referencePoint = PlayerStartLocation(6);
    }
    lv_defaultAngle = AngleBetweenPoints(lv_referencePoint, UnitGetPosition(libGame_gv_teams[lp_team].lv_core));
    auto09865689_ae = 6;
    auto09865689_ai = 1;
    lv_itArtifact = 1;
    for ( ; ( (auto09865689_ai >= 0 && lv_itArtifact <= auto09865689_ae) || (auto09865689_ai <= 0 && lv_itArtifact >= auto09865689_ae) ) ; lv_itArtifact += auto09865689_ai ) {
        libGDHL_gf_StarCraftEventSpawnArtifactInRandomSpot(lp_team);
    }
}

void libGDHL_gf_StarCraftEventSpawnArtifactInRandomSpot (int lp_team) {
    // Variable Declarations
    int lv_computerplayer;
    region lv_baseRegion;
    point lv_point;
    point lv_nudgedpoint;
    fixed lv_nudgedistance;
    unitgroup lv_artifactsNearby;
    point lv_referencePoint;
    region lv_spawnAreaRegion;
    point lv_placementpoint;

    // Variable Initialization
    lv_artifactsNearby = UnitGroupEmpty();

    // Implementation
    if ((lp_team == libGame_gv_teamOrderIndex_C)) {
        lv_baseRegion = libCore_gv_mAPOrderBaseRegion;
        lv_computerplayer = libCore_gv_cOMPUTER_TeamOrder;
        lv_referencePoint = PlayerStartLocation(1);
    }
    else {
        lv_baseRegion = libCore_gv_mAPChaosBaseRegion;
        lv_computerplayer = libCore_gv_cOMPUTER_TeamChaos;
        lv_referencePoint = PlayerStartLocation(6);
    }
    lv_spawnAreaRegion = RegionCircle(lv_referencePoint, 15.0);
    lv_point = RegionRandomPoint(lv_baseRegion);
    lv_nudgedpoint = libGDHL_gf_StarCraftEventPointToSpawnInitialArtifactAt(lv_point, lp_team, lv_baseRegion, lv_spawnAreaRegion);
    if ((PointPathingPassable(lv_nudgedpoint) == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "XelnagaArtifactPiece", 0, lv_computerplayer, lv_nudgedpoint);
        TextTagCreate(StringExternal("Param/Value/lib_GDHL_092EB742"), 24, UnitGetPosition(UnitLastCreated()), 2.0, true, true, GameAttributePlayersForTeam(lp_team));
        libCore_gf_StoreTextTagForUnit(UnitLastCreated(), 1, TextTagLastCreated());
        libGDHL_gf_StarCraftEventSetUpArtifact(lp_team, UnitLastCreated());
    }

}

point libGDHL_gf_StarCraftEventPointToSpawnInitialArtifactAt (point lp_initialPoint, int lp_team, region lp_baseRegion, region lp_spawnAreaRegion) {
    int auto1E7E81C2_n;
    int auto1E7E81C2_i;
    int auto17EE7CA3_n;
    int auto17EE7CA3_i;

    // Variable Declarations
    point lv_point;
    unitgroup lv_artifactsNearby;
    point lv_placementPoint;
    point lv_nudgepoint;

    // Variable Initialization
    lv_artifactsNearby = UnitGroupEmpty();

    // Implementation
    lv_point = lp_initialPoint;
    auto1E7E81C2_n = 100;
    for (auto1E7E81C2_i = 1; auto1E7E81C2_i <= auto1E7E81C2_n; auto1E7E81C2_i += 1) {
        lv_artifactsNearby = UnitGroup("XelnagaArtifactPiece", libGame_gf_ComputerPlayerInTeam(lp_team), RegionCircle(lv_point, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_artifactsNearby, c_unitCountAlive) == 0) && (RegionContainsPoint(lp_spawnAreaRegion, lv_point) == false) && (PointPathingPassable(lv_point) == true) && ((libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[1][lp_team] == null) || (DistanceBetweenPoints(lv_point, libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[1][lp_team]) > libGDHL_gv_starCraftEvent.lv_dropshipNullZoneRadius)) && ((libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[2][lp_team] == null) || (DistanceBetweenPoints(lv_point, libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[2][lp_team]) > libGDHL_gv_starCraftEvent.lv_dropshipNullZoneRadius)) && ((libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[3][lp_team] == null) || (DistanceBetweenPoints(lv_point, libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[3][lp_team]) > libGDHL_gv_starCraftEvent.lv_dropshipNullZoneRadius))) {
            break;
        }
        else {
            lv_point = RegionRandomPoint(lp_baseRegion);
        }
    }
    lv_placementPoint = UnitTypePlacementFromPoint("XelnagaArtifactPiece", libGame_gf_ComputerPlayerInTeam(lp_team), lv_point, 10.0);
    lv_artifactsNearby = UnitGroup("XelnagaArtifactPiece", libGame_gf_ComputerPlayerInTeam(lp_team), RegionCircle(lv_placementPoint, 8.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((RegionContainsPoint(lp_baseRegion, lv_placementPoint) == true) && (UnitGroupCount(lv_artifactsNearby, c_unitCountAlive) == 0) && (RegionContainsPoint(lp_spawnAreaRegion, lv_placementPoint) == false) && ((libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[1][lp_team] == null) || (DistanceBetweenPoints(lv_placementPoint, libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[1][lp_team]) > libGDHL_gv_starCraftEvent.lv_dropshipNullZoneRadius)) && ((libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[2][lp_team] == null) || (DistanceBetweenPoints(lv_placementPoint, libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[2][lp_team]) > libGDHL_gv_starCraftEvent.lv_dropshipNullZoneRadius)) && ((libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[3][lp_team] == null) || (DistanceBetweenPoints(lv_placementPoint, libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[3][lp_team]) > libGDHL_gv_starCraftEvent.lv_dropshipNullZoneRadius)) && (PointPathingPassable(lv_placementPoint) == true)) {
        return lv_placementPoint;
    }
    else {
        auto17EE7CA3_n = 50;
        for (auto17EE7CA3_i = 1; auto17EE7CA3_i <= auto17EE7CA3_n; auto17EE7CA3_i += 1) {
            if ((((libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[1][lp_team] != null) && (DistanceBetweenPoints(lv_placementPoint, libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[1][lp_team]) < libGDHL_gv_starCraftEvent.lv_dropshipNullZoneRadius)) || ((libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[2][lp_team] != null) && (DistanceBetweenPoints(lv_placementPoint, libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[2][lp_team]) < libGDHL_gv_starCraftEvent.lv_dropshipNullZoneRadius)) || ((libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[3][lp_team] != null) && (DistanceBetweenPoints(lv_placementPoint, libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[3][lp_team]) < libGDHL_gv_starCraftEvent.lv_dropshipNullZoneRadius)) || (PointPathingPassable(lv_placementPoint) == false) || (RegionContainsPoint(lp_baseRegion, lv_placementPoint) == false) || (RegionContainsPoint(lp_spawnAreaRegion, lv_placementPoint) == true))) {
                lv_nudgepoint = lv_placementPoint;
                lv_placementPoint = libNtve_gf_PointOffsetTowardsPoint(lv_nudgepoint, 2.0, UnitGetPosition(libGame_gv_teams[lp_team].lv_core));
            }
            else {
                break;
            }
        }
    }
    return lv_placementPoint;
}

bool libGDHL_gf_StarcraftEventIsPointNearArtifact (int lp_team, point lp_Point) {
    int auto824A05BC_ae;
    int auto824A05BC_ai;

    // Variable Declarations
    int lv_artifactIndex;

    // Variable Initialization

    // Implementation
    auto824A05BC_ae = UnitGroupCount(libGDHL_gv_starCraftEvent.lv_artifactUnitGroup[lp_team], c_unitCountAlive);
    auto824A05BC_ai = 1;
    lv_artifactIndex = 1;
    for ( ; ( (auto824A05BC_ai >= 0 && lv_artifactIndex <= auto824A05BC_ae) || (auto824A05BC_ai <= 0 && lv_artifactIndex >= auto824A05BC_ae) ) ; lv_artifactIndex += auto824A05BC_ai ) {
        if ((DistanceBetweenPoints(lp_Point, UnitGetPosition(UnitGroupUnit(libGDHL_gv_starCraftEvent.lv_artifactUnitGroup[lp_team], lv_artifactIndex))) == 0.75)) {
            return true;
        }

    }
    return false;
}

void libGDHL_gf_StarCraftEventSetUpArtifact (int lp_team, unit lp_artifactUnit) {
    // Variable Declarations
    point lv_unitLocation;
    bool lv_removedBySCV;

    // Variable Initialization

    // Implementation
    UnitGroupAdd(libGDHL_gv_starCraftEvent.lv_artifactUnitGroup[lp_team], lp_artifactUnit);
    UnitGroupAdd(libGDHL_gv_starCraftEvent.lv_artifactsThatSCVsCanGather[lp_team], lp_artifactUnit);
    AddUnitOfInterest(lp_artifactUnit, 0.0, 0.0, c_goalPointSeasonalEvent, 0);
}

void libGDHL_gf_StarCraftEventSpawnNewArtifact (int lp_team, point lp_artifactSpawnPoint) {
    int auto84E2E905_n;
    int auto84E2E905_i;
    int auto2E00DADE_n;
    int auto2E00DADE_i;

    // Variable Declarations
    region lv_teamRegion;
    int lv_computerPlayer;
    point lv_spawnPoint;
    point lv_nudgedPoint;
    unitgroup lv_artifactsNearby;
    point lv_spawnAreaRegionReferencePoint;
    region lv_spawnAreaRegion;
    point lv_initialSpawnPoint;

    // Variable Initialization
    lv_artifactsNearby = UnitGroupEmpty();

    // Implementation
    if ((libGDHL_gv_starCraftEvent.lv_continueSpawningArtifacts[lp_team] == false)) {
        return ;
    }

    if ((lp_team == libGame_gv_teamOrderIndex_C)) {
        lv_computerPlayer = libCore_gv_cOMPUTER_TeamOrder;
        lv_teamRegion = libCore_gv_mAPOrderBaseRegion;
        lv_spawnAreaRegionReferencePoint = PlayerStartLocation(1);
    }
    else {
        lv_computerPlayer = libCore_gv_cOMPUTER_TeamChaos;
        lv_teamRegion = libCore_gv_mAPChaosBaseRegion;
        lv_spawnAreaRegionReferencePoint = PlayerStartLocation(6);
    }
    lv_spawnAreaRegion = RegionCircle(lv_spawnAreaRegionReferencePoint, 15.0);
    lv_spawnPoint = PointWithOffsetPolar(lp_artifactSpawnPoint, 8.0, libNtve_gf_RandomAngle());
    lv_artifactsNearby = UnitGroup("XelnagaArtifactPiece", lv_computerPlayer, RegionCircle(lv_spawnPoint, 5.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto84E2E905_n = 100;
    for (auto84E2E905_i = 1; auto84E2E905_i <= auto84E2E905_n; auto84E2E905_i += 1) {
        if (((libGDHL_gf_StarcraftEventIsPointNearArtifact(lp_team, lv_spawnPoint) == true) || (PointPathingPassable(lv_spawnPoint) == false) || (RegionContainsPoint(lv_teamRegion, lv_spawnPoint) == false) || (RegionContainsPoint(lv_spawnAreaRegion, lv_spawnPoint) == true) || (UnitGroupCount(lv_artifactsNearby, c_unitCountAlive) > 0))) {
            lv_nudgedPoint = PointWithOffsetPolar(lv_spawnPoint, 1.0, AngleBetweenPoints(lv_spawnPoint, UnitGetPosition(libGame_gv_teams[lp_team].lv_core)));
            lv_spawnPoint = lv_nudgedPoint;
            lv_artifactsNearby = UnitGroup("XelnagaArtifactPiece", lv_computerPlayer, RegionCircle(lv_spawnPoint, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }
        else {
            break;
        }
    }
    if (((libGDHL_gf_StarcraftEventIsPointNearArtifact(lp_team, lv_spawnPoint) == true) || (PointPathingPassable(lv_spawnPoint) == false) || (RegionContainsPoint(lv_spawnAreaRegion, lv_spawnPoint) == true))) {
        lv_spawnPoint = PointWithOffsetPolar(lp_artifactSpawnPoint, 8.0, libNtve_gf_RandomAngle());
        lv_initialSpawnPoint = lv_spawnPoint;
        auto2E00DADE_n = 50;
        for (auto2E00DADE_i = 1; auto2E00DADE_i <= auto2E00DADE_n; auto2E00DADE_i += 1) {
            if (((libGDHL_gf_StarcraftEventIsPointNearArtifact(lp_team, lv_spawnPoint) == true) || (PointPathingPassable(lv_spawnPoint) == false) || (RegionContainsPoint(lv_spawnAreaRegion, lv_spawnPoint) == true))) {
                lv_nudgedPoint = PointWithOffsetPolar(lv_spawnPoint, 1.0, AngleBetweenPoints(lv_initialSpawnPoint, UnitGetPosition(libGame_gv_teams[lp_team].lv_core)));
                lv_spawnPoint = lv_nudgedPoint;
                lv_artifactsNearby = UnitGroup("XelnagaArtifactPiece", lv_computerPlayer, RegionCircle(lv_spawnPoint, 3.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            }
            else {
                break;
            }
        }
    }

    if ((libGDHL_gv_starCraftEvent.lv_continueSpawningArtifacts[lp_team] == false)) {
        return ;
    }

    libNtve_gf_CreateUnitsWithDefaultFacing(1, "XelnagaArtifactPiece", 0, lv_computerPlayer, lv_spawnPoint);
    TextTagCreate(StringExternal("Param/Value/lib_GDHL_283771D6"), 24, UnitGetPosition(UnitLastCreated()), 2.0, true, true, GameAttributePlayersForTeam(lp_team));
    libCore_gf_StoreTextTagForUnit(UnitLastCreated(), 1, TextTagLastCreated());
    libGDHL_gf_StarCraftEventSetUpArtifact(lp_team, UnitLastCreated());
}

bool libGDHL_gf_StarCraftEventShouldVictorySequencePlay (int lp_winningTeam) {
    // Implementation
    if ((libGDHL_gv_starCraftEvent.lv_victorySequenceShouldPlay[lp_winningTeam] == true)) {
        libGDHL_gv_seasonalEvents.lv_victoryCallbackTrigger = libGDHL_gt_StarCraftEventVictorySequenceTriggered;
        return true;
    }
    else {
        return false;
    }
}

void libGDHL_gf_StarCraftEventCreateDropshipsForTeam (int lp_team) {
    // Variable Declarations
    int lv_computerPlayer;

    // Variable Initialization

    // Implementation
    if ((lp_team == libGame_gv_teamOrderIndex_C)) {
        lv_computerPlayer = libCore_gv_cOMPUTER_NoVision_TeamChaos;
    }
    else {
        lv_computerPlayer = libCore_gv_cOMPUTER_NoVision_TeamOrder;
    }
    IntLoopBegin(1, libGDHL_gv_starCraftEvent.lv_sCVDropshipCount[lp_team]);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitCreate(1, "StarCraftEventSCVDropship", c_unitCreateIgnorePlacement, lv_computerPlayer, libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[IntLoopCurrent()][lp_team], (AngleBetweenPoints(libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[IntLoopCurrent()][lp_team], UnitGetPosition(libGame_gv_teams[lp_team].lv_core)) + 180));
        libGDHL_gv_starCraftEvent.lv_dropshipUnit[IntLoopCurrent()][lp_team] = UnitLastCreated();
        UnitGroupAdd(libGDHL_gv_starCraftEvent.lv_dropshipUnitGroup[lp_team], UnitLastCreated());
    }
    IntLoopEnd();
}

trigger auto_libGDHL_gf_StarCraftEventSpawnInitialSCVUnitsNearDropships_Trigger = null;
int auto_libGDHL_gf_StarCraftEventSpawnInitialSCVUnitsNearDropships_lp_team;

void libGDHL_gf_StarCraftEventSpawnInitialSCVUnitsNearDropships (int lp_team) {
    auto_libGDHL_gf_StarCraftEventSpawnInitialSCVUnitsNearDropships_lp_team = lp_team;

    if (auto_libGDHL_gf_StarCraftEventSpawnInitialSCVUnitsNearDropships_Trigger == null) {
        auto_libGDHL_gf_StarCraftEventSpawnInitialSCVUnitsNearDropships_Trigger = TriggerCreate("auto_libGDHL_gf_StarCraftEventSpawnInitialSCVUnitsNearDropships_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_StarCraftEventSpawnInitialSCVUnitsNearDropships_Trigger, false, false);
}

bool auto_libGDHL_gf_StarCraftEventSpawnInitialSCVUnitsNearDropships_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libGDHL_gf_StarCraftEventSpawnInitialSCVUnitsNearDropships_lp_team;

    // Variable Declarations
    int lv_computerPlayer;

    // Variable Initialization

    // Implementation
    if ((lp_team == libGame_gv_teamOrderIndex_C)) {
        lv_computerPlayer = libCore_gv_cOMPUTER_NoVision_TeamChaos;
    }
    else {
        lv_computerPlayer = libCore_gv_cOMPUTER_NoVision_TeamOrder;
    }
    Wait(3.0, c_timeGame);
    IntLoopBegin(1, libGDHL_gv_starCraftEvent.lv_sCVDropshipCount[lp_team]);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        libNtve_gf_UnitCreateFacingPoint(1, "StarCraftEventSCV", c_unitCreateIgnorePlacement, lv_computerPlayer, libNtve_gf_PointOffsetTowardsPoint(libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[IntLoopCurrent()][lp_team], 2.0, UnitGetPosition(libGame_gv_teams[lp_team].lv_core)), UnitGetPosition(libGame_gv_teams[lp_team].lv_core));
        UnitGroupAdd(libGDHL_gv_starCraftEvent.lv_sCVUnitGroup[lp_team], UnitLastCreated());
        UnitSetCustomValue(UnitLastCreated(), 0, IntLoopCurrent());
        UnitSetCustomValue(UnitLastCreated(), 1, 1.0);
        libGDHL_gf_StarCraftEventIssueGatherOrderToSCVForTeam(UnitLastCreated(), true, lp_team);
    }
    IntLoopEnd();
    Wait(2.0, c_timeGame);
    IntLoopBegin(1, libGDHL_gv_starCraftEvent.lv_sCVDropshipCount[lp_team]);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        libNtve_gf_UnitCreateFacingPoint(1, "StarCraftEventSCV", c_unitCreateIgnorePlacement, lv_computerPlayer, libNtve_gf_PointOffsetTowardsPoint(libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[IntLoopCurrent()][lp_team], 2.0, UnitGetPosition(libGame_gv_teams[lp_team].lv_core)), UnitGetPosition(libGame_gv_teams[lp_team].lv_core));
        UnitGroupAdd(libGDHL_gv_starCraftEvent.lv_sCVUnitGroup[lp_team], UnitLastCreated());
        UnitSetCustomValue(UnitLastCreated(), 0, IntLoopCurrent());
        UnitSetCustomValue(UnitLastCreated(), 1, 2.0);
        libGDHL_gf_StarCraftEventIssueGatherOrderToSCVForTeam(UnitLastCreated(), true, lp_team);
    }
    IntLoopEnd();
    return true;
}

void libGDHL_gf_StarCraftEventSpawnNewSCVUnit (int lp_dropShipIndexToSpawnFrom, int lp_team) {
    // Variable Declarations
    int lv_computerPlayer;

    // Variable Initialization

    // Implementation
    if ((lp_team == libGame_gv_teamOrderIndex_C)) {
        lv_computerPlayer = libCore_gv_cOMPUTER_NoVision_TeamChaos;
    }
    else {
        lv_computerPlayer = libCore_gv_cOMPUTER_NoVision_TeamOrder;
    }
    libNtve_gf_UnitCreateFacingPoint(1, "StarCraftEventSCV", c_unitCreateIgnorePlacement, lv_computerPlayer, libNtve_gf_PointOffsetTowardsPoint(libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[lp_dropShipIndexToSpawnFrom][lp_team], 2.0, UnitGetPosition(libGame_gv_teams[lp_team].lv_core)), UnitGetPosition(libGame_gv_teams[lp_team].lv_core));
    UnitGroupAdd(libGDHL_gv_starCraftEvent.lv_sCVUnitGroup[lp_team], UnitLastCreated());
    UnitSetCustomValue(UnitLastCreated(), 0, lp_dropShipIndexToSpawnFrom);
    libGDHL_gf_StarCraftEventIssueGatherOrderToSCVForTeam(UnitLastCreated(), true, lp_team);
}

trigger auto_libGDHL_gf_StarCraftEventIssueGatherOrderToSCVForTeam_Trigger = null;
unit auto_libGDHL_gf_StarCraftEventIssueGatherOrderToSCVForTeam_lp_unit;
bool auto_libGDHL_gf_StarCraftEventIssueGatherOrderToSCVForTeam_lp_wait;
int auto_libGDHL_gf_StarCraftEventIssueGatherOrderToSCVForTeam_lp_team;

void libGDHL_gf_StarCraftEventIssueGatherOrderToSCVForTeam (unit lp_unit, bool lp_wait, int lp_team) {
    auto_libGDHL_gf_StarCraftEventIssueGatherOrderToSCVForTeam_lp_unit = lp_unit;
    auto_libGDHL_gf_StarCraftEventIssueGatherOrderToSCVForTeam_lp_wait = lp_wait;
    auto_libGDHL_gf_StarCraftEventIssueGatherOrderToSCVForTeam_lp_team = lp_team;

    if (auto_libGDHL_gf_StarCraftEventIssueGatherOrderToSCVForTeam_Trigger == null) {
        auto_libGDHL_gf_StarCraftEventIssueGatherOrderToSCVForTeam_Trigger = TriggerCreate("auto_libGDHL_gf_StarCraftEventIssueGatherOrderToSCVForTeam_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_StarCraftEventIssueGatherOrderToSCVForTeam_Trigger, false, false);
}

bool auto_libGDHL_gf_StarCraftEventIssueGatherOrderToSCVForTeam_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libGDHL_gf_StarCraftEventIssueGatherOrderToSCVForTeam_lp_unit;
    bool lp_wait = auto_libGDHL_gf_StarCraftEventIssueGatherOrderToSCVForTeam_lp_wait;
    int lp_team = auto_libGDHL_gf_StarCraftEventIssueGatherOrderToSCVForTeam_lp_team;

    // Variable Declarations
    unit lv_artifactToGather;

    // Variable Initialization

    // Implementation
    if ((lp_wait == true)) {
        Wait(1.0, c_timeGame);
    }

    lv_artifactToGather = UnitGroupClosestToPoint(libGDHL_gv_starCraftEvent.lv_artifactsThatSCVsCanGather[lp_team], UnitGetPosition(lp_unit));
    libGDHL_gv_starCraftEvent.lv_sCVTargetArtifact[FixedToInt(UnitGetCustomValue(lp_unit, 0))][FixedToInt(UnitGetCustomValue(lp_unit, 1))][lp_team] = lv_artifactToGather;
    UnitGroupRemove(libGDHL_gv_starCraftEvent.lv_artifactsThatSCVsCanGather[lp_team], lv_artifactToGather);
    UnitIssueOrder(lp_unit, OrderTargetingUnit(AbilityCommand("StarCraftEventSCVGatherArtifact", 0), lv_artifactToGather), c_orderQueueReplace);
    return true;
}

void libGDHL_gf_StarCraftEventIssueLeaveOrderToSCVForTeam (unit lp_unit, int lp_team) {
    // Implementation
    UnitIssueOrder(lp_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    UnitIssueOrder(lp_unit, OrderTargetingPoint(AbilityCommand("StarCraftEventSCVTurnInArtifact", 0), libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[FixedToInt(UnitGetCustomValue(lp_unit, 0))][lp_team]), c_orderQueueReplace);
}

trigger auto_libGDHL_gf_StarCraftEventMakeSCVReturnToDropship_Trigger = null;
unit auto_libGDHL_gf_StarCraftEventMakeSCVReturnToDropship_lp_sCVUnit;
int auto_libGDHL_gf_StarCraftEventMakeSCVReturnToDropship_lp_team;

void libGDHL_gf_StarCraftEventMakeSCVReturnToDropship (unit lp_sCVUnit, int lp_team) {
    auto_libGDHL_gf_StarCraftEventMakeSCVReturnToDropship_lp_sCVUnit = lp_sCVUnit;
    auto_libGDHL_gf_StarCraftEventMakeSCVReturnToDropship_lp_team = lp_team;

    if (auto_libGDHL_gf_StarCraftEventMakeSCVReturnToDropship_Trigger == null) {
        auto_libGDHL_gf_StarCraftEventMakeSCVReturnToDropship_Trigger = TriggerCreate("auto_libGDHL_gf_StarCraftEventMakeSCVReturnToDropship_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_StarCraftEventMakeSCVReturnToDropship_Trigger, false, false);
}

bool auto_libGDHL_gf_StarCraftEventMakeSCVReturnToDropship_TriggerFunc (bool testConds, bool runActions) {
    unit lp_sCVUnit = auto_libGDHL_gf_StarCraftEventMakeSCVReturnToDropship_lp_sCVUnit;
    int lp_team = auto_libGDHL_gf_StarCraftEventMakeSCVReturnToDropship_lp_team;

    fixed autoE14CFA97_at;

    // Implementation
    autoE14CFA97_at = 0;
    while (!((UnitHasBehavior2(lp_sCVUnit, "StarCraftEventSCVCarryingArtifact") == false)) && autoE14CFA97_at <= 6.0) {
        Wait(1.0, c_timeGame);
        autoE14CFA97_at = autoE14CFA97_at + 1.0;
    }
    if ((UnitIsValid(lp_sCVUnit) == true)) {
        UnitIssueOrder(lp_sCVUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitIssueOrder(lp_sCVUnit, OrderTargetingPoint(AbilityCommand("StarCraftEventSCVTurnInArtifact", 0), libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[FixedToInt(UnitGetCustomValue(lp_sCVUnit, 0))][lp_team]), c_orderQueueReplace);
    }

    return true;
}

void libGDHL_gf_StarCraftEventPlayIntroForTeam (int lp_team) {
    int auto9F26CD75_val;

    // Variable Declarations
    int lv_random;

    // Variable Initialization

    // Implementation
    lv_random = RandomInt(1, 5);
    auto9F26CD75_val = lv_random;
    if (auto9F26CD75_val == 1) {
        TransmissionSendForPlayerSelect(libGame_gf_PlayersOnTeamHeroes(lp_team, false), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("StarCraftEvent|Line00010", false)), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else if (auto9F26CD75_val == 2) {
        TransmissionSendForPlayerSelect(libGame_gf_PlayersOnTeamHeroes(lp_team, false), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("StarCraftEvent|Line00011", false)), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else if (auto9F26CD75_val == 3) {
        TransmissionSendForPlayerSelect(libGame_gf_PlayersOnTeamHeroes(lp_team, false), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("StarCraftEvent|Line00012", false)), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else if (auto9F26CD75_val == 4) {
        TransmissionSendForPlayerSelect(libGame_gf_PlayersOnTeamHeroes(lp_team, false), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("StarCraftEvent|Line00013", false)), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else if (auto9F26CD75_val == 5) {
        TransmissionSendForPlayerSelect(libGame_gf_PlayersOnTeamHeroes(lp_team, false), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("StarCraftEvent|Line00014", false)), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else {
    }
}

trigger auto_libGDHL_gf_StarCraftEventPlaySuccessEndVOForTeam_Trigger = null;
int auto_libGDHL_gf_StarCraftEventPlaySuccessEndVOForTeam_lp_team;

void libGDHL_gf_StarCraftEventPlaySuccessEndVOForTeam (int lp_team) {
    auto_libGDHL_gf_StarCraftEventPlaySuccessEndVOForTeam_lp_team = lp_team;

    if (auto_libGDHL_gf_StarCraftEventPlaySuccessEndVOForTeam_Trigger == null) {
        auto_libGDHL_gf_StarCraftEventPlaySuccessEndVOForTeam_Trigger = TriggerCreate("auto_libGDHL_gf_StarCraftEventPlaySuccessEndVOForTeam_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_StarCraftEventPlaySuccessEndVOForTeam_Trigger, false, false);
}

bool auto_libGDHL_gf_StarCraftEventPlaySuccessEndVOForTeam_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libGDHL_gf_StarCraftEventPlaySuccessEndVOForTeam_lp_team;

    int autoEBE32ECB_val;

    // Variable Declarations
    int lv_random;

    // Variable Initialization

    // Implementation
    TransmissionClear(libGDHL_gv_starCraftEvent.lv_artifactsNoLongerDetectedVO[lp_team]);
    lv_random = RandomInt(1, 5);
    autoEBE32ECB_val = lv_random;
    if (autoEBE32ECB_val == 1) {
        TransmissionSendForPlayerSelect(libGame_gf_PlayersOnTeamHeroes(lp_team, false), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("StarCraftEvent|Line00015", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (autoEBE32ECB_val == 2) {
        TransmissionSendForPlayerSelect(libGame_gf_PlayersOnTeamHeroes(lp_team, false), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("StarCraftEvent|Line00016", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (autoEBE32ECB_val == 3) {
        TransmissionSendForPlayerSelect(libGame_gf_PlayersOnTeamHeroes(lp_team, false), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("StarCraftEvent|Line00017", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (autoEBE32ECB_val == 4) {
        TransmissionSendForPlayerSelect(libGame_gf_PlayersOnTeamHeroes(lp_team, false), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("StarCraftEvent|Line00018", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (autoEBE32ECB_val == 5) {
        TransmissionSendForPlayerSelect(libGame_gf_PlayersOnTeamHeroes(lp_team, false), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("StarCraftEvent|Line00019", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
    }
    libGDHL_gv_seasonalEvents.lv_successVOCompleted[lp_team] = true;
    return true;
}

trigger auto_libGDHL_gf_StarCraftEventPlayFailureEndVOForTeam_Trigger = null;
int auto_libGDHL_gf_StarCraftEventPlayFailureEndVOForTeam_lp_team;

void libGDHL_gf_StarCraftEventPlayFailureEndVOForTeam (int lp_team) {
    auto_libGDHL_gf_StarCraftEventPlayFailureEndVOForTeam_lp_team = lp_team;

    if (auto_libGDHL_gf_StarCraftEventPlayFailureEndVOForTeam_Trigger == null) {
        auto_libGDHL_gf_StarCraftEventPlayFailureEndVOForTeam_Trigger = TriggerCreate("auto_libGDHL_gf_StarCraftEventPlayFailureEndVOForTeam_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_StarCraftEventPlayFailureEndVOForTeam_Trigger, false, false);
}

bool auto_libGDHL_gf_StarCraftEventPlayFailureEndVOForTeam_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libGDHL_gf_StarCraftEventPlayFailureEndVOForTeam_lp_team;

    int autoFF01D873_val;

    // Variable Declarations
    int lv_random;

    // Variable Initialization

    // Implementation
    TransmissionClear(libGDHL_gv_starCraftEvent.lv_artifactsNoLongerDetectedVO[lp_team]);
    lv_random = RandomInt(1, 5);
    autoFF01D873_val = lv_random;
    if (autoFF01D873_val == 1) {
        TransmissionSendForPlayerSelect(libGame_gf_PlayersOnTeamHeroes(lp_team, false), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("StarCraftEvent|Line00020", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (autoFF01D873_val == 2) {
        TransmissionSendForPlayerSelect(libGame_gf_PlayersOnTeamHeroes(lp_team, false), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("StarCraftEvent|Line00021", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (autoFF01D873_val == 3) {
        TransmissionSendForPlayerSelect(libGame_gf_PlayersOnTeamHeroes(lp_team, false), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("StarCraftEvent|Line00022", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (autoFF01D873_val == 4) {
        TransmissionSendForPlayerSelect(libGame_gf_PlayersOnTeamHeroes(lp_team, false), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("StarCraftEvent|Line00023", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else if (autoFF01D873_val == 5) {
        TransmissionSendForPlayerSelect(libGame_gf_PlayersOnTeamHeroes(lp_team, false), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("StarCraftEvent|Line00024", false)), null, null, 0.0, c_transmissionDurationAdd, true, c_maxPlayers, false);
    }
    else {
    }
    libGDHL_gv_seasonalEvents.lv_failVOCompleted[lp_team] = true;
    return true;
}

void libGDHL_gf_StarCraftEventPlayNoMoreArtifactsDetectedForTeam (int lp_team) {
    int auto0AD78EDB_val;

    // Variable Declarations
    int lv_random;

    // Variable Initialization

    // Implementation
    lv_random = RandomInt(1, 5);
    auto0AD78EDB_val = lv_random;
    if (auto0AD78EDB_val == 1) {
        TransmissionSendForPlayerSelect(libGame_gf_PlayersOnTeamHeroes(lp_team, false), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("StarCraftEvent|Line00005", false)), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else if (auto0AD78EDB_val == 2) {
        TransmissionSendForPlayerSelect(libGame_gf_PlayersOnTeamHeroes(lp_team, false), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("StarCraftEvent|Line00006", false)), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else if (auto0AD78EDB_val == 3) {
        TransmissionSendForPlayerSelect(libGame_gf_PlayersOnTeamHeroes(lp_team, false), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("StarCraftEvent|Line00007", false)), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else if (auto0AD78EDB_val == 4) {
        TransmissionSendForPlayerSelect(libGame_gf_PlayersOnTeamHeroes(lp_team, false), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("StarCraftEvent|Line00008", false)), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else if (auto0AD78EDB_val == 5) {
        TransmissionSendForPlayerSelect(libGame_gf_PlayersOnTeamHeroes(lp_team, false), TransmissionSource(), c_invalidPortraitId, "", "Talk", SoundLinkNoIndex(ConversationDataGetSound("StarCraftEvent|Line00009", false)), null, null, 0.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
    }
    else {
    }
    libGDHL_gv_starCraftEvent.lv_artifactsNoLongerDetectedVO[lp_team] = TransmissionLastSent();
}

void libGDHL_gf_StarCraftEventInitializeHUDUI (int lp_parentPanel, int lp_team) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SeasonalEventPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(lp_team, false), true);
    libGDHL_gv_starCraftEvent.lv_hUDPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "StarCraftEventHealthBar");
    libGDHL_gv_starCraftEvent.lv_hUDProgressBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "BackgroundContainer");
    libGDHL_gv_starCraftEvent.lv_hUDProgressBackgroundContainer = DialogControlLastCreated();
    DialogControlHookup(libGDHL_gv_starCraftEvent.lv_hUDProgressBackgroundContainer, c_triggerControlTypeImage, "NotificationIcon");
    libGDHL_gv_starCraftEvent.lv_hUDNotificationBlink = DialogControlLastCreated();
    DialogControlHookup(libGDHL_gv_starCraftEvent.lv_hUDProgressBackgroundContainer, c_triggerControlTypeLabel, "ProgressLabel");
    libGDHL_gv_starCraftEvent.lv_hUDProgressCounter = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/lib_GDHL_159FDD69", "A", IntToText(libGDHL_gv_starCraftEvent.lv_teamProgress[lp_team]));
    TextExpressionSetToken("Param/Expression/lib_GDHL_159FDD69", "B", IntToText(libGDHL_gv_starCraftEvent.lv_teamRequiredProgress[lp_team]));
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), TextExpressionAssemble("Param/Expression/lib_GDHL_159FDD69"), libGame_gf_PlayersOnTeamHeroes(lp_team, false));
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HealthBarBG");
    libGDHL_gv_starCraftEvent.lv_hUDProgressBackground = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "StarCraftEventTimer");
    libGDHL_gv_starCraftEvent.lv_hUDTimer = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "QuestCompleteNotificationFrame");
    libGDHL_gv_starCraftEvent.lv_hUDQuestComplete = DialogControlLastCreated();
}

trigger auto_libGDHL_gf_StarCraftEventSplashPanelUIInit_Trigger = null;
int auto_libGDHL_gf_StarCraftEventSplashPanelUIInit_lp_team;

void libGDHL_gf_StarCraftEventSplashPanelUIInit (int lp_team) {
    auto_libGDHL_gf_StarCraftEventSplashPanelUIInit_lp_team = lp_team;

    if (auto_libGDHL_gf_StarCraftEventSplashPanelUIInit_Trigger == null) {
        auto_libGDHL_gf_StarCraftEventSplashPanelUIInit_Trigger = TriggerCreate("auto_libGDHL_gf_StarCraftEventSplashPanelUIInit_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_StarCraftEventSplashPanelUIInit_Trigger, false, false);
}

bool auto_libGDHL_gf_StarCraftEventSplashPanelUIInit_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libGDHL_gf_StarCraftEventSplashPanelUIInit_lp_team;

    playergroup auto413863A1_g;
    int auto413863A1_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    DialogControlHookupStandard(c_triggerControlTypePanel, "SeasonalEventSplashPanel");
    DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupAll(), "Show");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libGDHL_gv_starCraftEvent.lv_helpPanel = DialogControlLastCreated();
    auto413863A1_g = libGame_gf_PlayersOnTeamHeroes(lp_team, false); 
    auto413863A1_p = 1;
    for ( ; auto413863A1_p <= PlayerGroupCount(auto413863A1_g) ; auto413863A1_p += (lv_itPlayer == PlayerGroupPlayer(auto413863A1_g, auto413863A1_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto413863A1_g, auto413863A1_p);
        if ((PlayerGroupHasPlayer(libStEx_gv_sEMMIntroPlayersInitiallyWatching, lv_itPlayer) == false) && (PlayerHasReward(lv_itPlayer, "ArtifactCompleted") == false)) {
            DialogControlSetVisible(libGDHL_gv_starCraftEvent.lv_helpPanel, PlayerGroupSingle(lv_itPlayer), true);
        }
        else {
            Wait(4.0, c_timeGame);
            DialogControlSetVisible(libGDHL_gv_starCraftEvent.lv_helpPanel, PlayerGroupSingle(lv_itPlayer), false);
        }
    }
    return true;
}

trigger auto_libGDHL_gf_StarCraftEventRunEventTimerLogicForTeam_Trigger = null;
int auto_libGDHL_gf_StarCraftEventRunEventTimerLogicForTeam_lp_team;

void libGDHL_gf_StarCraftEventRunEventTimerLogicForTeam (int lp_team) {
    auto_libGDHL_gf_StarCraftEventRunEventTimerLogicForTeam_lp_team = lp_team;

    if (auto_libGDHL_gf_StarCraftEventRunEventTimerLogicForTeam_Trigger == null) {
        auto_libGDHL_gf_StarCraftEventRunEventTimerLogicForTeam_Trigger = TriggerCreate("auto_libGDHL_gf_StarCraftEventRunEventTimerLogicForTeam_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_StarCraftEventRunEventTimerLogicForTeam_Trigger, false, false);
}

bool auto_libGDHL_gf_StarCraftEventRunEventTimerLogicForTeam_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libGDHL_gf_StarCraftEventRunEventTimerLogicForTeam_lp_team;

    // Implementation
    libNtve_gf_SetDialogItemText(libGDHL_gv_starCraftEvent.lv_hUDTimer, TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(libGDHL_gv_starCraftEvent.lv_completelyEndEventTimer))), libGame_gf_PlayersOnTeamHeroes(lp_team, false));
    DialogControlSetVisible(libGDHL_gv_starCraftEvent.lv_hUDTimer, libGame_gf_PlayersOnTeamHeroes(lp_team, false), true);
    while ((TimerGetRemaining(libGDHL_gv_starCraftEvent.lv_completelyEndEventTimer) > 0.0) && (libGDHL_gv_starCraftEvent.lv_victorySequenceShouldPlay[lp_team] == false)) {
        libNtve_gf_SetDialogItemText(libGDHL_gv_starCraftEvent.lv_hUDTimer, TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(libGDHL_gv_starCraftEvent.lv_completelyEndEventTimer))), libGame_gf_PlayersOnTeamHeroes(lp_team, false));
        Wait(1.0, c_timeGame);
    }
    DialogControlSetVisible(libGDHL_gv_starCraftEvent.lv_hUDTimer, libGame_gf_PlayersOnTeamHeroes(lp_team, false), false);
    return true;
}

void libGDHL_gf_StarCraftEventSetUpProgressBarForTeam (int lp_team) {
    // Variable Declarations
    int lv_computerPlayer;
    bool lv_dummyBoolean;

    // Variable Initialization
    lv_dummyBoolean = true;

    // Implementation
    if ((lp_team == libGame_gv_teamOrderIndex_C)) {
        lv_computerPlayer = libCore_gv_cOMPUTER_TeamOrder;
    }

    if ((lp_team == libGame_gv_teamChaosIndex_C)) {
        lv_computerPlayer = libCore_gv_cOMPUTER_TeamChaos;
    }

    if ((lv_dummyBoolean == true)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ProgressBarUnit", c_unitCreateIgnorePlacement, lv_computerPlayer, RegionGetCenter(RegionEntireMap()));
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, libGDHL_gv_starCraftEvent.lv_teamRequiredProgress[lp_team]);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLife, 1.0);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetMinimapVisibility");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetVisibility");
        libNtve_gf_SetDialogItemUnit(libGDHL_gv_starCraftEvent.lv_hUDProgressBar, UnitLastCreated(), libGame_gf_PlayersOnTeamHeroes(lp_team, false));
        libGDHL_gv_starCraftEvent.lv_hUDProgressBarUnit[lp_team] = UnitLastCreated();
    }

}

void libGDHL_gf_StarCraftEventUpdateProgressCounterForTeam (int lp_team) {
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_GDHL_89459387", "A", IntToText(libGDHL_gv_starCraftEvent.lv_teamProgress[lp_team]));
    TextExpressionSetToken("Param/Expression/lib_GDHL_89459387", "B", IntToText(libGDHL_gv_starCraftEvent.lv_teamRequiredProgress[lp_team]));
    libNtve_gf_SetDialogItemText(libGDHL_gv_starCraftEvent.lv_hUDProgressCounter, TextExpressionAssemble("Param/Expression/lib_GDHL_89459387"), libGame_gf_PlayersOnTeamHeroes(lp_team, false));
}

void libGDHL_gf_StarCraftEventUISetBlinkingBorder (int lp_mode) {
    int autoA33517EA_val;

    // Implementation
    autoA33517EA_val = lp_mode;
    if (autoA33517EA_val == libGame_gv_teamOrderIndex_C) {
        if ((libGDHL_gv_SCEvent_OrderPlayedAnimation == false)) {
            DialogControlSendAnimationEvent(libGDHL_gv_starCraftEvent.lv_hUDNotificationBlink, PlayerGroupAll(), "ArtifactBlink");
            libGDHL_gv_SCEvent_OrderPlayedAnimation = true;
        }

    }
    else if (autoA33517EA_val == libGame_gv_teamChaosIndex_C) {
        if ((libGDHL_gv_SCEvent_ChaosPlayedAnimation == false)) {
            DialogControlSendAnimationEvent(libGDHL_gv_starCraftEvent.lv_hUDNotificationBlink, PlayerGroupAll(), "ArtifactBlink");
            libGDHL_gv_SCEvent_ChaosPlayedAnimation = true;
        }

    }
    else {
    }
}

void libGDHL_gf_LNYRoosterPreloadContent () {
    // Implementation
    PreloadModel("Assets\\Doodads\\Storm_Doodad_LunarFestival2016_FireCracker\\Storm_Doodad_LunarFestival2016_FireCracker.m3", false);
    PreloadModel("Assets\\Doodads\\Storm_Doodad_LunarFestival2016_Flower\\Storm_Doodad_LunarFestival2016_Flower.m3", false);
    PreloadModel("Assets\\Doodads\\Storm_Doodad_LunarFestival2016_GoldBullion\\Storm_Doodad_LunarFestival2016_GoldBullion.m3", false);
    PreloadModel("Assets\\Doodads\\Storm_Doodad_LunarFestival2016_Jade\\Storm_Doodad_LunarFestival2016_Jade.m3", false);
    PreloadModel("Assets\\Effects\\Storm_FX_LunarFestival_Victory_Fireworks\\Storm_FX_LunarFestival_Victory_Fireworks.m3", false);
    PreloadModel("Assets\\Units\\Mercs\\Storm_Merc_LunarFestival2016_Rooster\\Storm_Merc_LunarFestival2016_Rooster.m3", false);
}

void libGDHL_gf_LNYRoosterInitializeEventForBothTeams () {
    int auto6D7CD131_ae;
    int auto6D7CD131_ai;

    // Variable Declarations
    int lv_iPlayer;

    // Variable Initialization

    // Implementation
    TriggerEnable(libGDHL_gt_LNYRoosterEventTimerExpires, true);
    TriggerEnable(libGDHL_gt_LNYRoosterInitializeMainUI, true);
    TriggerEnable(libGDHL_gt_LNYRoosterPlayerCollectsItem, true);
    TriggerEnable(libGDHL_gt_LNYRoosterRoosterAcceptsItem, true);
    TriggerEnable(libGDHL_gt_LNYRoosterRoosterRejectsItem, true);
    TriggerEnable(libGDHL_gt_LNYRoosterRoosterStopsMoving, true);
    TriggerEnable(libGDHL_gt_LNYRoosterPlayerGivesWantedItem, true);
    TriggerExecute(libGDHL_gt_LNYRoosterInitializeMainUI, true, false);
    TimerStart(libGDHL_gv_lNYRooster_QuestTimer, (libCore_gv_bALOpenTheGatesDelay - 2), false, c_timeGame);
    libGDHL_gf_LNYRoosterSetUpRandomizedItemPool(libGame_gv_teamOrderIndex_C);
    libGDHL_gf_LNYRoosterSetUpRandomizedItemPool(libGame_gv_teamChaosIndex_C);
    libGDHL_gf_CreateRoosterForTeam(libGame_gv_teamOrderIndex_C);
    libGDHL_gf_CreateRoosterForTeam(libGame_gv_teamChaosIndex_C);
    libGDHL_gf_LNYRoosterSpawnInitialItemsForTeam(libGame_gv_teamOrderIndex_C);
    libGDHL_gf_LNYRoosterSpawnInitialItemsForTeam(libGame_gv_teamChaosIndex_C);
    libGDHL_gv_seasonalEvents.lv_initialMacguffinPeriodCount = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "CaptureMacGuffinTwo", "PeriodCount", 1);
    libGDHL_gv_seasonalEvents.lv_initialMacguffinPeriodDuration = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "CaptureMacGuffinTwo", "PeriodicPeriodArray[" + IntToString(0) + "]", c_playerAny));
    libGDHL_gv_seasonalEvents.lv_initialMacguffinActivity = CatalogFieldValueGet(c_gameCatalogAbil, "CaptureMacGuffinTwo", "Activity", c_playerAny);
    auto6D7CD131_ae = 10;
    auto6D7CD131_ai = 1;
    lv_iPlayer = 1;
    for ( ; ( (auto6D7CD131_ai >= 0 && lv_iPlayer <= auto6D7CD131_ae) || (auto6D7CD131_ai <= 0 && lv_iPlayer >= auto6D7CD131_ae) ) ; lv_iPlayer += auto6D7CD131_ai ) {
        CatalogFieldValueSet(c_gameCatalogEffect, "CaptureMacGuffinTwo", "PeriodCount", lv_iPlayer, FixedToString(libGDHL_gv_seasonalEvents.lv_customMacguffinPeriodCount, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogEffect, "CaptureMacGuffinTwo", "PeriodicPeriodArray[" + IntToString(0) + "]", lv_iPlayer, FixedToString(libGDHL_gv_seasonalEvents.lv_customMacguffinPeriodDuration, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogAbil, "CaptureMacGuffinTwo", "Activity", lv_iPlayer, libGDHL_gv_collectingOfferingString);
    }
    DialogControlFadeTransparency(libUIUI_gv_topBarPanel.lv_mainPanel, PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(libUIUI_gv_deathTimerPanel.lv_mainPanel[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), 0.0, 100.0);
    DialogControlFadeTransparency(libUIUI_gv_deathTimerPanel.lv_mainPanel[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), 0.0, 100.0);
    libGDHL_gf_LNYRoosterInitializeRaceBarUIForTeams();
    libGDHL_gf_LNYRoosterGenerateNewQuestObjectiveCollectItem(libGame_gv_teamOrderIndex_C);
    libGDHL_gf_LNYRoosterGenerateNewQuestObjectiveCollectItem(libGame_gv_teamChaosIndex_C);
    SoundPlayForPlayer(SoundLink("UI_Game_LNY_EventStart_Rooster", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
}

void libGDHL_gf_LNYRoosterSpawnInitialItemsForTeam (int lp_team) {
    // Implementation
    libGDHL_gf_LNYRoosterCreateItemAtRandomLocationForTeam(lp_team, 1);
    libGDHL_gf_LNYRoosterCreateItemAtRandomLocationForTeam(lp_team, 2);
    libGDHL_gf_LNYRoosterCreateItemAtRandomLocationForTeam(lp_team, 3);
    libGDHL_gf_LNYRoosterCreateItemAtRandomLocationForTeam(lp_team, 4);
    libGDHL_gf_LNYRoosterCreateItemAtRandomLocationForTeam(lp_team, 1);
    libGDHL_gf_LNYRoosterCreateItemAtRandomLocationForTeam(lp_team, 2);
    libGDHL_gf_LNYRoosterCreateItemAtRandomLocationForTeam(lp_team, 3);
    libGDHL_gf_LNYRoosterCreateItemAtRandomLocationForTeam(lp_team, 4);
}

void libGDHL_gf_LNYRoosterSetUpRandomizedItemPool (int lp_team) {
    // Implementation
    PlayerGroupAdd(libGDHL_gv_lNYRooster_Quest[lp_team].lv_objectivePool1, 1);
    PlayerGroupAdd(libGDHL_gv_lNYRooster_Quest[lp_team].lv_objectivePool1, 2);
    PlayerGroupAdd(libGDHL_gv_lNYRooster_Quest[lp_team].lv_objectivePool1, 3);
    PlayerGroupAdd(libGDHL_gv_lNYRooster_Quest[lp_team].lv_objectivePool1, 4);
    PlayerGroupAdd(libGDHL_gv_lNYRooster_Quest[lp_team].lv_objectivePool2, 1);
    PlayerGroupAdd(libGDHL_gv_lNYRooster_Quest[lp_team].lv_objectivePool2, 2);
    PlayerGroupAdd(libGDHL_gv_lNYRooster_Quest[lp_team].lv_objectivePool2, 3);
    PlayerGroupAdd(libGDHL_gv_lNYRooster_Quest[lp_team].lv_objectivePool2, 4);
}

int libGDHL_gf_LNYRoosterGetNextQuestMacguffinForTeam (int lp_team, int lp_poolIndex) {
    // Variable Declarations
    int lv_randomItemIndex;

    // Variable Initialization

    // Implementation
    if ((lp_poolIndex == 1)) {
        lv_randomItemIndex = PlayerGroupPlayer(libGDHL_gv_lNYRooster_Quest[lp_team].lv_objectivePool1, RandomInt(1, PlayerGroupCount(libGDHL_gv_lNYRooster_Quest[lp_team].lv_objectivePool1)));
        PlayerGroupRemove(libGDHL_gv_lNYRooster_Quest[lp_team].lv_objectivePool1, lv_randomItemIndex);
    }
    else {
        lv_randomItemIndex = PlayerGroupPlayer(libGDHL_gv_lNYRooster_Quest[lp_team].lv_objectivePool2, RandomInt(1, PlayerGroupCount(libGDHL_gv_lNYRooster_Quest[lp_team].lv_objectivePool2)));
        PlayerGroupRemove(libGDHL_gv_lNYRooster_Quest[lp_team].lv_objectivePool2, lv_randomItemIndex);
    }
    libGDHL_gv_lNYRooster_Quest[lp_team].lv_currentRequiredItemIndex = lv_randomItemIndex;
    return lv_randomItemIndex;
}

void libGDHL_gf_LNYRoosterCreateItemAtRandomLocationForTeam (int lp_team, int lp_itemIndex) {
    int autoC39CAE48_n;
    int autoC39CAE48_i;
    int auto805DDE7A_val;

    // Variable Declarations
    region lv_baseRegion;
    point lv_spawnAreaReferencePoint;
    region lv_spawnAreaRegion;
    int lv_computerPlayer;
    point lv_point;
    string lv_unitType;
    unitgroup lv_itemsNearby;
    region lv_intendedSpawnRegion;
    region lv_coreNoSpawnRegion;
    region lv_raceTrackNoSpawnRegion;
    region lv_roosterNoSpawnRegion;
    region lv_flagNoSpawnRegion;
    point lv_centerPoint;

    // Variable Initialization
    lv_itemsNearby = UnitGroupEmpty();

    // Implementation
    if ((lp_team == libGame_gv_teamOrderIndex_C)) {
        lv_baseRegion = libCore_gv_mAPOrderBaseRegion;
        lv_computerPlayer = libCore_gv_cOMPUTER_TeamOrder;
        lv_spawnAreaReferencePoint = PlayerStartLocation(1);
    }
    else {
        lv_baseRegion = libCore_gv_mAPChaosBaseRegion;
        lv_computerPlayer = libCore_gv_cOMPUTER_TeamChaos;
        lv_spawnAreaReferencePoint = PlayerStartLocation(6);
    }
    lv_centerPoint = PointWithOffsetPolar(UnitGetPosition(libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster), (DistanceBetweenPoints(UnitGetPosition(libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster), UnitGetPosition(libGDHL_gv_lNYRooster_Quest[lp_team].lv_flag))/2), AngleBetweenPoints(UnitGetPosition(libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster), UnitGetPosition(libGDHL_gv_lNYRooster_Quest[lp_team].lv_flag)));
    if ((libCore_gv_mAPMapStringID != "TowersOfDoom")) {
        lv_intendedSpawnRegion = RegionCircle(lv_centerPoint, 13.0);
        lv_raceTrackNoSpawnRegion = RegionCircle(lv_centerPoint, 5.0);
        lv_coreNoSpawnRegion = RegionCircle(UnitGetPosition(libGame_gv_teams[lp_team].lv_core), 5.0);
        lv_roosterNoSpawnRegion = RegionCircle(UnitGetPosition(libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster), 4.0);
        lv_flagNoSpawnRegion = RegionCircle(UnitGetPosition(libGDHL_gv_lNYRooster_Quest[lp_team].lv_flag), 3.0);
        lv_point = RegionRandomPoint(lv_intendedSpawnRegion);
        lv_spawnAreaRegion = RegionCircle(lv_spawnAreaReferencePoint, 10.0);
        lv_itemsNearby = UnitGroupFilterRegion(libGDHL_gv_lNYRooster_Quest[lp_team].lv_availableItems, RegionCircle(lv_point, 4.0), 0);
    }
    else {
        lv_intendedSpawnRegion = RegionCircle(lv_centerPoint, 10.0);
        lv_raceTrackNoSpawnRegion = RegionCircle(lv_centerPoint, 4.0);
        lv_coreNoSpawnRegion = RegionCircle(UnitGetPosition(libGame_gv_teams[lp_team].lv_core), 5.0);
        lv_roosterNoSpawnRegion = RegionCircle(UnitGetPosition(libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster), 4.0);
        lv_flagNoSpawnRegion = RegionCircle(UnitGetPosition(libGDHL_gv_lNYRooster_Quest[lp_team].lv_flag), 3.0);
        lv_point = RegionRandomPoint(lv_intendedSpawnRegion);
        lv_spawnAreaRegion = RegionCircle(lv_spawnAreaReferencePoint, 10.0);
        lv_itemsNearby = UnitGroupFilterRegion(libGDHL_gv_lNYRooster_Quest[lp_team].lv_availableItems, RegionCircle(lv_point, 4.0), 0);
    }
    autoC39CAE48_n = 100;
    for (autoC39CAE48_i = 1; autoC39CAE48_i <= autoC39CAE48_n; autoC39CAE48_i += 1) {
        if ((UnitGroupCount(lv_itemsNearby, c_unitCountAlive) == 0) && (RegionContainsPoint(lv_baseRegion, lv_point) == true) && (RegionContainsPoint(lv_spawnAreaRegion, lv_point) == false) && (RegionContainsPoint(lv_coreNoSpawnRegion, lv_point) == false) && (RegionContainsPoint(lv_roosterNoSpawnRegion, lv_point) == false) && (RegionContainsPoint(lv_flagNoSpawnRegion, lv_point) == false) && (RegionContainsPoint(lv_raceTrackNoSpawnRegion, lv_point) == false) && (PointPathingPassable(lv_point) == true)) {
            break;
        }
        else {
            lv_point = RegionRandomPoint(lv_intendedSpawnRegion);
            lv_itemsNearby = UnitGroupFilterRegion(libGDHL_gv_lNYRooster_Quest[lp_team].lv_availableItems, RegionCircle(lv_point, 4.0), 0);
        }
    }
    auto805DDE7A_val = lp_itemIndex;
    if (auto805DDE7A_val == 1) {
        lv_unitType = "LunarNewYearRoosterSpecialChickenFeed";
    }
    else if (auto805DDE7A_val == 2) {
        lv_unitType = "LunarNewYearRoosterRocketFuel";
    }
    else if (auto805DDE7A_val == 3) {
        lv_unitType = "LunarNewYearRoosterFreshWater";
    }
    else if (auto805DDE7A_val == 4) {
        lv_unitType = "LunarNewYearRoosterLuxuryChickenShoes";
    }
    else {
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_unitType, 0, lv_computerPlayer, lv_point);
    libGDHL_gf_LNYRoosterSetUpNewlyCreatedItem(UnitLastCreated(), lp_team);
}

void libGDHL_gf_LNYRoosterSetUpNewlyCreatedItem (unit lp_item, int lp_team) {
    // Implementation
    UnitGroupAdd(libGDHL_gv_lNYRooster_Quest[lp_team].lv_availableItems, lp_item);
}

void libGDHL_gf_LNYRoosterGenerateNewQuestObjectiveCollectItem (int lp_team) {
    playergroup autoA1D4A6E6_g;
    int autoA1D4A6E6_p;
    int autoFA80C26A_val;
    unitgroup auto9784C301_g;
    int auto9784C301_u;
    unitgroup autoC70CBC82_g;
    int autoC70CBC82_u;
    unitgroup auto30F34B00_g;
    int auto30F34B00_u;
    unitgroup auto0B1BB872_g;
    int auto0B1BB872_u;

    // Variable Declarations
    text lv_macguffinItem;
    text lv_requiredOfferingLabelText;
    int lv_randomItemPool;
    unit lv_itUnit;
    int lv_itPlayer;

    // Variable Initialization
    lv_macguffinItem = StringExternal("Param/Value/lib_GDHL_16578229");
    lv_requiredOfferingLabelText = StringExternal("Param/Value/lib_GDHL_502446FC");
    lv_randomItemPool = 1;

    // Implementation
    if ((TimerGetRemaining(libGDHL_gv_lNYRooster_QuestTimer) <= 0.0)) {
        return ;
    }

    lv_randomItemPool = RandomInt(1, 2);
    UnitBehaviorAdd(libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster, "LunarNewYearRoosterDoesNotWantFreshWater", libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster, 1);
    UnitBehaviorAdd(libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster, "LunarNewYearRoosterDoesNotWantLuxuryChickenShoes", libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster, 1);
    UnitBehaviorAdd(libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster, "LunarNewYearRoosterDoesNotWantRocketFuel", libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster, 1);
    UnitBehaviorAdd(libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster, "LunarNewYearRoosterDoesNotWantSpecialChickenFeed", libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster, 1);
    autoA1D4A6E6_g = libGame_gf_PlayersOnTeamHeroes(lp_team, false); 
    autoA1D4A6E6_p = 1;
    for ( ; autoA1D4A6E6_p <= PlayerGroupCount(autoA1D4A6E6_g) ; autoA1D4A6E6_p += (lv_itPlayer == PlayerGroupPlayer(autoA1D4A6E6_g, autoA1D4A6E6_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoA1D4A6E6_g, autoA1D4A6E6_p);
        if ((libNtve_gf_PlayerInCinematicMode(lv_itPlayer) == false)) {
            UISetMode(libCore_gv_playerGroupFromPlayer[lv_itPlayer], c_uiModeConsole, c_transitionDurationImmediate);
            libUIUI_gf_UIGameUIShowHideConsolePanelForPlayer(true, lv_itPlayer);
        }

    }
    DialogControlSetVisible(libGDHL_gv_lNYRooster_Quest[lp_team].lv_offeringCutscene, libGame_gf_PlayersOnTeamHeroes(lp_team, false), true);
    DialogControlSetVisible(libGDHL_gv_lNYRooster_Quest[lp_team].lv_offeringBorder, libGame_gf_PlayersOnTeamHeroes(lp_team, false), true);
    if ((libGDHL_gv_lNYRooster_Quest[lp_team].lv_questsRemaining <= 3)) {
        DialogControlSendAnimationEvent(libGDHL_gv_lNYRooster_Quest[lp_team].lv_offeringCutscene, libGame_gf_PlayersOnTeamHeroes(lp_team, false), "FadeCutsceneIn");
    }

    autoFA80C26A_val = libGDHL_gf_LNYRoosterGetNextQuestMacguffinForTeam(lp_team, lv_randomItemPool);
    if (autoFA80C26A_val == 1) {
        if ((((lv_randomItemPool == 1) && (PlayerGroupHasPlayer(libGDHL_gv_lNYRooster_Quest[lp_team].lv_objectivePool2, 1) == false)) || ((lv_randomItemPool == 2) && (PlayerGroupHasPlayer(libGDHL_gv_lNYRooster_Quest[lp_team].lv_objectivePool1, 1) == false)))) {
            lv_macguffinItem = StringExternal("Param/Value/lib_GDHL_9AFF3253");
        }
        else {
            lv_macguffinItem = StringExternal("Param/Value/lib_GDHL_96E78E01");
        }
        lv_requiredOfferingLabelText = StringExternal("Param/Value/lib_GDHL_ED211F41");
        libGDHL_gv_lNYRooster_Quest[lp_team].lv_currentRequiredItemUnitType = "LunarNewYearRoosterSpecialChickenFeed";
        DialogControlSendAnimationEvent(libGDHL_gv_lNYRooster_Quest[lp_team].lv_offeringCutscene, libGame_gf_PlayersOnTeamHeroes(lp_team, false), "SpecialChickenFeed");
        UnitBehaviorRemove(libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster, "LunarNewYearRoosterDoesNotWantSpecialChickenFeed", 1);
        UnitBehaviorAdd(libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster, "LunarNewYearRoosterWantsSpecialChickenFeed", libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster, 1);
        PlayerGroupLoopBegin(libGame_gf_PlayersOnTeamHeroes(lp_team, false));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            auto9784C301_g = libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnitGroup;
            auto9784C301_u = 1;
            for ( ; auto9784C301_u <= UnitGroupCount(auto9784C301_g, c_unitCountAll) ; auto9784C301_u += (lv_itUnit == UnitGroupUnit(auto9784C301_g, auto9784C301_u)) ) {
                lv_itUnit = UnitGroupUnit(auto9784C301_g, auto9784C301_u);
                ActorScopeSend(ActorScopeFromUnit(lv_itUnit), "Signal WantsSpecialChickenFeed");
            }
        }
        PlayerGroupLoopEnd();
    }
    else if (autoFA80C26A_val == 2) {
        if ((((lv_randomItemPool == 1) && (PlayerGroupHasPlayer(libGDHL_gv_lNYRooster_Quest[lp_team].lv_objectivePool2, 2) == false)) || ((lv_randomItemPool == 2) && (PlayerGroupHasPlayer(libGDHL_gv_lNYRooster_Quest[lp_team].lv_objectivePool1, 2) == false)))) {
            lv_macguffinItem = StringExternal("Param/Value/lib_GDHL_D9D62880");
        }
        else {
            lv_macguffinItem = StringExternal("Param/Value/lib_GDHL_BA08C138");
        }
        lv_requiredOfferingLabelText = StringExternal("Param/Value/lib_GDHL_A6EF6FA4");
        libGDHL_gv_lNYRooster_Quest[lp_team].lv_currentRequiredItemUnitType = "LunarNewYearRoosterRocketFuel";
        DialogControlSendAnimationEvent(libGDHL_gv_lNYRooster_Quest[lp_team].lv_offeringCutscene, libGame_gf_PlayersOnTeamHeroes(lp_team, false), "RocketFuel");
        UnitBehaviorRemove(libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster, "LunarNewYearRoosterDoesNotWantRocketFuel", 1);
        UnitBehaviorAdd(libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster, "LunarNewYearRoosterWantsRocketFuel", libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster, 1);
        PlayerGroupLoopBegin(libGame_gf_PlayersOnTeamHeroes(lp_team, false));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            autoC70CBC82_g = libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnitGroup;
            autoC70CBC82_u = 1;
            for ( ; autoC70CBC82_u <= UnitGroupCount(autoC70CBC82_g, c_unitCountAll) ; autoC70CBC82_u += (lv_itUnit == UnitGroupUnit(autoC70CBC82_g, autoC70CBC82_u)) ) {
                lv_itUnit = UnitGroupUnit(autoC70CBC82_g, autoC70CBC82_u);
                ActorScopeSend(ActorScopeFromUnit(lv_itUnit), "Signal WantsRocketFuel");
            }
        }
        PlayerGroupLoopEnd();
    }
    else if (autoFA80C26A_val == 3) {
        if ((((lv_randomItemPool == 1) && (PlayerGroupHasPlayer(libGDHL_gv_lNYRooster_Quest[lp_team].lv_objectivePool2, 3) == false)) || ((lv_randomItemPool == 2) && (PlayerGroupHasPlayer(libGDHL_gv_lNYRooster_Quest[lp_team].lv_objectivePool1, 3) == false)))) {
            lv_macguffinItem = StringExternal("Param/Value/lib_GDHL_478A2B65");
        }
        else {
            lv_macguffinItem = StringExternal("Param/Value/lib_GDHL_9BA3A4B0");
        }
        lv_requiredOfferingLabelText = StringExternal("Param/Value/lib_GDHL_9E5CFADE");
        libGDHL_gv_lNYRooster_Quest[lp_team].lv_currentRequiredItemUnitType = "LunarNewYearRoosterFreshWater";
        DialogControlSendAnimationEvent(libGDHL_gv_lNYRooster_Quest[lp_team].lv_offeringCutscene, libGame_gf_PlayersOnTeamHeroes(lp_team, false), "FreshWater");
        UnitBehaviorRemove(libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster, "LunarNewYearRoosterDoesNotWantFreshWater", 1);
        UnitBehaviorAdd(libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster, "LunarNewYearRoosterWantsFreshWater", libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster, 1);
        PlayerGroupLoopBegin(libGame_gf_PlayersOnTeamHeroes(lp_team, false));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            auto30F34B00_g = libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnitGroup;
            auto30F34B00_u = 1;
            for ( ; auto30F34B00_u <= UnitGroupCount(auto30F34B00_g, c_unitCountAll) ; auto30F34B00_u += (lv_itUnit == UnitGroupUnit(auto30F34B00_g, auto30F34B00_u)) ) {
                lv_itUnit = UnitGroupUnit(auto30F34B00_g, auto30F34B00_u);
                ActorScopeSend(ActorScopeFromUnit(lv_itUnit), "Signal WantsFreshWater");
            }
        }
        PlayerGroupLoopEnd();
    }
    else if (autoFA80C26A_val == 4) {
        if ((((lv_randomItemPool == 1) && (PlayerGroupHasPlayer(libGDHL_gv_lNYRooster_Quest[lp_team].lv_objectivePool2, 4) == false)) || ((lv_randomItemPool == 2) && (PlayerGroupHasPlayer(libGDHL_gv_lNYRooster_Quest[lp_team].lv_objectivePool1, 4) == false)))) {
            lv_macguffinItem = StringExternal("Param/Value/lib_GDHL_5FC71E22");
        }
        else {
            lv_macguffinItem = StringExternal("Param/Value/lib_GDHL_9F6BF84C");
        }
        lv_requiredOfferingLabelText = StringExternal("Param/Value/lib_GDHL_80B80BED");
        libGDHL_gv_lNYRooster_Quest[lp_team].lv_currentRequiredItemUnitType = "LunarNewYearRoosterLuxuryChickenShoes";
        DialogControlSendAnimationEvent(libGDHL_gv_lNYRooster_Quest[lp_team].lv_offeringCutscene, libGame_gf_PlayersOnTeamHeroes(lp_team, false), "LuxuryChickenShoes");
        UnitBehaviorRemove(libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster, "LunarNewYearRoosterDoesNotWantLuxuryChickenShoes", 1);
        UnitBehaviorAdd(libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster, "LunarNewYearRoosterWantsLuxuryChickenShoes", libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster, 1);
        PlayerGroupLoopBegin(libGame_gf_PlayersOnTeamHeroes(lp_team, false));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            auto0B1BB872_g = libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnitGroup;
            auto0B1BB872_u = 1;
            for ( ; auto0B1BB872_u <= UnitGroupCount(auto0B1BB872_g, c_unitCountAll) ; auto0B1BB872_u += (lv_itUnit == UnitGroupUnit(auto0B1BB872_g, auto0B1BB872_u)) ) {
                lv_itUnit = UnitGroupUnit(auto0B1BB872_g, auto0B1BB872_u);
                ActorScopeSend(ActorScopeFromUnit(lv_itUnit), "Signal WantsLuxuryChickenShoes");
            }
        }
        PlayerGroupLoopEnd();
    }
    else {
    }
    libGDHL_gf_SetRequiredOfferingLabel(lv_requiredOfferingLabelText, lp_team, true);
    libGDHL_gf_LNYRoosterShowMinimapTrackerForClosestRequiredItem(lp_team);
    libGDHL_gf_LNYRoosterCreateOrUpdateSplatForTeam(lp_team);
}

void libGDHL_gf_LNYRoosterGenerateNewQuestObjectiveReturnItem (int lp_team) {
    int auto89CBA8FA_val;

    // Variable Declarations
    text lv_macguffinItem;

    // Variable Initialization
    lv_macguffinItem = StringExternal("Param/Value/lib_GDHL_BD27B311");

    // Implementation
    auto89CBA8FA_val = libGDHL_gv_lNYRooster_Quest[lp_team].lv_currentRequiredItemIndex;
    if (auto89CBA8FA_val == 1) {
        lv_macguffinItem = StringExternal("Param/Value/lib_GDHL_BEECC610");
    }
    else if (auto89CBA8FA_val == 2) {
        lv_macguffinItem = StringExternal("Param/Value/lib_GDHL_60E6BB90");
    }
    else if (auto89CBA8FA_val == 3) {
        lv_macguffinItem = StringExternal("Param/Value/lib_GDHL_3991B882");
    }
    else if (auto89CBA8FA_val == 4) {
        lv_macguffinItem = StringExternal("Param/Value/lib_GDHL_611209B0");
    }
    else {
    }
}

void libGDHL_gf_LNYRoosterMarkCurrentQuestAsComplete (int lp_team) {
    // Variable Declarations
    text lv_macguffinItem;
    int lv_objective;

    // Variable Initialization
    lv_macguffinItem = StringExternal("Param/Value/lib_GDHL_50E133A2");
    lv_objective = c_invalidObjectiveId;

    // Implementation
    libGDHL_gv_lNYRooster_Quest[lp_team].lv_questsRemaining -= 1;
}

void libGDHL_gf_LNYRoosterCreateOrUpdateSplatForTeam (int lp_team) {
    playergroup auto8AC0B3CD_g;
    int auto8AC0B3CD_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    auto8AC0B3CD_g = libGame_gf_PlayersOnTeamHeroes(lp_team, false); 
    auto8AC0B3CD_p = 1;
    for ( ; auto8AC0B3CD_p <= PlayerGroupCount(auto8AC0B3CD_g) ; auto8AC0B3CD_p += (lv_itPlayer == PlayerGroupPlayer(auto8AC0B3CD_g, auto8AC0B3CD_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto8AC0B3CD_g, auto8AC0B3CD_p);
        if ((libGDHL_gv_lNYRooster_Quest[lp_team].lv_dummyUnitForSplats[lv_itPlayer] == null)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "LunarNewYearRoosterDummySplatUnit", 0, lv_itPlayer, PlayerStartLocation(lv_itPlayer));
            libGDHL_gv_lNYRooster_Quest[lp_team].lv_dummyUnitForSplats[lv_itPlayer] = UnitLastCreated();
            UnitCreateEffectUnit(libGDHL_gv_lNYRooster_Quest[lp_team].lv_dummyUnitForSplats[lv_itPlayer], "LNYRoosterCreateSplatDummyNoItem", libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster);
        }

        if (((libGDHL_gf_LNYRoosterDoesPlayerHaveLunarFestivalBehavior("LunarNewYearRoosterHasFreshWater", lv_itPlayer) == true) || (libGDHL_gf_LNYRoosterDoesPlayerHaveLunarFestivalBehavior("LunarNewYearRoosterHasLuxuryChickenShoes", lv_itPlayer) == true) || (libGDHL_gf_LNYRoosterDoesPlayerHaveLunarFestivalBehavior("LunarNewYearRoosterHasRocketFuel", lv_itPlayer) == true) || (libGDHL_gf_LNYRoosterDoesPlayerHaveLunarFestivalBehavior("LunarNewYearRoosterHasSpecialChickenFeed", lv_itPlayer) == true))) {
            if ((libGDHL_gf_LNYRoosterDoesPlayerHaveLunarFestivalBehavior("LunarNewYearRoosterHasFreshWater", lv_itPlayer) == true)) {
                UnitCreateEffectUnit(libGDHL_gv_lNYRooster_Quest[lp_team].lv_dummyUnitForSplats[lv_itPlayer], "LNYRoosterCreateSplatDummyFreshWater", libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster);
            }

            if ((libGDHL_gf_LNYRoosterDoesPlayerHaveLunarFestivalBehavior("LunarNewYearRoosterHasLuxuryChickenShoes", lv_itPlayer) == true)) {
                UnitCreateEffectUnit(libGDHL_gv_lNYRooster_Quest[lp_team].lv_dummyUnitForSplats[lv_itPlayer], "LNYRoosterCreateSplatDummyLuxuryChickenShoes", libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster);
            }

            if ((libGDHL_gf_LNYRoosterDoesPlayerHaveLunarFestivalBehavior("LunarNewYearRoosterHasSpecialChickenFeed", lv_itPlayer) == true)) {
                UnitCreateEffectUnit(libGDHL_gv_lNYRooster_Quest[lp_team].lv_dummyUnitForSplats[lv_itPlayer], "LNYRoosterCreateSplatDummySpecialChickenFeed", libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster);
            }

            if ((libGDHL_gf_LNYRoosterDoesPlayerHaveLunarFestivalBehavior("LunarNewYearRoosterHasRocketFuel", lv_itPlayer) == true)) {
                UnitCreateEffectUnit(libGDHL_gv_lNYRooster_Quest[lp_team].lv_dummyUnitForSplats[lv_itPlayer], "LNYRoosterCreateSplatDummyRocketFuel", libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster);
            }

        }
        else {
            UnitCreateEffectUnit(libGDHL_gv_lNYRooster_Quest[lp_team].lv_dummyUnitForSplats[lv_itPlayer], "LNYRoosterUpdateSplats", libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster);
        }
    }
}

void libGDHL_gf_LNYRoosterUpdateSplatForPlayer (int lp_player, int lp_team) {
    // Implementation
    if (((libGDHL_gf_LNYRoosterDoesPlayerHaveLunarFestivalBehavior("LunarNewYearRoosterHasFreshWater", lp_player) == true) || (libGDHL_gf_LNYRoosterDoesPlayerHaveLunarFestivalBehavior("LunarNewYearRoosterHasLuxuryChickenShoes", lp_player) == true) || (libGDHL_gf_LNYRoosterDoesPlayerHaveLunarFestivalBehavior("LunarNewYearRoosterHasRocketFuel", lp_player) == true) || (libGDHL_gf_LNYRoosterDoesPlayerHaveLunarFestivalBehavior("LunarNewYearRoosterHasSpecialChickenFeed", lp_player) == true))) {
        if ((libGDHL_gf_LNYRoosterDoesPlayerHaveLunarFestivalBehavior("LunarNewYearRoosterHasFreshWater", lp_player) == true)) {
            UnitCreateEffectUnit(libGDHL_gv_lNYRooster_Quest[lp_team].lv_dummyUnitForSplats[lp_player], "LNYRoosterCreateSplatDummyFreshWater", libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster);
        }

        if ((libGDHL_gf_LNYRoosterDoesPlayerHaveLunarFestivalBehavior("LunarNewYearRoosterHasLuxuryChickenShoes", lp_player) == true)) {
            UnitCreateEffectUnit(libGDHL_gv_lNYRooster_Quest[lp_team].lv_dummyUnitForSplats[lp_player], "LNYRoosterCreateSplatDummyLuxuryChickenShoes", libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster);
        }

        if ((libGDHL_gf_LNYRoosterDoesPlayerHaveLunarFestivalBehavior("LunarNewYearRoosterHasSpecialChickenFeed", lp_player) == true)) {
            UnitCreateEffectUnit(libGDHL_gv_lNYRooster_Quest[lp_team].lv_dummyUnitForSplats[lp_player], "LNYRoosterCreateSplatDummySpecialChickenFeed", libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster);
        }

        if ((libGDHL_gf_LNYRoosterDoesPlayerHaveLunarFestivalBehavior("LunarNewYearRoosterHasRocketFuel", lp_player) == true)) {
            UnitCreateEffectUnit(libGDHL_gv_lNYRooster_Quest[lp_team].lv_dummyUnitForSplats[lp_player], "LNYRoosterCreateSplatDummyRocketFuel", libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster);
        }

    }
    else {
        UnitCreateEffectUnit(libGDHL_gv_lNYRooster_Quest[lp_team].lv_dummyUnitForSplats[lp_player], "LNYRoosterUpdateSplats", libGDHL_gv_lNYRooster_Quest[lp_team].lv_dummyUnitForSplats[lp_player]);
    }
}

bool libGDHL_gf_LNYRoosterDoesPlayerHaveLunarFestivalBehavior (string lp_behavior, int lp_player) {
    unitgroup autoD009895E_g;
    int autoD009895E_u;

    // Variable Declarations
    unit lv_itUnit;

    // Variable Initialization

    // Implementation
    autoD009895E_g = libGame_gv_players[lp_player].lv_heroUnitGroup;
    autoD009895E_u = 1;
    for ( ; autoD009895E_u <= UnitGroupCount(autoD009895E_g, c_unitCountAll) ; autoD009895E_u += (lv_itUnit == UnitGroupUnit(autoD009895E_g, autoD009895E_u)) ) {
        lv_itUnit = UnitGroupUnit(autoD009895E_g, autoD009895E_u);
        if ((UnitHasBehavior2(lv_itUnit, lp_behavior) == true)) {
            return true;
        }

    }
    return false;
}

void libGDHL_gf_CreateRoosterForTeam (int lp_team) {
    // Variable Declarations
    point lv_startPoint;
    point lv_endPoint;

    // Variable Initialization

    // Implementation
    lv_startPoint = PointWithOffsetPolar(UnitGetPosition(libGame_gv_teams[lp_team].lv_core), 6.0, UnitGetFacing(libGame_gv_teams[lp_team].lv_core));
    lv_endPoint = PointWithOffsetPolar(lv_startPoint, 10.0, UnitGetFacing(libGame_gv_teams[lp_team].lv_core));
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LunarNewYearRooster", c_unitCreateIgnorePlacement, libGame_gf_ComputerPlayerInTeam(lp_team), lv_startPoint);
    libNtve_gf_MakeUnitFacePoint(UnitLastCreated(), lv_endPoint, 0.0);
    libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster = UnitLastCreated();
    UnitBehaviorAdd(UnitLastCreated(), "LunarNewYearRoosterStopMovement", UnitLastCreated(), 1);
    UnitIssueOrder(libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster, OrderTargetingPoint(AbilityCommand("move", 0), lv_endPoint), c_orderQueueReplace);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "CampOwnershipFlag", c_unitCreateIgnorePlacement, libGame_gf_ComputerPlayerInTeam(lp_team), lv_endPoint);
    libNtve_gf_UnitSetVariation(UnitLastCreated(), "CampOwnershipFlag", 0, "");
    UnitSetFacing(UnitLastCreated(), 270.0, 0.0);
    libGDHL_gv_lNYRooster_Quest[lp_team].lv_flag = UnitLastCreated();
    PathCreateForUnit(libGame_gv_teams[lp_team].lv_teamPlayerGroup, libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster);
    PathSetLineTexture(PathLastCreated(), c_pathLocationWorld, ("Assets\\Textures\\storm_ui_hud_event_lunar_2017_ground_path.dds"));
    PathSetLineTileLength(PathLastCreated(), c_pathLocationWorld, 4.0);
    PathSetLineWidth(PathLastCreated(), c_pathLocationWorld, 1.0);
    PathSetLineTexture(PathLastCreated(), c_pathLocationMinimap, "Assets\\Textures\\storm_waypointline.dds");
    PathSetVisible(PathLastCreated(), c_pathLocationMinimap, false);
}

void libGDHL_gf_LNYRoosterDropCurrentItem (unit lp_unit) {
    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Implementation
    lv_team = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_unit));
    if ((UnitHasBehavior2(lp_unit, "LunarNewYearRoosterHasSpecialChickenFeed") == true)) {
        UnitBehaviorRemove(lp_unit, "LunarNewYearRoosterHasSpecialChickenFeed", 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "LunarNewYearRoosterSpecialChickenFeed", c_unitCreateIgnorePlacement, libGame_gf_ComputerPlayerInTeam(lv_team), UnitGetPosition(lp_unit));
        libGDHL_gf_LNYRoosterSetUpNewlyCreatedItem(UnitLastCreated(), lv_team);
    }
    else if ((UnitHasBehavior2(lp_unit, "LunarNewYearRoosterHasLuxuryChickenShoes") == true)) {
        UnitBehaviorRemove(lp_unit, "LunarNewYearRoosterHasLuxuryChickenShoes", 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "LunarNewYearRoosterLuxuryChickenShoes", c_unitCreateIgnorePlacement, libGame_gf_ComputerPlayerInTeam(lv_team), UnitGetPosition(lp_unit));
        libGDHL_gf_LNYRoosterSetUpNewlyCreatedItem(UnitLastCreated(), lv_team);
    }
    else if ((UnitHasBehavior2(lp_unit, "LunarNewYearRoosterHasFreshWater") == true)) {
        UnitBehaviorRemove(lp_unit, "LunarNewYearRoosterHasFreshWater", 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "LunarNewYearRoosterFreshWater", c_unitCreateIgnorePlacement, libGame_gf_ComputerPlayerInTeam(lv_team), UnitGetPosition(lp_unit));
        libGDHL_gf_LNYRoosterSetUpNewlyCreatedItem(UnitLastCreated(), lv_team);
    }
    else if ((UnitHasBehavior2(lp_unit, "LunarNewYearRoosterHasRocketFuel") == true)) {
        UnitBehaviorRemove(lp_unit, "LunarNewYearRoosterHasRocketFuel", 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "LunarNewYearRoosterRocketFuel", c_unitCreateIgnorePlacement, libGame_gf_ComputerPlayerInTeam(lv_team), UnitGetPosition(lp_unit));
        libGDHL_gf_LNYRoosterSetUpNewlyCreatedItem(UnitLastCreated(), lv_team);
    }
}

void libGDHL_gf_LNYRoosterQuestCompleteForTeam (int lp_team) {
    unitgroup auto3E6EAAFE_g;
    int auto3E6EAAFE_u;

    // Variable Declarations
    int lv_iPlayer;
    unit lv_itUnit;
    int lv_itFirework;
    point lv_positionOfFlag;
    int lv_computerPlayer;

    // Variable Initialization
    lv_computerPlayer = libGame_gf_ComputerPlayerInTeam(lp_team);

    // Implementation
    UnitKill(libGDHL_gv_lNYRooster_Quest[lp_team].lv_flag);
    DialogControlSendAnimationEvent(libGDHL_gv_lNYRooster_Quest[lp_team].lv_mainPanel, libGame_gf_PlayersOnTeamHeroes(lp_team, false), "VictoryFlower");
    DialogControlSetVisible(libGDHL_gv_lNYRooster_Quest[lp_team].lv_raceTimeLeftLabel, libGame_gf_PlayersOnTeamHeroes(lp_team, false), false);
    DialogControlSetVisible(libGDHL_gv_lNYRooster_Quest[lp_team].lv_questCompleteCheckMark, libGame_gf_PlayersOnTeamHeroes(lp_team, false), true);
    if ((libGDHL_gv_lNYRooster_Quest[libGame_gf_EnemyTeam(lp_team)].lv_eventSuccessfullyCompleted == false)) {
        libGDHL_gv_lNYRooster_Quest[lp_team].lv_eventSuccessfullyCompleted = true;
        UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lp_team, false), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_GDHL_A4DCA124"));
    }
    else {
        libGDHL_gv_lNYRooster_Quest[lp_team].lv_eventSuccessfullyCompleted = true;
        UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(lp_team, false), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_GDHL_7277F044"));
    }
    lv_positionOfFlag = UnitGetPosition(libGDHL_gv_lNYRooster_Quest[lp_team].lv_flag);
    libGDHL_gv_lNYRooster_Quest[lp_team].lv_eventSuccessfullyCompletedFirst = true;
    UnitGroupLoopBegin(libGDHL_gv_lNYRooster_Quest[lp_team].lv_availableItems);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    PlayerGroupLoopBegin(libGame_gf_PlayersOnTeamHeroes(lp_team, false));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UnitKill(libGDHL_gv_lNYRooster_Quest[lp_team].lv_dummyUnitForSplats[PlayerGroupLoopCurrent()]);
        auto3E6EAAFE_g = libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnitGroup;
        auto3E6EAAFE_u = 1;
        for ( ; auto3E6EAAFE_u <= UnitGroupCount(auto3E6EAAFE_g, c_unitCountAll) ; auto3E6EAAFE_u += (lv_itUnit == UnitGroupUnit(auto3E6EAAFE_g, auto3E6EAAFE_u)) ) {
            lv_itUnit = UnitGroupUnit(auto3E6EAAFE_g, auto3E6EAAFE_u);
            UnitBehaviorRemove(lv_itUnit, "LunarNewYearRoosterHasFreshWater", 1);
            UnitBehaviorRemove(lv_itUnit, "LunarNewYearRoosterHasLuxuryChickenShoes", 1);
            UnitBehaviorRemove(lv_itUnit, "LunarNewYearRoosterHasRocketFuel", 1);
            UnitBehaviorRemove(lv_itUnit, "LunarNewYearRoosterHasSpecialChickenFeed", 1);
        }
    }
    PlayerGroupLoopEnd();
    PlayerCreateEffectPoint(lv_computerPlayer, "LNYRoosterFireworkSoundDummy", lv_positionOfFlag);
    UnitCreateEffectUnit(libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster, "LNYRoosterVictoryDeath", libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster);
    PlayerCreateEffectPoint(lv_computerPlayer, "LNYRoosterFireworkDummy", PointWithOffsetPolar(lv_positionOfFlag, 5.0, 0.0));
    Wait(0.25, c_timeGame);
    PlayerCreateEffectPoint(lv_computerPlayer, "LNYRoosterFireworkDummy", PointWithOffsetPolar(lv_positionOfFlag, 5.0, -30.0));
    PlayerCreateEffectPoint(lv_computerPlayer, "LNYRoosterFireworkDummy", PointWithOffsetPolar(lv_positionOfFlag, 5.0, 30.0));
    Wait(0.25, c_timeGame);
    PlayerCreateEffectPoint(lv_computerPlayer, "LNYRoosterFireworkDummy", PointWithOffsetPolar(lv_positionOfFlag, 5.0, -60.0));
    PlayerCreateEffectPoint(lv_computerPlayer, "LNYRoosterFireworkDummy", PointWithOffsetPolar(lv_positionOfFlag, 5.0, 60.0));
    Wait(0.25, c_timeGame);
    PlayerCreateEffectPoint(lv_computerPlayer, "LNYRoosterFireworkDummy", PointWithOffsetPolar(lv_positionOfFlag, 5.0, -90.0));
    PlayerCreateEffectPoint(lv_computerPlayer, "LNYRoosterFireworkDummy", PointWithOffsetPolar(lv_positionOfFlag, 5.0, 90.0));
    Wait(0.25, c_timeGame);
    DialogControlSendAnimationEvent(libGDHL_gv_lNYRooster_Quest[lp_team].lv_mainPanel, libGame_gf_PlayersOnTeamHeroes(lp_team, false), "FadePanelOut");
    DialogControlFadeTransparency(libUIUI_gv_deathTimerPanel.lv_mainPanel[libGame_gv_teamOrderIndex_C], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
    DialogControlFadeTransparency(libUIUI_gv_deathTimerPanel.lv_mainPanel[libGame_gv_teamChaosIndex_C], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
    DialogControlFadeTransparency(libUIUI_gv_topBarPanel.lv_mainPanel, libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
    PlayerCreateEffectPoint(lv_computerPlayer, "LNYRoosterFireworkDummy", PointWithOffsetPolar(lv_positionOfFlag, 5.0, -120.0));
    PlayerCreateEffectPoint(lv_computerPlayer, "LNYRoosterFireworkDummy", PointWithOffsetPolar(lv_positionOfFlag, 5.0, 120.0));
    Wait(0.25, c_timeGame);
    PlayerCreateEffectPoint(lv_computerPlayer, "LNYRoosterFireworkDummy", PointWithOffsetPolar(lv_positionOfFlag, 5.0, -150.0));
    PlayerCreateEffectPoint(lv_computerPlayer, "LNYRoosterFireworkDummy", PointWithOffsetPolar(lv_positionOfFlag, 5.0, 150.0));
    Wait(0.25, c_timeGame);
    PlayerCreateEffectPoint(lv_computerPlayer, "LNYRoosterFireworkDummy", PointWithOffsetPolar(lv_positionOfFlag, 5.0, 180.0));
}

void libGDHL_gf_LNYRoosterEventComplete () {
    unitgroup auto4CE12CDF_g;
    int auto4CE12CDF_u;
    unitgroup auto8073E873_g;
    int auto8073E873_u;
    int auto6ED1EE01_ae;
    int auto6ED1EE01_ai;

    // Variable Declarations
    int lv_iPlayer;
    unit lv_itUnit;

    // Variable Initialization

    // Implementation
    if ((libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_eventSuccessfullyCompleted == false) && (libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_eventCurrentlyBeingFinished == false)) {
        UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), c_messageAreaChat, StringExternal("Param/Value/lib_GDHL_21F3946D"));
        DialogControlSetVisible(libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_offeringLabel, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), false);
        DialogControlSendAnimationEvent(libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_mainPanel, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), "FadePanelOut");
        UnitCreateEffectUnit(libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_rooster, "LNYRoosterFailDeath", libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_rooster);
        UnitKill(libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_flag);
    }

    PlayerGroupLoopBegin(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UnitKill(libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_dummyUnitForSplats[PlayerGroupLoopCurrent()]);
        auto4CE12CDF_g = libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnitGroup;
        auto4CE12CDF_u = 1;
        for ( ; auto4CE12CDF_u <= UnitGroupCount(auto4CE12CDF_g, c_unitCountAll) ; auto4CE12CDF_u += (lv_itUnit == UnitGroupUnit(auto4CE12CDF_g, auto4CE12CDF_u)) ) {
            lv_itUnit = UnitGroupUnit(auto4CE12CDF_g, auto4CE12CDF_u);
            UnitBehaviorRemove(lv_itUnit, "LunarNewYearRoosterHasFreshWater", 1);
            UnitBehaviorRemove(lv_itUnit, "LunarNewYearRoosterHasLuxuryChickenShoes", 1);
            UnitBehaviorRemove(lv_itUnit, "LunarNewYearRoosterHasRocketFuel", 1);
            UnitBehaviorRemove(lv_itUnit, "LunarNewYearRoosterHasSpecialChickenFeed", 1);
        }
        libGame_gf_ScoreValuesReportIntegerValueAndLog(PlayerGroupLoopCurrent(), "LunarNewYearSuccesfulArtifactTurnIns", libGDHL_gv_lNYRoosterAcceptedItems[PlayerGroupLoopCurrent()]);
        if (((libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_eventSuccessfullyCompleted == true) || (libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_eventCurrentlyBeingFinished == true))) {
            libGame_gf_ScoreValuesReportIntegerValueAndLog(PlayerGroupLoopCurrent(), "LunarNewYearRoosterEventCompleted", 1);
        }

    }
    PlayerGroupLoopEnd();
    if ((libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_eventSuccessfullyCompleted == false) && (libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_eventCurrentlyBeingFinished == false)) {
        UIDisplayMessage(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), c_messageAreaChat, StringExternal("Param/Value/lib_GDHL_8CD3C5AC"));
        DialogControlSetVisible(libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_offeringLabel, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), false);
        DialogControlSendAnimationEvent(libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_mainPanel, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), "FadePanelOut");
        UnitCreateEffectUnit(libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_rooster, "LNYRoosterFailDeath", libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_rooster);
        UnitKill(libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_flag);
    }

    PlayerGroupLoopBegin(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UnitKill(libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_dummyUnitForSplats[PlayerGroupLoopCurrent()]);
        auto8073E873_g = libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnitGroup;
        auto8073E873_u = 1;
        for ( ; auto8073E873_u <= UnitGroupCount(auto8073E873_g, c_unitCountAll) ; auto8073E873_u += (lv_itUnit == UnitGroupUnit(auto8073E873_g, auto8073E873_u)) ) {
            lv_itUnit = UnitGroupUnit(auto8073E873_g, auto8073E873_u);
            UnitBehaviorRemove(lv_itUnit, "LunarNewYearRoosterHasFreshWater", 1);
            UnitBehaviorRemove(lv_itUnit, "LunarNewYearRoosterHasLuxuryChickenShoes", 1);
            UnitBehaviorRemove(lv_itUnit, "LunarNewYearRoosterHasRocketFuel", 1);
            UnitBehaviorRemove(lv_itUnit, "LunarNewYearRoosterHasSpecialChickenFeed", 1);
        }
        libGame_gf_ScoreValuesReportIntegerValueAndLog(PlayerGroupLoopCurrent(), "LunarNewYearSuccesfulArtifactTurnIns", libGDHL_gv_lNYRoosterAcceptedItems[PlayerGroupLoopCurrent()]);
        if (((libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_eventSuccessfullyCompleted == true) || (libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_eventCurrentlyBeingFinished == true))) {
            libGame_gf_ScoreValuesReportIntegerValueAndLog(PlayerGroupLoopCurrent(), "LunarNewYearRoosterEventCompleted", 1);
        }

    }
    PlayerGroupLoopEnd();
    UnitGroupLoopBegin(libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_availableItems);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_availableItems);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    auto6ED1EE01_ae = 10;
    auto6ED1EE01_ai = 1;
    lv_iPlayer = 1;
    for ( ; ( (auto6ED1EE01_ai >= 0 && lv_iPlayer <= auto6ED1EE01_ae) || (auto6ED1EE01_ai <= 0 && lv_iPlayer >= auto6ED1EE01_ae) ) ; lv_iPlayer += auto6ED1EE01_ai ) {
        CatalogFieldValueSet(c_gameCatalogEffect, "CaptureMacGuffinTwo", "PeriodCount", lv_iPlayer, FixedToString(libGDHL_gv_seasonalEvents.lv_initialMacguffinPeriodCount, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogEffect, "CaptureMacGuffinTwo", "PeriodicPeriodArray[" + IntToString(0) + "]", lv_iPlayer, FixedToString(libGDHL_gv_seasonalEvents.lv_initialMacguffinPeriodDuration, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogAbil, "CaptureMacGuffinTwo", "Activity", lv_iPlayer, libGDHL_gv_seasonalEvents.lv_initialMacguffinActivity);
    }
    DialogControlFadeTransparency(libUIUI_gv_topBarPanel.lv_mainPanel, PlayerGroupAll(), 0.0, 0.0);
    DialogControlFadeTransparency(libUIUI_gv_deathTimerPanel.lv_mainPanel[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), 0.0, 0.0);
    DialogControlFadeTransparency(libUIUI_gv_deathTimerPanel.lv_mainPanel[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), 0.0, 0.0);
}

void libGDHL_gf_LNYRoosterInitializeRaceBarUIForTeams () {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_mainPanel, PlayerGroupAll(), false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/SeasonalEventPanel");
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_mainPanel = DialogControlLastCreated();
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_mainPanel = DialogControlLastCreated();
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), true);
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), true);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "RoosterFrameLeft");
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_team1BarPortraitFrame = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), true);
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "RoosterFrameRight");
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_team2BarPortraitFrame = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), true);
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "RoosterFrameLeftChaos");
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_team1BarPortraitFrame = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), false);
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), true);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "RoosterFrameRightChaos");
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_team2BarPortraitFrame = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), false);
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), true);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "QuestsCompletedLabelLeft");
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_questCompletedLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "QuestsCompletedLabelRight");
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_questCompletedLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "OfferingLabel");
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_offeringLabel = DialogControlLastCreated();
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_offeringLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "RaceTimeLeftLabel");
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_Events_LNYRooster_Timer", PlayerGroupAll());
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_raceTimeLeftLabel = DialogControlLastCreated();
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_raceTimeLeftLabel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCutscene, "OfferingCutscene");
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_offeringCutscene = DialogControlLastCreated();
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_offeringCutscene = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "CutsceneBorder");
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_offeringBorder = DialogControlLastCreated();
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_offeringBorder = DialogControlLastCreated();
    DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupAll(), "RingBirth");
    DialogControlSendAnimationEvent(DialogControlLastCreated(), PlayerGroupAll(), "SheenBirth");
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Team1RaceBar");
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), true);
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_team1Bar1 = DialogControlLastCreated();
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_team1Bar1 = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Team2RaceBar");
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), true);
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_team2Bar1 = DialogControlLastCreated();
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_team2Bar1 = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Team1RaceBarChaos");
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), false);
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), true);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_team1Bar2 = DialogControlLastCreated();
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_team1Bar2 = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Team2RaceBarChaos");
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), false);
    DialogControlSetVisible(DialogControlLastCreated(), libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), true);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_team2Bar2 = DialogControlLastCreated();
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_team2Bar2 = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_mainPanel, c_triggerControlTypeImage, "QuestCompleteImage");
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_questCompleteCheckMark = DialogControlLastCreated();
    libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_questCompleteCheckMark = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libGDHL_gf_LNYRoosterUpdateTimeLeft();
}

void libGDHL_gf_SetRequiredOfferingLabel (text lp_requiredItem, int lp_team, bool lp_showText) {
    // Implementation
    if ((lp_showText == true)) {
        TextExpressionSetToken("Param/Expression/lib_GDHL_443E3058", "A", lp_requiredItem);
        libNtve_gf_SetDialogItemText(libGDHL_gv_lNYRooster_Quest[lp_team].lv_offeringLabel, TextExpressionAssemble("Param/Expression/lib_GDHL_443E3058"), libGame_gf_PlayersOnTeamHeroes(lp_team, false));
    }
    else {
        libNtve_gf_SetDialogItemText(libGDHL_gv_lNYRooster_Quest[lp_team].lv_offeringLabel, StringToText(""), libGame_gf_PlayersOnTeamHeroes(lp_team, false));
    }
}

trigger auto_libGDHL_gf_LNYRoosterUpdateTimeLeft_Trigger = null;

void libGDHL_gf_LNYRoosterUpdateTimeLeft () {
    if (auto_libGDHL_gf_LNYRoosterUpdateTimeLeft_Trigger == null) {
        auto_libGDHL_gf_LNYRoosterUpdateTimeLeft_Trigger = TriggerCreate("auto_libGDHL_gf_LNYRoosterUpdateTimeLeft_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_LNYRoosterUpdateTimeLeft_Trigger, false, false);
}

bool auto_libGDHL_gf_LNYRoosterUpdateTimeLeft_TriggerFunc (bool testConds, bool runActions) {
    int autoF06B9DF0_ae;
    int autoF06B9DF0_ai;
    int auto365360A6_ae;
    int auto365360A6_ai;

    // Variable Declarations
    int lv_itTeam;

    // Variable Initialization

    // Implementation
    while ((TimerGetRemaining(libGDHL_gv_lNYRooster_QuestTimer) > 0.0)) {
        autoF06B9DF0_ae = libCore_gv_bALMaxTeams;
        autoF06B9DF0_ai = 1;
        lv_itTeam = 1;
        for ( ; ( (autoF06B9DF0_ai >= 0 && lv_itTeam <= autoF06B9DF0_ae) || (autoF06B9DF0_ai <= 0 && lv_itTeam >= autoF06B9DF0_ae) ) ; lv_itTeam += autoF06B9DF0_ai ) {
            libNtve_gf_SetDialogItemText(libGDHL_gv_lNYRooster_Quest[lv_itTeam].lv_raceTimeLeftLabel, TextTimeFormat(StringToText("<sectotal/>"), FixedToInt(TimerGetRemaining(libGDHL_gv_lNYRooster_QuestTimer))), PlayerGroupAll());
        }
        Wait(0.0625, c_timeGame);
    }
    auto365360A6_ae = libCore_gv_bALMaxTeams;
    auto365360A6_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (auto365360A6_ai >= 0 && lv_itTeam <= auto365360A6_ae) || (auto365360A6_ai <= 0 && lv_itTeam >= auto365360A6_ae) ) ; lv_itTeam += auto365360A6_ai ) {
        DialogControlSetVisible(libGDHL_gv_lNYRooster_Quest[lv_itTeam].lv_raceTimeLeftLabel, PlayerGroupAll(), false);
    }
    return true;
}

void libGDHL_gf_LNYRoosterShowMinimapTrackerForClosestRequiredItem (int lp_team) {
    // Variable Declarations
    fixed lv_currentClosestDistance;
    fixed lv_distanceFromRooster;

    // Variable Initialization

    // Implementation
    libGDHL_gv_lNYRooster_Quest[lp_team].lv_closestRequiredUnit = null;
    UnitGroupLoopBegin(libGDHL_gv_lNYRooster_Quest[lp_team].lv_availableItems);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == libGDHL_gv_lNYRooster_Quest[lp_team].lv_currentRequiredItemUnitType)) {
            lv_distanceFromRooster = DistanceBetweenPoints(UnitGetPosition(libGDHL_gv_lNYRooster_Quest[lp_team].lv_rooster), UnitGetPosition(UnitGroupLoopCurrent()));
            if ((libGDHL_gv_lNYRooster_Quest[lp_team].lv_closestRequiredUnit == null)) {
                libGDHL_gv_lNYRooster_Quest[lp_team].lv_closestRequiredUnit = UnitGroupLoopCurrent();
                lv_currentClosestDistance = lv_distanceFromRooster;
            }
            else {
                if ((lv_distanceFromRooster <= lv_currentClosestDistance)) {
                    libGDHL_gv_lNYRooster_Quest[lp_team].lv_closestRequiredUnit = UnitGroupLoopCurrent();
                    lv_currentClosestDistance = lv_distanceFromRooster;
                }

            }
        }

    }
    UnitGroupLoopEnd();
    libGDHL_gf_LNYRoosterShowHideOffscreenTrackerForTeam(true, lp_team);
}

trigger auto_libGDHL_gf_LNYRoosterShowHideOffscreenTrackerForTeam_Trigger = null;
bool auto_libGDHL_gf_LNYRoosterShowHideOffscreenTrackerForTeam_lp_showHide;
int auto_libGDHL_gf_LNYRoosterShowHideOffscreenTrackerForTeam_lp_team;

void libGDHL_gf_LNYRoosterShowHideOffscreenTrackerForTeam (bool lp_showHide, int lp_team) {
    auto_libGDHL_gf_LNYRoosterShowHideOffscreenTrackerForTeam_lp_showHide = lp_showHide;
    auto_libGDHL_gf_LNYRoosterShowHideOffscreenTrackerForTeam_lp_team = lp_team;

    if (auto_libGDHL_gf_LNYRoosterShowHideOffscreenTrackerForTeam_Trigger == null) {
        auto_libGDHL_gf_LNYRoosterShowHideOffscreenTrackerForTeam_Trigger = TriggerCreate("auto_libGDHL_gf_LNYRoosterShowHideOffscreenTrackerForTeam_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_LNYRoosterShowHideOffscreenTrackerForTeam_Trigger, false, false);
}

bool auto_libGDHL_gf_LNYRoosterShowHideOffscreenTrackerForTeam_TriggerFunc (bool testConds, bool runActions) {
    bool lp_showHide = auto_libGDHL_gf_LNYRoosterShowHideOffscreenTrackerForTeam_lp_showHide;
    int lp_team = auto_libGDHL_gf_LNYRoosterShowHideOffscreenTrackerForTeam_lp_team;

    playergroup autoD345F826_g;
    int autoD345F826_p;
    playergroup autoB337E7AA_g;
    int autoB337E7AA_p;
    string autoCEA9AD57_val;

    // Variable Declarations
    int lv_itPlayer;
    int lv_index;

    // Variable Initialization

    // Implementation
    if ((lp_team == libGame_gv_teamOrderIndex_C)) {
        lv_index = 9;
    }
    else {
        lv_index = 10;
    }
    if ((lp_showHide == true)) {
        libUIUI_gv_uIHeroTrackerArrows.lv_unit[lv_index] = libGDHL_gv_lNYRooster_Quest[lp_team].lv_closestRequiredUnit;
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroTrackerArrows.lv_arrow[lv_index], libGDHL_gv_lNYRooster_Quest[lp_team].lv_closestRequiredUnit, libGame_gf_PlayersOnTeamHeroes(lp_team, false));
        autoB337E7AA_g = libGame_gv_teams[lp_team].lv_teamPlayerGroup; 
        autoB337E7AA_p = 1;
        for ( ; autoB337E7AA_p <= PlayerGroupCount(autoB337E7AA_g) ; autoB337E7AA_p += (lv_itPlayer == PlayerGroupPlayer(autoB337E7AA_g, autoB337E7AA_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(autoB337E7AA_g, autoB337E7AA_p);
            libUIUI_gf_UIHeroTrackerArrowShowHideForPlayer(true, lv_itPlayer);
        }
        Wait(0.0625, c_timeGame);
        DialogControlSetVisible(libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[lv_index], libGame_gf_PlayersOnTeamHeroes(lp_team, false), false);
        DialogControlSetVisible(libUIUI_gv_uIHeroTrackerArrows.lv_portraitImageOverride[lv_index], libGame_gf_PlayersOnTeamHeroes(lp_team, false), false);
        autoCEA9AD57_val = UnitGetType(libGDHL_gv_lNYRooster_Quest[lp_team].lv_closestRequiredUnit);
        if (autoCEA9AD57_val == "LunarNewYearRoosterFreshWater") {
            DialogControlSendAnimationEvent(libUIUI_gv_uIHeroTrackerArrows.lv_portraitCutscene[lv_index], libGame_gf_PlayersOnTeamHeroes(lp_team, false), "FreshWater");
        }
        else if (autoCEA9AD57_val == "LunarNewYearRoosterLuxuryChickenShoes") {
            DialogControlSendAnimationEvent(libUIUI_gv_uIHeroTrackerArrows.lv_portraitCutscene[lv_index], libGame_gf_PlayersOnTeamHeroes(lp_team, false), "LuxuryChickenShoes");
        }
        else if (autoCEA9AD57_val == "LunarNewYearRoosterSpecialChickenFeed") {
            DialogControlSendAnimationEvent(libUIUI_gv_uIHeroTrackerArrows.lv_portraitCutscene[lv_index], libGame_gf_PlayersOnTeamHeroes(lp_team, false), "SpecialChickenFeed");
        }
        else if (autoCEA9AD57_val == "LunarNewYearRoosterRocketFuel") {
            DialogControlSendAnimationEvent(libUIUI_gv_uIHeroTrackerArrows.lv_portraitCutscene[lv_index], libGame_gf_PlayersOnTeamHeroes(lp_team, false), "RocketFuel");
        }
        else {
        }
    }
    else {
        libUIUI_gv_uIHeroTrackerArrows.lv_unit[lv_index] = null;
        autoD345F826_g = libGame_gv_teams[lp_team].lv_teamPlayerGroup; 
        autoD345F826_p = 1;
        for ( ; autoD345F826_p <= PlayerGroupCount(autoD345F826_g) ; autoD345F826_p += (lv_itPlayer == PlayerGroupPlayer(autoD345F826_g, autoD345F826_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(autoD345F826_g, autoD345F826_p);
            if ((PlayerHero(lv_itPlayer) != "LostVikings")) {
                libUIUI_gf_UIHeroTrackerArrowShowHideForPlayer(false, lv_itPlayer);
            }

        }
    }
    return true;
}

void libGDHL_gf_SiegeUpdateAbilityPowerOnSummonedUnits (unit lp_unit) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_unit);
    UnitBehaviorAdd(lp_unit, "BucketOverdriveSummonedUnit", libGame_gv_players[lv_player].lv_heroUnit, UnitBehaviorCount(libGame_gv_players[lv_player].lv_heroUnit, "BucketOverdrive"));
    UnitBehaviorAdd(lp_unit, "TalentGatheringPowerCarry", libGame_gv_players[lv_player].lv_heroUnit, UnitBehaviorCount(libGame_gv_players[lv_player].lv_heroUnit, "TalentGatheringPowerCarry"));
    UnitBehaviorAdd(lp_unit, "TalentGatheringPowerStackSummoned", libGame_gv_players[lv_player].lv_heroUnit, UnitBehaviorCount(libGame_gv_players[lv_player].lv_heroUnit, "TalentGatheringPowerStack"));
    UnitBehaviorAdd(lp_unit, "TalentGatheringPowerMurky", libGame_gv_players[lv_player].lv_heroUnit, UnitBehaviorCount(libGame_gv_players[lv_player].lv_heroUnit, "TalentGatheringPowerMurky"));
}

void libGDHL_gf_RestoreHeight (unit lp_unit) {
    // Variable Declarations
    int lv_height;

    // Variable Initialization

    // Implementation
    lv_height = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(lp_unit), "Height", c_playerAny);
    UnitSetPropertyFixed(lp_unit, c_unitPropHeight, lv_height);
}

point libGDHL_gf_TargetCalculation (point lp_targetPoint, point lp_casterPoint, region lp_bFGRegion) {
    // Variable Declarations
    point lv_casterPoint;
    fixed lv_cosineofTargetAngle;
    point lv_targetPoint;
    fixed lv_targetXToEdgeOfMap;
    fixed lv_targetYToEdgeOfMap;
    fixed lv_targetAngle;
    fixed lv_triangle1C;
    fixed lv_triangle2C;
    point lv_abilityTargetPoint;

    // Variable Initialization
    lv_casterPoint = lp_casterPoint;
    lv_targetPoint = lp_targetPoint;

    // Implementation
    if ((PointGetX(lv_casterPoint) <= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) <= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - PointGetX(lv_targetPoint));
        lv_targetYToEdgeOfMap = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - PointGetY(lv_targetPoint));
        lv_targetAngle = AngleBetweenPoints(lv_casterPoint, lv_targetPoint);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMax(RegionPlayableMap())));
        }
        else {
            lv_triangle1C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMax(RegionPlayableMap())), PointGetY(lv_targetPoint));
            }
            else {
                lv_triangle2C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                }
            }
        }
    }
    else if ((PointGetX(lv_casterPoint) >= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) <= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = PointGetX(lv_targetPoint);
        lv_targetYToEdgeOfMap = (PointGetY(RegionGetBoundsMax(RegionPlayableMap())) - PointGetY(lv_targetPoint));
        lv_targetAngle = (AngleBetweenPoints(lv_casterPoint, lv_targetPoint) - 90.0);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(lv_targetPoint));
        }
        else {
            lv_triangle1C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMax(RegionPlayableMap())));
            }
            else {
                lv_triangle2C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                }
            }
        }
    }
    else if ((PointGetX(lv_casterPoint) >= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) >= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = PointGetX(lv_targetPoint);
        lv_targetYToEdgeOfMap = PointGetY(lv_targetPoint);
        lv_targetAngle = (AngleBetweenPoints(lv_casterPoint, lv_targetPoint) - 180.0);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())));
        }
        else {
            lv_triangle1C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMin(RegionPlayableMap())), PointGetY(lv_targetPoint));
            }
            else {
                lv_triangle2C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                }
            }
        }
    }
    else if ((PointGetX(lv_casterPoint) <= PointGetX(lv_targetPoint)) && (PointGetY(lv_casterPoint) >= PointGetY(lv_targetPoint))) {
        lv_targetXToEdgeOfMap = (PointGetX(RegionGetBoundsMax(RegionPlayableMap())) - PointGetX(lv_targetPoint));
        lv_targetYToEdgeOfMap = PointGetY(lv_targetPoint);
        lv_targetAngle = (AngleBetweenPoints(lv_casterPoint, lv_targetPoint) - 270.0);
        lv_cosineofTargetAngle = Cos(lv_targetAngle);
        if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
            lv_abilityTargetPoint = Point(PointGetX(RegionGetBoundsMax(RegionPlayableMap())), PointGetY(lv_targetPoint));
        }
        else {
            lv_triangle1C = (lv_targetYToEdgeOfMap / Cos(lv_targetAngle));
            lv_targetAngle = (90.0 - lv_targetAngle);
            lv_cosineofTargetAngle = Cos(lv_targetAngle);
            if ((lv_cosineofTargetAngle > -0.001) && (lv_cosineofTargetAngle < 0.001)) {
                lv_abilityTargetPoint = Point(PointGetX(lv_targetPoint), PointGetY(RegionGetBoundsMin(RegionPlayableMap())));
            }
            else {
                lv_triangle2C = (lv_targetXToEdgeOfMap / Cos(lv_targetAngle));
                if ((lv_triangle1C < lv_triangle2C)) {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle1C * -1.0), lv_casterPoint);
                }
                else {
                    lv_abilityTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, (lv_triangle2C * -1.0), lv_casterPoint);
                }
            }
        }
    }
    if ((lv_abilityTargetPoint != null)) {
        return lv_abilityTargetPoint;
    }
    else {
        return null;
    }
}

void libGDHL_gf_HeroicSummonsApplySummonedUnitTalentMonitor (unit lp_casterUnit, unit lp_summonedUnit) {
    // Implementation
    if ((UnitHasBehavior2(lp_casterUnit, "Ultimate1Unlocked") == true)) {
        UnitBehaviorAdd(lp_summonedUnit, "HeroGenericHeroicSummonedUnit1Monitor", lp_casterUnit, 1);
    }

    if ((UnitHasBehavior2(lp_casterUnit, "Ultimate2Unlocked") == true)) {
        UnitBehaviorAdd(lp_summonedUnit, "HeroGenericHeroicSummonedUnit2Monitor", lp_casterUnit, 1);
    }

}

void libGDHL_gf_HeroAbathurIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroAbathurTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroAbathurTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroAbathurAbathurExitsTransport, true);
        TriggerEnable(libGDHL_gt_HeroAbathurSymbiote, true);
        TriggerEnable(libGDHL_gt_HeroAbathurCarapaceRegenerativeMicrobes, true);
        TriggerEnable(libGDHL_gt_HeroAbathurSymbioteScreenEffect, true);
        TriggerEnable(libGDHL_gt_HeroAbathurStabFacer, true);
        TriggerEnable(libGDHL_gt_HeroAbathurVolatileMutationUltimateEvolution, true);
        TriggerEnable(libGDHL_gt_HeroAbathurUltimateEvolutionStartControl, true);
        TriggerEnable(libGDHL_gt_HeroAbathurUltimateEvolutionStopControl, true);
        TriggerEnable(libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead, true);
        TriggerEnable(libGDHL_gt_HeroAbathurLocustSpawned, true);
        TriggerEnable(libGDHL_gt_HeroAbathurLocustNestSetFacing, true);
        TriggerEnable(libGDHL_gt_HeroAbathurLocustNestCast, true);
        TriggerEnable(libGDHL_gt_HeroAbathurSymbioteHivemindSingleTarget, true);
        TriggerEnable(libGDHL_gt_HeroAbathurSymbioteHivemindStab, true);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityAddMinionKillStacks, true);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityInitialHooktoAI, true);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrositySymbioteendHooktoAI, true);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityDeselectedHooktoAI, true);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityUnhookAI, true);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityKillInitialTarget, true);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityAddSymbioteStacks, true);
        TriggerEnable(libGDHL_gt_HeroAbathurSymbiotedMonstrositySymbioted, true);
    }

}

void libGDHL_gf_HeroAbathurDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroAbathurTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroAbathurTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroAbathurTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroAbathurTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroAbathurAbathurExitsTransport, false);
        TriggerEnable(libGDHL_gt_HeroAbathurSymbiote, false);
        TriggerEnable(libGDHL_gt_HeroAbathurCarapaceRegenerativeMicrobes, false);
        TriggerEnable(libGDHL_gt_HeroAbathurSymbioteScreenEffect, false);
        TriggerEnable(libGDHL_gt_HeroAbathurStabFacer, false);
        TriggerEnable(libGDHL_gt_HeroAbathurVolatileMutationUltimateEvolution, false);
        TriggerEnable(libGDHL_gt_HeroAbathurUltimateEvolutionStartControl, false);
        TriggerEnable(libGDHL_gt_HeroAbathurUltimateEvolutionStopControl, false);
        TriggerEnable(libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead, false);
        TriggerEnable(libGDHL_gt_HeroAbathurLocustSpawned, false);
        TriggerEnable(libGDHL_gt_HeroAbathurLocustNestSetFacing, false);
        TriggerEnable(libGDHL_gt_HeroAbathurLocustNestCast, false);
        TriggerEnable(libGDHL_gt_HeroAbathurSymbioteHivemindSingleTarget, false);
        TriggerEnable(libGDHL_gt_HeroAbathurSymbioteHivemindStab, false);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityAddMinionKillStacks, false);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityInitialHooktoAI, false);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrositySymbioteendHooktoAI, false);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityDeselectedHooktoAI, false);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityUnhookAI, false);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityKillInitialTarget, false);
        TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityAddSymbioteStacks, false);
        TriggerEnable(libGDHL_gt_HeroAbathurSymbiotedMonstrositySymbioted, false);
    }

}

void libGDHL_gf_AbathurUltimateEvolutionEnded (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGDHL_gv_eventID_AbathurUltimateEvolutionEnded_C);
}

void libGDHL_gf_SendEventAbathurUltimateEvolutionEnded (int lp_abathurPlayer, unit lp_clonedUnit) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGDHL_gv_eventID_AbathurUltimateEvolutionEnded_C, libGDHL_gv_eventParam_AbathurUltimateEvolution_AbathurPlayer_C), lp_abathurPlayer);
    DataTableSetUnit(false, TriggerEventParamName(libGDHL_gv_eventID_AbathurUltimateEvolutionEnded_C, libGDHL_gv_eventParam_AbathurUltimateEvolution_ClonedUnit_C), lp_clonedUnit);
    TriggerSendEvent(libGDHL_gv_eventID_AbathurUltimateEvolutionEnded_C);
}

int libGDHL_gf_AbathurUltimateEvolutionAbathurPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGDHL_gv_eventID_AbathurUltimateEvolutionEnded_C, libGDHL_gv_eventParam_AbathurUltimateEvolution_AbathurPlayer_C));
}

unit libGDHL_gf_AbathurUltimateEvolutionClonedUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGDHL_gv_eventID_AbathurUltimateEvolutionEnded_C, libGDHL_gv_eventParam_AbathurUltimateEvolution_ClonedUnit_C));
}

void libGDHL_gf_AbathurUltimateEvolutionHeroCopied (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGDHL_gv_EventID_HeroUsesUltimateEvolution_C);
}

void libGDHL_gf_SendEventAbathurUltimateEvolutionHeroCopied (int lp_ownerofAbathur, int lp_ownerofTarget) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGDHL_gv_EventID_HeroUsesUltimateEvolution_C, libGDHL_gv_eventParam_AbathurUltimateEvolutionHeroCopied_AbathurOwner_C), lp_ownerofAbathur);
    DataTableSetInt(false, TriggerEventParamName(libGDHL_gv_EventID_HeroUsesUltimateEvolution_C, libGDHL_gv_eventParam_AbathurUltimateEvolutionHeroCopied_TargetOwner_C), lp_ownerofTarget);
    TriggerSendEvent(libGDHL_gv_EventID_HeroUsesUltimateEvolution_C);
}

int libGDHL_gf_AbathurUltimateEvolutionHeroCopiedAbathurOwner () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGDHL_gv_EventID_HeroUsesUltimateEvolution_C, libGDHL_gv_eventParam_AbathurUltimateEvolutionHeroCopied_AbathurOwner_C));
}

int libGDHL_gf_AbathurUltimateEvolutionHeroCopiedTargetOwner () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGDHL_gv_EventID_HeroUsesUltimateEvolution_C, libGDHL_gv_eventParam_AbathurUltimateEvolutionHeroCopied_TargetOwner_C));
}

void libGDHL_gf_AbathurSymbiote (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGDHL_gv_eventID_AbathurSymbiote_C);
}

void libGDHL_gf_SendEventAbathurSymbiote (int lp_abathurPlayer, unit lp_symbioteUnit, unit lp_symbioteTarget) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGDHL_gv_eventID_AbathurSymbiote_C, libGDHL_gv_eventParam_AbathurSymbiote_AbathurPlayer_C), lp_abathurPlayer);
    DataTableSetUnit(false, TriggerEventParamName(libGDHL_gv_eventID_AbathurSymbiote_C, libGDHL_gv_eventParam_AbathurSymbiote_SymbioteUnit_C), lp_symbioteUnit);
    DataTableSetUnit(false, TriggerEventParamName(libGDHL_gv_eventID_AbathurSymbiote_C, libGDHL_gv_eventParam_AbathurSymbiote_SymbioteTarget_C), lp_symbioteTarget);
    TriggerSendEvent(libGDHL_gv_eventID_AbathurSymbiote_C);
}

int libGDHL_gf_AbathurSymbioteAbathurPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGDHL_gv_eventID_AbathurSymbiote_C, libGDHL_gv_eventParam_AbathurSymbiote_AbathurPlayer_C));
}

unit libGDHL_gf_AbathurSymbioteUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGDHL_gv_eventID_AbathurSymbiote_C, libGDHL_gv_eventParam_AbathurSymbiote_SymbioteUnit_C));
}

unit libGDHL_gf_AbathurSymbioteTarget () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGDHL_gv_eventID_AbathurSymbiote_C, libGDHL_gv_eventParam_AbathurSymbiote_SymbioteTarget_C));
}

void libGDHL_gf_HeroAbathurReturnControlledUnittoLaneAI (unit lp_unit) {
    // Variable Declarations
    unit lv_lanerUnit;
    int lv_ownerPlayer;
    int lv_teamNumberofOwner;
    point lv_positionOfUnit;

    // Variable Initialization

    // Implementation
    lv_lanerUnit = lp_unit;
    lv_positionOfUnit = UnitGetPosition(lp_unit);
    lv_ownerPlayer = UnitGetOwner(lp_unit);
    lv_teamNumberofOwner = libGame_gf_TeamNumberOfPlayer(lv_ownerPlayer);
    libGame_gf_CalculateSpawnedMinionGoalPoints(lv_ownerPlayer, lv_positionOfUnit);
    libAIAI_gf_MinionAIStartMinionAI(-1, lv_lanerUnit, libGame_gv_spawnedMinionLane, libGame_gv_spawnedMinionFirstWaypointIndex, false, true, false, 0, false);
}

void libGDHL_gf_HeroArtanisIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroArtanisTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroArtanisTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroArtanisTwinBladesZealotChargeTargeting, true);
        TriggerEnable(libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamSetTarget, true);
        TriggerEnable(libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamRedirectTarget2ElectricBoogaloo, true);
        TriggerEnable(libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamUnitCreated, true);
        TriggerEnable(libGDHL_gt_HeroArtanisBladeDashPhasePrismCast, true);
    }

}

void libGDHL_gf_HeroArtanisDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroArtanisTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroArtanisTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroArtanisTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroArtanisTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroArtanisTwinBladesZealotChargeTargeting, false);
        TriggerEnable(libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamSetTarget, false);
        TriggerEnable(libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamRedirectTarget2ElectricBoogaloo, false);
        TriggerEnable(libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamUnitCreated, false);
        TriggerEnable(libGDHL_gt_HeroArtanisBladeDashPhasePrismCast, false);
    }

}

trigger auto_libGDHL_gf_HeroArtanisSpearofAdunPurifierBeamAI_Trigger = null;
unit auto_libGDHL_gf_HeroArtanisSpearofAdunPurifierBeamAI_lp_purifierBeam;
int auto_libGDHL_gf_HeroArtanisSpearofAdunPurifierBeamAI_lp_owner;

void libGDHL_gf_HeroArtanisSpearofAdunPurifierBeamAI (unit lp_purifierBeam, int lp_owner) {
    auto_libGDHL_gf_HeroArtanisSpearofAdunPurifierBeamAI_lp_purifierBeam = lp_purifierBeam;
    auto_libGDHL_gf_HeroArtanisSpearofAdunPurifierBeamAI_lp_owner = lp_owner;

    if (auto_libGDHL_gf_HeroArtanisSpearofAdunPurifierBeamAI_Trigger == null) {
        auto_libGDHL_gf_HeroArtanisSpearofAdunPurifierBeamAI_Trigger = TriggerCreate("auto_libGDHL_gf_HeroArtanisSpearofAdunPurifierBeamAI_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_HeroArtanisSpearofAdunPurifierBeamAI_Trigger, false, false);
}

bool auto_libGDHL_gf_HeroArtanisSpearofAdunPurifierBeamAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_purifierBeam = auto_libGDHL_gf_HeroArtanisSpearofAdunPurifierBeamAI_lp_purifierBeam;
    int lp_owner = auto_libGDHL_gf_HeroArtanisSpearofAdunPurifierBeamAI_lp_owner;

    // Variable Declarations
    unit lv_artanis;
    int lv_purifierBeamState;

    // Variable Initialization
    lv_purifierBeamState = libGDHL_ge_SpearofAdunPurifierBeamState_Priming;

    // Implementation
    lv_purifierBeamState = libGDHL_ge_SpearofAdunPurifierBeamState_Priming;
    lv_artanis = libGame_gv_players[lp_owner].lv_heroUnit;
    while ((UnitIsAlive(lp_purifierBeam) == true)) {
        if ((lv_purifierBeamState == libGDHL_ge_SpearofAdunPurifierBeamState_Priming)) {
            if ((UnitIsAlive(libGDHL_gv_heroArtanisSpearofAdunPurifierBeamTarget[lp_owner]) == false) && (UnitHasBehavior2(libGDHL_gv_heroArtanisSpearofAdunPurifierBeamTarget[lp_owner], "Dead") == true) && (UnitHasBehavior2(lv_artanis, "ArtanisSpearofAdunTargetPurifiedSupressionBehavior") == true)) {
                UnitKill(lp_purifierBeam);
                UnitModifyCooldown(lv_artanis, "Abil/ArtanisSpearofAdunPurifierBeam", 10.0, c_cooldownOperationSet);
                break;
            }

            if ((UnitBehaviorCount(lp_purifierBeam, "ArtanisSpearofAdunPurifierBeamPrimed") == 0)) {
                lv_purifierBeamState = libGDHL_ge_SpearofAdunPurifierBeamState_Active;
            }
            else {
                UnitSetPosition(lp_purifierBeam, UnitGetPosition(libGDHL_gv_heroArtanisSpearofAdunPurifierBeamTarget[lp_owner]), false);
                libGDHL_gv_heroArtanisSpearofAdunPurifierBeamLastKnownPoint[lp_owner] = UnitGetPosition(libGDHL_gv_heroArtanisSpearofAdunPurifierBeamTarget[lp_owner]);
            }
        }
        else {
            if ((lv_purifierBeamState == libGDHL_ge_SpearofAdunPurifierBeamState_Active)) {
                if ((UnitIsAlive(libGDHL_gv_heroArtanisSpearofAdunPurifierBeamTarget[lp_owner]) == true) && (UnitHasBehavior2(libGDHL_gv_heroArtanisSpearofAdunPurifierBeamTarget[lp_owner], "Dead") == false)) {
                    if ((UnitHasBehavior2(libGDHL_gv_heroArtanisSpearofAdunPurifierBeamTarget[lp_owner], "TassadarDimensionalShift") == true)) {
                        lv_purifierBeamState = libGDHL_ge_SpearofAdunPurifierBeamState_Idle;
                    }

                    if ((libGDHL_gv_heroArtanisSpearofAdunPurifierBeamPointOverride[lp_owner] == true)) {
                        if ((DistanceBetweenPoints(UnitGetPosition(lp_purifierBeam), libGDHL_gv_heroArtanisSpearofAdunPurifierBeamLastKnownPoint[lp_owner]) <= 6.0)) {
                            UnitIssueOrder(lp_purifierBeam, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(libGDHL_gv_heroArtanisSpearofAdunPurifierBeamTarget[lp_owner])), c_orderQueueReplace);
                            libGDHL_gv_heroArtanisSpearofAdunPurifierBeamPointOverride[lp_owner] = false;
                        }
                        else {
                            UnitIssueOrder(lp_purifierBeam, OrderTargetingPoint(AbilityCommand("move", 0), libGDHL_gv_heroArtanisSpearofAdunPurifierBeamLastKnownPoint[lp_owner]), c_orderQueueReplace);
                        }
                    }
                    else {
                        UnitIssueOrder(lp_purifierBeam, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(libGDHL_gv_heroArtanisSpearofAdunPurifierBeamTarget[lp_owner])), c_orderQueueReplace);
                        libGDHL_gv_heroArtanisSpearofAdunPurifierBeamLastKnownPoint[lp_owner] = UnitGetPosition(libGDHL_gv_heroArtanisSpearofAdunPurifierBeamTarget[lp_owner]);
                    }
                }
                else {
                    if ((PlayerHasTalent(lp_owner, "ArtanisSpearofAdunPurifierBeamTargetPurified") == false)) {
                        UnitIssueOrder(lp_purifierBeam, OrderTargetingPoint(AbilityCommand("move", 0), libGDHL_gv_heroArtanisSpearofAdunPurifierBeamLastKnownPoint[lp_owner]), c_orderQueueReplace);
                        lv_purifierBeamState = libGDHL_ge_SpearofAdunPurifierBeamState_Idle;
                    }
                    else {
                        UnitKill(lp_purifierBeam);
                        break;
                    }
                }
            }
            else {
                if ((lv_purifierBeamState == libGDHL_ge_SpearofAdunPurifierBeamState_Idle)) {
                    if ((UnitHasBehavior2(libGDHL_gv_heroArtanisSpearofAdunPurifierBeamTarget[lp_owner], "TassadarDimensionalShift") == false) && (UnitIsAlive(libGDHL_gv_heroArtanisSpearofAdunPurifierBeamTarget[lp_owner]) == true) && (UnitHasBehavior2(libGDHL_gv_heroArtanisSpearofAdunPurifierBeamTarget[lp_owner], "Dead") == false)) {
                        lv_purifierBeamState = libGDHL_ge_SpearofAdunPurifierBeamState_Active;
                    }
                    else {
                        if ((DistanceBetweenPoints(UnitGetPosition(lp_purifierBeam), libGDHL_gv_heroArtanisSpearofAdunPurifierBeamLastKnownPoint[lp_owner]) >= 1.5)) {
                            UnitIssueOrder(lp_purifierBeam, OrderTargetingPoint(AbilityCommand("move", 0), libGDHL_gv_heroArtanisSpearofAdunPurifierBeamLastKnownPoint[lp_owner]), c_orderQueueReplace);
                        }

                    }
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

void libGDHL_gf_HeroArthasIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroArthasTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroArthasTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroArthasAntiMagicShellHeal, true);
        TriggerEnable(libGDHL_gt_HeroArthasDeathCoilImmortalCoilStoreDamageDealt, true);
        TriggerEnable(libGDHL_gt_HeroArthasDeathCoilImmortalCoilAddHeroDamageBonusHealing, true);
        TriggerEnable(libGDHL_gt_HeroArthasArmyoftheDeadMinionAITakeoverDeath, true);
        TriggerEnable(libGDHL_gt_HeroArthasArmyoftheDeadMinionAITakeoverTransport, true);
        TriggerEnable(libGDHL_gt_HeroArthasArmyoftheDeadPortGhouls, true);
        TriggerEnable(libGDHL_gt_HeroArthasArmyoftheDeadGhoulSpawned, true);
    }

}

void libGDHL_gf_HeroArthasDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroArthasTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroArthasTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroArthasTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroArthasTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroArthasAntiMagicShellHeal, false);
        TriggerEnable(libGDHL_gt_HeroArthasDeathCoilImmortalCoilStoreDamageDealt, false);
        TriggerEnable(libGDHL_gt_HeroArthasDeathCoilImmortalCoilAddHeroDamageBonusHealing, false);
        TriggerEnable(libGDHL_gt_HeroArthasArmyoftheDeadMinionAITakeoverDeath, false);
        TriggerEnable(libGDHL_gt_HeroArthasArmyoftheDeadMinionAITakeoverTransport, false);
        TriggerEnable(libGDHL_gt_HeroArthasArmyoftheDeadPortGhouls, false);
        TriggerEnable(libGDHL_gt_HeroArthasArmyoftheDeadGhoulSpawned, false);
    }

}

void libGDHL_gf_HeroAnubarakIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroAnubarakTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroAnubarakTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroAnubarakBurrowChargeSuppressCollision, true);
        TriggerEnable(libGDHL_gt_HeroAnubarakBurrowChargeMaxRange, true);
        TriggerEnable(libGDHL_gt_HeroAnubarakBurrowChargeCancel, true);
        TriggerEnable(libGDHL_gt_HeroAnubarakBurrowChargeUnpathableCheck, true);
        TriggerEnable(libGDHL_gt_HeroAnubarakBeetleCreation, true);
        TriggerEnable(libGDHL_gt_HeroAnubarakBeetleJuicedMasterySpecialDeathStateProc, true);
        TriggerEnable(libGDHL_gt_HeroAnubarakCocoonSoundEffect, true);
        TriggerEnable(libGDHL_gt_HeroAnubarakCocoonOn, true);
        TriggerEnable(libGDHL_gt_HeroAnubarakCocoonOff, true);
    }

}

void libGDHL_gf_HeroAnubarakDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroAnubarakTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroAnubarakTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroAnubarakTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroAnubarakTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroAnubarakBurrowChargeSuppressCollision, false);
        TriggerEnable(libGDHL_gt_HeroAnubarakBurrowChargeMaxRange, false);
        TriggerEnable(libGDHL_gt_HeroAnubarakBurrowChargeCancel, false);
        TriggerEnable(libGDHL_gt_HeroAnubarakBurrowChargeUnpathableCheck, false);
        TriggerEnable(libGDHL_gt_HeroAnubarakBeetleCreation, false);
        TriggerEnable(libGDHL_gt_HeroAnubarakBeetleJuicedMasterySpecialDeathStateProc, false);
        TriggerEnable(libGDHL_gt_HeroAnubarakCocoonSoundEffect, false);
        TriggerEnable(libGDHL_gt_HeroAnubarakCocoonOn, false);
        TriggerEnable(libGDHL_gt_HeroAnubarakCocoonOff, false);
    }

}

void libGDHL_gf_HeroAzmodanIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroAzmodanTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroAzmodanTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroAzmodanSinsGraspCooldownProc, true);
        TriggerEnable(libGDHL_gt_HeroAzmodanDemonicInvasionHookUnitsIntoAI, true);
        TriggerEnable(libGDHL_gt_HeroAzmodanDemonicInvasionUnpathableLocation, true);
        TriggerEnable(libGDHL_gt_HeroAzmodanGlobeofAnnihilationRevealerCreate, true);
        TriggerEnable(libGDHL_gt_HeroAzmodanDemonLieutenantCreate, true);
        TriggerEnable(libGDHL_gt_HeroAzmodanDemonCreate, true);
        TriggerEnable(libGDHL_gt_HeroAzmodanDemonCreateBattlebornMastery, true);
        TriggerEnable(libGDHL_gt_HeroAzmodanDemonGeneralBirthFacing, true);
        TriggerEnable(libGDHL_gt_HeroAzmodanSpawned, true);
    }

}

void libGDHL_gf_HeroAzmodanDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroAzmodanTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroAzmodanTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroAzmodanTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroAzmodanTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroAzmodanSinsGraspCooldownProc, false);
        TriggerEnable(libGDHL_gt_HeroAzmodanDemonicInvasionHookUnitsIntoAI, false);
        TriggerEnable(libGDHL_gt_HeroAzmodanDemonicInvasionUnpathableLocation, false);
        TriggerEnable(libGDHL_gt_HeroAzmodanGlobeofAnnihilationRevealerCreate, false);
        TriggerEnable(libGDHL_gt_HeroAzmodanCustomKillVO, false);
        TriggerEnable(libGDHL_gt_HeroAzmodanDemonLieutenantCreate, false);
        TriggerEnable(libGDHL_gt_HeroAzmodanDemonCreate, false);
        TriggerEnable(libGDHL_gt_HeroAzmodanDemonCreateBattlebornMastery, false);
        TriggerEnable(libGDHL_gt_HeroAzmodanDemonGeneralBirthFacing, false);
        TriggerEnable(libGDHL_gt_HeroAzmodanSpawned, false);
    }

}

void libGDHL_gf_HeroBarbarianIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroBarbarianTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroBarbarianTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroSonyaWrathoftheBerserkerBuffDurationExtension, true);
        TriggerEnable(libGDHL_gt_HeroBarbarianAncientSpearLaunchBarbarianUsed, true);
        TriggerEnable(libGDHL_gt_HeroBarbarianLeap, true);
    }

}

void libGDHL_gf_HeroBarbarianDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroBarbarianTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroBarbarianTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroBarbarianTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroBarbarianTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroSonyaWrathoftheBerserkerBuffDurationExtension, false);
        TriggerEnable(libGDHL_gt_HeroBarbarianAncientSpearLaunchBarbarianUsed, false);
        TriggerEnable(libGDHL_gt_HeroBarbarianLeap, false);
    }

}

void libGDHL_gf_HeroButcherIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroButcherTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroButcherTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroButcherButchersBrandDurationRefresh, true);
        TriggerEnable(libGDHL_gt_HeroButcherGainsEnraged, true);
        TriggerEnable(libGDHL_gt_HeroButcherRuthlessOnslaughtTargetAudioTelegraph, true);
        TriggerEnable(libGDHL_gt_HeroButcherRuthlessOnslaughtTravelValidation, true);
        TriggerEnable(libGDHL_gt_HeroButcherRuthlessOnslaughtCast, true);
        TriggerEnable(libGDHL_gt_HeroButcherRuthlessOnslaughtCancelAnimationHook, true);
        TriggerEnable(libGDHL_gt_HeroButcherGainsOmnivoreTalent, true);
        TriggerEnable(libGDHL_gt_HeroButcherRemoveFreshMeatOnDeath, true);
        TriggerEnable(libGDHL_gt_HeroButcherButcherParticipatedInTakedown, true);
        TriggerEnable(libGDHL_gt_HeroButcherButcherParticipatedinNPCTakedown, true);
        TriggerEnable(libGDHL_gt_HeroButcherBloodGlobeVehicleLogic, true);
    }

}

void libGDHL_gf_HeroButcherDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroButcherTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroButcherTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroButcherTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroButcherTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroButcherButchersBrandDurationRefresh, false);
        TriggerEnable(libGDHL_gt_HeroButcherGainsEnraged, false);
        TriggerEnable(libGDHL_gt_HeroButcherRuthlessOnslaughtTargetAudioTelegraph, false);
        TriggerEnable(libGDHL_gt_HeroButcherRuthlessOnslaughtTravelValidation, false);
        TriggerEnable(libGDHL_gt_HeroButcherRuthlessOnslaughtCast, false);
        TriggerEnable(libGDHL_gt_HeroButcherRuthlessOnslaughtCancelAnimationHook, false);
        TriggerEnable(libGDHL_gt_HeroButcherGainsOmnivoreTalent, false);
        TriggerEnable(libGDHL_gt_HeroButcherRemoveFreshMeatOnDeath, false);
        TriggerEnable(libGDHL_gt_HeroButcherButcherParticipatedInTakedown, false);
        TriggerEnable(libGDHL_gt_HeroButcherButcherParticipatedinNPCTakedown, false);
        TriggerEnable(libGDHL_gt_HeroButcherBloodGlobeVehicleLogic, false);
    }

}

void libGDHL_gf_ButcherFreshMeatProc (int lp_killingPlayer, unit lp_minion) {
    // Implementation
    if ((UnitGetType(libGame_gv_players[lp_killingPlayer].lv_heroUnit) == "HeroButcher") && (UnitTypeTestAttribute(UnitGetType(lp_minion), c_unitAttributeSummoned) == false) && (UnitTypeTestAttribute(UnitGetType(lp_minion), c_unitAttributeStructure) == false) && (UnitTypeTestAttribute(UnitGetType(lp_minion), c_unitAttributeLight) == false) && (UnitTypeTestAttribute(UnitGetType(lp_minion), c_unitAttributeRobotic) == false) && ((UnitTypeTestAttribute(UnitGetType(lp_minion), c_unitAttributeBiological) == true) || (UnitTypeTestAttribute(UnitGetType(lp_minion), c_unitAttributeHeroic) == true))) {
        if ((UnitBehaviorCount(libGame_gv_players[lp_killingPlayer].lv_heroUnit, "ButcherFreshMeatTokenCounter") < libGDHL_gv_heroButcherMaxMeatCount)) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "ButcherFreshMeat1Stack", 0, lp_killingPlayer, PointWithOffsetPolar(UnitGetPosition(lp_minion), 1.0, libNtve_gf_RandomAngle()));
        }

    }

}

void libGDHL_gf_HeroChenIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroChenTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroChenTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroChenWanderingKegActivate, true);
        TriggerEnable(libGDHL_gt_HeroChenWanderingKegDeactivate, true);
        TriggerEnable(libGDHL_gt_HeroChenStormEarthAndFireStasis, true);
        TriggerEnable(libGDHL_gt_HeroChenStormEarthAndFireStasisCleanup, true);
        TriggerEnable(libGDHL_gt_HeroChenStormEarthFireActivatedNew, true);
        TriggerEnable(libGDHL_gt_HeroChenElementDies, true);
        TriggerEnable(libGDHL_gt_HeroChenElementFatalDamageResponse, true);
        TriggerEnable(libGDHL_gt_HeroChenStormEarthFireRegenerationMaster, true);
        TriggerEnable(libGDHL_gt_HeroChenExpirationCleanup, true);
        TriggerEnable(libGDHL_gt_HeroChenStormEarthFireEarthAbility, true);
        TriggerEnable(libGDHL_gt_HeroChenStormEarthFireMinesEntrance, true);
        TriggerEnable(libGDHL_gt_HeroChenSwiftReflexesTalentMissed, true);
        TriggerEnable(libGDHL_gt_HeroChenFreshestIngredientsTalentProc, true);
        TriggerEnable(libGDHL_gt_HeroChenPurifyingBrewTalentProc, true);
    }

}

void libGDHL_gf_HeroChenDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroChenTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroChenTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroChenTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroChenTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroChenWanderingKegActivate, false);
        TriggerEnable(libGDHL_gt_HeroChenWanderingKegDeactivate, false);
        TriggerEnable(libGDHL_gt_HeroChenStormEarthAndFireStasis, false);
        TriggerEnable(libGDHL_gt_HeroChenStormEarthAndFireStasisCleanup, false);
        TriggerEnable(libGDHL_gt_HeroChenStormEarthFireActivatedNew, false);
        TriggerEnable(libGDHL_gt_HeroChenElementDies, false);
        TriggerEnable(libGDHL_gt_HeroChenElementFatalDamageResponse, false);
        TriggerEnable(libGDHL_gt_HeroChenStormEarthFireRegenerationMaster, false);
        TriggerEnable(libGDHL_gt_HeroChenExpirationCleanup, false);
        TriggerEnable(libGDHL_gt_HeroChenStormEarthFireEarthAbility, false);
        TriggerEnable(libGDHL_gt_HeroChenStormEarthFireMinesEntrance, false);
        TriggerEnable(libGDHL_gt_HeroChenSwiftReflexesTalentMissed, false);
        TriggerEnable(libGDHL_gt_HeroChenFreshestIngredientsTalentProc, false);
        TriggerEnable(libGDHL_gt_HeroChenPurifyingBrewTalentProc, false);
    }

}

void libGDHL_gf_HeroChenStormEarthFireCleanup (int lp_chenOwner, bool lp_suicide, unit lp_suicideSource) {
    // Variable Declarations
    int lv_owner;
    unit lv_chen;

    // Variable Initialization

    // Implementation
    lv_owner = lp_chenOwner;
    if ((UnitGetType(libGame_gv_players[lv_owner].lv_heroUnit) == "HeroAbathur")) {
        if ((libGame_gv_players[lv_owner].lv_activeVehicle == null)) {
            UnitGroupLoopBegin(UnitGroup(null, lv_owner, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHallucination - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitRemove(UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            return ;
        }

        lv_chen = libGame_gv_players[lv_owner].lv_activeVehicle;
    }
    else {
        lv_chen = libGame_gv_players[lv_owner].lv_heroUnit;
    }
    if ((libGame_gv_players[lv_owner].lv_activeVehicle != null)) {
        UnitBehaviorRemove(lv_chen, "StormEarthFireCasterBehavior", 1);
        return ;
    }

    UnitBehaviorRemove(lv_chen, "StormEarthFireCasterBehavior", 1);
    UnitSelect(lv_chen, lv_owner, true);
    AIAddPlayerUnit(lv_chen);
    libGame_gv_players[lv_owner].lv_cameraPlayerHasControl = false;
    libGame_gv_players[lv_owner].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[lv_owner].lv_heroUnitGroup;
    libGame_gf_CameraUpdateCameraForPlayer(lv_owner);
    Wait(0.0625, c_timeGame);
    libGame_gv_players[lv_owner].lv_cameraPlayerHasControl = true;
    libGame_gf_CameraUpdateCameraForPlayer(lv_owner);
    libGDHL_gv_heroChenStormEarthFireUnits[lv_owner].lv_controlStoreUnit = null;
    if ((libGDHL_gv_heroChenStormEarthFireFatalDamageResponseCounter[lp_chenOwner] == 3)) {
        UnitCreateEffectUnitWithSource(lp_suicideSource, "ChenStormEarthFireSuicideDamage", lv_chen, c_gameCatalogAbil, "ChenStormEarthFire");
        libGDHL_gv_heroChenStormEarthFireFatalDamageResponseCounter[lp_chenOwner] = 0;
    }
    else {
        libGDHL_gv_heroChenStormEarthFireFatalDamageResponseCounter[lp_chenOwner] = 0;
    }
}

void libGDHL_gf_HeroCrusaderIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroCrusaderTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroCrusaderTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_CrusaderFallingSwordTeleport, true);
        TriggerEnable(libGDHL_gt_CrusaderFallingSwordFinalSet, true);
    }

}

void libGDHL_gf_HeroCrusaderDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroCrusaderTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroCrusaderTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroCrusaderTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroCrusaderTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_CrusaderFallingSwordTeleport, false);
        TriggerEnable(libGDHL_gt_CrusaderFallingSwordFinalSet, false);
    }

}

void libGDHL_gf_HeroDiabloIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroDiabloTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroDiabloTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroDiabloOverPowerFacing, true);
        TriggerEnable(libGDHL_gt_HeroDiabloInfernoBreathCast, true);
        TriggerEnable(libGDHL_gt_HeroDiabloInfernoBreathEnd, true);
        TriggerEnable(libGDHL_gt_HeroDiabloInfernalPowerProc, true);
        TriggerEnable(libGDHL_gt_HeroDiabloBlackSoulstoneStackTalentPicked, true);
        TriggerEnable(libGDHL_gt_HeroDiabloBlackSoulstoneTalentsProc, true);
    }

}

void libGDHL_gf_HeroDiabloDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroDiabloTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroDiabloTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroDiabloTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroDiabloTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroDiabloOverPowerFacing, false);
        TriggerEnable(libGDHL_gt_HeroDiabloInfernoBreathCast, false);
        TriggerEnable(libGDHL_gt_HeroDiabloInfernoBreathEnd, false);
        TriggerEnable(libGDHL_gt_HeroDiabloInfernalPowerProc, false);
        TriggerEnable(libGDHL_gt_HeroDiabloBlackSoulstoneStackTalentPicked, false);
        TriggerEnable(libGDHL_gt_HeroDiabloBlackSoulstoneTalentsProc, false);
    }

}

void libGDHL_gf_HeroDemonHunterIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroDemonHunterTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroDemonHunterTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroDemonHunterVaultDamageBuff, true);
        TriggerEnable(libGDHL_gt_HeroDemonHunterPunishmentInitialPick, true);
        TriggerEnable(libGDHL_gt_HeroDemonHunterManticoreProc, true);
        TriggerEnable(libGDHL_gt_HeroDemonHunterGloomCast, true);
    }

}

void libGDHL_gf_HeroDemonHunterDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroDemonHunterTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroDemonHunterTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroDemonHunterTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroDemonHunterTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroDemonHunterVaultDamageBuff, false);
        TriggerEnable(libGDHL_gt_HeroDemonHunterPunishmentInitialPick, false);
        TriggerEnable(libGDHL_gt_HeroDemonHunterManticoreProc, false);
        TriggerEnable(libGDHL_gt_HeroDemonHunterGloomCast, false);
    }

}

void libGDHL_gf_HeroDryadIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroDryadTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroDryadTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroDryadLeapingStrikeSetTargetVariable, true);
        TriggerEnable(libGDHL_gt_HeroDryadLeapingStrikeFindLandingLocation, true);
        TriggerEnable(libGDHL_gt_HeroDryadLeapingStrikeCreateAttackPersistent, true);
        TriggerEnable(libGDHL_gt_HeroDryadNaturesToxinHandleApplication, true);
        TriggerEnable(libGDHL_gt_HeroDryadWispDividingWispDuration, true);
        TriggerEnable(libGDHL_gt_HeroDryadDanceCancelOrders, true);
        TriggerEnable(libGDHL_gt_HeroDryadActivateCameraSettings, true);
        TriggerEnable(libGDHL_gt_HeroDryadDeactivateCameraSettings, true);
        TriggerEnable(libGDHL_gt_HeroDryadActivateCameraforSymbiote, true);
        TriggerEnable(libGDHL_gt_HeroDryadLossofControlCamera, true);
        TriggerEnable(libGDHL_gt_HeroDryadAbolishMagicBehaviorActivate, true);
        TriggerEnable(libGDHL_gt_HeroDryadAbolishMagicBehaviorDeactivate, true);
    }

}

void libGDHL_gf_HeroDryadDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroDryadTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroDryadTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroDryadTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroDryadTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroDryadLeapingStrikeSetTargetVariable, false);
        TriggerEnable(libGDHL_gt_HeroDryadLeapingStrikeFindLandingLocation, false);
        TriggerEnable(libGDHL_gt_HeroDryadLeapingStrikeCreateAttackPersistent, false);
        TriggerEnable(libGDHL_gt_HeroDryadNaturesToxinHandleApplication, false);
        TriggerEnable(libGDHL_gt_HeroDryadWispDividingWispDuration, false);
        TriggerEnable(libGDHL_gt_HeroDryadDanceCancelOrders, false);
        TriggerEnable(libGDHL_gt_HeroDryadActivateCameraSettings, false);
        TriggerEnable(libGDHL_gt_HeroDryadDeactivateCameraSettings, false);
        TriggerEnable(libGDHL_gt_HeroDryadActivateCameraforSymbiote, false);
        TriggerEnable(libGDHL_gt_HeroDryadLossofControlCamera, false);
        TriggerEnable(libGDHL_gt_HeroDryadAbolishMagicBehaviorActivate, false);
        TriggerEnable(libGDHL_gt_HeroDryadAbolishMagicBehaviorDeactivate, false);
        TriggerEnable(libGDHL_gt_HeroDryadAbolishMagicCCRecognition, false);
    }

}

void libGDHL_gf_HeroGreymaneIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroArtanisTriggerRegistrationVariable2 += 1;
    if ((libGDHL_gv_heroArtanisTriggerRegistrationVariable2 == 1)) {
        TriggerEnable(libGDHL_gt_HeroGreymaneGofortheThroatSpecialDeathProcs, true);
        TriggerEnable(libGDHL_gt_HeroGreymaneTalentWizenedDuelistTakedowns, true);
        TriggerEnable(libGDHL_gt_HeroGreymaneActorSoundSwaps, true);
        TriggerEnable(libGDHL_gt_HeroGreymaneCursedBulletDamage, true);
    }

}

void libGDHL_gf_HeroGreymaneDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroArtanisTriggerRegistrationVariable2 -= 1;
    if ((libGDHL_gv_heroArtanisTriggerRegistrationVariable2 < 0)) {
        libGDHL_gv_heroArtanisTriggerRegistrationVariable2 = 0;
    }

    if ((libGDHL_gv_heroArtanisTriggerRegistrationVariable2 == 0)) {
        TriggerEnable(libGDHL_gt_HeroGreymaneGofortheThroatSpecialDeathProcs, false);
        TriggerEnable(libGDHL_gt_HeroGreymaneTalentWizenedDuelistTakedowns, false);
        TriggerEnable(libGDHL_gt_HeroGreymaneActorSoundSwaps, false);
        TriggerEnable(libGDHL_gt_HeroGreymaneCursedBulletDamage, false);
    }

}

void libGDHL_gf_HeroGuldanDarkBargainDeathTimerHoldandSwap (int lp_team, int lp_frameIndex, fixed lp_waitTime) {
    // Implementation
    DialogControlSendAnimationEvent(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrame[lp_team][lp_frameIndex], PlayerGroupAll(), "Pause");
    DialogControlSetVisible(libUIUI_gv_deathTimerPanel.lv_timerBarDarkBargainBorder[lp_team][lp_frameIndex], PlayerGroupAll(), true);
    Wait(lp_waitTime, c_timeGame);
    DialogControlSetVisible(libUIUI_gv_deathTimerPanel.lv_timerBarDarkBargainBorder[lp_team][lp_frameIndex], PlayerGroupAll(), false);
    if ((lp_team == libGame_gv_teamOrderIndex_C)) {
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrameTimeLabel[lp_team][lp_frameIndex], "Storm_DeathTimer_TimerLabelRed", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    }
    else {
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrameTimeLabel[lp_team][lp_frameIndex], "Storm_DeathTimer_TimerLabelRed", libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    }
    if (((libCore_gv_sYSGameMode == libCore_ge_GameModes_ArenaMode) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_AttackDefend))) {
        DialogControlSendAnimationEvent(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrame[lp_team][lp_frameIndex], PlayerGroupAll(), "StartRapid");
    }
    else {
        DialogControlSendAnimationEvent(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrame[lp_team][lp_frameIndex], PlayerGroupAll(), "Start");
    }
    DialogControlSendAnimationEvent(libUIUI_gv_deathTimerPanel.lv_timerBarDarkBargainBorder[lp_team][lp_frameIndex], PlayerGroupAll(), "StopFlash");
}

void libGDHL_gf_HeroFaerieDragonIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroFaerieDragonTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroFaerieDragonTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroFaerieDragonPhaseShiftCamera, true);
        TriggerEnable(libGDHL_gt_HeroFaerieDragonPixieCharmChargeCountProc, true);
    }

}

void libGDHL_gf_HeroFaerieDragonDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroFaerieDragonTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroFaerieDragonTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroFaerieDragonTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroFaerieDragonTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroFaerieDragonPhaseShiftCamera, false);
        TriggerEnable(libGDHL_gt_HeroFaerieDragonPixieCharmChargeCountProc, false);
    }

}

void libGDHL_gf_HeroFalstadIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroFalstadTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroFalstadTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroFalstadWingmanVariables, true);
        TriggerEnable(libGDHL_gt_HeroFalstadThunderstormRefresh, true);
        TriggerEnable(libGDHL_gt_HeroFalstadFlightCameraHeightRestore, true);
    }

}

void libGDHL_gf_HeroFalstadDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroFalstadTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroFalstadTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroFalstadTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroFalstadTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroFalstadWingmanVariables, false);
        TriggerEnable(libGDHL_gt_HeroFalstadThunderstormRefresh, false);
        TriggerEnable(libGDHL_gt_HeroFalstadFlightCameraHeightRestore, false);
    }

}

void libGDHL_gf_HeroIllidanIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroIllidanTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroIllidanTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroIllidanApplyFotBCooldownonInventoryUse, true);
        TriggerEnable(libGDHL_gt_HeroIllidanMetamorphosisAvatarApplyHealthBuff, true);
        TriggerEnable(libGDHL_gt_HeroIllidanTheHuntTargetDistanceCheck, true);
        TriggerEnable(libGDHL_gt_HeroIllidanTheHuntNowhereToHideTalentActivate, true);
        TriggerEnable(libGDHL_gt_HeroIllidanBladesOfAzzinothAddCharge, true);
        TriggerEnable(libGDHL_gt_HeroIllidanMetamorphasisActivate, true);
        TriggerEnable(libGDHL_gt_HeroIllidanMetamorphasisDeactivate, true);
        TriggerEnable(libGDHL_gt_HeroIllidanUnendingHatredHeroTakedown, true);
        TriggerEnable(libGDHL_gt_HeroIllidanUnendingHatredNPCKill, true);
    }

}

void libGDHL_gf_HeroIllidanDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroIllidanTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroIllidanTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroIllidanTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroIllidanTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroIllidanApplyFotBCooldownonInventoryUse, false);
        TriggerEnable(libGDHL_gt_HeroIllidanMetamorphosisAvatarApplyHealthBuff, false);
        TriggerEnable(libGDHL_gt_HeroIllidanTheHuntTargetDistanceCheck, false);
        TriggerEnable(libGDHL_gt_HeroIllidanTheHuntNowhereToHideTalentActivate, false);
        TriggerEnable(libGDHL_gt_HeroIllidanBladesOfAzzinothAddCharge, false);
        TriggerEnable(libGDHL_gt_HeroIllidanMetamorphasisActivate, false);
        TriggerEnable(libGDHL_gt_HeroIllidanMetamorphasisDeactivate, false);
        TriggerEnable(libGDHL_gt_HeroIllidanUnendingHatredHeroTakedown, false);
        TriggerEnable(libGDHL_gt_HeroIllidanUnendingHatredNPCKill, false);
    }

}

void libGDHL_gf_HeroJainaIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroJainaTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroJainaTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroJainaWaterElementalCreated, true);
        TriggerEnable(libGDHL_gt_HeroJainaWaterElementalCommand, true);
        TriggerEnable(libGDHL_gt_HeroJainaFrostboltWintermuteCast, true);
        TriggerEnable(libGDHL_gt_HeroJainaConeofColdWintermuteCast, true);
        TriggerEnable(libGDHL_gt_HeroJainaBlizzardWintermuteCast, true);
        TriggerEnable(libGDHL_gt_HeroJainaWaterElementalVehicleInitial, true);
        TriggerEnable(libGDHL_gt_HeroJainaIceBarrierAddShields, true);
        TriggerEnable(libGDHL_gt_HeroJainaImprovedIceBlockOverlayOn, true);
        TriggerEnable(libGDHL_gt_HeroJainaImprovedIceBlockOverlayOff, true);
    }

}

void libGDHL_gf_HeroJainaDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroJainaTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroJainaTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroJainaTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroJainaTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroJainaWaterElementalCreated, false);
        TriggerEnable(libGDHL_gt_HeroJainaWaterElementalCommand, false);
        TriggerEnable(libGDHL_gt_HeroJainaFrostboltWintermuteCast, false);
        TriggerEnable(libGDHL_gt_HeroJainaConeofColdWintermuteCast, false);
        TriggerEnable(libGDHL_gt_HeroJainaBlizzardWintermuteCast, false);
        TriggerEnable(libGDHL_gt_HeroJainaWaterElementalVehicleInitial, false);
        TriggerEnable(libGDHL_gt_HeroJainaIceBarrierAddShields, false);
        TriggerEnable(libGDHL_gt_HeroJainaImprovedIceBlockOverlayOn, false);
        TriggerEnable(libGDHL_gt_HeroJainaImprovedIceBlockOverlayOff, false);
    }

}

trigger auto_libGDHL_gf_HeroJainaWaterElementalVehicleControl_Trigger = null;
unit auto_libGDHL_gf_HeroJainaWaterElementalVehicleControl_lp_witchDoctor;
int auto_libGDHL_gf_HeroJainaWaterElementalVehicleControl_lp_player;

void libGDHL_gf_HeroJainaWaterElementalVehicleControl (unit lp_witchDoctor, int lp_player) {
    auto_libGDHL_gf_HeroJainaWaterElementalVehicleControl_lp_witchDoctor = lp_witchDoctor;
    auto_libGDHL_gf_HeroJainaWaterElementalVehicleControl_lp_player = lp_player;

    if (auto_libGDHL_gf_HeroJainaWaterElementalVehicleControl_Trigger == null) {
        auto_libGDHL_gf_HeroJainaWaterElementalVehicleControl_Trigger = TriggerCreate("auto_libGDHL_gf_HeroJainaWaterElementalVehicleControl_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_HeroJainaWaterElementalVehicleControl_Trigger, false, false);
}

bool auto_libGDHL_gf_HeroJainaWaterElementalVehicleControl_TriggerFunc (bool testConds, bool runActions) {
    unit lp_witchDoctor = auto_libGDHL_gf_HeroJainaWaterElementalVehicleControl_lp_witchDoctor;
    int lp_player = auto_libGDHL_gf_HeroJainaWaterElementalVehicleControl_lp_player;

    // Variable Declarations
    bool lv_gaveToMinionAI;

    // Variable Initialization

    // Implementation
    while ((UnitHasBehavior2(lp_witchDoctor, "JainaWaterElementalCasterBehavior") == true) && (libGame_gv_players[lp_player].lv_activeVehicle != null)) {
        UnitIssueOrder(libGDHL_gv_heroJainaWaterElemental[lp_player], OrderTargetingPoint(AbilityCommand("attack", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(libGame_gv_players[lp_player].lv_activeVehicle), 2.0, UnitGetPosition(libGDHL_gv_heroJainaWaterElemental[lp_player]))), c_orderQueueReplace);
        Wait(0.5, c_timeGame);
    }
    return true;
}

void libGDHL_gf_HeroKaelthasIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroKaelthasTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroKaelthasTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroKaelthasPhoenixSpawnSelection, true);
        TriggerEnable(libGDHL_gt_HeroKaelthasTwinSpheresTalentPickCooldownReset, true);
        TriggerEnable(libGDHL_gt_HeroKaelthasPryoblastMissileTeleportValidation, true);
        TriggerEnable(libGDHL_gt_HeroKaelthasPyroblastMissileCreated, true);
    }

}

void libGDHL_gf_HeroKaelthasDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroKaelthasTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroKaelthasTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroKaelthasTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroKaelthasTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroKaelthasPhoenixSpawnSelection, false);
        TriggerEnable(libGDHL_gt_HeroKaelthasTwinSpheresTalentPickCooldownReset, false);
        TriggerEnable(libGDHL_gt_HeroKaelthasPryoblastMissileTeleportValidation, false);
        TriggerEnable(libGDHL_gt_HeroKaelthasPyroblastMissileCreated, false);
    }

}

void libGDHL_gf_HeroKerriganIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroKerriganTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroKerriganTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroKerriganAssimilationPassiveAddShields, true);
        TriggerEnable(libGDHL_gt_HeroKerriganRavageCDR, true);
        TriggerEnable(libGDHL_gt_HeroKerriganRavageCDROnHeroSpecialDeathState, true);
        TriggerEnable(libGDHL_gt_HeroKerriganRavageCDROnTowerSpecialDeathState, true);
        TriggerEnable(libGDHL_gt_HeroKerriganSicUltralisk, true);
        TriggerEnable(libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbility, true);
        TriggerEnable(libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilityPoint, true);
        TriggerEnable(libGDHL_gt_HeroKerriganUltraliskTorrasqueReborn, true);
        TriggerEnable(libGDHL_gt_HeroKerriganUltraliskDies, true);
        TriggerEnable(libGDHL_gt_HeroKerriganQueensRushProc, true);
    }

}

void libGDHL_gf_HeroKerriganDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroKerriganTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroKerriganTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroKerriganTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroKerriganTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroKerriganAssimilationPassiveAddShields, false);
        TriggerEnable(libGDHL_gt_HeroKerriganRavageCDR, false);
        TriggerEnable(libGDHL_gt_HeroKerriganRavageCDROnHeroSpecialDeathState, false);
        TriggerEnable(libGDHL_gt_HeroKerriganRavageCDROnTowerSpecialDeathState, false);
        TriggerEnable(libGDHL_gt_HeroKerriganSicUltralisk, false);
        TriggerEnable(libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbility, false);
        TriggerEnable(libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilityPoint, false);
        TriggerEnable(libGDHL_gt_HeroKerriganUltraliskTorrasqueReborn, false);
        TriggerEnable(libGDHL_gt_HeroKerriganUltraliskDies, false);
        TriggerEnable(libGDHL_gt_HeroKerriganQueensRushProc, false);
    }

}

void libGDHL_gf_HeroKerriganUltraliskLogicController (int lp_owningPlayer, unit lp_ultraliskUnit) {
    // Variable Declarations
    point lv_lastKnownLocation;

    // Variable Initialization
    lv_lastKnownLocation = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget));

    // Implementation
    while ((UnitIsAlive(lp_ultraliskUnit) == true)) {
        if ((UnitOrderCount(lp_ultraliskUnit) == 0)) {
            UnitIssueOrder(lp_ultraliskUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lp_ultraliskUnit)), c_orderQueueReplace);
            Wait(0.25, c_timeGame);
            if ((UnitOrderCount(lp_ultraliskUnit) == 0)) {
                if ((UnitIsAlive(lp_ultraliskUnit) == false)) {
                    return ;
                }

                UnitIssueOrder(lp_ultraliskUnit, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(UnitGetPosition(lp_ultraliskUnit), 3.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                Wait(1.75, c_timeGame);
            }

        }
        else {
            if ((OrderGetTargetUnit(UnitOrder(lp_ultraliskUnit, 0)) != null)) {
                if ((OrderGetTargetUnit(UnitOrder(lp_ultraliskUnit, 0)) != libGDHL_gv_heroKerriganUltraliskCurrentAttackTargetUnit[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)])) {
                    libGDHL_gv_heroKerriganUltraliskCurrentAttackTargetUnit[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] = OrderGetTargetUnit(UnitOrder(lp_ultraliskUnit, 0));
                }

                if ((UnitFilterMatch(libGDHL_gv_heroKerriganUltraliskCurrentAttackTargetUnit[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)], UnitGetOwner(lp_ultraliskUnit), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) && (libNtve_gf_UnitIsVisibleToPlayer(libGDHL_gv_heroKerriganUltraliskCurrentAttackTargetUnit[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)], UnitGetOwner(lp_ultraliskUnit)) == true)) {
                    if ((lv_lastKnownLocation != UnitGetPosition(libGDHL_gv_heroKerriganUltraliskCurrentAttackTargetUnit[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)]))) {
                        lv_lastKnownLocation = UnitGetPosition(libGDHL_gv_heroKerriganUltraliskCurrentAttackTargetUnit[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)]);
                    }

                }
                else {
                    UnitIssueOrder(lp_ultraliskUnit, OrderTargetingPoint(AbilityCommand("attack", 0), PointWithOffsetPolar(lv_lastKnownLocation, 2.0, UnitGetFacing(lp_ultraliskUnit))), c_orderQueueReplace);
                    lv_lastKnownLocation = PointWithOffsetPolar(lv_lastKnownLocation, 2.0, UnitGetFacing(lp_ultraliskUnit));
                    Wait(1.5, c_timeGame);
                }
            }

        }
        Wait(0.125, c_timeGame);
    }
}

void libGDHL_gf_HeroETCIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroETCTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroETCTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroL90ETCPowerslideTargetCheck, true);
        TriggerEnable(libGDHL_gt_HeroL90ETCStageDiveTeleportUnit, true);
        TriggerEnable(libGDHL_gt_HeroL90ETCStageDiveFinalSet, true);
        TriggerEnable(libGDHL_gt_HeroL90ETCMoshPitOn, true);
        TriggerEnable(libGDHL_gt_HeroETCProgRockTalentRegenGlobeProc, true);
    }

}

void libGDHL_gf_HeroETCDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroETCTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroETCTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroETCTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroETCTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroL90ETCPowerslideTargetCheck, false);
        TriggerEnable(libGDHL_gt_HeroL90ETCStageDiveTeleportUnit, false);
        TriggerEnable(libGDHL_gt_HeroL90ETCStageDiveFinalSet, false);
        TriggerEnable(libGDHL_gt_HeroL90ETCMoshPitOn, false);
        TriggerEnable(libGDHL_gt_HeroETCProgRockTalentRegenGlobeProc, false);
    }

}

void libGDHL_gf_HeroLiLiIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroLiLiTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroLiLiTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroLiLiCloudSerpentSurgingWindsAbilityPowerTransference, true);
        TriggerEnable(libGDHL_gt_HeroLiLiCloudSerpentStatTracking, true);
        TriggerEnable(libGDHL_gt_HeroLiLiCloudSerpentTurretSerpentSerpentSidekickSummonandSimplifiedAI, true);
        TriggerEnable(libGDHL_gt_HeroLiLiCloudSerpentTurretSerpentSummonandSimplifiedAI, true);
        TriggerEnable(libGDHL_gt_HeroLiLiCloudSerpentSummonandSimplifiedAI, true);
        TriggerEnable(libGDHL_gt_HeroLiLiCloudSerpentAttackMimic, true);
        TriggerEnable(libGDHL_gt_HeroLiLiShakeItOffCCProc, true);
    }

}

void libGDHL_gf_HeroLiLiDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroLiLiTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroLiLiTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroLiLiTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroLiLiTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroLiLiCloudSerpentSurgingWindsAbilityPowerTransference, false);
        TriggerEnable(libGDHL_gt_HeroLiLiCloudSerpentStatTracking, false);
        TriggerEnable(libGDHL_gt_HeroLiLiCloudSerpentTurretSerpentSerpentSidekickSummonandSimplifiedAI, false);
        TriggerEnable(libGDHL_gt_HeroLiLiCloudSerpentTurretSerpentSummonandSimplifiedAI, false);
        TriggerEnable(libGDHL_gt_HeroLiLiCloudSerpentSummonandSimplifiedAI, false);
        TriggerEnable(libGDHL_gt_HeroLiLiCloudSerpentAttackMimic, false);
        TriggerEnable(libGDHL_gt_HeroLiLiShakeItOffCCProc, false);
    }

}

void libGDHL_gf_HeroLiLiCloudSerpentCloakController (unit lp_owningUnit, unit lp_serpentUnit) {
    // Implementation
    if (((UnitTestState(lp_owningUnit, c_unitStateCloaked) == true) || (UnitBehaviorCount(lp_owningUnit, "ShrubStatusController") == 1)) && (UnitHasBehavior2(lp_serpentUnit, "CloudSerpentCloakingBehavior") == false) && (UnitHasBehavior2(lp_owningUnit, "AttackReveal") == false)) {
        libNtve_gf_SendActorMessageToUnit(lp_serpentUnit, "Signal SerpentHide");
        UnitBehaviorAdd(lp_serpentUnit, "CloudSerpentCloakingBehavior", lp_serpentUnit, 1);
    }
    else {
        if (((UnitBehaviorCount(lp_owningUnit, "ShrubStatusController") == 0) || (UnitHasBehavior2(lp_owningUnit, "AttackReveal") == true)) && (UnitTestState(lp_owningUnit, c_unitStateCloaked) == false) && (UnitHasBehavior2(lp_serpentUnit, "CloudSerpentCloakingBehavior") == true)) {
            libNtve_gf_SendActorMessageToUnit(lp_serpentUnit, "Signal SerpentShow");
            UnitBehaviorRemove(lp_serpentUnit, "CloudSerpentCloakingBehavior", 1);
        }

    }
}

void libGDHL_gf_HeroLeoricIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroLeoricTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroLeoricTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroLeoricWraithWalkDevouringMawSpecialCase, true);
        TriggerEnable(libGDHL_gt_HeroLeoricWraithWalkCast, true);
        TriggerEnable(libGDHL_gt_LeoricUndyingStart, true);
        TriggerEnable(libGDHL_gt_LeoricUndyingEnd, true);
        TriggerEnable(libGDHL_gt_LeoricSwappedDuringUndying, true);
        TriggerEnable(libGDHL_gt_LeoricUndyingHealingDeathTimerReduction, true);
        TriggerEnable(libGDHL_gt_HeroLeoricAddReanimationStackWhileInVehicle, true);
        TriggerEnable(libGDHL_gt_LeoricFealtyUntoDeathEnemyNPCProcListener, true);
        TriggerEnable(libGDHL_gt_LeoricFealtyUntoDeathAlliedNPCProcListener, true);
    }

}

void libGDHL_gf_HeroLeoricDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroLeoricTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroLeoricTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroLeoricTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroLeoricTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroLeoricWraithWalkDevouringMawSpecialCase, false);
        TriggerEnable(libGDHL_gt_HeroLeoricWraithWalkCast, false);
        TriggerEnable(libGDHL_gt_LeoricUndyingStart, false);
        TriggerEnable(libGDHL_gt_LeoricUndyingEnd, false);
        TriggerEnable(libGDHL_gt_LeoricSwappedDuringUndying, false);
        TriggerEnable(libGDHL_gt_LeoricUndyingHealingDeathTimerReduction, false);
        TriggerEnable(libGDHL_gt_HeroLeoricAddReanimationStackWhileInVehicle, false);
        TriggerEnable(libGDHL_gt_LeoricFealtyUntoDeathEnemyNPCProcListener, false);
        TriggerEnable(libGDHL_gt_LeoricFealtyUntoDeathAlliedNPCProcListener, false);
    }

}

void libGDHL_gf_LeoricUIHeroSpecificStatusFrameUpdateLeoricUIValue (int lp_player) {
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_GDHL_31DFEAEB", "A", FixedToText(libGDHL_gv_hero_Leoric_Undying_Dead_Time_Saved[lp_player], 2));
    libNtve_gf_SetDialogItemText(libGDHL_gv_leoricUI.lv_traitLabel, TextExpressionAssemble("Param/Expression/lib_GDHL_31DFEAEB"), libCore_gv_playerGroupFromPlayer[lp_player]);
}

void libGDHL_gf_LeoricUIHeroSpecificStatusFrameShowHideLeoricTraitUI (bool lp_showHide, int lp_player) {
    // Implementation
    if ((lp_showHide == true)) {
        DialogControlSetVisible(libGDHL_gv_leoricUI.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], true);
    }
    else {
        DialogControlSendAnimationEvent(libGDHL_gv_leoricUI.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], "Hide");
    }
}

void libGDHL_gf_LeoricUIClearUIForHeroSwap (int lp_player) {
    // Implementation
    DialogControlSetVisible(libGDHL_gv_leoricUI.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSendAnimationEvent(libGDHL_gv_leoricUI.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], "SwapHide");
}

void libGDHL_gf_FullscreenOverlaysShowHideDeathOverlay (bool lp_showHide, int lp_player) {
    // Implementation
    if ((lp_showHide == true)) {
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(lp_player, libUIUI_ge_FullscreenOverlayPriorities_Death, (CatalogFieldValueGet(c_gameCatalogHero, "Leoric", "CustomDeathOverlayPath", lp_player)), "LeoricUndying");
    }
    else {
        libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(lp_player, (CatalogFieldValueGet(c_gameCatalogHero, "Leoric", "CustomDeathOverlayPath", lp_player)), "LeoricUndying");
    }
}

void libGDHL_gf_HeroLostVikingsIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroLostVikingsTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroLostVikingsTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroLostVikingsVikingBriberyNPCProcListener, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsVikingBriberyUsed, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsVikingBriberyScoreReset, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsVikingBriberyAddStacksonCooldownReset, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsVikingHoard, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsSpinToWin, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsSpawn, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsDebugSwap, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsVikingDies, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsVikingRemoved, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsUnderAttackPing, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsUnderAttackUI, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsXPGain, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsBehaviorTalentGained, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsMoonwellRedistribution, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsVikingEntersStasis, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsVikingsLeavesStasis, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsUnitClicked, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsUseVehicle, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsUseTransport, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsRallyCast, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsRallyFinishCancel, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsRallySounds, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsPlayAgainComplete, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsPlayAgainForceGhostFacingPlacement, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsCheckpointTimerPauseinTimeStop, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsCheckpointReachTimerExpires, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsLongboatRaidSelection, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsLongboatRaidEndsResetControlGroups, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsLongboatRaidExpiration, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsHideVikingsOn, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsLongboatRaidTargetResponse, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsAbathurClone, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsLongboatRaidSelection, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsLongboatRaidExpiration, true);
        TriggerEnable(libGDHL_gt_HeroLostVikingsOlafTheStout, true);
    }

}

void libGDHL_gf_HeroLostVikingsDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroLostVikingsTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroLostVikingsTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroLostVikingsTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroLostVikingsTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroLostVikingsVikingBriberyNPCProcListener, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsVikingBriberyUsed, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsVikingBriberyScoreReset, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsVikingBriberyAddStacksonCooldownReset, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsVikingHoard, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsSpinToWin, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsSpawn, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsDebugSwap, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsVikingDies, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsVikingRemoved, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsUnderAttackPing, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsUnderAttackUI, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsXPGain, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsBehaviorTalentGained, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsUnitControllerUpdate, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsMoonwellRedistribution, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsVikingEntersStasis, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsVikingsLeavesStasis, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsUnitClicked, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsUseVehicle, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsUseTransport, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsRallyCast, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsRallyFinishCancel, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsRallySounds, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsPlayAgainComplete, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsPlayAgainForceGhostFacingPlacement, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsCheckpointTimerPauseinTimeStop, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsCheckpointReachedTimerCountdown, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsCheckpointReachTimerExpires, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsLongboatRaidSelection, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsLongboatRaidEndsResetControlGroups, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsLongboatRaidExpiration, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsHideVikingsOn, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsLongboatRaidTargetResponse, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsAbathurClone, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsLongboatRaidSelection, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsLongboatRaidExpiration, false);
        TriggerEnable(libGDHL_gt_HeroLostVikingsOlafTheStout, false);
    }

}

void libGDHL_gf_VikingBriberyProc (int lp_killingPlayer, unit lp_minion) {
    // Variable Declarations
    unit lv_VikingUnit;

    // Variable Initialization

    // Implementation
    if ((PlayerHasTalent(lp_killingPlayer, "LostVikingsMasteryVikingBribery") == true) && (UnitTypeTestAttribute(UnitGetType(lp_minion), c_unitAttributeSummoned) == false) && (UnitTypeTestAttribute(UnitGetType(lp_minion), c_unitAttributeStructure) == false) && (UnitTypeTestAttribute(UnitGetType(lp_minion), c_unitAttributeLight) == false) && (UnitTypeTestAttribute(UnitGetType(lp_minion), c_unitAttributeMapBoss) == false) && (UnitTypeTestAttribute(UnitGetType(lp_minion), c_unitAttributeMapCreature) == false) && (UnitTypeTestAttribute(UnitGetType(lp_minion), c_unitAttributeUser1) == false) && (UnitTypeTestAttribute(UnitGetType(lp_minion), c_unitAttributeBiological) == true)) {
        lv_VikingUnit = libGame_gv_players[lp_killingPlayer].lv_heroUnit;
        UnitBehaviorAdd(lv_VikingUnit, "LostVikingsVikingBriberyStacks", lv_VikingUnit, 1);
        UnitGroupLoopBegin(libGame_gv_players[lp_killingPlayer].lv_heroUnitGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "LostVikingsVikingBriberyVisualToken", UnitGroupLoopCurrent(), 1);
            UnitCreateEffectUnit(UnitGroupLoopCurrent(), "LostVikingsVikingBriberyIncreaseVisualTokenCounter", UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        PlayerScoreValueSetFromInt(lp_killingPlayer, "LostVikingsVikingBriberyStackScore", UnitBehaviorCount(lv_VikingUnit, "LostVikingsVikingBriberyStacks"));
        if ((ModI(UnitBehaviorCount(lv_VikingUnit, "LostVikingsVikingBriberyStacks"), 40) == 0)) {
            PlayerAddChargeUsed(lp_killingPlayer, "Abil/LostVikingsVikingBribery", -1.0);
        }

    }

}

void libGDHL_gf_VikingDownGiveCarryBehaviorsToGravestone (unit lp_viking, unit lp_gravestone) {
    // Implementation
    if ((UnitHasBehavior2(lp_viking, "Ultimate2Unlocked") == true)) {
        UnitBehaviorAdd(lp_gravestone, "Ultimate2Unlocked", lp_gravestone, 1);
    }

    if ((UnitHasBehavior2(lp_viking, "Ultimate1Unlocked") == true)) {
        UnitBehaviorAdd(lp_gravestone, "Ultimate1Unlocked", lp_gravestone, 1);
    }

    if ((UnitHasBehavior2(lp_viking, "LostVikingsSpinToWinCarry") == true)) {
        UnitBehaviorAdd(lp_gravestone, "LostVikingsSpinToWinCarry", lp_gravestone, 1);
    }

    if ((UnitHasBehavior2(lp_viking, "LostVikingsJumpEnabled") == true)) {
        UnitBehaviorAdd(lp_gravestone, "LostVikingsJumpEnabled", lp_gravestone, 1);
    }

    if ((UnitHasBehavior2(lp_viking, "LostVikingsNorseForceEnabled") == true)) {
        UnitBehaviorAdd(lp_gravestone, "LostVikingsNorseForceEnabled", lp_gravestone, 1);
    }

    if ((UnitHasBehavior2(lp_viking, "LostVikingsNordicAttackSquadCarry") == true)) {
        UnitBehaviorAdd(lp_gravestone, "LostVikingsNordicAttackSquadCarry", lp_gravestone, 1);
    }

    if ((UnitHasBehavior2(lp_viking, "LostVikingsVikingBriberyCarryBehavior") == true)) {
        UnitBehaviorAdd(lp_gravestone, "LostVikingsVikingBriberyCarryBehavior", lp_gravestone, 1);
    }

}

void libGDHL_gf_VikingDownStartRespawnTimer (unit lp_viking, timer lp_respawnTimer) {
    // Variable Declarations
    int lv_lVPlayer;
    unit lv_heroUnit;
    int lv_heroLevel;
    fixed lv_respawnTime;
    fixed lv_respawnTime2;

    // Variable Initialization

    // Implementation
    lv_lVPlayer = UnitGetOwner(lp_viking);
    lv_heroLevel = UnitLevel(lp_viking);
    UnitSetState(lv_heroUnit, c_unitStateStatusBar, false);
    if ((PlayerHasTalent(lv_lVPlayer, "LostVikingsMasteryTheSequel") == true)) {
        lv_respawnTime = libCore_gf_HeroDeathTime(lv_lVPlayer, lv_heroLevel);
        lv_respawnTime -= (lv_respawnTime * libGDHL_gv_data_LostVikingsTheSequelDeathTimeReduction);
    }
    else {
        lv_respawnTime = libCore_gf_HeroDeathTime(lv_lVPlayer, lv_heroLevel);
        lv_respawnTime -= (lv_respawnTime * libGDHL_gv_data_LostVikingsDeathTimeReduction);
    }
    TimerStart(lp_respawnTimer, lv_respawnTime, false, c_timeGame);
    libGame_gv_players[lv_lVPlayer].lv_timeSpentDead += lv_respawnTime;
    libGDHL_gf_LostVikingsUIStartStopRespawnTimerOverlay(lp_viking, lv_lVPlayer, false);
}

void libGDHL_gf_HeroDeathRespawnHeroforPlayer (unit lp_viking) {
    string auto33865564_val;
    unitgroup autoC8749EF3_g;
    int autoC8749EF3_u;
    string auto55027BFA_val;
    int auto45A57E28_ae;
    int auto45A57E28_ai;

    // Variable Declarations
    unit lv_itUnit;
    unit lv_cairn;
    int lv_i;
    int lv_lVPlayer;
    string lv_downedBehavior;
    point lv_rallyPoint;
    int lv_itViking;
    unitgroup lv_vikingUnitGroupIgnoringController;
    unit lv_itLivingViking;

    // Variable Initialization
    lv_vikingUnitGroupIgnoringController = UnitGroupEmpty();

    // Implementation
    lv_lVPlayer = UnitGetOwner(lp_viking);
    if ((lv_lVPlayer > libCore_gv_bALMaxEnginePlayerCount)) {
        return ;
    }

    libGame_gf_SendEventHeroRespawn(lv_lVPlayer);
    libGame_gv_players[lv_lVPlayer].lv_isDead = false;
    UnitSetState(libGame_gv_players[lv_lVPlayer].lv_heroUnit, c_unitStateStatusBar, false);
    libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_respawnPolarOffset -= 120.0;
    UnitBehaviorRemove(lp_viking, "Dead", 1);
    UnitBehaviorRemove(lp_viking, "LostVikingsVikingDowned", 1);
    UnitRevive(lp_viking);
    UnitSetPropertyFixed(lp_viking, c_unitPropLifePercent, 100.0);
    libNtve_gf_SendActorMessageToUnit(lp_viking, "Signal Respawn");
    UnitGroupAddUnitGroup(lv_vikingUnitGroupIgnoringController, libGame_gv_players[lv_lVPlayer].lv_heroUnitGroup);
    UnitGroupRemove(lv_vikingUnitGroupIgnoringController, libGame_gv_players[lv_lVPlayer].lv_heroUnit);
    if ((UnitGroupCount(lv_vikingUnitGroupIgnoringController, c_unitCountAlive) > 1)) {
        libGame_gv_players[lv_lVPlayer].lv_cameraPlayerUnitGroupToFocusOn = null;
        libGame_gf_CameraUpdateCameraForPlayer(lv_lVPlayer);
    }

    if ((libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_boat != null)) {
        UISetFrameVisible(libCore_gv_playerGroupFromPlayer[lv_lVPlayer], c_syncFrameTypeControlGroupPanel, true);
    }

    auto33865564_val = UnitGetType(lp_viking);
    if (auto33865564_val == "HeroErik") {
        lv_downedBehavior = "LostVikingsErikDowned";
        DialogControlSendAnimationEvent(libGDHL_gv_lostVikingsUI.lv_erikDeathStatusFrame, libCore_gv_playerGroupFromPlayer[lv_lVPlayer], "UnitRevived");
        DialogControlSendAnimationEvent(libGDHL_gv_lostVikingsUI.lv_allDeathStatusFrame, libCore_gv_playerGroupFromPlayer[lv_lVPlayer], "UnitRevivedPingPongStop");
        if ((UnitIsSelected(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikGravestone, lv_lVPlayer) == true)) {
            UnitSelect(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikGravestone, lv_lVPlayer, false);
            UnitSelect(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erik, lv_lVPlayer, true);
        }

        UnitControlGroupClear(lv_lVPlayer, 3);
        UnitControlGroupAddUnit(lv_lVPlayer, 3, lp_viking);
        UnitControlGroupRemoveUnit(lv_lVPlayer, 4, libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikGravestone);
        if ((PlayerHasTalent(lv_lVPlayer, "LostVikingsMasterySpyGames") == true)) {
            UnitBehaviorAdd(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erik, "SpyGamesCooldown", libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erik, 1);
        }

        UnitCreateEffectUnit(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikGravestone, "LostVikingsGravestoneCopyOrders", libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erik);
        UnitRemove(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikGravestone);
        libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikGravestone = null;
    }
    else if (auto33865564_val == "HeroBaleog") {
        lv_downedBehavior = "LostVikingsBaleogDowned";
        DialogControlSendAnimationEvent(libGDHL_gv_lostVikingsUI.lv_baleogDeathStatusFrame, libCore_gv_playerGroupFromPlayer[lv_lVPlayer], "UnitRevived");
        DialogControlSendAnimationEvent(libGDHL_gv_lostVikingsUI.lv_allDeathStatusFrame, libCore_gv_playerGroupFromPlayer[lv_lVPlayer], "UnitRevivedPingPongStop");
        if ((UnitIsSelected(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogGravestone, lv_lVPlayer) == true)) {
            UnitSelect(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogGravestone, lv_lVPlayer, false);
            UnitSelect(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleog, lv_lVPlayer, true);
        }

        UnitControlGroupClear(lv_lVPlayer, 2);
        UnitControlGroupAddUnit(lv_lVPlayer, 2, lp_viking);
        UnitControlGroupRemoveUnit(lv_lVPlayer, 4, libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogGravestone);
        UnitCreateEffectUnit(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogGravestone, "LostVikingsGravestoneCopyOrders", libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleog);
        UnitRemove(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogGravestone);
        libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogGravestone = null;
    }
    else if (auto33865564_val == "HeroOlaf") {
        lv_downedBehavior = "LostVikingsOlafDowned";
        DialogControlSendAnimationEvent(libGDHL_gv_lostVikingsUI.lv_olafDeathStatusFrame, libCore_gv_playerGroupFromPlayer[lv_lVPlayer], "UnitRevived");
        DialogControlSendAnimationEvent(libGDHL_gv_lostVikingsUI.lv_allDeathStatusFrame, libCore_gv_playerGroupFromPlayer[lv_lVPlayer], "UnitRevivedPingPongStop");
        if ((UnitIsSelected(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafGravestone, lv_lVPlayer) == true)) {
            UnitSelect(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafGravestone, lv_lVPlayer, false);
            UnitSelect(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olaf, lv_lVPlayer, true);
        }

        UnitControlGroupClear(lv_lVPlayer, 1);
        UnitControlGroupAddUnit(lv_lVPlayer, 1, lp_viking);
        UnitControlGroupRemoveUnit(lv_lVPlayer, 4, libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafGravestone);
        UnitCreateEffectUnit(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafGravestone, "LostVikingsGravestoneCopyOrders", libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olaf);
        UnitRemove(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafGravestone);
        libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafGravestone = null;
    }
    else {
    }
    autoC8749EF3_g = libGame_gv_players[lv_lVPlayer].lv_heroUnitGroup;
    autoC8749EF3_u = 1;
    for ( ; autoC8749EF3_u <= UnitGroupCount(autoC8749EF3_g, c_unitCountAll) ; autoC8749EF3_u += (lv_itUnit == UnitGroupUnit(autoC8749EF3_g, autoC8749EF3_u)) ) {
        lv_itUnit = UnitGroupUnit(autoC8749EF3_g, autoC8749EF3_u);
        UnitBehaviorRemove(lv_itUnit, lv_downedBehavior, 1);
    }
    if ((UnitBehaviorCount(lp_viking, "LostVikingsCheckpointReachedCarry") == 1)) {
        lv_cairn = UnitGroupUnit(UnitGroup("LostVikingsPlayAgainCairn", lv_lVPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
        if ((lv_cairn != null)) {
            UnitCreateEffectPoint(lp_viking, "LostVikingsPlayAgainTeleport", PointWithOffsetPolar(UnitGetPosition(lv_cairn), 2.5, 10.0));
        }

    }

    MinimapPing(libCore_gv_playerGroupFromPlayer[lv_lVPlayer], UnitGetPosition(lp_viking), 2.0, Color(100.00, 0.00, 0.00));
    auto55027BFA_val = UnitGetType(lp_viking);
    if (auto55027BFA_val == "HeroOlaf") {
        SoundPlayForPlayer(SoundLink("OlafBase_Revive", c_soundIndexAny), lv_lVPlayer, libCore_gv_playerGroupFromPlayer[lv_lVPlayer], 100.0, 0.0);
        TimerPause(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafDeathTimer, true);
    }
    else if (auto55027BFA_val == "HeroBaleog") {
        SoundPlayForPlayer(SoundLink("BaleogBase_Revive", c_soundIndexAny), lv_lVPlayer, libCore_gv_playerGroupFromPlayer[lv_lVPlayer], 100.0, 0.0);
        TimerPause(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogDeathTimer, true);
    }
    else if (auto55027BFA_val == "HeroErik") {
        SoundPlayForPlayer(SoundLink("ErikBase_Resurrected", c_soundIndexAny), lv_lVPlayer, libCore_gv_playerGroupFromPlayer[lv_lVPlayer], 100.0, 0.0);
        TimerPause(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikDeathTimer, true);
    }
    else {
    }
    libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay(false, lv_lVPlayer);
    libGDHL_gf_LostVikingsUIStartStopRespawnTimerOverlay(lp_viking, lv_lVPlayer, true);
    auto45A57E28_ae = libUIUI_gv_uI_MaxHeroGroupStatusFrames;
    auto45A57E28_ai = 1;
    lv_itViking = 1;
    for ( ; ( (auto45A57E28_ai >= 0 && lv_itViking <= auto45A57E28_ae) || (auto45A57E28_ai <= 0 && lv_itViking >= auto45A57E28_ae) ) ; lv_itViking += auto45A57E28_ai ) {
        if ((libUIUI_gv_uIHeroTrackerArrows.lv_unit[lv_itViking] == lp_viking)) {
            libNtve_gf_SetDialogItemImage(libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[lv_itViking], (CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(lp_viking), "HeroIcon", lv_lVPlayer)), libCore_gv_playerGroupFromPlayer[lv_lVPlayer]);
            break;
        }

    }
}

trigger auto_libGDHL_gf_VikingDownUpdateStatsAwardXPMakeAnnouncements_Trigger = null;
unit auto_libGDHL_gf_VikingDownUpdateStatsAwardXPMakeAnnouncements_lp_downedViking;
int auto_libGDHL_gf_VikingDownUpdateStatsAwardXPMakeAnnouncements_lp_killingPlayer;

void libGDHL_gf_VikingDownUpdateStatsAwardXPMakeAnnouncements (unit lp_downedViking, int lp_killingPlayer) {
    auto_libGDHL_gf_VikingDownUpdateStatsAwardXPMakeAnnouncements_lp_downedViking = lp_downedViking;
    auto_libGDHL_gf_VikingDownUpdateStatsAwardXPMakeAnnouncements_lp_killingPlayer = lp_killingPlayer;

    if (auto_libGDHL_gf_VikingDownUpdateStatsAwardXPMakeAnnouncements_Trigger == null) {
        auto_libGDHL_gf_VikingDownUpdateStatsAwardXPMakeAnnouncements_Trigger = TriggerCreate("auto_libGDHL_gf_VikingDownUpdateStatsAwardXPMakeAnnouncements_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_VikingDownUpdateStatsAwardXPMakeAnnouncements_Trigger, false, false);
}

bool auto_libGDHL_gf_VikingDownUpdateStatsAwardXPMakeAnnouncements_TriggerFunc (bool testConds, bool runActions) {
    unit lp_downedViking = auto_libGDHL_gf_VikingDownUpdateStatsAwardXPMakeAnnouncements_lp_downedViking;
    int lp_killingPlayer = auto_libGDHL_gf_VikingDownUpdateStatsAwardXPMakeAnnouncements_lp_killingPlayer;

    playergroup autoBFFA6DE7_g;
    int autoBFFA6DE7_p;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeamPlayer;
    int lv_computerTeam;
    int lv_deadPlayer;
    int lv_deadPlayerTeam;
    playergroup lv_killingTeamGroup;
    playergroup lv_awardGroup;
    playergroup lv_deadPlayerTeamGroup;
    playergroup lv_deadPlayerTeamGroupMinusDeadPlayer;
    playergroup lv_killingGroup;
    fixed lv_xPGranted;
    int lv_killingFaction;

    // Variable Initialization
    lv_killingTeamGroup = PlayerGroupEmpty();
    lv_awardGroup = PlayerGroupEmpty();
    lv_deadPlayerTeamGroup = PlayerGroupEmpty();
    lv_deadPlayerTeamGroupMinusDeadPlayer = PlayerGroupEmpty();
    lv_killingGroup = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_heroDeath_UpdateStats == false)) {
        return true;
    }

    lv_deadPlayer = UnitGetOwner(lp_downedViking);
    lv_deadPlayerTeam = libGame_gf_TeamNumberOfPlayer(lv_deadPlayer);
    UIAlert("YourHeroHasDied", lv_deadPlayer, StringToText(""), null);
    lv_deadPlayerTeamGroup = libGame_gf_AlliedPlayerGroupOfPlayer(lv_deadPlayer);
    lv_killingTeamGroup = libGame_gf_EnemyPlayerGroupOfPlayer(lv_deadPlayer);
    lv_computerTeam = libGame_gv_teams[libGame_gf_EnemyTeamNumberOfPlayer(lv_deadPlayer)].lv_nPCPlayer;
    if ((lv_deadPlayerTeam == libGame_gv_teamOrderIndex_C)) {
        lv_killingFaction = libGame_ge_Faction_Chaos;
    }
    else {
        lv_killingFaction = libGame_ge_Faction_Order;
    }
    lv_deadPlayerTeamGroupMinusDeadPlayer = PlayerGroupCopy(lv_deadPlayerTeamGroup);
    PlayerGroupRemove(lv_deadPlayerTeamGroupMinusDeadPlayer, lv_deadPlayer);
    autoBFFA6DE7_g = lv_killingTeamGroup; 
    autoBFFA6DE7_p = 1;
    for ( ; autoBFFA6DE7_p <= PlayerGroupCount(autoBFFA6DE7_g) ; autoBFFA6DE7_p += (lv_itPlayer == PlayerGroupPlayer(autoBFFA6DE7_g, autoBFFA6DE7_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoBFFA6DE7_g, autoBFFA6DE7_p);
        if ((lv_itPlayer != libCore_gv_cOMPUTER_TeamOrder) && (lv_itPlayer != libCore_gv_cOMPUTER_TeamChaos)) {
            PlayerGroupAdd(lv_awardGroup, lv_itPlayer);
            if (((lv_itPlayer == lp_killingPlayer) || ((GameGetMissionTime() - libGame_gv_players[lv_deadPlayer].lv_lastTimeHeroWasWithinXPRadius[lv_itPlayer]) <= libCore_gv_bALHeroKillCreditTimeWindow) || (libGame_gv_players[lv_deadPlayer].lv_recentPlayerDamageReceived[lv_itPlayer] > 0.0))) {
                PlayerGroupAdd(lv_killingGroup, lv_itPlayer);
            }

        }

    }
    libGame_gf_HeroDeathAwardXP(lp_killingPlayer, lp_downedViking, lv_awardGroup, lv_killingGroup, true);
    libGame_gf_HeroDeathUpdatePlayerStats(lp_downedViking, lp_killingPlayer, lv_killingTeamGroup, lv_killingGroup);
    libGame_gf_HeroDeathDeadTeamAnnouncements(lp_downedViking, lv_deadPlayerTeamGroup, lv_killingFaction);
    libGame_gv_players[lv_deadPlayer].lv_killingSpreeCount = 0;
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_deadPlayer, "KillStreak", libGame_gv_players[lv_deadPlayer].lv_killingSpreeCount);
    return true;
}

void libGDHL_gf_HeroLostVikingsPlayAgainTeleportViking (unit lp_vikingToTeleport, point lp_locationToTeleportToo) {
    // Implementation
    if ((UnitIsAlive(lp_vikingToTeleport) == true)) {
        UnitCreateEffectPointWithSource(lp_vikingToTeleport, "LostVikingsPlayAgainTeleport", PointWithOffsetPolar(lp_locationToTeleportToo, 0.0, 0.0), c_gameCatalogAbil, "LostVikingsPlayAgain");
    }
    else {
        Wait(0.125, c_timeGame);
        UnitCreateEffectPointWithSource(lp_vikingToTeleport, "LostVikingsPlayAgainTeleport", PointWithOffsetPolar(lp_locationToTeleportToo, 0.0, 0.0), c_gameCatalogAbil, "LostVikingsPlayAgain");
    }
}

void libGDHL_gf_LostVikingsHeroConsoleUnitStatusBarsSetUnitForBars (int lp_player) {
    // Implementation
    libNtve_gf_SetDialogItemUnit(libGDHL_gv_lostVikingsUI.lv_lostVikingsOlafCastChannelBarFrame, libGDHL_gv_lostVikingsPlayer[lp_player].lv_olaf, libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_lostVikingsOlafCastChannelBarFrame, libCore_gv_playerGroupFromPlayer[lp_player], true);
    libNtve_gf_SetDialogItemUnit(libGDHL_gv_lostVikingsUI.lv_lostVikingsErikCastChannelBarFrame, libGDHL_gv_lostVikingsPlayer[lp_player].lv_erik, libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_lostVikingsErikCastChannelBarFrame, libCore_gv_playerGroupFromPlayer[lp_player], true);
    libNtve_gf_SetDialogItemUnit(libGDHL_gv_lostVikingsUI.lv_lostVikingsBaleogCastChannelBarFrame, libGDHL_gv_lostVikingsPlayer[lp_player].lv_baleog, libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_lostVikingsBaleogCastChannelBarFrame, libCore_gv_playerGroupFromPlayer[lp_player], true);
}

void libGDHL_gf_LostVikingsUISetupUIForPlayer (int lp_player) {
    // Implementation
    while (!((libNtve_gf_PlayerInCinematicMode(lp_player) == false))) {
        Wait(0.125, c_timeGame);
    }
    UISetFrameVisible(libCore_gv_playerGroupFromPlayer[lp_player], c_syncFrameTypeControlGroupPanel, true);
    DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_gameUIInventoryPanel, libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
    libNtve_gf_SetDialogItemUnit(libGDHL_gv_lostVikingsUI.lv_erikUnitStatusFrame, libGDHL_gv_lostVikingsPlayer[lp_player].lv_erik, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemUnit(libGDHL_gv_lostVikingsUI.lv_baleogUnitStatusFrame, libGDHL_gv_lostVikingsPlayer[lp_player].lv_baleog, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemUnit(libGDHL_gv_lostVikingsUI.lv_olafUnitStatusFrame, libGDHL_gv_lostVikingsPlayer[lp_player].lv_olaf, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemUnit(libGDHL_gv_lostVikingsUI.lv_lostVikingsErikBehaviorChannelBarFrame, libGDHL_gv_lostVikingsPlayer[lp_player].lv_erik, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemUnit(libGDHL_gv_lostVikingsUI.lv_lostVikingsBaleogBehaviorChannelBarFrame, libGDHL_gv_lostVikingsPlayer[lp_player].lv_baleog, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemUnit(libGDHL_gv_lostVikingsUI.lv_lostVikingsOlafBehaviorChannelBarFrame, libGDHL_gv_lostVikingsPlayer[lp_player].lv_olaf, libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "HeroUnitStatusParentFrame/BackgroundSideGlowOwner/MultiBackground", libGDHL_gv_lostVikingsPlayer[lp_player].lv_erik);
    libGDHL_gv_lostVikingsPlayer[lp_player].lv_erikSelectionIndicator = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "HeroUnitStatusParentFrame/BackgroundSideGlowOwner/MultiBackground", libGDHL_gv_lostVikingsPlayer[lp_player].lv_baleog);
    libGDHL_gv_lostVikingsPlayer[lp_player].lv_baleogSelectionIndicator = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "HeroUnitStatusParentFrame/BackgroundSideGlowOwner/MultiBackground", libGDHL_gv_lostVikingsPlayer[lp_player].lv_olaf);
    libGDHL_gv_lostVikingsPlayer[lp_player].lv_olafSelectionIndicator = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "HeroUnitStatusParentFrame/VikingIdentityFrame/SelectionStatusIcon", libGDHL_gv_lostVikingsPlayer[lp_player].lv_baleog);
    libGDHL_gv_lostVikingsPlayer[lp_player].lv_baleogIdentityImage = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "HeroUnitStatusParentFrame/VikingIdentityFrame/SelectionStatusIcon", libGDHL_gv_lostVikingsPlayer[lp_player].lv_erik);
    libGDHL_gv_lostVikingsPlayer[lp_player].lv_erikIdentityImage = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "HeroUnitStatusParentFrame/VikingIdentityFrame/SelectionStatusIcon", libGDHL_gv_lostVikingsPlayer[lp_player].lv_olaf);
    libGDHL_gv_lostVikingsPlayer[lp_player].lv_olafIdentityImage = DialogControlLastCreated();
    DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_heroStatsFrame, libCore_gv_playerGroupFromPlayer[lp_player], true);
    DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_lostVikingsIconFrame, libCore_gv_playerGroupFromPlayer[lp_player], true);
    DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_lostVikingsChannelFrame, libCore_gv_playerGroupFromPlayer[lp_player], true);
}

void libGDHL_gf_LostVikingsUIUnSetupUIForPlayer (int lp_player) {
    // Implementation
    UISetFrameVisible(libCore_gv_playerGroupFromPlayer[lp_player], c_syncFrameTypeControlGroupPanel, false);
    DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsFrame, libCore_gv_playerGroupFromPlayer[lp_player], true);
    DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_gameUIInventoryPanel, libCore_gv_playerGroupFromPlayer[lp_player], true);
    libGDHL_gv_lostVikingsPlayer[lp_player].lv_erikSelectionIndicator = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsPlayer[lp_player].lv_baleogSelectionIndicator = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsPlayer[lp_player].lv_olafSelectionIndicator = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsPlayer[lp_player].lv_erikIdentityImage = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsPlayer[lp_player].lv_baleogIdentityImage = c_invalidDialogControlId;
    libGDHL_gv_lostVikingsPlayer[lp_player].lv_olafIdentityImage = c_invalidDialogControlId;
    DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_heroStatsFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_lostVikingsIconFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_lostVikingsChannelFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
}

void libGDHL_gf_LostVikingsUIUpdateUIStateForSingleViking (int lp_player, unit lp_viking, int lp_state) {
    int auto738A04F1_val;
    string auto1B1D9AB8_val;

    // Variable Declarations
    string lv_vikingUnitType;
    string lv_heroConsoleFontStyle;
    bool lv_downedLabelVisible;
    text lv_downedLabelText;
    bool lv_hPLabelVisible;
    bool lv_deadBoolean;
    color lv_overheadSelectionStatusColor;
    fixed lv_respawnTimer;
    fixed lv_animationSpeed;

    // Variable Initialization
    lv_downedLabelVisible = true;
    lv_hPLabelVisible = true;
    lv_overheadSelectionStatusColor = Color(0,0,0);

    // Implementation
    lv_vikingUnitType = UnitGetType(lp_viking);
    lv_downedLabelText = StringExternal("Param/Value/lib_GDHL_EE23203C");
    auto738A04F1_val = lp_state;
    if (auto738A04F1_val == libGDHL_ge_LostVikingsUIState_None) {
        lv_heroConsoleFontStyle = "Storm_VitalsLabel_R_Small";
        lv_downedLabelVisible = false;
        lv_hPLabelVisible = true;
        lv_overheadSelectionStatusColor = Color(33.33, 32.55, 78.43);
        lv_deadBoolean = false;
    }
    else if (auto738A04F1_val == libGDHL_ge_LostVikingsUIState_Downed) {
        lv_heroConsoleFontStyle = "Storm_VitalsLabel_R_Small_Downed";
        lv_downedLabelVisible = true;
        lv_hPLabelVisible = false;
        lv_overheadSelectionStatusColor = Color(33.33, 32.55, 78.43);
        lv_deadBoolean = true;
    }
    else if (auto738A04F1_val == libGDHL_ge_LostVikingsUIState_Selected) {
        lv_heroConsoleFontStyle = "Storm_VitalsLabel_R_Small_Selected";
        lv_downedLabelVisible = false;
        lv_hPLabelVisible = true;
        lv_overheadSelectionStatusColor = Color(100.00, 100.00, 100.00);
        lv_deadBoolean = false;
    }
    else {
    }
    auto1B1D9AB8_val = lv_vikingUnitType;
    if (auto1B1D9AB8_val == "HeroErik") {
        libNtve_gf_SetDialogItemStyle(libGDHL_gv_lostVikingsUI.lv_erikHPLabel, lv_heroConsoleFontStyle, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemStyle(libGDHL_gv_lostVikingsUI.lv_erikNameLabel, lv_heroConsoleFontStyle, libCore_gv_playerGroupFromPlayer[lp_player]);
        TextExpressionSetToken("Param/Expression/lib_GDHL_A73772DD", "A", lv_downedLabelText);
        TextExpressionSetToken("Param/Expression/lib_GDHL_A73772DD", "B", FixedToText(TimerGetRemaining(libGDHL_gv_lostVikingsPlayer[lp_player].lv_erikDeathTimer), 0));
        libNtve_gf_SetDialogItemText(libGDHL_gv_lostVikingsUI.lv_erikDownedLabel, TextExpressionAssemble("Param/Expression/lib_GDHL_A73772DD"), libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_erikDownedLabel, libCore_gv_playerGroupFromPlayer[lp_player], lv_downedLabelVisible);
        DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_erikDeadImage, libCore_gv_playerGroupFromPlayer[lp_player], lv_downedLabelVisible);
        DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_erikUnselectedIconImage, libCore_gv_playerGroupFromPlayer[lp_player], lv_hPLabelVisible);
        DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_erikHPLabel, libCore_gv_playerGroupFromPlayer[lp_player], lv_hPLabelVisible);
        DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_erikUnitStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], lv_hPLabelVisible);
        if ((libGDHL_gv_lostVikingsPlayer[lp_player].lv_erikSelectionIndicator != c_invalidDialogControlId)) {
            libNtve_gf_SetDialogItemColor(libGDHL_gv_lostVikingsPlayer[lp_player].lv_erikSelectionIndicator, lv_overheadSelectionStatusColor, libCore_gv_playerGroupFromPlayer[lp_player]);
        }

        if ((libGDHL_gv_lostVikingsPlayer[lp_player].lv_erikIdentityImage != c_invalidDialogControlId)) {
            if ((lp_state == libGDHL_ge_LostVikingsUIState_Selected)) {
                libNtve_gf_SetDialogItemImage(libGDHL_gv_lostVikingsPlayer[lp_player].lv_erikIdentityImage, "@UI/VikingsErikIconSelected", libCore_gv_playerGroupFromPlayer[lp_player]);
                DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_erikSelectedIconImage, libCore_gv_playerGroupFromPlayer[lp_player], true);
                DialogControlSendAnimationEvent(libGDHL_gv_lostVikingsUI.lv_erikDeathStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], "UnitRevivedPingPongStop");
            }
            else {
                libNtve_gf_SetDialogItemImage(libGDHL_gv_lostVikingsPlayer[lp_player].lv_erikIdentityImage, "@UI/VikingsErikIconDeselected", libCore_gv_playerGroupFromPlayer[lp_player]);
                DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_erikSelectedIconImage, libCore_gv_playerGroupFromPlayer[lp_player], false);
            }
        }

    }
    else if (auto1B1D9AB8_val == "HeroBaleog") {
        libNtve_gf_SetDialogItemStyle(libGDHL_gv_lostVikingsUI.lv_baleogHPLabel, lv_heroConsoleFontStyle, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemStyle(libGDHL_gv_lostVikingsUI.lv_baleogNameLabel, lv_heroConsoleFontStyle, libCore_gv_playerGroupFromPlayer[lp_player]);
        TextExpressionSetToken("Param/Expression/lib_GDHL_5D760E1B", "A", lv_downedLabelText);
        TextExpressionSetToken("Param/Expression/lib_GDHL_5D760E1B", "B", FixedToText(TimerGetRemaining(libGDHL_gv_lostVikingsPlayer[lp_player].lv_baleogDeathTimer), 0));
        libNtve_gf_SetDialogItemText(libGDHL_gv_lostVikingsUI.lv_baleogDownedLabel, TextExpressionAssemble("Param/Expression/lib_GDHL_5D760E1B"), libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_baleogDownedLabel, libCore_gv_playerGroupFromPlayer[lp_player], lv_downedLabelVisible);
        DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_baleogDeadImage, libCore_gv_playerGroupFromPlayer[lp_player], lv_downedLabelVisible);
        DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_baleogUnselectedIconImage, libCore_gv_playerGroupFromPlayer[lp_player], lv_hPLabelVisible);
        DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_baleogHPLabel, libCore_gv_playerGroupFromPlayer[lp_player], lv_hPLabelVisible);
        DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_baleogUnitStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], lv_hPLabelVisible);
        if ((libGDHL_gv_lostVikingsPlayer[lp_player].lv_baleogSelectionIndicator != c_invalidDialogControlId)) {
            libNtve_gf_SetDialogItemColor(libGDHL_gv_lostVikingsPlayer[lp_player].lv_baleogSelectionIndicator, lv_overheadSelectionStatusColor, libCore_gv_playerGroupFromPlayer[lp_player]);
        }

        if ((libGDHL_gv_lostVikingsPlayer[lp_player].lv_baleogIdentityImage != c_invalidDialogControlId)) {
            if ((lp_state == libGDHL_ge_LostVikingsUIState_Selected)) {
                libNtve_gf_SetDialogItemImage(libGDHL_gv_lostVikingsPlayer[lp_player].lv_baleogIdentityImage, "@UI/VikingsBaleogIconSelected", libCore_gv_playerGroupFromPlayer[lp_player]);
                DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_baleogSelectedIconImage, libCore_gv_playerGroupFromPlayer[lp_player], true);
                DialogControlSendAnimationEvent(libGDHL_gv_lostVikingsUI.lv_baleogDeathStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], "UnitRevivedPingPongStop");
            }
            else {
                libNtve_gf_SetDialogItemImage(libGDHL_gv_lostVikingsPlayer[lp_player].lv_baleogIdentityImage, "@UI/VikingsBaleogIconDeselected", libCore_gv_playerGroupFromPlayer[lp_player]);
                DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_baleogSelectedIconImage, libCore_gv_playerGroupFromPlayer[lp_player], false);
            }
        }

    }
    else if (auto1B1D9AB8_val == "HeroOlaf") {
        libNtve_gf_SetDialogItemStyle(libGDHL_gv_lostVikingsUI.lv_olafHPLabel, lv_heroConsoleFontStyle, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemStyle(libGDHL_gv_lostVikingsUI.lv_olafNameLabel, lv_heroConsoleFontStyle, libCore_gv_playerGroupFromPlayer[lp_player]);
        TextExpressionSetToken("Param/Expression/lib_GDHL_823C7595", "A", lv_downedLabelText);
        TextExpressionSetToken("Param/Expression/lib_GDHL_823C7595", "B", FixedToText(TimerGetRemaining(libGDHL_gv_lostVikingsPlayer[lp_player].lv_olafDeathTimer), 0));
        libNtve_gf_SetDialogItemText(libGDHL_gv_lostVikingsUI.lv_olafDownedLabel, TextExpressionAssemble("Param/Expression/lib_GDHL_823C7595"), libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_olafDownedLabel, libCore_gv_playerGroupFromPlayer[lp_player], lv_downedLabelVisible);
        DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_olafDeadImage, libCore_gv_playerGroupFromPlayer[lp_player], lv_downedLabelVisible);
        DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_olafUnselectedIconImage, libCore_gv_playerGroupFromPlayer[lp_player], lv_hPLabelVisible);
        DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_olafHPLabel, libCore_gv_playerGroupFromPlayer[lp_player], lv_hPLabelVisible);
        DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_olafUnitStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], lv_hPLabelVisible);
        if ((libGDHL_gv_lostVikingsPlayer[lp_player].lv_olafSelectionIndicator != c_invalidDialogControlId)) {
            libNtve_gf_SetDialogItemColor(libGDHL_gv_lostVikingsPlayer[lp_player].lv_olafSelectionIndicator, lv_overheadSelectionStatusColor, libCore_gv_playerGroupFromPlayer[lp_player]);
        }

        if ((libGDHL_gv_lostVikingsPlayer[lp_player].lv_olafIdentityImage != c_invalidDialogControlId)) {
            if ((lp_state == libGDHL_ge_LostVikingsUIState_Selected)) {
                libNtve_gf_SetDialogItemImage(libGDHL_gv_lostVikingsPlayer[lp_player].lv_olafIdentityImage, "@UI/VikingsOlafIconSelected", libCore_gv_playerGroupFromPlayer[lp_player]);
                DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_olafSelectedIconImage, libCore_gv_playerGroupFromPlayer[lp_player], true);
                DialogControlSendAnimationEvent(libGDHL_gv_lostVikingsUI.lv_olafDeathStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], "UnitRevivedPingPongStop");
            }
            else {
                libNtve_gf_SetDialogItemImage(libGDHL_gv_lostVikingsPlayer[lp_player].lv_olafIdentityImage, "@UI/VikingsOlafIconDeselected", libCore_gv_playerGroupFromPlayer[lp_player]);
                DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_olafSelectedIconImage, libCore_gv_playerGroupFromPlayer[lp_player], false);
            }
        }

    }
    else {
    }
}

void libGDHL_gf_LostVikingsUIUpdateAllSelectionDownedStatusForPlayer (int lp_player) {
    unitgroup autoC650A904_g;
    int autoC650A904_u;

    // Variable Declarations
    unit lv_itUnit;
    unitgroup lv_selectedUnits;
    int lv_vikingUIState;

    // Variable Initialization
    lv_selectedUnits = UnitGroupEmpty();

    // Implementation
    lv_selectedUnits = UnitGroupSelected(lp_player);
    autoC650A904_g = libGame_gv_players[lp_player].lv_heroUnitGroup;
    autoC650A904_u = 1;
    for ( ; autoC650A904_u <= UnitGroupCount(autoC650A904_g, c_unitCountAll) ; autoC650A904_u += (lv_itUnit == UnitGroupUnit(autoC650A904_g, autoC650A904_u)) ) {
        lv_itUnit = UnitGroupUnit(autoC650A904_g, autoC650A904_u);
        lv_vikingUIState = libGDHL_ge_LostVikingsUIState_None;
        if ((libNtve_gf_UnitGroupIsDead(libNtve_gf_ConvertUnitToUnitGroup(lv_itUnit)) == true)) {
            lv_vikingUIState = libGDHL_ge_LostVikingsUIState_Downed;
        }
        else {
            if ((UnitGroupHasUnit(lv_selectedUnits, lv_itUnit) == true)) {
                lv_vikingUIState = libGDHL_ge_LostVikingsUIState_Selected;
            }

        }
        libGDHL_gf_LostVikingsUIUpdateUIStateForSingleViking(lp_player, lv_itUnit, lv_vikingUIState);
    }
}

void libGDHL_gf_LostVikingsUIStartStopRespawnTimerOverlay (unit lp_unit, int lp_player, bool lp_alive) {
    bool auto43390044_val;
    string auto76A929F1_val;
    string autoE2170B31_val;

    // Variable Declarations
    fixed lv_player;
    fixed lv_respawnTimer;
    fixed lv_animationSpeed;
    int lv_dialogItem;

    // Variable Initialization
    lv_dialogItem = c_invalidDialogControlId;

    // Implementation
    auto43390044_val = lp_alive;
    if (auto43390044_val == true) {
        auto76A929F1_val = UnitGetType(lp_unit);
        if (auto76A929F1_val == "HeroErik") {
            DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_lostErikDeadImageOverlay, libCore_gv_playerGroupFromPlayer[lp_player], false);
        }
        else if (auto76A929F1_val == "HeroBaleog") {
            DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_lostBaleogDeadImageOverlay, libCore_gv_playerGroupFromPlayer[lp_player], false);
        }
        else if (auto76A929F1_val == "HeroOlaf") {
            DialogControlSetVisible(libGDHL_gv_lostVikingsUI.lv_lostOlafDeadImageOverlay, libCore_gv_playerGroupFromPlayer[lp_player], false);
        }
        else {
        }
    }
    else if (auto43390044_val == false) {
        autoE2170B31_val = UnitGetType(lp_unit);
        if (autoE2170B31_val == "HeroErik") {
            lv_dialogItem = libGDHL_gv_lostVikingsUI.lv_lostErikDeadImageOverlay;
            lv_respawnTimer = TimerGetRemaining(libGDHL_gv_lostVikingsPlayer[lp_player].lv_erikDeathTimer);
        }
        else if (autoE2170B31_val == "HeroBaleog") {
            lv_dialogItem = libGDHL_gv_lostVikingsUI.lv_lostBaleogDeadImageOverlay;
            lv_respawnTimer = TimerGetRemaining(libGDHL_gv_lostVikingsPlayer[lp_player].lv_baleogDeathTimer);
        }
        else if (autoE2170B31_val == "HeroOlaf") {
            lv_dialogItem = libGDHL_gv_lostVikingsUI.lv_lostOlafDeadImageOverlay;
            lv_respawnTimer = TimerGetRemaining(libGDHL_gv_lostVikingsPlayer[lp_player].lv_olafDeathTimer);
        }
        else {
        }
        DialogControlSetVisible(lv_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], true);
        DialogControlSendAnimationEvent(lv_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "Start");
        if ((lv_respawnTimer > 0.0)) {
            lv_animationSpeed = (100/lv_respawnTimer);
            DialogControlSetAnimationSpeed(lv_dialogItem, libCore_gv_playerGroupFromPlayer[lp_player], "ShrinkOverlay", lv_animationSpeed);
        }

    }
    else {
    }
}

void libGDHL_gf_LostVikingsConsoleUnitStatusBarsSetChannelBehaviorForBehaviorChannelBar (int lp_player, string lp_behavior, unit lp_unit) {
    string auto18D83A0D_val;
    string auto6E46D1E8_val;

    // Variable Declarations
    unit lv_heroUnit;
    int lv_behaviorBar;
    int lv_behaviorDuration;
    int lv_behaviorLabel;
    string lv_behavior;

    // Variable Initialization
    lv_behaviorBar = c_invalidDialogControlId;
    lv_behaviorDuration = c_invalidDialogControlId;
    lv_behaviorLabel = c_invalidDialogControlId;

    // Implementation
    auto18D83A0D_val = UnitGetType(lp_unit);
    if (auto18D83A0D_val == "HeroOlaf") {
        lv_behaviorBar = libGDHL_gv_lostVikingsUI.lv_lostVikingsOlafBehaviorChannelBarFrame;
        lv_behaviorLabel = libGDHL_gv_lostVikingsUI.lv_lostVikingsOlafBehaviorChannelBarBehaviorLabel;
        lv_behaviorDuration = libGDHL_gv_lostVikingsUI.lv_lostVikingsOlafBehaviorChannelBarDurationBar;
        lv_behavior = libGDHL_gv_lostVikingsUnitStatusBars_BehaviorChannelBarCurrentBehaviorForOlaf[lp_player];
    }
    else if (auto18D83A0D_val == "HeroBaleog") {
        lv_behaviorBar = libGDHL_gv_lostVikingsUI.lv_lostVikingsBaleogBehaviorChannelBarFrame;
        lv_behaviorLabel = libGDHL_gv_lostVikingsUI.lv_lostVikingsBaleogBehaviorChannelBarBehaviorLabel;
        lv_behaviorDuration = libGDHL_gv_lostVikingsUI.lv_lostVikingsBaleogBehaviorChannelBarDurationBar;
        lv_behavior = libGDHL_gv_lostVikingsUnitStatusBars_BehaviorChannelBarCurrentBehaviorForBaleog[lp_player];
    }
    else if (auto18D83A0D_val == "HeroErik") {
        lv_behaviorBar = libGDHL_gv_lostVikingsUI.lv_lostVikingsErikBehaviorChannelBarFrame;
        lv_behaviorLabel = libGDHL_gv_lostVikingsUI.lv_lostVikingsErikBehaviorChannelBarBehaviorLabel;
        lv_behaviorDuration = libGDHL_gv_lostVikingsUI.lv_lostVikingsErikBehaviorChannelBarDurationBar;
        lv_behavior = libGDHL_gv_lostVikingsUnitStatusBars_BehaviorChannelBarCurrentBehaviorForErik[lp_player];
    }
    else {
    }
    if ((UnitBehaviorDuration(lp_unit, lp_behavior) >= UnitBehaviorDuration(lp_unit, lv_behavior))) {
        auto6E46D1E8_val = UnitGetType(lp_unit);
        if (auto6E46D1E8_val == "HeroOlaf") {
            libGDHL_gv_lostVikingsUnitStatusBars_BehaviorChannelBarCurrentBehaviorForOlaf[lp_player] = lp_behavior;
        }
        else if (auto6E46D1E8_val == "HeroBaleog") {
            libGDHL_gv_lostVikingsUnitStatusBars_BehaviorChannelBarCurrentBehaviorForBaleog[lp_player] = lp_behavior;
        }
        else if (auto6E46D1E8_val == "HeroErik") {
            libGDHL_gv_lostVikingsUnitStatusBars_BehaviorChannelBarCurrentBehaviorForErik[lp_player] = lp_behavior;
        }
        else {
        }
        libNtve_gf_SetDialogItemBehavior(lv_behaviorDuration, lp_behavior, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(lv_behaviorLabel, StringExternal(CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_player]);
    }

    DialogControlSetVisible(lv_behaviorBar, libCore_gv_playerGroupFromPlayer[lp_player], true);
}

void libGDHL_gf_HeroMalfurionIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroMalfurionTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroMalfurionTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroMalfurionTwilightDreamSilenceTarget, true);
        TriggerEnable(libGDHL_gt_HeroMalfurionTwilightDreamSilenceEnd, true);
        TriggerEnable(libGDHL_gt_HeroMalfurionInnervateCDR, true);
    }

}

void libGDHL_gf_HeroMalfurionDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroMalfurionTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroMalfurionTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroMalfurionTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroMalfurionTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroMalfurionTwilightDreamSilenceTarget, false);
        TriggerEnable(libGDHL_gt_HeroMalfurionTwilightDreamSilenceEnd, false);
        TriggerEnable(libGDHL_gt_HeroMalfurionInnervateCDR, false);
    }

}

void libGDHL_gf_HeroMedicIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroMedicTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroMedicTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroMedicAIDisplacementGrenadeThink, true);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipSetDropoffLocation, true);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipEnRouteOrders, true);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropOffReselectionForMedic, true);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipDeathCleanup, true);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacTextTags, true);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipSelection, true);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipPrepareWarning, true);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipDropoffSelection, true);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipTransportEvent, true);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipTransportExitEvent, true);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipOverlayOn, true);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipOverlayOff, true);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipCountdownSound, true);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacBeingBoarded, true);
        TriggerEnable(libGDHL_gt_HeroMedicHealingBeamLookAt, true);
        TriggerEnable(libGDHL_gt_HeroMedicHearthCleanup, true);
        TriggerEnable(libGDHL_gt_HeroMedicHealingBeamAllyRangeVisibility, true);
        TriggerEnable(libGDHL_gt_HeroMedicSafeguardDamageReductionBehaviorResponses, true);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacGameOverHide, true);
    }

}

void libGDHL_gf_HeroMedicDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroMedicTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroMedicTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroMedicTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroMedicTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroMedicAIDisplacementGrenadeThink, false);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipSetDropoffLocation, false);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipEnRouteOrders, false);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropOffReselectionForMedic, false);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipDeathCleanup, false);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacTextTags, false);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipSelection, false);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipPrepareWarning, false);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipDropoffSelection, false);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipTransportEvent, false);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipTransportExitEvent, false);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipOverlayOn, false);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipOverlayOff, false);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipCountdownSound, false);
        TriggerEnable(libGDHL_gt_HeroMedicMedivacBeingBoarded, false);
        TriggerEnable(libGDHL_gt_HeroMedicHealingBeamLookAt, false);
        TriggerEnable(libGDHL_gt_HeroMedicHearthCleanup, false);
        TriggerEnable(libGDHL_gt_HeroMedicHealingBeamAllyRangeVisibility, false);
        TriggerEnable(libGDHL_gt_HeroMedicSafeguardDamageReductionBehaviorResponses, false);
    }

}

void libGDHL_gf_UIHeroSpecificStatusFrameShowHideMedivacUI (bool lp_showHide, int lp_player) {
    // Implementation
    if ((lp_showHide == true)) {
        DialogControlSendAnimationEvent(libGDHL_gv_medicUI.lv_medivacAlert, libCore_gv_playerGroupFromPlayer[lp_player], "Begin");
    }
    else {
        DialogControlSendAnimationEvent(libGDHL_gv_medicUI.lv_medivacAlert, libCore_gv_playerGroupFromPlayer[lp_player], "End");
    }
}

void libGDHL_gf_HeroMonkIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroMonkTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroMonkTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroMonkSixthSenseProc, true);
        TriggerEnable(libGDHL_gt_MonkDivinePalmSetLife, true);
        TriggerEnable(libGDHL_gt_HeroMonkDivinePalmOverlayOn, true);
        TriggerEnable(libGDHL_gt_HeroMonkDivinePalmOverlayOff, true);
        TriggerEnable(libGDHL_gt_HeroMonkSevenSidedStrikeTakeFacing, true);
        TriggerEnable(libGDHL_gt_HeroMonkSevenSidedStrikeFinishSetFacing, true);
    }

}

void libGDHL_gf_HeroMonkDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroMonkTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroMonkTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroMonkTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroMonkTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroMonkSixthSenseProc, false);
        TriggerEnable(libGDHL_gt_MonkDivinePalmSetLife, false);
        TriggerEnable(libGDHL_gt_HeroMonkDivinePalmOverlayOn, false);
        TriggerEnable(libGDHL_gt_HeroMonkDivinePalmOverlayOff, false);
        TriggerEnable(libGDHL_gt_HeroMonkSevenSidedStrikeTakeFacing, false);
        TriggerEnable(libGDHL_gt_HeroMonkSevenSidedStrikeFinishSetFacing, false);
    }

}

void libGDHL_gf_HeroMuradinIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroMuradinTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroMuradinTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroMuradinDwarfToss, true);
        TriggerEnable(libGDHL_gt_HeroMuradinHaymaker, true);
        TriggerEnable(libGDHL_gt_HeroMuradinAvatarApplyHealthBuff, true);
    }

}

void libGDHL_gf_HeroMuradinDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroMuradinTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroMuradinTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroMuradinTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroMuradinTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroMuradinDwarfToss, false);
        TriggerEnable(libGDHL_gt_HeroMuradinHaymaker, false);
        TriggerEnable(libGDHL_gt_HeroMuradinAvatarApplyHealthBuff, false);
    }

}

void libGDHL_gf_HeroMurkyIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroMurkyTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroMurkyTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroMurkyMurkyEggDies, true);
        TriggerEnable(libGDHL_gt_HeroMurkyMurkyDies, true);
        TriggerEnable(libGDHL_gt_HeroMurkyReviveWhileEggIsAlive, true);
        TriggerEnable(libGDHL_gt_HeroMurkyCreateEggOnSpawn, true);
        TriggerEnable(libGDHL_gt_HeroMurkyFishEyeDynamicApplication, true);
        TriggerEnable(libGDHL_gt_HeroMurkyRespawnEggCreated, true);
        TriggerEnable(libGDHL_gt_HeroMurkyAssaultEggBuffChanges, true);
        TriggerEnable(libGDHL_gt_HeroMurkyEggHuntUnitGroupController, true);
        TriggerEnable(libGDHL_gt_HeroMurkyAFishyDealChargeCountProc, true);
    }

}

void libGDHL_gf_HeroMurkyDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroMurkyTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroMurkyTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroMurkyTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroMurkyTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroMurkyMurkyEggDies, false);
        TriggerEnable(libGDHL_gt_HeroMurkyMurkyDies, false);
        TriggerEnable(libGDHL_gt_HeroMurkyReviveWhileEggIsAlive, false);
        TriggerEnable(libGDHL_gt_HeroMurkyCreateEggOnSpawn, false);
        TriggerEnable(libGDHL_gt_HeroMurkyFishEyeDynamicApplication, false);
        TriggerEnable(libGDHL_gt_HeroMurkyRespawnEggCreated, false);
        TriggerEnable(libGDHL_gt_HeroMurkyAssaultEggBuffChanges, false);
        TriggerEnable(libGDHL_gt_HeroMurkyEggHuntUnitGroupController, false);
        TriggerEnable(libGDHL_gt_HeroMurkyAFishyDealChargeCountProc, false);
    }

}

void libGDHL_gf_UIHeroSpecificStatusFrameUpdateMurkyEggStatus (int lp_player) {
    // Implementation
    DialogControlSetVisible(libGDHL_gv_murkyUI.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], true);
    if ((libGame_gv_heroDeathMurkyRespawnEggs[lp_player] != null)) {
        DialogControlSetVisible(libGDHL_gv_murkyUI.lv_eggOk, libCore_gv_playerGroupFromPlayer[lp_player], true);
        DialogControlSetVisible(libGDHL_gv_murkyUI.lv_eggBroken, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    else {
        DialogControlSetVisible(libGDHL_gv_murkyUI.lv_eggBroken, libCore_gv_playerGroupFromPlayer[lp_player], true);
        DialogControlSetVisible(libGDHL_gv_murkyUI.lv_eggOk, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
}

void libGDHL_gf_HeroMurkyCreateEggAtBaseforPlayer (int lp_player) {
    // Variable Declarations
    unit lv_murkyEgg;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lp_player)].lv_core != null)) {
        UnitCreate(1, "MurkyRespawnEgg", 0, lp_player, libNtve_gf_PointOffsetTowardsPoint(libGame_gv_players[lp_player].lv_spawnPoint, -1.5, UnitGetPosition(libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lp_player)].lv_core)), 270.0);
    }
    else {
        UnitCreate(1, "MurkyRespawnEgg", 0, lp_player, libGame_gv_players[lp_player].lv_spawnPoint, 270.0);
    }
    lv_murkyEgg = UnitLastCreated();
    UnitCreateEffectUnit(libGame_gv_players[lp_player].lv_heroUnit, "MurkySpawnEggApplyFishEyeTalentHealthBuff", lv_murkyEgg);
    libGame_gv_heroDeathMurkyRespawnEggs[lp_player] = lv_murkyEgg;
    libGame_gv_heroDeathMurkyRespawnEggPoint[lp_player] = UnitGetPosition(lv_murkyEgg);
    libGDHL_gf_UIHeroSpecificStatusFrameUpdateMurkyEggStatus(lp_player);
}

void libGDHL_gf_HeroMurkyRespawnLogicCheck (int lp_player) {
    // Variable Declarations
    unit lv_murky;

    // Variable Initialization

    // Implementation
    lv_murky = libGame_gv_players[lp_player].lv_heroUnit;
    if ((((libGame_gv_heroDeathMurkyRespawnEggDeathTimeStamp[lp_player] >= (TimerGetElapsed(libGame_gv_gameTimer) - 0.0625)) && (libGame_gv_heroDeathMurkyRespawnEggDeathTimeStamp[lp_player] <= (TimerGetElapsed(libGame_gv_gameTimer) + 0.0625))) || ((libGame_gv_heroDeathMurkyRespawnEggs[lp_player] != null) && (UnitIsAlive(libGame_gv_heroDeathMurkyRespawnEggs[lp_player]) == true)))) {
        UnitBehaviorRemove(lv_murky, "HomeShieldProtection", 1);
        UnitSetPosition(lv_murky, libGame_gv_heroDeathMurkyRespawnEggPoint[lp_player], false);
        if ((PlayerHasTalent(lp_player, "MurkyEggHunt") == true)) {
            UnitBehaviorAdd(lv_murky, "MurkyEggHuntCloak", lv_murky, 1);
        }

        if ((PlayerHasTalent(lp_player, "MurkyEggShell") == true)) {
            UnitCreateEffectUnit(lv_murky, "MurkyEggShellProcSet", lv_murky);
        }

        if ((PlayerHasTalent(lp_player, "MurkyFishEye") == true)) {
            UnitCreateEffectUnit(lv_murky, "MurkyFishEyeApplyMountSpeedBuff", lv_murky);
        }

    }
    else {
        if ((libGame_gv_heroDeathMurkyRespawnEggs[lp_player] == null)) {
            libGDHL_gf_HeroMurkyCreateEggAtBaseforPlayer(lp_player);
        }

    }
    UnitModifyCooldown(lv_murky, "Abil/MurkyRespawnEgg", -60.0, c_cooldownOperationAdd);
}

void libGDHL_gf_HeroNecromancerIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroNecromancerTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroNecromancerTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroNecromancerSkeletonMasteryProc, true);
        TriggerEnable(libGDHL_gt_HeroNecromancerSkeletonMasterySpawned, true);
        TriggerEnable(libGDHL_gt_HeroNecromancerSkeletonMasteryMaxCountProc, true);
        TriggerEnable(libGDHL_gt_HeroNecromancerJailorsHooktoAI, true);
        TriggerEnable(libGDHL_gt_HeroNecromancerTrackMortalWoundsDamageReduction, true);
        TriggerEnable(libGDHL_gt_HeroNecromancerMortalWoundsDebuffController, true);
        TriggerEnable(libGDHL_gt_HeroNecromancerSpawnBoneArmorItem, true);
        TriggerEnable(libGDHL_gt_HeroNecromancerRaisedMageProc, true);
    }

}

void libGDHL_gf_HeroNecromancerDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroNecromancerTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroNecromancerTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroNecromancerTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroNecromancerTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroNecromancerSkeletonMasteryProc, false);
        TriggerEnable(libGDHL_gt_HeroNecromancerSkeletonMasterySpawned, false);
        TriggerEnable(libGDHL_gt_HeroNecromancerSkeletonMasteryMaxCountProc, false);
        TriggerEnable(libGDHL_gt_HeroNecromancerJailorsHooktoAI, false);
        TriggerEnable(libGDHL_gt_HeroNecromancerTrackMortalWoundsDamageReduction, false);
        TriggerEnable(libGDHL_gt_HeroNecromancerMortalWoundsDebuffController, false);
        TriggerEnable(libGDHL_gt_HeroNecromancerSpawnBoneArmorItem, false);
        TriggerEnable(libGDHL_gt_HeroNecromancerRaisedMageProc, false);
    }

}

void libGDHL_gf_HeroNovaIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroNovaTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroNovaTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroNovaCovertMissionTakedown, true);
        TriggerEnable(libGDHL_gt_HeroNovaCovertMissionVariables, true);
        TriggerEnable(libGDHL_gt_HeroNovaTripleTapAbilityUsed, true);
        TriggerEnable(libGDHL_gt_HeroNovaTripleTapMissiles, true);
        TriggerEnable(libGDHL_gt_HeroNovaTripleTapMissileCleanup, true);
        TriggerEnable(libGDHL_gt_HeroNovaHoloCloneSpawned, true);
        TriggerEnable(libGDHL_gt_HeroNovaHoloCloneSpawnMatchMapMechanics, true);
        TriggerEnable(libGDHL_gt_HeroNovaHoloDecoyIssueOrderAbility, true);
        TriggerEnable(libGDHL_gt_HeroNovaHoloDecoyDoubleFakeApplyIssueOrder, true);
        TriggerEnable(libGDHL_gt_HeroNovaAntiArmorShellsAttackCooldown, true);
        TriggerEnable(libGDHL_gt_HeroNovaDamageBasedDecloak, true);
    }

}

void libGDHL_gf_HeroNovaDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroNovaTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroNovaTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroNovaTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroNovaTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroNovaCovertMissionTakedown, false);
        TriggerEnable(libGDHL_gt_HeroNovaCovertMissionVariables, false);
        TriggerEnable(libGDHL_gt_HeroNovaTripleTapAbilityUsed, false);
        TriggerEnable(libGDHL_gt_HeroNovaTripleTapMissiles, false);
        TriggerEnable(libGDHL_gt_HeroNovaTripleTapMissileCleanup, false);
        TriggerEnable(libGDHL_gt_HeroNovaHoloCloneSpawned, false);
        TriggerEnable(libGDHL_gt_HeroNovaHoloCloneSpawnMatchMapMechanics, false);
        TriggerEnable(libGDHL_gt_HeroNovaHoloDecoyIssueOrderAbility, false);
        TriggerEnable(libGDHL_gt_HeroNovaHoloDecoyDoubleFakeApplyIssueOrder, false);
        TriggerEnable(libGDHL_gt_HeroNovaAntiArmorShellsAttackCooldown, false);
        TriggerEnable(libGDHL_gt_HeroNovaDamageBasedDecloak, false);
    }

}

void libGDHL_gf_HeroRaynorIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroRaynorTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroRaynorTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroRaynorRaynorsBansheeFlyIn, true);
        TriggerEnable(libGDHL_gt_HeroRaynorRaynorsBansheeFlyOut, true);
        TriggerEnable(libGDHL_gt_HeroRaynorBansheesCommand, true);
        TriggerEnable(libGDHL_gt_HeroRaynorRelentlessLeaderStunProc, true);
        TriggerEnable(libGDHL_gt_HeroRaynorACardToPlayTalentGained, true);
        TriggerEnable(libGDHL_gt_HeroRaynorPuttinOnAClinicSpecialDeathStateProc, true);
        TriggerEnable(libGDHL_gt_HeroRaynorRaiderRecruitmentAddStacksonCooldownReset, true);
    }

}

void libGDHL_gf_HeroRaynorDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroRaynorTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroRaynorTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroRaynorTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroRaynorTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroRaynorRaynorsBansheeFlyIn, false);
        TriggerEnable(libGDHL_gt_HeroRaynorRaynorsBansheeFlyOut, false);
        TriggerEnable(libGDHL_gt_HeroRaynorBansheesCommand, false);
        TriggerEnable(libGDHL_gt_HeroRaynorRelentlessLeaderStunProc, false);
        TriggerEnable(libGDHL_gt_HeroRaynorACardToPlayTalentGained, false);
        TriggerEnable(libGDHL_gt_HeroRaynorACardToPlayHeroTakedown, false);
        TriggerEnable(libGDHL_gt_HeroRaynorPuttinOnAClinicSpecialDeathStateProc, false);
        TriggerEnable(libGDHL_gt_HeroRaynorRaiderRecruitmentAddStacksonCooldownReset, false);
    }

}

void libGDHL_gf_HeroRehgarIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroRehgarTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroRehgarTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroRehgarFarseersBlessingMastery, true);
        TriggerEnable(libGDHL_gt_HeroRehgarBreakGhostWolfOnAttack, true);
        TriggerEnable(libGDHL_gt_HeroRehgarGhostWolfAfterPortToTown, true);
        TriggerEnable(libGDHL_gt_HeroRehgarGhostWolfMountingSpecialCase, true);
        TriggerEnable(libGDHL_gt_HeroRehgarTotemicProjectionTalentSaveTotem, true);
        TriggerEnable(libGDHL_gt_HeroRehgarTotemicProjectionTalentMoveTotem, true);
        TriggerEnable(libGDHL_gt_HeroRehgarTotemicProjectionResetOnRewindUse, true);
        TriggerEnable(libGDHL_gt_HeroRehgarLightningShieldRisingStormTalentInitial, true);
        TriggerEnable(libGDHL_gt_HeroRehgarLightningShieldRisingStormTalentPeriodic, true);
        TriggerEnable(libGDHL_gt_HeroRehgarTidalWavesModifyCooldown, true);
        TriggerEnable(libGDHL_gt_HeroRehgarEarthlivingEnchantHotApply, true);
    }

}

void libGDHL_gf_HeroRehgarDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroRehgarTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroRehgarTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroRehgarTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroRehgarTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroRehgarFarseersBlessingMastery, false);
        TriggerEnable(libGDHL_gt_HeroRehgarBreakGhostWolfOnAttack, false);
        TriggerEnable(libGDHL_gt_HeroRehgarGhostWolfAfterPortToTown, false);
        TriggerEnable(libGDHL_gt_HeroRehgarGhostWolfMountingSpecialCase, false);
        TriggerEnable(libGDHL_gt_HeroRehgarTotemicProjectionTalentSaveTotem, false);
        TriggerEnable(libGDHL_gt_HeroRehgarTotemicProjectionTalentMoveTotem, false);
        TriggerEnable(libGDHL_gt_HeroRehgarTotemicProjectionResetOnRewindUse, false);
        TriggerEnable(libGDHL_gt_HeroRehgarLightningShieldRisingStormTalentInitial, false);
        TriggerEnable(libGDHL_gt_HeroRehgarLightningShieldRisingStormTalentPeriodic, false);
        TriggerEnable(libGDHL_gt_HeroRehgarTidalWavesModifyCooldown, false);
        TriggerEnable(libGDHL_gt_HeroRehgarEarthlivingEnchantHotApply, false);
    }

}

void libGDHL_gf_HeroRexxarIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroRexxarTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroRexxarTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroRexxarUnleashtheBoarsCast, true);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaFixateUsed, true);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaGainsMapMechanicStack, true);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaChargeDisable, true);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaMendPetDisable, true);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaSpawn, true);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaSetPursuitTargetFromAttacks, true);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaClearPursuitTargetFromMishaFollow, true);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaSetPursuitTargetFromMishaFocus, true);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaClearPursuitTargetonUnitDeath, true);
        TriggerEnable(libGDHL_gt_HeroRexxarRexxarDies, true);
        TriggerEnable(libGDHL_gt_HeroRexxarRemoveMisha, true);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaDance, true);
        TriggerEnable(libGDHL_gt_HeroRexxarRexxarStasisStartIncludesFeignDeath, true);
        TriggerEnable(libGDHL_gt_HeroRexxarRexxarStasisEndIncludedFeignDeath, true);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaDies, true);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaGorgeEnd, true);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaTeleport, true);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaUnderworldGateUsed, true);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaVehicleUsed, true);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaVehicleDone, true);
        TriggerEnable(libGDHL_gt_HeroRexxarStuffMishaIntoTransport, true);
        TriggerEnable(libGDHL_gt_HeroRexxarKickMishaOutOfTransport, true);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaMountedBehaviorDisabled, true);
        TriggerEnable(libGDHL_gt_HeroRexxarAliveMishaGrizzledFortitude, true);
        TriggerEnable(libGDHL_gt_HeroRexxarAliveMishaEasyPrey, true);
        TriggerEnable(libGDHL_gt_HeroRexxarAliveMishaWildfireBear, true);
        TriggerEnable(libGDHL_gt_HeroRexxarAliveMishaPrimalIntimidation, true);
        TriggerEnable(libGDHL_gt_HeroRexxarAliveMishaHunterGatherer, true);
        TriggerEnable(libGDHL_gt_HeroRexxarThrilloftheHuntProc, true);
        TriggerEnable(libGDHL_gt_HeroRexxarHardenedSkin, true);
        TriggerEnable(libGDHL_gt_HeroRexxarBestialWrathSpiritBondBearNecessitiesHealProc, true);
        TriggerEnable(libGDHL_gt_HeroRexxarChargeCast, true);
        TriggerEnable(libGDHL_gt_HeroRexxarHunterGathererController, true);
        TriggerEnable(libGDHL_gt_HeroRexxarFeignDeathOverlayOn, true);
        TriggerEnable(libGDHL_gt_HeroRexxarFeignDeathOverlayOff, true);
        TriggerEnable(libGDHL_gt_HeroRexxarAliveMishaAnimalHusbandry, true);
        TriggerEnable(libGDHL_gt_HeroRexxarAliveMishaDireBeast, true);
    }

}

void libGDHL_gf_HeroRexxarDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroRexxarTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroRexxarTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroRexxarTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroRexxarTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroRexxarUnleashtheBoarsCast, false);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaFixateUsed, false);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaGainsMapMechanicStack, false);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaChargeDisable, false);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaMendPetDisable, false);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaSpawn, false);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaSetPursuitTargetFromAttacks, false);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaClearPursuitTargetFromMishaFollow, false);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaSetPursuitTargetFromMishaFocus, false);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaClearPursuitTargetonUnitDeath, false);
        TriggerEnable(libGDHL_gt_HeroRexxarRexxarDies, false);
        TriggerEnable(libGDHL_gt_HeroRexxarRemoveMisha, false);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaDance, false);
        TriggerEnable(libGDHL_gt_HeroRexxarRexxarStasisStartIncludesFeignDeath, false);
        TriggerEnable(libGDHL_gt_HeroRexxarRexxarStasisEndIncludedFeignDeath, false);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaDies, false);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaGorgeEnd, false);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaTeleport, false);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaUnderworldGateUsed, false);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaVehicleUsed, false);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaVehicleDone, false);
        TriggerEnable(libGDHL_gt_HeroRexxarStuffMishaIntoTransport, false);
        TriggerEnable(libGDHL_gt_HeroRexxarKickMishaOutOfTransport, false);
        TriggerEnable(libGDHL_gt_HeroRexxarMishaMountedBehaviorDisabled, false);
        TriggerEnable(libGDHL_gt_HeroRexxarAliveMishaGrizzledFortitude, false);
        TriggerEnable(libGDHL_gt_HeroRexxarAliveMishaEasyPrey, false);
        TriggerEnable(libGDHL_gt_HeroRexxarAliveMishaWildfireBear, false);
        TriggerEnable(libGDHL_gt_HeroRexxarAliveMishaPrimalIntimidation, false);
        TriggerEnable(libGDHL_gt_HeroRexxarAliveMishaHunterGatherer, false);
        TriggerEnable(libGDHL_gt_HeroRexxarThrilloftheHuntProc, false);
        TriggerEnable(libGDHL_gt_HeroRexxarHardenedSkin, false);
        TriggerEnable(libGDHL_gt_HeroRexxarBestialWrathSpiritBondBearNecessitiesHealProc, false);
        TriggerEnable(libGDHL_gt_HeroRexxarChargeCast, false);
        TriggerEnable(libGDHL_gt_HeroRexxarHunterGathererController, false);
        TriggerEnable(libGDHL_gt_HeroRexxarFeignDeathOverlayOn, false);
        TriggerEnable(libGDHL_gt_HeroRexxarFeignDeathOverlayOff, false);
        TriggerEnable(libGDHL_gt_HeroRexxarAliveMishaAnimalHusbandry, false);
        TriggerEnable(libGDHL_gt_HeroRexxarAliveMishaDireBeast, false);
    }

}

void libGDHL_gf_RexxarUISetup (int lp_rexxarPlayer, unit lp_mishaUnit) {
    // Implementation
    libNtve_gf_SetDialogItemUnit(libGDHL_gv_rexxarUI.lv_rexxarMishaUnitStatus, lp_mishaUnit, libCore_gv_playerGroupFromPlayer[lp_rexxarPlayer]);
    libNtve_gf_SetDialogItemTooltip(libGDHL_gv_rexxarUI.lv_rexxarMishaHealth, StringExternal("Param/Value/lib_GDHL_C2E9D341"), libCore_gv_playerGroupFromPlayer[lp_rexxarPlayer]);
    DialogControlSetVisible(libGDHL_gv_rexxarUI.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_rexxarPlayer], true);
    DialogControlSetVisible(libGDHL_gv_rexxarUI.lv_rexxarMishaUnitStatus, libCore_gv_playerGroupFromPlayer[lp_rexxarPlayer], true);
}

void libGDHL_gf_RexxarUICleanup (int lp_rexxarPlayer) {
    // Implementation
    DialogControlSetVisible(libGDHL_gv_rexxarUI.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_rexxarPlayer], false);
}

void libGDHL_gf_HeroRexxarUnleashtheBoarsTeleportValidation (unit lp_boarUnit, unit lp_targetUnit, fixed lp_teleportDistanceThreshold) {
    // Variable Declarations
    point lv_mostRecentLocation;

    // Variable Initialization

    // Implementation
    lv_mostRecentLocation = UnitGetPosition(lp_targetUnit);
    while ((UnitIsAlive(lp_boarUnit) == true) && (UnitIsAlive(lp_targetUnit) == true)) {
        if (((DistanceBetweenPoints(UnitGetPosition(lp_targetUnit), lv_mostRecentLocation) > 15.0))) {
            UnitCreateEffectUnit(lp_boarUnit, "TimedLifeFate", lp_boarUnit);
        }

        lv_mostRecentLocation = UnitGetPosition(lp_targetUnit);
        Wait(0.0625, c_timeGame);
    }
}

void libGDHL_gf_HeroRexxarMishaThink (int lp_player) {
    int auto3742AA88_val;
    int auto02EA91E5_ae;
    int auto02EA91E5_ai;
    int auto817393C0_ae;
    int auto817393C0_ai;

    // Variable Declarations
    point lv_positionToCheck;
    point lv_positionToMove;
    int lv_itNearbyShrubChecks;
    unit lv_unitToAttack;
    bool lv_autoAquired;
    int lv_player;
    unit lv_rexxar;
    unit lv_misha;
    int lv_currentState;
    int lv_attackPoint;
    fixed lv_pursuitOffset;

    // Variable Initialization
    lv_currentState = libGDHL_ge_MishaState_Idle;

    // Implementation
    lv_player = lp_player;
    lv_rexxar = libGame_gv_players[lv_player].lv_heroUnit;
    lv_misha = libGDHL_gv_rexxarMishaUnit[lv_player];
    lv_currentState = libGDHL_gv_mishaCurrentAIState[lv_player];
    if ((UnitHasBehavior2(lv_misha, "PermanentlyUncommandable") == true)) {
        return ;
    }

    if ((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroAbathur")) {
        lv_rexxar = libGame_gv_players[lv_player].lv_activeVehicle;
    }

    if ((libGDHL_gv_heroRexxarMishaPursuitTarget[lv_player] != null) && (libGDHL_gv_heroRexxarMishaLastKnownTargetLocation[lv_player] != null) && (libNtve_gf_UnitIsVisibleToPlayer(libGDHL_gv_heroRexxarMishaPursuitTarget[lv_player], lv_player) == true) && (lv_currentState != libGDHL_ge_MishaState_Pursuing)) {
        lv_pursuitOffset = (UnitGetPropertyFixed(libGDHL_gv_heroRexxarMishaPursuitTarget[lv_player], c_unitPropMovementSpeedCurrent, c_unitPropCurrent) / 4.0);
        libGDHL_gv_heroRexxarMishaLastKnownTargetLocation[lv_player] = PointWithOffsetPolar(UnitGetPosition(libGDHL_gv_heroRexxarMishaPursuitTarget[lv_player]), lv_pursuitOffset, UnitGetFacing(libGDHL_gv_heroRexxarMishaPursuitTarget[lv_player]));
    }

    if ((lv_currentState == libGDHL_ge_MishaState_Pursuing) && (libGDHL_gv_heroRexxarMishaLastKnownTargetLocation[lv_player] == null)) {
        lv_currentState = libGDHL_ge_MishaState_Idle;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(lv_misha), UnitGetPosition(lv_rexxar)) >= libGDHL_gv_rexxar_Misha_LeashRange_Max_C) && (lv_currentState != libGDHL_ge_MishaState_Leashing) && (lv_currentState != libGDHL_ge_MishaState_Following)) {
        if (((UnitBehaviorEnabled(lv_misha, "RexxarMishaLeashTimeToLeash") == true) || (DistanceBetweenPoints(UnitGetPosition(lv_misha), UnitGetPosition(lv_rexxar)) >= libGDHL_gv_rexxar_Misha_LeashRange_Immediate_C))) {
            UnitIssueOrder(lv_misha, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_rexxar), 3.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
            lv_currentState = libGDHL_ge_MishaState_Leashing;
            libGDHL_gv_heroRexxarMishaLastKnownTargetLocation[lv_player] = null;
            libGDHL_gv_heroRexxarMishaPursuitTarget[lv_player] = null;
            libGDHL_gf_HeroRexxarMishaFixateOff(lv_player);
            FloatingCombatElementCreateTextAtPoint(PlayerGroupSingle(lv_player), "FloatingCombatElements/FloatingCombatElementTemplate", "", UnitGetPosition(lv_misha), StringExternal("Param/Value/lib_GDHL_6071B140"), libNtve_gv_FloatingCombatTextAutoRandomSeed);
        }
        else {
            if ((UnitBehaviorEnabled(lv_misha, "RexxarMishaLeashGracePeriod") == false)) {
                UnitBehaviorAdd(lv_misha, "RexxarMishaLeashGracePeriod", lv_rexxar, 1);
            }

        }
    }

    if ((lv_currentState != libGDHL_ge_MishaState_Fighting) && ((libGDHL_gv_commandMishaTargetUnit[lv_player] != null) || ((OrderGetAbilityCommand(UnitOrder(lv_misha, 0)) == AbilityCommand("attack", 0)) && (UnitIsValid(OrderGetTargetUnit(UnitOrder(lv_rexxar, 0))) == true) && (lv_autoAquired != true)))) {
        lv_currentState = libGDHL_ge_MishaState_Fighting;
    }

    if ((lv_currentState != libGDHL_ge_MishaState_HoldingPosition) && (libGDHL_gv_commandMishaTargetPoint[lv_player] != null)) {
        lv_currentState = libGDHL_ge_MishaState_HoldingPosition;
        libGDHL_gv_heroRexxarMishaLastKnownTargetLocation[lv_player] = null;
    }

    if ((lv_currentState != libGDHL_ge_MishaState_GoingToMoonwell) && (libGDHL_gv_commandMishaTargetMoonwell[lv_player] != null)) {
        lv_currentState = libGDHL_ge_MishaState_GoingToMoonwell;
        libGDHL_gv_heroRexxarMishaLastKnownTargetLocation[lv_player] = null;
    }

    if ((UnitBehaviorCount(lv_misha, "RexxarMishaFollowFollow") > 0) && (lv_currentState != libGDHL_ge_MishaState_Following) && (lv_currentState != libGDHL_ge_MishaState_Pursuing)) {
        lv_currentState = libGDHL_ge_MishaState_Following;
        lv_autoAquired = false;
        libGDHL_gv_heroRexxarMishaLastKnownTargetLocation[lv_player] = null;
        libGDHL_gf_HeroRexxarMishaFixateOff(lv_player);
    }
    else {
        if ((UnitAbilityCheck(lv_misha, "attack", false) == true)) {
            UnitAbilityEnable(lv_misha, "attack", true);
        }

    }
    if ((libGDHL_gv_rexxarIsInStasis[lv_player] == true) && (lv_currentState != libGDHL_ge_MishaState_RexxarStasis)) {
        lv_currentState = libGDHL_ge_MishaState_RexxarStasis;
    }

    if ((UnitHasBehavior2(lv_misha, "SylvanasMindControlTarget") == true)) {
        lv_currentState = libGDHL_ge_MishaState_AI_Paused;
    }

    auto3742AA88_val = lv_currentState;
    if (auto3742AA88_val == libGDHL_ge_MishaState_Searching) {
        if ((libNtve_gf_UnitIsVisibleToPlayer(libGDHL_gv_heroRexxarMishaPursuitTarget[lv_player], lv_player) == true)) {
            libGDHL_gv_heroRexxarMishaLastKnownTargetLocation[lv_player] = UnitGetPosition(libGDHL_gv_heroRexxarMishaPursuitTarget[lv_player]);
            libGDHL_gv_commandMishaTargetUnit[lv_player] = libGDHL_gv_heroRexxarMishaPursuitTarget[lv_player];
            PlayerCreateEffectUnit(lv_player, "RexxarApplyMishaFocusTargetBehavior", libGDHL_gv_heroRexxarMishaPursuitTarget[lv_player]);
            UnitBehaviorAdd(lv_misha, "RexxarMishaFocussedOnUnit", lv_rexxar, 1);
            UnitIssueOrder(lv_misha, OrderTargetingUnit(AbilityCommand("attack", 0), libGDHL_gv_heroRexxarMishaPursuitTarget[lv_player]), c_orderQueueReplace);
            lv_currentState = libGDHL_ge_MishaState_Fighting;
        }
        else {
            libGDHL_gv_heroRexxarMishaLastKnownTargetLocation[lv_player] = null;
            libGDHL_gv_heroRexxarMishaPursuitTarget[lv_player] = null;
            lv_currentState = libGDHL_ge_MishaState_Leashing;
        }
    }
    else if (auto3742AA88_val == libGDHL_ge_MishaState_Pursuing) {
        if ((DistanceBetweenPoints(UnitGetPosition(lv_misha), libGDHL_gv_heroRexxarMishaLastKnownTargetLocation[lv_player]) < 1.0)) {
            lv_currentState = libGDHL_ge_MishaState_Searching;
        }
        else {
            UnitIssueOrder(lv_misha, OrderTargetingPoint(AbilityCommand("move", 0), libGDHL_gv_heroRexxarMishaLastKnownTargetLocation[lv_player]), c_orderQueueReplace);
        }
    }
    else if (auto3742AA88_val == libGDHL_ge_MishaState_Fighting) {
        if ((UnitIsValid(libGDHL_gv_commandMishaTargetUnit[lv_player]) == true) && (UnitTestState(libGDHL_gv_commandMishaTargetUnit[lv_player], c_unitStateTargetable) == true) && ((UnitFilterMatch(libGDHL_gv_commandMishaTargetUnit[lv_player], lv_player, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterStructure), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) || (UnitFilterMatch(libGDHL_gv_commandMishaTargetUnit[lv_player], lv_player, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterMassive), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterInvulnerable - 32)))) == true))) {
            if ((OrderGetTargetUnit(UnitOrder(lv_misha, 0)) != libGDHL_gv_commandMishaTargetUnit[lv_player])) {
                UnitIssueOrder(lv_misha, OrderTargetingUnit(AbilityCommand("attack", 0), libGDHL_gv_commandMishaTargetUnit[lv_player]), c_orderQueueReplace);
                UnitCreateEffectUnit(lv_rexxar, "RexxarMishaTargetingPersistent", libGDHL_gv_commandMishaTargetUnit[lv_player]);
            }

        }
        else {
            if ((libGDHL_gv_commandMishaTargetUnit[lv_player] != null)) {
                libGDHL_gf_HeroRexxarMishaFixateOff(lv_player);
            }

            if ((OrderGetAbilityCommand(UnitOrder(lv_rexxar, 0)) == AbilityCommand("attack", 0)) && (UnitOrderIsAcquired(lv_rexxar, 0) == false) && (UnitIsValid(OrderGetTargetUnit(UnitOrder(lv_rexxar, 0))) == true) && (UnitFilterMatch(OrderGetTargetUnit(UnitOrder(lv_rexxar, 0)), lv_player, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) && (OrderGetTargetUnit(UnitOrder(lv_rexxar, 0)) != OrderGetTargetUnit(UnitOrder(lv_misha, 0))) && (libGDHL_gv_commandMishaTargetUnit[lv_player] == null)) {
                UnitCreateEffectUnit(lv_rexxar, "RexxarMishaCopyOrders", lv_misha);
                UnitCreateEffectUnit(lv_rexxar, "RexxarMishaTargetingPersistent", OrderGetTargetUnit(UnitOrder(lv_rexxar, 0)));
            }

        }
        if ((OrderGetAbilityCommand(UnitOrder(lv_misha, 0)) == AbilityCommand("attack", 0)) && (((UnitIsAlive(libGDHL_gv_commandMishaTargetUnit[lv_player]) == true) && (UnitFilterMatch(libGDHL_gv_commandMishaTargetUnit[lv_player], lv_player, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly), (1 << (c_targetFilterInvulnerable - 32)))) == true)) || ((UnitIsAlive(OrderGetTargetUnit(UnitOrder(lv_misha, 0))) == true) && (UnitFilterMatch(OrderGetTargetUnit(UnitOrder(lv_misha, 0)), lv_player, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)))) {
        }
        else {
            lv_currentState = libGDHL_ge_MishaState_Idle;
        }
    }
    else if (auto3742AA88_val == libGDHL_ge_MishaState_Following) {
        if ((UnitBehaviorCount(lv_misha, "RexxarMishaFollowFollow") == 0)) {
            lv_currentState = libGDHL_ge_MishaState_Idle;
            lv_autoAquired = false;
        }
        else {
            lv_autoAquired = true;
            if ((UnitOrderCount(lv_rexxar) != 0) && (OrderGetAbilityCommand(UnitOrder(lv_rexxar, 0)) != AbilityCommand("RexxarSpiritSwoop", 0)) && (OrderGetAbilityCommand(UnitOrder(lv_rexxar, 0)) != AbilityCommand("RexxarUnleashTheBoars", 0)) && (UnitGetType(OrderGetTargetItem(UnitOrder(lv_rexxar, 0))) != "RexxarFlare") && (OrderGetTargetPosition(UnitOrder(lv_rexxar, 0)) != Point(0.0, 0.0)) && (DistanceBetweenPoints(UnitGetPosition(lv_misha), UnitGetPosition(lv_rexxar)) <= 3.0) && ((OrderGetAbilityCommand(UnitOrder(lv_rexxar, 0)) != AbilityCommand("attack", 0)) || (UnitIsValid(OrderGetTargetUnit(UnitOrder(lv_rexxar, 0))) == false))) {
                UnitAbilityEnable(lv_misha, "attack", true);
                libGDHL_gf_HeroRexxarOrderMishaMoveNearPoint(lv_rexxar, lv_misha, OrderGetTargetPosition(UnitOrder(lv_rexxar, 0)));
                if ((OrderGetAbilityCommand(UnitOrder(lv_misha, 0)) != AbilityCommand("move", 0)) && (DistanceBetweenPoints(OrderGetTargetPosition(UnitOrder(lv_rexxar, 0)), UnitGetPosition(lv_misha)) < 4.0)) {
                    libNtve_gf_MakeUnitFacePoint(lv_misha, OrderGetTargetPosition(UnitOrder(lv_rexxar, 0)), 0.2);
                }

            }
            else {
                if ((UnitTechTreeBehaviorCount(lv_rexxar, "ShrubStatusController", c_techCountQueuedOrBetter) <= 0)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(lv_misha), UnitGetPosition(lv_rexxar)) > 3.0) && ((OrderGetAbilityCommand(UnitOrder(lv_misha, 0)) == AbilityCommand("attack", 0)) || (UnitOrderCount(lv_misha) == 0) || (DistanceBetweenPoints(OrderGetTargetPosition(UnitOrder(lv_misha, 0)), UnitGetPosition(lv_rexxar)) > 6.0))) {
                        UnitIssueOrder(lv_misha, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_rexxar), 3.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                        UnitAbilityEnable(lv_misha, "attack", false);
                    }
                    else {
                        if ((UnitOrderCount(lv_misha) > 0) && (DistanceBetweenPoints(UnitGetPosition(lv_misha), UnitGetPosition(lv_rexxar)) <= 2.0)) {
                            UnitIssueOrder(lv_misha, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                            UnitAbilityEnable(lv_misha, "attack", true);
                        }

                    }
                }
                else {
                    if ((UnitTechTreeBehaviorCount(lv_misha, "ShrubStatusController", c_techCountQueuedOrBetter) == 0) && (OrderGetAbilityCommand(UnitOrder(lv_misha, 0)) != AbilityCommand("move", 0))) {
                        UnitAbilityEnable(lv_misha, "attack", true);
                        auto02EA91E5_ae = 8;
                        auto02EA91E5_ai = 1;
                        lv_itNearbyShrubChecks = 0;
                        for ( ; ( (auto02EA91E5_ai >= 0 && lv_itNearbyShrubChecks <= auto02EA91E5_ae) || (auto02EA91E5_ai <= 0 && lv_itNearbyShrubChecks >= auto02EA91E5_ae) ) ; lv_itNearbyShrubChecks += auto02EA91E5_ai ) {
                            lv_positionToCheck = PointWithOffsetPolar(UnitGetPosition(lv_rexxar), 1.5, (45 * lv_itNearbyShrubChecks));
                            if ((InShrub(lv_positionToCheck) == true) && ((lv_positionToMove == null) || (DistanceBetweenPoints(UnitGetPosition(lv_misha), lv_positionToMove) > DistanceBetweenPoints(lv_positionToCheck, UnitGetPosition(lv_misha))))) {
                                lv_positionToMove = lv_positionToCheck;
                            }

                        }
                        if ((lv_positionToMove != null)) {
                            UnitIssueOrder(lv_misha, OrderTargetingPoint(AbilityCommand("move", 0), lv_positionToMove), c_orderQueueReplace);
                            lv_positionToMove = null;
                        }

                    }
                    else {
                        UnitAbilityEnable(lv_misha, "attack", true);
                    }
                }
            }
        }
    }
    else if (auto3742AA88_val == libGDHL_ge_MishaState_Idle) {
        if ((libGDHL_gv_heroRexxarMishaLastKnownTargetLocation[lv_player] != null)) {
            lv_currentState = libGDHL_ge_MishaState_Pursuing;
        }

        if ((UnitOrderCount(lv_rexxar) != 0) && (UnitBehaviorEnabled(lv_misha, "RexxarMishaHold") == false) && (libGDHL_gv_heroRexxarMishaLastKnownTargetLocation[lv_player] == null)) {
            if ((OrderGetAbilityCommand(UnitOrder(lv_rexxar, 0)) == AbilityCommand("attack", 0))) {
                if ((UnitOrderIsAcquired(lv_rexxar, 0) == true) && (OrderGetTargetPosition(UnitOrder(lv_rexxar, 1)) == UnitGetPosition(lv_rexxar))) {
                    lv_autoAquired = true;
                }
                else {
                    lv_autoAquired = false;
                }
                if ((UnitIsValid(OrderGetTargetUnit(UnitOrder(lv_rexxar, 0))) == false)) {
                    UnitCreateEffectUnit(lv_rexxar, "RexxarMishaCommandRemoveTargetPriorityBuffSearch", lv_rexxar);
                    UnitCreateEffectUnit(lv_rexxar, "RexxarMishaCopyOrders", lv_misha);
                }
                else {
                    if ((OrderGetTargetUnit(UnitOrder(lv_rexxar, 0)) != OrderGetTargetUnit(UnitOrder(lv_misha, 0)))) {
                        UnitCreateEffectUnit(lv_rexxar, "RexxarMishaApplyTargetPriorityBuff", OrderGetTargetUnit(UnitOrder(lv_rexxar, 0)));
                        UnitCreateEffectUnit(lv_rexxar, "RexxarMishaCopyOrders", lv_misha);
                        UnitCreateEffectUnit(lv_rexxar, "RexxarMishaTargetingPersistent", OrderGetTargetUnit(UnitOrder(lv_rexxar, 0)));
                    }
                    else {
                        lv_currentState = libGDHL_ge_MishaState_Moving;
                    }
                }
            }
            else {
                if ((OrderGetAbilityCommand(UnitOrder(lv_rexxar, 0)) == AbilityCommand("move", 0)) && (UnitHasBehavior2(lv_misha, "RexxarMishaManualOrder") == false)) {
                    UnitCreateEffectUnit(lv_rexxar, "RexxarMishaCommandRemoveTargetPriorityBuffSearch", lv_rexxar);
                    if ((DistanceBetweenPoints(OrderGetTargetPosition(UnitOrder(lv_rexxar, 0)), UnitGetPosition(lv_misha)) > 4.0) && (UnitBehaviorEnabled(lv_misha, "RexxarMishaHold") == false)) {
                        libGDHL_gf_HeroRexxarOrderMishaMoveNearPoint(lv_rexxar, lv_misha, OrderGetTargetPosition(UnitOrder(lv_rexxar, 0)));
                        lv_currentState = libGDHL_ge_MishaState_Moving;
                    }
                    else {
                        libNtve_gf_MakeUnitFacePoint(lv_misha, OrderGetTargetPoint(UnitOrder(lv_rexxar, 0)), 0.2);
                    }
                }
                else {
                    if ((OrderGetAbilityCommand(UnitOrder(lv_rexxar, 0)) == AbilityCommand("FountainDrink", 0)) && (OrderGetAbilityCommand(UnitOrder(lv_misha, 0)) != AbilityCommand("FountainDrink", 0))) {
                        lv_currentState = libGDHL_ge_MishaState_Moving;
                        UnitCreateEffectUnit(lv_rexxar, "RexxarMishaCopyOrders", lv_misha);
                    }

                }
            }
            if ((((DistanceBetweenPoints(UnitGetPosition(lv_misha), UnitGetPosition(lv_rexxar)) >= 4.0) && (UnitOrderCount(lv_misha) == 0)) || ((DistanceBetweenPoints(UnitGetPosition(lv_misha), UnitGetPosition(lv_rexxar)) >= 5.0) && (OrderGetAbilityCommand(UnitOrder(lv_misha, 0)) == AbilityCommand("attack", 0))))) {
                if ((OrderGetAbilityCommand(UnitOrder(lv_rexxar, 0)) == AbilityCommand("move", 0))) {
                    lv_currentState = libGDHL_ge_MishaState_Moving;
                    UnitIssueOrder(lv_misha, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(OrderGetTargetPosition(UnitOrder(lv_rexxar, 0)), 3.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                }
                else {
                    UnitIssueOrder(lv_misha, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_rexxar), 3.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                }
            }

        }
        else {
            lv_autoAquired = true;
            if ((UnitTechTreeBehaviorCount(lv_rexxar, "ShrubStatusController", c_techCountQueuedOrBetter) > 0) && (UnitTechTreeBehaviorCount(lv_misha, "ShrubStatusController", c_techCountQueuedOrBetter) == 0) && (OrderGetAbilityCommand(UnitOrder(lv_misha, 0)) != AbilityCommand("move", 0))) {
                auto817393C0_ae = 8;
                auto817393C0_ai = 1;
                lv_itNearbyShrubChecks = 0;
                for ( ; ( (auto817393C0_ai >= 0 && lv_itNearbyShrubChecks <= auto817393C0_ae) || (auto817393C0_ai <= 0 && lv_itNearbyShrubChecks >= auto817393C0_ae) ) ; lv_itNearbyShrubChecks += auto817393C0_ai ) {
                    lv_positionToCheck = PointWithOffsetPolar(UnitGetPosition(lv_rexxar), 1.5, (45 * lv_itNearbyShrubChecks));
                    if ((InShrub(lv_positionToCheck) == true) && ((lv_positionToMove == null) || (DistanceBetweenPoints(UnitGetPosition(lv_misha), lv_positionToMove) > DistanceBetweenPoints(lv_positionToCheck, UnitGetPosition(lv_misha))))) {
                        lv_positionToMove = lv_positionToCheck;
                    }

                }
                if ((lv_positionToMove != null)) {
                    UnitIssueOrder(lv_misha, OrderTargetingPoint(AbilityCommand("move", 0), lv_positionToMove), c_orderQueueReplace);
                    lv_positionToMove = null;
                }

            }
            else {
                if (((UnitIsValid(OrderGetTargetUnit(UnitOrder(lv_misha, 0))) == true) || (OrderGetAbilityCommand(UnitOrder(lv_misha, 0)) == AbilityCommand("attack", 0)))) {
                    UnitIssueOrder(lv_misha, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                }

            }
        }
    }
    else if (auto3742AA88_val == libGDHL_ge_MishaState_Moving) {
        if ((UnitOrderCount(lv_misha) == 0) && (OrderGetAbilityCommand(UnitOrder(lv_rexxar, 0)) != AbilityCommand("FountainDrink", 0))) {
            lv_currentState = libGDHL_ge_MishaState_Idle;
        }
        else {
            if (((UnitOrderCount(lv_rexxar) == 0) || (OrderGetAbilityCommand(UnitOrder(lv_rexxar, 0)) == AbilityCommand("move", 2)))) {
                if (((DistanceBetweenPoints(UnitGetPosition(lv_misha), UnitGetPosition(lv_rexxar)) <= 4.0) || (DistanceBetweenPoints(OrderGetTargetPosition(UnitOrder(lv_misha, 0)), UnitGetPosition(lv_rexxar)) > 5.0))) {
                    UnitIssueOrder(lv_misha, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                    lv_currentState = libGDHL_ge_MishaState_Idle;
                }

            }
            else {
                if ((OrderGetAbilityCommand(UnitOrder(lv_rexxar, 0)) != AbilityCommand("attack", 0)) && (UnitHasBehavior2(lv_misha, "RexxarMishaManualOrder") == false)) {
                    if ((OrderGetAbilityCommand(UnitOrder(lv_rexxar, 0)) == AbilityCommand("FountainDrink", 0))) {
                        if ((OrderGetAbilityCommand(UnitOrder(lv_misha, 0)) != AbilityCommand("FountainDrink", 0))) {
                            UnitCreateEffectUnit(lv_rexxar, "RexxarMishaCopyOrders", lv_misha);
                        }

                    }
                    else {
                        if ((OrderGetTargetPosition(UnitOrder(lv_rexxar, 0)) != Point(0.0, 0.0))) {
                            libGDHL_gf_HeroRexxarOrderMishaMoveNearPoint(lv_rexxar, lv_misha, OrderGetTargetPosition(UnitOrder(lv_rexxar, 0)));
                        }

                        if ((DistanceBetweenPoints(OrderGetTargetPosition(UnitOrder(lv_rexxar, 0)), OrderGetTargetPosition(UnitOrder(lv_misha, 0))) > 4.0) && (OrderGetAbilityCommand(UnitOrder(lv_rexxar, 0)) != AbilityCommand("move", 2))) {
                            UnitCreateEffectUnit(lv_rexxar, "RexxarMishaCommandRemoveTargetPriorityBuffSearch", lv_rexxar);
                        }

                    }
                }
                else {
                    if ((OrderGetAbilityCommand(UnitOrder(lv_rexxar, 0)) == AbilityCommand("attack", 0)) && (OrderGetTargetUnit(UnitOrder(lv_rexxar, 0)) != OrderGetTargetUnit(UnitOrder(lv_misha, 0)))) {
                        UnitCreateEffectUnit(lv_rexxar, "RexxarMishaCopyOrders", lv_misha);
                        if ((UnitIsValid(OrderGetTargetUnit(UnitOrder(lv_rexxar, 0))) == true)) {
                            UnitCreateEffectUnit(lv_rexxar, "RexxarMishaTargetingPersistent", OrderGetTargetUnit(UnitOrder(lv_rexxar, 0)));
                            lv_autoAquired = false;
                        }

                    }

                }
            }
        }
    }
    else if (auto3742AA88_val == libGDHL_ge_MishaState_Leashing) {
        if ((DistanceBetweenPoints(UnitGetPosition(lv_misha), UnitGetPosition(lv_rexxar)) <= 3.0)) {
            UnitIssueOrder(lv_misha, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            lv_currentState = libGDHL_ge_MishaState_Idle;
        }
        else {
            if ((UnitOrderCount(lv_misha) == 0) && (UnitHasBehavior2(lv_misha, "RexxarMishaManualOrder") == false)) {
                UnitIssueOrder(lv_misha, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_rexxar), 3.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
            }
            else {
                if ((DistanceBetweenPoints(UnitGetPosition(lv_rexxar), OrderGetTargetPosition(UnitOrder(lv_misha, 0))) >= libGDHL_gv_rexxar_Misha_LeashRange_Min_C)) {
                    UnitIssueOrder(lv_misha, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_rexxar), 3.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                }
                else {
                    if ((DistanceBetweenPoints(UnitGetPosition(lv_misha), UnitGetPosition(lv_rexxar)) >= libGDHL_gv_rexxar_Misha_LeashRange_Speedboost_Min_C) && ((UnitOrderCount(lv_rexxar) == 0) || (DistanceBetweenPoints(OrderGetTargetPosition(UnitOrder(lv_rexxar, 0)), UnitGetPosition(lv_rexxar)) < DistanceBetweenPoints(OrderGetTargetPosition(UnitOrder(lv_rexxar, 0)), UnitGetPosition(lv_misha))))) {
                        UnitBehaviorAdd(lv_misha, "RexxarMishaSpeedBoost", lv_misha, 1);
                    }

                }
            }
        }
    }
    else if (auto3742AA88_val == libGDHL_ge_MishaState_RexxarStasis) {
        if ((libGDHL_gv_rexxarIsInStasis[lv_player] == false)) {
            lv_currentState = libGDHL_ge_MishaState_Idle;

        }

        if ((OrderGetTargetPosition(UnitOrder(lv_rexxar, UnitOrderCount(lv_rexxar))) != OrderGetTargetPosition(UnitOrder(lv_misha, 0)))) {
            UnitIssueOrder(lv_misha, UnitOrder(lv_rexxar, UnitOrderCount(lv_rexxar)), c_orderQueueReplace);
        }

    }
    else if (auto3742AA88_val == libGDHL_ge_MishaState_Dancing) {
        if ((OrderGetAbilityCommand(UnitOrder(lv_misha, 0)) != AbilityCommand("stop", 3))) {
            lv_currentState = libGDHL_ge_MishaState_Idle;
        }

    }
    else if (auto3742AA88_val == libGDHL_ge_MishaState_HoldingPosition) {
        if ((libGDHL_gv_commandMishaTargetPoint[lv_player] == null)) {
            lv_currentState = libGDHL_ge_MishaState_Idle;
        }
        else {
            if ((DistanceBetweenPoints(UnitGetPosition(lv_misha), libGDHL_gv_commandMishaTargetPoint[lv_player]) > 1.0) && ((OrderGetAbilityCommand(UnitOrder(lv_misha, 0)) != AbilityCommand("move", 0)) || (OrderGetTargetPosition(UnitOrder(lv_misha, 0)) != libGDHL_gv_commandMishaTargetPoint[lv_player]))) {
                UnitIssueOrder(lv_misha, OrderTargetingPoint(AbilityCommand("move", 0), libGDHL_gv_commandMishaTargetPoint[lv_player]), c_orderQueueReplace);
            }

        }
    }
    else if (auto3742AA88_val == libGDHL_ge_MishaState_GoingToMoonwell) {
        if (((UnitHasBehavior2(lv_rexxar, "HealingFountainCooldown") == true) || ((UnitGetPropertyFixed(lv_misha, c_unitPropLife, c_unitPropCurrent) == UnitGetPropertyFixed(lv_misha, c_unitPropLifeMax, c_unitPropCurrent)) && (UnitGetPropertyFixed(lv_rexxar, c_unitPropLife, c_unitPropCurrent) == UnitGetPropertyFixed(lv_rexxar, c_unitPropLifeMax, c_unitPropCurrent))))) {
            lv_currentState = libGDHL_ge_MishaState_Idle;
            libGDHL_gf_HeroRexxarMishaFixateOff(lv_player);
            if ((DistanceBetweenPoints(UnitGetPosition(lv_misha), UnitGetPosition(lv_rexxar)) > 4.0)) {
                UnitIssueOrder(lv_misha, OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_rexxar), 2.0, UnitGetPosition(lv_misha))), c_orderQueueReplace);
            }

        }
        else {
            if (((OrderGetAbilityCommand(UnitOrder(lv_misha, 0)) != AbilityCommand("FountainDrink", 0)) || (OrderGetTargetUnit(UnitOrder(lv_misha, 0)) != libGDHL_gv_commandMishaTargetMoonwell[0]))) {
                UnitIssueOrder(lv_misha, OrderTargetingUnit(AbilityCommand("FountainDrink", 0), libGDHL_gv_commandMishaTargetMoonwell[lv_player]), c_orderQueueReplace);
            }

        }
    }
    else if (auto3742AA88_val == libGDHL_ge_MishaState_AI_Paused) {
        if ((UnitHasBehavior2(lv_misha, "SylvanasMindControlTarget") == false)) {
            lv_currentState = libGDHL_ge_MishaState_Idle;
        }

    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_GDHL_BDE66CE6"), true);
    }
    libGDHL_gv_mishaCurrentAIState[lv_player] = lv_currentState;
}

void libGDHL_gf_HeroRexxarOrderMishaMoveNearPoint (unit lp_rexxar, unit lp_misha, point lp_target) {
    // Variable Declarations
    fixed lv_distanceFromMishaToRexxar;
    point lv_orderPosition;

    // Variable Initialization
    lv_distanceFromMishaToRexxar = DistanceBetweenPoints(UnitGetPosition(lp_rexxar), UnitGetPosition(lp_misha));

    // Implementation
    lv_orderPosition = OrderGetTargetPosition(UnitOrder(lp_misha, 0));
    if ((lv_distanceFromMishaToRexxar > libGDHL_gv_rexxar_Misha_LeashRange_Min_C) && (libNtve_gf_PointDotProduct2D(PointWithOffsetPolar(Point(0.0, 0.0), 1.0, UnitGetFacing(lp_rexxar)), libNtve_gf_PointSubtract2D(UnitGetPosition(lp_misha), UnitGetPosition(lp_rexxar))) < 0.707)) {
        if (((OrderGetAbilityCommand(UnitOrder(lp_misha, 0)) != AbilityCommand("move", 0)) || (DistanceBetweenPoints(lv_orderPosition, UnitGetPosition(lp_rexxar)) > 4.0) || (DistanceBetweenPoints(lv_orderPosition, UnitGetPosition(lp_misha)) < 2.0))) {
            UnitIssueOrder(lp_misha, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lp_rexxar), 1.5, UnitGetFacing(lp_rexxar))), c_orderQueueReplace);
        }

    }
    else {
        if (((OrderGetAbilityCommand(UnitOrder(lp_misha, 0)) != AbilityCommand("move", 0)) || ((DistanceBetweenPoints(lv_orderPosition, lp_target) > 4.0) && ((DistanceBetweenPoints(lv_orderPosition, UnitGetPosition(lp_rexxar)) > 4.0) || (DistanceBetweenPoints(lv_orderPosition, UnitGetPosition(lp_misha)) < 2.0))))) {
            UnitIssueOrder(lp_misha, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lp_target, 3.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
        }

    }
}

void libGDHL_gf_HeroRexxarMishaFixateOff (int lp_player) {
    // Implementation
    if ((libGDHL_gv_commandMishaTargetUnit[lp_player] != null)) {
        UnitBehaviorRemovePlayer(libGDHL_gv_commandMishaTargetUnit[lp_player], "RexxarMishaFocussedTargetUnit", lp_player, 1);
        UnitCreateEffectUnit(libGDHL_gv_rexxarMishaUnit[lp_player], "RexxarMishaFocusTargetOff", libGDHL_gv_commandMishaTargetUnit[lp_player]);
        libGDHL_gv_commandMishaTargetUnit[lp_player] = null;
        UnitBehaviorRemove(libGDHL_gv_rexxarMishaUnit[lp_player], "RexxarMishaFocussedOnUnit", 1);
    }

    if ((libGDHL_gv_commandMishaTargetMoonwell[lp_player] != null)) {
        UnitCreateEffectUnit(libGDHL_gv_rexxarMishaUnit[lp_player], "RexxarMishaFocusTargetOff", libGDHL_gv_commandMishaTargetMoonwell[lp_player]);
        libGDHL_gv_commandMishaTargetMoonwell[lp_player] = null;
        UnitBehaviorRemove(libGDHL_gv_rexxarMishaUnit[lp_player], "RexxarMishaFocussedOnPoint", 1);
    }

    if ((libGDHL_gv_commandMishaTargetPoint[lp_player] != null)) {
        UnitCreateEffectPoint(libGDHL_gv_rexxarMishaUnit[lp_player], "RexxarMishaFocusTargetOff", libGDHL_gv_commandMishaTargetPoint[lp_player]);
        libGDHL_gv_commandMishaTargetPoint[lp_player] = null;
        UnitBehaviorRemove(libGDHL_gv_rexxarMishaUnit[lp_player], "RexxarMishaFocussedOnPoint", 1);
    }

}

void libGDHL_gf_HeroSgtHammerIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroSgtHammerTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroSgtHammerTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroSgtHammerCompleteHearthstone, true);
        TriggerEnable(libGDHL_gt_HeroSgtHammerSiegeModeUpdate, true);
        TriggerEnable(libGDHL_gt_HeroSgtHammerBluntForceGunPrepStart, true);
        TriggerEnable(libGDHL_gt_HeroSgtHammerBluntForceGunTargetCalculation, true);
        TriggerEnable(libGDHL_gt_HeroSgtHammerBluntForceGunCheckForLocation, true);
        TriggerEnable(libGDHL_gt_HeroSgtHammerConcussiveBlastCancel, true);
        TriggerEnable(libGDHL_gt_HeroSgtHammerResistantTalentProc, true);
    }

}

void libGDHL_gf_HeroSgtHammerDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroSgtHammerTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroSgtHammerTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroSgtHammerTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroSgtHammerTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroSgtHammerCompleteHearthstone, false);
        TriggerEnable(libGDHL_gt_HeroSgtHammerSiegeModeUpdate, false);
        TriggerEnable(libGDHL_gt_HeroSgtHammerBluntForceGunPrepStart, false);
        TriggerEnable(libGDHL_gt_HeroSgtHammerBluntForceGunTargetCalculation, false);
        TriggerEnable(libGDHL_gt_HeroSgtHammerBluntForceGunCheckForLocation, false);
        TriggerEnable(libGDHL_gt_HeroSgtHammerConcussiveBlastCancel, false);
        TriggerEnable(libGDHL_gt_HeroSgtHammerResistantTalentProc, false);
    }

}

void libGDHL_gf_HeroStitchesIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroStitchesTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroStitchesTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroStitchesDevourLastBiteMasterySpecialDeathState, true);
        TriggerEnable(libGDHL_gt_HeroStitchesRetchlingSpawned, true);
        TriggerEnable(libGDHL_gt_HeroStitchesRetchlingVileGasRestorativeFumes, true);
        TriggerEnable(libGDHL_gt_HeroStitchesHookHookVision, true);
        TriggerEnable(libGDHL_gt_HeroStitchesHookLaunchTargetUsed, true);
        TriggerEnable(libGDHL_gt_HeroStitchesGorgeDecreases, true);
        TriggerEnable(libGDHL_gt_HeroStitchesGorgeActivate, true);
        TriggerEnable(libGDHL_gt_HeroStitchesGorgeOff, true);
        TriggerEnable(libGDHL_gt_HeroStitchesHookSpawnHelpingHandItem, true);
        TriggerEnable(libGDHL_gt_HeroStitchesFleaBagProc, true);
        TriggerEnable(libGDHL_gt_HeroStitchesHungryforMoreTalentRegenGlobeProc, true);
    }

}

void libGDHL_gf_HeroStitchesDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroStitchesTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroStitchesTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroStitchesTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroStitchesTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroStitchesDevourLastBiteMasterySpecialDeathState, false);
        TriggerEnable(libGDHL_gt_HeroStitchesRetchlingSpawned, false);
        TriggerEnable(libGDHL_gt_HeroStitchesRetchlingVileGasRestorativeFumes, false);
        TriggerEnable(libGDHL_gt_HeroStitchesHookHookVision, false);
        TriggerEnable(libGDHL_gt_HeroStitchesHookLaunchTargetUsed, false);
        TriggerEnable(libGDHL_gt_HeroStitchesGorgeDecreases, false);
        TriggerEnable(libGDHL_gt_HeroStitchesGorgeActivate, false);
        TriggerEnable(libGDHL_gt_HeroStitchesGorgeOff, false);
        TriggerEnable(libGDHL_gt_HeroStitchesHookSpawnHelpingHandItem, false);
        TriggerEnable(libGDHL_gt_HeroStitchesFleaBagProc, false);
        TriggerEnable(libGDHL_gt_HeroStitchesHungryforMoreTalentRegenGlobeProc, false);
    }

}

void libGDHL_gf_HeroStitchesReturnControlledUnittoLaneAI (unit lp_unit) {
    // Variable Declarations
    unit lv_lanerUnit;
    int lv_ownerPlayer;
    int lv_teamNumberofOwner;
    point lv_positionOfUnit;

    // Variable Initialization

    // Implementation
    lv_lanerUnit = lp_unit;
    lv_ownerPlayer = UnitGetOwner(lp_unit);
    lv_teamNumberofOwner = libGame_gf_TeamNumberOfPlayer(lv_ownerPlayer);
    lv_positionOfUnit = UnitGetPosition(lp_unit);
    libGame_gf_CalculateSpawnedMinionGoalPoints(lv_ownerPlayer, lv_positionOfUnit);
    libAIAI_gf_MinionAIStartMinionAI(-1, lv_lanerUnit, libGame_gv_spawnedMinionLane, libGame_gv_spawnedMinionFirstWaypointIndex, false, true, false, 0, false);
}

void libGDHL_gf_HeroSylvanasIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroSylvanasTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroSylvanasTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroSylvanasMindControlTargetSelect, true);
        TriggerEnable(libGDHL_gt_HeroSylvanasWailingArrowSilenceTarget, true);
        TriggerEnable(libGDHL_gt_HeroSylvanasWailingArrowDeafeningBlastSilenceTarget, true);
        TriggerEnable(libGDHL_gt_HeroSylvanasWailingArrowSilenceEnd, true);
        TriggerEnable(libGDHL_gt_HeroSylvanasWitheringFireNPCKillAddCharge, true);
        TriggerEnable(libGDHL_gt_HeroSylvanasWitheringFireHeroKillAddCharge, true);
        TriggerEnable(libGDHL_gt_HeroSylvanasPossessionRewire, true);
        TriggerEnable(libGDHL_gt_HeroAISylvanasHasCastWailingArrow, true);
    }

}

void libGDHL_gf_HeroSylvanasDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroSylvanasTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroSylvanasTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroSylvanasTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroSylvanasTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroSylvanasMindControlTargetSelect, false);
        TriggerEnable(libGDHL_gt_HeroSylvanasWailingArrowSilenceTarget, false);
        TriggerEnable(libGDHL_gt_HeroSylvanasWailingArrowDeafeningBlastSilenceTarget, false);
        TriggerEnable(libGDHL_gt_HeroSylvanasWailingArrowSilenceEnd, false);
        TriggerEnable(libGDHL_gt_HeroSylvanasWitheringFireNPCKillAddCharge, false);
        TriggerEnable(libGDHL_gt_HeroSylvanasWitheringFireHeroKillAddCharge, false);
        TriggerEnable(libGDHL_gt_HeroSylvanasPossessionRewire, false);
        TriggerEnable(libGDHL_gt_HeroAISylvanasHasCastWailingArrow, false);
    }

}

void libGDHL_gf_HeroTassadarIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroTassadarTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroTassadarTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroTassadarWeaponIncrementvsTassadar, true);
        TriggerEnable(libGDHL_gt_HeroTassadarStaticChargeMasteryProc, true);
        TriggerEnable(libGDHL_gt_HeroTassadarMentalAcuityProc, true);
        TriggerEnable(libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod, true);
        TriggerEnable(libGDHL_gt_HeroTassadarKhaydarinResonanceTalentProc, true);
    }

}

void libGDHL_gf_HeroTassadarDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroTassadarTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroTassadarTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroTassadarTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroTassadarTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroTassadarWeaponIncrementvsTassadar, false);
        TriggerEnable(libGDHL_gt_HeroTassadarStaticChargeMasteryProc, false);
        TriggerEnable(libGDHL_gt_HeroTassadarMentalAcuityProc, false);
        TriggerEnable(libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod, false);
        TriggerEnable(libGDHL_gt_HeroTassadarKhaydarinResonanceTalentProc, false);
    }

}

void libGDHL_gf_HeroThrallIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroThrallTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroThrallTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroThrallWindfuryRideTheWindMasteryProc, true);
        TriggerEnable(libGDHL_gt_HeroThrallEarthquakeEarthenShieldMasteryShieldApplication, true);
        TriggerEnable(libGDHL_gt_HeroThrallSunderingUsed, true);
    }

}

void libGDHL_gf_HeroThrallDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroThrallTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroThrallTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroThrallTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroThrallTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroThrallWindfuryRideTheWindMasteryProc, false);
        TriggerEnable(libGDHL_gt_HeroThrallEarthquakeEarthenShieldMasteryShieldApplication, false);
        TriggerEnable(libGDHL_gt_HeroThrallSunderingUsed, false);
    }

}

void libGDHL_gf_UIHeroSpecificStatusFrameUpdateThrallStatus (int lp_player) {
    int auto4FF95022_ae;
    int auto4FF95022_ai;

    // Variable Declarations
    int lv_traitCounter;

    // Variable Initialization

    // Implementation
    libGDHL_gv_thrallTraitCount[lp_player] += 1;
    if ((libGDHL_gv_thrallTraitCount[lp_player] == 5)) {
        libGDHL_gv_thrallTraitCount[lp_player] = 0;
        DialogControlSendAnimationEvent(libGDHL_gv_thrallUI.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], "TransitionToTop");
        auto4FF95022_ae = libGDHL_gv_thrallTraitMaxStacks;
        auto4FF95022_ai = 1;
        lv_traitCounter = 1;
        for ( ; ( (auto4FF95022_ai >= 0 && lv_traitCounter <= auto4FF95022_ae) || (auto4FF95022_ai <= 0 && lv_traitCounter >= auto4FF95022_ae) ) ; lv_traitCounter += auto4FF95022_ai ) {
            DialogControlSetVisible(libGDHL_gv_thrallUI.lv_counterImage[lv_traitCounter], libCore_gv_playerGroupFromPlayer[lp_player], false);
        }
    }
    else {
        DialogControlSetVisible(libGDHL_gv_thrallUI.lv_counterImage[libGDHL_gv_thrallTraitCount[lp_player]], libCore_gv_playerGroupFromPlayer[lp_player], true);
    }
}

void libGDHL_gf_UIClearThrallStatusOnDeath (int lp_player) {
    int auto1AF3E679_ae;
    int auto1AF3E679_ai;

    // Variable Declarations
    int lv_traitCounter;

    // Variable Initialization

    // Implementation
    libGDHL_gv_thrallTraitCount[lp_player] = 0;
    auto1AF3E679_ae = libGDHL_gv_thrallTraitMaxStacks;
    auto1AF3E679_ai = 1;
    lv_traitCounter = 1;
    for ( ; ( (auto1AF3E679_ai >= 0 && lv_traitCounter <= auto1AF3E679_ae) || (auto1AF3E679_ai <= 0 && lv_traitCounter >= auto1AF3E679_ae) ) ; lv_traitCounter += auto1AF3E679_ai ) {
        DialogControlSetVisible(libGDHL_gv_thrallUI.lv_counterImage[lv_traitCounter], libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
}

void libGDHL_gf_HeroTinkerIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroTinkerTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroTinkerTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroTinkerOverlockTurret, true);
        TriggerEnable(libGDHL_gt_HeroTinkerDethLazorScaling, true);
        TriggerEnable(libGDHL_gt_HeroTinkerDethLazorGoblinFusionScaling, true);
        TriggerEnable(libGDHL_gt_HeroTinkerDethLazorTurningUpdate, true);
        TriggerEnable(libGDHL_gt_HeroTinkerDethLazorCast, true);
        TriggerEnable(libGDHL_gt_HeroTinkerDethLazorEnd, true);
        TriggerEnable(libGDHL_gt_CombatStyleTinkerClockwerkSteamFistsDuration, true);
        TriggerEnable(libGDHL_gt_CombatStyleTinkerMechaLordMasteryDuration, true);
        TriggerEnable(libGDHL_gt_HeroTinkerRoboGoblinTurretFocusSetTarget, true);
        TriggerEnable(libGDHL_gt_HeroTinkerItsRainingScrapProc, true);
        TriggerEnable(libGDHL_gt_HeroTinkerFirinMahLazorzProc, true);
        TriggerEnable(libGDHL_gt_HeroTinkerFirinMahLazorzTargetMemory, true);
        TriggerEnable(libGDHL_gt_HeroTinkerRoboGoblinMechaLordTurretSelection, true);
    }

}

void libGDHL_gf_HeroTinkerDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroTinkerTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroTinkerTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroTinkerTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroTinkerTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroTinkerOverlockTurret, false);
        TriggerEnable(libGDHL_gt_HeroTinkerDethLazorScaling, false);
        TriggerEnable(libGDHL_gt_HeroTinkerDethLazorGoblinFusionScaling, false);
        TriggerEnable(libGDHL_gt_HeroTinkerDethLazorTurningUpdate, false);
        TriggerEnable(libGDHL_gt_HeroTinkerDethLazorCast, false);
        TriggerEnable(libGDHL_gt_HeroTinkerDethLazorLeftClick, false);
        TriggerEnable(libGDHL_gt_HeroTinkerDethLazorEnd, false);
        TriggerEnable(libGDHL_gt_CombatStyleTinkerClockwerkSteamFistsDuration, false);
        TriggerEnable(libGDHL_gt_CombatStyleTinkerMechaLordMasteryDuration, false);
        TriggerEnable(libGDHL_gt_HeroTinkerRoboGoblinTurretFocusSetTarget, false);
        TriggerEnable(libGDHL_gt_HeroTinkerItsRainingScrapProc, false);
        TriggerEnable(libGDHL_gt_HeroTinkerFirinMahLazorzProc, false);
        TriggerEnable(libGDHL_gt_HeroTinkerFirinMahLazorzTargetMemory, false);
        TriggerEnable(libGDHL_gt_HeroTinkerRoboGoblinMechaLordTurretSelection, false);
    }

}

void libGDHL_gf_HeroTinkerModifyDethLazor (int lp_player, bool lp_on) {
    int auto588448D2_ae;
    int auto588448D2_ai;
    int autoB1BBDC28_ae;
    int autoB1BBDC28_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    if ((lp_on == true)) {
        autoB1BBDC28_ae = 15;
        autoB1BBDC28_ai = 1;
        lv_i = 0;
        for ( ; ( (autoB1BBDC28_ai >= 0 && lv_i <= autoB1BBDC28_ae) || (autoB1BBDC28_ai <= 0 && lv_i >= autoB1BBDC28_ae) ) ; lv_i += autoB1BBDC28_ai ) {
            CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeCreatePersistent", "PeriodicPeriodArray[" + IntToString(lv_i) + "]", lp_player, ".125");
        }
        CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeModelPersistent1", "InitialDelay", lp_player, "1");
        CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeModelPersistent2", "InitialDelay", lp_player, "1");
        CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeBaseModelPersistent", "PeriodicPeriodArray[" + IntToString(1) + "]", lp_player, "1");
        CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeBaseModelPersistent", "PeriodicPeriodArray[" + IntToString(2) + "]", lp_player, "5");
    }
    else {
        auto588448D2_ae = 15;
        auto588448D2_ai = 1;
        lv_i = 0;
        for ( ; ( (auto588448D2_ai >= 0 && lv_i <= auto588448D2_ae) || (auto588448D2_ai <= 0 && lv_i >= auto588448D2_ae) ) ; lv_i += auto588448D2_ai ) {
            CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeCreatePersistent", "PeriodicPeriodArray[" + IntToString(lv_i) + "]", lp_player, ".25");
        }
        CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeModelPersistent1", "InitialDelay", lp_player, "2");
        CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeModelPersistent2", "InitialDelay", lp_player, "2");
        CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeBaseModelPersistent", "PeriodicPeriodArray[" + IntToString(1) + "]", lp_player, "2");
        CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeBaseModelPersistent", "PeriodicPeriodArray[" + IntToString(2) + "]", lp_player, "6");
    }
}

void libGDHL_gf_HeroTychusIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroTychusTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroTychusTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroTychusUpdateOrdersOnIssueOrderAbility, true);
        TriggerEnable(libGDHL_gt_HeroTychusOverkillTargetedRetargetvH16, true);
        TriggerEnable(libGDHL_gt_HeroTychusOverkillRollingReload, true);
        TriggerEnable(libGDHL_gt_HeroTychusDashRegenGlobeProc, true);
        TriggerEnable(libGDHL_gt_HeroTychusMasterAssassinHeroTakedownProc, true);
        TriggerEnable(libGDHL_gt_HeroTychusRelentlessSoldierTalentProc, true);
        TriggerEnable(libGDHL_gt_HeroTychusThatsTheStuffOn, true);
        TriggerEnable(libGDHL_gt_HeroTychusThatsTheStuffOff, true);
        TriggerEnable(libGDHL_gt_HeroTychusThatsTheStuffHealPreviewCatalog, true);
    }

}

void libGDHL_gf_HeroTychusDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroTychusTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroTychusTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroTychusTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroTychusTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroTychusUpdateOrdersOnIssueOrderAbility, false);
        TriggerEnable(libGDHL_gt_HeroTychusOverkillTargetedRetargetvH16, false);
        TriggerEnable(libGDHL_gt_HeroTychusOverkillRollingReload, false);
        TriggerEnable(libGDHL_gt_HeroTychusDashRegenGlobeProc, false);
        TriggerEnable(libGDHL_gt_HeroTychusMasterAssassinHeroTakedownProc, false);
        TriggerEnable(libGDHL_gt_HeroTychusRelentlessSoldierTalentProc, false);
        TriggerEnable(libGDHL_gt_HeroTychusThatsTheStuffOn, false);
        TriggerEnable(libGDHL_gt_HeroTychusThatsTheStuffOff, false);
        TriggerEnable(libGDHL_gt_HeroTychusThatsTheStuffHealPreviewCatalog, false);
    }

}

void libGDHL_gf_HeroTyraelIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroTyraelTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroTyraelTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroTyraelSanctificationFacing, true);
        TriggerEnable(libGDHL_gt_HeroTyraelArchangelsWrathSuppressCollision, true);
        TriggerEnable(libGDHL_gt_HeroTyraelSanctificationFullscreenOverlayOn, true);
        TriggerEnable(libGDHL_gt_HeroTyraelSanctificationFullscreenOverlayOff, true);
    }

}

void libGDHL_gf_HeroTyraelDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroTyraelTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroTyraelTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroTyraelTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroTyraelTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroTyraelSanctificationFacing, false);
        TriggerEnable(libGDHL_gt_HeroTyraelArchangelsWrathSuppressCollision, false);
        TriggerEnable(libGDHL_gt_HeroTyraelSanctificationFullscreenOverlayOn, false);
        TriggerEnable(libGDHL_gt_HeroTyraelSanctificationFullscreenOverlayOff, false);
    }

}

void libGDHL_gf_HeroTyrandeIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroTyrandeTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroTyrandeTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroTyrandeSentinelShotTargetCalculation, true);
    }

}

void libGDHL_gf_HeroTyrandeDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroTyrandeTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroTyrandeTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroTyrandeTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroTyrandeTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroTyrandeSentinelShotTargetCalculation, false);
    }

}

void libGDHL_gf_HeroWitchDoctorIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroWitchDoctorTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroWitchDoctorTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroWitchDoctorZombiePrisonKillZombies, true);
        TriggerEnable(libGDHL_gt_HeroWitchDoctorZombiePrisonRelicZombiesSpawned, true);
        TriggerEnable(libGDHL_gt_HeroWitchDoctorRavenousSpiritCast, true);
        TriggerEnable(libGDHL_gt_HeroWitchDoctorRavenousSpiritExpires, true);
        TriggerEnable(libGDHL_gt_HeroWitchDoctorPassiveTarget, true);
        TriggerEnable(libGDHL_gt_HeroWitchDoctorGargantuanCreated, true);
        TriggerEnable(libGDHL_gt_HeroWitchDoctorGargantuanIssueStompOrder, true);
        TriggerEnable(libGDHL_gt_HeroWitchDoctorGargantuanStompUsed, true);
    }

}

void libGDHL_gf_HeroWitchDoctorDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroWitchDoctorTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroWitchDoctorTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroWitchDoctorTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroWitchDoctorTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroWitchDoctorZombiePrisonKillZombies, false);
        TriggerEnable(libGDHL_gt_HeroWitchDoctorZombiePrisonRelicZombiesSpawned, false);
        TriggerEnable(libGDHL_gt_HeroWitchDoctorRavenousSpiritCast, false);
        TriggerEnable(libGDHL_gt_HeroWitchDoctorRavenousSpiritExpires, false);
        TriggerEnable(libGDHL_gt_HeroWitchDoctorPassiveTarget, false);
        TriggerEnable(libGDHL_gt_HeroWitchDoctorGargantuanCreated, false);
        TriggerEnable(libGDHL_gt_HeroWitchDoctorGargantuanIssueStompOrder, false);
        TriggerEnable(libGDHL_gt_HeroWitchDoctorGargantuanStompUsed, false);
    }

}

trigger auto_libGDHL_gf_HeroWitchDoctorGargantuanAI_Trigger = null;
unit auto_libGDHL_gf_HeroWitchDoctorGargantuanAI_lp_witchDoctor;
unit auto_libGDHL_gf_HeroWitchDoctorGargantuanAI_lp_george;
int auto_libGDHL_gf_HeroWitchDoctorGargantuanAI_lp_player;
point auto_libGDHL_gf_HeroWitchDoctorGargantuanAI_lp_castPosition;

void libGDHL_gf_HeroWitchDoctorGargantuanAI (unit lp_witchDoctor, unit lp_george, int lp_player, point lp_castPosition) {
    auto_libGDHL_gf_HeroWitchDoctorGargantuanAI_lp_witchDoctor = lp_witchDoctor;
    auto_libGDHL_gf_HeroWitchDoctorGargantuanAI_lp_george = lp_george;
    auto_libGDHL_gf_HeroWitchDoctorGargantuanAI_lp_player = lp_player;
    auto_libGDHL_gf_HeroWitchDoctorGargantuanAI_lp_castPosition = lp_castPosition;

    if (auto_libGDHL_gf_HeroWitchDoctorGargantuanAI_Trigger == null) {
        auto_libGDHL_gf_HeroWitchDoctorGargantuanAI_Trigger = TriggerCreate("auto_libGDHL_gf_HeroWitchDoctorGargantuanAI_TriggerFunc");
    }

    TriggerExecute(auto_libGDHL_gf_HeroWitchDoctorGargantuanAI_Trigger, false, false);
}

bool auto_libGDHL_gf_HeroWitchDoctorGargantuanAI_TriggerFunc (bool testConds, bool runActions) {
    unit lp_witchDoctor = auto_libGDHL_gf_HeroWitchDoctorGargantuanAI_lp_witchDoctor;
    unit lp_george = auto_libGDHL_gf_HeroWitchDoctorGargantuanAI_lp_george;
    int lp_player = auto_libGDHL_gf_HeroWitchDoctorGargantuanAI_lp_player;
    point lp_castPosition = auto_libGDHL_gf_HeroWitchDoctorGargantuanAI_lp_castPosition;

    // Variable Declarations
    unit lv_unitToFollow;
    int lv_gargantuanState;
    unit lv_gargantuanAggroTarget;

    // Variable Initialization
    lv_unitToFollow = lp_witchDoctor;
    lv_gargantuanState = libGDHL_ge_GargantuanState_Idle;

    // Implementation
    while ((UnitHasBehavior2(lp_witchDoctor, "WitchDoctorGargantuanActive") == true) && (UnitIsAlive(lp_george) == true)) {
        if ((OrderGetAbilityCommand(UnitOrder(lp_george, 0)) == AbilityCommand("WitchDoctorGargantuanStomp", 0)) && (lv_gargantuanState != libGDHL_ge_GargantuanState_Approach)) {
            if ((OrderGetAbilityCommand(UnitOrder(lp_george, 0)) != AbilityCommand("WitchDoctorGargantuanStomp", 0))) {
                lv_gargantuanState = libGDHL_ge_GargantuanState_Idle;
            }

        }
        else {
            if ((UnitOrder(lp_george, 0) == null) && (lv_gargantuanState != libGDHL_ge_GargantuanState_Idle)) {
                lv_gargantuanState = libGDHL_ge_GargantuanState_Idle;
            }
            else {
                if ((OrderGetAbilityCommand(UnitOrder(lp_george, 0)) == AbilityCommand("attack", 0)) && (UnitTypeTestAttribute(UnitGetType(OrderGetTargetUnit(UnitOrder(lp_george, 0))), c_unitAttributeHeroic) == true)) {
                    lv_gargantuanState = libGDHL_ge_GargantuanState_Aggro;
                }

            }
            if ((lv_gargantuanState != libGDHL_ge_GargantuanState_Aggro) && (OrderGetAbilityCommand(UnitOrder(lp_george, 0)) != AbilityCommand("WitchDoctorGargantuanStompCommand", 0))) {
                if ((DistanceBetweenPoints(UnitGetPosition(lp_george), lp_castPosition) > libGDHL_gv_witchDoctor_Gargantuan_LeashRange_C)) {
                    UnitIssueOrder(lp_george, OrderTargetingPoint(AbilityCommand("move", 0), lp_castPosition), c_orderQueueReplace);
                    UnitBehaviorAdd(lp_george, "WitchDoctorGargantuanAggroSpeed", lp_witchDoctor, 1);
                    lv_gargantuanState = libGDHL_ge_GargantuanState_Leashing;
                }
                else {
                    if ((lv_gargantuanState == libGDHL_ge_GargantuanState_Idle)) {
                        UnitIssueOrder(lp_george, OrderTargetingPoint(AbilityCommand("attack", 0), lp_castPosition), c_orderQueueReplace);
                    }

                }
            }
            else {
                if ((OrderGetAbilityCommand(UnitOrder(lp_george, 0)) != AbilityCommand("WitchDoctorGargantuanStompCommand", 0)) && (UnitIsValid(OrderGetTargetUnit(UnitOrder(lp_george, 0))) == true) && ((DistanceBetweenPoints(UnitGetPosition(lp_george), lp_castPosition) > libGDHL_gv_witchDoctor_Gargantuan_LeashRange_C) || (UnitHasBehavior2(OrderGetTargetUnit(UnitOrder(lp_george, 0)), "LeoricUndying") == true) || (UnitHasBehavior2(OrderGetTargetUnit(UnitOrder(lp_george, 0)), "UtherEternalDevotionRezDelay") == true) || (UnitHasBehavior2(OrderGetTargetUnit(UnitOrder(lp_george, 0)), "TyraelArchangelsWrathDeathActiveBuff") == true) || (libAIAI_gf_AIUnitBehindEnemyGateEstimate(UnitGetPosition(lp_george), UnitGetOwner(lp_witchDoctor), OrderGetTargetUnit(UnitOrder(lp_george, 0))) == true))) {
                    UnitGroupRemove(libGDHL_gv_heroWitchDoctorGargantuanAggroGroup[lp_player], OrderGetTargetUnit(UnitOrder(lp_george, 0)));
                    UnitIssueOrder(lp_george, OrderTargetingPoint(AbilityCommand("move", 0), lp_castPosition), c_orderQueueReplace);
                    UnitBehaviorAdd(lp_george, "WitchDoctorGargantuanAggroSpeed", lp_witchDoctor, 1);
                    lv_gargantuanState = libGDHL_ge_GargantuanState_Leashing;
                }

            }
            if ((OrderGetAbilityCommand(UnitOrder(lv_unitToFollow, 0)) == AbilityCommand("attack", 0)) && (lv_gargantuanState != libGDHL_ge_GargantuanState_Aggro) && ((DistanceBetweenPoints(UnitGetPosition(OrderGetTargetUnit(UnitOrder(lv_unitToFollow, 0))), lp_castPosition) + 0.5) <= libGDHL_gv_witchDoctor_Gargantuan_LeashRange_C)) {
                UnitIssueOrder(lp_george, OrderTargetingUnit(AbilityCommand("attack", 0), OrderGetTargetUnit(UnitOrder(lv_unitToFollow, 0))), c_orderQueueReplace);
                lv_gargantuanState = libGDHL_ge_GargantuanState_Idle;
            }

            if ((OrderGetAbilityCommand(UnitOrder(lp_george, 0)) == AbilityCommand("WitchDoctorGargantuanStompCommand", 0))) {
                lv_gargantuanState = libGDHL_ge_GargantuanState_Approach;
            }

        }
        Wait(0.125, c_timeGame);
    }
    UnitBehaviorRemove(lp_witchDoctor, "WitchDoctorGargantuanActive", 1);
    return true;
}

void libGDHL_gf_HeroWizardIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroWizardTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroWizardTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroWizardCriticalMassCDReduction, true);
        TriggerEnable(libGDHL_gt_HeroWizardDominance, true);
        TriggerEnable(libGDHL_gt_HeroWizardRemoveArchononHearth, true);
        TriggerEnable(libGDHL_gt_HeroWizardIllusionistDamageCheck, true);
    }

}

void libGDHL_gf_HeroWizardDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroWizardTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroWizardTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroWizardTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroWizardTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroWizardCriticalMassCDReduction, false);
        TriggerEnable(libGDHL_gt_HeroWizardDominance, false);
        TriggerEnable(libGDHL_gt_HeroWizardRemoveArchononHearth, false);
        TriggerEnable(libGDHL_gt_HeroWizardIllusionistDamageCheck, false);
    }

}

void libGDHL_gf_HeroUtherIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroUtherTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroUtherTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroUtherBeaconofLightProc, true);
        TriggerEnable(libGDHL_gt_HeroUtherBlessedChampionProc, true);
        TriggerEnable(libGDHL_gt_HeroUtherSpiritofRedemptionCooldownReset, true);
        TriggerEnable(libGDHL_gt_HeroUtherEternalDevotionSuppressCollision, true);
        TriggerEnable(libGDHL_gt_HeroUtherDivineShieldFullscreenOverlayOn, true);
        TriggerEnable(libGDHL_gt_HeroUtherDivineShieldFullscreenOverlayOff, true);
    }

}

void libGDHL_gf_HeroUtherDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroUtherTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroUtherTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroUtherTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroUtherTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroUtherBeaconofLightProc, false);
        TriggerEnable(libGDHL_gt_HeroUtherBlessedChampionProc, false);
        TriggerEnable(libGDHL_gt_HeroUtherSpiritofRedemptionCooldownReset, false);
        TriggerEnable(libGDHL_gt_HeroUtherEternalDevotionSuppressCollision, false);
        TriggerEnable(libGDHL_gt_HeroUtherDivineShieldFullscreenOverlayOn, false);
        TriggerEnable(libGDHL_gt_HeroUtherDivineShieldFullscreenOverlayOff, false);
    }

}

void libGDHL_gf_HeroZagaraIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroZagaraTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroZagaraTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroZagaraExitNydusWormUsed, true);
        TriggerEnable(libGDHL_gt_HeroZagaraNydusWormSpawned, true);
        TriggerEnable(libGDHL_gt_HeroZagaraNydusWormTargetingState, true);
        TriggerEnable(libGDHL_gt_HeroZagaraNydusWormDies, true);
        TriggerEnable(libGDHL_gt_HeroZagaraNydusWormDiesUpdateLineofSuccession, true);
        TriggerEnable(libGDHL_gt_HeroZagaraNydusWormExitAnimation, true);
        TriggerEnable(libGDHL_gt_HeroZagaraSummonNydusWormBroodlingSpawned, true);
        TriggerEnable(libGDHL_gt_HeroZagaraRoachSpawned, true);
        TriggerEnable(libGDHL_gt_HeroZagaraBanelingBarrage, true);
        TriggerEnable(libGDHL_gt_HeroZagaraHydraliskorMutaliskControl, true);
        TriggerEnable(libGDHL_gt_HeroZagaraInfestedDropSpawnRoach, true);
        TriggerEnable(libGDHL_gt_HeroZagaraInfestScaling, true);
        TriggerEnable(libGDHL_gt_HeroZagaraTyrantMawCDRonDeath, true);
        TriggerEnable(libGDHL_gt_HeroZagaraHunterKillerHydraliskTransfusion, true);
        TriggerEnable(libGDHL_gt_HeroZagaraEndlessCreepApplyBehavior, true);
        TriggerEnable(libGDHL_gt_HeroZagaraDevouringMawOverlayOn, true);
        TriggerEnable(libGDHL_gt_HeroZagaraDevouringMawOverlayOff, true);
    }

}

void libGDHL_gf_HeroZagaraDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroZagaraTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroZagaraTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroZagaraTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroZagaraTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroZagaraExitNydusWormUsed, false);
        TriggerEnable(libGDHL_gt_HeroZagaraNydusWormSpawned, false);
        TriggerEnable(libGDHL_gt_HeroZagaraNydusWormTargetingState, false);
        TriggerEnable(libGDHL_gt_HeroZagaraNydusWormDies, false);
        TriggerEnable(libGDHL_gt_HeroZagaraNydusWormDiesUpdateLineofSuccession, false);
        TriggerEnable(libGDHL_gt_HeroZagaraNydusWormExitAnimation, false);
        TriggerEnable(libGDHL_gt_HeroZagaraSummonNydusWormBroodlingSpawned, false);
        TriggerEnable(libGDHL_gt_HeroZagaraRoachSpawned, false);
        TriggerEnable(libGDHL_gt_HeroZagaraBanelingBarrage, false);
        TriggerEnable(libGDHL_gt_HeroZagaraInfestScaling, false);
        TriggerEnable(libGDHL_gt_HeroZagaraHydraliskorMutaliskControl, false);
        TriggerEnable(libGDHL_gt_HeroZagaraInfestedDropSpawnRoach, false);
        TriggerEnable(libGDHL_gt_HeroZagaraTyrantMawCDRonDeath, false);
        TriggerEnable(libGDHL_gt_HeroZagaraHunterKillerHydraliskTransfusion, false);
        TriggerEnable(libGDHL_gt_HeroZagaraEndlessCreepApplyBehavior, false);
        TriggerEnable(libGDHL_gt_HeroZagaraDevouringMawOverlayOn, false);
        TriggerEnable(libGDHL_gt_HeroZagaraDevouringMawOverlayOff, false);
    }

}

void libGDHL_gf_HeroZagaraUpdateNydusWormLineofSuccession (int lp_player) {
    unitgroup auto5277D092_g;
    int auto5277D092_u;

    // Variable Declarations
    unit lv_u;

    // Variable Initialization

    // Implementation
    if ((UnitGroupCount(libGDHL_gv_heroZagaraNydusWormUnitGroup[lp_player], c_unitCountAlive) > libGDHL_gv_heroZagaraMaxNydusWorms[lp_player])) {
        auto5277D092_g = libGDHL_gv_heroZagaraNydusWormUnitGroup[lp_player];
        auto5277D092_u = 1;
        for ( ; auto5277D092_u <= UnitGroupCount(auto5277D092_g, c_unitCountAll) ; auto5277D092_u += (lv_u == UnitGroupUnit(auto5277D092_g, auto5277D092_u)) ) {
            lv_u = UnitGroupUnit(auto5277D092_g, auto5277D092_u);
            UnitGroupRemove(libGDHL_gv_heroZagaraNydusWormUnitGroup[lp_player], lv_u);
            UnitKill(lv_u);
            break;
        }
    }

}

void libGDHL_gf_HeroZeratulIncrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroZeratulTriggerRegistrationVariable += 1;
    if ((libGDHL_gv_heroZeratulTriggerRegistrationVariable == 1)) {
        TriggerEnable(libGDHL_gt_HeroZeratulShadowHunterTalentProc, true);
        TriggerEnable(libGDHL_gt_HeroZeratulGrimTaskProc, true);
        TriggerEnable(libGDHL_gt_HeroZeratulVoidPrisonApplyStasisOverlay, true);
        TriggerEnable(libGDHL_gt_HeroZeratulVoidPrisonRemoveStasisOverlay, true);
        TriggerEnable(libGDHL_gt_HeroZeratulDamageBasedDecloak, true);
        TriggerEnable(libGDHL_gt_HeroZeratulSeekerintheDarkStructureTarget, true);
        TriggerEnable(libGDHL_gt_HeroZeratulShroudofAdunFCT, true);
    }

}

void libGDHL_gf_HeroZeratulDecrementHeroCountFunction () {
    // Implementation
    libGDHL_gv_heroZeratulTriggerRegistrationVariable -= 1;
    if ((libGDHL_gv_heroZeratulTriggerRegistrationVariable < 0)) {
        libGDHL_gv_heroZeratulTriggerRegistrationVariable = 0;
    }

    if ((libGDHL_gv_heroZeratulTriggerRegistrationVariable == 0)) {
        TriggerEnable(libGDHL_gt_HeroZeratulVoidPrisonApplyStasisOverlay, false);
        TriggerEnable(libGDHL_gt_HeroZeratulShadowHunterTalentProc, false);
        TriggerEnable(libGDHL_gt_HeroZeratulGrimTaskProc, false);
        TriggerEnable(libGDHL_gt_HeroZeratulVoidPrisonRemoveStasisOverlay, false);
        TriggerEnable(libGDHL_gt_HeroZeratulDamageBasedDecloak, false);
        TriggerEnable(libGDHL_gt_HeroZeratulSeekerintheDarkStructureTarget, false);
        TriggerEnable(libGDHL_gt_HeroZeratulShroudofAdunFCT, false);
    }

}

bool libGDHL_gf_AbilityIsTalent (abilcmd lp_ability) {
    // Implementation
    if (((lp_ability == AbilityCommand("TalentBerserk", 0)) || (lp_ability == AbilityCommand("TalentBloodForBlood", 0)) || (lp_ability == AbilityCommand("TalentCleanse", 0)) || (lp_ability == AbilityCommand("TalentDash", 0)) || (lp_ability == AbilityCommand("TalentDashSupport", 0)) || (lp_ability == AbilityCommand("TalentDeafeningRoar", 0)) || (lp_ability == AbilityCommand("TalentEnrage", 0)) || (lp_ability == AbilityCommand("TalentFirstAid", 0)) || (lp_ability == AbilityCommand("TalentFirstAidSupport", 0)) || (lp_ability == AbilityCommand("TalentHealingWard", 0)) || (lp_ability == AbilityCommand("TalentOverdrive", 0)) || (lp_ability == AbilityCommand("TalentOverdriveResourceless", 0)) || (lp_ability == AbilityCommand("TalentRewind", 0)) || (lp_ability == AbilityCommand("TalentRewindSupport", 0)) || (lp_ability == AbilityCommand("TalentStoneskin", 0)) || (lp_ability == AbilityCommand("TalentStoneskinSupport", 0)) || (lp_ability == AbilityCommand("FlashoftheStorms", 0)) || (lp_ability == AbilityCommand("TalentBucketBribe", 0)) || (lp_ability == AbilityCommand("MULERepair", 0)) || (lp_ability == AbilityCommand("TalentBucketIceBlock", 0)) || (libNtve_gf_EventItemAbilityOrUnitAbility() == AbilityCommand("Envenom", 0)) || (lp_ability == AbilityCommand("TalentBucketPromote", 0)) || (lp_ability == AbilityCommand("TalentBucketShrinkRay", 0)) || (lp_ability == AbilityCommand("TalentBucketSprint", 0)) || (lp_ability == AbilityCommand("TalentBucketStormShield", 0)) || (lp_ability == AbilityCommand("TalentBucketShrinkRay", 0)))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_GDHL_EA3C3D99"));
        return true;
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_GDHL_C7CA188E"));
        return false;
    }
}

bool libGDHL_gf_AbilityorItem (abilcmd lp_ability) {
    // Implementation
    if (((libNtve_gf_EventItemAbilityOrUnitAbility() == AbilityCommand("TalentBerserk", 0)) || (libNtve_gf_EventItemAbilityOrUnitAbility() == AbilityCommand("TalentBloodForBlood", 0)) || (libNtve_gf_EventItemAbilityOrUnitAbility() == AbilityCommand("TalentCleanse", 0)) || (libNtve_gf_EventItemAbilityOrUnitAbility() == AbilityCommand("TalentDash", 0)) || (libNtve_gf_EventItemAbilityOrUnitAbility() == AbilityCommand("TalentDashSupport", 0)) || (lp_ability == AbilityCommand("TalentDeafeningRoar", 0)) || (lp_ability == AbilityCommand("TalentEnrage", 0)) || (lp_ability == AbilityCommand("TalentFirstAid", 0)) || (lp_ability == AbilityCommand("TalentFirstAidSupport", 0)) || (lp_ability == AbilityCommand("TalentHealingWard", 0)) || (lp_ability == AbilityCommand("TalentOverdrive", 0)) || (lp_ability == AbilityCommand("TalentOverdriveResourceless", 0)) || (lp_ability == AbilityCommand("TalentRewind", 0)) || (lp_ability == AbilityCommand("TalentRewindSupport", 0)) || (lp_ability == AbilityCommand("TalentStoneskin", 0)) || (lp_ability == AbilityCommand("TalentStoneskinSupport", 0)) || (lp_ability == AbilityCommand("FlashoftheStorms", 0)) || (lp_ability == AbilityCommand("TalentBucketBribe", 0)) || (lp_ability == AbilityCommand("MULERepair", 0)) || (lp_ability == AbilityCommand("TalentBucketIceBlock", 0)) || (libNtve_gf_EventItemAbilityOrUnitAbility() == AbilityCommand("Envenom", 0)) || (lp_ability == AbilityCommand("Envenom", 0)) || (lp_ability == AbilityCommand("TalentBucketPromote", 0)) || (lp_ability == AbilityCommand("TalentBucketShrinkRay", 0)) || (lp_ability == AbilityCommand("TalentBucketSprint", 0)) || (lp_ability == AbilityCommand("TalentBucketStormShield", 0)) || (lp_ability == AbilityCommand("TalentBucketShrinkRay", 0)))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_GDHL_59348182"));
        return true;
    }
    else {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_GDHL_B8E83988"));
        return false;
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: Seasonal Event - Announce Countdown - No Intro
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_SeasonalEventAnnounceCountdownNoIntro_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 12.125, false);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_BattleStartingIn, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 10.125, false);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown10, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 5.125, false);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown5, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown4, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown3, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown2, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown1, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_SeasonalEventAnnounceCountdownNoIntro_Init () {
    libGDHL_gt_SeasonalEventAnnounceCountdownNoIntro = TriggerCreate("libGDHL_gt_SeasonalEventAnnounceCountdownNoIntro_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Seasonal Event Spawn Chance
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_DEBUGSeasonalEventSpawnChance_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_chance;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringSub(EventChatMessage(false), 21, 23) == "")) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_GDHL_974E9203"), true);
    }
    else {
        lv_chance = StringToInt(StringSub(EventChatMessage(false), 21, 24));
        BankLoad("PlayerSettings", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "SeasonalEventChance", "Chance", lv_chance);
        BankSave(BankLastCreated());
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_GDHL_76EF9DD3") + IntToText(lv_chance)), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_DEBUGSeasonalEventSpawnChance_Init () {
    libGDHL_gt_DEBUGSeasonalEventSpawnChance = TriggerCreate("libGDHL_gt_DEBUGSeasonalEventSpawnChance_Func");
    TriggerAddEventChatMessage(libGDHL_gt_DEBUGSeasonalEventSpawnChance, c_playerAny, "-seasonaleventchance", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Seasonal Event Victory Chance
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_DEBUGSeasonalEventVictoryChance_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_chance;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(libGame_gv_teams[1].lv_core, "StatusSet SeasonalEventVictory 1");
    libNtve_gf_SendActorMessageToUnit(libGame_gv_teams[2].lv_core, "StatusSet SeasonalEventVictory 1");
    libGDHL_gv_starCraftEvent.lv_victorySequenceShouldPlay[1] = true;
    libGDHL_gv_starCraftEvent.lv_victorySequenceShouldPlay[2] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_DEBUGSeasonalEventVictoryChance_Init () {
    libGDHL_gt_DEBUGSeasonalEventVictoryChance = TriggerCreate("libGDHL_gt_DEBUGSeasonalEventVictoryChance_Func");
    TriggerAddEventChatMessage(libGDHL_gt_DEBUGSeasonalEventVictoryChance, c_playerAny, "-seasonaleventvictory", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hallow's End Headless Horseman Finale
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HallowsEndHeadlessHorsemanFinale_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owner;
    point lv_corePosition;

    // Variable Initialization
    lv_owner = UnitGetOwner(EventUnit());
    lv_corePosition = UnitGetPosition(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(3.5, c_timeGame);
    libNtve_gf_CreateActorAtPoint("HeadlessHorseman", lv_corePosition);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HallowsEndHeadlessHorsemanFinale_Init () {
    libGDHL_gt_HallowsEndHeadlessHorsemanFinale = TriggerCreate("libGDHL_gt_HallowsEndHeadlessHorsemanFinale_Func");
    TriggerEnable(libGDHL_gt_HallowsEndHeadlessHorsemanFinale, false);
    TriggerAddEventUnitDied(libGDHL_gt_HallowsEndHeadlessHorsemanFinale, UnitRefFromVariable("libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core"));
    TriggerAddEventUnitDied(libGDHL_gt_HallowsEndHeadlessHorsemanFinale, UnitRefFromVariable("libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hallow's End Headless Horseman Debug
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HallowsEndHeadlessHorsemanDebug_Func (bool testConds, bool runActions) {
    int auto88BE156C_ae;

    // Variable Declarations
    int lv_itcreate;
    point lv_corePosition;

    // Variable Initialization
    lv_corePosition = UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core);

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_GDHL_DF1DAB94"), true);
    Wait(1.0, c_timeGame);
    if ((EventChatMessage(false) == "headlesshorseman-crazy")) {
        auto88BE156C_ae = 50;
        lv_itcreate = 1;
        for ( ; lv_itcreate <= auto88BE156C_ae ; lv_itcreate += 1 ) {
            Wait(0.0625, c_timeGame);
            libNtve_gf_CreateActorAtPoint("HeadlessHorseman", RegionRandomPoint(RegionCircle(lv_corePosition, 10.0)));
        }
    }
    else {
        libNtve_gf_CreateActorAtPoint("HeadlessHorseman", lv_corePosition);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HallowsEndHeadlessHorsemanDebug_Init () {
    libGDHL_gt_HallowsEndHeadlessHorsemanDebug = TriggerCreate("libGDHL_gt_HallowsEndHeadlessHorsemanDebug_Func");
    TriggerAddEventChatMessage(libGDHL_gt_HallowsEndHeadlessHorsemanDebug, c_playerAny, "headlesshorseman", true);
    TriggerAddEventChatMessage(libGDHL_gt_HallowsEndHeadlessHorsemanDebug, c_playerAny, "headlesshorseman-crazy", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LNY - Timer Logic
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LNYTimerLogic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libGDHL_gv_lNYTimer, libGDHL_gv_lNYTimeWindow_C, false, c_timeGame);
    DialogControlSetVisible(libGDHL_gv_lNYUI.lv_timer, libGDHL_gv_lNY_PlayerGroupForEvent, true);
    while ((TimerGetRemaining(libGDHL_gv_lNYTimer) > 0.0)) {
        if ((TimerGetRemaining(libGDHL_gv_lNYTimer) < 5.0)) {
            libGDHL_gv_lNYUI.lv_timeAlmostComplete = true;
            if ((UnitIsAlive(libGDHL_gv_lNYUnit[libGame_gv_teamOrderIndex_C]) == true)) {
                TextExpressionSetToken("Param/Expression/lib_GDHL_A82E3E5C", "A", TextTimeFormat(StringToText("<sectotal/>"), FixedToInt(TimerGetRemaining(libGDHL_gv_lNYTimer))));
                libNtve_gf_SetDialogItemText(libGDHL_gv_lNYUI.lv_unitStatusBarText[libGame_gv_teamOrderIndex_C], TextExpressionAssemble("Param/Expression/lib_GDHL_A82E3E5C"), PlayerGroupAll());
            }

            if ((UnitIsAlive(libGDHL_gv_lNYUnit[libGame_gv_teamChaosIndex_C]) == true)) {
                TextExpressionSetToken("Param/Expression/lib_GDHL_8C213D65", "A", TextTimeFormat(StringToText("<sectotal/>"), FixedToInt(TimerGetRemaining(libGDHL_gv_lNYTimer))));
                libNtve_gf_SetDialogItemText(libGDHL_gv_lNYUI.lv_unitStatusBarText[libGame_gv_teamChaosIndex_C], TextExpressionAssemble("Param/Expression/lib_GDHL_8C213D65"), PlayerGroupAll());
            }

        }

        libNtve_gf_SetDialogItemText(libGDHL_gv_lNYUI.lv_timer, TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(libGDHL_gv_lNYTimer))), PlayerGroupAll());
        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LNYTimerLogic_Init () {
    libGDHL_gt_LNYTimerLogic = TriggerCreate("libGDHL_gt_LNYTimerLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LNY - LNY Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LNYLNYTimerExpires_Func (bool testConds, bool runActions) {
    int autoFB383C56_ae;
    int autoFB383C56_ai;
    playergroup auto659189E6_g;
    int auto659189E6_p;
    unitgroup auto8784F3C1_g;
    int auto8784F3C1_u;

    // Variable Declarations
    int lv_itTeam;
    int lv_itPlayer;
    unit lv_itHero;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((UnitIsValid(libGDHL_gv_lNYUnit[libGame_gv_teamOrderIndex_C]) == true)) {
        UnitCreateEffectUnit(libGDHL_gv_lNYUnit[libGame_gv_teamOrderIndex_C], "SuicideTimeout", libGDHL_gv_lNYUnit[libGame_gv_teamOrderIndex_C]);
    }

    if ((UnitIsValid(libGDHL_gv_lNYUnit[libGame_gv_teamChaosIndex_C]) == true)) {
        UnitCreateEffectUnit(libGDHL_gv_lNYUnit[libGame_gv_teamChaosIndex_C], "SuicideTimeout", libGDHL_gv_lNYUnit[libGame_gv_teamChaosIndex_C]);
    }

    autoFB383C56_ae = libGame_gv_teamChaosIndex_C;
    autoFB383C56_ai = 1;
    lv_itTeam = libGame_gv_teamOrderIndex_C;
    for ( ; ( (autoFB383C56_ai >= 0 && lv_itTeam <= autoFB383C56_ae) || (autoFB383C56_ai <= 0 && lv_itTeam >= autoFB383C56_ae) ) ; lv_itTeam += autoFB383C56_ai ) {
        auto659189E6_g = libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false); 
        auto659189E6_p = 1;
        for ( ; auto659189E6_p <= PlayerGroupCount(auto659189E6_g) ; auto659189E6_p += (lv_itPlayer == PlayerGroupPlayer(auto659189E6_g, auto659189E6_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto659189E6_g, auto659189E6_p);
            if ((UnitGetType(libGame_gv_players[lv_itPlayer].lv_heroUnit) == "HeroBarbarian")) {
                UnitSetPropertyFixed(libGame_gv_players[lv_itPlayer].lv_heroUnit, c_unitPropEnergyPercent, 0.0);
            }
            else {
                UnitSetPropertyFixed(libGame_gv_players[lv_itPlayer].lv_heroUnit, c_unitPropEnergyPercent, 100.0);
                auto8784F3C1_g = libGame_gv_players[lv_itPlayer].lv_heroUnitGroup;
                auto8784F3C1_u = 1;
                for ( ; auto8784F3C1_u <= UnitGroupCount(auto8784F3C1_g, c_unitCountAll) ; auto8784F3C1_u += (lv_itHero == UnitGroupUnit(auto8784F3C1_g, auto8784F3C1_u)) ) {
                    lv_itHero = UnitGroupUnit(auto8784F3C1_g, auto8784F3C1_u);
                    UnitSetPropertyFixed(lv_itHero, c_unitPropEnergyPercent, 100.0);
                }
            }
        }
    }
    Wait(0.5, c_timeGame);
    TriggerEnable(libGDHL_gt_LNYLunarNewYearClickableUnitClicked, false);
    TriggerEnable(libGDHL_gt_LNYPlayerClicksOnLunarNewYearUnit, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LNYLNYTimerExpires_Init () {
    libGDHL_gt_LNYLNYTimerExpires = TriggerCreate("libGDHL_gt_LNYLNYTimerExpires_Func");
    TriggerEnable(libGDHL_gt_LNYLNYTimerExpires, false);
    TriggerAddEventTimer(libGDHL_gt_LNYLNYTimerExpires, libGDHL_gv_lNYTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LNY - Run Event Initialization
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LNYRunEventInitialization_Func (bool testConds, bool runActions) {
    int auto80122CB5_ae;
    int auto80122CB5_ai;

    // Variable Declarations
    int lv_itTeam;
    int lv_itPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSGameMode == libCore_ge_GameModes_Normal))) {
            return false;
        }

        if (!((libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core != null))) {
            return false;
        }

        if (!((libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gf_LNYHUDUIInit(libUIUI_gv_mapMechanicsPanel.lv_mainPanel);
    libGDHL_gf_LNYShowQuestNotification(libGDHL_gv_lNY_PlayerGroupForEventRepeat);
    libGDHL_gf_LNYDetermineWhichPlayersAreWatchingVideo(libGDHL_gv_lNY_PlayerGroupForEvent);
    libGDHL_gf_LNYSetSmartInteractionRange();
    auto80122CB5_ae = libGame_gv_teamChaosIndex_C;
    auto80122CB5_ai = 1;
    lv_itTeam = libGame_gv_teamOrderIndex_C;
    for ( ; ( (auto80122CB5_ai >= 0 && lv_itTeam <= auto80122CB5_ae) || (auto80122CB5_ai <= 0 && lv_itTeam >= auto80122CB5_ae) ) ; lv_itTeam += auto80122CB5_ai ) {
        if ((libGDHL_gv_lNYTeamShouldGetEvent[lv_itTeam] == true)) {
            libGDHL_gf_LNYSpawnUnitsForTeam(lv_itTeam);
            libGDHL_gf_LNYMovingLogic(libGDHL_gv_lNYUnit[lv_itTeam]);
            libGDHL_gf_LNYProgressLogic(libGDHL_gv_lNYUnit[lv_itTeam]);
            PingCreateFromData(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), "StormAlert", UnitGetPosition(libGDHL_gv_lNYUnit[lv_itTeam]));
            libGDHL_gv_lNYPing[lv_itTeam] = PingLastCreated();
            PingSetUnit(PingLastCreated(), libGDHL_gv_lNYUnit[lv_itTeam]);
        }
        else {
            DialogControlSetVisible(libGDHL_gv_lNYUI.lv_hudPanel, libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false), false);
        }
    }
    TriggerExecute(libGDHL_gt_LNYTimerLogic, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LNYRunEventInitialization_Init () {
    libGDHL_gt_LNYRunEventInitialization = TriggerCreate("libGDHL_gt_LNYRunEventInitialization_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LNY - Player Clicks On Lunar New Year Unit
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LNYPlayerClicksOnLunarNewYearUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnitTargetUnit()) == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_team = libGame_gv_teamOrderIndex_C;
    }
    else {
        lv_team = libGame_gv_teamChaosIndex_C;
    }
    if ((UnitGetType(EventUnitTargetUnit()) == "LNYLunarNewYearUnit") && (libGDHL_gv_lNYUI.lv_timeAlmostComplete == false)) {
        libNtve_gf_SetDialogItemText(libGDHL_gv_lNYUI.lv_unitStatusBarText[lv_team], StringExternal("Param/Value/lib_GDHL_667B6A4F"), PlayerGroupSingle(EventPlayer()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LNYPlayerClicksOnLunarNewYearUnit_Init () {
    libGDHL_gt_LNYPlayerClicksOnLunarNewYearUnit = TriggerCreate("libGDHL_gt_LNYPlayerClicksOnLunarNewYearUnit_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_LNYPlayerClicksOnLunarNewYearUnit, null, AbilityCommand("SmartCommandUnitInteraction", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LNY - Player Stops Catching Lunar New Year Unit
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LNYPlayerStopsCatchingLunarNewYearUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerTeam;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerTeam = libGame_gf_TeamNumberOfPlayer(EventPlayer());
    if ((UnitIsAlive(libGDHL_gv_lNYUnit[lv_playerTeam]) == true) && (libGDHL_gv_lNYUI.lv_timeAlmostComplete == false)) {
        libNtve_gf_SetDialogItemText(libGDHL_gv_lNYUI.lv_unitStatusBarText[lv_playerTeam], StringExternal("Param/Value/lib_GDHL_09438CE3"), PlayerGroupSingle(EventPlayer()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LNYPlayerStopsCatchingLunarNewYearUnit_Init () {
    libGDHL_gt_LNYPlayerStopsCatchingLunarNewYearUnit = TriggerCreate("libGDHL_gt_LNYPlayerStopsCatchingLunarNewYearUnit_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_LNYPlayerStopsCatchingLunarNewYearUnit, null, "LNYLunarNewYearCasterBehavior", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LNY - Lunar New Year Unit Dies
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LNYLunarNewYearUnitDies_Func (bool testConds, bool runActions) {
    playergroup auto3F7D2002_g;
    int auto3F7D2002_p;
    playergroup auto4DE249C6_g;
    int auto4DE249C6_p;

    // Variable Declarations
    int lv_team;
    int lv_itPlayer;
    unit lv_itUnit;
    point lv_deathLocation;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "LNYLunarNewYearUnit"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deathLocation = UnitGetPosition(EventUnit());
    if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_team = libGame_gv_teamOrderIndex_C;
    }
    else {
        lv_team = libGame_gv_teamChaosIndex_C;
    }
    DialogControlSetVisible(libGDHL_gv_lNYUI.lv_backgroundPanel, libGame_gf_PlayersOnTeamHeroes(lv_team, false), false);
    DialogControlSetVisible(libGDHL_gv_lNYUI.lv_timer, libGame_gf_PlayersOnTeamHeroes(lv_team, false), false);
    DialogControlSetVisible(libGDHL_gv_lNYUI.lv_healthBarBG, libGame_gf_PlayersOnTeamHeroes(lv_team, false), false);
    if (((UnitIsAlive(libGDHL_gv_lNYUnit[libGame_gv_teamOrderIndex_C]) == false) || (libGDHL_gv_lNYUnit[libGame_gv_teamOrderIndex_C] == null)) && ((UnitIsAlive(libGDHL_gv_lNYUnit[libGame_gv_teamChaosIndex_C]) == false) || (libGDHL_gv_lNYUnit[libGame_gv_teamChaosIndex_C] == null))) {
        DialogControlSetVisible(libGDHL_gv_lNYUI.lv_hudPanel, PlayerGroupSingle(libCore_gv_oBSERVER_ObserverUIPlayer), false);
    }

    PingDestroy(libGDHL_gv_lNYPing[lv_team]);
    UnitRemove(libGDHL_gv_lNYProgressUnit[lv_team]);
    if (((libGDHL_gv_lNY_TeamCompletedEvent[lv_team] == true) || (libNtve_gf_KillingPlayer() <= libCore_gv_bALMaxPlayers))) {
        libGDHL_gv_lNYEventSuccessfullyCompleted[lv_team] = true;
        libGDHL_gf_LNYShowQuestCompleteNotification(libGame_gf_PlayersOnTeamHeroes(lv_team, false));
        UnitCreate(1, "LNYLunarNewYearClickableUnit", c_unitCreateIgnorePlacement, EventPlayer(), lv_deathLocation, 270.0);
        libGDHL_gf_LNYLunarNewYearClickableUnitRewardLogic(UnitLastCreated());
        auto4DE249C6_g = libGame_gv_teams[lv_team].lv_teamPlayerGroupNoNPCPlayers; 
        auto4DE249C6_p = 1;
        for ( ; auto4DE249C6_p <= PlayerGroupCount(auto4DE249C6_g) ; auto4DE249C6_p += (lv_itPlayer == PlayerGroupPlayer(auto4DE249C6_g, auto4DE249C6_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto4DE249C6_g, auto4DE249C6_p);
            libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_itPlayer, "LunarNewYearEventCompleted", 1);
            if ((PlayerHasReward(lv_itPlayer, "MonkeyIsCaught") == true)) {
                PlayerGroupAdd(libGDHL_gv_lNY_PlayerGroupEventCompleteRepeat[lv_team], lv_itPlayer);
            }
            else {
                PlayerGroupAdd(libGDHL_gv_lNY_PlayerGroupEventCompleteFirst[lv_team], lv_itPlayer);
                libGDHL_gf_LNYAddUnitsToShowGoldFor(lv_itPlayer, lv_deathLocation);
            }
        }
    }
    else {
        libGDHL_gv_lNYEventSuccessfullyCompleted[lv_team] = false;
        auto3F7D2002_g = libGame_gv_teams[lv_team].lv_teamPlayerGroupNoNPCPlayers; 
        auto3F7D2002_p = 1;
        for ( ; auto3F7D2002_p <= PlayerGroupCount(auto3F7D2002_g) ; auto3F7D2002_p += (lv_itPlayer == PlayerGroupPlayer(auto3F7D2002_g, auto3F7D2002_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto3F7D2002_g, auto3F7D2002_p);
            PlayerGroupAdd(libGDHL_gv_lNY_PlayerGroupEventFailure[lv_team], lv_itPlayer);
        }
    }
    libGDHL_gf_LNYPlayLNYOutroVOForTeam(lv_team);
    libGDHL_gf_LNYShowHideOffscreenTrackerForTeam(false, lv_team);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LNYLunarNewYearUnitDies_Init () {
    libGDHL_gt_LNYLunarNewYearUnitDies = TriggerCreate("libGDHL_gt_LNYLunarNewYearUnitDies_Func");
    TriggerAddEventUnitDied(libGDHL_gt_LNYLunarNewYearUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LNY - Lunar New Year Clickable Unit Clicked
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LNYLunarNewYearClickableUnitClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_team;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    if ((lv_player == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_team = libGame_gv_teamOrderIndex_C;
    }
    else {
        lv_team = libGame_gv_teamChaosIndex_C;
    }
    libGDHL_gv_lNYRewardsGiven[lv_team] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LNYLunarNewYearClickableUnitClicked_Init () {
    libGDHL_gt_LNYLunarNewYearClickableUnitClicked = TriggerCreate("libGDHL_gt_LNYLunarNewYearClickableUnitClicked_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_LNYLunarNewYearClickableUnitClicked, c_playerAny, "LNYLunarNewYearClickableUnitDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - LNY Spawn Chance
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_DEBUGLNYSpawnChance_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_chance;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringSub(EventChatMessage(false), 12, 14) == "")) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_GDHL_A05C958A"), true);
    }
    else {
        lv_chance = StringToInt(StringSub(EventChatMessage(false), 12, 14));
        BankLoad("PlayerSettings", EventPlayer());
        BankValueSetFromInt(BankLastCreated(), "SeasonalEventChance", "Chance", lv_chance);
        BankSave(BankLastCreated());
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_GDHL_D38A8D4C") + IntToText(lv_chance)), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_DEBUGLNYSpawnChance_Init () {
    libGDHL_gt_DEBUGLNYSpawnChance = TriggerCreate("libGDHL_gt_DEBUGLNYSpawnChance_Func");
    TriggerAddEventChatMessage(libGDHL_gt_DEBUGLNYSpawnChance, c_playerAny, "-lnychance", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LNY - Lunar New Year Victory Sequence
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LNYLunarNewYearVictorySequence_Func (bool testConds, bool runActions) {
    int auto967E2C45_n;
    int auto967E2C45_i;
    int auto01E23575_ae;
    int auto01E23575_ai;

    // Variable Declarations
    point lv_corePosition;
    fixed lv_angle;
    fixed lv_distance;
    int lv_owner;
    int lv_itFirework;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((((EventUnit() == libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core) && (libGDHL_gv_lNYTeamShouldGetEvent[libGame_gv_teamChaosIndex_C] == true)) || ((EventUnit() == libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core) && (libGDHL_gv_lNYTeamShouldGetEvent[libGame_gv_teamOrderIndex_C] == true))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_corePosition = UnitGetPosition(EventUnit());
    lv_owner = UnitGetOwner(EventUnit());
    ActorCreate(ActorScopeFromUnit(EventUnit()), "LNYLunarNewYearVictoryAttacher", null, null, null);
    auto967E2C45_n = libGDHL_gv_lNYNumberOfFireworkVolleys_C;
    for (auto967E2C45_i = 1; auto967E2C45_i <= auto967E2C45_n; auto967E2C45_i += 1) {
        auto01E23575_ae = libGDHL_gv_lNYNumberOfFireworksPerVolley_C;
        auto01E23575_ai = 1;
        lv_itFirework = 1;
        for ( ; ( (auto01E23575_ai >= 0 && lv_itFirework <= auto01E23575_ae) || (auto01E23575_ai <= 0 && lv_itFirework >= auto01E23575_ae) ) ; lv_itFirework += auto01E23575_ai ) {
            lv_angle = libNtve_gf_RandomAngle();
            lv_distance = RandomFixed(4.0, 7.0);
            libNtve_gf_CreateActorAtPoint("LNYLunarNewYearVictoryFirework", PointWithOffsetPolar(lv_corePosition, lv_distance, lv_angle));
        }
        Wait(1.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LNYLunarNewYearVictorySequence_Init () {
    libGDHL_gt_LNYLunarNewYearVictorySequence = TriggerCreate("libGDHL_gt_LNYLunarNewYearVictorySequence_Func");
    TriggerAddEventUnitDied(libGDHL_gt_LNYLunarNewYearVictorySequence, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LNY - Lunar New Year Victory Sequence Test
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LNYLunarNewYearVictorySequenceTest_Func (bool testConds, bool runActions) {
    int auto1202E946_n;
    int auto1202E946_i;
    int auto45B973F1_ae;
    int auto45B973F1_ai;

    // Variable Declarations
    point lv_corePosition;
    fixed lv_angle;
    fixed lv_distance;
    int lv_owner;
    int lv_itFirework;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_corePosition = UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core);
    lv_owner = UnitGetOwner(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core);
    ActorCreate(ActorScopeFromUnit(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core), "LNYLunarNewYearVictoryAttacher", null, null, null);
    auto1202E946_n = libGDHL_gv_lNYNumberOfFireworkVolleys_C;
    for (auto1202E946_i = 1; auto1202E946_i <= auto1202E946_n; auto1202E946_i += 1) {
        auto45B973F1_ae = libGDHL_gv_lNYNumberOfFireworksPerVolley_C;
        auto45B973F1_ai = 1;
        lv_itFirework = 1;
        for ( ; ( (auto45B973F1_ai >= 0 && lv_itFirework <= auto45B973F1_ae) || (auto45B973F1_ai <= 0 && lv_itFirework >= auto45B973F1_ae) ) ; lv_itFirework += auto45B973F1_ai ) {
            lv_angle = libNtve_gf_RandomAngle();
            lv_distance = RandomFixed(4.0, 7.0);
            libNtve_gf_CreateActorAtPoint("LNYLunarNewYearVictoryFirework", PointWithOffsetPolar(lv_corePosition, lv_distance, lv_angle));
        }
        Wait(1.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LNYLunarNewYearVictorySequenceTest_Init () {
    libGDHL_gt_LNYLunarNewYearVictorySequenceTest = TriggerCreate("libGDHL_gt_LNYLunarNewYearVictorySequenceTest_Func");
    TriggerAddEventChatMessage(libGDHL_gt_LNYLunarNewYearVictorySequenceTest, c_playerAny, "-lnyvictory", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LNY - Announce LNY Countdown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LNYAnnounceLNYCountdown_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_Tutorial1)) {
        while (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            Wait(0.5, c_timeGame);
        }
        TimerStart(libGame_gv_openTheGatesTimer, 16.0, false, c_timeGame);
    }
    else {
        libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 34.0, false);
        libGDHL_gf_LNYPlayLNYIntroVOForPlayerGroups();
    }
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 12.125, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 10.125, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 5.125, false);
    Wait(1.0, c_timeGame);
    Wait(1.0, c_timeGame);
    Wait(1.0, c_timeGame);
    Wait(1.0, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LNYAnnounceLNYCountdown_Init () {
    libGDHL_gt_LNYAnnounceLNYCountdown = TriggerCreate("libGDHL_gt_LNYAnnounceLNYCountdown_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LNY - Announce Normal Countdown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LNYAnnounceNormalCountdown_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_Tutorial1)) {
        while (!((libNtve_gf_PlayerInCinematicMode(1) == false))) {
            Wait(0.5, c_timeGame);
        }
        TimerStart(libGame_gv_openTheGatesTimer, 16.0, false, c_timeGame);
    }
    else {
        libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 34.0, false);
        libGame_gf_AnnouncementAddItemForPlayerGroup(libGDHL_gv_lNY_PlayerGroupNoEvent, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_GetReadyForBattle, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    }
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 12.125, false);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libGDHL_gv_lNY_PlayerGroupNoEvent, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_BattleStartingIn, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 10.125, false);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libGDHL_gv_lNY_PlayerGroupNoEvent, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown10, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 5.125, false);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libGDHL_gv_lNY_PlayerGroupNoEvent, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown5, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libGDHL_gv_lNY_PlayerGroupNoEvent, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown4, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libGDHL_gv_lNY_PlayerGroupNoEvent, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown3, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libGDHL_gv_lNY_PlayerGroupNoEvent, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown2, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libGDHL_gv_lNY_PlayerGroupNoEvent, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown1, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LNYAnnounceNormalCountdown_Init () {
    libGDHL_gt_LNYAnnounceNormalCountdown = TriggerCreate("libGDHL_gt_LNYAnnounceNormalCountdown_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: StarCraft Event - Team Gets Event
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_StarCraftEventTeamGetsEvent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    point lv_artifactSpawnOriginPoint;
    fixed lv_artifactSpawnDefaultAngle;
    int lv_artifactSpawnPoint;
    bool lv_dummyPlayerHasDailyQuestBoolean;

    // Variable Initialization
    lv_dummyPlayerHasDailyQuestBoolean = true;

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSGameMode == libCore_ge_GameModes_Normal))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_team = libGame_gf_SeasonalEventTeamGetsEventTeam();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_StarCraftEventTeamGetsEvent_Init () {
    libGDHL_gt_StarCraftEventTeamGetsEvent = TriggerCreate("libGDHL_gt_StarCraftEventTeamGetsEvent_Func");
    libGame_gf_SeasonalEventTeamGetsEvent(libGDHL_gt_StarCraftEventTeamGetsEvent);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StarCraft Event - Identify Gates As Valid Points
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_StarCraftEventIdentifyGatesAsValidPoints_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_region;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libMapM_gf_MapMechanicExistsOnMap("TowersOfDoom") == true)) {
        libGDHL_gv_starCraftEvent.lv_dropshipNullZoneRadius = 9;
        libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[1][libGame_gv_teamOrderIndex_C] = libNtve_gf_PointOffsetTowardsPoint(Point(58.5, 111.0), 1.0, UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core));
        libGDHL_gv_starCraftEvent.lv_sCVDropshipCount[libGame_gv_teamOrderIndex_C] += 1;
        libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[2][libGame_gv_teamOrderIndex_C] = libNtve_gf_PointOffsetTowardsPoint(Point(63.0, 92.0), 1.0, UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core));
        libGDHL_gv_starCraftEvent.lv_sCVDropshipCount[libGame_gv_teamOrderIndex_C] += 1;
        libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[3][libGame_gv_teamOrderIndex_C] = libNtve_gf_PointOffsetTowardsPoint(Point(59.0, 75.0), 1.0, UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core));
        libGDHL_gv_starCraftEvent.lv_sCVDropshipCount[libGame_gv_teamOrderIndex_C] += 1;
        libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[1][libGame_gv_teamChaosIndex_C] = libNtve_gf_PointOffsetTowardsPoint(Point(190.0, 111.0), 1.0, UnitGetPosition(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core));
        libGDHL_gv_starCraftEvent.lv_sCVDropshipCount[libGame_gv_teamChaosIndex_C] += 1;
        libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[2][libGame_gv_teamChaosIndex_C] = libNtve_gf_PointOffsetTowardsPoint(Point(185.0, 93.0), 1.0, UnitGetPosition(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core));
        libGDHL_gv_starCraftEvent.lv_sCVDropshipCount[libGame_gv_teamChaosIndex_C] += 1;
        libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[3][libGame_gv_teamChaosIndex_C] = libNtve_gf_PointOffsetTowardsPoint(Point(187.0, 74.0), 1.0, UnitGetPosition(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core));
        libGDHL_gv_starCraftEvent.lv_sCVDropshipCount[libGame_gv_teamChaosIndex_C] += 1;
    }
    else {
        IntLoopBegin(1, libGame_gv_townTownCount);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if (((libGame_gv_townTownData[IntLoopCurrent()].lv_lane == 1) || (libGame_gv_townTownData[IntLoopCurrent()].lv_lane == 2) || (libGame_gv_townTownData[IntLoopCurrent()].lv_lane == 3)) && (libGame_gv_townTownData[IntLoopCurrent()].lv_owner == 11) && (RegionContainsPoint(libCore_gv_mAPOrderBaseRegion, RegionGetCenter(libGame_gv_townTownData[IntLoopCurrent()].lv_townRegion)) == true)) {
                UnitGroupLoopBegin(UnitGroup(null, 11, libGame_gv_townTownData[IntLoopCurrent()].lv_townRegion, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterArmored) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((libGame_gf_TownGetTownStructurePresetFromUnit(UnitGroupLoopCurrent()) == libGame_ge_TownStructureTypes_Gate) && (UnitGroupCount(UnitGroup(null, 11, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 5.0), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 2)) {
                        libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[libGame_gv_townTownData[IntLoopCurrent()].lv_lane][libGame_gv_teamOrderIndex_C] = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(UnitGroupLoopCurrent()), 5.0, UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core));
                        libGDHL_gv_starCraftEvent.lv_sCVDropshipCount[libGame_gv_teamOrderIndex_C] += 1;
                    }

                }
                UnitGroupLoopEnd();
            }

        }
        IntLoopEnd();
        IntLoopBegin(1, libGame_gv_townTownCount);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            if (((libGame_gv_townTownData[IntLoopCurrent()].lv_lane == 1) || (libGame_gv_townTownData[IntLoopCurrent()].lv_lane == 2) || (libGame_gv_townTownData[IntLoopCurrent()].lv_lane == 3)) && (libGame_gv_townTownData[IntLoopCurrent()].lv_owner == 12) && (RegionContainsPoint(libCore_gv_mAPChaosBaseRegion, RegionGetCenter(libGame_gv_townTownData[IntLoopCurrent()].lv_townRegion)) == true)) {
                UnitGroupLoopBegin(UnitGroup(null, 12, libGame_gv_townTownData[IntLoopCurrent()].lv_townRegion, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterArmored) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    if ((libGame_gf_TownGetTownStructurePresetFromUnit(UnitGroupLoopCurrent()) == libGame_ge_TownStructureTypes_Gate) && (UnitGroupCount(UnitGroup(null, 12, RegionCircle(UnitGetPosition(UnitGroupLoopCurrent()), 5.0), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) >= 2)) {
                        libGDHL_gv_starCraftEvent.lv_sCVDropshipLocations[libGame_gv_townTownData[IntLoopCurrent()].lv_lane][libGame_gv_teamChaosIndex_C] = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(UnitGroupLoopCurrent()), 5.0, UnitGetPosition(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core));
                        libGDHL_gv_starCraftEvent.lv_sCVDropshipCount[libGame_gv_teamChaosIndex_C] += 1;
                    }

                }
                UnitGroupLoopEnd();
            }

        }
        IntLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_StarCraftEventIdentifyGatesAsValidPoints_Init () {
    libGDHL_gt_StarCraftEventIdentifyGatesAsValidPoints = TriggerCreate("libGDHL_gt_StarCraftEventIdentifyGatesAsValidPoints_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: StarCraft Event - Player Begins Collecting Artifact
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_StarCraftEventPlayerBeginsCollectingArtifact_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitTargetUnit()) == "XelnagaArtifactPiece"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagShow(libCore_gf_TextTagStoredForUnit(EventUnitTargetUnit(), 1), PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_StarCraftEventPlayerBeginsCollectingArtifact_Init () {
    libGDHL_gt_StarCraftEventPlayerBeginsCollectingArtifact = TriggerCreate("libGDHL_gt_StarCraftEventPlayerBeginsCollectingArtifact_Func");
    TriggerEnable(libGDHL_gt_StarCraftEventPlayerBeginsCollectingArtifact, false);
    TriggerAddEventUnitAbility(libGDHL_gt_StarCraftEventPlayerBeginsCollectingArtifact, null, AbilityCommand("CaptureMacGuffinTwo", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StarCraft Event - Player Stops Collecting Artifact
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_StarCraftEventPlayerStopsCollectingArtifact_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitTargetUnit()) == "XelnagaArtifactPiece"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(EventUnitTargetUnit()) == true) && (UnitHasBehavior2(EventUnitTargetUnit(), "StarCraftEventSCVCarryingArtifactPiece") == false)) {
        TextTagShow(libCore_gf_TextTagStoredForUnit(EventUnitTargetUnit(), 1), PlayerGroupAll(), true);
        UnitBehaviorRemove(EventUnitTargetUnit(), "XelnagaArtifactPieceInUse", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_StarCraftEventPlayerStopsCollectingArtifact_Init () {
    libGDHL_gt_StarCraftEventPlayerStopsCollectingArtifact = TriggerCreate("libGDHL_gt_StarCraftEventPlayerStopsCollectingArtifact_Func");
    TriggerEnable(libGDHL_gt_StarCraftEventPlayerStopsCollectingArtifact, false);
    TriggerAddEventUnitAbility(libGDHL_gt_StarCraftEventPlayerStopsCollectingArtifact, null, AbilityCommand("CaptureMacGuffinTwo", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StarCraft Event - Artifact Piece Gets Collected
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_StarCraftEventArtifactPieceGetsCollected_Func (bool testConds, bool runActions) {
    playergroup auto3CE7A9F1_g;
    int auto3CE7A9F1_p;
    playergroup auto13E4055D_g;
    int auto13E4055D_p;

    // Variable Declarations
    int lv_noVisionComputerPlayer;
    int lv_collectedPlayer;
    int lv_collectedTeam;
    unit lv_macGuffinUnit;
    int lv_itArtifactIndex;
    int lv_targetedArtifactIndex;
    point lv_positionOfMacguffinUnit;
    unitgroup lv_artifactsThatWontDie;
    int lv_sCVLaneIndex;
    int lv_sCVSpawnIndex;
    unit lv_sCVUnit;
    point lv_pointToCreateAssembledArtifact;
    point lv_startLocationReferencePoint;
    int lv_artifactPiecesCollected;
    int lv_itPlayer;
    int lv_itPlayerGall;
    int lv_artifactPiecesCollectedGall;

    // Variable Initialization
    lv_macGuffinUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_artifactsThatWontDie = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "XelnagaArtifactPiece"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_collectedPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_collectedTeam = libGame_gf_TeamNumberOfPlayer(lv_collectedPlayer);
    libGDHL_gv_starCraftEvent.lv_teamProgress[lv_collectedTeam] += 1;
    lv_positionOfMacguffinUnit = UnitGetPosition(lv_macGuffinUnit);
    libGDHL_gf_StarCraftEventUpdateProgressCounterForTeam(lv_collectedTeam);
    auto3CE7A9F1_g = libGame_gf_PlayersOnTeamHeroes(lv_collectedTeam, false); 
    auto3CE7A9F1_p = 1;
    for ( ; auto3CE7A9F1_p <= PlayerGroupCount(auto3CE7A9F1_g) ; auto3CE7A9F1_p += (lv_itPlayer == PlayerGroupPlayer(auto3CE7A9F1_g, auto3CE7A9F1_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto3CE7A9F1_g, auto3CE7A9F1_p);
        lv_artifactPiecesCollected = PlayerScoreValueGetAsInt(lv_itPlayer, "StarcraftPiecesCollected");
        lv_artifactPiecesCollected += 1;
        PlayerScoreValueSetFromInt(lv_itPlayer, "StarcraftPiecesCollected", lv_artifactPiecesCollected);
    }
    TextTagDestroy(libCore_gf_TextTagStoredForUnit(lv_macGuffinUnit, 1));
    TextTagCreate(StringExternal("Param/Value/lib_GDHL_5A29A3BA"), 24, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 3.0, true, true, PlayerGroupSingle(lv_collectedPlayer));
    TextTagSetVelocity(TextTagLastCreated(), 1.5, 90.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 4.0);
    UnitGroupLoopBegin(libGDHL_gv_starCraftEvent.lv_sCVUnitGroup[lv_collectedTeam]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_sCVLaneIndex = FixedToInt(UnitGetCustomValue(UnitGroupLoopCurrent(), 0));
        lv_sCVSpawnIndex = FixedToInt(UnitGetCustomValue(UnitGroupLoopCurrent(), 1));
        if ((lv_macGuffinUnit == libGDHL_gv_starCraftEvent.lv_sCVTargetArtifact[lv_sCVLaneIndex][lv_sCVSpawnIndex][lv_collectedTeam])) {
            lv_sCVUnit = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    UnitKill(lv_macGuffinUnit);
    UnitGroupRemove(libGDHL_gv_starCraftEvent.lv_artifactUnitGroup[lv_collectedTeam], lv_macGuffinUnit);
    if ((libGDHL_gv_starCraftEvent.lv_hUDProgressBarUnit[lv_collectedTeam] == null)) {
        libGDHL_gf_StarCraftEventSetUpProgressBarForTeam(lv_collectedTeam);
        libGDHL_gf_StarCraftEventSpawnNewArtifact(lv_collectedTeam, lv_positionOfMacguffinUnit);
        if ((lv_sCVUnit != null)) {
            libGDHL_gf_StarCraftEventIssueGatherOrderToSCVForTeam(lv_sCVUnit, false, lv_collectedTeam);
        }

    }
    else {
        UnitSetPropertyFixed(libGDHL_gv_starCraftEvent.lv_hUDProgressBarUnit[lv_collectedTeam], c_unitPropLife, libGDHL_gv_starCraftEvent.lv_teamProgress[lv_collectedTeam]);
        if ((libGDHL_gv_starCraftEvent.lv_teamProgress[lv_collectedTeam] == libGDHL_gv_starCraftEvent.lv_teamRequiredProgress[lv_collectedTeam])) {
            libGDHL_gv_starCraftEvent.lv_continueSpawningArtifacts[lv_collectedTeam] = false;
            libGDHL_gv_starCraftEvent.lv_victorySequenceShouldPlay[lv_collectedTeam] = true;
            auto13E4055D_g = libGame_gv_teams[lv_collectedTeam].lv_teamPlayerGroupNoNPCPlayers; 
            auto13E4055D_p = 1;
            for ( ; auto13E4055D_p <= PlayerGroupCount(auto13E4055D_g) ; auto13E4055D_p += (lv_itPlayer == PlayerGroupPlayer(auto13E4055D_g, auto13E4055D_p)) ) {
                lv_itPlayer = PlayerGroupPlayer(auto13E4055D_g, auto13E4055D_p);
                libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_itPlayer, "StarcraftDailyEventCompleted", 1);
                libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_collectedPlayer, "StarcraftPiecesCollected", PlayerScoreValueGetAsInt(lv_collectedPlayer, "StarcraftPiecesCollected"));
            }
            SoundPlayForPlayer(SoundLink("Event_SCEvent_Complete", -1), lv_collectedPlayer, libGame_gf_PlayersOnTeamHeroes(lv_collectedTeam, false), 100.0, 0.0);
            libNtve_gf_SendActorMessageToUnit(libGame_gv_teams[libGame_gf_EnemyTeam(lv_collectedTeam)].lv_core, "StatusSet SeasonalEventVictory 1");
            TextTagDestroy(libCore_gf_TextTagStoredForUnit(libGDHL_gv_starCraftEvent.lv_sCVUnit[lv_targetedArtifactIndex][lv_collectedTeam], 1));
            libGDHL_gf_StarCraftEventPlaySuccessEndVOForTeam(lv_collectedTeam);
            DialogControlSendAnimationEvent(libGDHL_gv_starCraftEvent.lv_hUDProgressBackgroundContainer, libGame_gf_PlayersOnTeamHeroes(lv_collectedTeam, false), "Hide");
            DialogControlSendAnimationEvent(libGDHL_gv_starCraftEvent.lv_hUDTimer, libGame_gf_PlayersOnTeamHeroes(lv_collectedTeam, false), "Hide");
            DialogControlSetVisible(libGDHL_gv_starCraftEvent.lv_hUDProgressBackground, libGame_gf_PlayersOnTeamHeroes(lv_collectedTeam, false), false);
            DialogControlSetVisible(libGDHL_gv_starCraftEvent.lv_hUDTimer, libGame_gf_PlayersOnTeamHeroes(lv_collectedTeam, false), false);
            UnitGroupLoopBegin(libGDHL_gv_starCraftEvent.lv_sCVUnitGroup[lv_collectedTeam]);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "StarCraftEventSCVCarryingArtifact") == true)) {
                    UnitGroupAdd(lv_artifactsThatWontDie, libGDHL_gv_starCraftEvent.lv_sCVTargetArtifact[FixedToInt(UnitGetCustomValue(UnitGroupLoopCurrent(), 0))][FixedToInt(UnitGetCustomValue(UnitGroupLoopCurrent(), 1))][lv_collectedTeam]);
                }
                else {
                    libGDHL_gf_StarCraftEventMakeSCVReturnToDropship(UnitGroupLoopCurrent(), lv_collectedTeam);
                }
            }
            UnitGroupLoopEnd();
            UnitGroupLoopBegin(libGDHL_gv_starCraftEvent.lv_artifactUnitGroup[lv_collectedTeam]);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "StarCraftEventSCVCarryingArtifactPiece") == false)) {
                    UnitKill(UnitGroupLoopCurrent());
                    TextTagDestroy(libCore_gf_TextTagStoredForUnit(UnitGroupLoopCurrent(), 1));
                    UnitGroupRemove(libGDHL_gv_starCraftEvent.lv_artifactUnitGroup[lv_collectedTeam], UnitGroupLoopCurrent());
                }

            }
            UnitGroupLoopEnd();
            Wait(0.5, c_timeGame);
            if ((lv_collectedTeam == libGame_gv_teamOrderIndex_C)) {
                lv_startLocationReferencePoint = PlayerStartLocation(1);
                lv_noVisionComputerPlayer = libCore_gv_cOMPUTER_NoVision_TeamOrder;
            }
            else {
                lv_startLocationReferencePoint = PlayerStartLocation(6);
                lv_noVisionComputerPlayer = libCore_gv_cOMPUTER_NoVision_TeamChaos;
            }
            lv_pointToCreateAssembledArtifact = PointWithOffsetPolar(UnitGetPosition(libGame_gv_teams[lv_collectedTeam].lv_core), 6.0, (AngleBetweenPoints(UnitGetPosition(libGame_gv_teams[lv_collectedTeam].lv_core), lv_startLocationReferencePoint) + 180));
            UnitCreate(1, "XelnagaArtifact", c_unitCreateIgnorePlacement, lv_noVisionComputerPlayer, lv_pointToCreateAssembledArtifact, (AngleBetweenPoints(UnitGetPosition(libGame_gv_teams[lv_collectedTeam].lv_core), lv_startLocationReferencePoint) + 180));
            libGDHL_gv_starCraftEvent.lv_victoryArtifact[lv_collectedTeam] = UnitLastCreated();
            UnitBehaviorRemove(UnitLastCreated(), "XelnagaArtifactBirthBehavior", 1);
            DialogControlSendAnimationEvent(libGDHL_gv_starCraftEvent.lv_hUDQuestComplete, libGame_gf_PlayersOnTeamHeroes(lv_collectedTeam, false), "Show");
            Wait(5.0, c_timeGame);
            DialogControlSendAnimationEvent(libGDHL_gv_starCraftEvent.lv_hUDQuestComplete, libGame_gf_PlayersOnTeamHeroes(lv_collectedTeam, false), "Hide");
        }
        else {
            if ((libGDHL_gv_starCraftEvent.lv_continueSpawningArtifacts[lv_collectedTeam] == true)) {
                libGDHL_gf_StarCraftEventSpawnNewArtifact(lv_collectedTeam, lv_positionOfMacguffinUnit);
                if ((lv_sCVUnit != null)) {
                    libGDHL_gf_StarCraftEventIssueGatherOrderToSCVForTeam(lv_sCVUnit, false, lv_collectedTeam);
                }

            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_StarCraftEventArtifactPieceGetsCollected_Init () {
    libGDHL_gt_StarCraftEventArtifactPieceGetsCollected = TriggerCreate("libGDHL_gt_StarCraftEventArtifactPieceGetsCollected_Func");
    TriggerEnable(libGDHL_gt_StarCraftEventArtifactPieceGetsCollected, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_StarCraftEventArtifactPieceGetsCollected, c_playerAny, "CaptureMacGuffinTwoCastComplete");
}

//--------------------------------------------------------------------------------------------------
// Trigger: StarCraft Event - SCV Turns In Artifact Piece
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_StarCraftEventSCVTurnsInArtifactPiece_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_artifactUnit;
    int lv_team;
    unit lv_sCVUnit;
    int lv_sCVLaneIndex;
    int lv_sCVSpawnIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_sCVUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_sCVLaneIndex = FixedToInt(UnitGetCustomValue(lv_sCVUnit, 0));
    lv_sCVSpawnIndex = FixedToInt(UnitGetCustomValue(lv_sCVUnit, 1));
    UnitBehaviorRemove(lv_sCVUnit, "StarCraftEventSCVCarryingArtifact", 1);
    if ((UnitGetOwner(lv_sCVUnit) == libCore_gv_cOMPUTER_NoVision_TeamOrder)) {
        lv_team = libGame_gv_teamChaosIndex_C;
    }
    else {
        lv_team = libGame_gv_teamOrderIndex_C;
    }
    UnitGroupLoopBegin(libGDHL_gv_starCraftEvent.lv_artifactUnitGroup[lv_team]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupLoopCurrent() == libGDHL_gv_starCraftEvent.lv_sCVTargetArtifact[lv_sCVLaneIndex][lv_sCVSpawnIndex][lv_team])) {
            lv_artifactUnit = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    TextTagDestroy(libCore_gf_TextTagStoredForUnit(lv_artifactUnit, 1));
    UnitGroupRemove(libGDHL_gv_starCraftEvent.lv_artifactUnitGroup[lv_team], lv_artifactUnit);
    if ((libGDHL_gv_starCraftEvent.lv_continueSpawningArtifacts[lv_team] == true)) {
        UnitKill(lv_artifactUnit);
        libGDHL_gf_StarCraftEventSpawnArtifactInRandomSpot(lv_team);
        Wait(0.5, c_timeGame);
        if ((libGDHL_gv_starCraftEvent.lv_continueSpawningArtifacts[lv_team] == true)) {
            libGDHL_gf_StarCraftEventIssueGatherOrderToSCVForTeam(lv_sCVUnit, false, lv_team);
        }
        else {
            libGDHL_gf_StarCraftEventMakeSCVReturnToDropship(lv_sCVUnit, lv_team);
        }
    }
    else {
        libNtve_gf_SendActorMessageToUnit(libGDHL_gv_starCraftEvent.lv_dropshipUnit[lv_sCVLaneIndex][lv_team], "Signal Loaded");
        UnitRemove(lv_artifactUnit);
        UnitRemove(lv_sCVUnit);
        libGDHL_gv_starCraftEvent.lv_numberOfSCVsAlivePerDropship[lv_sCVLaneIndex][lv_team] -= 1;
        if ((libGDHL_gv_starCraftEvent.lv_numberOfSCVsAlivePerDropship[lv_sCVLaneIndex][lv_team] == 0)) {
            Wait(2.0, c_timeGame);
            UnitKill(libGDHL_gv_starCraftEvent.lv_dropshipUnit[lv_sCVLaneIndex][lv_team]);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_StarCraftEventSCVTurnsInArtifactPiece_Init () {
    libGDHL_gt_StarCraftEventSCVTurnsInArtifactPiece = TriggerCreate("libGDHL_gt_StarCraftEventSCVTurnsInArtifactPiece_Func");
    TriggerEnable(libGDHL_gt_StarCraftEventSCVTurnsInArtifactPiece, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_StarCraftEventSCVTurnsInArtifactPiece, 13, "StarCraftEventSCVDropArtifactPersistent");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_StarCraftEventSCVTurnsInArtifactPiece, 14, "StarCraftEventSCVDropArtifactPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: StarCraft Event - SCV Drops Artifact
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_StarCraftEventSCVDropsArtifact_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    unit lv_sCVUnit;
    unit lv_artifactUnit;
    int lv_sCVLaneIndex;
    int lv_sCVSpawnIndex;
    point lv_sCVPosition;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == "StarCraftEventSCV"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_sCVUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_sCVLaneIndex = FixedToInt(UnitGetCustomValue(lv_sCVUnit, 0));
    lv_sCVSpawnIndex = FixedToInt(UnitGetCustomValue(lv_sCVUnit, 1));
    lv_sCVPosition = UnitGetPosition(lv_sCVUnit);
    if ((UnitGetOwner(lv_sCVUnit) == libCore_gv_cOMPUTER_NoVision_TeamOrder)) {
        lv_team = libGame_gv_teamChaosIndex_C;
    }
    else {
        if ((UnitGetOwner(lv_sCVUnit) == libCore_gv_cOMPUTER_NoVision_TeamChaos)) {
            lv_team = libGame_gv_teamOrderIndex_C;
        }

    }
    UnitGroupLoopBegin(libGDHL_gv_starCraftEvent.lv_artifactUnitGroup[lv_team]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupLoopCurrent() == libGDHL_gv_starCraftEvent.lv_sCVTargetArtifact[lv_sCVLaneIndex][lv_sCVSpawnIndex][lv_team])) {
            lv_artifactUnit = UnitGroupLoopCurrent();
        }

    }
    UnitGroupLoopEnd();
    libGDHL_gv_starCraftEvent.lv_numberOfSCVsAlivePerDropship[lv_sCVLaneIndex][lv_team] -= 1;
    Wait(0.125, c_timeGame);
    TextTagSetPosition(libCore_gf_TextTagStoredForUnit(lv_artifactUnit, 1), UnitGetPosition(lv_artifactUnit), 2.0);
    TextTagShow(libCore_gf_TextTagStoredForUnit(lv_artifactUnit, 1), PlayerGroupAll(), true);
    if ((libGDHL_gv_starCraftEvent.lv_numberOfSCVsAlivePerDropship[lv_sCVLaneIndex][lv_team] == 0)) {
        Wait(2.0, c_timeGame);
        UnitKill(libGDHL_gv_starCraftEvent.lv_dropshipUnit[lv_sCVLaneIndex][lv_team]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_StarCraftEventSCVDropsArtifact_Init () {
    libGDHL_gt_StarCraftEventSCVDropsArtifact = TriggerCreate("libGDHL_gt_StarCraftEventSCVDropsArtifact_Func");
    TriggerEnable(libGDHL_gt_StarCraftEventSCVDropsArtifact, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_StarCraftEventSCVDropsArtifact, 13, "SCVDeathDummy");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_StarCraftEventSCVDropsArtifact, 14, "SCVDeathDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: StarCraft Event - Artifact Piece Gets Collected By SCV
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_StarCraftEventArtifactPieceGetsCollectedBySCV_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    unit lv_macGuffinUnit;
    int lv_itArtifactIndex;
    int lv_targetedArtifactIndex;
    point lv_positionForDummyEffect;
    unit lv_sCVUnit;
    point lv_casterOffset;
    unit lv_targetArtifact;
    fixed lv_facingOfArtifact;

    // Variable Initialization
    lv_macGuffinUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_sCVUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetArtifact = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_casterOffset = PointWithOffsetPolar(UnitGetPosition(lv_sCVUnit), 1.0, UnitGetFacing(lv_sCVUnit));
    lv_facingOfArtifact = UnitGetFacing(lv_targetArtifact);
    lv_positionForDummyEffect = PointWithOffsetPolar(lv_casterOffset, 5.0, lv_facingOfArtifact);
    lv_positionForDummyEffect = PointWithOffsetPolar(UnitGetPosition(lv_targetArtifact), 1.0, UnitGetFacing(lv_targetArtifact));
    UnitCreateEffectPoint(lv_sCVUnit, "StarCraftEventSCVArtifactOrientationDummy", lv_positionForDummyEffect);
    if ((EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget) == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_team = libGame_gv_teamOrderIndex_C;
    }
    else {
        if ((EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget) == libCore_gv_cOMPUTER_TeamChaos)) {
            lv_team = libGame_gv_teamChaosIndex_C;
        }

    }
    TextTagShow(libCore_gf_TextTagStoredForUnit(lv_macGuffinUnit, 1), PlayerGroupAll(), false);
    libGDHL_gf_StarCraftEventIssueLeaveOrderToSCVForTeam(lv_sCVUnit, lv_team);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_StarCraftEventArtifactPieceGetsCollectedBySCV_Init () {
    libGDHL_gt_StarCraftEventArtifactPieceGetsCollectedBySCV = TriggerCreate("libGDHL_gt_StarCraftEventArtifactPieceGetsCollectedBySCV_Func");
    TriggerEnable(libGDHL_gt_StarCraftEventArtifactPieceGetsCollectedBySCV, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_StarCraftEventArtifactPieceGetsCollectedBySCV, c_playerAny, "StarCraftEventSCVApplyBehaviorToArtifact");
}

//--------------------------------------------------------------------------------------------------
// Trigger: StarCraft Event - Open The Gates Timer Started (Start Event)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_StarCraftEventOpenTheGatesTimerStartedStartEvent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_eventFired;
    bool lv_dummyPlayerHasDailyQuestBoolean;
    const int lv_teamRequiredProgress_C = 12;

    // Variable Initialization
    lv_dummyPlayerHasDailyQuestBoolean = true;

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSGameMode == libCore_ge_GameModes_Normal))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGDHL_gv_seasonalEvents.lv_teamGotEventThisGame[libGame_gv_teamOrderIndex_C] == true)) {
        PlayerGroupLoopBegin(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((lv_dummyPlayerHasDailyQuestBoolean == true)) {
                libGDHL_gv_starCraftEvent.lv_teamNumberOfPlayersWithQuest[libGame_gv_teamOrderIndex_C] += 1;
            }

        }
        PlayerGroupLoopEnd();
        libGDHL_gv_starCraftEvent.lv_teamRequiredProgress[libGame_gv_teamOrderIndex_C] = lv_teamRequiredProgress_C;
        libGDHL_gf_StarCraftEventInitializeHUDUI(libUIUI_gv_mapMechanicsPanel.lv_mainPanel, libGame_gv_teamOrderIndex_C);
        libGDHL_gf_StarCraftEventSpawnInitialArtifactsForTeam(libGame_gv_teamOrderIndex_C);
        libGDHL_gf_StarCraftEventCreateDropshipsForTeam(libGame_gv_teamOrderIndex_C);
        libGDHL_gf_StarCraftEventSpawnInitialSCVUnitsNearDropships(libGame_gv_teamOrderIndex_C);
        SoundPlayForPlayer(SoundLink("Event_SCEvent_Start", -1), libCore_gv_cOMPUTER_TeamOrder, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), 100.0, 0.0);
        lv_eventFired = true;
    }

    if ((libGDHL_gv_seasonalEvents.lv_teamGotEventThisGame[libGame_gv_teamChaosIndex_C] == true)) {
        PlayerGroupLoopBegin(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((lv_dummyPlayerHasDailyQuestBoolean == true)) {
                libGDHL_gv_starCraftEvent.lv_teamNumberOfPlayersWithQuest[libGame_gv_teamChaosIndex_C] += 1;
            }

        }
        PlayerGroupLoopEnd();
        libGDHL_gv_starCraftEvent.lv_teamRequiredProgress[libGame_gv_teamChaosIndex_C] = lv_teamRequiredProgress_C;
        libGDHL_gf_StarCraftEventInitializeHUDUI(libUIUI_gv_mapMechanicsPanel.lv_mainPanel, libGame_gv_teamChaosIndex_C);
        libGDHL_gf_StarCraftEventSpawnInitialArtifactsForTeam(libGame_gv_teamChaosIndex_C);
        libGDHL_gf_StarCraftEventCreateDropshipsForTeam(libGame_gv_teamChaosIndex_C);
        libGDHL_gf_StarCraftEventSpawnInitialSCVUnitsNearDropships(libGame_gv_teamChaosIndex_C);
        SoundPlayForPlayer(SoundLink("Event_SCEvent_Start", -1), libCore_gv_cOMPUTER_TeamChaos, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), 100.0, 0.0);
        lv_eventFired = true;
    }

    if ((lv_eventFired == true)) {
        TimerStart(libGDHL_gv_seasonalEvents.lv_seasonalEventTimer, (libCore_gv_bALOpenTheGatesDelay - 10), false, c_timeGame);
        TimerStart(libGDHL_gv_starCraftEvent.lv_completelyEndEventTimer, (libCore_gv_bALOpenTheGatesDelay - 5), false, c_timeGame);
        if ((libGDHL_gv_seasonalEvents.lv_teamGotEventThisGame[libGame_gv_teamOrderIndex_C] == true)) {
            libGDHL_gf_StarCraftEventRunEventTimerLogicForTeam(libGame_gv_teamOrderIndex_C);
        }

        if ((libGDHL_gv_seasonalEvents.lv_teamGotEventThisGame[libGame_gv_teamChaosIndex_C] == true)) {
            libGDHL_gf_StarCraftEventRunEventTimerLogicForTeam(libGame_gv_teamChaosIndex_C);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_StarCraftEventOpenTheGatesTimerStartedStartEvent_Init () {
    libGDHL_gt_StarCraftEventOpenTheGatesTimerStartedStartEvent = TriggerCreate("libGDHL_gt_StarCraftEventOpenTheGatesTimerStartedStartEvent_Func");
    TriggerEnable(libGDHL_gt_StarCraftEventOpenTheGatesTimerStartedStartEvent, false);
    libGame_gf_GameOpenTimerStarted(libGDHL_gt_StarCraftEventOpenTheGatesTimerStartedStartEvent);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StarCraft Event - Event Timer Expires (Spawning Stops)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_StarCraftEventEventTimerExpiresSpawningStops_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itArtifactIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_starCraftEvent.lv_continueSpawningArtifacts[libGame_gv_teamOrderIndex_C] = false;
    libGDHL_gv_starCraftEvent.lv_continueSpawningArtifacts[libGame_gv_teamChaosIndex_C] = false;
    if ((libGDHL_gv_seasonalEvents.lv_teamGotEventThisGame[libGame_gv_teamOrderIndex_C] == true) && (libGDHL_gv_starCraftEvent.lv_victorySequenceShouldPlay[libGame_gv_teamOrderIndex_C] == false)) {
        libGDHL_gf_StarCraftEventPlayNoMoreArtifactsDetectedForTeam(libGame_gv_teamOrderIndex_C);
        libGDHL_gf_StarCraftEventUISetBlinkingBorder(libGame_gv_teamOrderIndex_C);
    }

    if ((libGDHL_gv_seasonalEvents.lv_teamGotEventThisGame[libGame_gv_teamChaosIndex_C] == true) && (libGDHL_gv_starCraftEvent.lv_victorySequenceShouldPlay[libGame_gv_teamChaosIndex_C] == false)) {
        libGDHL_gf_StarCraftEventPlayNoMoreArtifactsDetectedForTeam(libGame_gv_teamChaosIndex_C);
        libGDHL_gf_StarCraftEventUISetBlinkingBorder(libGame_gv_teamChaosIndex_C);
    }

    UnitGroupLoopBegin(libGDHL_gv_starCraftEvent.lv_sCVUnitGroup[libGame_gv_teamOrderIndex_C]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libGDHL_gf_StarCraftEventMakeSCVReturnToDropship(UnitGroupLoopCurrent(), libGame_gv_teamOrderIndex_C);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libGDHL_gv_starCraftEvent.lv_sCVUnitGroup[libGame_gv_teamChaosIndex_C]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libGDHL_gf_StarCraftEventMakeSCVReturnToDropship(UnitGroupLoopCurrent(), libGame_gv_teamChaosIndex_C);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_StarCraftEventEventTimerExpiresSpawningStops_Init () {
    libGDHL_gt_StarCraftEventEventTimerExpiresSpawningStops = TriggerCreate("libGDHL_gt_StarCraftEventEventTimerExpiresSpawningStops_Func");
    TriggerEnable(libGDHL_gt_StarCraftEventEventTimerExpiresSpawningStops, false);
    TriggerAddEventTimer(libGDHL_gt_StarCraftEventEventTimerExpiresSpawningStops, libGDHL_gv_seasonalEvents.lv_seasonalEventTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StarCraft Event - Completely End Event Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_StarCraftEventCompletelyEndEventTimerExpires_Func (bool testConds, bool runActions) {
    playergroup auto92C0067C_g;
    int auto92C0067C_p;
    playergroup auto4016F480_g;
    int auto4016F480_p;
    int autoB7637AEA_ae;
    int autoB7637AEA_ai;
    int auto7F0BE48E_ae;
    int auto7F0BE48E_ai;
    playergroup auto771C168B_g;
    int auto771C168B_p;
    unitgroup auto7E78BDD5_g;
    int auto7E78BDD5_u;

    // Variable Declarations
    int lv_iPlayer;
    int lv_itPlayer;
    int lv_itTeam;
    unit lv_itHero;
    int lv_itIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libGDHL_gt_StarCraftEventArtifactPieceGetsCollected, false);
    DialogControlSendAnimationEvent(libGDHL_gv_starCraftEvent.lv_hUDProgressBackgroundContainer, PlayerGroupAll(), "Hide");
    DialogControlSetVisible(libGDHL_gv_starCraftEvent.lv_hUDProgressBackground, PlayerGroupAll(), false);
    DialogControlSetVisible(libGDHL_gv_starCraftEvent.lv_hUDTimer, PlayerGroupAll(), false);
    if ((libGDHL_gv_seasonalEvents.lv_teamGotEventThisGame[libGame_gv_teamOrderIndex_C] == true) && (libGDHL_gv_starCraftEvent.lv_victorySequenceShouldPlay[libGame_gv_teamOrderIndex_C] == false)) {
        libGDHL_gf_StarCraftEventPlayFailureEndVOForTeam(libGame_gv_teamOrderIndex_C);
        auto92C0067C_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers; 
        auto92C0067C_p = 1;
        for ( ; auto92C0067C_p <= PlayerGroupCount(auto92C0067C_g) ; auto92C0067C_p += (lv_itPlayer == PlayerGroupPlayer(auto92C0067C_g, auto92C0067C_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto92C0067C_g, auto92C0067C_p);
            libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_itPlayer, "StarcraftPiecesCollected", PlayerScoreValueGetAsInt(lv_itPlayer, "StarcraftPiecesCollected"));
        }
    }

    if ((libGDHL_gv_seasonalEvents.lv_teamGotEventThisGame[libGame_gv_teamChaosIndex_C] == true) && (libGDHL_gv_starCraftEvent.lv_victorySequenceShouldPlay[libGame_gv_teamChaosIndex_C] == false)) {
        libGDHL_gf_StarCraftEventPlayFailureEndVOForTeam(libGame_gv_teamChaosIndex_C);
        auto4016F480_g = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers; 
        auto4016F480_p = 1;
        for ( ; auto4016F480_p <= PlayerGroupCount(auto4016F480_g) ; auto4016F480_p += (lv_itPlayer == PlayerGroupPlayer(auto4016F480_g, auto4016F480_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto4016F480_g, auto4016F480_p);
            libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_itPlayer, "StarcraftPiecesCollected", PlayerScoreValueGetAsInt(lv_itPlayer, "StarcraftPiecesCollected"));
        }
    }

    autoB7637AEA_ae = 10;
    autoB7637AEA_ai = 1;
    lv_iPlayer = 1;
    for ( ; ( (autoB7637AEA_ai >= 0 && lv_iPlayer <= autoB7637AEA_ae) || (autoB7637AEA_ai <= 0 && lv_iPlayer >= autoB7637AEA_ae) ) ; lv_iPlayer += autoB7637AEA_ai ) {
        CatalogFieldValueSet(c_gameCatalogEffect, "CaptureMacGuffinTwo", "PeriodCount", lv_iPlayer, FixedToString(libGDHL_gv_seasonalEvents.lv_initialMacguffinPeriodCount, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogEffect, "CaptureMacGuffinTwo", "PeriodicPeriodArray[" + IntToString(0) + "]", lv_iPlayer, FixedToString(libGDHL_gv_seasonalEvents.lv_initialMacguffinPeriodDuration, c_fixedPrecisionAny));
    }
    auto7F0BE48E_ae = libGame_gv_teamChaosIndex_C;
    auto7F0BE48E_ai = 1;
    lv_itTeam = libGame_gv_teamOrderIndex_C;
    for ( ; ( (auto7F0BE48E_ai >= 0 && lv_itTeam <= auto7F0BE48E_ae) || (auto7F0BE48E_ai <= 0 && lv_itTeam >= auto7F0BE48E_ae) ) ; lv_itTeam += auto7F0BE48E_ai ) {
        auto771C168B_g = GameAttributePlayersForTeam(lv_itTeam); 
        auto771C168B_p = 1;
        for ( ; auto771C168B_p <= PlayerGroupCount(auto771C168B_g) ; auto771C168B_p += (lv_itPlayer == PlayerGroupPlayer(auto771C168B_g, auto771C168B_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto771C168B_g, auto771C168B_p);
            if ((UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "HeroGeneric0EnergyOnRespawn") == true)) {
                UnitSetPropertyFixed(libGame_gv_players[lv_itPlayer].lv_heroUnit, c_unitPropEnergyPercent, 0.0);
            }
            else {
                UnitSetPropertyFixed(libGame_gv_players[lv_itPlayer].lv_heroUnit, c_unitPropEnergyPercent, 100.0);
                auto7E78BDD5_g = libGame_gv_players[lv_itPlayer].lv_heroUnitGroup;
                auto7E78BDD5_u = 1;
                for ( ; auto7E78BDD5_u <= UnitGroupCount(auto7E78BDD5_g, c_unitCountAll) ; auto7E78BDD5_u += (lv_itHero == UnitGroupUnit(auto7E78BDD5_g, auto7E78BDD5_u)) ) {
                    lv_itHero = UnitGroupUnit(auto7E78BDD5_g, auto7E78BDD5_u);
                    UnitSetPropertyFixed(lv_itHero, c_unitPropEnergyPercent, 100.0);
                }
            }
        }
    }
    UnitGroupLoopBegin(libGDHL_gv_starCraftEvent.lv_artifactUnitGroup[libGame_gv_teamOrderIndex_C]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        TextTagDestroy(libCore_gf_TextTagStoredForUnit(UnitGroupLoopCurrent(), 1));
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libGDHL_gv_starCraftEvent.lv_artifactUnitGroup[libGame_gv_teamChaosIndex_C]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        TextTagDestroy(libCore_gf_TextTagStoredForUnit(UnitGroupLoopCurrent(), 1));
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libGDHL_gv_starCraftEvent.lv_sCVUnitGroup[libGame_gv_teamOrderIndex_C]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libGDHL_gf_StarCraftEventMakeSCVReturnToDropship(UnitGroupLoopCurrent(), libGame_gv_teamOrderIndex_C);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libGDHL_gv_starCraftEvent.lv_sCVUnitGroup[libGame_gv_teamChaosIndex_C]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libGDHL_gf_StarCraftEventMakeSCVReturnToDropship(UnitGroupLoopCurrent(), libGame_gv_teamChaosIndex_C);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_StarCraftEventCompletelyEndEventTimerExpires_Init () {
    libGDHL_gt_StarCraftEventCompletelyEndEventTimerExpires = TriggerCreate("libGDHL_gt_StarCraftEventCompletelyEndEventTimerExpires_Func");
    TriggerEnable(libGDHL_gt_StarCraftEventCompletelyEndEventTimerExpires, false);
    TriggerAddEventTimer(libGDHL_gt_StarCraftEventCompletelyEndEventTimerExpires, libGDHL_gv_starCraftEvent.lv_completelyEndEventTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StarCraft Event - Open The Gate Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_StarCraftEventOpenTheGateTimerExpires_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(libGDHL_gv_starCraftEvent.lv_victoryArtifact[1]);
    UnitKill(libGDHL_gv_starCraftEvent.lv_victoryArtifact[2]);
    UnitGroupLoopBegin(libGDHL_gv_starCraftEvent.lv_sCVUnitGroup[libGame_gv_teamOrderIndex_C]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libGDHL_gv_starCraftEvent.lv_sCVUnitGroup[libGame_gv_teamChaosIndex_C]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libGDHL_gv_starCraftEvent.lv_dropshipUnitGroup[libGame_gv_teamOrderIndex_C]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libGDHL_gv_starCraftEvent.lv_dropshipUnitGroup[libGame_gv_teamChaosIndex_C]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    TriggerEnable(libGDHL_gt_StarCraftEventArtifactPieceGetsCollected, false);
    TriggerEnable(libGDHL_gt_StarCraftEventArtifactPieceGetsCollectedBySCV, false);
    TriggerEnable(libGDHL_gt_StarCraftEventPlayerBeginsCollectingArtifact, false);
    TriggerEnable(libGDHL_gt_StarCraftEventPlayerStopsCollectingArtifact, false);
    TriggerEnable(libGDHL_gt_StarCraftEventSCVDropsArtifact, false);
    TriggerEnable(libGDHL_gt_StarCraftEventSCVTurnsInArtifactPiece, false);
    TriggerEnable(libGDHL_gt_StarCraftEventEventTimerExpiresSpawningStops, false);
    TriggerEnable(libGDHL_gt_StarCraftEventArtifactDies, false);
    TriggerEnable(libGDHL_gt_StarCraftEventSCVDies, false);
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_StarCraftEventOpenTheGateTimerExpires_Init () {
    libGDHL_gt_StarCraftEventOpenTheGateTimerExpires = TriggerCreate("libGDHL_gt_StarCraftEventOpenTheGateTimerExpires_Func");
    TriggerEnable(libGDHL_gt_StarCraftEventOpenTheGateTimerExpires, false);
    TriggerAddEventTimer(libGDHL_gt_StarCraftEventOpenTheGateTimerExpires, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StarCraft Event - Victory Sequence Triggered
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_StarCraftEventVictorySequenceTriggered_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_winningTeam;
    point lv_referencePoint;
    point lv_coreLocation;
    fixed lv_angleToCreateArtifact;
    int lv_computerPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_winningTeam = libGDHL_gv_seasonalEvents.lv_winningTeam;
    if ((lv_winningTeam == libGame_gv_teamOrderIndex_C)) {
        lv_referencePoint = PlayerStartLocation(6);
        lv_coreLocation = UnitGetPosition(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core);
        lv_computerPlayer = libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
        lv_referencePoint = PlayerStartLocation(1);
        lv_coreLocation = UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core);
        lv_computerPlayer = libCore_gv_cOMPUTER_TeamChaos;
    }
    lv_angleToCreateArtifact = (AngleBetweenPoints(lv_coreLocation, lv_referencePoint) +180);
    UnitCreate(1, "StarCraftVictorySequenceDummyUnit", c_unitCreateIgnorePlacement, lv_computerPlayer, PointWithOffsetPolar(lv_coreLocation, 0.0, lv_angleToCreateArtifact), lv_angleToCreateArtifact);
    UnitSetPropertyFixed(UnitLastCreated(), c_unitPropHeight, 3.0);
    libNtve_gf_PauseUnit(UnitLastCreated(), false);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetOpacity");
    Wait(libGame_gv_gameOver_SeasonalEventVictorySequenceTime, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_StarCraftEventVictorySequenceTriggered_Init () {
    libGDHL_gt_StarCraftEventVictorySequenceTriggered = TriggerCreate("libGDHL_gt_StarCraftEventVictorySequenceTriggered_Func");
    TriggerEnable(libGDHL_gt_StarCraftEventVictorySequenceTriggered, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StarCraft Event - SCV Dies
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_StarCraftEventSCVDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_sCVUnit;
    int lv_index;
    int lv_team;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "StarCraftEventSCV"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_sCVUnit = EventUnit();
    lv_index = FixedToInt(UnitGetCustomValue(lv_sCVUnit, 0));
    if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_NoVision_TeamOrder)) {
        lv_team = libGame_gv_teamChaosIndex_C;
    }
    else {
        lv_team = libGame_gv_teamOrderIndex_C;
    }
    UnitGroupRemove(libGDHL_gv_starCraftEvent.lv_sCVUnitGroup[lv_team], EventUnit());
    TextTagDestroy(libCore_gf_TextTagStoredForUnit(lv_sCVUnit, 0));
    TextTagDestroy(libCore_gf_TextTagStoredForUnit(lv_sCVUnit, 1));
    TextTagDestroy(libCore_gf_TextTagStoredForUnit(lv_sCVUnit, 2));
    if ((libGDHL_gv_starCraftEvent.lv_numberOfSCVsAlivePerDropship[lv_index][lv_team] == 0)) {
        Wait(2.0, c_timeGame);
        UnitKill(libGDHL_gv_starCraftEvent.lv_dropshipUnit[lv_index][lv_team]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_StarCraftEventSCVDies_Init () {
    libGDHL_gt_StarCraftEventSCVDies = TriggerCreate("libGDHL_gt_StarCraftEventSCVDies_Func");
    TriggerEnable(libGDHL_gt_StarCraftEventSCVDies, false);
    TriggerAddEventUnitDied(libGDHL_gt_StarCraftEventSCVDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: StarCraft Event - Artifact Dies
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_StarCraftEventArtifactDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "XelnagaArtifactPiece"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextTagDestroy(libCore_gf_TextTagStoredForUnit(EventUnit(), 1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_StarCraftEventArtifactDies_Init () {
    libGDHL_gt_StarCraftEventArtifactDies = TriggerCreate("libGDHL_gt_StarCraftEventArtifactDies_Func");
    TriggerEnable(libGDHL_gt_StarCraftEventArtifactDies, false);
    TriggerAddEventUnitDied(libGDHL_gt_StarCraftEventArtifactDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LNYRooster - Player Gives Wanted Item
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LNYRoosterPlayerGivesWantedItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;

    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_lNYRoosterAcceptedItems[UnitGetOwner(lv_target)] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LNYRoosterPlayerGivesWantedItem_Init () {
    libGDHL_gt_LNYRoosterPlayerGivesWantedItem = TriggerCreate("libGDHL_gt_LNYRoosterPlayerGivesWantedItem_Func");
    TriggerEnable(libGDHL_gt_LNYRoosterPlayerGivesWantedItem, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_LNYRoosterPlayerGivesWantedItem, c_playerAny, "LunarNewYearRoosterSpecialChickenFeedFound");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_LNYRoosterPlayerGivesWantedItem, c_playerAny, "LunarNewYearRoosterFreshWaterFound");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_LNYRoosterPlayerGivesWantedItem, c_playerAny, "LunarNewYearRoosterRocketFuelFound");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_LNYRoosterPlayerGivesWantedItem, c_playerAny, "LunarNewYearRoosterLuxuryChickenShoesFound");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LNYRooster - Rooster Rejects Item
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LNYRoosterRoosterRejectsItem_Func (bool testConds, bool runActions) {
    string auto2F8E3685_val;

    // Variable Declarations
    unit lv_target;
    int lv_team;

    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_team = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_target));

    // Actions
    if (!runActions) {
        return true;
    }

    auto2F8E3685_val = EventPlayerEffectUsed();
    if (auto2F8E3685_val == "LunarNewYearRoosterUnwantedSpecialChickenFeedFoundModifyUnit") {
        libGDHL_gf_LNYRoosterCreateItemAtRandomLocationForTeam(lv_team, 1);
    }
    else if (auto2F8E3685_val == "LunarNewYearRoosterUnwantedRocketFuelFoundModifyUnit") {
        libGDHL_gf_LNYRoosterCreateItemAtRandomLocationForTeam(lv_team, 2);
    }
    else if (auto2F8E3685_val == "LunarNewYearRoosterUnwantedFreshWaterFoundModifyUnit") {
        libGDHL_gf_LNYRoosterCreateItemAtRandomLocationForTeam(lv_team, 3);
    }
    else if (auto2F8E3685_val == "LunarNewYearRoosterUnwantedLuxuryChickenShoesFoundModifyUnit") {
        libGDHL_gf_LNYRoosterCreateItemAtRandomLocationForTeam(lv_team, 4);
    }
    else {
    }
    libGDHL_gf_LNYRoosterUpdateSplatForPlayer(UnitGetOwner(lv_target), lv_team);
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_GDHL_67C7BBE9"), 25, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 3.0, true, true, libCore_gv_playerGroupFromPlayer[UnitGetOwner(lv_target)]);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, libUIUI_gv_floatingCombatTextFadeDuration);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.5);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LNYRoosterRoosterRejectsItem_Init () {
    libGDHL_gt_LNYRoosterRoosterRejectsItem = TriggerCreate("libGDHL_gt_LNYRoosterRoosterRejectsItem_Func");
    TriggerEnable(libGDHL_gt_LNYRoosterRoosterRejectsItem, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_LNYRoosterRoosterRejectsItem, c_playerAny, "LunarNewYearRoosterUnwantedFreshWaterFoundModifyUnit");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_LNYRoosterRoosterRejectsItem, c_playerAny, "LunarNewYearRoosterUnwantedLuxuryChickenShoesFoundModifyUnit");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_LNYRoosterRoosterRejectsItem, c_playerAny, "LunarNewYearRoosterUnwantedRocketFuelFoundModifyUnit");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_LNYRoosterRoosterRejectsItem, c_playerAny, "LunarNewYearRoosterUnwantedSpecialChickenFeedFoundModifyUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LNYRooster - Rooster Accepts Item
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LNYRoosterRoosterAcceptsItem_Func (bool testConds, bool runActions) {
    unitgroup autoBC64EF54_g;
    int autoBC64EF54_u;
    int autoF338E191_val;

    // Variable Declarations
    int lv_team;
    unit lv_itUnit;
    int lv_dialogItemToAnimate1;
    int lv_dialogItemToAnimate2;

    // Variable Initialization
    lv_dialogItemToAnimate1 = c_invalidDialogControlId;
    lv_dialogItemToAnimate2 = c_invalidDialogControlId;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_team = libGame_gv_teamOrderIndex_C;
    }
    else {
        lv_team = libGame_gv_teamChaosIndex_C;
    }
    libGDHL_gf_LNYRoosterMarkCurrentQuestAsComplete(lv_team);
    libGDHL_gf_SetRequiredOfferingLabel(StringToText(""), lv_team, false);
    DialogControlSetVisible(libGDHL_gv_lNYRooster_Quest[lv_team].lv_offeringCutscene, libGame_gf_PlayersOnTeamHeroes(lv_team, false), false);
    PlayerGroupLoopBegin(libGame_gf_PlayersOnTeamHeroes(lv_team, false));
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        UnitCreateEffectUnit(libGDHL_gv_lNYRooster_Quest[lv_team].lv_dummyUnitForSplats[PlayerGroupLoopCurrent()], "LNYRoosterUpdateSplats", libGDHL_gv_lNYRooster_Quest[lv_team].lv_dummyUnitForSplats[PlayerGroupLoopCurrent()]);
        autoBC64EF54_g = libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnitGroup;
        autoBC64EF54_u = 1;
        for ( ; autoBC64EF54_u <= UnitGroupCount(autoBC64EF54_g, c_unitCountAll) ; autoBC64EF54_u += (lv_itUnit == UnitGroupUnit(autoBC64EF54_g, autoBC64EF54_u)) ) {
            lv_itUnit = UnitGroupUnit(autoBC64EF54_g, autoBC64EF54_u);
            ActorScopeSend(ActorScopeFromUnit(lv_itUnit), "Signal WantsNothing");
        }
    }
    PlayerGroupLoopEnd();
    UnitBehaviorAdd(EventUnit(), "LunarNewYearRoosterAllowMovement", EventUnit(), 1);
    if ((lv_team == libGame_gv_teamOrderIndex_C)) {
        lv_dialogItemToAnimate1 = libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_team1BarPortraitFrame;
        lv_dialogItemToAnimate2 = libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_team1BarPortraitFrame;
    }
    else {
        lv_dialogItemToAnimate1 = libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_team2BarPortraitFrame;
        lv_dialogItemToAnimate2 = libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_team2BarPortraitFrame;
    }
    DialogControlSendAnimationEvent(lv_dialogItemToAnimate1, PlayerGroupAll(), "RoosterBob");
    DialogControlSendAnimationEvent(lv_dialogItemToAnimate2, PlayerGroupAll(), "RoosterBob");
    DialogControlSendAnimationEvent(libGDHL_gv_lNYRooster_Quest[lv_team].lv_offeringBorder, libGame_gf_PlayersOnTeamHeroes(lv_team, false), "RingFlare");
    DialogControlSendAnimationEvent(libGDHL_gv_lNYRooster_Quest[lv_team].lv_offeringBorder, libGame_gf_PlayersOnTeamHeroes(lv_team, false), "SheenBirth");
    TextExpressionSetToken("Param/Expression/lib_GDHL_B7B8ABAC", "A", IntToText((4 - libGDHL_gv_lNYRooster_Quest[lv_team].lv_questsRemaining)));
    libNtve_gf_SetDialogItemText(libGDHL_gv_lNYRooster_Quest[lv_team].lv_questCompletedLabel, TextExpressionAssemble("Param/Expression/lib_GDHL_B7B8ABAC"), libGame_gf_PlayersOnTeamHeroes(lv_team, false));
    autoF338E191_val = libGDHL_gv_lNYRooster_Quest[lv_team].lv_questsRemaining;
    if (autoF338E191_val == 3) {
        DialogControlSendAnimationEvent(lv_dialogItemToAnimate1, PlayerGroupAll(), "Progress1");
        DialogControlSendAnimationEvent(lv_dialogItemToAnimate2, PlayerGroupAll(), "Progress1");
        DialogControlSendAnimationEvent(libGDHL_gv_lNYRooster_Quest[lv_team].lv_mainPanel, libGame_gf_PlayersOnTeamHeroes(lv_team, false), "ShowQuestCompletedLabel");
    }
    else if (autoF338E191_val == 2) {
        DialogControlSendAnimationEvent(lv_dialogItemToAnimate1, PlayerGroupAll(), "Progress2");
        DialogControlSendAnimationEvent(lv_dialogItemToAnimate2, PlayerGroupAll(), "Progress2");
    }
    else if (autoF338E191_val == 1) {
        DialogControlSendAnimationEvent(lv_dialogItemToAnimate1, PlayerGroupAll(), "Progress3");
        DialogControlSendAnimationEvent(lv_dialogItemToAnimate2, PlayerGroupAll(), "Progress3");
    }
    else if (autoF338E191_val == 0) {
        DialogControlSendAnimationEvent(lv_dialogItemToAnimate1, PlayerGroupAll(), "Progress4");
        DialogControlSendAnimationEvent(lv_dialogItemToAnimate2, PlayerGroupAll(), "Progress4");
    }
    else {
    }
    if ((libGDHL_gv_lNYRooster_Quest[lv_team].lv_questsRemaining == 0)) {
        libGDHL_gv_lNYRooster_Quest[lv_team].lv_eventCurrentlyBeingFinished = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LNYRoosterRoosterAcceptsItem_Init () {
    libGDHL_gt_LNYRoosterRoosterAcceptsItem = TriggerCreate("libGDHL_gt_LNYRoosterRoosterAcceptsItem_Func");
    TriggerEnable(libGDHL_gt_LNYRoosterRoosterAcceptsItem, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_LNYRoosterRoosterAcceptsItem, null, "LunarNewYearRoosterWantsRocketFuel", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_LNYRoosterRoosterAcceptsItem, null, "LunarNewYearRoosterWantsLuxuryChickenShoes", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_LNYRoosterRoosterAcceptsItem, null, "LunarNewYearRoosterWantsSpecialChickenFeed", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_LNYRoosterRoosterAcceptsItem, null, "LunarNewYearRoosterWantsFreshWater", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LNYRooster - Rooster Stops Moving
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LNYRoosterRoosterStopsMoving_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_team = libGame_gv_teamOrderIndex_C;
    }
    else {
        lv_team = libGame_gv_teamChaosIndex_C;
    }
    if ((libGDHL_gv_lNYRooster_Quest[lv_team].lv_questsRemaining >= 1)) {
        libGDHL_gf_LNYRoosterGenerateNewQuestObjectiveCollectItem(lv_team);
    }
    else {
        libGDHL_gf_LNYRoosterQuestCompleteForTeam(lv_team);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LNYRoosterRoosterStopsMoving_Init () {
    libGDHL_gt_LNYRoosterRoosterStopsMoving = TriggerCreate("libGDHL_gt_LNYRoosterRoosterStopsMoving_Func");
    TriggerEnable(libGDHL_gt_LNYRoosterRoosterStopsMoving, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_LNYRoosterRoosterStopsMoving, null, "LunarNewYearRoosterAllowMovement", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LNYRooster - Player Collects Item
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LNYRoosterPlayerCollectsItem_Func (bool testConds, bool runActions) {
    string auto8575858D_val;

    // Variable Declarations
    unit lv_targetUnit;
    unit lv_casterUnit;
    int lv_team;
    bool lv_tintPlayerItem;

    // Variable Initialization
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_casterUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_team = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));

    // Conditions
    if (testConds) {
        if (!((UnitGroupHasUnit(libGDHL_gv_lNYRooster_Quest[lv_team].lv_availableItems, EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true))) {
            return false;
        }

        if (!(((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "LunarNewYearRoosterFreshWater") || (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "LunarNewYearRoosterSpecialChickenFeed") || (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "LunarNewYearRoosterRocketFuel") || (UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "LunarNewYearRoosterLuxuryChickenShoes")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_team = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_casterUnit));
    UnitKill(lv_targetUnit);
    UnitGroupRemove(libGDHL_gv_lNYRooster_Quest[lv_team].lv_availableItems, lv_targetUnit);
    libGDHL_gf_LNYRoosterDropCurrentItem(lv_casterUnit);
    if ((UnitGetType(lv_targetUnit) == libGDHL_gv_lNYRooster_Quest[lv_team].lv_currentRequiredItemUnitType)) {
        lv_tintPlayerItem = true;
    }

    auto8575858D_val = UnitGetType(lv_targetUnit);
    if (auto8575858D_val == "LunarNewYearRoosterFreshWater") {
        UnitBehaviorAdd(lv_casterUnit, "LunarNewYearRoosterHasFreshWater", lv_casterUnit, 1);
        if ((lv_tintPlayerItem == true)) {
            ActorScopeSend(ActorScopeFromUnit(lv_casterUnit), "Signal WantsFreshWater");
        }

    }
    else if (auto8575858D_val == "LunarNewYearRoosterSpecialChickenFeed") {
        UnitBehaviorAdd(lv_casterUnit, "LunarNewYearRoosterHasSpecialChickenFeed", lv_casterUnit, 1);
        if ((lv_tintPlayerItem == true)) {
            ActorScopeSend(ActorScopeFromUnit(lv_casterUnit), "Signal WantsSpecialChickenFeed");
        }

    }
    else if (auto8575858D_val == "LunarNewYearRoosterRocketFuel") {
        UnitBehaviorAdd(lv_casterUnit, "LunarNewYearRoosterHasRocketFuel", lv_casterUnit, 1);
        if ((lv_tintPlayerItem == true)) {
            ActorScopeSend(ActorScopeFromUnit(lv_casterUnit), "Signal WantsRocketFuel");
        }

    }
    else if (auto8575858D_val == "LunarNewYearRoosterLuxuryChickenShoes") {
        UnitBehaviorAdd(lv_casterUnit, "LunarNewYearRoosterHasLuxuryChickenShoes", lv_casterUnit, 1);
        if ((lv_tintPlayerItem == true)) {
            ActorScopeSend(ActorScopeFromUnit(lv_casterUnit), "Signal WantsLuxuryChickenShoes");
        }

    }
    else {
    }
    libGDHL_gf_LNYRoosterUpdateSplatForPlayer(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), lv_team);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LNYRoosterPlayerCollectsItem_Init () {
    libGDHL_gt_LNYRoosterPlayerCollectsItem = TriggerCreate("libGDHL_gt_LNYRoosterPlayerCollectsItem_Func");
    TriggerEnable(libGDHL_gt_LNYRoosterPlayerCollectsItem, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_LNYRoosterPlayerCollectsItem, c_playerAny, "CaptureMacGuffinTwoCastComplete");
}

//--------------------------------------------------------------------------------------------------
// Trigger: LNYRooster - Event Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LNYRoosterEventTimerExpires_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gf_LNYRoosterEventComplete();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LNYRoosterEventTimerExpires_Init () {
    libGDHL_gt_LNYRoosterEventTimerExpires = TriggerCreate("libGDHL_gt_LNYRoosterEventTimerExpires_Func");
    TriggerEnable(libGDHL_gt_LNYRoosterEventTimerExpires, false);
    TriggerAddEventTimer(libGDHL_gt_LNYRoosterEventTimerExpires, libGDHL_gv_lNYRooster_QuestTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LNY - Open The Gates Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LNYOpenTheGatesTimerExpires_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libGDHL_gt_LNYRoosterEventTimerExpires, false);
    TriggerEnable(libGDHL_gt_LNYRoosterInitializeMainUI, false);
    TriggerEnable(libGDHL_gt_LNYRoosterPlayerCollectsItem, false);
    TriggerEnable(libGDHL_gt_LNYRoosterRoosterAcceptsItem, false);
    TriggerEnable(libGDHL_gt_LNYRoosterRoosterRejectsItem, false);
    TriggerEnable(libGDHL_gt_LNYRoosterRoosterStopsMoving, false);
    TriggerEnable(libGDHL_gt_LNYRoosterPlayerGivesWantedItem, false);
    DialogControlSetVisible(libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_mainPanel, PlayerGroupAll(), false);
    DialogControlSetVisible(libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_mainPanel, PlayerGroupAll(), false);
    UnitCreateEffectUnit(libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_rooster, "LNYRoosterFailDeath", libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_rooster);
    UnitCreateEffectUnit(libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_rooster, "LNYRoosterFailDeath", libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_rooster);
    UnitKill(libGDHL_gv_lNYRooster_Quest[libGame_gv_teamOrderIndex_C].lv_flag);
    UnitKill(libGDHL_gv_lNYRooster_Quest[libGame_gv_teamChaosIndex_C].lv_flag);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LNYOpenTheGatesTimerExpires_Init () {
    libGDHL_gt_LNYOpenTheGatesTimerExpires = TriggerCreate("libGDHL_gt_LNYOpenTheGatesTimerExpires_Func");
    TriggerEnable(libGDHL_gt_LNYOpenTheGatesTimerExpires, false);
    TriggerAddEventTimer(libGDHL_gt_LNYOpenTheGatesTimerExpires, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: LNYRooster - Initialize Main UI
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LNYRoosterInitializeMainUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_miniMapPanel;

    // Variable Initialization
    lv_miniMapPanel = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MinimapPanel");
    lv_miniMapPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ObjectivePanel");
    DialogControlSetSize(DialogControlLastCreated(), PlayerGroupAll(), 500, 300);
    DialogControlSetPositionRelative(DialogControlLastCreated(), PlayerGroupAll(), c_anchorBottomRight, lv_miniMapPanel, c_anchorTopRight, -10, 10);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LNYRoosterInitializeMainUI_Init () {
    libGDHL_gt_LNYRoosterInitializeMainUI = TriggerCreate("libGDHL_gt_LNYRoosterInitializeMainUI_Func");
    TriggerEnable(libGDHL_gt_LNYRoosterInitializeMainUI, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: #Include Game Data Helper
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_IncludeGameDataHelper_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_IncludeGameDataHelper_Init () {
    libGDHL_gt_IncludeGameDataHelper = TriggerCreate("libGDHL_gt_IncludeGameDataHelper_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Summoned Unit AP Application
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_SummonedUnitAPApplication_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventUnit() != null))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitCreatedUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitCreatedUnit()) >= 1))) {
            return false;
        }

        if (!(((UnitTypeTestAttribute(UnitGetType(EventUnitCreatedUnit()), c_unitAttributeSummoned) == true) || (UnitGetType(EventUnitCreatedUnit()) == "NovaHoloCloneCloaked")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gf_SiegeUpdateAbilityPowerOnSummonedUnits(EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_SummonedUnitAPApplication_Init () {
    libGDHL_gt_SummonedUnitAPApplication = TriggerCreate("libGDHL_gt_SummonedUnitAPApplication_Func");
    TriggerAddEventUnitCreated(libGDHL_gt_SummonedUnitAPApplication, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Generic - Camera Shake Light Target
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericCameraShakeLightTarget_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterPoint), CameraGetTarget(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget))) <= 10.0)) {
        CameraShake(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), "Light", "Shake", 0.1, 0.2, 0.3);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericCameraShakeLightTarget_Init () {
    libGDHL_gt_HeroGenericCameraShakeLightTarget = TriggerCreate("libGDHL_gt_HeroGenericCameraShakeLightTarget_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGenericCameraShakeLightTarget, c_playerAny, "CameraShakeLightTauntingTotemSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Generic - Camera Shake Medium Target
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericCameraShakeMediumTarget_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), CameraGetTarget(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget))) <= 10.0)) {
        CameraShake(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), "Medium", "Shake", 0.1, 0.2, 0.3);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericCameraShakeMediumTarget_Init () {
    libGDHL_gt_HeroGenericCameraShakeMediumTarget = TriggerCreate("libGDHL_gt_HeroGenericCameraShakeMediumTarget_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGenericCameraShakeMediumTarget, c_playerAny, "CameraShakeMediumTauntingTotemSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Generic - Camera Shake Heavy Target
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericCameraShakeHeavyTarget_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), CameraGetTarget(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget))) <= 10.0)) {
        CameraShake(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), "Heavy", "Shake", 0.1, 0.2, 0.3);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericCameraShakeHeavyTarget_Init () {
    libGDHL_gt_HeroGenericCameraShakeHeavyTarget = TriggerCreate("libGDHL_gt_HeroGenericCameraShakeHeavyTarget_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGenericCameraShakeHeavyTarget, c_playerAny, "CameraShakeHeavyTauntingTotemSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Generic - Camera Shake Auto Caster
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericCameraShakeAutoCaster_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), CameraGetTarget(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster))) <= 10.0)) {
        CameraShake(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "Medium", "Shake", 0.0, 0.125, 0.0625);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericCameraShakeAutoCaster_Init () {
    libGDHL_gt_HeroGenericCameraShakeAutoCaster = TriggerCreate("libGDHL_gt_HeroGenericCameraShakeAutoCaster_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGenericCameraShakeAutoCaster, c_playerAny, "CameraShakeAutoCasterDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Generic - Camera Shake Light Caster
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericCameraShakeLightCaster_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), CameraGetTarget(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster))) <= 10.0)) {
        CameraShake(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "Light", "Shake", 0.1, 0.2, 0.3);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericCameraShakeLightCaster_Init () {
    libGDHL_gt_HeroGenericCameraShakeLightCaster = TriggerCreate("libGDHL_gt_HeroGenericCameraShakeLightCaster_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGenericCameraShakeLightCaster, c_playerAny, "CameraShakeLightCasterDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Generic - Camera Shake Medium Caster
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericCameraShakeMediumCaster_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), CameraGetTarget(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster))) <= 10.0)) {
        CameraShake(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "Medium", "Shake", 0.1, 0.2, 0.3);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericCameraShakeMediumCaster_Init () {
    libGDHL_gt_HeroGenericCameraShakeMediumCaster = TriggerCreate("libGDHL_gt_HeroGenericCameraShakeMediumCaster_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGenericCameraShakeMediumCaster, c_playerAny, "CameraShakeMediumCasterDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Generic - Camera Shake Heavy Caster
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericCameraShakeHeavyCaster_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DistanceBetweenPoints(EventPlayerEffectUsedPoint(c_effectLocationCasterUnit), CameraGetTarget(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster))) <= 10.0)) {
        CameraShake(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "Heavy", "Shake", 0.1, 0.2, 0.3);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericCameraShakeHeavyCaster_Init () {
    libGDHL_gt_HeroGenericCameraShakeHeavyCaster = TriggerCreate("libGDHL_gt_HeroGenericCameraShakeHeavyCaster_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGenericCameraShakeHeavyCaster, c_playerAny, "CameraShakeHeavyCasterDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Port Back To Base
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroPortBackToBase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_hero;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    if ((UnitIsSelected(lv_hero, lv_player) == true) && (UnitGetType(lv_hero) != "SamuroMirrorImage")) {
        libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_player, UnitGetPosition(lv_hero), 0.0, -1, 0.0, false);
    }

    UIAlert("HearthstoneUsed", lv_player, StringToText(""), null);
    libGame_gf_SendEventHeroPortedBackToTown(lv_player);
    if (((UnitHasBehavior2(lv_hero, "SiegeMode") == true) || (UnitHasBehavior2(lv_hero, "PassiveBuffWeaponSiegeMode") == true))) {
        UnitCreateEffectUnit(lv_hero, "SiegeModeRemoveSet", lv_hero);
    }

    if ((UnitBehaviorCount(lv_hero, "IllidanMetamorphosis") == 0) && (UnitBehaviorCount(lv_hero, "TychusOdin") == 0) && (UnitBehaviorCount(lv_hero, "TassadarArchon") == 0) && (UnitBehaviorCount(lv_hero, "ArchonTwilightArchon") == 0) && (UnitBehaviorCount(lv_hero, "Maelstrom") == 0) && (UnitBehaviorCount(lv_hero, "TranquilityBehavior") == 0) && (libCore_gv_sYSGameMode != libCore_ge_GameModes_Tutorial1Deprecated)) {
        libGame_gf_ApplyMountBehaviorToHero(lv_hero);
    }

    if ((UnitBehaviorCount(lv_hero, "IllidanMetamorphosis") == 1) && (UnitBehaviorCount(lv_hero, "IllidanMetamorphosisDemonicFormCarryBehavior") == 1)) {
        UnitBehaviorAdd(lv_hero, "FlightoftheBetrayer", lv_hero, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroPortBackToBase_Init () {
    libGDHL_gt_HeroPortBackToBase = TriggerCreate("libGDHL_gt_HeroPortBackToBase_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroPortBackToBase, c_playerAny, "PortBackToBaseTeleport");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Port Back To Base Start
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroPortBackToBaseStart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "HeroGenericHearthing", EventUnit(), 1);
    libUIUI_gf_PingPlayerStartsHearthStonePing(EventPlayer(), UnitGetPosition(EventUnit()));
    libSond_gf_HeroVOHeroBeginsHearthing(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroPortBackToBaseStart_Init () {
    libGDHL_gt_HeroPortBackToBaseStart = TriggerCreate("libGDHL_gt_HeroPortBackToBaseStart_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroPortBackToBaseStart, null, AbilityCommand("PortBackToBase", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Port Back To Base End
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroPortBackToBaseEnd_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "HeroGenericHearthing", 1);
    libUIUI_gf_PingCancelPlayersHearthStonePing(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroPortBackToBaseEnd_Init () {
    libGDHL_gt_HeroPortBackToBaseEnd = TriggerCreate("libGDHL_gt_HeroPortBackToBaseEnd_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroPortBackToBaseEnd, null, AbilityCommand("PortBackToBase", 0), c_abilEffectStageBail, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroPortBackToBaseEnd, null, AbilityCommand("PortBackToBase", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroPortBackToBaseEnd, null, AbilityCommand("PortBackToBase", 0), c_unitAbilStageCancel, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroPortBackToBaseEnd, null, AbilityCommand("PortBackToBase", 0), c_unitAbilStagePreempt, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroPortBackToBaseEnd, null, AbilityCommand("PortBackToBase", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Port Back To Base Fizzle
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroPortBackToBaseFizzle_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PingDestroy(libUIUI_gv_ping_PlayerHearth[EventPlayer()]);
    SoundPlayOnUnitForPlayer(SoundLink("Gen_Hearthstone_Teleport_Fizzle", -1), EventPlayer(), PlayerGroupSingle(EventPlayer()), EventUnit(), 0.0, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroPortBackToBaseFizzle_Init () {
    libGDHL_gt_HeroPortBackToBaseFizzle = TriggerCreate("libGDHL_gt_HeroPortBackToBaseFizzle_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_HeroPortBackToBaseFizzle, null, AbilityCommand("PortBackToBase", 0), c_abilEffectStageBail, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroPortBackToBaseFizzle, null, AbilityCommand("PortBackToBase", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Generic - Apply Flashbang Effect
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericApplyFlashbangEffect_Func (bool testConds, bool runActions) {
    playergroup autoB5BA7C92_g;
    int autoB5BA7C92_p;

    // Variable Declarations
    unit lv_targetHero;
    int lv_targetPlayer;
    playergroup lv_allyPlayerGroup;
    int lv_p;

    // Variable Initialization
    lv_targetHero = EventUnit();
    lv_targetPlayer = UnitGetOwner(EventUnit());
    lv_allyPlayerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_flashBangImage, PlayerGroupSingle(lv_targetPlayer), 0.0, 0.0);
    DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_flashBangImage, PlayerGroupSingle(lv_targetPlayer), 2.0, 100.0);
    SoundPlayForPlayer(SoundLink("Talent_FlashBang_Ring", -1), lv_targetPlayer, PlayerGroupSingle(lv_targetPlayer), 100.0, 0.0);
    libGame_gf_ShareUnshareVisionOfAlliesForPlayer(false, lv_targetPlayer);
    lv_allyPlayerGroup = libGame_gf_AlliedPlayerGroupOfPlayer(lv_targetPlayer);
    autoB5BA7C92_g = lv_allyPlayerGroup; 
    autoB5BA7C92_p = 1;
    for ( ; autoB5BA7C92_p <= PlayerGroupCount(autoB5BA7C92_g) ; autoB5BA7C92_p += (lv_p == PlayerGroupPlayer(autoB5BA7C92_g, autoB5BA7C92_p)) ) {
        lv_p = PlayerGroupPlayer(autoB5BA7C92_g, autoB5BA7C92_p);
        PlayerSetAlliance(lv_p, c_allianceIdSeekHelp, lv_targetPlayer, false);
        PlayerSetAlliance(lv_p, c_allianceIdGiveHelp, lv_targetPlayer, false);
    }
    VisRevealerEnable(libGame_gv_baseRevealers[lv_targetPlayer], false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericApplyFlashbangEffect_Init () {
    libGDHL_gt_HeroGenericApplyFlashbangEffect = TriggerCreate("libGDHL_gt_HeroGenericApplyFlashbangEffect_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroGenericApplyFlashbangEffect, null, "ItemBlindingLightHeroBlind", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroGenericApplyFlashbangEffect, null, "ArchangelsWrathFlashBang", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroGenericApplyFlashbangEffect, null, "RighteousnessExpirationFlashBang", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Generic - Remove Flash Bang Effect
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericRemoveFlashBangEffect_Func (bool testConds, bool runActions) {
    playergroup autoE8B60B84_g;
    int autoE8B60B84_p;

    // Variable Declarations
    unit lv_targetHero;
    int lv_targetPlayer;
    playergroup lv_allyPlayerGroup;
    int lv_p;

    // Variable Initialization
    lv_targetHero = EventUnit();
    lv_targetPlayer = UnitGetOwner(EventUnit());
    lv_allyPlayerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_ShareUnshareVisionOfAlliesForPlayer(true, lv_targetPlayer);
    lv_allyPlayerGroup = libGame_gf_AlliedPlayerGroupOfPlayer(lv_targetPlayer);
    autoE8B60B84_g = lv_allyPlayerGroup; 
    autoE8B60B84_p = 1;
    for ( ; autoE8B60B84_p <= PlayerGroupCount(autoE8B60B84_g) ; autoE8B60B84_p += (lv_p == PlayerGroupPlayer(autoE8B60B84_g, autoE8B60B84_p)) ) {
        lv_p = PlayerGroupPlayer(autoE8B60B84_g, autoE8B60B84_p);
        PlayerSetAlliance(lv_p, c_allianceIdSeekHelp, lv_targetPlayer, true);
        PlayerSetAlliance(lv_p, c_allianceIdGiveHelp, lv_targetPlayer, true);
    }
    VisRevealerEnable(libGame_gv_baseRevealers[lv_targetPlayer], true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericRemoveFlashBangEffect_Init () {
    libGDHL_gt_HeroGenericRemoveFlashBangEffect = TriggerCreate("libGDHL_gt_HeroGenericRemoveFlashBangEffect_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroGenericRemoveFlashBangEffect, null, "ItemBlindingLightHeroBlind", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroGenericRemoveFlashBangEffect, null, "ArchangelsWrathFlashBang", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroGenericRemoveFlashBangEffect, null, "ArchangelsWrathFlashBang", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroGenericRemoveFlashBangEffect, null, "RighteousnessExpirationFlashBang", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroGenericRemoveFlashBangEffect, null, "RighteousnessExpirationFlashBang", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Generic - Speed Ribbon Controller
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGenericSpeedRibbonController_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((EventUnitBehaviorChange() != c_unitBehaviorChangeCreate))) {
            return false;
        }

        if (!((EventUnitBehaviorChange() != c_unitBehaviorChangeDestroy))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), "Signal SpeedRibbonCheck");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGenericSpeedRibbonController_Init () {
    libGDHL_gt_HeroGenericSpeedRibbonController = TriggerCreate("libGDHL_gt_HeroGenericSpeedRibbonController_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroGenericSpeedRibbonController, null, c_behaviorCategoryFast, c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroGenericSpeedRibbonController, null, c_behaviorCategorySlow, c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroGenericSpeedRibbonController, null, c_behaviorCategoryUser15, c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Heroic Summons - Unit Gains Heroic Summon Behavior
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroicSummonsUnitGainsHeroicSummonBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_summonedUnit;
    unit lv_casterUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    lv_casterUnit = libGame_gv_players[lv_player].lv_heroUnit;
    lv_summonedUnit = EventUnit();
    libGDHL_gf_HeroicSummonsApplySummonedUnitTalentMonitor(lv_casterUnit, lv_summonedUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroicSummonsUnitGainsHeroicSummonBehavior_Init () {
    libGDHL_gt_HeroicSummonsUnitGainsHeroicSummonBehavior = TriggerCreate("libGDHL_gt_HeroicSummonsUnitGainsHeroicSummonBehavior_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroicSummonsUnitGainsHeroicSummonBehavior, null, "HeroicSummon", c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Abathur Exits Transport
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurAbathurExitsTransport_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;

    // Variable Initialization
    lv_player = libGame_gf_HeroExitingTransportPlayerExiting();
    lv_unit = libGame_gv_players[lv_player].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "HeroAbathur"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_players[lv_player].lv_activeVehicle != null)) {
        lv_unit = libGame_gv_players[lv_player].lv_activeVehicle;
        libUIUI_gf_UIHeroConsoleSetUpForPlayer(lv_unit, lv_player);
        libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(lv_unit, lv_player);
        UnitStatusBarOverride(lv_unit, c_unitStatusGroupAll);
        UnitClearSelection(lv_player);
        UnitSelect(lv_unit, lv_player, true);
        libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_unit);
        libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    }
    else {
        UnitClearSelection(lv_player);
        UnitSelect(libGame_gv_players[lv_player].lv_heroUnit, lv_player, true);
        libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurAbathurExitsTransport_Init () {
    libGDHL_gt_HeroAbathurAbathurExitsTransport = TriggerCreate("libGDHL_gt_HeroAbathurAbathurExitsTransport_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurAbathurExitsTransport, false);
    libGame_gf_HeroExitedTransport(libGDHL_gt_HeroAbathurAbathurExitsTransport);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Symbiote
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurSymbiote_Func (bool testConds, bool runActions) {
    int auto28C78E78_ae;
    int auto28C78E78_ai;

    // Variable Declarations
    unit lv_abathur;
    int lv_abathurPlayer;
    unit lv_symbioteHost;
    int lv_symbioteHostPlayer;
    string lv_symbioteAbilityCooldownLink;
    string lv_toxicNestAbilityCooldownLink;
    fixed lv_spikeBurstRange;
    fixed lv_symbioteFacing;
    bool lv_symbioteFacingTriggerEnabled;
    int lv_i;

    // Variable Initialization
    lv_symbioteAbilityCooldownLink = "";
    lv_toxicNestAbilityCooldownLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_abathur = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    if ((UnitIsAlive(lv_abathur) == true)) {
        lv_abathurPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
        if ((libGame_gv_afk_UseBrawlAFKSystem == false)) {
            libGame_gf_AfkResetWarningTimerForPlayer(lv_abathurPlayer);
        }
        else {
            libGame_gf_AFKBrawlResetWarningTimerForPlayer(lv_abathurPlayer);
        }
        if ((libGame_gv_afk_PlayerStartingIdle[lv_abathurPlayer] == true)) {
            libGame_gv_afk_PlayerStartingIdle[lv_abathurPlayer] = false;
        }

        UnitSetFacing(libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 315.0, 0.0);
        lv_symbioteHost = EventPlayerEffectUsedUnit(c_effectUnitTarget);
        lv_symbioteHostPlayer = UnitGetOwner(lv_symbioteHost);
        lv_symbioteAbilityCooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, "AbathurSymbiote", "Cost[" + IntToString(0) + "].Cooldown.Link", lv_abathurPlayer);
        lv_toxicNestAbilityCooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, "AbathurToxicNest", "Cost[" + IntToString(0) + "].Cooldown.Link", lv_abathurPlayer);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "AbathurSymbiote", 0, lv_abathurPlayer, UnitGetPosition(lv_symbioteHost));
        libGDHL_gv_heroAbathurSymbioteUnit[lv_abathurPlayer] = UnitLastCreated();
        AIAddPlayerUnit(libGDHL_gv_heroAbathurSymbioteUnit[lv_abathurPlayer]);
        UnitCreateEffectUnit(lv_symbioteHost, "SymbioteActorLink", libGDHL_gv_heroAbathurSymbioteUnit[lv_abathurPlayer]);
        UnitCreateEffectUnit(libGDHL_gv_heroAbathurSymbioteUnit[lv_abathurPlayer], "SymbiotePropertyLink", lv_symbioteHost);
        SoundPlayForPlayer(SoundLink("Abathur_Symbiote_Screen_Launch", -1), lv_abathurPlayer, PlayerGroupSingle(lv_abathurPlayer), 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("Abathur_Symbiote_Screen_Loop", -1), lv_abathurPlayer, PlayerGroupSingle(lv_abathurPlayer), 100.0, 0.0);
        libGDHL_gv_heroAbathurSymbioteScreenSound[lv_abathurPlayer] = SoundLastPlayed();
        libGDHL_gf_SendEventAbathurSymbiote(lv_abathurPlayer, libGDHL_gv_heroAbathurSymbioteUnit[lv_abathurPlayer], lv_symbioteHost);
        if ((UnitBehaviorCount(lv_abathur, "PressurizedGlandsCarryBehavior") == 1)) {
            lv_spikeBurstRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "SpikeBurstPressurizedGlandsDamageSearch", "AreaArray[" + IntToString(0) + "].Radius", lv_abathurPlayer)) + UnitGetPropertyFixed(lv_symbioteHost, c_unitPropRadius, c_unitPropCurrent));
            CatalogFieldValueSet(c_gameCatalogActor, "SymbioteSpikeBurstRangeSplat", "Scale", lv_abathurPlayer, FixedToString((lv_spikeBurstRange * libGDHL_gv_heroAbathurSpikeBurstSplatScalar), 2));
        }
        else {
            lv_spikeBurstRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "AbathurSymbioteSpikeBurstDamageSearch", "AreaArray[" + IntToString(0) + "].Radius", lv_abathurPlayer)) + UnitGetPropertyFixed(lv_symbioteHost, c_unitPropRadius, c_unitPropCurrent));
            CatalogFieldValueSet(c_gameCatalogActor, "SymbioteSpikeBurstRangeSplat", "Scale", lv_abathurPlayer, FixedToString((lv_spikeBurstRange * libGDHL_gv_heroAbathurSpikeBurstSplatScalar), 2));
        }
        SoundPlayForPlayer(SoundLink("AbathurHero_Symbiote", -1), lv_abathurPlayer, PlayerGroupSingle(UnitGetOwner(lv_symbioteHost)), 100.0, 0.0);
        UnitSelect(libGame_gv_players[lv_abathurPlayer].lv_heroUnit, lv_abathurPlayer, false);
        UnitSelect(libGDHL_gv_heroAbathurSymbioteUnit[lv_abathurPlayer], lv_abathurPlayer, true);
        UnitSelect(libGame_gv_players[lv_abathurPlayer].lv_heroUnit, lv_abathurPlayer, true);
        if ((libGDHL_gv_heroAbathurSymbioteDontLockCameraforCutscene == false)) {
            libGame_gv_players[lv_abathurPlayer].lv_cameraForcedLock = true;
            libGame_gv_players[lv_abathurPlayer].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(libGDHL_gv_heroAbathurSymbioteUnit[lv_abathurPlayer]);
            libGame_gf_CameraUpdateCameraForPlayer(lv_abathurPlayer);
        }

        libGDHL_gv_heroAbathurSymbioteEventAdded[lv_abathurPlayer] = true;
        libGDHL_gv_heroAbathurSymbioteLookAt[lv_abathurPlayer] = UnitGetPosition(lv_symbioteHost);
        libGDHL_gv_heroAbathurSymbioteActive[lv_abathurPlayer] = true;
        libNtve_gf_MakeUnitFacePoint(libGDHL_gv_heroAbathurSymbioteUnit[lv_abathurPlayer], PointWithOffsetPolar(UnitGetPosition(lv_symbioteHost), 1.0, -90.0), 2.0);
        while ((UnitIsAlive(lv_symbioteHost) == true) && (UnitBehaviorCount(lv_symbioteHost, "AbathurSymbioteHostBehavior") >= 1) && (UnitGetOwner(lv_symbioteHost) == lv_symbioteHostPlayer)) {
            if ((DistanceBetweenPoints(UnitGetPosition(libGDHL_gv_heroAbathurSymbioteUnit[lv_abathurPlayer]), UnitGetPosition(lv_symbioteHost)) >= 4.0)) {
                UnitSetPosition(libGDHL_gv_heroAbathurSymbioteUnit[lv_abathurPlayer], UnitGetPosition(lv_symbioteHost), false);
            }
            else {
                UnitSetPosition(libGDHL_gv_heroAbathurSymbioteUnit[lv_abathurPlayer], UnitGetPosition(lv_symbioteHost), true);
            }
            if ((UnitFilterMatch(lv_symbioteHost, lv_abathurPlayer, UnitFilter(0, (1 << (c_targetFilterStasis - 32)), 0, 0)) == true)) {
                if ((UnitHasBehavior2(libGDHL_gv_heroAbathurSymbioteUnit[lv_abathurPlayer], "AbathurSymbioteAbilityDisabler") == false)) {
                    UnitBehaviorAdd(libGDHL_gv_heroAbathurSymbioteUnit[lv_abathurPlayer], "AbathurSymbioteAbilityDisabler", lv_abathur, 1);
                }

            }
            else {
                if ((UnitHasBehavior2(libGDHL_gv_heroAbathurSymbioteUnit[lv_abathurPlayer], "AbathurSymbioteAbilityDisabler") == true)) {
                    UnitCreateEffectUnit(lv_abathur, "AbathurSymbioteRemoveAbilityDisabler", libGDHL_gv_heroAbathurSymbioteUnit[lv_abathurPlayer]);
                }

            }
            Wait(0.0625, c_timeGame);
        }
        UnitModifyCooldown(lv_abathur, lv_symbioteAbilityCooldownLink, 4.0, c_cooldownOperationSet);
        UnitModifyCooldown(lv_abathur, lv_toxicNestAbilityCooldownLink, 0.5, c_cooldownOperationSet);
        libGame_gv_players[lv_abathurPlayer].lv_cameraForcedLock = false;
        libGame_gv_players[lv_abathurPlayer].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[lv_abathurPlayer].lv_heroUnitGroup;
        libGame_gf_CameraUpdateCameraForPlayer(lv_abathurPlayer);
        AIRemovePlayerUnit(libGDHL_gv_heroAbathurSymbioteUnit[lv_abathurPlayer]);
        UnitKill(libGDHL_gv_heroAbathurSymbioteUnit[lv_abathurPlayer]);
        libGDHL_gv_heroAbathurSymbioteUnit[lv_abathurPlayer] = null;
        UnitBehaviorRemove(lv_abathur, "AssumingDirectControlBehavior", 1);
        auto28C78E78_ae = libCore_gv_bALMaxPlayers;
        auto28C78E78_ai = 1;
        lv_i = 1;
        for ( ; ( (auto28C78E78_ai >= 0 && lv_i <= auto28C78E78_ae) || (auto28C78E78_ai <= 0 && lv_i >= auto28C78E78_ae) ) ; lv_i += auto28C78E78_ai ) {
            if ((libGDHL_gv_heroAbathurSymbioteActive[lv_i] == true)) {
                lv_symbioteFacingTriggerEnabled = true;
                break;
            }

        }
        libGDHL_gv_heroAbathurSymbioteActive[lv_abathurPlayer] = false;
        SoundStop(libGDHL_gv_heroAbathurSymbioteScreenSound[lv_abathurPlayer], false);
        SoundPlayForPlayer(SoundLink("Abathur_Symbiote_Screen_End", -1), lv_abathurPlayer, PlayerGroupSingle(lv_abathurPlayer), 100.0, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurSymbiote_Init () {
    libGDHL_gt_HeroAbathurSymbiote = TriggerCreate("libGDHL_gt_HeroAbathurSymbiote_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurSymbiote, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurSymbiote, c_playerAny, "SymbioteApplyHostBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Carapace Regenerative Microbes
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurCarapaceRegenerativeMicrobes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_abathur;
    int lv_abathurPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_abathurPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_abathur = libGame_gv_players[lv_abathurPlayer].lv_heroUnit;
    if ((PlayerHasTalent(lv_abathurPlayer, "AbathurMasteryRegenerativeMicrobes") == true)) {
        UnitCreateEffectUnit(lv_abathur, "RegenerativeMicrobesApplyBehavior", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurCarapaceRegenerativeMicrobes_Init () {
    libGDHL_gt_HeroAbathurCarapaceRegenerativeMicrobes = TriggerCreate("libGDHL_gt_HeroAbathurCarapaceRegenerativeMicrobes_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurCarapaceRegenerativeMicrobes, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurCarapaceRegenerativeMicrobes, c_playerAny, "CarapaceEvolutionApplyShield");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurCarapaceRegenerativeMicrobes, c_playerAny, "CarapaceEvolutionApplyShieldHivemind");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Symbiote Screen Effect
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurSymbioteScreenEffect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_abathurSymbioteOverlay, PlayerGroupSingle(lv_player), 0.5, 0.0);
        UISetSelectionTypeEnabled(PlayerGroupSingle(lv_player), c_localSelectionTypeWorldPanelHero, false);
    }
    else {
        DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_abathurSymbioteOverlay, PlayerGroupSingle(lv_player), 0.5, 100.0);
        UISetSelectionTypeEnabled(PlayerGroupSingle(lv_player), c_localSelectionTypeWorldPanelHero, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurSymbioteScreenEffect_Init () {
    libGDHL_gt_HeroAbathurSymbioteScreenEffect = TriggerCreate("libGDHL_gt_HeroAbathurSymbioteScreenEffect_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurSymbioteScreenEffect, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAbathurSymbioteScreenEffect, null, "AssumingDirectControlBehavior", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAbathurSymbioteScreenEffect, null, "AssumingDirectControlBehavior", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Stab Facer
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurStabFacer_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitFacePoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 0.0625);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurStabFacer_Init () {
    libGDHL_gt_HeroAbathurStabFacer = TriggerCreate("libGDHL_gt_HeroAbathurStabFacer_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurStabFacer, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurStabFacer, c_playerAny, "StabCreateSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Volatile Mutation (Ultimate Evolution)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurVolatileMutationUltimateEvolution_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(UnitGetOwner(lv_unit), "AbathurVolatileMutation") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_unit, "AbathurVolatileMutation", lv_unit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurVolatileMutationUltimateEvolution_Init () {
    libGDHL_gt_HeroAbathurVolatileMutationUltimateEvolution = TriggerCreate("libGDHL_gt_HeroAbathurVolatileMutationUltimateEvolution_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurVolatileMutationUltimateEvolution, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAbathurVolatileMutationUltimateEvolution, null, "UltimateEvolutionBuild", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Ultimate Evolution - Start Control
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurUltimateEvolutionStartControl_Func (bool testConds, bool runActions) {
    int auto763D98BE_n;
    int auto763D98BE_i;

    // Variable Declarations
    string lv_abilLink;
    string lv_cooldownLink;
    unit lv_abathur;
    int lv_abathurPlayer;
    int lv_abathurLevel;
    unit lv_ultimateEvolutionUnit;
    fixed lv_multiplier;
    fixed lv_lifeofTarget;
    int lv_itHeroicAbil;
    unit lv_target;
    int lv_ownerofTarget;
    string lv_typeofCopiedUnit;

    // Variable Initialization
    lv_cooldownLink = "";
    lv_abathur = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_abathurPlayer = UnitGetOwner(lv_abathur);
    lv_abathurLevel = libGame_gf_GetCustomValueLevelofHeroUnit(lv_abathur);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_ownerofTarget = UnitGetOwner(lv_target);
    lv_typeofCopiedUnit = UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget));

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(lv_abathur) == false)) {
        UnitBehaviorRemove(lv_abathur, "AssumingDirectControlBehavior", 1);
        return true;
    }

    lv_multiplier = ((UnitLevel(libGame_gv_players[lv_abathurPlayer].lv_heroUnit) * 150.0) + 0.0);
    lv_lifeofTarget = UnitGetPropertyFixed(lv_target, c_unitPropLifeMax, c_unitPropNormal);
    PlayerSetSkin(lv_abathurPlayer, libGame_gv_players[UnitGetOwner(lv_target)].lv_skinData.lv_skinID);
    if ((UnitGetOwner(lv_target) <= libCore_gv_bALMaxPlayers) && (libGame_gv_players[UnitGetOwner(lv_target)].lv_activeVehicle != null)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_typeofCopiedUnit, 0, lv_abathurPlayer, UnitTypePlacementFromPoint(lv_typeofCopiedUnit, lv_abathurPlayer, UnitGetPosition(libGame_gv_players[lv_ownerofTarget].lv_activeVehicle), 35.0));
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, lv_typeofCopiedUnit, 0, lv_abathurPlayer, UnitTypePlacementFromPoint(lv_typeofCopiedUnit, lv_abathurPlayer, UnitGetPosition(lv_target), 35.0));
    }
    lv_ultimateEvolutionUnit = UnitLastCreated();
    AIRemovePlayerUnit(lv_abathur);
    AIAddPlayerUnit(lv_ultimateEvolutionUnit);
    libUIUI_gf_UIUnitStatusFramesUpdateUnitStatusFramesForUnit(lv_abathurPlayer, lv_ultimateEvolutionUnit);
    libUIUI_gf_InitPathingLines(lv_ultimateEvolutionUnit, lv_abathurPlayer);
    UnitSetPropertyFixed(lv_ultimateEvolutionUnit, c_unitPropLife, UnitGetPropertyFixed(lv_ultimateEvolutionUnit, c_unitPropLifeMax, c_unitPropCurrent));
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "UltimateEvolutionBuild", libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 1);
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "UltimateEvolutionBuff", libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 1);
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "OneQuarterValueHero", libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 1);
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "SuppressGenericDeath", libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 1);
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "SuppressGenericDeathRagdoll", libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 1);
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "AbathurUltimateEvolutionControlBehavior", libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 1);
    UnitBehaviorAdd(lv_ultimateEvolutionUnit, "EarnsXP", libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 1);
    UnitXPAddXP(lv_ultimateEvolutionUnit, null, libCore_gf_GetTotalXPForLevel(lv_abathurLevel));
    CatalogFieldValueSet(c_gameCatalogAbil, "Mount", "CastIntroTime[" + IntToString(0) + "]", UnitGetOwner(lv_abathur), CatalogFieldValueGet(c_gameCatalogAbil, "Mount", "CastIntroTime[" + IntToString(0) + "]", 0));
    if ((libMapM_gf_MapMechanicExistsOnMap("BlackheartsBay") == true)) {
        UnitBehaviorAdd(lv_ultimateEvolutionUnit, "MapMechanicStack", lv_ultimateEvolutionUnit, UnitBehaviorCount(lv_abathur, "MapMechanicStack"));
    }

    libGame_gv_players[lv_abathurPlayer].lv_activeVehicle = lv_ultimateEvolutionUnit;
    UnitSetPropertyFixed(libGame_gv_players[lv_abathurPlayer].lv_activeVehicle, c_unitPropLevel, lv_abathurLevel);
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(lv_ultimateEvolutionUnit, lv_abathurPlayer);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(lv_ultimateEvolutionUnit, lv_abathurPlayer);
    UnitStatusBarOverride(lv_ultimateEvolutionUnit, c_unitStatusGroupAll);
    libGame_gf_RemoveLevelUpHeroStatsForPlayer(UnitGetType(lv_ultimateEvolutionUnit), lv_abathurPlayer);
    auto763D98BE_n = lv_abathurLevel;
    for (auto763D98BE_i = 1; auto763D98BE_i <= auto763D98BE_n; auto763D98BE_i += 1) {
        libGame_gf_ApplyLevelUpHeroStatsForHeroSingleLevel(lv_ultimateEvolutionUnit);
    }
    UnitClearSelection(lv_abathurPlayer);
    UnitSelect(lv_ultimateEvolutionUnit, lv_abathurPlayer, true);
    libGame_gv_players[lv_abathurPlayer].lv_cameraPlayerHasControl = false;
    libGame_gv_players[lv_abathurPlayer].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_ultimateEvolutionUnit);
    libGame_gf_CameraUpdateCameraForPlayer(lv_abathurPlayer);
    libGame_gv_players[lv_abathurPlayer].lv_cameraPlayerHasControl = true;
    libGame_gf_CameraUpdateCameraForPlayer(lv_abathurPlayer);
    libGDHL_gf_SendEventAbathurUltimateEvolutionHeroCopied(lv_abathurPlayer, lv_ownerofTarget);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurUltimateEvolutionStartControl_Init () {
    libGDHL_gt_HeroAbathurUltimateEvolutionStartControl = TriggerCreate("libGDHL_gt_HeroAbathurUltimateEvolutionStartControl_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurUltimateEvolutionStartControl, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurUltimateEvolutionStartControl, c_playerAny, "UltimateEvolutionCastDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Ultimate Evolution - Stop Control
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurUltimateEvolutionStopControl_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_ultimateEvolutionUnit;
    int lv_ownerPlayer;
    int lv_itPlayer;
    int lv_teamNumberofOwner;
    bool lv_vehicleTransferCase;
    string lv_abilLink;
    string lv_cooldownLink;
    fixed lv_cooldownValue;

    // Variable Initialization
    lv_vehicleTransferCase = true;
    lv_cooldownLink = "";

    // Conditions
    if (testConds) {
        if (!((libGDHL_gv_heroAbathurStopControlIgnoredforPlayer[UnitGetOwner(EventUnit())] == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_ultimateEvolutionUnit = EventUnit();
    lv_ownerPlayer = UnitGetOwner(lv_ultimateEvolutionUnit);
    lv_teamNumberofOwner = libGame_gf_TeamNumberOfPlayer(lv_ownerPlayer);
    AIRemovePlayerUnit(lv_ultimateEvolutionUnit);
    AIAddPlayerUnit(libGame_gv_players[lv_ownerPlayer].lv_heroUnit);
    PlayerGroupLoopBegin(libGame_gv_teams[lv_teamNumberofOwner].lv_teamPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((libGame_gv_players[PlayerGroupLoopCurrent()].lv_activeVehicle == lv_ultimateEvolutionUnit)) {
            libGDHL_gf_SendEventAbathurUltimateEvolutionEnded(lv_ownerPlayer, lv_ultimateEvolutionUnit);
            libUIUI_gf_UIUnitStatusFramesRemoveUnitfromUnitStatusFrameHookup(lv_ownerPlayer, lv_ultimateEvolutionUnit);
            UnitBehaviorRemove(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, "AbathurUltimateEvolutionVehicleCasterBehavior", 1);
            libGame_gv_players[PlayerGroupLoopCurrent()].lv_activeVehicle = null;
            lv_vehicleTransferCase = false;
            break;
        }

    }
    PlayerGroupLoopEnd();
    if ((lv_vehicleTransferCase == true)) {
        UnitBehaviorRemove(libGame_gv_players[lv_ownerPlayer].lv_heroUnit, "AssumingDirectControlBehavior", 1);
        return true;
    }

    PlayerGroupLoopBegin(libGame_gv_teams[lv_teamNumberofOwner].lv_teamPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if ((UnitGetType(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit) == "HeroAbathur")) {
            PlayerSetSkin(PlayerGroupLoopCurrent(), libGame_gv_players[PlayerGroupLoopCurrent()].lv_skinData.lv_skinID);
            UnitSelect(lv_ultimateEvolutionUnit, PlayerGroupLoopCurrent(), false);
            UnitSelect(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, PlayerGroupLoopCurrent(), true);
            Wait(0.5, c_timeGame);
            UnitBehaviorRemove(libGame_gv_players[lv_ownerPlayer].lv_heroUnit, "AssumingDirectControlBehavior", 1);
            libGame_gv_players[PlayerGroupLoopCurrent()].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnitGroup;
            libGame_gf_CameraUpdateCameraForPlayer(PlayerGroupLoopCurrent());
            libUIUI_gf_UIHeroConsoleSetUpForPlayer(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, PlayerGroupLoopCurrent());
            libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, PlayerGroupLoopCurrent());
            lv_abilLink = "AbathurUltimateEvolution";
            lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.Link", PlayerGroupLoopCurrent());
            lv_cooldownValue = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.TimeUse", PlayerGroupLoopCurrent());
            UnitModifyCooldown(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, lv_cooldownLink, lv_cooldownValue, c_cooldownOperationSet);
            if ((libMapM_gf_MapMechanicExistsOnMap("BlackheartsBay") == true) && (UnitBehaviorCount(lv_ultimateEvolutionUnit, "MapMechanicStack") > UnitBehaviorCount(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, "MapMechanicStack"))) {
                UnitBehaviorAdd(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, "MapMechanicStack", libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, (UnitBehaviorCount(lv_ultimateEvolutionUnit, "MapMechanicStack") - UnitBehaviorCount(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, "MapMechanicStack")));
            }

            break;
        }

    }
    PlayerGroupLoopEnd();
    libGame_gv_players[lv_ownerPlayer].lv_heroUsesAnnouncementAlias = false;
    libGame_gv_players[lv_ownerPlayer].lv_heroAnnouncementAliasText = null;
    libGame_gv_players[lv_ownerPlayer].lv_heroAnnouncementAliasIcon = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurUltimateEvolutionStopControl_Init () {
    libGDHL_gt_HeroAbathurUltimateEvolutionStopControl = TriggerCreate("libGDHL_gt_HeroAbathurUltimateEvolutionStopControl_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurUltimateEvolutionStopControl, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAbathurUltimateEvolutionStopControl, null, "AbathurUltimateEvolutionControlBehavior", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Ultimate Evolution - Unit Dead
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead_Func (bool testConds, bool runActions) {
    playergroup autoC8F5471D_g;
    int autoC8F5471D_p;
    playergroup autoECF486CB_g;
    int autoECF486CB_p;

    // Variable Declarations
    unit lv_unit;
    int lv_targetPlayer;
    playergroup lv_allyPlayerGroup;
    playergroup lv_enemyPlayerGroup;
    playergroup lv_awardGroup;
    int lv_itPlayer;
    int lv_ownerPlayer;
    unit lv_itCleanupTargets;
    playergroup lv_killingGroup;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_targetPlayer = UnitGetOwner(EventUnit());
    lv_allyPlayerGroup = PlayerGroupEmpty();
    lv_enemyPlayerGroup = PlayerGroupEmpty();
    lv_awardGroup = PlayerGroupEmpty();
    lv_killingGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(lv_unit), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!(((UnitHasBehavior2(lv_unit, "UltimateEvolutionBuff") == true) || (UnitHasBehavior2(lv_unit, "UltimateEvolutionBuild") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitUncommandable(lv_unit, true);
    libGame_gf_ShareUnshareVisionOfAlliesForPlayer(true, lv_targetPlayer);
    lv_allyPlayerGroup = libGame_gf_AlliedPlayerGroupOfPlayer(lv_targetPlayer);
    autoC8F5471D_g = lv_allyPlayerGroup; 
    autoC8F5471D_p = 1;
    for ( ; autoC8F5471D_p <= PlayerGroupCount(autoC8F5471D_g) ; autoC8F5471D_p += (lv_itPlayer == PlayerGroupPlayer(autoC8F5471D_g, autoC8F5471D_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoC8F5471D_g, autoC8F5471D_p);
        PlayerSetAlliance(lv_itPlayer, c_allianceIdSeekHelp, lv_targetPlayer, true);
        PlayerSetAlliance(lv_itPlayer, c_allianceIdGiveHelp, lv_targetPlayer, true);
    }
    if (((UnitGroupCount(UnitGroupAlliance(lv_targetPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_unit), libCore_gv_bALHeroKillXPRadius), libCore_gv_filtersHeroic, libCore_gv_bALMaxPlayersOnATeam), c_unitCountAlive) >= 1) && (libNtve_gf_KillingPlayer() != lv_targetPlayer))) {
        lv_enemyPlayerGroup = libGame_gf_EnemyPlayerGroupOfPlayer(lv_targetPlayer);
        autoECF486CB_g = lv_enemyPlayerGroup; 
        autoECF486CB_p = 1;
        for ( ; autoECF486CB_p <= PlayerGroupCount(autoECF486CB_g) ; autoECF486CB_p += (lv_itPlayer == PlayerGroupPlayer(autoECF486CB_g, autoECF486CB_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(autoECF486CB_g, autoECF486CB_p);
            if ((lv_itPlayer != libCore_gv_cOMPUTER_TeamOrder) && (lv_itPlayer != libCore_gv_cOMPUTER_TeamChaos)) {
                PlayerGroupAdd(lv_awardGroup, lv_itPlayer);
            }

        }
        lv_killingGroup = libGame_gf_HeroDeathGetKillingGroupFromKillingTeamGroupAndDeadUnit(lv_enemyPlayerGroup, libNtve_gf_KillingPlayer(), lv_unit);
        libGame_gf_HeroDeathAwardXP(libNtve_gf_KillingPlayer(), lv_unit, lv_awardGroup, lv_killingGroup, false);
    }

    UnitBehaviorRemove(lv_unit, "UltimateEvolutionBuff", 1);
    Wait(5.0, c_timeGame);
    UnitRemove(lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead_Init () {
    libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead = TriggerCreate("libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead, false);
    TriggerAddEventUnitDied(libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Locust Spawned
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurLocustSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_locustUnit;
    unit lv_effectSource;
    int lv_locustUnitOwner;

    // Variable Initialization
    lv_locustUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_effectSource = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_locustUnitOwner = UnitGetOwner(lv_locustUnit);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libGame_gv_players[lv_locustUnitOwner].lv_summonedUnitGroup, lv_locustUnit);
    UnitSetFacing(lv_locustUnit, UnitGetFacing(lv_effectSource), 0.0);
    UnitIssueOrder(lv_locustUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_effectSource), 1.5, UnitGetFacing(lv_effectSource))), c_orderQueueAddToFront);
    Wait(0.5, c_timeGame);
    if ((UnitIsValid(lv_locustUnit) == true) && (lv_locustUnitOwner > 0) && (lv_locustUnitOwner <= libCore_gv_bALMaxPlayers)) {
        libAIAI_gf_SummonedAIInitialAttackLogic(false, lv_locustUnit, libGame_gv_players[lv_locustUnitOwner].lv_heroUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurLocustSpawned_Init () {
    libGDHL_gt_HeroAbathurLocustSpawned = TriggerCreate("libGDHL_gt_HeroAbathurLocustSpawned_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurLocustSpawned, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurLocustSpawned, c_playerAny, "LocustSpawnLanerDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Locust Nest Set Facing
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurLocustNestSetFacing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = EventUnitCreatedUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_MakeUnitFacePoint(lv_unit, UnitGetPosition(libGame_gv_teams[libGame_gf_EnemyTeamNumberOfPlayer(UnitGetOwner(lv_unit))].lv_core), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurLocustNestSetFacing_Init () {
    libGDHL_gt_HeroAbathurLocustNestSetFacing = TriggerCreate("libGDHL_gt_HeroAbathurLocustNestSetFacing_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurLocustNestSetFacing, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroAbathurLocustNestSetFacing, null, "AbathurLocustNest", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Locust Nest Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurLocustNestCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroupFilter("AbathurLocustNest", lv_player, libGame_gv_players[lv_player].lv_summonedUnitGroup, UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupAdd(libGame_gv_players[lv_player].lv_summonedUnitGroup, EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurLocustNestCast_Init () {
    libGDHL_gt_HeroAbathurLocustNestCast = TriggerCreate("libGDHL_gt_HeroAbathurLocustNestCast_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurLocustNestCast, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroAbathurLocustNestCast, null, "AbathurLocustNest", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Symbiote Hivemind (Single Target)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurSymbioteHivemindSingleTarget_Func (bool testConds, bool runActions) {
    unitgroup autoFE393C25_g;
    int autoFE393C25_u;

    // Variable Declarations
    unitgroup lv_symbioteHivemindHosts;
    int lv_numSymbioteHivemindHosts;
    libGDHL_gs_SymbioteHivemind lv_symbioteHivemindArray;
    unit lv_symbioteHivemindHost;
    unit lv_itSymbioteHivemindHost;
    unit lv_mainSymbioteHost;
    unit lv_mainSymbiote;
    int lv_abathurPlayer;
    int lv_hivemindSymbioteHostCounter;

    // Variable Initialization
    lv_symbioteHivemindHosts = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_abathurPlayer = libGDHL_gf_AbathurSymbioteAbathurPlayer();
    lv_mainSymbioteHost = libGDHL_gf_AbathurSymbioteTarget();
    lv_mainSymbiote = libGDHL_gf_AbathurSymbioteUnit();
    while ((UnitIsAlive(lv_mainSymbiote) == true) && (UnitIsAlive(lv_mainSymbioteHost) == true)) {
        if ((PlayerHasTalent(libGDHL_gf_AbathurSymbioteAbathurPlayer(), "AbathurSymbioteHivemind") == true)) {
            lv_symbioteHivemindHosts = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", lv_abathurPlayer, c_unitAllianceAllyExcludeSelf, RegionCircle(UnitGetPosition(lv_mainSymbioteHost), libGDHL_gv_abathurSymbioteHivemindCastRange_C), libCore_gv_filtersHeroicAllyandnotHoverorBenign, (libGDHL_gv_abathurSymbioteHivemindMaxHosts_C + 1));
            autoFE393C25_g = lv_symbioteHivemindHosts;
            autoFE393C25_u = 1;
            for ( ; autoFE393C25_u <= UnitGroupCount(autoFE393C25_g, c_unitCountAll) ; autoFE393C25_u += (lv_itSymbioteHivemindHost == UnitGroupUnit(autoFE393C25_g, autoFE393C25_u)) ) {
                lv_itSymbioteHivemindHost = UnitGroupUnit(autoFE393C25_g, autoFE393C25_u);
                if (((lv_itSymbioteHivemindHost == lv_mainSymbioteHost) || (UnitHasBehavior2(lv_itSymbioteHivemindHost, "Dead") == true))) {
                    UnitGroupRemove(lv_symbioteHivemindHosts, lv_itSymbioteHivemindHost);
                    break;
                }

            }
            if ((UnitGroupCount(lv_symbioteHivemindHosts, c_unitCountAlive) <= 0)) {
                Wait(0.0625, c_timeGame);
                continue;
            }

            lv_symbioteHivemindHost = UnitGroupClosestToPoint(lv_symbioteHivemindHosts, UnitGetPosition(lv_mainSymbioteHost));
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "AbathurSymbiote", 0, lv_abathurPlayer, UnitGetPosition(lv_symbioteHivemindHost));
            lv_symbioteHivemindArray.lv_symbioteUnit = UnitLastCreated();
            lv_symbioteHivemindArray.lv_hostUnit = lv_symbioteHivemindHost;
            UnitCreateEffectUnit(lv_symbioteHivemindArray.lv_hostUnit, "SymbioteActorLink", lv_symbioteHivemindArray.lv_symbioteUnit);
            UnitCreateEffectUnit(lv_symbioteHivemindArray.lv_symbioteUnit, "SymbiotePropertyLink", lv_symbioteHivemindHost);
            UnitCreateEffectUnit(lv_symbioteHivemindArray.lv_symbioteUnit, "AbathurSpikeBurstAddCoolup", lv_symbioteHivemindArray.lv_symbioteUnit);
            UnitCreateEffectUnit(lv_mainSymbiote, "AbathurSymbioteHivemindCreateUnitLinkDummyA", lv_symbioteHivemindArray.lv_hostUnit);
            ActorSend(libNtve_gf_MainActorofUnit(lv_symbioteHivemindArray.lv_symbioteUnit), "Signal HivemindScale");
            ActorSend(libNtve_gf_MainActorofUnit(lv_mainSymbiote), "Signal HivemindActive");
            UnitBehaviorAdd(lv_symbioteHivemindArray.lv_hostUnit, "AbathurSymbioteHostBehavior", lv_symbioteHivemindArray.lv_symbioteUnit, 1);
            UnitBehaviorAdd(lv_symbioteHivemindArray.lv_symbioteUnit, "AbathurSymbioteHivemind", lv_symbioteHivemindArray.lv_symbioteUnit, 1);
            UnitBehaviorAdd(lv_symbioteHivemindArray.lv_hostUnit, "AbathurSymbioteHivemind", lv_symbioteHivemindArray.lv_hostUnit, 1);
            if ((PlayerHasTalent(lv_abathurPlayer, "AbathurSymbioteAdrenalOverload") == true)) {
                UnitBehaviorAdd(lv_symbioteHivemindArray.lv_hostUnit, "AbathurAdrenalOverload", lv_symbioteHivemindArray.lv_symbioteUnit, 1);
            }

            SoundPlayForPlayer(SoundLink("AbathurHero_Symbiote", -1), lv_abathurPlayer, PlayerGroupSingle(UnitGetOwner(lv_itSymbioteHivemindHost)), 100.0, 0.0);
            while ((UnitIsAlive(lv_symbioteHivemindArray.lv_hostUnit) == true) && (UnitHasBehavior2(lv_symbioteHivemindArray.lv_hostUnit, "Dead") == false) && (UnitIsAlive(lv_symbioteHivemindArray.lv_symbioteUnit) == true) && (UnitFilterMatch(lv_symbioteHivemindArray.lv_hostUnit, lv_abathurPlayer, UnitFilter(0, 0, 0, (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)))) == true)) {
                if ((UnitIsAlive(lv_mainSymbiote) == true) && (UnitIsAlive(lv_mainSymbioteHost) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(lv_mainSymbioteHost), UnitGetPosition(lv_symbioteHivemindArray.lv_hostUnit)) >= libGDHL_gv_abathurSymbioteHivemindMaxRange_C)) {
                        ActorSend(libNtve_gf_MainActorofUnit(lv_mainSymbiote), "Signal RemoveStabCursors");
                        UnitBehaviorRemove(lv_symbioteHivemindArray.lv_hostUnit, "AbathurSymbioteHostBehavior", 1);
                        UnitBehaviorRemove(lv_symbioteHivemindArray.lv_hostUnit, "AbathurSymbioteHivemind", 1);
                        UnitBehaviorRemove(lv_symbioteHivemindArray.lv_symbioteUnit, "AbathurSymbioteHivemind", 1);
                        UnitKill(lv_symbioteHivemindArray.lv_symbioteUnit);
                        lv_symbioteHivemindArray.lv_symbioteUnit = null;
                        lv_symbioteHivemindArray.lv_hostUnit = null;
                        Wait(0.0625, c_timeGame);
                        continue;
                    }

                    if ((DistanceBetweenPoints(UnitGetPosition(lv_symbioteHivemindArray.lv_symbioteUnit), UnitGetPosition(lv_symbioteHivemindArray.lv_hostUnit)) >= 4.0)) {
                        UnitSetPosition(lv_symbioteHivemindArray.lv_symbioteUnit, UnitGetPosition(lv_symbioteHivemindArray.lv_hostUnit), false);
                    }
                    else {
                        UnitSetPosition(lv_symbioteHivemindArray.lv_symbioteUnit, UnitGetPosition(lv_symbioteHivemindArray.lv_hostUnit), true);
                    }
                    Wait(0.0625, c_timeGame);
                }
                else {
                    UnitBehaviorRemove(lv_symbioteHivemindArray.lv_hostUnit, "AbathurSymbioteHostBehavior", 1);
                    UnitBehaviorRemove(lv_symbioteHivemindArray.lv_hostUnit, "AbathurSymbioteHivemind", 1);
                    UnitBehaviorRemove(lv_symbioteHivemindArray.lv_symbioteUnit, "AbathurSymbioteHivemind", 1);
                    UnitKill(lv_symbioteHivemindArray.lv_symbioteUnit);
                    lv_symbioteHivemindArray.lv_symbioteUnit = null;
                    lv_symbioteHivemindArray.lv_hostUnit = null;
                }
            }
            if ((UnitIsAlive(lv_symbioteHivemindArray.lv_symbioteUnit) == true)) {
                ActorSend(libNtve_gf_MainActorofUnit(lv_mainSymbiote), "Signal HivemindInActive");
                UnitBehaviorRemove(lv_symbioteHivemindArray.lv_hostUnit, "AbathurSymbioteHostBehavior", 1);
                UnitBehaviorRemove(lv_symbioteHivemindArray.lv_hostUnit, "AbathurSymbioteHivemind", 1);
                UnitBehaviorRemove(lv_symbioteHivemindArray.lv_symbioteUnit, "AbathurSymbioteHivemind", 1);
                UnitKill(lv_symbioteHivemindArray.lv_symbioteUnit);
                lv_symbioteHivemindArray.lv_symbioteUnit = null;
                lv_symbioteHivemindArray.lv_hostUnit = null;
            }

        }

        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurSymbioteHivemindSingleTarget_Init () {
    libGDHL_gt_HeroAbathurSymbioteHivemindSingleTarget = TriggerCreate("libGDHL_gt_HeroAbathurSymbioteHivemindSingleTarget_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurSymbioteHivemindSingleTarget, false);
    libGDHL_gf_AbathurSymbiote(libGDHL_gt_HeroAbathurSymbioteHivemindSingleTarget);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Symbiote Hivemind Stab
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurSymbioteHivemindStab_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unitgroup lv_symbioteHivemindHats;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_symbioteHivemindHats = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(UnitGetOwner(lv_unit), "AbathurSymbioteHivemind") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_symbioteHivemindHats = UnitGroup("AbathurSymbiote", UnitGetOwner(lv_unit), RegionCircle(UnitGetPosition(lv_unit), libGDHL_gv_abathurSymbioteHivemindMaxRange_C), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), (libGDHL_gv_abathurSymbioteHivemindMaxHosts_C + 1));
    UnitGroupIssueOrder(lv_symbioteHivemindHats, OrderTargetingPoint(AbilityCommand("AbathurSymbioteStab", 0), EventUnitTargetPoint()), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurSymbioteHivemindStab_Init () {
    libGDHL_gt_HeroAbathurSymbioteHivemindStab = TriggerCreate("libGDHL_gt_HeroAbathurSymbioteHivemindStab_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurSymbioteHivemindStab, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroAbathurSymbioteHivemindStab, null, AbilityCommand("AbathurSymbioteStab", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Monstrosity - Add Minion Kill Stacks
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurMonstrosityAddMinionKillStacks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_abathurPlayer;
    unit lv_symbiote;
    int lv_evolutionCompleteStacks;
    unit lv_minionUnit;

    // Variable Initialization
    lv_abathurPlayer = libGame_gf_SpecialCaseUnitParticipatedInNPCTakedownPlayerParticipant();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_minionUnit = libGame_gf_SpecialCaseUnitParticipatedInNPCTakedownMinion();
    if (((UnitTypeTestAttribute(UnitGetType(lv_minionUnit), c_unitAttributeSummoned) == true) || (UnitTypeTestAttribute(UnitGetType(lv_minionUnit), c_unitAttributeStructure) == true) || (UnitTypeTestAttribute(UnitGetType(lv_minionUnit), c_unitAttributeLight) == true) || (UnitTypeTestAttribute(UnitGetType(lv_minionUnit), c_unitAttributeRobotic) == true) || (UnitTypeTestAttribute(UnitGetType(lv_minionUnit), c_unitAttributeMapBoss) == true))) {
        return true;
    }

    if ((UnitGetType(libGame_gv_players[lv_abathurPlayer].lv_heroUnit) == "HeroAbathur") && (PlayerHasTalent(lv_abathurPlayer, "AbathurHeroicAbilityEvolveMonstrosity") == true) && ((UnitTypeTestAttribute(UnitGetType(lv_minionUnit), c_unitAttributeBiological) == true) || (UnitTypeTestAttribute(UnitGetType(lv_minionUnit), c_unitAttributeRobotic) == true))) {
        if ((TechTreeUnitCount(lv_abathurPlayer, "AbathurSymbiote", c_techCountCompleteOnly) > 0)) {
            UnitGroupLoopBegin(UnitGroup("AbathurSymbiote", lv_abathurPlayer, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "AbathurEvolveMonstrosityAbathurStack", UnitGroupLoopCurrent(), 1);
                lv_symbiote = UnitGroupLoopCurrent();
            }
            UnitGroupLoopEnd();
        }

        UnitGroupLoopBegin(UnitGroupSearch("AbathurEvolvedMonstrosity", lv_abathurPlayer, UnitGetPosition(libGame_gf_SpecialCaseUnitParticipatedInNPCTakedownMinion()), libCore_gv_bALXPRadius, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "AbathurEvolveMonstrosityDamageStack", UnitGroupLoopCurrent(), 1);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "AbathurEvolveMonstrosityHealthStack", UnitGroupLoopCurrent(), 1);
            UnitCreateEffectUnit(UnitGroupLoopCurrent(), "EvolveMonstrosityHealthStackHealer", UnitGroupLoopCurrent());
            UnitBehaviorAdd(libGame_gv_players[lv_abathurPlayer].lv_heroUnit, "AbathurEvolveMonstrosityAbathurStack", libGame_gv_players[lv_abathurPlayer].lv_heroUnit, 1);
            UnitBehaviorSetDurationRemaining(libGame_gv_players[lv_abathurPlayer].lv_heroUnit, "AbathurEvolveMonstrosityAbathurStack", UnitBehaviorDuration(UnitGroupLoopCurrent(), "AbathurEvolveMonstrosity"));
            UnitBehaviorSetDurationRemaining(lv_symbiote, "AbathurEvolveMonstrosityAbathurStack", UnitBehaviorDuration(UnitGroupLoopCurrent(), "AbathurEvolveMonstrosity"));
            if ((PlayerHasTalent(lv_abathurPlayer, "AbathurMasteryEvolutionComplete") == true)) {
                lv_evolutionCompleteStacks = PlayerScoreValueGetAsInt(lv_abathurPlayer, "EvolutionCompleteStacks");
                lv_evolutionCompleteStacks += 1;
                PlayerScoreValueSetFromInt(lv_abathurPlayer, "EvolutionCompleteStacks", lv_evolutionCompleteStacks);
            }

        }
        UnitGroupLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurMonstrosityAddMinionKillStacks_Init () {
    libGDHL_gt_HeroAbathurMonstrosityAddMinionKillStacks = TriggerCreate("libGDHL_gt_HeroAbathurMonstrosityAddMinionKillStacks_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityAddMinionKillStacks, false);
    libGame_gf_SpecialCaseParticipatedInNPCTakedown(libGDHL_gt_HeroAbathurMonstrosityAddMinionKillStacks);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Monstrosity - Initial Hook to AI
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurMonstrosityInitialHooktoAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    libAIAI_gf_SummonedAIInitialAttackLogic(false, EventPlayerEffectUsedUnit(c_effectUnitTarget), libGame_gv_players[lv_player].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurMonstrosityInitialHooktoAI_Init () {
    libGDHL_gt_HeroAbathurMonstrosityInitialHooktoAI = TriggerCreate("libGDHL_gt_HeroAbathurMonstrosityInitialHooktoAI_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityInitialHooktoAI, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurMonstrosityInitialHooktoAI, c_playerAny, "AbathurEvolveMonstrosityApplyTimedLife");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Monstrosity - Symbiote end - Hook to AI
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurMonstrositySymbioteendHooktoAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(libGame_gv_players[lv_player].lv_heroUnit, lv_player);
    UnitSelect(libGDHL_gv_abathurMonstrosity[lv_player], lv_player, false);
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(libGame_gv_players[lv_player].lv_heroUnit, lv_player);
    Wait(0.0625, c_timeGame);
    if ((UnitIsAlive(libGame_gv_players[lv_player].lv_heroUnit) == false)) {
        libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar("Dead", lv_player);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurMonstrositySymbioteendHooktoAI_Init () {
    libGDHL_gt_HeroAbathurMonstrositySymbioteendHooktoAI = TriggerCreate("libGDHL_gt_HeroAbathurMonstrositySymbioteendHooktoAI_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurMonstrositySymbioteendHooktoAI, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurMonstrositySymbioteendHooktoAI, c_playerAny, "AbathurSymbioteEvolveMonstrosityFinalDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Monstrosity - Deselected - Hook to AI
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurMonstrosityDeselectedHooktoAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_player <= libCore_gv_bALMaxEnginePlayerCount) && (libGDHL_gv_abathurMonstrosity[lv_player] == EventUnit())) {
        libAIAI_gf_SummonedAIInitialAttackLogic(false, libGDHL_gv_abathurMonstrosity[lv_player], libGame_gv_players[lv_player].lv_heroUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurMonstrosityDeselectedHooktoAI_Init () {
    libGDHL_gt_HeroAbathurMonstrosityDeselectedHooktoAI = TriggerCreate("libGDHL_gt_HeroAbathurMonstrosityDeselectedHooktoAI_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityDeselectedHooktoAI, false);
    TriggerAddEventUnitSelected(libGDHL_gt_HeroAbathurMonstrosityDeselectedHooktoAI, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Monstrosity - Unhook AI
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurMonstrosityUnhookAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_ownerOfTarget;

    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_ownerOfTarget = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSelect(lv_unit, UnitGetOwner(lv_unit), true);
    libAIAI_gf_MinionAIUnhookUnitFromMinionAI(lv_unit);
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(lv_unit, lv_ownerOfTarget);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(lv_unit, lv_ownerOfTarget);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurMonstrosityUnhookAI_Init () {
    libGDHL_gt_HeroAbathurMonstrosityUnhookAI = TriggerCreate("libGDHL_gt_HeroAbathurMonstrosityUnhookAI_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityUnhookAI, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAbathurMonstrosityUnhookAI, c_playerAny, "AbathurSymbioteEvolveMonstrosityInitialDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Monstrosity - Kill Initial Target
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurMonstrosityKillInitialTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_unit, "StormSuicide", lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurMonstrosityKillInitialTarget_Init () {
    libGDHL_gt_HeroAbathurMonstrosityKillInitialTarget = TriggerCreate("libGDHL_gt_HeroAbathurMonstrosityKillInitialTarget_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityKillInitialTarget, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAbathurMonstrosityKillInitialTarget, null, "AbathurEvolveMonstrosityTargetCollisionSuppresser", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Monstrosity - Add Symbiote Stacks
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurMonstrosityAddSymbioteStacks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = EventUnitCreatedUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "AbathurSymbiote"))) {
            return false;
        }

        if (!((TechTreeUnitCount(UnitGetOwner(lv_unit), "AbathurEvolvedMonstrosity", c_techCountCompleteOnly) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("AbathurEvolvedMonstrosity", UnitGetOwner(lv_unit), RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(lv_unit, "AbathurEvolveMonstrosityAbathurStack", lv_unit, UnitBehaviorCount(UnitGroupLoopCurrent(), "AbathurEvolveMonstrosityDamageStack"));
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurMonstrosityAddSymbioteStacks_Init () {
    libGDHL_gt_HeroAbathurMonstrosityAddSymbioteStacks = TriggerCreate("libGDHL_gt_HeroAbathurMonstrosityAddSymbioteStacks_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurMonstrosityAddSymbioteStacks, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroAbathurMonstrosityAddSymbioteStacks, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Abathur - Symbioted Monstrosity Symbioted
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAbathurSymbiotedMonstrositySymbioted_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_deepTunnelCD;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGDHL_gf_AbathurSymbioteTarget()) == "AbathurEvolvedMonstrosity"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_abathurMonstrosity[libGDHL_gf_AbathurSymbioteAbathurPlayer()] = libGDHL_gf_AbathurSymbioteTarget();
    libGDHL_gv_abathurSymbioteMonstrosity[libGDHL_gf_AbathurSymbioteAbathurPlayer()] = libGDHL_gf_AbathurSymbioteUnit();
    UnitBehaviorRemove(libGDHL_gf_AbathurSymbioteUnit(), "AbathurSymbioteSuppressAttack", 1);
    if ((PlayerHasTalent(libGDHL_gf_AbathurSymbioteAbathurPlayer(), "AbathurMasteryEvolutionComplete") == true)) {
        UnitBehaviorAdd(libGDHL_gf_AbathurSymbioteUnit(), "AbathurMonstrosityDeepTunnelCarry", libGDHL_gf_AbathurSymbioteUnit(), 1);
        lv_deepTunnelCD = UnitGetCooldown(libGDHL_gf_AbathurSymbioteTarget(), "Abil/AbathurMonstrosityDeepTunnel");
        UnitModifyCooldown(libGDHL_gf_AbathurSymbioteUnit(), "Abil/AbathurMonstrosityDeepTunnelRedirect", lv_deepTunnelCD, c_cooldownOperationSet);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAbathurSymbiotedMonstrositySymbioted_Init () {
    libGDHL_gt_HeroAbathurSymbiotedMonstrositySymbioted = TriggerCreate("libGDHL_gt_HeroAbathurSymbiotedMonstrositySymbioted_Func");
    TriggerEnable(libGDHL_gt_HeroAbathurSymbiotedMonstrositySymbioted, false);
    libGDHL_gf_AbathurSymbiote(libGDHL_gt_HeroAbathurSymbiotedMonstrositySymbioted);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Artanis - Blade Dash Phase Prism Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArtanisBladeDashPhasePrismCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((lv_player > 0))) {
            return false;
        }

        if (!((lv_player <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitFilterMatch(lv_unit, lv_player, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterStunned - 32)) | (1 << (c_targetFilterSilenced - 32)))) == true))) {
            return false;
        }

        if (!(((UnitBehaviorCount(lv_unit, "ArtanisBladeDashFirstCaster") == 1) || (UnitBehaviorCount(lv_unit, "ArtanisBladeDashBetweenStrikes") == 1) || (UnitBehaviorCount(lv_unit, "ArtanisBladeDashSecondCaster") == 1) || (UnitBehaviorCount(lv_unit, "ArtanisBladeDashValidity") == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPointWithSource(lv_unit, "ArtanisPhasePrismInitialSet", OrderGetTargetPoint(EventUnitOrder()), c_gameCatalogAbil, "ArtanisPhasePrism");
    UnitCreateEffectUnitWithSource(lv_unit, "ArtanisBladeDashPhasePrismModifyCooldown", lv_unit, c_gameCatalogAbil, "ArtanisPhasePrism");
    UnitCreateEffectUnitWithSource(lv_unit, "ArtanisPhasePrismCancelOrder", lv_unit, c_gameCatalogAbil, "ArtanisPhasePrism");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArtanisBladeDashPhasePrismCast_Init () {
    libGDHL_gt_HeroArtanisBladeDashPhasePrismCast = TriggerCreate("libGDHL_gt_HeroArtanisBladeDashPhasePrismCast_Func");
    TriggerEnable(libGDHL_gt_HeroArtanisBladeDashPhasePrismCast, false);
    TriggerAddEventUnitOrder(libGDHL_gt_HeroArtanisBladeDashPhasePrismCast, null, AbilityCommand("ArtanisPhasePrism", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Artanis - Twin Blades Zealot Charge Targeting
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArtanisTwinBladesZealotChargeTargeting_Func (bool testConds, bool runActions) {
    fixed auto93CE00F6_at;

    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(OrderGetTargetUnit(UnitOrder(lv_unit, 0)), "ArtanisTwinBladesChargeTarget", lv_unit, 1);
    libNtve_gf_SendActorMessageToUnit(lv_unit, "AnimBaselineStop");
    auto93CE00F6_at = 0;
    while (!((UnitHasBehavior2(lv_unit, "ArtanisTwinBladesChargeCaster") == false)) && auto93CE00F6_at <= 0.5) {
        Wait(0.0625, c_timeGame);
        auto93CE00F6_at = auto93CE00F6_at + 0.0625;
    }
    libNtve_gf_SendActorMessageToUnit(lv_unit, "AnimBaselineStart");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArtanisTwinBladesZealotChargeTargeting_Init () {
    libGDHL_gt_HeroArtanisTwinBladesZealotChargeTargeting = TriggerCreate("libGDHL_gt_HeroArtanisTwinBladesZealotChargeTargeting_Func");
    TriggerEnable(libGDHL_gt_HeroArtanisTwinBladesZealotChargeTargeting, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroArtanisTwinBladesZealotChargeTargeting, null, "ArtanisTwinBladesChargeCaster", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Artanis - Spear of Adun: Purifier Beam Set Target
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamSetTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_beamTargetUnit;
    int lv_beamPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_beamTargetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_beamPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    libGDHL_gv_heroArtanisSpearofAdunPurifierBeamTarget[lv_beamPlayer] = lv_beamTargetUnit;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamSetTarget_Init () {
    libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamSetTarget = TriggerCreate("libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamSetTarget_Func");
    TriggerEnable(libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamSetTarget, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamSetTarget, c_playerAny, "ArtanisSpearofAdunPurifierBeamApplyTargetingBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Artanis - Spear of Adun: Purifier Beam Unit Created
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamUnitCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = EventUnitCreatedUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "ArtanisSpearofAdunPurifierBeamInvisibleTrackingUnit"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroArtanisSpearofAdunPurifierBeamUnit[UnitGetOwner(lv_unit)] = lv_unit;
    libGDHL_gf_HeroArtanisSpearofAdunPurifierBeamAI(EventUnitCreatedUnit(), UnitGetOwner(lv_unit));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamUnitCreated_Init () {
    libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamUnitCreated = TriggerCreate("libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamUnitCreated_Func");
    TriggerEnable(libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamUnitCreated, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamUnitCreated, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Artanis - Spear of Adun: Purifier Beam Redirect Target 2 Electric Boogaloo
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamRedirectTarget2ElectricBoogaloo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    unit lv_unit;
    fixed lv_timeRemaining;
    unit lv_purifierBeamUnit;
    int lv_owner;

    // Variable Initialization
    lv_target = libGame_gf_CheckUnitForAbilityRedirectTarget();
    lv_unit = libGame_gf_CheckUnitForAbilityRedirectUnit();

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(lv_unit, "ArtanisSpearofAdunPurifierBeamTargeting") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_owner = UnitBehaviorEffectPlayer(lv_unit, "ArtanisSpearofAdunPurifierBeamTargeting", c_effectPlayerCaster, 0);
    lv_timeRemaining = UnitBehaviorDuration(lv_unit, "ArtanisSpearofAdunPurifierBeamTargeting");
    if ((libGame_gf_CheckUnitForAbilityRedirectBoolean() == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(libGDHL_gv_heroArtanisSpearofAdunPurifierBeamUnit[lv_owner]), UnitGetPosition(lv_unit)) <= 6.0) && ((UnitBehaviorCount(lv_unit, "ArtanisSpearofAdunPurifierBeamTargeting") == 1) && (UnitBehaviorEffectUnit(lv_unit, "ArtanisSpearofAdunPurifierBeamTargeting", c_effectUnitSource, 0) == libGame_gv_players[lv_owner].lv_heroUnit))) {
            libGDHL_gv_heroArtanisSpearofAdunPurifierBeamTarget[lv_owner] = lv_target;
        }
        else {
            libGDHL_gv_heroArtanisSpearofAdunPurifierBeamPointOverride[lv_owner] = true;
            libGDHL_gv_heroArtanisSpearofAdunPurifierBeamLastKnownPoint[lv_owner] = libGame_gf_CheckUnitForAbilityRedirectPoint();
        }
    }
    else {
        UnitBehaviorRemove(libGDHL_gv_heroArtanisSpearofAdunPurifierBeamTarget[lv_owner], "ArtanisSpearofAdunPurifierBeamTargeting", 1);
        libGDHL_gv_heroArtanisSpearofAdunPurifierBeamTarget[lv_owner] = lv_target;
        UnitBehaviorAdd(lv_target, "ArtanisSpearofAdunPurifierBeamTargeting", libGame_gv_players[lv_owner].lv_heroUnit, 1);
        UnitBehaviorAdd(lv_target, "ArtanisSpearofAdunPurifierBeamRevealer", libGame_gv_players[lv_owner].lv_heroUnit, 1);
        UnitBehaviorSetDurationRemaining(lv_target, "ArtanisSpearofAdunPurifierBeamTargeting", lv_timeRemaining);
        UnitBehaviorSetDurationRemaining(lv_target, "ArtanisSpearofAdunPurifierBeamRevealer", lv_timeRemaining);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamRedirectTarget2ElectricBoogaloo_Init () {
    libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamRedirectTarget2ElectricBoogaloo = TriggerCreate("libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamRedirectTarget2ElectricBoogaloo_Func");
    TriggerEnable(libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamRedirectTarget2ElectricBoogaloo, false);
    libGame_gf_CheckUnitForAbilityRedirect(libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamRedirectTarget2ElectricBoogaloo);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Arthas - Anti-Magic Shell - Heal
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArthasAntiMagicShellHeal_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_arthas;
    int lv_arthasPlayer;
    fixed lv_healingAvailable;

    // Variable Initialization
    lv_arthas = EventUnit();
    lv_arthasPlayer = UnitGetOwner(lv_arthas);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_arthas) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_healingAvailable = (EventUnitDamageAbsorbed() * libGDHL_gv_heroArthasAntiMagicShellHealingFraction);
    CatalogFieldValueSet(c_gameCatalogEffect, "ArthasAntiMagicShellCreateHealer", "RechargeVitalRate", lv_arthasPlayer, FixedToString(lv_healingAvailable, 1));
    UnitCreateEffectUnit(lv_arthas, "ArthasAntiMagicShellCreateHealer", lv_arthas);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArthasAntiMagicShellHeal_Init () {
    libGDHL_gt_HeroArthasAntiMagicShellHeal = TriggerCreate("libGDHL_gt_HeroArthasAntiMagicShellHeal_Func");
    TriggerEnable(libGDHL_gt_HeroArthasAntiMagicShellHeal, false);
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroArthasAntiMagicShellHeal, null, "ArthasAntiMagicShellCaster");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Arthas - Death Coil - Immortal Coil - Store Damage Dealt
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArthasDeathCoilImmortalCoilStoreDamageDealt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_arthas;
    int lv_arthasPlayer;
    unit lv_target;

    // Variable Initialization
    lv_arthas = EventUnitDamageSourceUnit();
    lv_arthasPlayer = UnitGetOwner(lv_arthas);
    lv_target = EventUnit();

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_arthasPlayer, "ArthasMasteryImmortalCoilDeathCoil") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitTypeTestAttribute(UnitGetType(lv_target), c_unitAttributeHeroic) == true)) {
        libGDHL_gv_heroArthasDeathCoilHeroDamageDealt[lv_arthasPlayer] = EventUnitDamageAttempted();
    }
    else {
        libGDHL_gv_heroArthasDeathCoilHeroDamageDealt[lv_arthasPlayer] = 0.0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArthasDeathCoilImmortalCoilStoreDamageDealt_Init () {
    libGDHL_gt_HeroArthasDeathCoilImmortalCoilStoreDamageDealt = TriggerCreate("libGDHL_gt_HeroArthasDeathCoilImmortalCoilStoreDamageDealt_Func");
    TriggerEnable(libGDHL_gt_HeroArthasDeathCoilImmortalCoilStoreDamageDealt, false);
    TriggerAddDamageEvent(libGDHL_gt_HeroArthasDeathCoilImmortalCoilStoreDamageDealt, "HeroArthas", null, c_unitDamageTypeAbility, c_unitDamageEither, "ArthasDeathCoilEmbraceDeathLT10HPDamage");
    TriggerAddDamageEvent(libGDHL_gt_HeroArthasDeathCoilImmortalCoilStoreDamageDealt, "HeroArthas", null, c_unitDamageTypeAbility, c_unitDamageEither, "ArthasDeathCoilEmbraceDeath10HPDamage");
    TriggerAddDamageEvent(libGDHL_gt_HeroArthasDeathCoilImmortalCoilStoreDamageDealt, "HeroArthas", null, c_unitDamageTypeAbility, c_unitDamageEither, "ArthasDeathCoilEmbraceDeath20HPDamage");
    TriggerAddDamageEvent(libGDHL_gt_HeroArthasDeathCoilImmortalCoilStoreDamageDealt, "HeroArthas", null, c_unitDamageTypeAbility, c_unitDamageEither, "ArthasDeathCoilEmbraceDeath30HPDamage");
    TriggerAddDamageEvent(libGDHL_gt_HeroArthasDeathCoilImmortalCoilStoreDamageDealt, "HeroArthas", null, c_unitDamageTypeAbility, c_unitDamageEither, "ArthasDeathCoilEmbraceDeath40HPDamage");
    TriggerAddDamageEvent(libGDHL_gt_HeroArthasDeathCoilImmortalCoilStoreDamageDealt, "HeroArthas", null, c_unitDamageTypeAbility, c_unitDamageEither, "ArthasDeathCoilEmbraceDeath50HPDamage");
    TriggerAddDamageEvent(libGDHL_gt_HeroArthasDeathCoilImmortalCoilStoreDamageDealt, "HeroArthas", null, c_unitDamageTypeAbility, c_unitDamageEither, "ArthasDeathCoilEmbraceDeath60HPDamage");
    TriggerAddDamageEvent(libGDHL_gt_HeroArthasDeathCoilImmortalCoilStoreDamageDealt, "HeroArthas", null, c_unitDamageTypeAbility, c_unitDamageEither, "ArthasDeathCoilEmbraceDeath70HPDamage");
    TriggerAddDamageEvent(libGDHL_gt_HeroArthasDeathCoilImmortalCoilStoreDamageDealt, "HeroArthas", null, c_unitDamageTypeAbility, c_unitDamageEither, "ArthasDeathCoilEmbraceDeath80HPDamage");
    TriggerAddDamageEvent(libGDHL_gt_HeroArthasDeathCoilImmortalCoilStoreDamageDealt, "HeroArthas", null, c_unitDamageTypeAbility, c_unitDamageEither, "ArthasDeathCoilEmbraceDeath90HPDamage");
    TriggerAddDamageEvent(libGDHL_gt_HeroArthasDeathCoilImmortalCoilStoreDamageDealt, "HeroArthas", null, c_unitDamageTypeAbility, c_unitDamageEither, "ArthasDeathCoilDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Arthas - Death Coil - Immortal Coil - Add Hero Damage Bonus Healing
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArthasDeathCoilImmortalCoilAddHeroDamageBonusHealing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_arthas;
    int lv_arthasPlayer;

    // Variable Initialization
    lv_arthas = EventPlayerEffectUsedUnitImpact();
    lv_arthasPlayer = UnitGetOwner(lv_arthas);

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueModify(c_gameCatalogEffect, "ArthasDeathCoilImmortalCoilCreateHealer", "RechargeVitalRate", lv_arthasPlayer, FixedToString(libGDHL_gv_heroArthasDeathCoilHeroDamageDealt[lv_arthasPlayer], 0), c_upgradeOperationAdd);
    UnitCreateEffectUnit(lv_arthas, "ArthasDeathCoilImmortalCoilCreateHealer", lv_arthas);
    CatalogFieldValueModify(c_gameCatalogEffect, "ArthasDeathCoilImmortalCoilCreateHealer", "RechargeVitalRate", lv_arthasPlayer, FixedToString(libGDHL_gv_heroArthasDeathCoilHeroDamageDealt[lv_arthasPlayer], 0), c_upgradeOperationSubtract);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArthasDeathCoilImmortalCoilAddHeroDamageBonusHealing_Init () {
    libGDHL_gt_HeroArthasDeathCoilImmortalCoilAddHeroDamageBonusHealing = TriggerCreate("libGDHL_gt_HeroArthasDeathCoilImmortalCoilAddHeroDamageBonusHealing_Func");
    TriggerEnable(libGDHL_gt_HeroArthasDeathCoilImmortalCoilAddHeroDamageBonusHealing, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroArthasDeathCoilImmortalCoilAddHeroDamageBonusHealing, c_playerAny, "ArthasDeathCoilImmortalCoilImpactDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Arthas - Army of the Dead - Minion AI Takeover (Death)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArthasArmyoftheDeadMinionAITakeoverDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "HeroArthas"))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_player, "ArthasHeroicAbilityArmyoftheDead") == true))) {
            return false;
        }

        if (!((UnitCount("ArthasArmyOfTheDeadGhoul", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("ArthasArmyOfTheDeadGhoul", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libGame_gf_CalculateSpawnedMinionGoalPoints(lv_player, UnitGetPosition(UnitGroupLoopCurrent()));
        libAIAI_gf_MinionAIStartMinionAI(-1, UnitGroupLoopCurrent(), libGame_gv_spawnedMinionLane, libGame_gv_spawnedMinionFirstWaypointIndex, false, true, false, 0, false);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArthasArmyoftheDeadMinionAITakeoverDeath_Init () {
    libGDHL_gt_HeroArthasArmyoftheDeadMinionAITakeoverDeath = TriggerCreate("libGDHL_gt_HeroArthasArmyoftheDeadMinionAITakeoverDeath_Func");
    TriggerEnable(libGDHL_gt_HeroArthasArmyoftheDeadMinionAITakeoverDeath, false);
    TriggerAddEventUnitDied(libGDHL_gt_HeroArthasArmyoftheDeadMinionAITakeoverDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Arthas - Army of the Dead - Minion AI Takeover (Transport)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArthasArmyoftheDeadMinionAITakeoverTransport_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = libGame_gf_HeroEnteredTransportPlayerEntering();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroArthas"))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_player, "ArthasHeroicAbilityArmyoftheDead") == true))) {
            return false;
        }

        if (!((UnitCount("ArthasArmyOfTheDeadGhoul", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0) > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("ArthasArmyOfTheDeadGhoul", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libGame_gf_CalculateSpawnedMinionGoalPoints(lv_player, UnitGetPosition(UnitGroupLoopCurrent()));
        libAIAI_gf_MinionAIStartMinionAI(-1, UnitGroupLoopCurrent(), libGame_gv_spawnedMinionLane, libGame_gv_spawnedMinionFirstWaypointIndex, false, true, false, 0, false);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArthasArmyoftheDeadMinionAITakeoverTransport_Init () {
    libGDHL_gt_HeroArthasArmyoftheDeadMinionAITakeoverTransport = TriggerCreate("libGDHL_gt_HeroArthasArmyoftheDeadMinionAITakeoverTransport_Func");
    TriggerEnable(libGDHL_gt_HeroArthasArmyoftheDeadMinionAITakeoverTransport, false);
    libGame_gf_HeroEnteredTransport(libGDHL_gt_HeroArthasArmyoftheDeadMinionAITakeoverTransport);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Arthas - Army of the Dead - Port Ghouls
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArthasArmyoftheDeadPortGhouls_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroArthas"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("ArthasArmyOfTheDeadGhoul", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(libGame_gv_players[lv_player].lv_heroUnit), false);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArthasArmyoftheDeadPortGhouls_Init () {
    libGDHL_gt_HeroArthasArmyoftheDeadPortGhouls = TriggerCreate("libGDHL_gt_HeroArthasArmyoftheDeadPortGhouls_Func");
    TriggerEnable(libGDHL_gt_HeroArthasArmyoftheDeadPortGhouls, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroArthasArmyoftheDeadPortGhouls, c_playerAny, "PortBackToBaseTeleport");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Arthas - Army of the Dead - Ghoul Spawned
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroArthasArmyoftheDeadGhoulSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unit lv_createdUnit;
    int lv_player;
    bool lv_thinkTreeDestroyed;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_createdUnit = EventUnitCreatedUnit();
    lv_player = EventPlayer();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_thinkTreeDestroyed = UnitDestroyAIThinkTree(lv_unit);
    UnitGroupAdd(libGame_gv_players[lv_player].lv_summonedUnitGroup, EventUnitCreatedUnit());
    if (((PointPathingCliffLevel(UnitGetPosition(lv_createdUnit)) > PointPathingCliffLevel(UnitGetPosition(lv_unit))) || (PointPathingCliffLevel(UnitGetPosition(lv_createdUnit)) < PointPathingCliffLevel(UnitGetPosition(lv_unit)))) && (UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroArthas")) {
        UnitSetPosition(lv_createdUnit, UnitGetPosition(libGame_gv_players[lv_player].lv_heroUnit), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroArthasArmyoftheDeadGhoulSpawned_Init () {
    libGDHL_gt_HeroArthasArmyoftheDeadGhoulSpawned = TriggerCreate("libGDHL_gt_HeroArthasArmyoftheDeadGhoulSpawned_Func");
    TriggerEnable(libGDHL_gt_HeroArthasArmyoftheDeadGhoulSpawned, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroArthasArmyoftheDeadGhoulSpawned, null, "ArthasGhoulMagazine", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anub'arak Burrow Charge Suppress Collision
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnubarakBurrowChargeSuppressCollision_Func (bool testConds, bool runActions) {
    fixed auto1AC4814E_at;

    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogUnit, "HeroAnubarak", "Mover", lv_player, "FlyGroundHM");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroAnubarak", "Collide[" + IntToString(1) + "]", lv_player, "0");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroAnubarak", "Collide[" + IntToString(8) + "]", lv_player, "0");
    auto1AC4814E_at = 0;
    while (!(((UnitHasBehavior2(lv_unit, "BurrowChargeCaster") == false) && (UnitHasBehavior2(lv_unit, "AnubarakBurrowChargeUnpathableSelfStun") == false))) && auto1AC4814E_at <= 10.0) {
        Wait(0.0625, c_timeGame);
        auto1AC4814E_at = auto1AC4814E_at + 0.0625;
    }
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroAnubarak", "Mover", lv_player, "Ground");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroAnubarak", "Collide[" + IntToString(1) + "]", lv_player, "1");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroAnubarak", "Collide[" + IntToString(8) + "]", lv_player, "1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnubarakBurrowChargeSuppressCollision_Init () {
    libGDHL_gt_HeroAnubarakBurrowChargeSuppressCollision = TriggerCreate("libGDHL_gt_HeroAnubarakBurrowChargeSuppressCollision_Func");
    TriggerEnable(libGDHL_gt_HeroAnubarakBurrowChargeSuppressCollision, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAnubarakBurrowChargeSuppressCollision, null, "BurrowChargeCaster", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anub'arak Burrow Charge Max Range
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnubarakBurrowChargeMaxRange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    fixed lv_abilityRange;
    point lv_playerTargetPoint;
    fixed lv_distanceFromMuradinToPlayerTargetPoint;
    fixed lv_muradinRadius;
    point lv_actualTargetPoint;
    fixed lv_modifiedDistance;

    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_muradinRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, (UnitGetType(lv_unit)), "Radius", lv_player));
    lv_abilityRange = StringToFixed(CatalogFieldValueGet(c_gameCatalogActor, "AnubarakBurrowChargeGuide", "Height", lv_player));
    lv_playerTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_distanceFromMuradinToPlayerTargetPoint = DistanceBetweenPoints(UnitGetPosition(lv_unit), lv_playerTargetPoint);
    if ((lv_distanceFromMuradinToPlayerTargetPoint > lv_abilityRange)) {
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_unit), lv_abilityRange, lv_playerTargetPoint);
    }
    else {
        lv_actualTargetPoint = lv_playerTargetPoint;
    }
    lv_modifiedDistance = (lv_abilityRange + 0.125);
    while ((PointPathingPassable(lv_actualTargetPoint) == false)) {
        lv_modifiedDistance -= 0.125;
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_unit), lv_modifiedDistance, lv_playerTargetPoint);
        if ((DistanceBetweenPoints(UnitGetPosition(lv_unit), lv_actualTargetPoint) <= (lv_muradinRadius + 0.125))) {
            libNtve_gf_UIErrorMessage(libCore_gv_playerGroupFromPlayer[lv_player], StringExternal("Param/Value/lib_GDHL_F272EA53"), SoundLink("UI_GenericError", -1));
            UnitBehaviorRemove(lv_unit, "BurrowChargeCaster", 1);
            return true;
        }

    }
    if ((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true)) {
        UnitBehaviorRemove(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ZaryaGravitonSurgePull", 1);
        UnitIssueOrder(EventPlayerEffectUsedUnit(c_effectUnitCaster), OrderTargetingPoint(AbilityCommand("move", 0), lv_actualTargetPoint), c_orderQueueAddToFront);
    }

    UnitCreateEffectPoint(lv_unit, "BurrowChargeFinishRangeCheckCreatePersistent", lv_actualTargetPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnubarakBurrowChargeMaxRange_Init () {
    libGDHL_gt_HeroAnubarakBurrowChargeMaxRange = TriggerCreate("libGDHL_gt_HeroAnubarakBurrowChargeMaxRange_Func");
    TriggerEnable(libGDHL_gt_HeroAnubarakBurrowChargeMaxRange, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAnubarakBurrowChargeMaxRange, c_playerAny, "BurrowChargeOffsetPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anub'arak Burrow Charge Cancel
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnubarakBurrowChargeCancel_Func (bool testConds, bool runActions) {
    fixed autoE88A0ED8_at;

    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogBehavior, "BurrowChargeCaster", "Modification.ModifyFlags[" + IntToString(11) + "]", lv_player, "0");
    autoE88A0ED8_at = 0;
    while (!((UnitHasBehavior2(lv_unit, "BurrowChargeCaster") == false)) && autoE88A0ED8_at <= 10.0) {
        Wait(0.25, c_timeGame);
        autoE88A0ED8_at = autoE88A0ED8_at + 0.25;
    }
    CatalogFieldValueSet(c_gameCatalogBehavior, "BurrowChargeCaster", "Modification.ModifyFlags[" + IntToString(11) + "]", lv_player, "1");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnubarakBurrowChargeCancel_Init () {
    libGDHL_gt_HeroAnubarakBurrowChargeCancel = TriggerCreate("libGDHL_gt_HeroAnubarakBurrowChargeCancel_Func");
    TriggerEnable(libGDHL_gt_HeroAnubarakBurrowChargeCancel, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroAnubarakBurrowChargeCancel, null, AbilityCommand("AnubarakBurrowChargeCancel", 0), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anub'arak Burrow Charge Unpathable Check
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnubarakBurrowChargeUnpathableCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_Unit;
    int lv_player;

    // Variable Initialization
    lv_Unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_Unit);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_Unit, OrderTargetingPoint(AbilityCommand("move", 0), UnitTypePlacementFromPoint("AnubarakBeetleSpitBeetle", lv_player, UnitGetPosition(lv_Unit), 20.0)), c_orderQueueAddToFront);
    libNtve_gf_MakeUnitUncommandable(lv_Unit, true);
    while ((PointPathingPassable(UnitGetPosition(lv_Unit)) == false)) {
        UnitIssueOrder(lv_Unit, OrderTargetingPoint(AbilityCommand("move", 0), UnitTypePlacementFromPoint("AnubarakBeetleSpitBeetle", lv_player, UnitGetPosition(lv_Unit), 20.0)), c_orderQueueAddToFront);
        Wait(0.0625, c_timeGame);
    }
    libNtve_gf_MakeUnitUncommandable(lv_Unit, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnubarakBurrowChargeUnpathableCheck_Init () {
    libGDHL_gt_HeroAnubarakBurrowChargeUnpathableCheck = TriggerCreate("libGDHL_gt_HeroAnubarakBurrowChargeUnpathableCheck_Func");
    TriggerEnable(libGDHL_gt_HeroAnubarakBurrowChargeUnpathableCheck, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAnubarakBurrowChargeUnpathableCheck, c_playerAny, "AnubarakBurrowChargeUnpathableDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anub'arak - Beetle Creation
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnubarakBeetleCreation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_anubarak;
    unit lv_beetle;
    unit lv_beetleTarget;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "AnubarakBeetleSpitBeetle"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_beetle = EventUnit();
    if ((UnitGetType(libGame_gv_players[UnitGetOwner(lv_beetle)].lv_heroUnit) == "HeroAnubarak")) {
        lv_anubarak = libGame_gv_players[UnitGetOwner(lv_beetle)].lv_heroUnit;
    }
    else {
        lv_anubarak = libGame_gv_players[UnitGetOwner(lv_beetle)].lv_activeVehicle;
    }
    if ((UnitIsValid(lv_anubarak) == true)) {
        libAIAI_gf_SummonedAIInitialAttackLogic(true, lv_beetle, lv_anubarak);
    }
    else {
        UnitKill(lv_beetle);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnubarakBeetleCreation_Init () {
    libGDHL_gt_HeroAnubarakBeetleCreation = TriggerCreate("libGDHL_gt_HeroAnubarakBeetleCreation_Func");
    TriggerEnable(libGDHL_gt_HeroAnubarakBeetleCreation, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAnubarakBeetleCreation, null, "AnubarakBeetleSpitBeetleTimedLifeAndDamageResponse", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anub'arak - Beetle, Juiced Mastery Special Death State Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnubarakBeetleJuicedMasterySpecialDeathStateProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadHero;
    unit lv_beetle;

    // Variable Initialization
    lv_deadHero = libGame_gf_HeroEntersSpecialDeathStateHero();

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(lv_deadHero, "AnubarakBeetleSpitDeathResponseBehavior") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_beetle = UnitBehaviorEffectUnit(lv_deadHero, "AnubarakBeetleSpitDeathResponseBehavior", c_effectUnitCaster, 0);
    UnitCreateEffectUnit(lv_beetle, "AnubarakBeetleJuicedCreatePersistentSpecialDeathState", lv_deadHero);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnubarakBeetleJuicedMasterySpecialDeathStateProc_Init () {
    libGDHL_gt_HeroAnubarakBeetleJuicedMasterySpecialDeathStateProc = TriggerCreate("libGDHL_gt_HeroAnubarakBeetleJuicedMasterySpecialDeathStateProc_Func");
    TriggerEnable(libGDHL_gt_HeroAnubarakBeetleJuicedMasterySpecialDeathStateProc, false);
    libGame_gf_HeroEntersSpecialDeathState(libGDHL_gt_HeroAnubarakBeetleJuicedMasterySpecialDeathStateProc);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anub'arak - Cocoon Sound Effect
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnubarakCocoonSoundEffect_Func (bool testConds, bool runActions) {
    int auto309F9278_val;

    // Variable Declarations
    int lv_webbedPlayer;
    int lv_BehaviorChange;

    // Variable Initialization
    lv_webbedPlayer = UnitGetOwner(EventUnit());
    lv_BehaviorChange = EventUnitBehaviorChange();

    // Actions
    if (!runActions) {
        return true;
    }

    auto309F9278_val = lv_BehaviorChange;
    if (auto309F9278_val == c_unitBehaviorChangeActivate) {
        libSond_gf_DigitalSoundEffectsEnableDisableSoundStateForPlayer(true, lv_webbedPlayer, "Heroes_Lowpass_Cocoon_Cocoon");
    }
    else if (auto309F9278_val == c_unitBehaviorChangeDeactivate) {
        libSond_gf_DigitalSoundEffectsEnableDisableSoundStateForPlayer(false, lv_webbedPlayer, "Heroes_Lowpass_Cocoon_Cocoon");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnubarakCocoonSoundEffect_Init () {
    libGDHL_gt_HeroAnubarakCocoonSoundEffect = TriggerCreate("libGDHL_gt_HeroAnubarakCocoonSoundEffect_Func");
    TriggerEnable(libGDHL_gt_HeroAnubarakCocoonSoundEffect, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAnubarakCocoonSoundEffect, null, "AnubarakCocoonWebbed", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anub'arak - Cocoon On
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnubarakCocoonOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_webbedUnit;

    // Variable Initialization
    lv_webbedUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_webbedUnit, "HeroGenericIgnoreFullscreenOverlay") == false) && (UnitIsAlive(lv_webbedUnit) == true) && (UnitTestState(lv_webbedUnit, c_unitStateHallucination) == false)) {
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(UnitGetOwner(lv_webbedUnit), libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI_WebBlastOverlay.StormCutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnubarakCocoonOn_Init () {
    libGDHL_gt_HeroAnubarakCocoonOn = TriggerCreate("libGDHL_gt_HeroAnubarakCocoonOn_Func");
    TriggerEnable(libGDHL_gt_HeroAnubarakCocoonOn, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAnubarakCocoonOn, null, "AnubarakCocoonWebbed", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Anub'arak - Cocoon Off
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAnubarakCocoonOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_webbedUnit;

    // Variable Initialization
    lv_webbedUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_webbedUnit, "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(UnitGetOwner(lv_webbedUnit), "Cutscenes\\GameUI_WebBlastOverlay.StormCutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAnubarakCocoonOff_Init () {
    libGDHL_gt_HeroAnubarakCocoonOff = TriggerCreate("libGDHL_gt_HeroAnubarakCocoonOff_Func");
    TriggerEnable(libGDHL_gt_HeroAnubarakCocoonOff, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroAnubarakCocoonOff, null, "AnubarakCocoonWebbed", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Azmodan - Spawned
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAzmodanSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = libGame_gf_HeroSpawnPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroAzmodan"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_players[lv_player].lv_selectedSkin == libCore_gf_DataSkinsGetSkinIndexFromSkinLink("AzmodanSkinAzmodunk"))) {
        libGame_gv_players[lv_player].lv_vOHeroHasCustomKillVO = true;
        TriggerEnable(libGDHL_gt_HeroAzmodanCustomKillVO, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAzmodanSpawned_Init () {
    libGDHL_gt_HeroAzmodanSpawned = TriggerCreate("libGDHL_gt_HeroAzmodanSpawned_Func");
    TriggerEnable(libGDHL_gt_HeroAzmodanSpawned, false);
    libGame_gf_HeroSpawn(libGDHL_gt_HeroAzmodanSpawned);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Azmodan - Sin's Grasp Cooldown Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAzmodanSinsGraspCooldownProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingPlayer;

    // Variable Initialization
    lv_killingPlayer = libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(libGame_gf_HeroParticipatedInNPCTakedownMinion(), lv_killingPlayer, UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterRobotic) | (1 << c_targetFilterUser1), (1 << (c_targetFilterSummoned - 32)) | (1 << (c_targetFilterMapBoss - 32)))) == true))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_killingPlayer, "AzmodanSinsGrasp") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[lv_killingPlayer].lv_heroUnit, "AzmodanSinsGraspModifyPlayerCooldown", libGame_gv_players[lv_killingPlayer].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAzmodanSinsGraspCooldownProc_Init () {
    libGDHL_gt_HeroAzmodanSinsGraspCooldownProc = TriggerCreate("libGDHL_gt_HeroAzmodanSinsGraspCooldownProc_Func");
    TriggerEnable(libGDHL_gt_HeroAzmodanSinsGraspCooldownProc, false);
    libGame_gf_HeroParticipatedInNPCTakedown(libGDHL_gt_HeroAzmodanSinsGraspCooldownProc);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Azmodan - Demonic Invasion - Hook Units Into AI
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAzmodanDemonicInvasionHookUnitsIntoAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_Zombie;
    int lv_ownerPlayer;
    point lv_positionOfAbility;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "AzmodanDemonicInvasionZombie"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_Zombie = EventUnitCreatedUnit();
    lv_ownerPlayer = UnitGetOwner(lv_Zombie);
    lv_positionOfAbility = UnitGetPosition(EventUnitCreatedUnit());
    while ((UnitIsAlive(lv_Zombie) == true) && (UnitTestState(lv_Zombie, c_unitStateMoveSuppressed) == true)) {
        Wait(0.125, c_timeGame);
    }
    if ((UnitIsAlive(lv_Zombie) == true)) {
        libAIAI_gf_SummonedAIInitialAttackLogic(false, lv_Zombie, libGame_gv_players[lv_ownerPlayer].lv_heroUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAzmodanDemonicInvasionHookUnitsIntoAI_Init () {
    libGDHL_gt_HeroAzmodanDemonicInvasionHookUnitsIntoAI = TriggerCreate("libGDHL_gt_HeroAzmodanDemonicInvasionHookUnitsIntoAI_Func");
    TriggerEnable(libGDHL_gt_HeroAzmodanDemonicInvasionHookUnitsIntoAI, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroAzmodanDemonicInvasionHookUnitsIntoAI, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Azmodan - Demonic Invasion - Unpathable Location
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAzmodanDemonicInvasionUnpathableLocation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_newPoint;

    // Variable Initialization
    lv_player = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));

    // Actions
    if (!runActions) {
        return true;
    }

    lv_newPoint = UnitTypePlacementFromPoint("AzmodanDemonicInvasionZombie", lv_player, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 8.0);
    PlayerCreateEffectPoint(lv_player, "AzmodanDemonicInvasionStaggerPersistent", lv_newPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAzmodanDemonicInvasionUnpathableLocation_Init () {
    libGDHL_gt_HeroAzmodanDemonicInvasionUnpathableLocation = TriggerCreate("libGDHL_gt_HeroAzmodanDemonicInvasionUnpathableLocation_Func");
    TriggerEnable(libGDHL_gt_HeroAzmodanDemonicInvasionUnpathableLocation, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAzmodanDemonicInvasionUnpathableLocation, c_playerAny, "DemonicInvasionUnpathableDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Azmodan - Custom Kill VO
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAzmodanCustomKillVO_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_killingEffect;
    int lv_killingPlayer;
    int lv_deadPlayer;
    int lv_speakingPlayer;
    string lv_killLine;

    // Variable Initialization
    lv_killingPlayer = libGame_gf_CustomKillVOKillingPlayer();
    lv_deadPlayer = libGame_gf_CustomKillVODeadPlayer();
    lv_speakingPlayer = libGame_gf_CustomKillVOSpeakingPlayer();
    lv_killLine = libGame_gf_CustomKillVOKillLine();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[lv_killingPlayer].lv_heroUnit) == "HeroAzmodan"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killingEffect = libGame_gv_deathRecap_DeathData[lv_deadPlayer].lv_effectBars[1].lv_effect;
    if (((libGame_gv_players[lv_killingPlayer].lv_selectedSkin == libCore_gf_DataSkinsGetSkinIndexFromSkinLink("AzmodanSkinAzmodunk")) && ((lv_killingEffect == "AzmodanGlobeofAnnihilationDamage") || (lv_killingEffect == "AzmodanGlobeofAnnihilationSiegingWrathTalentDamage") || (lv_killingEffect == "AzmodanGlobeofAnnihilationTasteForBloodDamage")))) {
        lv_speakingPlayer = lv_killingPlayer;
        lv_killLine = ("AzmodanAzmodunk_GlobeKill");
    }

    libSond_gf_HeroVOPlayKillLine((lv_killLine), lv_speakingPlayer, lv_killingPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAzmodanCustomKillVO_Init () {
    libGDHL_gt_HeroAzmodanCustomKillVO = TriggerCreate("libGDHL_gt_HeroAzmodanCustomKillVO_Func");
    TriggerEnable(libGDHL_gt_HeroAzmodanCustomKillVO, false);
    libGame_gf_CustomKillVO(libGDHL_gt_HeroAzmodanCustomKillVO);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Azmodan - Globe of Annihilation - Revealer Create
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAzmodanGlobeofAnnihilationRevealerCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    point lv_targetPoint;
    point lv_launchPoint;
    fixed lv_minDistance;
    fixed lv_distance;
    fixed lv_newDelay;
    int lv_player;

    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_minDistance = 12.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_launchPoint = EventPlayerEffectUsedPoint(c_effectLocationCasterPoint);
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_distance = DistanceBetweenPoints(lv_launchPoint, lv_targetPoint);
    if ((lv_distance > lv_minDistance)) {
        if ((PlayerHasTalent(lv_player, "AzmodanMasteryInfernalGlobe") == true)) {
            lv_newDelay += ((lv_distance - lv_minDistance) * 0.05);
            if ((lv_distance > lv_minDistance)) {
                CatalogFieldValueSet(c_gameCatalogEffect, "AzmodanGlobeOfAnnihilationRevealerDelay", "ExpireDelay", lv_player, FixedToString(lv_newDelay, c_fixedPrecisionAny));
            }

        }
        else {
            lv_newDelay += 0.0625;
            lv_newDelay += ((lv_distance - lv_minDistance) * 0.05);
            if ((lv_distance > lv_minDistance)) {
                CatalogFieldValueSet(c_gameCatalogEffect, "AzmodanGlobeOfAnnihilationRevealerDelay", "ExpireDelay", lv_player, FixedToString(lv_newDelay, c_fixedPrecisionAny));
            }

        }
        UnitCreateEffectPoint(lv_unit, "AzmodanGlobeOfAnnihilationRevealerDelay", lv_targetPoint);
    }
    else {
        UnitCreateEffectPoint(lv_unit, "AzmodanGlobeOfAnnihilationRevealerPersistent", lv_targetPoint);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAzmodanGlobeofAnnihilationRevealerCreate_Init () {
    libGDHL_gt_HeroAzmodanGlobeofAnnihilationRevealerCreate = TriggerCreate("libGDHL_gt_HeroAzmodanGlobeofAnnihilationRevealerCreate_Func");
    TriggerEnable(libGDHL_gt_HeroAzmodanGlobeofAnnihilationRevealerCreate, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAzmodanGlobeofAnnihilationRevealerCreate, c_playerAny, "AzmodanGlobeOfAnnihilationLaunchMissile");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Azmodan - Demon Lieutenant Create
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAzmodanDemonLieutenantCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_demon;
    unit lv_demon2;
    point lv_targetDestintationPoint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_demon = EventUnitCreatedUnit();
    lv_demon2 = UnitGroupUnit(UnitGroupAlliance(c_playerAny, c_unitAllianceAlly, RegionCircle(UnitGetPosition(lv_demon), 5.0), libCore_gv_filtersMinionsAllLaners, 1), 1);
    while ((UnitOrderCount(lv_demon) >= 1)) {
        Wait(0.25, c_timeGame);
    }
    if ((UnitIsAlive(lv_demon) == true)) {
        libGame_gf_CalculateSpawnedMinionGoalPoints(UnitGetOwner(lv_demon), UnitGetPosition(lv_demon));
        if ((lv_demon2 != null)) {
            libAIAI_gf_MinionAIStartMinionAI(libAIAI_gf_MinionAIGetWaveNumberForMinion(libAIAI_gf_MinionAIGetIndexForMinion(lv_demon2)), lv_demon, libGame_gv_spawnedMinionLane, libGame_gv_spawnedMinionFirstWaypointIndex, false, true, false, 0, false);
        }
        else {
            libAIAI_gf_MinionAIStartMinionAI(-1, lv_demon, libGame_gv_spawnedMinionLane, libGame_gv_spawnedMinionFirstWaypointIndex, false, true, false, 0, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAzmodanDemonLieutenantCreate_Init () {
    libGDHL_gt_HeroAzmodanDemonLieutenantCreate = TriggerCreate("libGDHL_gt_HeroAzmodanDemonLieutenantCreate_Func");
    TriggerEnable(libGDHL_gt_HeroAzmodanDemonLieutenantCreate, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroAzmodanDemonLieutenantCreate, null, "AzmodanGeneralOfHell", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Azmodan - Demon Create
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAzmodanDemonCreate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    fixed lv_NewFacing;
    unit lv_demon;
    point lv_targetPoint;
    point lv_targetPoint2;

    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_targetPoint2 = EventPlayerEffectUsedPoint(c_effectLocationCasterPoint);
    libNtve_gf_UnitCreateFacingPoint(1, "AzmodanDemon", 0, UnitGetOwner(lv_unit), PointWithOffsetPolar(libNtve_gf_PointFromPositionAndAngle(lv_targetPoint2, UnitGetFacing(lv_unit)), 4.0, UnitGetFacing(lv_unit)), PointWithOffsetPolar(libNtve_gf_PointFromPositionAndAngle(lv_targetPoint2, UnitGetFacing(lv_unit)), 4.5, UnitGetFacing(lv_unit)));
    if (((UnitGetFacing(UnitLastCreated()) < 180.0) && (UnitGetFacing(UnitLastCreated()) > 0.0))) {
        lv_NewFacing = UnitGetFacing(UnitLastCreated());
        lv_NewFacing += 180.0;
        UnitSetFacing(UnitLastCreated(), lv_NewFacing, 0.0);
    }

    lv_demon = UnitLastCreated();
    libAIAI_gf_MinionAIUnhookUnitFromMinionAI(lv_demon);
    if ((UnitBehaviorCount(lv_unit, "HellforgedArmorCarryBehavior") == 1)) {
        UnitBehaviorAdd(lv_demon, "HellforgedArmorBuff", lv_unit, 1);
        UnitBehaviorAdd(lv_demon, "BurningDemonBuff", lv_unit, 1);
    }

    if ((UnitIsAlive(lv_demon) == true)) {
        Wait(1.5, c_timeGame);
        if ((UnitIsAlive(lv_demon) == true)) {
            UnitIssueOrder(lv_demon, OrderTargetingPoint(AbilityCommand("attack", 0), libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_demon), 12.0, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint))), c_orderQueueReplace);
        }

    }

    Wait(3.0, c_timeGame);
    if ((UnitIsAlive(lv_demon) == true)) {
        libAIAI_gf_SummonedAIInitialAttackLogic(false, lv_demon, libGame_gv_players[UnitGetOwner(lv_demon)].lv_heroUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAzmodanDemonCreate_Init () {
    libGDHL_gt_HeroAzmodanDemonCreate = TriggerCreate("libGDHL_gt_HeroAzmodanDemonCreate_Func");
    TriggerEnable(libGDHL_gt_HeroAzmodanDemonCreate, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAzmodanDemonCreate, c_playerAny, "AzmodanSummonDemonWarriorDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Azmodan - Demon Create (Battleborn Mastery)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAzmodanDemonCreateBattlebornMastery_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_demon;
    point lv_targetPoint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "AzmodanDemon"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_demon = EventUnitCreatedUnit();
    if ((UnitBehaviorCount(libGame_gv_players[UnitGetOwner(lv_demon)].lv_heroUnit, "HellforgedArmorCarryBehavior") == 1)) {
        UnitBehaviorAdd(lv_demon, "HellforgedArmorBuff", libGame_gv_players[UnitGetOwner(lv_demon)].lv_heroUnit, 1);
        UnitBehaviorAdd(lv_demon, "BurningDemonBuff", libGame_gv_players[UnitGetOwner(lv_demon)].lv_heroUnit, 1);
    }

    libAIAI_gf_SummonedAIInitialAttackLogic(false, lv_demon, libGame_gv_players[UnitGetOwner(lv_demon)].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAzmodanDemonCreateBattlebornMastery_Init () {
    libGDHL_gt_HeroAzmodanDemonCreateBattlebornMastery = TriggerCreate("libGDHL_gt_HeroAzmodanDemonCreateBattlebornMastery_Func");
    TriggerEnable(libGDHL_gt_HeroAzmodanDemonCreateBattlebornMastery, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroAzmodanDemonCreateBattlebornMastery, null, "AzmodanGlobeOfAnnihilation", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Azmodan - Demon General Birth Facing
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAzmodanDemonGeneralBirthFacing_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetFacing(EventPlayerEffectUsedUnit(c_effectUnitTarget), -90.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAzmodanDemonGeneralBirthFacing_Init () {
    libGDHL_gt_HeroAzmodanDemonGeneralBirthFacing = TriggerCreate("libGDHL_gt_HeroAzmodanDemonGeneralBirthFacing_Func");
    TriggerEnable(libGDHL_gt_HeroAzmodanDemonGeneralBirthFacing, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroAzmodanDemonGeneralBirthFacing, c_playerAny, "AzmodanDemonLieutenantTargetingDummyMU");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Sonya - Wrath of the Berserker Buff Duration Extension
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSonyaWrathoftheBerserkerBuffDurationExtension_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_effect;
    unit lv_unit;
    fixed lv_regenAmount;
    fixed lv_currentDuration;

    // Variable Initialization
    lv_effect = EventPlayerEffectUsed();
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(lv_unit, "BarbarianWrathoftheBerserkerBase") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentDuration = UnitBehaviorDuration(lv_unit, "BarbarianWrathoftheBerserkerBase");
    if ((lv_effect == "BarbarianShotofFuryRegenFuryModifyUnit")) {
        lv_regenAmount = 50.0;
    }

    if ((lv_effect == "BarbarianAncientSpearRegenFuryModifyUnit")) {
        lv_regenAmount = 40.0;
    }

    if ((lv_effect == "BarbarianRegen6Fury")) {
        lv_regenAmount = 6.0;
    }

    if ((lv_effect == "BarbarianRegen2Fury")) {
        lv_regenAmount = 2.0;
    }

    if ((lv_effect == "BarbarianShotofFuryRegenAngerManagementFuryModifyUnit")) {
        lv_regenAmount = 75.0;
    }

    if ((lv_effect == "BarbarianAncientSpearRegenAngerManagementFuryModifyUnti")) {
        lv_regenAmount = 60.0;
    }

    if ((lv_effect == "BarbarianRegen6FuryRegenAngerManagementFury")) {
        lv_regenAmount = 9.0;
    }

    if ((lv_effect == "BarbarianRegen2FuryRegenAngerManagementFury")) {
        lv_regenAmount = 3.0;
    }

    UnitBehaviorSetDurationRemaining(lv_unit, "BarbarianWrathoftheBerserkerBase", (lv_currentDuration + (lv_regenAmount / 10.0)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSonyaWrathoftheBerserkerBuffDurationExtension_Init () {
    libGDHL_gt_HeroSonyaWrathoftheBerserkerBuffDurationExtension = TriggerCreate("libGDHL_gt_HeroSonyaWrathoftheBerserkerBuffDurationExtension_Func");
    TriggerEnable(libGDHL_gt_HeroSonyaWrathoftheBerserkerBuffDurationExtension, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroSonyaWrathoftheBerserkerBuffDurationExtension, c_playerAny, "BarbarianShotofFuryRegenFuryModifyUnit");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroSonyaWrathoftheBerserkerBuffDurationExtension, c_playerAny, "BarbarianAncientSpearRegenFuryModifyUnit");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroSonyaWrathoftheBerserkerBuffDurationExtension, c_playerAny, "BarbarianRegen6Fury");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroSonyaWrathoftheBerserkerBuffDurationExtension, c_playerAny, "BarbarianRegen2Fury");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroSonyaWrathoftheBerserkerBuffDurationExtension, c_playerAny, "BarbarianAncientSpearRegenAngerManagementFuryModifyUnti");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroSonyaWrathoftheBerserkerBuffDurationExtension, c_playerAny, "BarbarianShotofFuryRegenAngerManagementFuryModifyUnit");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroSonyaWrathoftheBerserkerBuffDurationExtension, c_playerAny, "BarbarianRegen6FuryRegenAngerManagementFury");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroSonyaWrathoftheBerserkerBuffDurationExtension, c_playerAny, "BarbarianRegen2FuryRegenAngerManagementFury");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Barbarian - Ancient Spear Launch Barbarian Used
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroBarbarianAncientSpearLaunchBarbarianUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_barbarianUnit;
    unit lv_targetUnit;
    point lv_currentPositionOfTarget;
    bool lv_spearActive;
    fixed lv_reDirectDistance;

    // Variable Initialization
    lv_barbarianUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_spearActive = true;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerHasTalent(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "BarbarianMasteryCompositeSpearAncientSpear") == true)) {
        lv_reDirectDistance = (libGDHL_gv_heroBarbarianAncientSpearReDirectDistance * 1.3);
    }
    else {
        lv_reDirectDistance = libGDHL_gv_heroBarbarianAncientSpearReDirectDistance;
    }
    while ((UnitHasBehavior2(lv_barbarianUnit, "BarbarianAncientSpearSelfBuff") == true) && (UnitIsAlive(lv_targetUnit) == true) && (UnitIsAlive(lv_barbarianUnit) == true)) {
        if ((UnitHasBehaviorWithFlag(lv_barbarianUnit, c_behaviorCategoryTimeStop) == true)) {
            while ((UnitHasBehaviorWithFlag(lv_barbarianUnit, c_behaviorCategoryTimeStop) == true) && (UnitIsAlive(lv_targetUnit) == true)) {
                lv_currentPositionOfTarget = UnitGetPosition(lv_targetUnit);
                if ((lv_spearActive == true) && (DistanceBetweenPoints(lv_currentPositionOfTarget, UnitGetPosition(lv_barbarianUnit)) > lv_reDirectDistance)) {
                    UnitCreateEffectUnit(lv_barbarianUnit, "BarbarianAncientSpearDestroyTentacleDummy", lv_barbarianUnit);
                    lv_spearActive = false;
                }

                Wait(0.0625, c_timeGame);
            }
            if ((lv_spearActive == true)) {
                UnitCreateEffectUnit(lv_barbarianUnit, "BarbarianAncientSpearReDirectBarbarian", lv_targetUnit);
            }
            else {
                UnitCreateEffectUnit(lv_barbarianUnit, "BarbarianAncientSpearReDirectBarbarian", lv_barbarianUnit);
            }
        }

        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroBarbarianAncientSpearLaunchBarbarianUsed_Init () {
    libGDHL_gt_HeroBarbarianAncientSpearLaunchBarbarianUsed = TriggerCreate("libGDHL_gt_HeroBarbarianAncientSpearLaunchBarbarianUsed_Func");
    TriggerEnable(libGDHL_gt_HeroBarbarianAncientSpearLaunchBarbarianUsed, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroBarbarianAncientSpearLaunchBarbarianUsed, c_playerAny, "BarbarianAncientSpearLaunchBarbarian");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Barbarian - Leap
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroBarbarianLeap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    fixed lv_abilityRange;
    point lv_playerTargetPoint;
    fixed lv_distanceFromBarbarianToPlayerTargetPoint;
    fixed lv_barbarianRadius;
    point lv_actualTargetPoint;
    fixed lv_modifiedDistance;

    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_barbarianRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, (UnitGetType(lv_unit)), "Radius", lv_player));
    lv_abilityRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogActor, "BarbarianLeapRangeSplat", "Scale", lv_player)) + lv_barbarianRadius);
    lv_playerTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_distanceFromBarbarianToPlayerTargetPoint = DistanceBetweenPoints(UnitGetPosition(lv_unit), lv_playerTargetPoint);
    if ((lv_distanceFromBarbarianToPlayerTargetPoint > lv_abilityRange)) {
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_unit), (lv_barbarianRadius + lv_abilityRange), lv_playerTargetPoint);
    }
    else {
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_unit), (lv_barbarianRadius + lv_distanceFromBarbarianToPlayerTargetPoint), lv_playerTargetPoint);
    }
    lv_modifiedDistance = lv_distanceFromBarbarianToPlayerTargetPoint;
    while ((PointPathingPassable(lv_actualTargetPoint) == false)) {
        lv_modifiedDistance -= 0.125;
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_unit), lv_modifiedDistance, lv_playerTargetPoint);
        if ((PointPathingPassable(lv_actualTargetPoint) == false)) {
            lv_actualTargetPoint = PointWithOffsetPolar(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_unit), lv_modifiedDistance, lv_playerTargetPoint), 0.5, (AngleBetweenPoints(UnitGetPosition(lv_unit), lv_playerTargetPoint) + 90.0));
            if ((PointPathingPassable(lv_actualTargetPoint) == false)) {
                lv_actualTargetPoint = PointWithOffsetPolar(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_unit), lv_modifiedDistance, lv_playerTargetPoint), 0.5, (AngleBetweenPoints(UnitGetPosition(lv_unit), lv_playerTargetPoint) - 90.0));
                if ((PointPathingPassable(lv_actualTargetPoint) == false)) {
                    lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_unit), lv_modifiedDistance, lv_playerTargetPoint);
                }

            }

        }

        if ((DistanceBetweenPoints(UnitGetPosition(lv_unit), lv_actualTargetPoint) <= (lv_barbarianRadius + 0.125))) {
            libNtve_gf_UIErrorMessage(libCore_gv_playerGroupFromPlayer[lv_player], StringExternal("Param/Value/lib_GDHL_D9EC6B41"), SoundLink("UI_GenericError", -1));
            UnitBehaviorRemove(lv_unit, "BarbarianLeap", 1);
            UnitAbilityReset(lv_unit, AbilityCommand("BarbarianLeap", 0), c_spendLocationAll);
            return true;
        }

    }
    if ((UnitIsAlive(lv_unit) == true)) {
        UnitCreateEffectPointWithSource(lv_unit, "BarbarianLeapLaunchMissile", lv_actualTargetPoint, c_gameCatalogAbil, "BarbarianLeap");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroBarbarianLeap_Init () {
    libGDHL_gt_HeroBarbarianLeap = TriggerCreate("libGDHL_gt_HeroBarbarianLeap_Func");
    TriggerEnable(libGDHL_gt_HeroBarbarianLeap, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroBarbarianLeap, c_playerAny, "BarbarianLeapInitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Barbarian - Leap Refactor
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroBarbarianLeapRefactor_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_abilityRange;
    point lv_playerTargetPoint;
    fixed lv_distanceFromBarbarianToPlayerTargetPoint;
    fixed lv_barbarianRadius;
    point lv_actualTargetPoint;
    fixed lv_modifiedDistance;
    point lv_barbarianPosition;
    unit lv_eventUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_eventUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_barbarianPosition = UnitGetPosition(lv_eventUnit);
    lv_barbarianRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, (UnitGetType(lv_eventUnit)), "Radius", UnitGetOwner(lv_eventUnit)));
    lv_abilityRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogActor, "BarbarianLeapRangeSplat", "Scale", UnitGetOwner(lv_eventUnit))) + lv_barbarianRadius);
    lv_playerTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_distanceFromBarbarianToPlayerTargetPoint = DistanceBetweenPoints(lv_barbarianPosition, lv_playerTargetPoint);
    if ((lv_distanceFromBarbarianToPlayerTargetPoint > lv_abilityRange)) {
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_barbarianPosition, (lv_barbarianRadius + lv_abilityRange), lv_playerTargetPoint);
    }
    else {
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_barbarianPosition, (lv_barbarianRadius + lv_distanceFromBarbarianToPlayerTargetPoint), lv_playerTargetPoint);
    }
    lv_modifiedDistance = lv_distanceFromBarbarianToPlayerTargetPoint;
    while ((PointPathingPassable(lv_actualTargetPoint) == false)) {
        lv_modifiedDistance -= 0.125;
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_barbarianPosition, lv_modifiedDistance, lv_playerTargetPoint);
        if ((PointPathingPassable(lv_actualTargetPoint) == false)) {
            lv_actualTargetPoint = PointWithOffsetPolar(libNtve_gf_PointOffsetTowardsPoint(lv_barbarianPosition, lv_modifiedDistance, lv_playerTargetPoint), 0.5, (AngleBetweenPoints(lv_barbarianPosition, lv_playerTargetPoint) + 90.0));
            if ((PointPathingPassable(lv_actualTargetPoint) == false)) {
                lv_actualTargetPoint = PointWithOffsetPolar(libNtve_gf_PointOffsetTowardsPoint(lv_barbarianPosition, lv_modifiedDistance, lv_playerTargetPoint), 0.5, (AngleBetweenPoints(lv_barbarianPosition, lv_playerTargetPoint) - 90.0));
                if ((PointPathingPassable(lv_actualTargetPoint) == false)) {
                    lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_barbarianPosition, lv_modifiedDistance, lv_playerTargetPoint);
                }

            }

        }

        if ((DistanceBetweenPoints(lv_barbarianPosition, lv_actualTargetPoint) <= (lv_barbarianRadius + 0.125))) {
            libNtve_gf_UIErrorMessage(libCore_gv_playerGroupFromPlayer[UnitGetOwner(lv_eventUnit)], StringExternal("Param/Value/lib_GDHL_EC6CBAAF"), SoundLink("UI_GenericError", -1));
            UnitBehaviorRemove(lv_eventUnit, "BarbarianLeap", 1);
            UnitAbilityReset(lv_eventUnit, AbilityCommand("BarbarianLeap", 0), c_spendLocationAll);
            return true;
        }

    }
    if ((UnitIsAlive(lv_eventUnit) == true)) {
        UnitCreateEffectPointWithSource(lv_eventUnit, "BarbarianLeapLaunchMissile", lv_actualTargetPoint, c_gameCatalogAbil, "BarbarianLeap");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroBarbarianLeapRefactor_Init () {
    libGDHL_gt_HeroBarbarianLeapRefactor = TriggerCreate("libGDHL_gt_HeroBarbarianLeapRefactor_Func");
    TriggerEnable(libGDHL_gt_HeroBarbarianLeapRefactor, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroBarbarianLeapRefactor, c_playerAny, "BarbarianLeapInitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Butcher - Butcher's Brand Duration Refresh
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroButcherButchersBrandDurationRefresh_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_increaseAmount;
    unit lv_target;
    unit lv_butcher;
    fixed lv_currentAmount;

    // Variable Initialization
    lv_increaseAmount = 0.5;
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_butcher = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_currentAmount = UnitBehaviorDuration(lv_target, "ButchersBrand");

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDuration(lv_target, "ButchersBrand", (lv_currentAmount + lv_increaseAmount));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroButcherButchersBrandDurationRefresh_Init () {
    libGDHL_gt_HeroButcherButchersBrandDurationRefresh = TriggerCreate("libGDHL_gt_HeroButcherButchersBrandDurationRefresh_Func");
    TriggerEnable(libGDHL_gt_HeroButcherButchersBrandDurationRefresh, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroButcherButchersBrandDurationRefresh, c_playerAny, "ButcherButchersBrandDurationIncreaseDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Butcher - Gains Enraged
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroButcherGainsEnraged_Func (bool testConds, bool runActions) {
    int auto4B2A2584_ae;
    int auto4B2A2584_ai;

    // Variable Declarations
    unit lv_unit;
    int lv_itBehavior;
    string lv_behavior2;
    fixed lv_behaviorDuration;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_behavior2 = EventUnitBehavior();

    // Actions
    if (!runActions) {
        return true;
    }

    auto4B2A2584_ae = UnitBehaviorCountAll(lv_unit);
    auto4B2A2584_ai = 1;
    lv_itBehavior = 1;
    for ( ; ( (auto4B2A2584_ai >= 0 && lv_itBehavior <= auto4B2A2584_ae) || (auto4B2A2584_ai <= 0 && lv_itBehavior >= auto4B2A2584_ae) ) ; lv_itBehavior += auto4B2A2584_ai ) {
        lv_behavior2 = UnitBehaviorGet(lv_unit, lv_itBehavior);
        if ((libGame_gf_CCReductionStunReduceable(lv_behavior2) == false)) {
            continue;
        }

        if (((UnitBehaviorHasFlag(lv_behavior2, c_unitBehaviorFlagSlow) == true) || (UnitBehaviorHasFlag(lv_behavior2, c_unitBehaviorFlagStun) == true) || (UnitBehaviorHasFlag(lv_behavior2, c_unitBehaviorFlagUser5) == true) || (UnitBehaviorHasFlag(lv_behavior2, c_unitBehaviorFlagUser7) == true))) {
            lv_behaviorDuration = UnitBehaviorDuration(lv_unit, lv_behavior2);
            lv_behaviorDuration *= (1.0 - libGDHL_gv_heroButcherEnragedCCReduction_C);
            UnitBehaviorSetDurationRemaining(lv_unit, lv_behavior2, lv_behaviorDuration);
            libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar(lv_behavior2, UnitGetOwner(lv_unit));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroButcherGainsEnraged_Init () {
    libGDHL_gt_HeroButcherGainsEnraged = TriggerCreate("libGDHL_gt_HeroButcherGainsEnraged_Func");
    TriggerEnable(libGDHL_gt_HeroButcherGainsEnraged, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroButcherGainsEnraged, null, "EnragedActive", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Butcher - Ruthless Onslaught - Target Audio Telegraph
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroButcherRuthlessOnslaughtTargetAudioTelegraph_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_butcherPlayer;
    unit lv_target;

    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(lv_unit) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(lv_unit) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_butcherPlayer = UnitBehaviorEffectPlayer(lv_unit, EventUnitBehavior(), c_effectPlayerCaster, 0);
    lv_target = lv_unit;
    lv_butcherPlayer = UnitGetOwner(UnitBehaviorEffectUnit(lv_unit, "RuthlessOnslaughtTarget", c_effectUnitCaster, 0));
    SoundPlayForPlayer(SoundLink("Butcher_RuthlessOnslaught_Targeted_VICTIM", -1), lv_butcherPlayer, PlayerGroupSingle(UnitGetOwner(lv_target)), 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroButcherRuthlessOnslaughtTargetAudioTelegraph_Init () {
    libGDHL_gt_HeroButcherRuthlessOnslaughtTargetAudioTelegraph = TriggerCreate("libGDHL_gt_HeroButcherRuthlessOnslaughtTargetAudioTelegraph_Func");
    TriggerEnable(libGDHL_gt_HeroButcherRuthlessOnslaughtTargetAudioTelegraph, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroButcherRuthlessOnslaughtTargetAudioTelegraph, null, "RuthlessOnslaughtTarget", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Butcher - Ruthless Onslaught Travel Validation
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroButcherRuthlessOnslaughtTravelValidation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    unit lv_unit;
    fixed lv_travelDistanceCancelThreshold;
    int lv_butcherPlayer;
    int lv_targetPlayer;
    point lv_currentPositionOfTarget;

    // Variable Initialization
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_travelDistanceCancelThreshold = 20.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_butcherPlayer = UnitGetOwner(lv_unit);
    lv_targetPlayer = UnitGetOwner(lv_targetUnit);
    lv_currentPositionOfTarget = UnitGetPosition(lv_targetUnit);
    while ((UnitIsAlive(lv_unit) == true) && (UnitIsAlive(lv_targetUnit) == true) && ((UnitHasBehavior2(lv_unit, "ButcherRuthlessOnslaughtCaster") == true) || (UnitHasBehavior2(lv_unit, "RuthlessOnslaughtFinalAssault") == true))) {
        if ((UnitOrder(lv_unit, 0) == null)) {
            UnitIssueOrder(lv_unit, OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetUnit), c_orderQueueAddToFront);
        }

        if ((((UnitIsAlive(lv_targetUnit) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_targetUnit), lv_currentPositionOfTarget) > lv_travelDistanceCancelThreshold)) || ((UnitIsAlive(lv_targetUnit) == true) && (UnitHasBehavior2(lv_targetUnit, "FalstadFlightAscend") == true)))) {
            UnitCreateEffectUnit(lv_unit, "RuthlessOnslaughtTargetInvalidatedCleanupSet", lv_unit);
        }

        lv_currentPositionOfTarget = UnitGetPosition(lv_targetUnit);
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroButcherRuthlessOnslaughtTravelValidation_Init () {
    libGDHL_gt_HeroButcherRuthlessOnslaughtTravelValidation = TriggerCreate("libGDHL_gt_HeroButcherRuthlessOnslaughtTravelValidation_Func");
    TriggerEnable(libGDHL_gt_HeroButcherRuthlessOnslaughtTravelValidation, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroButcherRuthlessOnslaughtTravelValidation, c_playerAny, "RuthlessOnslaughtInitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Butcher - Ruthless Onslaught Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroButcherRuthlessOnslaughtCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_eligiblePlayerstoHearVO;
    const int lv_bonusRange = 4;
    int lv_abilityRange;
    unit lv_itU;

    // Variable Initialization
    lv_eligiblePlayerstoHearVO = PlayerGroupEmpty();
    lv_abilityRange = CatalogFieldValueGetAsInt(c_gameCatalogAbil, "ButcherRuthlessOnslaught", "Range[" + IntToString(0) + "]", c_playerAny);

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(lv_eligiblePlayerstoHearVO, UnitGetOwner(EventUnit()));
    PlayerGroupAdd(lv_eligiblePlayerstoHearVO, UnitGetOwner(EventUnitTargetUnit()));
    SoundPlayForPlayer(SoundLink("ButcherBase_VOX_ReactionC", -1), c_maxPlayers, lv_eligiblePlayerstoHearVO, 100.0, 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroButcherRuthlessOnslaughtCast_Init () {
    libGDHL_gt_HeroButcherRuthlessOnslaughtCast = TriggerCreate("libGDHL_gt_HeroButcherRuthlessOnslaughtCast_Func");
    TriggerEnable(libGDHL_gt_HeroButcherRuthlessOnslaughtCast, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroButcherRuthlessOnslaughtCast, null, AbilityCommand("ButcherRuthlessOnslaught", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Butcher - Ruthless Onslaught Cancel Animation Hook
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroButcherRuthlessOnslaughtCancelAnimationHook_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(libNtve_gf_MainActorofUnit(EventUnit()), "AnimPlay Spell Spell,A");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroButcherRuthlessOnslaughtCancelAnimationHook_Init () {
    libGDHL_gt_HeroButcherRuthlessOnslaughtCancelAnimationHook = TriggerCreate("libGDHL_gt_HeroButcherRuthlessOnslaughtCancelAnimationHook_Func");
    TriggerEnable(libGDHL_gt_HeroButcherRuthlessOnslaughtCancelAnimationHook, false);
    TriggerAddEventUnitOrder(libGDHL_gt_HeroButcherRuthlessOnslaughtCancelAnimationHook, null, AbilityCommand("RuthlessOnslaughtCancel", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Butcher - Gains Omnivore Talent
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroButcherGainsOmnivoreTalent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = libGame_gf_HeroGainTalentPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroButcher"))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_player, "ButcherMasteryFreshMeatVictuals") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libAIAI_gf_HeroAIIsPlayerActive(lv_player, libAIAI_gv_heroAIComputerPlayerType) == true)) {
        libAIAI_gv_aIHeroes[lv_player].lv_buffGlobeGivesHealth = true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroButcherGainsOmnivoreTalent_Init () {
    libGDHL_gt_HeroButcherGainsOmnivoreTalent = TriggerCreate("libGDHL_gt_HeroButcherGainsOmnivoreTalent_Func");
    TriggerEnable(libGDHL_gt_HeroButcherGainsOmnivoreTalent, false);
    libGame_gf_HeroGainTalent(libGDHL_gt_HeroButcherGainsOmnivoreTalent);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Butcher - Remove Fresh Meat On Death
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroButcherRemoveFreshMeatOnDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_butcherUnit;
    int lv_player;

    // Variable Initialization
    lv_butcherUnit = EventUnit();
    lv_player = UnitGetOwner(lv_butcherUnit);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_butcherUnit) == "HeroButcher"))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((lv_player >= 1))) {
            return false;
        }

        if (!((lv_player <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((lv_butcherUnit == libGame_gv_players[lv_player].lv_heroUnit))) {
            return false;
        }

        if (!((UnitTestState(lv_butcherUnit, c_unitStateHallucination) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(lv_butcherUnit, "ButcherFreshMeatTokenCounter") < libGDHL_gv_heroButcherMaxMeatCount)) {
        if ((PlayerHasTalent(lv_player, "ButcherMasteryFreshMeatAbattoir") == true)) {
            UnitCreateEffectUnit(lv_butcherUnit, "ButcherFreshMeatAbattoirTalentDeathRemoveStacks", lv_butcherUnit);
        }
        else {
            UnitCreateEffectUnit(lv_butcherUnit, "ButcherFreshMeatDeathRemoveStacks", lv_butcherUnit);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroButcherRemoveFreshMeatOnDeath_Init () {
    libGDHL_gt_HeroButcherRemoveFreshMeatOnDeath = TriggerCreate("libGDHL_gt_HeroButcherRemoveFreshMeatOnDeath_Func");
    TriggerEnable(libGDHL_gt_HeroButcherRemoveFreshMeatOnDeath, false);
    TriggerAddEventUnitDied(libGDHL_gt_HeroButcherRemoveFreshMeatOnDeath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Butcher - Butcher Participated In Takedown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroButcherButcherParticipatedInTakedown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_butcherPlayer;
    unit lv_butcher;
    unit lv_deadUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit) == "HeroButcher"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_butcherPlayer = libGame_gf_HeroParticipatedInTakedownKillingPlayer();
    lv_butcher = libGame_gv_players[lv_butcherPlayer].lv_heroUnit;
    lv_deadUnit = libGame_gf_HeroParticipatedInTakedownKilledHero();
    if (((UnitBehaviorCount(lv_butcher, "ButcherFreshMeatTokenCounter") < libGDHL_gv_heroButcherMaxMeatCount) || (UnitBehaviorCount(lv_butcher, "ButcherAbattoirCarryBehavior") == 1))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "ButcherFreshMeat5Stack", 0, lv_butcherPlayer, PointWithOffsetPolar(libGame_gf_HeroParticipatedInTakedownKilledHeroPosition(), 1.0, libNtve_gf_RandomAngle()));
        UnitBehaviorAdd(UnitLastCreated(), "ButcherFreshMeatBloodGlobeHeroBuff", lv_butcher, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroButcherButcherParticipatedInTakedown_Init () {
    libGDHL_gt_HeroButcherButcherParticipatedInTakedown = TriggerCreate("libGDHL_gt_HeroButcherButcherParticipatedInTakedown_Func");
    TriggerEnable(libGDHL_gt_HeroButcherButcherParticipatedInTakedown, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroButcherButcherParticipatedInTakedown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Butcher - Butcher Participated in NPC Takedown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroButcherButcherParticipatedinNPCTakedown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingPlayer;
    unit lv_minion;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killingPlayer = libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer();
    lv_minion = libGame_gf_HeroParticipatedInNPCTakedownMinion();
    libGDHL_gf_ButcherFreshMeatProc(lv_killingPlayer, lv_minion);
    if ((UnitTypeTestAttribute(UnitGetType(lv_minion), c_unitAttributeBiological) == true) && (PlayerHasTalent(lv_killingPlayer, "ButcherMasteryFreshMeatVictuals") == true)) {
        UnitCreateEffectUnit(libGame_gv_players[lv_killingPlayer].lv_heroUnit, "FreshMeatVictualsCreateHealer", libGame_gv_players[lv_killingPlayer].lv_heroUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroButcherButcherParticipatedinNPCTakedown_Init () {
    libGDHL_gt_HeroButcherButcherParticipatedinNPCTakedown = TriggerCreate("libGDHL_gt_HeroButcherButcherParticipatedinNPCTakedown_Func");
    TriggerEnable(libGDHL_gt_HeroButcherButcherParticipatedinNPCTakedown, false);
    libGame_gf_HeroParticipatedInNPCTakedown(libGDHL_gt_HeroButcherButcherParticipatedinNPCTakedown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Butcher - Blood Globe Vehicle Logic
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroButcherBloodGlobeVehicleLogic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_effect;
    int lv_player;
    unit lv_HeroUnit;

    // Variable Initialization
    lv_effect = EventPlayerEffectUsed();

    // Conditions
    if (testConds) {
        if (!((UnitIsValid(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libGame_gv_players[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)].lv_heroUnit) == "HeroButcher") && (UnitIsValid(libGame_gv_players[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)].lv_activeVehicle) == true)) {
        lv_player = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget));
        lv_HeroUnit = libGame_gv_players[lv_player].lv_heroUnit;
        if ((lv_effect == "ButcherFreshMeatBloodGlobeImpactSetDummy")) {
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ButcherFreshMeatBloodGlobeIdentifierSwitch", lv_HeroUnit);
        }
        else if ((lv_effect == "ButcherFreshMeatBloodGlobeBigImpactSetDummy")) {
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ButcherFreshMeatBloodGlobeBigImpactSet", lv_HeroUnit);
        }
        else if ((lv_effect == "ButcherFreshMeat5StackImpactSetDummy")) {
            UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ButcherFreshMeat5StackImpactSet", lv_HeroUnit);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroButcherBloodGlobeVehicleLogic_Init () {
    libGDHL_gt_HeroButcherBloodGlobeVehicleLogic = TriggerCreate("libGDHL_gt_HeroButcherBloodGlobeVehicleLogic_Func");
    TriggerEnable(libGDHL_gt_HeroButcherBloodGlobeVehicleLogic, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroButcherBloodGlobeVehicleLogic, c_playerAny, "ButcherFreshMeatBloodGlobeImpactSetDummy");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroButcherBloodGlobeVehicleLogic, c_playerAny, "ButcherFreshMeatBloodGlobeBigImpactSetDummy");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroButcherBloodGlobeVehicleLogic, c_playerAny, "ButcherFreshMeat5StackImpactSetDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Chen - Wandering Keg Activate
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroChenWanderingKegActivate_Func (bool testConds, bool runActions) {
    int auto9AF15E39_ae;
    int auto9AF15E39_ai;

    // Variable Declarations
    unit lv_chen;
    int lv_player;
    int lv_itPlayer;
    bool lv_pandamoniumMoveEnable;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_chen = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_chen);
    libGDHL_gv_heroChenWanderingKegActive[lv_player] = true;
    libGDHL_gv_heroChenWanderingKegHealthStore[lv_player] = UnitGetPropertyFixed(lv_chen, c_unitPropLife, c_unitPropCurrent);
    if ((libGDHL_gv_heroChenWanderingKegEventAdded[lv_player] == false)) {
        TriggerAddEventMouseMoved(libGDHL_gt_HeroChenWanderingKegMoveTracker, EventPlayer());
    }

    libGDHL_gv_heroChenWanderingKegEventAdded[lv_player] = true;
    libGDHL_gv_heroChenWanderingKegAngleMoveTo[lv_player] = UnitGetFacing(lv_chen);
    TriggerEnable(libGDHL_gt_HeroChenWanderingKegMoveTracker, true);
    libGDHL_gv_heroChenWanderingKegActive[lv_player] = true;
    while ((UnitIsAlive(lv_chen) == true) && (UnitHasBehavior2(lv_chen, "ChenWanderingKegCasterBuff") == true)) {
        UnitIssueOrder(lv_chen, OrderTargetingPoint(AbilityCommand("ChenWanderingKegMoveDummy", 0), PointWithOffsetPolar(UnitGetPosition(lv_chen), 4.0, libGDHL_gv_heroChenWanderingKegAngleMoveTo[lv_player])), c_orderQueueReplace);
        Wait(0.1, c_timeGame);
    }
    auto9AF15E39_ae = libCore_gv_bALMaxPlayers;
    auto9AF15E39_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto9AF15E39_ai >= 0 && lv_itPlayer <= auto9AF15E39_ae) || (auto9AF15E39_ai <= 0 && lv_itPlayer >= auto9AF15E39_ae) ) ; lv_itPlayer += auto9AF15E39_ai ) {
        if ((libGDHL_gv_heroChenWanderingKegActive[lv_itPlayer] == true)) {
            lv_pandamoniumMoveEnable = true;
            break;
        }

    }
    if ((lv_pandamoniumMoveEnable == false)) {
        TriggerEnable(libGDHL_gt_HeroChenWanderingKegMoveTracker, false);
    }

    libGDHL_gv_heroChenWanderingKegActive[lv_player] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroChenWanderingKegActivate_Init () {
    libGDHL_gt_HeroChenWanderingKegActivate = TriggerCreate("libGDHL_gt_HeroChenWanderingKegActivate_Func");
    TriggerEnable(libGDHL_gt_HeroChenWanderingKegActivate, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroChenWanderingKegActivate, c_playerAny, "ChenWanderingKegInitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Chen - Wandering Keg Move Tracker
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroChenWanderingKegMoveTracker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libGDHL_gv_heroChenWanderingKegActive[lv_player] == true))) {
            return false;
        }

        if (!((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lv_player) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libGame_gv_players[lv_player].lv_activeVehicle) == "HeroChen")) {
        libGDHL_gv_heroChenWanderingKegMoveTo[lv_player] = Point(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld());
        libGDHL_gv_heroChenWanderingKegAngleMoveTo[lv_player] = AngleBetweenPoints(UnitGetPosition(libGame_gv_players[lv_player].lv_activeVehicle), Point(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld()));
    }

    if ((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroChen")) {
        libGDHL_gv_heroChenWanderingKegMoveTo[lv_player] = Point(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld());
        libGDHL_gv_heroChenWanderingKegAngleMoveTo[lv_player] = AngleBetweenPoints(UnitGetPosition(libGame_gv_players[lv_player].lv_heroUnit), Point(EventMouseMovedPosXWorld(), EventMouseMovedPosYWorld()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroChenWanderingKegMoveTracker_Init () {
    libGDHL_gt_HeroChenWanderingKegMoveTracker = TriggerCreate("libGDHL_gt_HeroChenWanderingKegMoveTracker_Func");
    TriggerEnable(libGDHL_gt_HeroChenWanderingKegMoveTracker, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Chen - Wandering Keg Deactivate
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroChenWanderingKegDeactivate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "ChenWanderingKegDontDie", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroChenWanderingKegDeactivate_Init () {
    libGDHL_gt_HeroChenWanderingKegDeactivate = TriggerCreate("libGDHL_gt_HeroChenWanderingKegDeactivate_Func");
    TriggerEnable(libGDHL_gt_HeroChenWanderingKegDeactivate, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroChenWanderingKegDeactivate, null, "ChenWanderingKegCasterBuff", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Chen - Storm Earth And Fire Stasis
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroChenStormEarthAndFireStasis_Func (bool testConds, bool runActions) {
    unitgroup auto7E91516A_g;
    int auto7E91516A_u;

    // Variable Declarations
    unit lv_itUnit;
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    if ((lv_player > libCore_gv_bALMaxPlayers)) {
        return true;
    }

    if ((libGame_gv_players[lv_player].lv_heroIndex != libCore_gf_GetHeroIndexForUnitType("HeroChen")) && ((UnitHasBehavior2(libGame_gv_players[lv_player].lv_heroUnit, "ChenStormEarthFireCasterInitialDisable") != true) || (UnitHasBehavior2(libGame_gv_players[lv_player].lv_heroUnit, "StormEarthFireCasterBehavior") != true))) {
        return true;
    }

    auto7E91516A_g = libGDHL_gv_heroChenStormEarthFireUnits[lv_player].lv_stormEarthFireUnits;
    auto7E91516A_u = 1;
    for ( ; auto7E91516A_u <= UnitGroupCount(auto7E91516A_g, c_unitCountAll) ; auto7E91516A_u += (lv_itUnit == UnitGroupUnit(auto7E91516A_g, auto7E91516A_u)) ) {
        lv_itUnit = UnitGroupUnit(auto7E91516A_g, auto7E91516A_u);
        if ((UnitFilterMatch(lv_itUnit, lv_player, UnitFilter(0, 0, 0, (1 << (c_targetFilterStasis - 32)))) == true)) {
            return true;
        }

    }
    UnitBehaviorAdd(libGame_gv_players[lv_player].lv_heroUnit, "ChenElementalAbilitySuppression", libGame_gv_players[lv_player].lv_heroUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroChenStormEarthAndFireStasis_Init () {
    libGDHL_gt_HeroChenStormEarthAndFireStasis = TriggerCreate("libGDHL_gt_HeroChenStormEarthAndFireStasis_Func");
    TriggerEnable(libGDHL_gt_HeroChenStormEarthAndFireStasis, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroChenStormEarthAndFireStasis, null, c_behaviorCategoryUser6, c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Chen - Storm Earth And Fire Stasis Cleanup
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroChenStormEarthAndFireStasisCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    if ((lv_player > libCore_gv_bALMaxPlayers)) {
        return true;
    }

    if ((libGame_gv_players[lv_player].lv_heroIndex != libCore_gf_GetHeroIndexForUnitType("HeroChen"))) {
        return true;
    }

    if ((UnitGroupHasUnit(libGDHL_gv_heroChenStormEarthFireUnits[lv_player].lv_stormEarthFireUnits, EventUnit()) == true) && (UnitFilterMatch(EventUnit(), lv_player, UnitFilter(0, 0, 0, (1 << (c_targetFilterStasis - 32)))) == true)) {
        UnitBehaviorRemove(libGame_gv_players[lv_player].lv_heroUnit, "ChenElementalAbilitySuppression", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroChenStormEarthAndFireStasisCleanup_Init () {
    libGDHL_gt_HeroChenStormEarthAndFireStasisCleanup = TriggerCreate("libGDHL_gt_HeroChenStormEarthAndFireStasisCleanup_Func");
    TriggerEnable(libGDHL_gt_HeroChenStormEarthAndFireStasisCleanup, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroChenStormEarthAndFireStasisCleanup, null, c_behaviorCategoryUser6, c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Chen - Storm Earth Fire Activated New
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroChenStormEarthFireActivatedNew_Func (bool testConds, bool runActions) {
    unitgroup autoF2A44342_g;
    int autoF2A44342_u;

    // Variable Declarations
    unit lv_chen;
    unit lv_itChenSpirit;
    int lv_chenPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_chen = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_chenPlayer = UnitGetOwner(lv_chen);
    libGDHL_gv_heroChenStormEarthFireFatalDamageResponseCounter[lv_chenPlayer] = 0;
    AIRemovePlayerUnit(lv_chen);
    UnitCreate(1, "HeroChenStorm", 0, lv_chenPlayer, PointWithOffsetPolar(UnitGetPosition(lv_chen), 1.5, 0.0), 0.0);
    UnitGroupAdd(libGDHL_gv_heroChenStormEarthFireUnits[lv_chenPlayer].lv_stormEarthFireUnits, UnitLastCreated());
    UnitGroupAdd(libGame_gv_players[lv_chenPlayer].lv_heroUnitGroup, UnitLastCreated());
    AIAddPlayerUnit(UnitLastCreated());
    libGDHL_gv_heroChenStormEarthFireUnits[lv_chenPlayer].lv_controlStoreUnit = UnitLastCreated();
    UnitCreate(1, "HeroChenEarth", 0, lv_chenPlayer, PointWithOffsetPolar(UnitGetPosition(lv_chen), 1.5, 120.0), 120.0);
    UnitGroupAdd(libGDHL_gv_heroChenStormEarthFireUnits[lv_chenPlayer].lv_stormEarthFireUnits, UnitLastCreated());
    UnitGroupAdd(libGame_gv_players[lv_chenPlayer].lv_heroUnitGroup, UnitLastCreated());
    AIAddPlayerUnit(UnitLastCreated());
    UnitCreate(1, "HeroChenFire", 0, lv_chenPlayer, PointWithOffsetPolar(UnitGetPosition(lv_chen), 1.5, 240.0), 240.0);
    UnitGroupAdd(libGDHL_gv_heroChenStormEarthFireUnits[lv_chenPlayer].lv_stormEarthFireUnits, UnitLastCreated());
    UnitGroupAdd(libGame_gv_players[lv_chenPlayer].lv_heroUnitGroup, UnitLastCreated());
    AIAddPlayerUnit(UnitLastCreated());
    UnitGroupRemove(libGDHL_gv_heroChenStormEarthFireUnits[lv_chenPlayer].lv_stormEarthFireUnits, lv_chen);
    autoF2A44342_g = libGDHL_gv_heroChenStormEarthFireUnits[lv_chenPlayer].lv_stormEarthFireUnits;
    autoF2A44342_u = 1;
    for ( ; autoF2A44342_u <= UnitGroupCount(autoF2A44342_g, c_unitCountAll) ; autoF2A44342_u += (lv_itChenSpirit == UnitGroupUnit(autoF2A44342_g, autoF2A44342_u)) ) {
        lv_itChenSpirit = UnitGroupUnit(autoF2A44342_g, autoF2A44342_u);
        UnitBehaviorAdd(lv_itChenSpirit, "MapMechanicStack", lv_itChenSpirit, UnitBehaviorCount(lv_chen, "MapMechanicStack"));
        UnitSelect(lv_itChenSpirit, lv_chenPlayer, true);
        if ((UnitHasBehavior2(lv_chen, "RegenerationMasterQuestComplete") == true)) {
            UnitBehaviorAdd(lv_itChenSpirit, "ChenStormEarthFireRegenerationMasterQuestComplete", lv_itChenSpirit, 1);
        }

    }
    if ((UnitGetType(libGame_gv_players[lv_chenPlayer].lv_heroUnit) == "HeroAbathur")) {
        UnitGroupLoopBegin(libGDHL_gv_heroChenStormEarthFireUnits[lv_chenPlayer].lv_stormEarthFireUnits);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "UltimateEvolutionAlternateHero", UnitGroupLoopCurrent(), 1);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "AbathurUltimateEvolutionCleanupTarget", UnitGroupLoopCurrent(), 1);
        }
        UnitGroupLoopEnd();
    }

    UISetSelectionTypeEnabled(PlayerGroupSingle(lv_chenPlayer), c_localSelectionTypeWorldPanelHero, false);
    while ((UnitHasBehavior2(lv_chen, "StormEarthFireCasterBehavior") == true)) {
        if ((UnitIsAlive(libGDHL_gv_heroChenStormEarthFireUnits[lv_chenPlayer].lv_controlStoreUnit) == true)) {
            if ((DistanceBetweenPoints(UnitGetPosition(lv_chen), UnitGetPosition(libGDHL_gv_heroChenStormEarthFireUnits[lv_chenPlayer].lv_controlStoreUnit)) >= 4.0)) {
                UnitSetPosition(lv_chen, UnitGetPosition(libGDHL_gv_heroChenStormEarthFireUnits[lv_chenPlayer].lv_controlStoreUnit), true);
            }
            else {
                UnitSetPosition(lv_chen, UnitGetPosition(libGDHL_gv_heroChenStormEarthFireUnits[lv_chenPlayer].lv_controlStoreUnit), true);
            }
        }

        Wait(0.0625, c_timeGame);
    }
    UISetSelectionTypeEnabled(PlayerGroupSingle(lv_chenPlayer), c_localSelectionTypeWorldPanelHero, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroChenStormEarthFireActivatedNew_Init () {
    libGDHL_gt_HeroChenStormEarthFireActivatedNew = TriggerCreate("libGDHL_gt_HeroChenStormEarthFireActivatedNew_Func");
    TriggerEnable(libGDHL_gt_HeroChenStormEarthFireActivatedNew, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroChenStormEarthFireActivatedNew, c_playerAny, "ChenStormEarthFireCreateFinishSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Chen - Element Dies
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroChenElementDies_Func (bool testConds, bool runActions) {
    string auto06E2BA20_val;

    // Variable Declarations
    unit lv_killingUnit;
    unit lv_killedElement;
    int lv_owner;
    unit lv_chen;
    int lv_elementsAlive;
    point lv_chenReturnPoint;

    // Variable Initialization
    lv_killingUnit = libNtve_gf_KillingUnit();
    lv_killedElement = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(libGame_gv_players[UnitGetOwner(lv_killedElement)].lv_heroUnit, "StormEarthFireCasterBehavior") == 1))) {
            return false;
        }

        if (!(((UnitGetType(lv_killedElement) == "HeroChenStorm") || (UnitGetType(lv_killedElement) == "HeroChenEarth") || (UnitGetType(lv_killedElement) == "HeroChenFire")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    AIRemovePlayerUnit(lv_killedElement);
    lv_chenReturnPoint = UnitGetPosition(lv_killedElement);
    lv_owner = UnitGetOwner(lv_killedElement);
    if ((UnitGetType(libGame_gv_players[lv_owner].lv_heroUnit) == "HeroChen")) {
        lv_chen = libGame_gv_players[lv_owner].lv_heroUnit;
    }
    else {
        lv_chen = libGame_gv_players[lv_owner].lv_activeVehicle;
    }
    lv_elementsAlive = UnitGroupCount(libGDHL_gv_heroChenStormEarthFireUnits[lv_owner].lv_stormEarthFireUnits, c_unitCountAlive);
    auto06E2BA20_val = UnitGetType(lv_killedElement);
    if (auto06E2BA20_val == "HeroChenStorm") {
        UnitBehaviorRemove(lv_chen, "ChenStormAlive", 1);
    }
    else if (auto06E2BA20_val == "HeroChenEarth") {
        UnitBehaviorRemove(lv_chen, "ChenEarthAlive", 1);
    }
    else if (auto06E2BA20_val == "HeroChenFire") {
        UnitBehaviorRemove(lv_chen, "ChenFireAlive", 1);
    }
    else {
    }
    if ((lv_elementsAlive == 0)) {
        if ((UnitGetOwner(lv_killingUnit) != lv_owner)) {
            libGDHL_gf_HeroChenStormEarthFireCleanup(lv_owner, true, lv_killingUnit);
        }
        else {
            libGDHL_gf_HeroChenStormEarthFireCleanup(lv_owner, false, lv_killingUnit);
        }
    }
    else {
        if ((lv_killedElement == libGDHL_gv_heroChenStormEarthFireUnits[lv_owner].lv_controlStoreUnit)) {
            UnitGroupLoopBegin(UnitGroupFilter(null, lv_owner, libGDHL_gv_heroChenStormEarthFireUnits[lv_owner].lv_stormEarthFireUnits, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                if ((lv_elementsAlive == 2) && (UnitGetType(UnitGroupLoopCurrent()) == "HeroChenEarth")) {
                    libGDHL_gv_heroChenStormEarthFireUnits[lv_owner].lv_controlStoreUnit = UnitGroupLoopCurrent();
                    break;
                }
                else {
                    if ((lv_elementsAlive == 1) && (UnitGetType(UnitGroupLoopCurrent()) == "HeroChenFire")) {
                        libGDHL_gv_heroChenStormEarthFireUnits[lv_owner].lv_controlStoreUnit = UnitGroupLoopCurrent();
                        break;
                    }
                    else {
                        if ((lv_elementsAlive == 1) && (UnitGetType(UnitGroupLoopCurrent()) == "HeroChenEarth")) {
                            libGDHL_gv_heroChenStormEarthFireUnits[lv_owner].lv_controlStoreUnit = UnitGroupLoopCurrent();
                            break;
                        }

                    }
                }
            }
            UnitGroupLoopEnd();
        }

    }
    Wait(2.0, c_timeGame);
    UnitRemove(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroChenElementDies_Init () {
    libGDHL_gt_HeroChenElementDies = TriggerCreate("libGDHL_gt_HeroChenElementDies_Func");
    TriggerEnable(libGDHL_gt_HeroChenElementDies, false);
    TriggerAddEventUnitDied(libGDHL_gt_HeroChenElementDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Chen - Element Fatal Damage Response
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroChenElementFatalDamageResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_spirit;
    int lv_spiritOwner;

    // Variable Initialization
    lv_spirit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_spiritOwner = UnitGetOwner(lv_spirit);

    // Conditions
    if (testConds) {
        if (!((lv_spiritOwner > 0))) {
            return false;
        }

        if (!((lv_spiritOwner <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGDHL_gv_heroChenStormEarthFireFatalDamageResponseCounter[lv_spiritOwner] >= 3)) {
        libGDHL_gv_heroChenStormEarthFireFatalDamageResponseCounter[lv_spiritOwner] = 3;
    }
    else {
        libGDHL_gv_heroChenStormEarthFireFatalDamageResponseCounter[lv_spiritOwner] += 1;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroChenElementFatalDamageResponse_Init () {
    libGDHL_gt_HeroChenElementFatalDamageResponse = TriggerCreate("libGDHL_gt_HeroChenElementFatalDamageResponse_Func");
    TriggerEnable(libGDHL_gt_HeroChenElementFatalDamageResponse, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroChenElementFatalDamageResponse, c_playerAny, "ChenStormEarthFireFatalDamageResponseDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Chen - Storm Earth Fire Regeneration Master
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroChenStormEarthFireRegenerationMaster_Func (bool testConds, bool runActions) {
    unitgroup autoC410F05C_g;
    int autoC410F05C_u;
    playergroup auto659630CC_g;
    int auto659630CC_p;
    unitgroup auto5394403B_g;
    int auto5394403B_u;

    // Variable Declarations
    playergroup lv_itChenPlayerGroup;
    unit lv_itUnit;
    int lv_itChenPlayer;
    unit lv_itChenPerPlayer;

    // Variable Initialization
    lv_itChenPlayerGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroChenRegenGlobeSearchRadius = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "RegenGlobePickupSearch", "AreaArray[" + IntToString(0) + "].Radius", 0);
    autoC410F05C_g = UnitGroupAlliance(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitSource)), libGDHL_gv_heroChenRegenGlobeSearchRadius), libCore_gv_filtersHeroicAllyorPlayerandnotStasis, 0);
    autoC410F05C_u = 1;
    for ( ; autoC410F05C_u <= UnitGroupCount(autoC410F05C_g, c_unitCountAll) ; autoC410F05C_u += (lv_itUnit == UnitGroupUnit(autoC410F05C_g, autoC410F05C_u)) ) {
        lv_itUnit = UnitGroupUnit(autoC410F05C_g, autoC410F05C_u);
        if (((UnitGetType(lv_itUnit) == "HeroChenStorm") || (UnitGetType(lv_itUnit) == "HeroChenEarth") || (UnitGetType(lv_itUnit) == "HeroChenFire"))) {
            PlayerGroupAdd(lv_itChenPlayerGroup, UnitGetOwner(lv_itUnit));
        }

    }
    auto659630CC_g = lv_itChenPlayerGroup; 
    auto659630CC_p = 1;
    for ( ; auto659630CC_p <= PlayerGroupCount(auto659630CC_g) ; auto659630CC_p += (lv_itChenPlayer == PlayerGroupPlayer(auto659630CC_g, auto659630CC_p)) ) {
        lv_itChenPlayer = PlayerGroupPlayer(auto659630CC_g, auto659630CC_p);
        if ((PlayerHasTalent(lv_itChenPlayer, "GenericTalentRegenerationMaster") == true)) {
            UnitBehaviorAdd(libGame_gv_players[lv_itChenPlayer].lv_heroUnit, "RegenerationMaster", libGame_gv_players[lv_itChenPlayer].lv_heroUnit, 1);
            UnitCreateEffectUnit(libGame_gv_players[lv_itChenPlayer].lv_heroUnit, "RegenerationMasterApplyQuestCompleteBehavior", libGame_gv_players[lv_itChenPlayer].lv_heroUnit);
            if ((UnitHasBehavior2(libGame_gv_players[lv_itChenPlayer].lv_heroUnit, "RegenerationMasterQuestComplete") == true)) {
                auto5394403B_g = libGDHL_gv_heroChenStormEarthFireUnits[lv_itChenPlayer].lv_stormEarthFireUnits;
                auto5394403B_u = 1;
                for ( ; auto5394403B_u <= UnitGroupCount(auto5394403B_g, c_unitCountAll) ; auto5394403B_u += (lv_itUnit == UnitGroupUnit(auto5394403B_g, auto5394403B_u)) ) {
                    lv_itUnit = UnitGroupUnit(auto5394403B_g, auto5394403B_u);
                    if ((UnitHasBehavior2(lv_itUnit, "ChenStormEarthFireRegenerationMasterQuestComplete") == false)) {
                        UnitBehaviorAdd(lv_itUnit, "ChenStormEarthFireRegenerationMasterQuestComplete", lv_itUnit, 1);
                        UnitCreateEffectUnit(lv_itUnit, "TalentQuestCompletionDummyModifyUnit", lv_itUnit);
                    }

                }
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroChenStormEarthFireRegenerationMaster_Init () {
    libGDHL_gt_HeroChenStormEarthFireRegenerationMaster = TriggerCreate("libGDHL_gt_HeroChenStormEarthFireRegenerationMaster_Func");
    TriggerEnable(libGDHL_gt_HeroChenStormEarthFireRegenerationMaster, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroChenStormEarthFireRegenerationMaster, c_playerAny, "RegenGlobePickupSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Chen - Expiration Cleanup
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroChenExpirationCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(libGDHL_gv_heroChenStormEarthFireUnits[lv_player].lv_stormEarthFireUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "HeroChenStorm") || (UnitGetType(UnitGroupLoopCurrent()) == "HeroChenFire") || (UnitGetType(UnitGroupLoopCurrent()) == "HeroChenEarth"))) {
            UnitCreateEffectUnit(UnitGroupLoopCurrent(), "TimedLifeFate", UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroChenExpirationCleanup_Init () {
    libGDHL_gt_HeroChenExpirationCleanup = TriggerCreate("libGDHL_gt_HeroChenExpirationCleanup_Func");
    TriggerEnable(libGDHL_gt_HeroChenExpirationCleanup, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroChenExpirationCleanup, c_playerAny, "StormEarthFireTimedLifeFate");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Chen - Storm Earth Fire Earth Ability
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroChenStormEarthFireEarthAbility_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_chenPlayer;
    fixed lv_maxJumpRange;
    point lv_playerTargetPoint;
    fixed lv_distanceFromSpiritToPlayerTargetPoint;
    fixed lv_spiritRadius;
    point lv_actualTargetPoint;
    point lv_actualTargetPoint2;
    fixed lv_modifiedDistance;

    // Variable Initialization
    lv_maxJumpRange = 7.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_chenPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_playerTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_actualTargetPoint2 = UnitGetPosition(UnitGroupClosestToPoint(libGDHL_gv_heroChenStormEarthFireUnits[lv_chenPlayer].lv_stormEarthFireUnits, lv_playerTargetPoint));
    lv_distanceFromSpiritToPlayerTargetPoint = DistanceBetweenPoints(lv_actualTargetPoint2, lv_playerTargetPoint);
    lv_spiritRadius = 0.5;
    if ((lv_distanceFromSpiritToPlayerTargetPoint > lv_maxJumpRange)) {
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_actualTargetPoint2, lv_maxJumpRange, lv_playerTargetPoint);
    }
    else {
        lv_actualTargetPoint = lv_playerTargetPoint;
    }
    lv_modifiedDistance = (lv_maxJumpRange + 0.125);
    UnitGroupLoopBegin(libGDHL_gv_heroChenStormEarthFireUnits[lv_chenPlayer].lv_stormEarthFireUnits);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "HeroChenStorm")) {
            while ((PointPathingPassable(lv_actualTargetPoint) == false)) {
                lv_modifiedDistance -= 0.125;
                lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_actualTargetPoint2, lv_modifiedDistance, lv_playerTargetPoint);
            }
        }
        if ((UnitGetType(UnitGroupLoopCurrent()) != "HeroChenStorm") && (UnitIsAlive(UnitGroupLoopCurrent()) == true)) {
            libNtve_gf_MakeUnitFacePoint(UnitGroupLoopCurrent(), lv_actualTargetPoint, 0.0);
            UnitCreateEffectUnit(UnitGroupLoopCurrent(), "AbilityUseResponseSetDismountDecloak", UnitGroupLoopCurrent());
            UnitCreateEffectPointWithSource(UnitGroupLoopCurrent(), "ChenEarthLaunchMissile", lv_actualTargetPoint, c_gameCatalogAbil, "ChenStormEarthFireTriAttack");
            UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroChenStormEarthFireEarthAbility_Init () {
    libGDHL_gt_HeroChenStormEarthFireEarthAbility = TriggerCreate("libGDHL_gt_HeroChenStormEarthFireEarthAbility_Func");
    TriggerEnable(libGDHL_gt_HeroChenStormEarthFireEarthAbility, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroChenStormEarthFireEarthAbility, c_playerAny, "ChenEarthDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Chen - Storm Earth Fire Mines Entrance
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroChenStormEarthFireMinesEntrance_Func (bool testConds, bool runActions) {
    unitgroup auto258678CD_g;
    int auto258678CD_u;

    // Variable Declarations
    unit lv_itHeroUnit;
    unit lv_portedUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(libGame_gv_players[libGame_gf_MapHauntedMinesPlayerUsesGatePlayer()].lv_heroUnit) == "HeroChen") || (UnitGetType(libGame_gv_players[libGame_gf_MapHauntedMinesPlayerUsesGatePlayer()].lv_activeVehicle) == "HeroChen")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_portedUnit = libGame_gf_MapHauntedMinesPlayerUsesGateHeroUnit();
    auto258678CD_g = libGDHL_gv_heroChenStormEarthFireUnits[libGame_gf_MapHauntedMinesPlayerUsesGatePlayer()].lv_stormEarthFireUnits;
    auto258678CD_u = 1;
    for ( ; auto258678CD_u <= UnitGroupCount(auto258678CD_g, c_unitCountAll) ; auto258678CD_u += (lv_itHeroUnit == UnitGroupUnit(auto258678CD_g, auto258678CD_u)) ) {
        lv_itHeroUnit = UnitGroupUnit(auto258678CD_g, auto258678CD_u);
        if ((lv_portedUnit != lv_itHeroUnit)) {
            UnitSetPosition(lv_itHeroUnit, UnitGetPosition(lv_portedUnit), false);
            UnitIssueOrder(lv_itHeroUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            libMapM_gf_MMUnderworldChangePlaneForPlayer(UnitGetOwner(lv_itHeroUnit));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroChenStormEarthFireMinesEntrance_Init () {
    libGDHL_gt_HeroChenStormEarthFireMinesEntrance = TriggerCreate("libGDHL_gt_HeroChenStormEarthFireMinesEntrance_Func");
    TriggerEnable(libGDHL_gt_HeroChenStormEarthFireMinesEntrance, false);
    libGame_gf_MapHauntedMinesPlayerUsesGate(libGDHL_gt_HeroChenStormEarthFireMinesEntrance);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Chen - Swift Reflexes Talent - Missed
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroChenSwiftReflexesTalentMissed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_caster;
    int lv_target;
    playergroup lv_players;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_target = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    lv_players = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libSprt_gv_dEBUGCombatTextEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "LiLiBlindingWindRemoveBehaviorBlind")) {
        PlayerGroupAdd(lv_players, lv_caster);
        PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
        FloatingCombatElementCreateTextAtUnit(lv_players, "FloatingCombatElements/FloatingCombatElementTemplate", "", EventPlayerEffectUsedUnit(c_effectUnitTarget), StringExternal("Param/Value/lib_GDHL_1032ACAE"), libNtve_gv_FloatingCombatTextAutoRandomSeed);
    }
    else {
        PlayerGroupAdd(lv_players, lv_target);
        PlayerGroupAdd(lv_players, lv_caster);
        FloatingCombatElementCreateTextAtUnit(lv_players, "FloatingCombatElements/FloatingCombatElementTemplate", "", EventPlayerEffectUsedUnit(c_effectUnitSource), StringExternal("Param/Value/lib_GDHL_D0A684FD"), libNtve_gv_FloatingCombatTextAutoRandomSeed);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroChenSwiftReflexesTalentMissed_Init () {
    libGDHL_gt_HeroChenSwiftReflexesTalentMissed = TriggerCreate("libGDHL_gt_HeroChenSwiftReflexesTalentMissed_Func");
    TriggerEnable(libGDHL_gt_HeroChenSwiftReflexesTalentMissed, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroChenSwiftReflexesTalentMissed, c_playerAny, "ChenSwiftReflexesProcSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Chen - Purifying Brew Talent Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroChenPurifyingBrewTalentProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_behavior;
    unit lv_unit;
    int lv_player;
    fixed lv_behaviorDuration;
    fixed lv_reducedDuration;
    fixed lv_percentReduction;

    // Variable Initialization
    lv_behavior = EventUnitBehavior();
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);
    lv_percentReduction = 0.75;

    // Conditions
    if (testConds) {
        if (!((lv_player >= 1))) {
            return false;
        }

        if (!((lv_player <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_player, "ChenPurifyingBrew") == true))) {
            return false;
        }

        if (!((UnitGetType(lv_unit) == "HeroChen"))) {
            return false;
        }

        if (!((UnitHasBehavior2(lv_unit, "ChenPurifyingBrewCooldown") == false))) {
            return false;
        }

        if (!((UnitHasBehaviorWithFlag(lv_unit, c_unitBehaviorFlagUser1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libGame_gf_CCReductionStunReduceable(lv_behavior) != true) || (libGame_gf_CCReductionSilencedReduceable(lv_behavior) != true))) {
        return true;
    }
    else {
        lv_behaviorDuration = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, lv_behavior, "Duration", UnitBehaviorEffectPlayer(lv_unit, lv_behavior, c_effectPlayerCaster, 0)));
        lv_reducedDuration = (lv_behaviorDuration * (1.0 - MinF(lv_percentReduction, 0.9)));
        UnitBehaviorSetDurationRemaining(lv_unit, lv_behavior, lv_reducedDuration);
        UnitBehaviorAdd(lv_unit, "ChenPurifyingBrewCooldown", lv_unit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroChenPurifyingBrewTalentProc_Init () {
    libGDHL_gt_HeroChenPurifyingBrewTalentProc = TriggerCreate("libGDHL_gt_HeroChenPurifyingBrewTalentProc_Func");
    TriggerEnable(libGDHL_gt_HeroChenPurifyingBrewTalentProc, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroChenPurifyingBrewTalentProc, null, c_behaviorCategoryStun, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroChenPurifyingBrewTalentProc, null, c_behaviorCategoryStun, c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroChenPurifyingBrewTalentProc, null, c_behaviorCategoryUser7, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroChenPurifyingBrewTalentProc, null, c_behaviorCategoryUser7, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Chen - Freshest Ingredients Talent Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroChenFreshestIngredientsTalentProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_maxStack;
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_maxStack = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "ChenFreshestIngredientsTokenCounter", "Max", 0);
    lv_unit = libGame_gv_players[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)].lv_heroUnit;
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_player, "ChenFreshestIngredients") == true))) {
            return false;
        }

        if (!((UnitBehaviorCount(lv_unit, "ChenFreshestIngredientsTokenCounter") < lv_maxStack))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_unit, "ChenFreshestIngredientsAddTokenCounter", lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroChenFreshestIngredientsTalentProc_Init () {
    libGDHL_gt_HeroChenFreshestIngredientsTalentProc = TriggerCreate("libGDHL_gt_HeroChenFreshestIngredientsTalentProc_Func");
    TriggerEnable(libGDHL_gt_HeroChenFreshestIngredientsTalentProc, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroChenFreshestIngredientsTalentProc, c_playerAny, "RegenGlobeImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crusader - Falling Sword - Teleport
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_CrusaderFallingSwordTeleport_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_owner;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_owner = UnitGetOwner(lv_caster);

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_players[lv_owner].lv_cameraCameraLockInterrupt = true;
    libGame_gf_CameraUpdateCameraForPlayer(lv_owner);
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_owner, UnitGetPosition(lv_caster), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_CrusaderFallingSwordTeleport_Init () {
    libGDHL_gt_CrusaderFallingSwordTeleport = TriggerCreate("libGDHL_gt_CrusaderFallingSwordTeleport_Func");
    TriggerEnable(libGDHL_gt_CrusaderFallingSwordTeleport, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_CrusaderFallingSwordTeleport, c_playerAny, "CrusaderFallingSwordTeleport");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Crusader - Falling Sword - Final Set
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_CrusaderFallingSwordFinalSet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_players[lv_player].lv_cameraCameraLockInterrupt = false;
    libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_CrusaderFallingSwordFinalSet_Init () {
    libGDHL_gt_CrusaderFallingSwordFinalSet = TriggerCreate("libGDHL_gt_CrusaderFallingSwordFinalSet_Func");
    TriggerEnable(libGDHL_gt_CrusaderFallingSwordFinalSet, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_CrusaderFallingSwordFinalSet, null, "CrusaderFallingSword", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - OverPower Facing
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloOverPowerFacing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_diablo;
    unit lv_target;
    fixed lv_currentAngle;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_diablo = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_currentAngle = UnitGetFacing(lv_diablo);
    Wait(0.4375, c_timeGame);
    if ((UnitBehaviorCount(lv_diablo, "DiabloOverpowerCasterBehavior") == 1)) {
        UnitSetFacing(lv_diablo, (lv_currentAngle + 180.0), 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloOverPowerFacing_Init () {
    libGDHL_gt_HeroDiabloOverPowerFacing = TriggerCreate("libGDHL_gt_HeroDiabloOverPowerFacing_Func");
    TriggerEnable(libGDHL_gt_HeroDiabloOverPowerFacing, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroDiabloOverPowerFacing, c_playerAny, "DiabloOverpowerWalkableSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Inferno Breath Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloInfernoBreathCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(lv_unit) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(lv_unit) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroDiabloInfernoBreathActive[lv_player] = true;
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroDiablo", "StationaryTurningRate", lv_player, FixedToString(libGDHL_gv_heroDiabloInfernoBreathTurningRate, 0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloInfernoBreathCast_Init () {
    libGDHL_gt_HeroDiabloInfernoBreathCast = TriggerCreate("libGDHL_gt_HeroDiabloInfernoBreathCast_Func");
    TriggerEnable(libGDHL_gt_HeroDiabloInfernoBreathCast, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroDiabloInfernoBreathCast, null, "DiabloLightningBreathActive", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Inferno Breath End
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloInfernoBreathEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    bool lv_infernoBreathAimTriggerEnabled;
    int lv_diabloIndex;
    int lv_triggeringDiabloPlayer;

    // Variable Initialization
    lv_triggeringDiabloPlayer = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogUnit, "HeroDiablo", "StationaryTurningRate", lv_triggeringDiabloPlayer, CatalogFieldValueGet(c_gameCatalogUnit, "HeroDiablo", "StationaryTurningRate", 0));
    libGDHL_gv_heroDiabloInfernoBreathActive[lv_triggeringDiabloPlayer] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloInfernoBreathEnd_Init () {
    libGDHL_gt_HeroDiabloInfernoBreathEnd = TriggerCreate("libGDHL_gt_HeroDiabloInfernoBreathEnd_Func");
    TriggerEnable(libGDHL_gt_HeroDiabloInfernoBreathEnd, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroDiabloInfernoBreathEnd, null, "DiabloLightningBreathActive", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Infernal Power Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloInfernalPowerProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_player, "DiabloSpeedDemon") == true))) {
            return false;
        }

        if (!((UnitGetType(lv_unit) == "HeroDiablo"))) {
            return false;
        }

        if (!((UnitHasBehaviorWithFlag(lv_unit, c_unitBehaviorFlagUser1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_unit, "DemonSpeedDemonSpeedBuff", lv_unit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloInfernalPowerProc_Init () {
    libGDHL_gt_HeroDiabloInfernalPowerProc = TriggerCreate("libGDHL_gt_HeroDiabloInfernalPowerProc_Func");
    TriggerEnable(libGDHL_gt_HeroDiabloInfernalPowerProc, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroDiabloInfernalPowerProc, null, c_behaviorCategoryStun, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroDiabloInfernalPowerProc, null, c_behaviorCategoryStun, c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroDiabloInfernalPowerProc, null, c_behaviorCategoryUser5, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroDiabloInfernalPowerProc, null, c_behaviorCategoryUser5, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Black Soulstone Talents Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloBlackSoulstoneTalentsProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    int lv_i;
    fixed lv_tokenStacks;
    fixed lv_scale;
    fixed lv_scaleValue;
    fixed lv_finalValue;

    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_player = UnitGetOwner(lv_unit);
    lv_tokenStacks = UnitBehaviorCount(lv_unit, "DiabloBlackSoulstoneTokenCounter");
    lv_scale = 0.15;
    lv_scaleValue = (lv_scale * lv_tokenStacks);
    lv_finalValue = (lv_scaleValue / 100.0);

    // Conditions
    if (testConds) {
        if (!((lv_player > 0))) {
            return false;
        }

        if (!((lv_player <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_player, "DiabloSoulShield") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerHasTalent(lv_player, "DiabloSoulShield") == true)) {
        lv_scale = 0.25;
        lv_scaleValue = (lv_scale * lv_tokenStacks);
        lv_finalValue = lv_scaleValue;
        CatalogFieldValueSet(c_gameCatalogBehavior, "DiabloSoulShieldCarry", "ArmorModification.ArmorSet[" + IntToString(c_unitDamageTypeHero) + "].ArmorMitigationTable[" + IntToString(c_unitDamageTypeAbility) + "]", lv_player, FixedToString(lv_finalValue, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, "DiabloSoulShieldCarry", "ArmorModification.ArmorSet[" + IntToString(c_unitDamageTypeMerc) + "].ArmorMitigationTable[" + IntToString(c_unitDamageTypeAbility) + "]", lv_player, FixedToString(lv_finalValue, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, "DiabloSoulShieldCarry", "ArmorModification.ArmorSet[" + IntToString(c_unitDamageTypeMonster) + "].ArmorMitigationTable[" + IntToString(c_unitDamageTypeAbility) + "]", lv_player, FixedToString(lv_finalValue, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, "DiabloSoulShieldCarry", "ArmorModification.ArmorSet[" + IntToString(c_unitDamageTypeSummon) + "].ArmorMitigationTable[" + IntToString(c_unitDamageTypeAbility) + "]", lv_player, FixedToString(lv_finalValue, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, "DiabloSoulShieldCarry", "ArmorModification.ArmorSet[" + IntToString(c_unitDamageTypeStructure) + "].ArmorMitigationTable[" + IntToString(c_unitDamageTypeAbility) + "]", lv_player, FixedToString(lv_finalValue, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, "DiabloSoulShieldCarry", "ArmorModification.ArmorSet[" + IntToString(c_unitDamageTypeMinion) + "].ArmorMitigationTable[" + IntToString(c_unitDamageTypeAbility) + "]", lv_player, FixedToString(lv_finalValue, c_fixedPrecisionAny));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloBlackSoulstoneTalentsProc_Init () {
    libGDHL_gt_HeroDiabloBlackSoulstoneTalentsProc = TriggerCreate("libGDHL_gt_HeroDiabloBlackSoulstoneTalentsProc_Func");
    TriggerEnable(libGDHL_gt_HeroDiabloBlackSoulstoneTalentsProc, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroDiabloBlackSoulstoneTalentsProc, c_playerAny, "DiabloBlackSoulstoneAddTokenCount");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroDiabloBlackSoulstoneTalentsProc, c_playerAny, "DiabloBlackSoulstoneAdd10TokenCount");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroDiabloBlackSoulstoneTalentsProc, c_playerAny, "DiabloBlackSoulstoneRemove100TokenCount");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroDiabloBlackSoulstoneTalentsProc, c_playerAny, "DiabloBlackSoulstoneRemove80TokenCount");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Diablo - Black Soulstone Stack Talent Picked
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDiabloBlackSoulstoneStackTalentPicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_behavior;
    unit lv_unit;
    int lv_player;
    fixed lv_tokenStacks;
    fixed lv_scale;
    fixed lv_scaleValue;
    fixed lv_finalValue;

    // Variable Initialization
    lv_behavior = EventUnitBehavior();
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);
    lv_tokenStacks = UnitBehaviorCount(lv_unit, "DiabloBlackSoulstoneTokenCounter");
    lv_scale = 0.15;
    lv_scaleValue = (lv_tokenStacks * lv_scale);
    lv_finalValue = (lv_scaleValue / 100.0);

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(lv_unit, "DiabloBlackSoulstoneTokenCounter") > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_behavior == "DiabloBlackSoulstoneDevilsDueTalentTokenCounter")) {
        CatalogFieldValueSet(c_gameCatalogEffect, "DiabloBlackSoulstoneAddDynamicDevilsDueTalentTokenCount", "Value", lv_player, FixedToString(lv_tokenStacks, c_fixedPrecisionAny));
        UnitCreateEffectUnit(lv_unit, "DiabloBlackSoulstoneAddDynamicDevilsDueTalentTokenCount", lv_unit);
    }

    if ((lv_behavior == "DiabloSoulShieldCarry")) {
        lv_scale = 25.0;
        lv_scaleValue = (lv_tokenStacks * lv_scale);
        lv_finalValue = (lv_scaleValue / 100.0);
        CatalogFieldValueSet(c_gameCatalogBehavior, "DiabloSoulShieldCarry", "ArmorModification.ArmorSet[" + IntToString(c_unitDamageTypeHero) + "].ArmorMitigationTable[" + IntToString(c_unitDamageTypeAbility) + "]", lv_player, FixedToString(lv_finalValue, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, "DiabloSoulShieldCarry", "ArmorModification.ArmorSet[" + IntToString(c_unitDamageTypeMerc) + "].ArmorMitigationTable[" + IntToString(c_unitDamageTypeAbility) + "]", lv_player, FixedToString(lv_finalValue, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, "DiabloSoulShieldCarry", "ArmorModification.ArmorSet[" + IntToString(c_unitDamageTypeMonster) + "].ArmorMitigationTable[" + IntToString(c_unitDamageTypeAbility) + "]", lv_player, FixedToString(lv_finalValue, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, "DiabloSoulShieldCarry", "ArmorModification.ArmorSet[" + IntToString(c_unitDamageTypeSummon) + "].ArmorMitigationTable[" + IntToString(c_unitDamageTypeAbility) + "]", lv_player, FixedToString(lv_finalValue, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, "DiabloSoulShieldCarry", "ArmorModification.ArmorSet[" + IntToString(c_unitDamageTypeStructure) + "].ArmorMitigationTable[" + IntToString(c_unitDamageTypeAbility) + "]", lv_player, FixedToString(lv_finalValue, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogBehavior, "DiabloSoulShieldCarry", "ArmorModification.ArmorSet[" + IntToString(c_unitDamageTypeMinion) + "].ArmorMitigationTable[" + IntToString(c_unitDamageTypeAbility) + "]", lv_player, FixedToString(lv_finalValue, c_fixedPrecisionAny));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDiabloBlackSoulstoneStackTalentPicked_Init () {
    libGDHL_gt_HeroDiabloBlackSoulstoneStackTalentPicked = TriggerCreate("libGDHL_gt_HeroDiabloBlackSoulstoneStackTalentPicked_Func");
    TriggerEnable(libGDHL_gt_HeroDiabloBlackSoulstoneStackTalentPicked, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroDiabloBlackSoulstoneStackTalentPicked, null, "DiabloBlackSoulstoneDevilsDueTalentTokenCounter", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroDiabloBlackSoulstoneStackTalentPicked, null, "DiabloSoulShieldCarry", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Demon Hunter - Vault Damage Buff
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDemonHunterVaultDamageBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    int lv_stacks;
    fixed lv_base;
    fixed lv_stackMod;
    fixed lv_finalMod;

    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_unit);
    lv_stacks = UnitBehaviorCount(lv_unit, "NewHatredStack");
    lv_stackMod = 0.06;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerHasTalent(lv_player, "DemonHunterDeathDealer") == true)) {
        lv_stackMod = 0.14;
    }

    lv_finalMod = (lv_base + (lv_stackMod * lv_stacks));
    CatalogFieldValueSet(c_gameCatalogBehavior, "DemonHunterVaultDamageBoost", "Modification.UnifiedDamageDealtFraction[" + IntToString(c_unitDamageTypeBasic) + "]", lv_player, FixedToString(lv_finalMod, c_fixedPrecisionAny));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDemonHunterVaultDamageBuff_Init () {
    libGDHL_gt_HeroDemonHunterVaultDamageBuff = TriggerCreate("libGDHL_gt_HeroDemonHunterVaultDamageBuff_Func");
    TriggerEnable(libGDHL_gt_HeroDemonHunterVaultDamageBuff, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroDemonHunterVaultDamageBuff, c_playerAny, "VaultPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Demon Hunter - Manticore Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDemonHunterManticoreProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    unit lv_caster;
    int lv_casterPlayer;

    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_casterPlayer = UnitGetOwner(lv_caster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGDHL_gv_heroDemonHunterManticoreTarget[lv_casterPlayer] == lv_target)) {
        if ((libGDHL_gv_heroDemonHunterManticoreIncrementer[lv_casterPlayer] == 2)) {
            UnitCreateEffectUnitWithSource(lv_caster, "DemonHunterHeroWeaponManticoreTalentProcDamage", lv_target, c_gameCatalogAbil, "attack");
            libGDHL_gv_heroDemonHunterManticoreIncrementer[lv_casterPlayer] = 0;
        }
        else {
            libGDHL_gv_heroDemonHunterManticoreIncrementer[lv_casterPlayer] += 1;
        }
    }
    else {
        libGDHL_gv_heroDemonHunterManticoreIncrementer[lv_casterPlayer] = 1;
        libGDHL_gv_heroDemonHunterManticoreTarget[lv_casterPlayer] = lv_target;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDemonHunterManticoreProc_Init () {
    libGDHL_gt_HeroDemonHunterManticoreProc = TriggerCreate("libGDHL_gt_HeroDemonHunterManticoreProc_Func");
    TriggerEnable(libGDHL_gt_HeroDemonHunterManticoreProc, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroDemonHunterManticoreProc, c_playerAny, "DemonHunterHeroWeaponManticoreTalentDummyModifyUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Demon Hunter  - Punishment Initial Pick
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDemonHunterPunishmentInitialPick_Func (bool testConds, bool runActions) {
    int auto4A1AD441_ae;

    // Variable Declarations
    unit lv_unit;
    int lv_stackCount;
    int lv_i;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_stackCount = UnitBehaviorCount(lv_unit, "NewHatredStack");

    // Conditions
    if (testConds) {
        if (!((lv_stackCount > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4A1AD441_ae = lv_stackCount;
    lv_i = 1;
    for ( ; lv_i <= auto4A1AD441_ae ; lv_i += 1 ) {
        UnitCreateEffectUnit(lv_unit, "DemonHunterMultishotPunishmentTalentIncrementTokenCount", lv_unit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDemonHunterPunishmentInitialPick_Init () {
    libGDHL_gt_HeroDemonHunterPunishmentInitialPick = TriggerCreate("libGDHL_gt_HeroDemonHunterPunishmentInitialPick_Func");
    TriggerEnable(libGDHL_gt_HeroDemonHunterPunishmentInitialPick, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroDemonHunterPunishmentInitialPick, null, "DemonHunterMultishotTalentPunishmentTokenCounter", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Demon Hunter - Gloom Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDemonHunterGloomCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    int lv_stacks;

    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_unit);
    lv_stacks = UnitBehaviorCount(lv_unit, "NewHatredStack");

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(lv_unit, "NewHatredStack") > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_unit, "DemonHunterGloomBuff", lv_unit, lv_stacks);
    UnitBehaviorRemove(lv_unit, "NewHatredStack", 10);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDemonHunterGloomCast_Init () {
    libGDHL_gt_HeroDemonHunterGloomCast = TriggerCreate("libGDHL_gt_HeroDemonHunterGloomCast_Func");
    TriggerEnable(libGDHL_gt_HeroDemonHunterGloomCast, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroDemonHunterGloomCast, c_playerAny, "DemonHunterGloomCastSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Dryad - Leaping Strike - Set Target Variable
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDryadLeapingStrikeSetTargetVariable_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroDryadLeapingStrikeTarget[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))] = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDryadLeapingStrikeSetTargetVariable_Init () {
    libGDHL_gt_HeroDryadLeapingStrikeSetTargetVariable = TriggerCreate("libGDHL_gt_HeroDryadLeapingStrikeSetTargetVariable_Func");
    TriggerEnable(libGDHL_gt_HeroDryadLeapingStrikeSetTargetVariable, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroDryadLeapingStrikeSetTargetVariable, c_playerAny, "DryadLeapingStrikeAttackDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Dryad - Leaping Strike - Find Landing Location
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDryadLeapingStrikeFindLandingLocation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_lunara;
    point lv_targetPoint;
    fixed lv_searchIncrements;
    point lv_newLocation;

    // Variable Initialization
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_searchIncrements = 0.25;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_newLocation = lv_targetPoint;
    lv_lunara = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    while (((PathingType(lv_newLocation) != c_pathingGround))) {
        lv_newLocation = libNtve_gf_PointOffsetTowardsPoint(lv_newLocation, lv_searchIncrements, UnitGetPosition(lv_lunara));
    }
    if ((UnitHasBehavior2(lv_lunara, "DryadLeapingStrikeFriendlyCast") == true)) {
        UnitCreateEffectPoint(lv_lunara, "DryadLeapingStrikeBoundlessStrideLaunchMissile", lv_newLocation);
    }
    else {
        UnitCreateEffectPoint(lv_lunara, "DryadLeapingStrikeLaunchMissile", lv_newLocation);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDryadLeapingStrikeFindLandingLocation_Init () {
    libGDHL_gt_HeroDryadLeapingStrikeFindLandingLocation = TriggerCreate("libGDHL_gt_HeroDryadLeapingStrikeFindLandingLocation_Func");
    TriggerEnable(libGDHL_gt_HeroDryadLeapingStrikeFindLandingLocation, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroDryadLeapingStrikeFindLandingLocation, c_playerAny, "DryadLeapingStrikeOffsetDummyEffect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Dryad - Leaping Strike - Create Attack Persistent
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDryadLeapingStrikeCreateAttackPersistent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.125, c_timeGame);
    UnitCreateEffectUnitWithSource(lv_caster, "DryadLeapingStrikeAttackPersistent", libGDHL_gv_heroDryadLeapingStrikeTarget[UnitGetOwner(lv_caster)], c_gameCatalogAbil, "DryadLeapingStrike");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDryadLeapingStrikeCreateAttackPersistent_Init () {
    libGDHL_gt_HeroDryadLeapingStrikeCreateAttackPersistent = TriggerCreate("libGDHL_gt_HeroDryadLeapingStrikeCreateAttackPersistent_Func");
    TriggerEnable(libGDHL_gt_HeroDryadLeapingStrikeCreateAttackPersistent, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroDryadLeapingStrikeCreateAttackPersistent, c_playerAny, "DryadLeapingStrikeLaunchMissile");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Dryad - Nature's Toxin - Handle Application
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDryadNaturesToxinHandleApplication_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_timeDifferenceToNextThreshold;
    unit lv_caster;
    unit lv_target;
    actor lv_heroicCasterVisibilityActor;
    actor lv_mercBossCasterVisibilityActor;
    actor lv_nonHeroicCasterVisibilityActor;
    string lv_triggeringPoison;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_heroicCasterVisibilityActor = ActorFromActor(libNtve_gf_MainActorofUnit(lv_target), "DryadNaturesToxinHeroicDebuffCasterVisibility");
    lv_mercBossCasterVisibilityActor = ActorFromActor(libNtve_gf_MainActorofUnit(lv_target), "DryadNaturesToxinMercBossDebuffCasterVisibility");
    lv_nonHeroicCasterVisibilityActor = ActorFromActor(libNtve_gf_MainActorofUnit(lv_target), "DryadNaturesToxinNonHeroicDebuffCasterVisibility");
    lv_triggeringPoison = "DryadNaturesToxin";

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitHasBehavior2(lv_target, "IsPseudoStructure") == true) || (UnitTypeTestAttribute(UnitGetType(lv_target), c_unitAttributeHeroic) == true) || (UnitTypeTestAttribute(UnitGetType(lv_target), c_unitAttributeStructure) == true))) {
        ActorSend(lv_heroicCasterVisibilityActor, (("Signal " + ("Blossom" + IntToString(UnitGetOwner(lv_caster))))));
        if ((UnitBehaviorDuration(lv_target, lv_triggeringPoison) < 6.0)) {
            lv_timeDifferenceToNextThreshold = (UnitBehaviorDuration(lv_target, lv_triggeringPoison) - 3.0);
            UnitBehaviorSetDurationRemaining(lv_target, "DryadNaturesToxinVisual2", lv_timeDifferenceToNextThreshold);
        }
        else {
            if ((UnitBehaviorDuration(lv_target, lv_triggeringPoison) < 9.0)) {
                lv_timeDifferenceToNextThreshold = (UnitBehaviorDuration(lv_target, lv_triggeringPoison) - 6.0);
                UnitBehaviorSetDurationRemaining(lv_target, "DryadNaturesToxinVisual2", 6.0);
                UnitBehaviorSetDurationRemaining(lv_target, "DryadNaturesToxinVisual3", lv_timeDifferenceToNextThreshold);
            }

        }
        if ((UnitBehaviorDurationTotal(lv_target, lv_triggeringPoison) > 9.0)) {
            UnitBehaviorSetDurationRemaining(lv_target, lv_triggeringPoison, 9.0);
            UnitBehaviorSetDurationRemaining(lv_target, "DryadNaturesToxinVisual3", 3.0);
            UnitBehaviorSetDurationRemaining(lv_target, "DryadNaturesToxinVisual2", 6.0);
            UnitBehaviorSetDurationRemaining(lv_target, "DryadNaturesToxinVisual1", 9.0);
        }

    }
    else {
        ActorSend(lv_mercBossCasterVisibilityActor, (("Signal " + ("Blossom" + IntToString(UnitGetOwner(lv_caster))))));
        ActorSend(lv_nonHeroicCasterVisibilityActor, (("Signal " + ("Blossom" + IntToString(UnitGetOwner(lv_caster))))));
        if ((UnitBehaviorDuration(lv_target, lv_triggeringPoison) < 6.0)) {
            lv_timeDifferenceToNextThreshold = (UnitBehaviorDuration(lv_target, lv_triggeringPoison) - 3.0);
            UnitBehaviorSetDurationRemaining(lv_target, "DryadNaturesToxinVisual2", lv_timeDifferenceToNextThreshold);
        }
        else {
            if ((UnitBehaviorDuration(lv_target, lv_triggeringPoison) < 9.0)) {
                lv_timeDifferenceToNextThreshold = (UnitBehaviorDuration(lv_target, lv_triggeringPoison) - 6.0);
                UnitBehaviorSetDurationRemaining(lv_target, "DryadNaturesToxinVisual2", 6.0);
                UnitBehaviorSetDurationRemaining(lv_target, "DryadNaturesToxinVisual3", lv_timeDifferenceToNextThreshold);
            }

        }
        if ((UnitBehaviorDurationTotal(lv_target, lv_triggeringPoison) > 9.0)) {
            UnitBehaviorSetDurationRemaining(lv_target, lv_triggeringPoison, 9.0);
            UnitBehaviorSetDurationRemaining(lv_target, "DryadNaturesToxinVisual3", 3.0);
            UnitBehaviorSetDurationRemaining(lv_target, "DryadNaturesToxinVisual2", 6.0);
            UnitBehaviorSetDurationRemaining(lv_target, "DryadNaturesToxinVisual1", 9.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDryadNaturesToxinHandleApplication_Init () {
    libGDHL_gt_HeroDryadNaturesToxinHandleApplication = TriggerCreate("libGDHL_gt_HeroDryadNaturesToxinHandleApplication_Func");
    TriggerEnable(libGDHL_gt_HeroDryadNaturesToxinHandleApplication, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroDryadNaturesToxinHandleApplication, c_playerAny, "DryadNaturesToxinApplyDebuff");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Dryad - Wisp - Dividing Wisp Duration
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDryadWispDividingWispDuration_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("DryadWispUnit", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorSetDurationRemaining(EventUnit(), "DryadWispDividingWispMasteryTimedLife", (UnitBehaviorDuration(UnitGroupLoopCurrent(), "DryadWispTimedLife") - 0.0625));
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDryadWispDividingWispDuration_Init () {
    libGDHL_gt_HeroDryadWispDividingWispDuration = TriggerCreate("libGDHL_gt_HeroDryadWispDividingWispDuration_Func");
    TriggerEnable(libGDHL_gt_HeroDryadWispDividingWispDuration, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroDryadWispDividingWispDuration, null, "DryadWispDividingWispMasteryTimedLife", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Dryad - Dance Cancel Orders
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDryadDanceCancelOrders_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "HeroDryad"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(lv_unit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDryadDanceCancelOrders_Init () {
    libGDHL_gt_HeroDryadDanceCancelOrders = TriggerCreate("libGDHL_gt_HeroDryadDanceCancelOrders_Func");
    TriggerEnable(libGDHL_gt_HeroDryadDanceCancelOrders, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroDryadDanceCancelOrders, null, AbilityCommand("stop", 3), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Dryad - Abolish Magic - Behavior Activate
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDryadAbolishMagicBehaviorActivate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroDryadAbolishMagicIncrementer += 1;
    if (((TriggerIsEnabled(libGDHL_gt_HeroDryadAbolishMagicCCRecognition) == false) && (libGDHL_gv_heroDryadAbolishMagicIncrementer >= 1))) {
        TriggerEnable(libGDHL_gt_HeroDryadAbolishMagicCCRecognition, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDryadAbolishMagicBehaviorActivate_Init () {
    libGDHL_gt_HeroDryadAbolishMagicBehaviorActivate = TriggerCreate("libGDHL_gt_HeroDryadAbolishMagicBehaviorActivate_Func");
    TriggerEnable(libGDHL_gt_HeroDryadAbolishMagicBehaviorActivate, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroDryadAbolishMagicBehaviorActivate, null, "DryadAbolishMagicDummy", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Dryad - Abolish Magic - Behavior Deactivate
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDryadAbolishMagicBehaviorDeactivate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroDryadAbolishMagicIncrementer -= 1;
    if ((libGDHL_gv_heroDryadAbolishMagicIncrementer == 0)) {
        TriggerEnable(libGDHL_gt_HeroDryadAbolishMagicCCRecognition, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDryadAbolishMagicBehaviorDeactivate_Init () {
    libGDHL_gt_HeroDryadAbolishMagicBehaviorDeactivate = TriggerCreate("libGDHL_gt_HeroDryadAbolishMagicBehaviorDeactivate_Func");
    TriggerEnable(libGDHL_gt_HeroDryadAbolishMagicBehaviorDeactivate, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroDryadAbolishMagicBehaviorDeactivate, null, "DryadAbolishMagicDummy", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Dryad - Abolish Magic - CC Recognition
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDryadAbolishMagicCCRecognition_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_behavior;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_behavior = EventUnitBehavior();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_unit, "DryadAbolishMagicDummy") == true))) {
            return false;
        }

        if (!((UnitGetOwner(lv_unit) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(lv_unit) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libGame_gf_CCReductionStunReduceable(lv_behavior) == true) && (libGame_gf_CCReductionSilencedReduceable(lv_behavior) == true) && (lv_behavior != "RehgarEarthbindTotemSlow") && (lv_behavior != "ChromieSlowingSands10Slow") && (lv_behavior != "ChromieSlowingSands20Slow") && (lv_behavior != "ChromieSlowingSands30Slow") && (lv_behavior != "ChromieSlowingSands40Slow") && (lv_behavior != "ChromieSlowingSands50Slow"))) {
        libGame_gf_CCRecognitionCCReduction(lv_unit, lv_behavior);
        if ((UnitBehaviorCount(lv_unit, "HeroGenericHasNoStatusBar") == 0)) {
            libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar(lv_behavior, UnitGetOwner(lv_unit));
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDryadAbolishMagicCCRecognition_Init () {
    libGDHL_gt_HeroDryadAbolishMagicCCRecognition = TriggerCreate("libGDHL_gt_HeroDryadAbolishMagicCCRecognition_Func");
    TriggerEnable(libGDHL_gt_HeroDryadAbolishMagicCCRecognition, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroDryadAbolishMagicCCRecognition, null, c_behaviorCategoryUser5, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroDryadAbolishMagicCCRecognition, null, c_behaviorCategoryUser5, c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroDryadAbolishMagicCCRecognition, null, c_behaviorCategoryStun, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroDryadAbolishMagicCCRecognition, null, c_behaviorCategoryStun, c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroDryadAbolishMagicCCRecognition, null, c_behaviorCategoryUser7, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroDryadAbolishMagicCCRecognition, null, c_behaviorCategoryUser7, c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroDryadAbolishMagicCCRecognition, null, c_behaviorCategorySlow, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroDryadAbolishMagicCCRecognition, null, c_behaviorCategorySlow, c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroDryadAbolishMagicCCRecognition, null, c_behaviorCategoryFear, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroDryadAbolishMagicCCRecognition, null, c_behaviorCategoryFear, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Dryad - Activate Camera Settings
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDryadActivateCameraSettings_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroDryad"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraSetData(PlayerGroupSingle(EventPlayer()), "Dryad");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDryadActivateCameraSettings_Init () {
    libGDHL_gt_HeroDryadActivateCameraSettings = TriggerCreate("libGDHL_gt_HeroDryadActivateCameraSettings_Func");
    TriggerEnable(libGDHL_gt_HeroDryadActivateCameraSettings, false);
    TriggerAddEventUnitSelected(libGDHL_gt_HeroDryadActivateCameraSettings, null, c_playerAny, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Dryad - Deactivate Camera Settings
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDryadDeactivateCameraSettings_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroDryad"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraSetData(PlayerGroupSingle(EventPlayer()), "BlizzardAllStars");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDryadDeactivateCameraSettings_Init () {
    libGDHL_gt_HeroDryadDeactivateCameraSettings = TriggerCreate("libGDHL_gt_HeroDryadDeactivateCameraSettings_Func");
    TriggerEnable(libGDHL_gt_HeroDryadDeactivateCameraSettings, false);
    TriggerAddEventUnitSelected(libGDHL_gt_HeroDryadDeactivateCameraSettings, null, c_playerAny, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Dryad - Activate Camera for Symbiote
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDryadActivateCameraforSymbiote_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGDHL_gf_AbathurSymbioteTarget()) == "HeroDryad"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraSetData(PlayerGroupSingle(libGDHL_gf_AbathurSymbioteAbathurPlayer()), "Dryad");
    while ((UnitIsAlive(libGDHL_gf_AbathurSymbioteUnit()) == true)) {
        Wait(0.0625, c_timeGame);
    }
    CameraSetData(PlayerGroupSingle(libGDHL_gf_AbathurSymbioteAbathurPlayer()), "BlizzardAllStars");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDryadActivateCameraforSymbiote_Init () {
    libGDHL_gt_HeroDryadActivateCameraforSymbiote = TriggerCreate("libGDHL_gt_HeroDryadActivateCameraforSymbiote_Func");
    TriggerEnable(libGDHL_gt_HeroDryadActivateCameraforSymbiote, false);
    libGDHL_gf_AbathurSymbiote(libGDHL_gt_HeroDryadActivateCameraforSymbiote);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Dryad - Loss of Control - Camera
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroDryadLossofControlCamera_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroDryad"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CameraSetData(PlayerGroupSingle(lv_player), "BlizzardAllStars");
    while ((UnitHasBehavior2(EventUnit(), EventUnitBehavior()) == true)) {
        Wait(0.0625, c_timeGame);
    }
    CameraSetData(PlayerGroupSingle(lv_player), "Dryad");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroDryadLossofControlCamera_Init () {
    libGDHL_gt_HeroDryadLossofControlCamera = TriggerCreate("libGDHL_gt_HeroDryadLossofControlCamera_Func");
    TriggerEnable(libGDHL_gt_HeroDryadLossofControlCamera, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroDryadLossofControlCamera, null, "Hooked", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Greymane - Cursed Bullet Damage
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGreymaneCursedBulletDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    fixed lv_targetHealthPercent;
    fixed lv_damageMod;
    int lv_casterOwner;

    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_targetHealthPercent = UnitGetPropertyFixed(lv_target, c_unitPropLifePercent, c_unitPropCurrent);
    lv_damageMod = 0.35;
    lv_casterOwner = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, "GreymaneCursedBulletDamagePercentDamage", "VitalFractionMax[" + IntToString(c_unitVitalLife) + "]", lv_casterOwner, FixedToString(((lv_damageMod * lv_targetHealthPercent) / 100.0), 3));
    UnitCreateEffectUnitWithSource(EventPlayerEffectUsedUnit(c_effectUnitCaster), "GreymaneCursedBulletDamagePercentDamage", lv_target, c_gameCatalogAbil, "GreymaneCursedBullet");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGreymaneCursedBulletDamage_Init () {
    libGDHL_gt_HeroGreymaneCursedBulletDamage = TriggerCreate("libGDHL_gt_HeroGreymaneCursedBulletDamage_Func");
    TriggerEnable(libGDHL_gt_HeroGreymaneCursedBulletDamage, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroGreymaneCursedBulletDamage, c_playerAny, "GreymaneCursedBulletDummyModifyUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Greymane - Go for the Throat Special Death Procs
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGreymaneGofortheThroatSpecialDeathProcs_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_heroGreymane;
    unit lv_killTarget;

    // Variable Initialization
    lv_killTarget = libGame_gf_HeroEntersSpecialDeathStateHero();

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(lv_killTarget, "GreymaneGoForTheThroatDeathResponse") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroGreymane = UnitBehaviorEffectUnit(lv_killTarget, "GreymaneGoForTheThroatDeathResponse", c_effectUnitCaster, 0);
    UnitCreateEffectUnit(lv_heroGreymane, "GreymaneGoForTheThroatKillSet", lv_heroGreymane);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGreymaneGofortheThroatSpecialDeathProcs_Init () {
    libGDHL_gt_HeroGreymaneGofortheThroatSpecialDeathProcs = TriggerCreate("libGDHL_gt_HeroGreymaneGofortheThroatSpecialDeathProcs_Func");
    TriggerEnable(libGDHL_gt_HeroGreymaneGofortheThroatSpecialDeathProcs, false);
    libGame_gf_HeroEntersSpecialDeathState(libGDHL_gt_HeroGreymaneGofortheThroatSpecialDeathProcs);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Greymane - Talent - Wizened Duelist Takedowns
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGreymaneTalentWizenedDuelistTakedowns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_Greymane;

    // Variable Initialization
    lv_player = libGame_gf_HeroParticipatedInTakedownKillingPlayer();
    lv_Greymane = libGame_gv_players[lv_player].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_Greymane) == "HeroGreymane"))) {
            return false;
        }

        if (!((UnitIsAlive(lv_Greymane) == true))) {
            return false;
        }

        if (!((libGame_gv_players[lv_player].lv_isDead == false))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_player, "GreymaneWizenedDuelist") == true))) {
            return false;
        }

        if (!((UnitGetTokenCount(lv_Greymane, CatalogFieldValueGet(c_gameCatalogBehavior, "GreymaneWizenedDuelistQuestToken", "TokenId", c_playerAny)) < CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "GreymaneWizenedDuelistQuestToken", "Max", c_playerAny)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_Greymane, "GreymaneWizenedDuelistIncrementQuest", lv_Greymane);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGreymaneTalentWizenedDuelistTakedowns_Init () {
    libGDHL_gt_HeroGreymaneTalentWizenedDuelistTakedowns = TriggerCreate("libGDHL_gt_HeroGreymaneTalentWizenedDuelistTakedowns_Func");
    TriggerEnable(libGDHL_gt_HeroGreymaneTalentWizenedDuelistTakedowns, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroGreymaneTalentWizenedDuelistTakedowns);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Greymane - Actor Sound Swaps
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroGreymaneActorSoundSwaps_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_greymane;
    int lv_greymanePlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_greymane = EventUnit();
    lv_greymanePlayer = UnitGetOwner(lv_greymane);
    libGame_gv_players[lv_greymanePlayer].lv_vOPissedSoundIndex = 0;
    if ((UnitHasBehavior2(lv_greymane, "GreymaneWorgenForm") == true)) {
        if ((UnitHasBehavior2(lv_greymane, "UltimateEvolutionBuff") == true)) {
            libNtve_gf_SendActorMessageToUnit(lv_greymane, "SetSoundSuffix _Evo_W");
        }

        if ((libGame_gv_players[lv_greymanePlayer].lv_heroUnit == lv_greymane)) {
            libGame_gv_players[lv_greymanePlayer].lv_vOSoundSuffix = "_W";
        }

    }
    else {
        if ((UnitHasBehavior2(lv_greymane, "UltimateEvolutionBuff") == true)) {
            libNtve_gf_SendActorMessageToUnit(lv_greymane, "SetSoundSuffix _Evo");
        }

        if ((libGame_gv_players[lv_greymanePlayer].lv_heroUnit == lv_greymane)) {
            libGame_gv_players[lv_greymanePlayer].lv_vOSoundSuffix = "";
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroGreymaneActorSoundSwaps_Init () {
    libGDHL_gt_HeroGreymaneActorSoundSwaps = TriggerCreate("libGDHL_gt_HeroGreymaneActorSoundSwaps_Func");
    TriggerEnable(libGDHL_gt_HeroGreymaneActorSoundSwaps, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroGreymaneActorSoundSwaps, null, "GreymaneWorgenForm", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroGreymaneActorSoundSwaps, null, "GreymaneWorgenForm", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Faerie Dragon - Phase Shift - Camera
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroFaerieDragonPhaseShiftCamera_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    libGame_gv_players[lv_player].lv_cameraCameraLockInterrupt = true;
    libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_player, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 0.0, -1, 10.0, false);
    libGame_gv_players[lv_player].lv_cameraCameraLockInterrupt = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroFaerieDragonPhaseShiftCamera_Init () {
    libGDHL_gt_HeroFaerieDragonPhaseShiftCamera = TriggerCreate("libGDHL_gt_HeroFaerieDragonPhaseShiftCamera_Func");
    TriggerEnable(libGDHL_gt_HeroFaerieDragonPhaseShiftCamera, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroFaerieDragonPhaseShiftCamera, c_playerAny, "BrightwingPhaseShiftFlightTeleport");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Faerie Dragon - Pixie Charm Charge Count Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroFaerieDragonPixieCharmChargeCountProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAddChargeUsed(lv_caster, "Abil/FaerieDragonPixieCharm", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroFaerieDragonPixieCharmChargeCountProc_Init () {
    libGDHL_gt_HeroFaerieDragonPixieCharmChargeCountProc = TriggerCreate("libGDHL_gt_HeroFaerieDragonPixieCharmChargeCountProc_Func");
    TriggerEnable(libGDHL_gt_HeroFaerieDragonPixieCharmChargeCountProc, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroFaerieDragonPixieCharmChargeCountProc, c_playerAny, "FaerieDragonPixieCharmIncreaseChargeCountDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Falstad - Wingman Variables
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroFalstadWingmanVariables_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((lv_player >= 1))) {
            return false;
        }

        if (!((lv_player <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_players[lv_player].lv_bribeTokenLink = "FalstadWingmanTokenCounter";
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroFalstadWingmanVariables_Init () {
    libGDHL_gt_HeroFalstadWingmanVariables = TriggerCreate("libGDHL_gt_HeroFalstadWingmanVariables_Func");
    TriggerEnable(libGDHL_gt_HeroFalstadWingmanVariables, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroFalstadWingmanVariables, null, "FalstadWingmanTokenCounter", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Falstad - Thunderstorm Refresh
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroFalstadThunderstormRefresh_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogBehavior, "ThunderstormPeriodicController", "Period", lv_player, CatalogFieldValueGet(c_gameCatalogAbil, "FalstadThunderstormPassive", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lv_player));
    UnitBehaviorRemove(lv_unit, "ThunderstormPeriodicController", 1);
    UnitBehaviorAdd(lv_unit, "ThunderstormPeriodicController", lv_unit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroFalstadThunderstormRefresh_Init () {
    libGDHL_gt_HeroFalstadThunderstormRefresh = TriggerCreate("libGDHL_gt_HeroFalstadThunderstormRefresh_Func");
    TriggerEnable(libGDHL_gt_HeroFalstadThunderstormRefresh, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroFalstadThunderstormRefresh, null, "ThunderstormReadyBuff", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Falstad - Flight Camera Height Restore
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroFalstadFlightCameraHeightRestore_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    CameraUseHeightDisplacement(lv_player, true);
    while ((UnitHasBehavior2(lv_unit, "FalstadFlightAscend") == true)) {
        Wait(0.0625, c_timeGame);
    }
    CameraUseHeightDisplacement(lv_player, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroFalstadFlightCameraHeightRestore_Init () {
    libGDHL_gt_HeroFalstadFlightCameraHeightRestore = TriggerCreate("libGDHL_gt_HeroFalstadFlightCameraHeightRestore_Func");
    TriggerEnable(libGDHL_gt_HeroFalstadFlightCameraHeightRestore, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroFalstadFlightCameraHeightRestore, null, "FalstadFlightAscend", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Illidan - Apply FotB Cooldown on Inventory Use
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroIllidanApplyFotBCooldownonInventoryUse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    abilcmd lv_abilityCommand;
    unit lv_unit;
    string lv_heroType;

    // Variable Initialization
    lv_abilityCommand = EventUnitAbility();
    lv_unit = EventUnit();
    lv_heroType = UnitGetType(lv_unit);

    // Conditions
    if (testConds) {
        if (!(((UnitHasBehavior2(lv_unit, "FlightoftheBetrayer") == true) || (UnitHasBehavior2(lv_unit, "FlightoftheBetrayerCooldown") == true)))) {
            return false;
        }

        if (!((AbilityClass(AbilityCommandGetAbility(lv_abilityCommand)) == c_classIdCAbilInventory))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_unit, "FlightoftheBetrayerCooldown", lv_unit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroIllidanApplyFotBCooldownonInventoryUse_Init () {
    libGDHL_gt_HeroIllidanApplyFotBCooldownonInventoryUse = TriggerCreate("libGDHL_gt_HeroIllidanApplyFotBCooldownonInventoryUse_Func");
    TriggerEnable(libGDHL_gt_HeroIllidanApplyFotBCooldownonInventoryUse, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroIllidanApplyFotBCooldownonInventoryUse, null, null, c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Illidan - Metamorphosis Avatar Apply Health Buff
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroIllidanMetamorphosisAvatarApplyHealthBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_targetCount;

    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetCount = UnitBehaviorCount(lv_unit, "IllidanMetamorphosisBonusHealthDummyCount");
    CatalogFieldValueSet(c_gameCatalogBehavior, "IllidanMetamorphosisDoubleDummyHealth", "Modification.VitalMaxArray[" + IntToString(0) + "]", UnitGetOwner(lv_unit), FixedToString((StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "IllidanMetamorphosisBonusHealthScaler", "Modification.VitalMaxArray[" + IntToString(0) + "]", UnitGetOwner(lv_unit))) * lv_targetCount), c_fixedPrecisionAny));
    UnitCreateEffectUnit(lv_unit, "NewMetamorphosisApplyRealHealthBehavior", lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroIllidanMetamorphosisAvatarApplyHealthBuff_Init () {
    libGDHL_gt_HeroIllidanMetamorphosisAvatarApplyHealthBuff = TriggerCreate("libGDHL_gt_HeroIllidanMetamorphosisAvatarApplyHealthBuff_Func");
    TriggerEnable(libGDHL_gt_HeroIllidanMetamorphosisAvatarApplyHealthBuff, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroIllidanMetamorphosisAvatarApplyHealthBuff, null, "IllidanMetamorphosisBonusHealthDummyCount", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Illidan - The Hunt - Target Distance Check
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroIllidanTheHuntTargetDistanceCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_targetHasRevealerBehavior;
    unit lv_illidanUnit;
    unit lv_targetUnit;
    point lv_currentPositionOfTarget;
    point lv_lastPositionOfTarget;

    // Variable Initialization
    lv_targetHasRevealerBehavior = true;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetUnit = EventUnitTargetUnit();
    lv_illidanUnit = EventUnit();
    lv_currentPositionOfTarget = UnitGetPosition(lv_targetUnit);
    lv_lastPositionOfTarget = UnitGetPosition(lv_targetUnit);
    while ((UnitHasBehavior2(lv_illidanUnit, "IllidanTheHuntCCInterruption") == true)) {
        Wait(0.0625, c_timeGame);
    }
    while ((UnitHasBehavior2(lv_illidanUnit, "IllidanTheHuntMissile") == true) && (UnitIsAlive(lv_illidanUnit) == true)) {
        lv_currentPositionOfTarget = UnitGetPosition(lv_targetUnit);
        if (((UnitIsAlive(lv_targetUnit) == false) || ((DistanceBetweenPoints(lv_currentPositionOfTarget, lv_lastPositionOfTarget) > libGDHL_gv_newIllidanHuntRedirectDistanceThreshold) && (UnitIsAlive(lv_targetUnit) == true)) || ((UnitHasBehavior2(lv_targetUnit, "FalstadFlightAscend") == true) && (UnitIsAlive(lv_targetUnit) == true)))) {
            if ((lv_targetHasRevealerBehavior == true)) {
                UnitBehaviorRemove(lv_targetUnit, "IllidanTheHuntTargetRevealer", 1);
                lv_targetHasRevealerBehavior = false;
            }

            UnitCreateEffectPoint(lv_illidanUnit, "IllidanTheHuntRedirectMissile", lv_lastPositionOfTarget);
        }
        else {
            lv_lastPositionOfTarget = lv_currentPositionOfTarget;
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroIllidanTheHuntTargetDistanceCheck_Init () {
    libGDHL_gt_HeroIllidanTheHuntTargetDistanceCheck = TriggerCreate("libGDHL_gt_HeroIllidanTheHuntTargetDistanceCheck_Func");
    TriggerEnable(libGDHL_gt_HeroIllidanTheHuntTargetDistanceCheck, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroIllidanTheHuntTargetDistanceCheck, null, AbilityCommand("IllidanTheHunt", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Illidan - The Hunt Nowhere To Hide Talent Activate
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroIllidanTheHuntNowhereToHideTalentActivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_illidan;

    // Variable Initialization
    lv_illidan = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(lv_illidan) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(lv_illidan) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libGame_gv_gameOver == false)) {
        PlayerGroupLoopBegin(libGame_gf_EnemyPlayerGroupOfPlayer(UnitGetOwner(lv_illidan)));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            UnitGroupLoopBegin(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnitGroup);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitCreateEffectUnit(lv_illidan, "IllidanTheHuntApplyNowhereToHideTalentReveal", UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
        }
        PlayerGroupLoopEnd();
        Wait(0.125, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroIllidanTheHuntNowhereToHideTalentActivate_Init () {
    libGDHL_gt_HeroIllidanTheHuntNowhereToHideTalentActivate = TriggerCreate("libGDHL_gt_HeroIllidanTheHuntNowhereToHideTalentActivate_Func");
    TriggerEnable(libGDHL_gt_HeroIllidanTheHuntNowhereToHideTalentActivate, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroIllidanTheHuntNowhereToHideTalentActivate, null, "IllidanNowhereToHideCarry", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Illidan - Blades Of Azzinoth Add Charge
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroIllidanBladesOfAzzinothAddCharge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(lv_unit) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(lv_unit) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_player, "IllidanBladesOfAzzinoth") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAddChargeUsed(lv_unit, "Abil/IllidanBladesOfAzzinoth", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroIllidanBladesOfAzzinothAddCharge_Init () {
    libGDHL_gt_HeroIllidanBladesOfAzzinothAddCharge = TriggerCreate("libGDHL_gt_HeroIllidanBladesOfAzzinothAddCharge_Func");
    TriggerEnable(libGDHL_gt_HeroIllidanBladesOfAzzinothAddCharge, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroIllidanBladesOfAzzinothAddCharge, c_playerAny, "IllidanBladesOfAzzinothDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Illidan - Metamorphasis Activate
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroIllidanMetamorphasisActivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gv_aIHeroes[lv_player].lv_mountAbility = AbilityCommand("IllidanMetamorphosisMountCustom", 0);
    libAIAI_gv_aIHeroes[lv_player].lv_dismountAbility = AbilityCommand("IllidanMetamorphosisDismountCustom", 0);
    libAIAI_gv_aIHeroes[lv_player].lv_mountBehavior = "FlightoftheBetrayer";
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroIllidanMetamorphasisActivate_Init () {
    libGDHL_gt_HeroIllidanMetamorphasisActivate = TriggerCreate("libGDHL_gt_HeroIllidanMetamorphasisActivate_Func");
    TriggerEnable(libGDHL_gt_HeroIllidanMetamorphasisActivate, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroIllidanMetamorphasisActivate, null, "IllidanMetamorphosis", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Illidan - Metamorphasis Deactivate
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroIllidanMetamorphasisDeactivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gv_aIHeroes[lv_player].lv_mountAbility = AbilityCommand("Mount", 0);
    libAIAI_gv_aIHeroes[lv_player].lv_dismountAbility = AbilityCommand("Dismount", 0);
    libAIAI_gv_aIHeroes[lv_player].lv_mountBehavior = "Mounted";
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroIllidanMetamorphasisDeactivate_Init () {
    libGDHL_gt_HeroIllidanMetamorphasisDeactivate = TriggerCreate("libGDHL_gt_HeroIllidanMetamorphasisDeactivate_Func");
    TriggerEnable(libGDHL_gt_HeroIllidanMetamorphasisDeactivate, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroIllidanMetamorphasisDeactivate, null, "IllidanMetamorphosis", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Illidan - Unending Hatred - Hero Takedown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroIllidanUnendingHatredHeroTakedown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_localPlayer;
    unit lv_illidan;

    // Variable Initialization
    lv_localPlayer = libGame_gf_HeroParticipatedInTakedownKillingPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_localPlayer, "IllidanUnendingHatredPassive") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_illidan = libGame_gv_players[lv_localPlayer].lv_heroUnit;
    UnitCreateEffectUnit(lv_illidan, "IllidanUnendingHatredHeroKillIncreaseQuestToken", lv_illidan);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroIllidanUnendingHatredHeroTakedown_Init () {
    libGDHL_gt_HeroIllidanUnendingHatredHeroTakedown = TriggerCreate("libGDHL_gt_HeroIllidanUnendingHatredHeroTakedown_Func");
    TriggerEnable(libGDHL_gt_HeroIllidanUnendingHatredHeroTakedown, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroIllidanUnendingHatredHeroTakedown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Illidan - Unending Hatred - NPC Kill
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroIllidanUnendingHatredNPCKill_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingPlayer;
    unit lv_killingHero;
    unit lv_minion;

    // Variable Initialization
    lv_killingPlayer = libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer();
    lv_killingHero = libGame_gv_players[lv_killingPlayer].lv_heroUnit;
    lv_minion = libGame_gf_HeroParticipatedInNPCTakedownMinion();

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_killingPlayer, "IllidanUnendingHatredPassive") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitTypeTestAttribute(UnitGetType(lv_minion), c_unitAttributeSummoned) == true) || (UnitTypeTestAttribute(UnitGetType(lv_minion), c_unitAttributeUser1) == true) || (UnitTypeTestAttribute(UnitGetType(lv_minion), c_unitAttributeMapBoss) == true))) {
        return true;
    }

    if ((UnitTypeTestAttribute(UnitGetType(lv_minion), c_unitAttributeBiological) == true) && (UnitFilterMatch(lv_minion, lv_killingPlayer, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterRobotic), 0)) == true)) {
        UnitCreateEffectUnit(lv_killingHero, "IllidanUnendingHatredMinionKillIncreaseQuestToken", lv_killingHero);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroIllidanUnendingHatredNPCKill_Init () {
    libGDHL_gt_HeroIllidanUnendingHatredNPCKill = TriggerCreate("libGDHL_gt_HeroIllidanUnendingHatredNPCKill_Func");
    TriggerEnable(libGDHL_gt_HeroIllidanUnendingHatredNPCKill, false);
    libGame_gf_HeroParticipatedInNPCTakedown(libGDHL_gt_HeroIllidanUnendingHatredNPCKill);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Jaina - Water Elemental Created
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroJainaWaterElementalCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_waterElementalUnit;
    unit lv_jainaUnit;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());
    lv_waterElementalUnit = EventUnitCreatedUnit();
    lv_jainaUnit = libGame_gv_players[lv_player].lv_heroUnit;

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroJainaWaterElemental[lv_player] = lv_waterElementalUnit;
    UnitGroupAdd(libGame_gv_players[lv_player].lv_summonedUnitGroup, lv_waterElementalUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroJainaWaterElementalCreated_Init () {
    libGDHL_gt_HeroJainaWaterElementalCreated = TriggerCreate("libGDHL_gt_HeroJainaWaterElementalCreated_Func");
    TriggerEnable(libGDHL_gt_HeroJainaWaterElementalCreated, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroJainaWaterElementalCreated, null, "JainaSummonWaterElemental", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Jaina - Water Elemental Command
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroJainaWaterElementalCommand_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    point lv_p;
    unit lv_u;
    unit lv_waterElemental;

    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waterElemental = libGDHL_gv_heroJainaWaterElemental[EventPlayer()];
    if ((lv_target == null)) {
        UnitBehaviorAdd(lv_waterElemental, "JainaWaterElementalAIAttackOverride", lv_waterElemental, 1);
        UnitIssueOrder(lv_waterElemental, OrderTargetingPoint(AbilityCommand("move", 0), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueReplace);
    }
    else {
        UnitBehaviorAdd(lv_waterElemental, "JainaWaterElementalAIAttackOverride", lv_waterElemental, 1);
        UnitIssueOrder(lv_waterElemental, OrderTargetingUnit(AbilityCommand("attack", 0), lv_target), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroJainaWaterElementalCommand_Init () {
    libGDHL_gt_HeroJainaWaterElementalCommand = TriggerCreate("libGDHL_gt_HeroJainaWaterElementalCommand_Func");
    TriggerEnable(libGDHL_gt_HeroJainaWaterElementalCommand, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroJainaWaterElementalCommand, c_playerAny, "JainaCommandWaterElementalCreatePersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Jaina - Frostbolt Wintermute Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroJainaFrostboltWintermuteCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_jainaPlayer;
    unit lv_waterElemental;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_jainaPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(lv_unit, "JainaWintermuteCarryBehavior") == 1))) {
            return false;
        }

        if (!(((lv_jainaPlayer <= libCore_gv_bALMaxPlayers) && (lv_jainaPlayer > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waterElemental = libGDHL_gv_heroJainaWaterElemental[lv_jainaPlayer];
    if ((lv_waterElemental != null) && (UnitBehaviorCount(lv_waterElemental, "JainaWaterElementalStatusAvailable") == 1)) {
        UnitBehaviorAdd(lv_waterElemental, "JainaWaterElementalAIAbilityOverride", lv_unit, 1);
        UnitIssueOrder(lv_waterElemental, OrderTargetingPoint(AbilityCommand("JainaWaterElementalFrostbolt", 0), EventUnitTargetPoint()), c_orderQueueAddToFront);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroJainaFrostboltWintermuteCast_Init () {
    libGDHL_gt_HeroJainaFrostboltWintermuteCast = TriggerCreate("libGDHL_gt_HeroJainaFrostboltWintermuteCast_Func");
    TriggerEnable(libGDHL_gt_HeroJainaFrostboltWintermuteCast, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroJainaFrostboltWintermuteCast, null, AbilityCommand("JainaFrostbolt", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Jaina - Cone of Cold Wintermute Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroJainaConeofColdWintermuteCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_jainaPlayer;
    unit lv_waterElemental;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_jainaPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(lv_unit, "JainaWintermuteCarryBehavior") == 1))) {
            return false;
        }

        if (!(((lv_jainaPlayer <= libCore_gv_bALMaxPlayers) && (lv_jainaPlayer > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waterElemental = libGDHL_gv_heroJainaWaterElemental[lv_jainaPlayer];
    if ((lv_waterElemental != null) && (UnitBehaviorCount(lv_waterElemental, "JainaWaterElementalStatusAvailable") == 1)) {
        UnitBehaviorAdd(lv_waterElemental, "JainaWaterElementalAIAbilityOverride", lv_unit, 1);
        UnitIssueOrder(lv_waterElemental, OrderTargetingPoint(AbilityCommand("JainaWaterElementalConeOfCold", 0), EventUnitTargetPoint()), c_orderQueueAddToFront);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroJainaConeofColdWintermuteCast_Init () {
    libGDHL_gt_HeroJainaConeofColdWintermuteCast = TriggerCreate("libGDHL_gt_HeroJainaConeofColdWintermuteCast_Func");
    TriggerEnable(libGDHL_gt_HeroJainaConeofColdWintermuteCast, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroJainaConeofColdWintermuteCast, null, AbilityCommand("JainaConeOfCold", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Jaina - Blizzard Wintermute Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroJainaBlizzardWintermuteCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_jainaPlayer;
    unit lv_waterElemental;

    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_jainaPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(lv_unit, "JainaWintermuteCarryBehavior") == 1))) {
            return false;
        }

        if (!(((lv_jainaPlayer <= libCore_gv_bALMaxPlayers) && (lv_jainaPlayer > 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_waterElemental = libGDHL_gv_heroJainaWaterElemental[lv_jainaPlayer];
    if ((lv_waterElemental != null) && (UnitBehaviorCount(lv_waterElemental, "JainaWaterElementalStatusAvailable") == 1)) {
        UnitBehaviorAdd(lv_waterElemental, "JainaWaterElementalAIAbilityOverride", lv_unit, 1);
        UnitIssueOrder(lv_waterElemental, OrderTargetingPoint(AbilityCommand("JainaWaterElementalBlizzard", 0), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueAddToFront);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroJainaBlizzardWintermuteCast_Init () {
    libGDHL_gt_HeroJainaBlizzardWintermuteCast = TriggerCreate("libGDHL_gt_HeroJainaBlizzardWintermuteCast_Func");
    TriggerEnable(libGDHL_gt_HeroJainaBlizzardWintermuteCast, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroJainaBlizzardWintermuteCast, c_playerAny, "JainaWaterElementalBlizzardDummyPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Jaina - Water Elemental - Vehicle Initial
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroJainaWaterElementalVehicleInitial_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_triggeringPlayer;
    unit lv_witchDoctor;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_triggeringPlayer = UnitGetOwner(lv_unit);
    lv_witchDoctor = libGame_gv_players[lv_triggeringPlayer].lv_heroUnit;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(lv_unit, "JainaWaterElementalCasterBehavior") == 1)) {
        libGDHL_gf_HeroJainaWaterElementalVehicleControl(lv_witchDoctor, lv_triggeringPlayer);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroJainaWaterElementalVehicleInitial_Init () {
    libGDHL_gt_HeroJainaWaterElementalVehicleInitial = TriggerCreate("libGDHL_gt_HeroJainaWaterElementalVehicleInitial_Func");
    TriggerEnable(libGDHL_gt_HeroJainaWaterElementalVehicleInitial, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroJainaWaterElementalVehicleInitial, null, "UsingVehicle", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Jaina- Ice Barrier - Add Shields
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroJainaIceBarrierAddShields_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_jaina;
    int lv_owner;
    fixed lv_maxShields;
    fixed lv_damageValue;
    fixed lv_shieldsToAdd;
    fixed lv_currentShields;

    // Variable Initialization
    lv_jaina = EventUnitDamageSourceUnit();
    lv_owner = UnitGetOwner(lv_jaina);

    // Conditions
    if (testConds) {
        if (!((EventUnit() != null))) {
            return false;
        }

        if (!(((UnitGetType(lv_jaina) == "HeroJaina") || (UnitGetType(lv_jaina) == "JainaWaterElemental")))) {
            return false;
        }

        if (!((UnitBehaviorCount(libGame_gv_players[lv_owner].lv_heroUnit, "JainaFrostbiteIceBarrierCarryBehavior") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damageValue = EventUnitDamageAttempted();
    if (((UnitHasBehavior2(lv_jaina, "JainaFrostbiteIceBarrierShield") == true) || (UnitGetType(lv_jaina) == "JainaWaterElemental"))) {
        lv_currentShields = UnitBehaviorDamageModifyRemaining(libGame_gv_players[lv_owner].lv_heroUnit, "JainaFrostbiteIceBarrierShield");
    }
    else {
        lv_currentShields = 0.0;
    }
    lv_shieldsToAdd = (lv_damageValue * libGDHL_gv_bALHeroJainaIceBarrierDamageModifier);
    lv_shieldsToAdd = (lv_shieldsToAdd + lv_currentShields);
    CatalogFieldValueSet(c_gameCatalogBehavior, "JainaFrostbiteIceBarrierShield", "DamageResponse.ModifyLimit", lv_owner, FixedToString(lv_shieldsToAdd, 2));
    UnitBehaviorAdd(libGame_gv_players[lv_owner].lv_heroUnit, "JainaFrostbiteIceBarrierShield", libGame_gv_players[lv_owner].lv_heroUnit, 1);
    UnitCreateEffectUnit(libGame_gv_players[lv_owner].lv_heroUnit, "JainaIceBarrierDummy", libGame_gv_players[lv_owner].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroJainaIceBarrierAddShields_Init () {
    libGDHL_gt_HeroJainaIceBarrierAddShields = TriggerCreate("libGDHL_gt_HeroJainaIceBarrierAddShields_Func");
    TriggerEnable(libGDHL_gt_HeroJainaIceBarrierAddShields, false);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroJainaIceBarrierAddShields, null, c_unitDamageTypeAbility, c_unitDamageEither, "JainaFrostboltDamageChilled");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroJainaIceBarrierAddShields, null, c_unitDamageTypeAbility, c_unitDamageEither, "JainaFrostboltDamageFrostbitten");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroJainaIceBarrierAddShields, null, c_unitDamageTypeAbility, c_unitDamageEither, "JainaConeOfColdDamageChilled");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroJainaIceBarrierAddShields, null, c_unitDamageTypeAbility, c_unitDamageEither, "JainaConeOfColdDamageFrostbitten");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroJainaIceBarrierAddShields, null, c_unitDamageTypeAbility, c_unitDamageEither, "JainaRingOfFrostImpactDamageChilled");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroJainaIceBarrierAddShields, null, c_unitDamageTypeAbility, c_unitDamageEither, "JainaRingOfFrostImpactDamageFrostbitten");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroJainaIceBarrierAddShields, null, c_unitDamageTypeAbility, c_unitDamageEither, "JainaBlizzardDamageChilled");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroJainaIceBarrierAddShields, null, c_unitDamageTypeAbility, c_unitDamageEither, "JainaBlizzardDamageFrostbitten");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroJainaIceBarrierAddShields, null, c_unitDamageTypeAbility, c_unitDamageEither, "JainaWaterElementalCastDamageChilled");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroJainaIceBarrierAddShields, null, c_unitDamageTypeAbility, c_unitDamageEither, "JainaWaterElementalCastDamageFrostbitten");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroJainaIceBarrierAddShields, null, c_unitDamageTypeAbility, c_unitDamageEither, "JainaWaterElementalBlizzardDamageChilled");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroJainaIceBarrierAddShields, null, c_unitDamageTypeAbility, c_unitDamageEither, "JainaWaterElementalConeOfColdDamageChilled");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroJainaIceBarrierAddShields, null, c_unitDamageTypeAbility, c_unitDamageEither, "JainaWaterElementalFrostboltDamageChilled");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Jaina - Improved Ice Block Overlay On
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroJainaImprovedIceBlockOverlayOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(lv_unit) == true) && (UnitTestState(lv_unit, c_unitStateHallucination) == false) && (UnitHasBehavior2(lv_unit, "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(EventPlayer(), libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI_StasisOverlay.StormCutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroJainaImprovedIceBlockOverlayOn_Init () {
    libGDHL_gt_HeroJainaImprovedIceBlockOverlayOn = TriggerCreate("libGDHL_gt_HeroJainaImprovedIceBlockOverlayOn_Func");
    TriggerEnable(libGDHL_gt_HeroJainaImprovedIceBlockOverlayOn, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroJainaImprovedIceBlockOverlayOn, null, "JainaImprovedIceBlock", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Jaina - Improved Ice Block Overlay Off
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroJainaImprovedIceBlockOverlayOff_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(EventPlayer(), "Cutscenes\\GameUI_StasisOverlay.StormCutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroJainaImprovedIceBlockOverlayOff_Init () {
    libGDHL_gt_HeroJainaImprovedIceBlockOverlayOff = TriggerCreate("libGDHL_gt_HeroJainaImprovedIceBlockOverlayOff_Func");
    TriggerEnable(libGDHL_gt_HeroJainaImprovedIceBlockOverlayOff, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroJainaImprovedIceBlockOverlayOff, null, "JainaImprovedIceBlock", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kael'thas Phoenix Spawn Selection
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKaelthasPhoenixSpawnSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnitCreatedUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_player, "KaelthasPhoenixRebirth") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSelect(lv_unit, lv_player, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKaelthasPhoenixSpawnSelection_Init () {
    libGDHL_gt_HeroKaelthasPhoenixSpawnSelection = TriggerCreate("libGDHL_gt_HeroKaelthasPhoenixSpawnSelection_Func");
    TriggerEnable(libGDHL_gt_HeroKaelthasPhoenixSpawnSelection, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroKaelthasPhoenixSpawnSelection, null, "KaelthasPhoenix", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kael'thas - Twin Spheres Talent Pick Cooldown Reset
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKaelthasTwinSpheresTalentPickCooldownReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;

    // Variable Initialization
    lv_player = libGame_gf_HeroGainTalentPlayer();
    lv_unit = libGame_gv_players[lv_player].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "HeroKaelthas"))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_player, "KaelthasTwinSpheres") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(libGame_gv_players[lv_player].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "HeroKaelthas")) {
            UnitModifyCooldown(UnitGroupLoopCurrent(), "Abil/KaelthasVerdantSpheres", 0.0, c_cooldownOperationSet);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKaelthasTwinSpheresTalentPickCooldownReset_Init () {
    libGDHL_gt_HeroKaelthasTwinSpheresTalentPickCooldownReset = TriggerCreate("libGDHL_gt_HeroKaelthasTwinSpheresTalentPickCooldownReset_Func");
    TriggerEnable(libGDHL_gt_HeroKaelthasTwinSpheresTalentPickCooldownReset, false);
    libGame_gf_HeroGainTalent(libGDHL_gt_HeroKaelthasTwinSpheresTalentPickCooldownReset);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kael'thas - Pyroblast Missile Created
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKaelthasPyroblastMissileCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnitCreatedUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((lv_player >= 1))) {
            return false;
        }

        if (!((lv_player <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitGetType(lv_unit) == "KaelthasPyroblastMissile"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroKaelthasPyroblastMissileUnit[lv_player] = lv_unit;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKaelthasPyroblastMissileCreated_Init () {
    libGDHL_gt_HeroKaelthasPyroblastMissileCreated = TriggerCreate("libGDHL_gt_HeroKaelthasPyroblastMissileCreated_Func");
    TriggerEnable(libGDHL_gt_HeroKaelthasPyroblastMissileCreated, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroKaelthasPyroblastMissileCreated, null, "KaelthasPyroblast", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kael'thas - Pryoblast Missile Teleport Validation
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKaelthasPryoblastMissileTeleportValidation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_mostRecentLocation;
    unit lv_monitoredUnit;
    fixed lv_teleportDistanceThreshold;

    // Variable Initialization
    lv_teleportDistanceThreshold = 25.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_monitoredUnit = EventUnit();
    lv_mostRecentLocation = UnitGetPosition(lv_monitoredUnit);
    while ((UnitIsAlive(lv_monitoredUnit) == true) && (UnitHasBehavior2(lv_monitoredUnit, "KaelthasPyroblastMissileReveal") == true)) {
        if ((DistanceBetweenPoints(UnitGetPosition(lv_monitoredUnit), lv_mostRecentLocation) > lv_teleportDistanceThreshold)) {
            UnitCreateEffectPoint(libGDHL_gv_heroKaelthasPyroblastMissileUnit[UnitBehaviorEffectPlayer(lv_monitoredUnit, "KaelthasPyroblastMissileReveal", c_effectPlayerSource, 0)], "KaelthasPyroblastRedirectMissile", lv_mostRecentLocation);
            UnitBehaviorRemove(lv_monitoredUnit, "KaelthasPyroblastMissileReveal", 1);
        }

        lv_mostRecentLocation = UnitGetPosition(lv_monitoredUnit);
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKaelthasPryoblastMissileTeleportValidation_Init () {
    libGDHL_gt_HeroKaelthasPryoblastMissileTeleportValidation = TriggerCreate("libGDHL_gt_HeroKaelthasPryoblastMissileTeleportValidation_Func");
    TriggerEnable(libGDHL_gt_HeroKaelthasPryoblastMissileTeleportValidation, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroKaelthasPryoblastMissileTeleportValidation, null, "KaelthasPyroblastMissileReveal", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Assimilation Passive - Add Shields
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganAssimilationPassiveAddShields_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_effect;
    unit lv_unit;
    int lv_owner;
    unit lv_kerriganUnit;
    fixed lv_maxShields;
    fixed lv_damageValue;
    fixed lv_shieldsToAdd;
    fixed lv_targetTypeModifier;
    fixed lv_currentShields;
    fixed lv_vertOffset;
    fixed lv_horizOffset;

    // Variable Initialization
    lv_effect = EventUnitDamageEffect();
    lv_unit = EventUnitDamageSourceUnit();
    lv_owner = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(lv_unit) == "HeroKerrigan") || (UnitGetType(lv_unit) == "KerriganUltralisk") || (UnitGetType(lv_unit) == "ImpalingBladesZergling")))) {
            return false;
        }

        if (!((UnitBehaviorCount(lv_unit, "DestructibleBehavior") == 0))) {
            return false;
        }

        if (!((UnitBehaviorCount(lv_unit, "HasDamageClampBehavior") == 0))) {
            return false;
        }

        if (!(((UnitBehaviorCount(libGame_gv_players[lv_owner].lv_heroUnit, "KerriganAssimilation") == 1) || ((UnitBehaviorCount(lv_unit, "AbathurUltimateEvolutionControlBehavior") == 1) && (UnitGetType(lv_unit) == "HeroKerrigan"))))) {
            return false;
        }

        if (!((UnitIsAlive(libGame_gv_players[lv_owner].lv_heroUnit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(libGame_gv_players[lv_owner].lv_heroUnit, "KerriganAssimilation") == 1)) {
        lv_kerriganUnit = libGame_gv_players[lv_owner].lv_heroUnit;
    }
    else {
        lv_kerriganUnit = libGame_gv_players[lv_owner].lv_activeVehicle;
    }
    lv_maxShields = StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "AssimilationDummyValue", "Amount", UnitGetOwner(lv_kerriganUnit)));
    lv_damageValue = EventUnitDamageAttempted();
    if (((UnitHasBehavior2(lv_unit, "KerriganAssimilationShield") == true) || (lv_effect == "ImpalingBladesZerglingWeaponDamage") || (lv_effect == "UltraliskWeaponDamage"))) {
        lv_currentShields = UnitBehaviorDamageModifyRemaining(lv_kerriganUnit, "KerriganAssimilationShield");
    }
    else {
        lv_currentShields = 0.0;
    }
    if ((lv_effect == "KerriganEssenceForEssenceDamage")) {
        lv_shieldsToAdd = (libGDHL_gv_bALHeroKerriganAssimilationEssenceForEssenceModifier * lv_damageValue);
    }
    else {
        if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true)) {
            lv_targetTypeModifier = libGDHL_gv_bALHeroKerriganAssimilationHeroicModifier;
        }
        else {
            lv_targetTypeModifier = libGDHL_gv_bALHeroKerriganAssimilationBaseModifier;
        }
        if ((lv_effect == "MaelstromDamage") && (PlayerHasTalent(UnitGetOwner(lv_kerriganUnit), "KerriganMasteryMaelstromOmegastorm") == true)) {
            lv_shieldsToAdd += (lv_targetTypeModifier * lv_damageValue);
        }

        if ((PlayerHasTalent(UnitGetOwner(lv_kerriganUnit), "KerriganMasteryAggressiveDefense") == true)) {
            lv_targetTypeModifier *= libGDHL_gv_bALHeroKerriganAssimilationAggressiveDefenseMasteryModifier;
        }

        lv_shieldsToAdd += (lv_targetTypeModifier * lv_damageValue);
    }
    if ((lv_currentShields < lv_maxShields)) {
        lv_currentShields += lv_shieldsToAdd;
        if ((lv_currentShields > lv_maxShields)) {
            lv_currentShields = lv_maxShields;
        }

        if ((lv_currentShields < 1)) {
            CatalogFieldValueSet(c_gameCatalogBehavior, "KerriganAssimilationShield", "DamageResponse.ModifyLimit", lv_owner, FixedToString((lv_currentShields + 1.0), 2));
        }
        else {
            CatalogFieldValueSet(c_gameCatalogBehavior, "KerriganAssimilationShield", "DamageResponse.ModifyLimit", lv_owner, FixedToString(lv_currentShields, 2));
        }
    }

    UnitBehaviorAdd(lv_kerriganUnit, "KerriganAssimilationShield", libGame_gv_players[lv_owner].lv_heroUnit, 1);
    lv_vertOffset = 2.0;
    lv_horizOffset = RandomFixed(-0.4, -0.6);
    FloatingCombatElementCreateTextAtUnit(PlayerGroupSingle(UnitGetOwner(lv_kerriganUnit)), "FloatingCombatElements/FloatingCombatLesserAmountReceived", "ShieldState", lv_kerriganUnit, FixedToText(lv_shieldsToAdd, 0), libNtve_gv_FloatingCombatTextAutoRandomSeed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganAssimilationPassiveAddShields_Init () {
    libGDHL_gt_HeroKerriganAssimilationPassiveAddShields = TriggerCreate("libGDHL_gt_HeroKerriganAssimilationPassiveAddShields_Func");
    TriggerEnable(libGDHL_gt_HeroKerriganAssimilationPassiveAddShields, false);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilationPassiveAddShields, null, c_unitDamageTypeAbility, c_unitDamageEither, "RavageDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilationPassiveAddShields, null, c_unitDamageTypeAbility, c_unitDamageEither, "KerriganRavageCleanKillMasteryActiveDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilationPassiveAddShields, null, c_unitDamageTypeAbility, c_unitDamageEither, "PrimalGraspDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilationPassiveAddShields, null, c_unitDamageTypeAbility, c_unitDamageEither, "KerriganPrimalGraspMasteryBurningDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilationPassiveAddShields, null, c_unitDamageTypeAbility, c_unitDamageEither, "CrushingGripDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilationPassiveAddShields, null, c_unitDamageTypeAbility, c_unitDamageEither, "MaelstromDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilationPassiveAddShields, null, c_unitDamageTypeAbility, c_unitDamageEither, "KerriganEssenceForEssenceDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilationPassiveAddShields, null, c_unitDamageTypeBasic, c_unitDamageEither, "KerriganWeaponDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilationPassiveAddShields, null, c_unitDamageTypeBasic, c_unitDamageEither, "KerriganWeaponDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilationPassiveAddShields, null, c_unitDamageTypeBasic, c_unitDamageEither, "KerriganWeaponDoubleStrikeDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilationPassiveAddShields, null, c_unitDamageTypeBasic, c_unitDamageEither, "ImpalingBladesZerglingWeaponDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilationPassiveAddShields, null, c_unitDamageTypeBasic, c_unitDamageEither, "UltraliskWeaponDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganAssimilationPassiveAddShields, null, c_unitDamageTypeAny, c_unitDamageEither, "SplashDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Ravage CDR
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganRavageCDR_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unit lv_kerrigan;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_kerrigan = UnitBehaviorEffectUnit(lv_unit, "RavageDeathRefundBehavior", c_effectUnitCaster, 0);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_unit, "RavageDeathRefundBehavior") == true)) {
        libNtve_gf_UnitRemoveCooldown(lv_kerrigan, "Abil/KerriganRavage");
        if ((UnitHasBehavior2(lv_kerrigan, "CleanKillCarryBehavior") == true)) {
            UnitSetPropertyFixed(lv_kerrigan, c_unitPropEnergy, (UnitGetPropertyFixed(lv_kerrigan, c_unitPropEnergy, c_unitPropCurrent) + (StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "KerriganRavage", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", UnitGetOwner(lv_kerrigan))) * 0.75)));
            UnitBehaviorAdd(lv_kerrigan, "KerriganCleanKillMasteryActive", lv_kerrigan, 1);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganRavageCDR_Init () {
    libGDHL_gt_HeroKerriganRavageCDR = TriggerCreate("libGDHL_gt_HeroKerriganRavageCDR_Func");
    TriggerEnable(libGDHL_gt_HeroKerriganRavageCDR, false);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganRavageCDR, null, c_unitDamageTypeBasic, c_unitDamageFatal, null);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroKerriganRavageCDR, null, c_unitDamageTypeAbility, c_unitDamageFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Ravage CDR On Hero Special Death State
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganRavageCDROnHeroSpecialDeathState_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unit lv_kerrigan;

    // Variable Initialization
    lv_unit = libGame_gf_HeroEntersSpecialDeathStateHero();

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(lv_unit, "RavageDeathRefundBehavior") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_kerrigan = UnitBehaviorEffectUnit(lv_unit, "RavageDeathRefundBehavior", c_effectUnitCaster, 0);
    libNtve_gf_UnitRemoveCooldown(lv_kerrigan, "Abil/KerriganRavage");
    if ((UnitHasBehavior2(lv_kerrigan, "CleanKillCarryBehavior") == true)) {
        UnitSetPropertyFixed(lv_kerrigan, c_unitPropEnergy, (UnitGetPropertyFixed(lv_kerrigan, c_unitPropEnergy, c_unitPropCurrent) + (StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "KerriganRavage", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", UnitGetOwner(lv_kerrigan))) * 1.0)));
        UnitBehaviorAdd(lv_kerrigan, "KerriganCleanKillMasteryActive", lv_kerrigan, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganRavageCDROnHeroSpecialDeathState_Init () {
    libGDHL_gt_HeroKerriganRavageCDROnHeroSpecialDeathState = TriggerCreate("libGDHL_gt_HeroKerriganRavageCDROnHeroSpecialDeathState_Func");
    TriggerEnable(libGDHL_gt_HeroKerriganRavageCDROnHeroSpecialDeathState, false);
    libGame_gf_HeroEntersSpecialDeathState(libGDHL_gt_HeroKerriganRavageCDROnHeroSpecialDeathState);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Ravage CDR On Tower Special Death State
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganRavageCDROnTowerSpecialDeathState_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unit lv_kerrigan;

    // Variable Initialization
    lv_unit = libGame_gf_TownStructureEntersSpecialDeathStateStructure();

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(lv_unit, "RavageDeathRefundBehavior") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_kerrigan = UnitBehaviorEffectUnit(lv_unit, "RavageDeathRefundBehavior", c_effectUnitCaster, 0);
    libNtve_gf_UnitRemoveCooldown(lv_kerrigan, "Abil/KerriganRavage");
    if ((UnitHasBehavior2(lv_kerrigan, "CleanKillCarryBehavior") == true)) {
        UnitSetPropertyFixed(lv_kerrigan, c_unitPropEnergy, (UnitGetPropertyFixed(lv_kerrigan, c_unitPropEnergy, c_unitPropCurrent) + (StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "KerriganRavage", "Cost[" + IntToString(0) + "].Vital[" + IntToString(2) + "]", UnitGetOwner(lv_kerrigan))) * 1.0)));
        UnitBehaviorAdd(lv_kerrigan, "KerriganCleanKillMasteryActive", lv_kerrigan, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganRavageCDROnTowerSpecialDeathState_Init () {
    libGDHL_gt_HeroKerriganRavageCDROnTowerSpecialDeathState = TriggerCreate("libGDHL_gt_HeroKerriganRavageCDROnTowerSpecialDeathState_Func");
    TriggerEnable(libGDHL_gt_HeroKerriganRavageCDROnTowerSpecialDeathState, false);
    libGame_gf_TownStructureEntersSpecialDeathState(libGDHL_gt_HeroKerriganRavageCDROnTowerSpecialDeathState);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan Sic Ultralisk
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganSicUltralisk_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_kerriganUnit;
    unit lv_targetUnit;
    point lv_lastKnownLocationOfTarget;
    unit lv_ultraliskUnit;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_kerriganUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_lastKnownLocationOfTarget = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget));

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "KerriganUltralisk", 0, lv_player, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_kerriganUnit), 1.0, UnitGetPosition(lv_targetUnit)), UnitGetPosition(lv_targetUnit));
    lv_ultraliskUnit = UnitLastCreated();
    UnitCreateEffectUnit(lv_ultraliskUnit, "KerriganSummonUltraliskIssueRedirectOrderDummy", lv_targetUnit);
    UnitCreateEffectUnit(lv_kerriganUnit, "KerriganSummonUltraliskApplyTimedLife", lv_ultraliskUnit);
    UnitGroupAdd(libGame_gv_players[lv_player].lv_summonedUnitGroup, lv_ultraliskUnit);
    libGDHL_gf_SiegeUpdateAbilityPowerOnSummonedUnits(lv_ultraliskUnit);
    libGDHL_gf_HeroKerriganUltraliskLogicController(lv_player, lv_ultraliskUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganSicUltralisk_Init () {
    libGDHL_gt_HeroKerriganSicUltralisk = TriggerCreate("libGDHL_gt_HeroKerriganSicUltralisk_Func");
    TriggerEnable(libGDHL_gt_HeroKerriganSicUltralisk, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroKerriganSicUltralisk, c_playerAny, "SummonUltraliskPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Ultralisk - Update Orders On Issue Order Ability
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbility_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_lastKnownLocation;
    int lv_ownerPlayer;
    point lv_positionOfUnit;

    // Variable Initialization
    lv_lastKnownLocation = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    lv_ownerPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroKerriganUltraliskCurrentAttackTargetUnit[lv_ownerPlayer] = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    UnitGroupLoopBegin(UnitGroup("KerriganUltralisk", lv_ownerPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), libGDHL_gv_heroKerriganUltraliskCurrentAttackTargetUnit[lv_ownerPlayer]), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbility_Init () {
    libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbility = TriggerCreate("libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbility_Func");
    TriggerEnable(libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbility, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbility, c_playerAny, "KerriganSummonUltraliskIssueRedirectOrderDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Ultralisk - Update Orders On Issue Order Ability Point
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilityPoint_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("KerriganUltralisk", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueReplace);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilityPoint_Init () {
    libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilityPoint = TriggerCreate("libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilityPoint_Func");
    TriggerEnable(libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilityPoint, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilityPoint, c_playerAny, "KerriganSummonUltraliskIssueRedirectOrderDummyPoint");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Ultralisk - Torrasque Reborn
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganUltraliskTorrasqueReborn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_origin;
    unit lv_kerrigan;
    int lv_ownerPlayer;
    point lv_positionOfUnit;

    // Variable Initialization
    lv_origin = EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("HeroKerrigan", lv_origin, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PlayerCreateEffectUnit(lv_origin, "KerriganSummonUltraliskTorrasqueApplyUltraliskActiveBehavior", UnitGroupLoopCurrent());
        lv_kerrigan = UnitGroupLoopCurrent();
    }
    UnitGroupLoopEnd();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "KerriganUltralisk", 0, lv_origin, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint));
    UnitCreateEffectUnit(lv_kerrigan, "KerriganSummonUltraliskApplyTimedLife", UnitLastCreated());
    lv_ownerPlayer = EventPlayer();
    lv_positionOfUnit = UnitGetPosition(UnitLastCreated());
    libGDHL_gf_HeroKerriganUltraliskLogicController(lv_ownerPlayer, UnitLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganUltraliskTorrasqueReborn_Init () {
    libGDHL_gt_HeroKerriganUltraliskTorrasqueReborn = TriggerCreate("libGDHL_gt_HeroKerriganUltraliskTorrasqueReborn_Func");
    TriggerEnable(libGDHL_gt_HeroKerriganUltraliskTorrasqueReborn, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroKerriganUltraliskTorrasqueReborn, c_playerAny, "KerriganSummonUltraliskTorrasqueEggTimedLifeFinalSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Ultralisk Dies
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganUltraliskDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "KerriganUltralisk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("HeroKerrigan", lv_player, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PlayerCreateEffectUnit(lv_player, "KerriganSummonUltraliskRemoveUltraliskActiveBehavior", UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganUltraliskDies_Init () {
    libGDHL_gt_HeroKerriganUltraliskDies = TriggerCreate("libGDHL_gt_HeroKerriganUltraliskDies_Func");
    TriggerEnable(libGDHL_gt_HeroKerriganUltraliskDies, false);
    TriggerAddEventUnitDied(libGDHL_gt_HeroKerriganUltraliskDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Kerrigan - Queen's Rush Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroKerriganQueensRushProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = libGame_gf_HeroParticipatedInTakedownKillingPlayer();

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(libGame_gf_HeroParticipatedInTakedownKillingPlayer(), "KerriganQueensRush") == true))) {
            return false;
        }

        if (!((UnitIsAlive(libGame_gv_players[lv_player].lv_heroUnit) == true))) {
            return false;
        }

        if (!((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroKerrigan"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(libGame_gv_players[lv_player].lv_heroUnit, "KerriganQueensRush", libGame_gv_players[lv_player].lv_heroUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroKerriganQueensRushProc_Init () {
    libGDHL_gt_HeroKerriganQueensRushProc = TriggerCreate("libGDHL_gt_HeroKerriganQueensRushProc_Func");
    TriggerEnable(libGDHL_gt_HeroKerriganQueensRushProc, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroKerriganQueensRushProc);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - ETC - Prog Rock Talent Regen Globe Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroETCProgRockTalentRegenGlobeProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    int lv_eTC;

    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((lv_player > 0))) {
            return false;
        }

        if (!((lv_player <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_player, "ETCMasteryProgRock") == true))) {
            return false;
        }

        if (!((UnitBehaviorCount(lv_unit, "ETCProgRockTokenCounter") < CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "ETCProgRockTokenCounter", "Max", 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_unit, "ETCGuitarSoloProgRockTalentAddToken", lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroETCProgRockTalentRegenGlobeProc_Init () {
    libGDHL_gt_HeroETCProgRockTalentRegenGlobeProc = TriggerCreate("libGDHL_gt_HeroETCProgRockTalentRegenGlobeProc_Func");
    TriggerEnable(libGDHL_gt_HeroETCProgRockTalentRegenGlobeProc, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroETCProgRockTalentRegenGlobeProc, c_playerAny, "RegenGlobeImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - L90ETC - Powerslide - Target Check
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroL90ETCPowerslideTargetCheck_Func (bool testConds, bool runActions) {
    int auto0B10A829_ae;
    int auto0B10A829_ai;

    // Variable Declarations
    fixed lv_offset;
    point lv_k;
    point lv_t;
    fixed lv_range;
    int lv_i;
    unit lv_eTC;

    // Variable Initialization
    lv_offset = StringToFixed(CatalogFieldValueGet(c_gameCatalogActor, "L90ETCPowerslideGuide", "Height", c_playerAny));
    lv_k = UnitGetPosition(EventUnit());
    lv_t = EventUnitTargetPoint();
    lv_eTC = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_range = StringToFixed(CatalogFieldValueGet(c_gameCatalogActor, "L90ETCPowerslideGuide", "Height", EventPlayer()));
    lv_t = libNtve_gf_PointOffsetTowardsPoint(lv_k, lv_range, lv_t);
    Wait(0.1875, c_timeGame);
    auto0B10A829_ae = 14;
    auto0B10A829_ai = 1;
    lv_i = 1;
    for ( ; ( (auto0B10A829_ai >= 0 && lv_i <= auto0B10A829_ae) || (auto0B10A829_ai <= 0 && lv_i >= auto0B10A829_ae) ) ; lv_i += auto0B10A829_ai ) {
        if ((OrderGetTargetType(UnitOrder(lv_eTC, 0)) == c_orderTargetPoint) && (OrderGetTargetPoint(UnitOrder(lv_eTC, 0)) != null) && (DistanceBetweenPoints(lv_k, lv_t) < 1)) {
            UnitBehaviorRemove(EventUnit(), "Powerslide", 1);
            break;
        }

        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroL90ETCPowerslideTargetCheck_Init () {
    libGDHL_gt_HeroL90ETCPowerslideTargetCheck = TriggerCreate("libGDHL_gt_HeroL90ETCPowerslideTargetCheck_Func");
    TriggerEnable(libGDHL_gt_HeroL90ETCPowerslideTargetCheck, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroL90ETCPowerslideTargetCheck, null, AbilityCommand("L90ETCPowerslide", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - L90ETC - Stage Dive - Teleport Unit
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroL90ETCStageDiveTeleportUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    libGame_gv_players[lv_player].lv_cameraCameraLockInterrupt = true;
    libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_player, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 0.0, -1, 10.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroL90ETCStageDiveTeleportUnit_Init () {
    libGDHL_gt_HeroL90ETCStageDiveTeleportUnit = TriggerCreate("libGDHL_gt_HeroL90ETCStageDiveTeleportUnit_Func");
    TriggerEnable(libGDHL_gt_HeroL90ETCStageDiveTeleportUnit, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroL90ETCStageDiveTeleportUnit, c_playerAny, "StageDiveTeleport");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - L90ETC - Stage Dive - Final Set
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroL90ETCStageDiveFinalSet_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    libGame_gv_players[lv_player].lv_cameraCameraLockInterrupt = false;
    libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    UnitSetFacing(libGame_gv_players[lv_player].lv_heroUnit, 270.0, 0.0);
    if ((libAIAI_gf_HeroAIIsPlayerActive(lv_player, libAIAI_gv_heroAIComputerPlayerType) == true)) {
        libAIAI_gf_HeroAILeaveCurrentObjective(lv_player);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroL90ETCStageDiveFinalSet_Init () {
    libGDHL_gt_HeroL90ETCStageDiveFinalSet = TriggerCreate("libGDHL_gt_HeroL90ETCStageDiveFinalSet_Func");
    TriggerEnable(libGDHL_gt_HeroL90ETCStageDiveFinalSet, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroL90ETCStageDiveFinalSet, c_playerAny, "StageDiveFinalSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - L90ETC - Mosh Pit - On
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroL90ETCMoshPitOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_eTC;
    unit lv_stunnedUnit;

    // Variable Initialization
    lv_eTC = UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, 0);
    lv_stunnedUnit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeCreate)) {
        UnitBehaviorAdd(lv_stunnedUnit, "L90ETCMoshPitDisplayBehavior", lv_stunnedUnit, 1);
        UnitBehaviorSetDuration(lv_stunnedUnit, "L90ETCMoshPitDisplayBehavior", UnitBehaviorDurationTotal(lv_eTC, "L90ETCMoshPitChannel"));
        UnitBehaviorSetDurationRemaining(lv_stunnedUnit, "L90ETCMoshPitDisplayBehavior", UnitBehaviorDuration(lv_eTC, "L90ETCMoshPitChannel"));
    }
    else {
        UnitBehaviorSetDuration(lv_stunnedUnit, "L90ETCMoshPitDisplayBehavior", UnitBehaviorDurationTotal(lv_eTC, "L90ETCMoshPitChannel"));
        UnitBehaviorSetDurationRemaining(lv_stunnedUnit, "L90ETCMoshPitDisplayBehavior", UnitBehaviorDuration(lv_eTC, "L90ETCMoshPitChannel"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroL90ETCMoshPitOn_Init () {
    libGDHL_gt_HeroL90ETCMoshPitOn = TriggerCreate("libGDHL_gt_HeroL90ETCMoshPitOn_Func");
    TriggerEnable(libGDHL_gt_HeroL90ETCMoshPitOn, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroL90ETCMoshPitOn, null, "L90ETCMoshPitStun", c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroL90ETCMoshPitOn, null, "L90ETCMoshPitStun", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Li Li - Cloud Serpent Surging Winds Ability Power Transference
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLiLiCloudSerpentSurgingWindsAbilityPowerTransference_Func (bool testConds, bool runActions) {
    playergroup autoA0C59626_g;
    int autoA0C59626_p;

    // Variable Declarations
    int lv_owningPlayer2;
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_owningPlayer2 = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    autoA0C59626_g = libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lv_owningPlayer2), false); 
    autoA0C59626_p = 1;
    for ( ; autoA0C59626_p <= PlayerGroupCount(autoA0C59626_g) ; autoA0C59626_p += (lv_itPlayer == PlayerGroupPlayer(autoA0C59626_g, autoA0C59626_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoA0C59626_g, autoA0C59626_p);
        PlayerCreateEffectUnit(lv_owningPlayer2, "LiLiBlindingWindApplySurgingWindsStackToCloudSerpent", libGDHL_gv_hero_LiLi_ActiveCloudSerpents[lv_owningPlayer2][lv_itPlayer]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLiLiCloudSerpentSurgingWindsAbilityPowerTransference_Init () {
    libGDHL_gt_HeroLiLiCloudSerpentSurgingWindsAbilityPowerTransference = TriggerCreate("libGDHL_gt_HeroLiLiCloudSerpentSurgingWindsAbilityPowerTransference_Func");
    TriggerEnable(libGDHL_gt_HeroLiLiCloudSerpentSurgingWindsAbilityPowerTransference, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroLiLiCloudSerpentSurgingWindsAbilityPowerTransference, c_playerAny, "LiLiBlindingWindApplySurgingWindsStack");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Li Li - Cloud Serpent Stat Tracking
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLiLiCloudSerpentStatTracking_Func (bool testConds, bool runActions) {
    playergroup auto8915D851_g;
    int auto8915D851_p;

    // Variable Declarations
    int lv_itPlayer;
    fixed lv_healingAmount;
    int lv_hostPlayer;
    int lv_liLiPlayer;
    fixed lv_vertOffset;
    fixed lv_horizOffset;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hostPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_healingAmount = EventPlayerEffectUsedAmountFixed(c_effectAmountHealed, false);
    lv_vertOffset = 2.0;
    lv_horizOffset = RandomFixed(-0.4, -0.6);
    auto8915D851_g = libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lv_hostPlayer), false); 
    auto8915D851_p = 1;
    for ( ; auto8915D851_p <= PlayerGroupCount(auto8915D851_g) ; auto8915D851_p += (lv_itPlayer == PlayerGroupPlayer(auto8915D851_g, auto8915D851_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto8915D851_g, auto8915D851_p);
        if ((libGame_gv_players[lv_itPlayer].lv_heroIndex == libCore_gf_GetHeroIndexForUnitType("HeroLiLi"))) {
            lv_liLiPlayer = lv_itPlayer;
            break;
        }

    }
    libGame_gf_ScoreValuesReportRealValueAndLog(lv_liLiPlayer, "Healing", (PlayerScoreValueGetAsFixed(lv_liLiPlayer, "Healing") + lv_healingAmount));
    if ((lv_hostPlayer != lv_liLiPlayer)) {
        libUIUI_gf_UIFloatingCombatTextCreateTextTag(lv_liLiPlayer, libUIUI_gv_floatingCombatTextHighDuration, FixedToText(lv_healingAmount, 0), EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_vertOffset, lv_horizOffset, libCore_ge_FloatingTextType_Healing, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLiLiCloudSerpentStatTracking_Init () {
    libGDHL_gt_HeroLiLiCloudSerpentStatTracking = TriggerCreate("libGDHL_gt_HeroLiLiCloudSerpentStatTracking_Func");
    TriggerEnable(libGDHL_gt_HeroLiLiCloudSerpentStatTracking, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroLiLiCloudSerpentStatTracking, c_playerAny, "LiLiCloudSerpentMendingSerpentCreateHealer");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Li Li - Cloud Serpent Turret Serpent Serpent Sidekick Summon and Simplified AI
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLiLiCloudSerpentTurretSerpentSerpentSidekickSummonandSimplifiedAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owningPlayer;
    unit lv_owningUnit;
    unit lv_CloudSerpent;
    int lv_currentState;
    int lv_characterLevel;
    int lv_surgingWindsBehaviorCount;

    // Variable Initialization
    lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_owningPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_owningUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_characterLevel = UnitXPGetCurrentLevel(lv_owningUnit, "HeroDummyVeterancy");
    if ((UnitIsAlive(libGDHL_gv_hero_LiLi_ActiveCloudSerpents[lv_owningPlayer][lv_owningPlayer]) == true)) {
        UnitKill(libGDHL_gv_hero_LiLi_ActiveCloudSerpents[lv_owningPlayer][lv_owningPlayer]);
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "CloudSerpent", 0, lv_owningPlayer, PointWithOffsetPolar(UnitGetPosition(lv_owningUnit), 1.0, libNtve_gf_RandomAngle()));
    lv_CloudSerpent = UnitLastCreated();
    UnitCreateEffectUnit(lv_owningUnit, "HeroGenericSummonedUnitStasisControllerWithSpecialCaseDeath", lv_CloudSerpent);
    libGDHL_gv_hero_LiLi_ActiveCloudSerpents[lv_owningPlayer][lv_owningPlayer] = UnitLastCreated();
    if ((UnitHasBehavior2(lv_owningUnit, "LiLiBlindingWindSurgingWindsAbilityPower") == true)) {
        lv_surgingWindsBehaviorCount = TechTreeBehaviorCount(lv_owningPlayer, "LiLiBlindingWindSurgingWindsAbilityPower", c_techCountQueuedOrBetter);
        UnitBehaviorAdd(lv_CloudSerpent, "LiLiBlindingWindSurgingWindsCloudSerpentAbilityPower", lv_owningUnit, lv_surgingWindsBehaviorCount);
    }

    UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionBehavior", lv_owningUnit, 1);
    if ((PlayerHasTalent(lv_owningPlayer, "LiLiMasteryCloudSerpentMendingSerpent") == true)) {
        UnitBehaviorAdd(lv_CloudSerpent, "LiLiCloudSerpentMendingSerpent", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    }

    if ((PlayerHasTalent(lv_owningPlayer, "LiLiMasteryCloudSerpentLightningSerpent") == true)) {
        UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentLightningSerpentBehavior", lv_CloudSerpent, 1);
    }

    CatalogFieldValueSet(c_gameCatalogBehavior, "CloudSerpentMinionSpeedBoost", "Modification.UnifiedMoveSpeedFactor", lv_owningPlayer, CatalogFieldValueGet(c_gameCatalogBehavior, "Mounted", "Modification.UnifiedMoveSpeedFactor", lv_owningPlayer));
    CatalogFieldValueSet(c_gameCatalogEffect, "CloudSerpentWeaponDamage", "Amount", lv_owningPlayer, CatalogFieldValueGet(c_gameCatalogEffect, "CloudSerpentWeaponDamage", "Amount", lv_owningPlayer));
    CatalogFieldValueSet(c_gameCatalogEffect, "LightningSerpentHopDamage", "Amount", lv_owningPlayer, CatalogFieldValueGet(c_gameCatalogEffect, "LightningSerpentHopDamage", "Amount", lv_owningPlayer));
    while ((UnitIsAlive(lv_CloudSerpent) == true) && (UnitIsAlive(lv_owningUnit) == true)) {
        libGDHL_gf_HeroLiLiCloudSerpentCloakController(lv_owningUnit, lv_CloudSerpent);
        if (((UnitOrderCount(lv_CloudSerpent) == 0) || (OrderGetAbilityCommand(UnitOrder(lv_CloudSerpent, 0)) != AbilityCommand("LiLiCloudSerpentAttack", 0)))) {
            if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) >= 8.0)) {
                UnitSetPosition(lv_CloudSerpent, PointWithOffsetPolar(UnitGetPosition(lv_owningUnit), 2.0, libNtve_gf_RandomAngle()), false);
                UnitIssueOrder(lv_CloudSerpent, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;
            }
            else {
                if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) >= 2.0) && (lv_currentState != libGDHL_ge_CloudSerpentAIState_Leashing)) {
                    UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_owningUnit), 1.0, UnitGetFacing(lv_owningUnit))), c_orderQueueReplace);
                    UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionSpeedBoost", lv_CloudSerpent, 1);
                    lv_currentState = libGDHL_ge_CloudSerpentAIState_Leashing;
                }

            }
            if ((lv_currentState == libGDHL_ge_CloudSerpentAIState_Idle)) {
                if ((UnitOrderCount(lv_owningUnit) == 0)) {
                }
                else {
                    if ((OrderGetAbilityCommand(UnitOrder(lv_owningUnit, 0)) == AbilityCommand("move", 0))) {
                        if ((DistanceBetweenPoints(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), UnitGetPosition(lv_CloudSerpent)) > 1.5)) {
                            UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), 1.0, UnitGetFacing(lv_owningUnit))), c_orderQueueReplace);
                            lv_currentState = libGDHL_ge_CloudSerpentAIState_Moving;
                        }
                        else {
                            libNtve_gf_MakeUnitFacePoint(lv_CloudSerpent, OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), 0.2);
                        }
                    }

                }
            }

            if ((lv_currentState == libGDHL_ge_CloudSerpentAIState_Moving)) {
                if ((UnitOrderCount(lv_CloudSerpent) == 0)) {
                    lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;
                }
                else {
                    if ((UnitOrderCount(lv_owningUnit) == 0)) {
                        if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) <= 1.5)) {
                            UnitIssueOrder(lv_CloudSerpent, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                            lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;
                        }

                    }
                    else {
                        if ((OrderGetAbilityCommand(UnitOrder(lv_owningUnit, 0)) == AbilityCommand("move", 0))) {
                            if ((DistanceBetweenPoints(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), OrderGetTargetPoint(UnitOrder(lv_CloudSerpent, 0))) > 1.5)) {
                                UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), 1.0, UnitGetFacing(lv_owningUnit))), c_orderQueueReplace);
                                lv_currentState = libGDHL_ge_CloudSerpentAIState_Moving;
                            }
                            else {
                                if ((DistanceBetweenPoints(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), UnitGetPosition(lv_owningUnit)) < DistanceBetweenPoints(OrderGetTargetPoint(UnitOrder(lv_CloudSerpent, 0)), UnitGetPosition(lv_CloudSerpent)))) {
                                    UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionSpeedBoost", lv_CloudSerpent, 1);
                                }

                            }
                        }

                    }
                }
            }

            if ((lv_currentState == libGDHL_ge_CloudSerpentAIState_Leashing)) {
                if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) <= 1.5)) {
                    UnitIssueOrder(lv_CloudSerpent, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                    lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;
                }
                else {
                    if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) <= 2.0) && (UnitOrderCount(lv_CloudSerpent) == 0)) {
                        if ((UnitOrderCount(lv_owningUnit) == 0)) {
                            lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;
                        }
                        else {
                            UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_owningUnit), 1.0, UnitGetFacing(lv_owningUnit))), c_orderQueueReplace);
                            UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionSpeedBoost", lv_CloudSerpent, 1);
                            lv_currentState = libGDHL_ge_CloudSerpentAIState_Leashing;
                        }
                    }
                    else {
                        if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) > 2.0) && (UnitOrderCount(lv_CloudSerpent) == 0)) {
                            UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_owningUnit), 1.0, UnitGetFacing(lv_owningUnit))), c_orderQueueReplace);
                            UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionSpeedBoost", lv_CloudSerpent, 1);
                            lv_currentState = libGDHL_ge_CloudSerpentAIState_Leashing;
                        }
                        else {
                            if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), OrderGetTargetPoint(UnitOrder(lv_CloudSerpent, 0))) <= 1.5) && (DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) > 2.0)) {
                                UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_owningUnit), 1.0, UnitGetFacing(lv_owningUnit))), c_orderQueueReplace);
                                UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionSpeedBoost", lv_CloudSerpent, 1);
                                lv_currentState = libGDHL_ge_CloudSerpentAIState_Leashing;
                            }

                        }
                    }
                }
            }

        }

        Wait(0.0625, c_timeGame);
    }
    if ((UnitIsAlive(lv_owningUnit) != true)) {
        UnitCreateEffectUnit(lv_CloudSerpent, "TimedLifeFate", lv_CloudSerpent);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLiLiCloudSerpentTurretSerpentSerpentSidekickSummonandSimplifiedAI_Init () {
    libGDHL_gt_HeroLiLiCloudSerpentTurretSerpentSerpentSidekickSummonandSimplifiedAI = TriggerCreate("libGDHL_gt_HeroLiLiCloudSerpentTurretSerpentSerpentSidekickSummonandSimplifiedAI_Func");
    TriggerEnable(libGDHL_gt_HeroLiLiCloudSerpentTurretSerpentSerpentSidekickSummonandSimplifiedAI, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroLiLiCloudSerpentTurretSerpentSerpentSidekickSummonandSimplifiedAI, c_playerAny, "LiLiCloudSerpentSerpentSidekickApplyCloudSerpentBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Li Li - Cloud Serpent Turret Serpent Summon and Simplified AI
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLiLiCloudSerpentTurretSerpentSummonandSimplifiedAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_owningPlayer;
    int lv_owningPlayer2;
    unit lv_owningUnit;
    unit lv_CloudSerpent;
    int lv_currentState;
    int lv_characterLevel;
    int lv_surgingWindsBehaviorCount;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_owningPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    lv_owningPlayer2 = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_owningUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_characterLevel = UnitXPGetCurrentLevel(lv_caster, "HeroDummyVeterancy");
    if ((UnitIsAlive(libGDHL_gv_hero_LiLi_ActiveCloudSerpents[lv_owningPlayer2][lv_owningPlayer]) == true)) {
        UnitKill(libGDHL_gv_hero_LiLi_ActiveCloudSerpents[lv_owningPlayer2][lv_owningPlayer]);
    }

    libNtve_gf_CreateUnitsAtPoint2(1, "CloudSerpent", 0, lv_owningPlayer2, PointWithOffsetPolar(UnitGetPosition(lv_owningUnit), 1.0, libNtve_gf_RandomAngle()));
    lv_CloudSerpent = UnitLastCreated();
    UnitCreateEffectUnit(lv_owningUnit, "HeroGenericSummonedUnitStasisControllerWithSpecialCaseDeath", lv_CloudSerpent);
    libGDHL_gv_hero_LiLi_ActiveCloudSerpents[lv_owningPlayer2][lv_owningPlayer] = UnitLastCreated();
    if ((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "LiLiBlindingWindSurgingWindsAbilityPower") == true)) {
        lv_surgingWindsBehaviorCount = TechTreeBehaviorCount(lv_owningPlayer2, "LiLiBlindingWindSurgingWindsAbilityPower", c_techCountQueuedOrBetter);
        UnitBehaviorAdd(lv_CloudSerpent, "LiLiBlindingWindSurgingWindsCloudSerpentAbilityPower", lv_caster, lv_surgingWindsBehaviorCount);
    }

    UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionBehavior", lv_caster, 1);
    if ((PlayerHasTalent(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "LiLiMasteryCloudSerpentMendingSerpent") == true)) {
        UnitBehaviorAdd(lv_CloudSerpent, "LiLiCloudSerpentMendingSerpent", lv_owningUnit, 1);
    }

    if ((PlayerHasTalent(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "LiLiMasteryCloudSerpentLightningSerpent") == true)) {
        UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentLightningSerpentBehavior", lv_CloudSerpent, 1);
    }

    CatalogFieldValueSet(c_gameCatalogBehavior, "CloudSerpentMinionSpeedBoost", "Modification.UnifiedMoveSpeedFactor", lv_owningPlayer, CatalogFieldValueGet(c_gameCatalogBehavior, "Mounted", "Modification.UnifiedMoveSpeedFactor", lv_owningPlayer));
    CatalogFieldValueSet(c_gameCatalogEffect, "CloudSerpentWeaponDamage", "Amount", lv_owningPlayer, CatalogFieldValueGet(c_gameCatalogEffect, "CloudSerpentWeaponDamage", "Amount", lv_owningPlayer2));
    CatalogFieldValueSet(c_gameCatalogEffect, "LightningSerpentHopDamage", "Amount", lv_owningPlayer, CatalogFieldValueGet(c_gameCatalogEffect, "LightningSerpentHopDamage", "Amount", lv_owningPlayer2));
    CatalogFieldValueSet(c_gameCatalogEffect, "LiLiCloudSerpentMendingSerpentCreateHealer", "RechargeVitalRate", lv_owningPlayer, CatalogFieldValueGet(c_gameCatalogEffect, "LiLiCloudSerpentMendingSerpentCreateHealer", "RechargeVitalRate", lv_owningPlayer2));
    while ((UnitIsAlive(lv_CloudSerpent) == true) && (UnitIsAlive(lv_owningUnit) == true) && (UnitHasBehavior2(lv_owningUnit, "Dead") == false)) {
        libGDHL_gf_HeroLiLiCloudSerpentCloakController(lv_owningUnit, lv_CloudSerpent);
        if (((UnitOrderCount(lv_CloudSerpent) == 0) || (OrderGetAbilityCommand(UnitOrder(lv_CloudSerpent, 0)) != AbilityCommand("LiLiCloudSerpentAttack", 0)))) {
            if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) >= 8.0)) {
                UnitSetPosition(lv_CloudSerpent, PointWithOffsetPolar(UnitGetPosition(lv_owningUnit), 2.0, libNtve_gf_RandomAngle()), false);
                UnitIssueOrder(lv_CloudSerpent, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;
            }
            else {
                if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) >= 2.0) && (lv_currentState != libGDHL_ge_CloudSerpentAIState_Leashing)) {
                    UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_owningUnit), 1.0, UnitGetFacing(lv_owningUnit))), c_orderQueueReplace);
                    UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionSpeedBoost", lv_CloudSerpent, 1);
                    lv_currentState = libGDHL_ge_CloudSerpentAIState_Leashing;
                }

            }
            if ((lv_currentState == libGDHL_ge_CloudSerpentAIState_Idle)) {
                if ((UnitOrderCount(lv_owningUnit) == 0)) {
                }
                else {
                    if ((OrderGetAbilityCommand(UnitOrder(lv_owningUnit, 0)) == AbilityCommand("move", 0))) {
                        if ((DistanceBetweenPoints(OrderGetTargetPosition(UnitOrder(lv_owningUnit, 0)), UnitGetPosition(lv_CloudSerpent)) > 1.5)) {
                            UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(OrderGetTargetPosition(UnitOrder(lv_owningUnit, 0)), 1.0, UnitGetFacing(lv_owningUnit))), c_orderQueueReplace);
                            lv_currentState = libGDHL_ge_CloudSerpentAIState_Moving;
                        }
                        else {
                            libNtve_gf_MakeUnitFacePoint(lv_CloudSerpent, OrderGetTargetPosition(UnitOrder(lv_owningUnit, 0)), 0.2);
                        }
                    }

                }
            }

            if ((lv_currentState == libGDHL_ge_CloudSerpentAIState_Moving)) {
                if ((UnitOrderCount(lv_CloudSerpent) == 0)) {
                    lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;
                }
                else {
                    if ((UnitOrderCount(lv_owningUnit) == 0)) {
                        if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) <= 1.5)) {
                            UnitIssueOrder(lv_CloudSerpent, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                            lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;
                        }

                    }
                    else {
                        if ((OrderGetAbilityCommand(UnitOrder(lv_owningUnit, 0)) == AbilityCommand("move", 0))) {
                            if ((DistanceBetweenPoints(OrderGetTargetPosition(UnitOrder(lv_owningUnit, 0)), OrderGetTargetPosition(UnitOrder(lv_CloudSerpent, 0))) > 1.5)) {
                                UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(OrderGetTargetPosition(UnitOrder(lv_owningUnit, 0)), 1.0, UnitGetFacing(lv_owningUnit))), c_orderQueueReplace);
                                lv_currentState = libGDHL_ge_CloudSerpentAIState_Moving;
                            }
                            else {
                                if ((DistanceBetweenPoints(OrderGetTargetPosition(UnitOrder(lv_owningUnit, 0)), UnitGetPosition(lv_owningUnit)) < DistanceBetweenPoints(OrderGetTargetPosition(UnitOrder(lv_CloudSerpent, 0)), UnitGetPosition(lv_CloudSerpent)))) {
                                    UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionSpeedBoost", lv_CloudSerpent, 1);
                                }

                            }
                        }

                    }
                }
            }

            if ((lv_currentState == libGDHL_ge_CloudSerpentAIState_Leashing)) {
                if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) <= 1.5)) {
                    UnitIssueOrder(lv_CloudSerpent, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                    lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;
                }
                else {
                    if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) <= 2.0) && (UnitOrderCount(lv_CloudSerpent) == 0)) {
                        if ((UnitOrderCount(lv_owningUnit) == 0)) {
                            lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;
                        }
                        else {
                            UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_owningUnit), 1.0, UnitGetFacing(lv_owningUnit))), c_orderQueueReplace);
                            UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionSpeedBoost", lv_CloudSerpent, 1);
                            lv_currentState = libGDHL_ge_CloudSerpentAIState_Leashing;
                        }
                    }
                    else {
                        if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) > 2.0) && (UnitOrderCount(lv_CloudSerpent) == 0)) {
                            UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_owningUnit), 1.0, UnitGetFacing(lv_owningUnit))), c_orderQueueReplace);
                            UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionSpeedBoost", lv_CloudSerpent, 1);
                            lv_currentState = libGDHL_ge_CloudSerpentAIState_Leashing;
                        }
                        else {
                            if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), OrderGetTargetPoint(UnitOrder(lv_CloudSerpent, 0))) <= 1.5) && (DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) > 2.0)) {
                                UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_owningUnit), 1.0, UnitGetFacing(lv_owningUnit))), c_orderQueueReplace);
                                UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionSpeedBoost", lv_CloudSerpent, 1);
                                lv_currentState = libGDHL_ge_CloudSerpentAIState_Leashing;
                            }

                        }
                    }
                }
            }

        }

        Wait(0.0625, c_timeGame);
    }
    if (((UnitHasBehavior2(lv_owningUnit, "Dead") == true) || (UnitIsAlive(lv_owningUnit) != true))) {
        UnitCreateEffectUnit(lv_CloudSerpent, "TimedLifeFate", lv_CloudSerpent);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLiLiCloudSerpentTurretSerpentSummonandSimplifiedAI_Init () {
    libGDHL_gt_HeroLiLiCloudSerpentTurretSerpentSummonandSimplifiedAI = TriggerCreate("libGDHL_gt_HeroLiLiCloudSerpentTurretSerpentSummonandSimplifiedAI_Func");
    TriggerEnable(libGDHL_gt_HeroLiLiCloudSerpentTurretSerpentSummonandSimplifiedAI, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroLiLiCloudSerpentTurretSerpentSummonandSimplifiedAI, c_playerAny, "LiLiCloudSerpentApplyTurretSerpentBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Li Li - Cloud Serpent Summon and Simplified AI
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLiLiCloudSerpentSummonandSimplifiedAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_owningPlayer;
    int lv_casterOwner;
    unit lv_owningUnit;
    unit lv_CloudSerpent;
    int lv_currentState;
    int lv_characterLevel;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_casterOwner = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_owningPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    lv_owningUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_characterLevel = UnitXPGetCurrentLevel(lv_caster, "HeroDummyVeterancy");
    libNtve_gf_CreateUnitsAtPoint2(1, "CloudSerpent", 0, lv_owningPlayer, PointWithOffsetPolar(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 1.0, libNtve_gf_RandomAngle()));
    lv_CloudSerpent = UnitLastCreated();
    UnitCreateEffectUnit(lv_owningUnit, "LiLiCloudSerpentHostLinkDummy", lv_CloudSerpent);
    UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionBehavior", lv_caster, 1);
    if ((PlayerHasTalent(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "LiLiMasteryCloudSerpentLightningSerpent") == true)) {
        UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentLightningSerpentBehavior", lv_CloudSerpent, 1);
    }

    CatalogFieldValueSet(c_gameCatalogBehavior, "CloudSerpentMinionSpeedBoost", "Modification.UnifiedMoveSpeedFactor", lv_owningPlayer, CatalogFieldValueGet(c_gameCatalogBehavior, "Mounted", "Modification.UnifiedMoveSpeedFactor", lv_owningPlayer));
    CatalogFieldValueSet(c_gameCatalogEffect, "CloudSerpentWeaponDamage", "Amount", lv_owningPlayer, CatalogFieldValueGet(c_gameCatalogEffect, "CloudSerpentWeaponDamage", "Amount", lv_casterOwner));
    CatalogFieldValueSet(c_gameCatalogEffect, "LightningSerpentHopDamage", "Amount", lv_owningPlayer, CatalogFieldValueGet(c_gameCatalogEffect, "LightningSerpentHopDamage", "Amount", lv_casterOwner));
    if ((UnitGetType(lv_owningUnit) != "HeroTychus")) {
        CatalogFieldValueSet(c_gameCatalogAbil, "LiLiCloudSerpentAttack", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lv_owningPlayer, "0");
    }

    while ((UnitIsAlive(lv_CloudSerpent) == true) && (UnitIsAlive(lv_owningUnit) == true)) {
        if (((UnitOrderCount(lv_CloudSerpent) == 0) || (OrderGetAbilityCommand(UnitOrder(lv_CloudSerpent, 0)) != AbilityCommand("LiLiCloudSerpentAttack", 0)))) {
            if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) >= 8.0)) {
                UnitSetPosition(lv_CloudSerpent, PointWithOffsetPolar(UnitGetPosition(lv_owningUnit), 2.0, libNtve_gf_RandomAngle()), false);
                UnitIssueOrder(lv_CloudSerpent, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;
            }
            else {
                if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) >= 4.0) && (lv_currentState != libGDHL_ge_CloudSerpentAIState_Leashing)) {
                    UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_owningUnit), 2.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                    UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionSpeedBoost", lv_CloudSerpent, 1);
                    lv_currentState = libGDHL_ge_CloudSerpentAIState_Leashing;
                }

            }
            if ((lv_currentState == libGDHL_ge_CloudSerpentAIState_Idle)) {
                if ((UnitOrderCount(lv_owningUnit) == 0)) {
                }
                else {
                    if ((OrderGetAbilityCommand(UnitOrder(lv_owningUnit, 0)) == AbilityCommand("attack", 0))) {
                        if ((UnitIsValid(OrderGetTargetUnit(UnitOrder(lv_owningUnit, 0))) == false)) {
                            if ((OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)) == null)) {
                                UnitCreateEffectUnit(lv_owningUnit, "CloudSerpentCopyOrders", lv_CloudSerpent);
                            }
                            else {
                                if ((DistanceBetweenPoints(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), UnitGetPosition(lv_CloudSerpent)) > 3.0)) {
                                    UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), 2.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                                    lv_currentState = libGDHL_ge_CloudSerpentAIState_Moving;
                                }
                                else {
                                    libNtve_gf_MakeUnitFacePoint(lv_CloudSerpent, OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), 0.2);
                                }
                            }
                        }
                        else {
                            if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(OrderGetTargetUnit(UnitOrder(lv_owningUnit, 0)))) > 12.0)) {
                                UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(OrderGetTargetUnit(UnitOrder(lv_owningUnit, 0))), 2.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                                lv_currentState = libGDHL_ge_CloudSerpentAIState_Moving;
                            }

                        }
                    }

                    if ((OrderGetAbilityCommand(UnitOrder(lv_owningUnit, 0)) == AbilityCommand("move", 0))) {
                        if ((DistanceBetweenPoints(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), UnitGetPosition(lv_CloudSerpent)) > 3.0)) {
                            UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), 2.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                            lv_currentState = libGDHL_ge_CloudSerpentAIState_Moving;
                        }
                        else {
                            libNtve_gf_MakeUnitFacePoint(lv_CloudSerpent, OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), 0.2);
                        }
                    }

                }
            }

            if ((lv_currentState == libGDHL_ge_CloudSerpentAIState_Moving)) {
                if ((UnitOrderCount(lv_CloudSerpent) == 0)) {
                    lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;
                }
                else {
                    if ((UnitOrderCount(lv_owningUnit) == 0)) {
                        if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) <= 3.0)) {
                            UnitIssueOrder(lv_CloudSerpent, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                            lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;
                        }

                    }
                    else {
                        if ((OrderGetAbilityCommand(UnitOrder(lv_owningUnit, 0)) == AbilityCommand("attack", 0))) {
                            if ((OrderGetTargetUnit(UnitOrder(lv_owningUnit, 0)) == null)) {
                                if ((OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)) == null)) {
                                    UnitCreateEffectUnit(lv_owningUnit, "CloudSerpentCopyOrders", lv_CloudSerpent);
                                }
                                else {
                                    if ((DistanceBetweenPoints(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), OrderGetTargetPoint(UnitOrder(lv_CloudSerpent, 0))) > 3.0)) {
                                        UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), 2.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                                        lv_currentState = libGDHL_ge_CloudSerpentAIState_Moving;
                                    }
                                    else {
                                        libNtve_gf_MakeUnitFacePoint(lv_CloudSerpent, OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), 0.2);
                                    }
                                }
                            }
                            else {
                                if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(OrderGetTargetUnit(UnitOrder(lv_owningUnit, 0)))) > 12.0)) {
                                    UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(OrderGetTargetUnit(UnitOrder(lv_owningUnit, 0))), 2.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                                    lv_currentState = libGDHL_ge_CloudSerpentAIState_Moving;
                                }
                                else {
                                    lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;
                                }
                            }
                        }

                        if ((OrderGetAbilityCommand(UnitOrder(lv_owningUnit, 0)) == AbilityCommand("move", 0))) {
                            if ((DistanceBetweenPoints(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), OrderGetTargetPoint(UnitOrder(lv_CloudSerpent, 0))) > 3.0)) {
                                UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), 2.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                                lv_currentState = libGDHL_ge_CloudSerpentAIState_Moving;
                            }
                            else {
                                if ((DistanceBetweenPoints(OrderGetTargetPoint(UnitOrder(lv_owningUnit, 0)), UnitGetPosition(lv_owningUnit)) < DistanceBetweenPoints(OrderGetTargetPoint(UnitOrder(lv_CloudSerpent, 0)), UnitGetPosition(lv_CloudSerpent)))) {
                                    UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionSpeedBoost", lv_CloudSerpent, 1);
                                }

                            }
                        }

                    }
                }
            }

            if ((lv_currentState == libGDHL_ge_CloudSerpentAIState_Leashing)) {
                if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) <= 3.0)) {
                    UnitIssueOrder(lv_CloudSerpent, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                    lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;
                }
                else {
                    if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) <= 4.0) && (UnitOrderCount(lv_CloudSerpent) == 0)) {
                        if ((UnitOrderCount(lv_owningUnit) == 0)) {
                            lv_currentState = libGDHL_ge_CloudSerpentAIState_Idle;
                        }
                        else {
                            UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_owningUnit), 2.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                            UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionSpeedBoost", lv_CloudSerpent, 1);
                            lv_currentState = libGDHL_ge_CloudSerpentAIState_Leashing;
                        }
                    }
                    else {
                        if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) > 4.0) && (UnitOrderCount(lv_CloudSerpent) == 0)) {
                            UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_owningUnit), 2.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                            UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionSpeedBoost", lv_CloudSerpent, 1);
                            lv_currentState = libGDHL_ge_CloudSerpentAIState_Leashing;
                        }
                        else {
                            if ((DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), OrderGetTargetPoint(UnitOrder(lv_CloudSerpent, 0))) <= 1.5) && (DistanceBetweenPoints(UnitGetPosition(lv_CloudSerpent), UnitGetPosition(lv_owningUnit)) > 4.0)) {
                                UnitIssueOrder(lv_CloudSerpent, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(UnitGetPosition(lv_owningUnit), 2.0, libNtve_gf_RandomAngle())), c_orderQueueReplace);
                                UnitBehaviorAdd(lv_CloudSerpent, "CloudSerpentMinionSpeedBoost", lv_CloudSerpent, 1);
                                lv_currentState = libGDHL_ge_CloudSerpentAIState_Leashing;
                            }

                        }
                    }
                }
            }

        }

        Wait(0.0625, c_timeGame);
    }
    if ((UnitIsAlive(lv_owningUnit) != true)) {
        UnitCreateEffectUnit(lv_CloudSerpent, "TimedLifeFate", lv_CloudSerpent);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLiLiCloudSerpentSummonandSimplifiedAI_Init () {
    libGDHL_gt_HeroLiLiCloudSerpentSummonandSimplifiedAI = TriggerCreate("libGDHL_gt_HeroLiLiCloudSerpentSummonandSimplifiedAI_Func");
    TriggerEnable(libGDHL_gt_HeroLiLiCloudSerpentSummonandSimplifiedAI, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroLiLiCloudSerpentSummonandSimplifiedAI, c_playerAny, "CloudSerpentApplyBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Li Li - Cloud Serpent Attack Mimic
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLiLiCloudSerpentAttackMimic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    unit lv_OwnerUnit;

    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_OwnerUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!(((UnitHasBehavior2(lv_OwnerUnit, "CloudSerpentOwnerBehavior") == true) || (UnitHasBehavior2(lv_OwnerUnit, "LiLiCloudSerpentSerpentSidekickOwnerBehavior") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(lv_target) != "DocksTreasureChest")) {
        UnitGroupLoopBegin(UnitGroup("CloudSerpent", UnitGetOwner(lv_OwnerUnit), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((libCore_gf_IsAbilityOnCooldown(UnitGroupLoopCurrent(), "LiLiCloudSerpentAttack") == false)) {
                UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("LiLiCloudSerpentAttack", 0), lv_target), c_orderQueueReplace);
            }

        }
        UnitGroupLoopEnd();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLiLiCloudSerpentAttackMimic_Init () {
    libGDHL_gt_HeroLiLiCloudSerpentAttackMimic = TriggerCreate("libGDHL_gt_HeroLiLiCloudSerpentAttackMimic_Func");
    TriggerEnable(libGDHL_gt_HeroLiLiCloudSerpentAttackMimic, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroLiLiCloudSerpentAttackMimic, c_playerAny, "UniversalWeaponLaunchSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Li Li - Shake It Off - CC Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLiLiShakeItOffCCProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_player, "LiLiMasteryShakeItOff") == true))) {
            return false;
        }

        if (!((UnitGetType(lv_unit) == "HeroLiLi"))) {
            return false;
        }

        if (!((UnitHasBehavior2(lv_unit, "LiLiShakeItOffCooldown") == false))) {
            return false;
        }

        if (!((UnitHasBehaviorWithFlag(lv_unit, c_unitBehaviorFlagUser1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_unit, "LiLiShakeItOffCooldown", lv_unit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLiLiShakeItOffCCProc_Init () {
    libGDHL_gt_HeroLiLiShakeItOffCCProc = TriggerCreate("libGDHL_gt_HeroLiLiShakeItOffCCProc_Func");
    TriggerEnable(libGDHL_gt_HeroLiLiShakeItOffCCProc, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroLiLiShakeItOffCCProc, null, c_behaviorCategoryStun, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroLiLiShakeItOffCCProc, null, c_behaviorCategoryStun, c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroLiLiShakeItOffCCProc, null, c_behaviorCategoryUser5, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroLiLiShakeItOffCCProc, null, c_behaviorCategoryUser5, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leoric Spawn
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LeoricSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = libGame_gf_HeroSpawnPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroLeoric"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_players[lv_player].lv_soundDeathAlertPrefix = "UI_HeroDeath_Leoric_";
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LeoricSpawn_Init () {
    libGDHL_gt_LeoricSpawn = TriggerCreate("libGDHL_gt_LeoricSpawn_Func");
    libGame_gf_HeroSpawn(libGDHL_gt_LeoricSpawn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Leoric - Wraith Walk - Devouring Maw Special Case
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLeoricWraithWalkDevouringMawSpecialCase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_wraithPlayer;

    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "LeoricWraithWalkCasterBehavior") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_wraithPlayer = UnitGetOwner(lv_unit);
    if (((lv_wraithPlayer < 0) || (lv_wraithPlayer > libCore_gv_bALMaxPlayers))) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[lv_wraithPlayer].lv_heroUnit, "LeoricWraithWalkRemoveCancelBuff", lv_unit);
    UnitRemove(libGDHL_gv_hero_Leoric_WraithWalk_Unit[lv_wraithPlayer]);
    libGDHL_gv_hero_Leoric_WraithWalk_Unit[lv_wraithPlayer] = null;
    if ((UnitGetType(libGame_gv_players[lv_wraithPlayer].lv_heroUnit) == "HeroAbathur")) {
        if ((UnitIsAlive(libGame_gv_players[lv_wraithPlayer].lv_activeVehicle) == true)) {
            libGame_gv_players[lv_wraithPlayer].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[lv_wraithPlayer].lv_activeVehicle);
        }
        else {
            libGame_gv_players[lv_wraithPlayer].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[lv_wraithPlayer].lv_heroUnitGroup;
        }
    }
    else {
        libGame_gv_players[lv_wraithPlayer].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[lv_wraithPlayer].lv_heroUnitGroup;
    }
    libGame_gf_CameraUpdateCameraForPlayer(lv_wraithPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLeoricWraithWalkDevouringMawSpecialCase_Init () {
    libGDHL_gt_HeroLeoricWraithWalkDevouringMawSpecialCase = TriggerCreate("libGDHL_gt_HeroLeoricWraithWalkDevouringMawSpecialCase_Func");
    TriggerEnable(libGDHL_gt_HeroLeoricWraithWalkDevouringMawSpecialCase, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroLeoricWraithWalkDevouringMawSpecialCase, null, "DevouringMawTargetBehavior", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Leoric - Wraith Walk - Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLeoricWraithWalkCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_controllerUnit;
    int lv_player;
    unit lv_wraithWalkUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    if ((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroAbathur")) {
        lv_controllerUnit = libGame_gv_players[lv_player].lv_activeVehicle;
        libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_controllerUnit);
    }
    else {
        lv_controllerUnit = libGame_gv_players[lv_player].lv_heroUnit;
        libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[lv_player].lv_heroUnitGroup;
    }
    UnitSelect(EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_player, true);
    lv_wraithWalkUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    libGDHL_gv_hero_Leoric_WraithWalk_Unit[lv_player] = lv_wraithWalkUnit;
    UnitSetFacing(lv_wraithWalkUnit, UnitGetFacing(lv_controllerUnit), 0.0);
    if ((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lv_player) == true)) {
        libAIAI_gv_aIHeroes[lv_player].lv_currentHeroUnit = lv_wraithWalkUnit;
    }

    libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_wraithWalkUnit);
    libGame_gv_players[lv_player].lv_cameraCurrentTarget = lv_wraithWalkUnit;
    libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    while ((UnitHasBehavior2(lv_wraithWalkUnit, "LeoricWraithWalkTimedLife") == true) && (UnitIsAlive(lv_controllerUnit) == true)) {
        Wait(0.0625, c_timeGame);
    }
    if ((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lv_player) == true)) {
        libAIAI_gv_aIHeroes[lv_player].lv_currentHeroUnit = lv_controllerUnit;
    }

    libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_controllerUnit);
    libGame_gv_players[lv_player].lv_cameraCurrentTarget = lv_controllerUnit;
    libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLeoricWraithWalkCast_Init () {
    libGDHL_gt_HeroLeoricWraithWalkCast = TriggerCreate("libGDHL_gt_HeroLeoricWraithWalkCast_Func");
    TriggerEnable(libGDHL_gt_HeroLeoricWraithWalkCast, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroLeoricWraithWalkCast, c_playerAny, "LeoricWraithWalkApplyTimedLife");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leoric - Undying Start
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LeoricUndyingStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_leoricPlayer;
    unit lv_deadUnit;
    int lv_killingPlayer;
    fixed lv_deathTimer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "LeoricUndying") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_leoricPlayer = UnitGetOwner(lv_deadUnit);
    lv_killingPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    libGDHL_gv_hero_Leoric_Undying_Dead_Time_Saved[lv_leoricPlayer] = 0.0;
    PlayerScoreValueSetFromInt(lv_leoricPlayer, "DeadHeroLastKnownHealth", FixedToInt(UnitGetPropertyFixed(lv_deadUnit, c_unitPropLife, c_unitPropCurrent)));
    if ((TechTreeUnitCount(lv_leoricPlayer, "LeoricWraithWalkUnit", c_techCountCompleteOnly) >= 1)) {
        if (((libGDHL_gv_hero_Leoric_WraithWalk_Unit[lv_leoricPlayer] == null) || (UnitIsAlive(libGDHL_gv_hero_Leoric_WraithWalk_Unit[lv_leoricPlayer]) == false))) {
            libGDHL_gv_hero_Leoric_WraithWalk_Unit[lv_leoricPlayer] = UnitGroupUnit(UnitGroup("LeoricWraithWalkUnit", lv_leoricPlayer, RegionCircle(UnitGetPosition(lv_deadUnit), 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), 1);
        }

        UnitSetPosition(lv_deadUnit, libNtve_gf_PointFacingAngle(UnitGetPosition(libGDHL_gv_hero_Leoric_WraithWalk_Unit[lv_leoricPlayer]), UnitGetFacing(libGDHL_gv_hero_Leoric_WraithWalk_Unit[lv_leoricPlayer])), false);
        UnitRemove(libGDHL_gv_hero_Leoric_WraithWalk_Unit[lv_leoricPlayer]);
        UnitBehaviorRemove(lv_deadUnit, "LeoricWraithWalkCasterBehavior", 1);
        libGame_gv_players[EventPlayer()].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[EventPlayer()].lv_heroUnitGroup;
        libGame_gf_CameraUpdateCameraForPlayer(EventPlayer());
        if ((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lv_leoricPlayer) == true)) {
            libAIAI_gv_aIHeroes[lv_leoricPlayer].lv_currentHeroUnit = libGame_gv_players[lv_leoricPlayer].lv_heroUnit;
        }

    }

    UnitSetPropertyFixed(lv_deadUnit, c_unitPropLife, 2.0);
    UnitSetPropertyFixed(lv_deadUnit, c_unitPropEnergy, 0.0);
    UnitBehaviorAdd(lv_deadUnit, "LeoricUndyingMinorStasis", lv_deadUnit, 1);
    UnitBehaviorAdd(lv_deadUnit, "Dead", lv_deadUnit, 1);
    if ((UnitBehaviorCount(lv_deadUnit, "NoDeadMechanics") == 0)) {
        UnitBehaviorAdd(lv_deadUnit, "DeadMechanics", lv_deadUnit, 1);
    }

    UnitBehaviorRemove(lv_deadUnit, "LeoricMarchoftheBlackKing", 1);
    libGame_gv_players[lv_leoricPlayer].lv_isDead = true;
    libGame_gf_SendEventHeroKilled(lv_killingPlayer, lv_deadUnit);
    libGDHL_gf_FullscreenOverlaysShowHideDeathOverlay(true, lv_leoricPlayer);
    libGame_gf_SendEventHeroEntersSpecialDeathState(lv_deadUnit);
    libGame_gf_UpdateStormMapLighting(PlayerGroupSingle(lv_leoricPlayer), 0.0);
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroLeoric", "LifeRegenRate", lv_leoricPlayer, "0");
    CatalogFieldValueSet(c_gameCatalogActor, "HeroLeoric", "CustomUnitStatusFrame", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "UnitStatus/HeroUnitStatusFrameAllGreyNoEnergyTemplate");
    if ((UnitBehaviorCount(lv_deadUnit, "LeoricReanimationTokenCounter") >= CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "LeoricReanimationTokenCounter", "Max", lv_leoricPlayer)) && (libCore_gv_sYSGameMode != libCore_ge_GameModes_TryMe)) {
        lv_deathTimer = (libCore_gf_HeroDeathTime(lv_leoricPlayer, UnitLevel(libGame_gv_players[lv_leoricPlayer].lv_heroUnit)) - libGDHL_gv_hero_Leoric_Undying_Reanimation_DeathTimeReduction);
    }
    else {
        lv_deathTimer = libCore_gf_HeroDeathTime(lv_leoricPlayer, UnitLevel(libGame_gv_players[lv_leoricPlayer].lv_heroUnit));
    }
    libGame_gf_HeroDeathStartRespawnTimer(lv_leoricPlayer, lv_deathTimer);
    libNtve_gf_SendActorMessageToUnit(lv_deadUnit, "SetShowStatusBar 1");
    UnitBehaviorAdd(lv_deadUnit, "LeoricUndying", lv_deadUnit, 1);
    if ((TimerGetDuration(libGame_gv_players[lv_leoricPlayer].lv_respawnTimer) > 0.0)) {
        UnitBehaviorSetDuration(lv_deadUnit, "LeoricUndying", TimerGetRemaining(libGame_gv_players[lv_leoricPlayer].lv_respawnTimer));
        UnitBehaviorSetDuration(lv_deadUnit, "Dead", TimerGetRemaining(libGame_gv_players[lv_leoricPlayer].lv_respawnTimer));
        libGDHL_gv_hero_Leoric_Undying_Dead_Duration[lv_leoricPlayer] = UnitBehaviorDurationTotal(lv_deadUnit, "LeoricUndying");
    }
    else {
        UnitBehaviorSetDuration(lv_deadUnit, "LeoricUndying", 0.0);
        UnitBehaviorSetDuration(lv_deadUnit, "Dead", 0.0);
        libGDHL_gv_hero_Leoric_Undying_Dead_Duration[lv_leoricPlayer] = UnitBehaviorDurationTotal(lv_deadUnit, "LeoricUndying");
    }
    CatalogFieldValueSet(c_gameCatalogEffect, "LeoricUndyingLifeRegenModifyUnit", "VitalArray[" + IntToString(0) + "].ChangeFraction", lv_leoricPlayer, FixedToString((0.5 / (libGDHL_gv_hero_Leoric_Undying_Dead_Duration[lv_leoricPlayer] - 2.0)), c_fixedPrecisionAny));
    libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer(false, lv_leoricPlayer);
    libUIUI_gf_DeathAnnouncementPanelRegisterDeath(lv_leoricPlayer, lv_killingPlayer, libGame_gv_players[lv_leoricPlayer].lv_heroData.lv_portrait, libGame_gv_players[lv_leoricPlayer].lv_heroUnit, libGame_gv_players[lv_leoricPlayer].lv_heroData.lv_name, libGame_gv_players[lv_leoricPlayer].lv_respawnTimer);
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroLeoric", "Collide[" + IntToString(1) + "]", lv_leoricPlayer, "0");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroLeoric", "Collide[" + IntToString(8) + "]", lv_leoricPlayer, "0");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroLeoric", "Collide[" + IntToString(10) + "]", lv_leoricPlayer, "1");
    libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay(true, lv_leoricPlayer);
    libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar("LeoricUndying", lv_leoricPlayer);
    libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer(true, UnitGetOwner(lv_deadUnit));
    libGDHL_gf_LeoricUIHeroSpecificStatusFrameUpdateLeoricUIValue(lv_leoricPlayer);
    libGDHL_gf_LeoricUIHeroSpecificStatusFrameShowHideLeoricTraitUI(true, lv_leoricPlayer);
    if ((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lv_leoricPlayer) == true) && (EventPlayerEffectUsedUnit(c_effectUnitCaster) == libGame_gv_players[lv_leoricPlayer].lv_heroUnit)) {
        libAIAI_gf_HeroAILeaveCurrentObjective(lv_leoricPlayer);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LeoricUndyingStart_Init () {
    libGDHL_gt_LeoricUndyingStart = TriggerCreate("libGDHL_gt_LeoricUndyingStart_Func");
    TriggerEnable(libGDHL_gt_LeoricUndyingStart, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_LeoricUndyingStart, c_playerAny, "LeoricApplyUndyingBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leoric - Undying End
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LeoricUndyingEnd_Func (bool testConds, bool runActions) {
    int auto87E5FACA_ae;
    int auto87E5FACA_ai;

    // Variable Declarations
    fixed lv_leoricRegen;
    int lv_itLevel;
    unit lv_deadUnit;
    int lv_leoricPlayer;
    int lv_deadPlayer;
    int lv_killingPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadUnit = EventUnit();
    lv_leoricPlayer = UnitGetOwner(lv_deadUnit);
    if ((lv_leoricPlayer > libCore_gv_bALMaxEnginePlayerCount)) {
        return true;
    }

    libGame_gv_players[lv_leoricPlayer].lv_isDead = false;
    UnitBehaviorRemove(lv_deadUnit, "Dead", 1);
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroLeoric", "Collide[" + IntToString(1) + "]", lv_leoricPlayer, "1");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroLeoric", "Collide[" + IntToString(8) + "]", lv_leoricPlayer, "1");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroLeoric", "Collide[" + IntToString(10) + "]", lv_leoricPlayer, "0");
    Wait(1.0, c_timeGame);
    libGame_gf_SendEventHeroRespawn(lv_leoricPlayer);
    lv_leoricRegen = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, "HeroLeoric", "LifeRegenRate", 0));
    auto87E5FACA_ae = libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_leoricPlayer)].lv_teamLevel;
    auto87E5FACA_ai = 1;
    lv_itLevel = 1;
    for ( ; ( (auto87E5FACA_ai >= 0 && lv_itLevel <= auto87E5FACA_ae) || (auto87E5FACA_ai <= 0 && lv_itLevel >= auto87E5FACA_ae) ) ; lv_itLevel += auto87E5FACA_ai ) {
        lv_leoricRegen = (lv_leoricRegen * (StringToFixed(CatalogFieldValueGet(c_gameCatalogHero, "Leoric", "LevelScalingArray[" + IntToString(8) + "].Modifications[" + IntToString(2) + "].Value", c_playerAny)) + 1.0));
    }
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroLeoric", "LifeRegenRate", lv_leoricPlayer, FixedToString(lv_leoricRegen, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogActor, "HeroLeoric", "CustomUnitStatusFrame", UnitGetOwner(EventUnit()), "UnitStatus/HeroUnitStatusFrameTemplate");
    libGDHL_gf_FullscreenOverlaysShowHideDeathOverlay(false, lv_leoricPlayer);
    UnitBehaviorRemove(lv_deadUnit, "SuppressRegeneration", 1);
    PlayerScoreValueSetFromInt(lv_leoricPlayer, "DeadHeroLastKnownHealth", 0);
    libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(false, lv_leoricPlayer);
    libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_Revive, lv_leoricPlayer, libCore_gv_playerGroupFromPlayer[lv_leoricPlayer]);
    Wait(4.0, c_timeGame);
    if ((libGame_gv_players[lv_leoricPlayer].lv_isDead == false)) {
        libGDHL_gf_LeoricUIHeroSpecificStatusFrameShowHideLeoricTraitUI(false, lv_leoricPlayer);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LeoricUndyingEnd_Init () {
    libGDHL_gt_LeoricUndyingEnd = TriggerCreate("libGDHL_gt_LeoricUndyingEnd_Func");
    TriggerEnable(libGDHL_gt_LeoricUndyingEnd, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_LeoricUndyingEnd, null, "LeoricUndying", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leoric - Swapped During Undying
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LeoricSwappedDuringUndying_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[libGame_gf_DebugHeroSwappedPlayer()].lv_heroUnit) == "HeroLeoric"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = libGame_gf_DebugHeroSwappedPlayer();
    CatalogFieldValueSet(c_gameCatalogActor, "HeroLeoric", "CustomUnitStatusFrame", lv_player, "UnitStatus/HeroUnitStatusFrameTemplate");
    libGame_gf_SendEventHeroRespawn(lv_player);
    libGDHL_gf_FullscreenOverlaysShowHideDeathOverlay(false, lv_player);
    libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(false, lv_player);
    libGDHL_gf_LeoricUIHeroSpecificStatusFrameShowHideLeoricTraitUI(false, lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LeoricSwappedDuringUndying_Init () {
    libGDHL_gt_LeoricSwappedDuringUndying = TriggerCreate("libGDHL_gt_LeoricSwappedDuringUndying_Func");
    TriggerEnable(libGDHL_gt_LeoricSwappedDuringUndying, false);
    libGame_gf_DebugHeroSwapped(libGDHL_gt_LeoricSwappedDuringUndying);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leoric - Undying - Healing Death Timer Reduction
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LeoricUndyingHealingDeathTimerReduction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_leoricUnit;
    int lv_leoricPlayer;
    fixed lv_currentTotalRespawnTime;
    fixed lv_reducedTotalRespawnTime;
    fixed lv_healthRegenPercentage;
    fixed lv_timeReduced;

    // Variable Initialization
    lv_leoricUnit = EventUnit();
    lv_leoricPlayer = UnitGetOwner(lv_leoricUnit);
    lv_currentTotalRespawnTime = libGDHL_gv_hero_Leoric_Undying_Dead_Duration[lv_leoricPlayer];

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_leoricUnit, "LeoricUndying") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_healthRegenPercentage = (EventUnitHealAmount() / UnitGetPropertyFixed(lv_leoricUnit, c_unitPropLifeMax, c_unitPropCurrent));
    lv_reducedTotalRespawnTime = (lv_currentTotalRespawnTime * (1.0 - lv_healthRegenPercentage));
    lv_timeReduced = (lv_reducedTotalRespawnTime - lv_currentTotalRespawnTime);
    libGDHL_gv_hero_Leoric_Undying_Dead_Time_Saved[lv_leoricPlayer] -= lv_timeReduced;
    libGame_gf_HeroDeathModifyRespawnTimer(lv_leoricPlayer, lv_timeReduced);
    libGDHL_gf_LeoricUIHeroSpecificStatusFrameUpdateLeoricUIValue(lv_leoricPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LeoricUndyingHealingDeathTimerReduction_Init () {
    libGDHL_gt_LeoricUndyingHealingDeathTimerReduction = TriggerCreate("libGDHL_gt_LeoricUndyingHealingDeathTimerReduction_Func");
    TriggerAddEventUnitHealed(libGDHL_gt_LeoricUndyingHealingDeathTimerReduction, null, c_unitVitalLife, "LeoricUndyingReanimationLifeRegenHealer");
    TriggerAddEventUnitHealed(libGDHL_gt_LeoricUndyingHealingDeathTimerReduction, null, c_unitVitalLife, "LeoricMasteryFealtyUntoDeathRestoreLifeUndying");
    TriggerAddEventUnitHealed(libGDHL_gt_LeoricUndyingHealingDeathTimerReduction, null, c_unitVitalLife, "LeoricGhastlySwingConsumeVitality");
    TriggerAddEventUnitHealed(libGDHL_gt_LeoricUndyingHealingDeathTimerReduction, null, c_unitVitalLife, "LeoricOsseinRenewalDeadHealer");
    TriggerAddEventUnitHealed(libGDHL_gt_LeoricUndyingHealingDeathTimerReduction, null, c_unitVitalLife, "LeoricDrainHopeGhostPeriodicHealerBase");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leoric UI Initialize
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LeoricUIInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlCreateInPanelFromTemplate(libUIUI_gv_heroSpecificStatusContainer, c_triggerControlTypePanel, "Leoric/LeoricTraitFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libGDHL_gv_leoricUI.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "LeoricTraitLabel");
    libGDHL_gv_leoricUI.lv_traitLabel = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LeoricUIInitialize_Init () {
    libGDHL_gt_LeoricUIInitialize = TriggerCreate("libGDHL_gt_LeoricUIInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leoric UI Clean Up UI For Hero Swap
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LeoricUICleanUpUIForHeroSwap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = libGame_gf_DebugHeroSwappedPlayer();
    libGDHL_gf_LeoricUIClearUIForHeroSwap(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LeoricUICleanUpUIForHeroSwap_Init () {
    libGDHL_gt_LeoricUICleanUpUIForHeroSwap = TriggerCreate("libGDHL_gt_LeoricUICleanUpUIForHeroSwap_Func");
    libGame_gf_DebugHeroSwapped(libGDHL_gt_LeoricUICleanUpUIForHeroSwap);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Leoric - Add Reanimation Stack While In Vehicle
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLeoricAddReanimationStackWhileInVehicle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_leoricVehicle;
    unit lv_leoricHeroUnit;

    // Variable Initialization
    lv_leoricVehicle = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_leoricHeroUnit = libGame_gv_players[EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget)].lv_heroUnit;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(lv_leoricHeroUnit, "LeoricReanimationTokenCounter") < CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "LeoricReanimationTokenCounter", "Max", c_playerAny))) {
        UnitCreateEffectUnit(lv_leoricHeroUnit, "LeoricReanimationModifyToken", lv_leoricHeroUnit);
        UnitCreateEffectUnit(lv_leoricVehicle, "TalentQuestProgressDummySet", lv_leoricVehicle);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLeoricAddReanimationStackWhileInVehicle_Init () {
    libGDHL_gt_HeroLeoricAddReanimationStackWhileInVehicle = TriggerCreate("libGDHL_gt_HeroLeoricAddReanimationStackWhileInVehicle_Func");
    TriggerEnable(libGDHL_gt_HeroLeoricAddReanimationStackWhileInVehicle, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroLeoricAddReanimationStackWhileInVehicle, c_playerAny, "LeoricReanimationVehicleDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leoric - Fealty Unto Death - Enemy NPC Proc Listener
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LeoricFealtyUntoDeathEnemyNPCProcListener_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingPlayer;
    unit lv_minion;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killingPlayer = libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer();
    lv_minion = libGame_gf_HeroParticipatedInNPCTakedownMinion();
    if ((UnitHasBehavior2(libGame_gv_players[lv_killingPlayer].lv_heroUnit, "LeoricMasteryFealtyUntoDeathCarryBehavior") == true) && (UnitTypeTestAttribute(UnitGetType(lv_minion), c_unitAttributeSummoned) == false) && (UnitTypeTestAttribute(UnitGetType(lv_minion), c_unitAttributeStructure) == false) && (UnitTypeTestAttribute(UnitGetType(lv_minion), c_unitAttributeLight) == false) && ((UnitTypeTestAttribute(UnitGetType(lv_minion), c_unitAttributeRobotic) == true) || (UnitTypeTestAttribute(UnitGetType(lv_minion), c_unitAttributeBiological) == true))) {
        if ((UnitHasBehavior2(libGame_gv_players[lv_killingPlayer].lv_heroUnit, "LeoricUndying") == true)) {
            UnitCreateEffectUnitWithSource(libGame_gv_players[lv_killingPlayer].lv_heroUnit, "LeoricMasteryFealtyUntoDeathRestoreLifeUndying", libGame_gv_players[lv_killingPlayer].lv_heroUnit, c_gameCatalogBehavior, "LeoricMasteryFealtyUntoDeathCarryBehavior");
        }
        else {
            UnitCreateEffectUnitWithSource(libGame_gv_players[lv_killingPlayer].lv_heroUnit, "LeoricMasteryFealtyUntoDeathImpactSet", libGame_gv_players[lv_killingPlayer].lv_heroUnit, c_gameCatalogBehavior, "LeoricMasteryFealtyUntoDeathCarryBehavior");
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LeoricFealtyUntoDeathEnemyNPCProcListener_Init () {
    libGDHL_gt_LeoricFealtyUntoDeathEnemyNPCProcListener = TriggerCreate("libGDHL_gt_LeoricFealtyUntoDeathEnemyNPCProcListener_Func");
    TriggerEnable(libGDHL_gt_LeoricFealtyUntoDeathEnemyNPCProcListener, false);
    libGame_gf_HeroParticipatedInNPCTakedown(libGDHL_gt_LeoricFealtyUntoDeathEnemyNPCProcListener);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Leoric - Fealty Unto Death - Allied NPC Proc Listener
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LeoricFealtyUntoDeathAlliedNPCProcListener_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_alliedPlayer;
    unit lv_killedNPC;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_alliedPlayer = libGame_gf_HeroWitnessedAlliedNPCDeathAlliedPlayer();
    lv_killedNPC = libGame_gf_HeroWitnessedAlliedNPCDeathMinion();
    if ((UnitHasBehavior2(libGame_gv_players[lv_alliedPlayer].lv_heroUnit, "LeoricMasteryFealtyUntoDeathCarryBehavior") == true) && (UnitTypeTestAttribute(UnitGetType(lv_killedNPC), c_unitAttributeSummoned) == false) && (UnitTypeTestAttribute(UnitGetType(lv_killedNPC), c_unitAttributeStructure) == false) && (UnitTypeTestAttribute(UnitGetType(lv_killedNPC), c_unitAttributeLight) == false) && ((UnitTypeTestAttribute(UnitGetType(lv_killedNPC), c_unitAttributeRobotic) == true) || (UnitTypeTestAttribute(UnitGetType(lv_killedNPC), c_unitAttributeBiological) == true))) {
        if ((UnitHasBehavior2(libGame_gv_players[lv_alliedPlayer].lv_heroUnit, "LeoricUndying") == true)) {
            UnitCreateEffectUnitWithSource(libGame_gv_players[lv_alliedPlayer].lv_heroUnit, "LeoricMasteryFealtyUntoDeathRestoreLifeUndying", libGame_gv_players[lv_alliedPlayer].lv_heroUnit, c_gameCatalogBehavior, "LeoricMasteryFealtyUntoDeathCarryBehavior");
        }
        else {
            UnitCreateEffectUnitWithSource(libGame_gv_players[lv_alliedPlayer].lv_heroUnit, "LeoricMasteryFealtyUntoDeathImpactSet", libGame_gv_players[lv_alliedPlayer].lv_heroUnit, c_gameCatalogBehavior, "LeoricMasteryFealtyUntoDeathCarryBehavior");
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LeoricFealtyUntoDeathAlliedNPCProcListener_Init () {
    libGDHL_gt_LeoricFealtyUntoDeathAlliedNPCProcListener = TriggerCreate("libGDHL_gt_LeoricFealtyUntoDeathAlliedNPCProcListener_Func");
    TriggerEnable(libGDHL_gt_LeoricFealtyUntoDeathAlliedNPCProcListener, false);
    libGame_gf_HeroWitnessedAlliedNPCDeath(libGDHL_gt_LeoricFealtyUntoDeathAlliedNPCProcListener);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Viking Bribery NPC Proc Listener
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsVikingBriberyNPCProcListener_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingPlayer;
    unit lv_minion;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killingPlayer = libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer();
    lv_minion = libGame_gf_HeroParticipatedInNPCTakedownMinion();
    libGDHL_gf_VikingBriberyProc(lv_killingPlayer, lv_minion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsVikingBriberyNPCProcListener_Init () {
    libGDHL_gt_HeroLostVikingsVikingBriberyNPCProcListener = TriggerCreate("libGDHL_gt_HeroLostVikingsVikingBriberyNPCProcListener_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsVikingBriberyNPCProcListener, false);
    libGame_gf_HeroParticipatedInNPCTakedown(libGDHL_gt_HeroLostVikingsVikingBriberyNPCProcListener);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Viking Bribery Used
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsVikingBriberyUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_raynorUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_raynorUnit = libGame_gv_players[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)].lv_heroUnit;
    UnitCreateEffectUnit(lv_raynorUnit, "LostVikingsVikingBriberyRemoveStackBehavior", lv_raynorUnit);
    UnitGroupLoopBegin(libGame_gv_players[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitCreateEffectUnit(UnitGroupLoopCurrent(), "LostVikingsVikingBriberyDecreaseVisualTokenCounter", UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    PlayerScoreValueSetFromInt(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), "LostVikingsVikingBriberyStackScore", UnitBehaviorCount(lv_raynorUnit, "LostVikingsVikingBriberyStacks"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsVikingBriberyUsed_Init () {
    libGDHL_gt_HeroLostVikingsVikingBriberyUsed = TriggerCreate("libGDHL_gt_HeroLostVikingsVikingBriberyUsed_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsVikingBriberyUsed, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroLostVikingsVikingBriberyUsed, c_playerAny, "LostVikingsVikingBriberySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Viking Bribery Score Reset
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsVikingBriberyScoreReset_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerScoreValueSetFromInt(UnitGetOwner(EventUnit()), "LostVikingsVikingBriberyStackScore", 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsVikingBriberyScoreReset_Init () {
    libGDHL_gt_HeroLostVikingsVikingBriberyScoreReset = TriggerCreate("libGDHL_gt_HeroLostVikingsVikingBriberyScoreReset_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsVikingBriberyScoreReset, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroLostVikingsVikingBriberyScoreReset, null, "LostVikingsVikingBriberyCarryBehavior", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Viking Bribery Add Stacks on Cooldown Reset
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsVikingBriberyAddStacksonCooldownReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(libGame_gf_SpecialCaseTalentCooldownResetPlayer(), "LostVikingsMasteryVikingBribery") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = libGame_gf_SpecialCaseTalentCooldownResetPlayer();
    PlayerScoreValueSetFromInt(lv_player, "LostVikingsVikingBriberyStackScore", 100);
    UnitBehaviorAdd(libGame_gv_players[lv_player].lv_heroUnit, "LostVikingsVikingBriberyStacks", libGame_gv_players[lv_player].lv_heroUnit, 100);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsVikingBriberyAddStacksonCooldownReset_Init () {
    libGDHL_gt_HeroLostVikingsVikingBriberyAddStacksonCooldownReset = TriggerCreate("libGDHL_gt_HeroLostVikingsVikingBriberyAddStacksonCooldownReset_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsVikingBriberyAddStacksonCooldownReset, false);
    libGame_gf_SpecialCaseTalentCooldownReset(libGDHL_gt_HeroLostVikingsVikingBriberyAddStacksonCooldownReset);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Viking Hoard
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsVikingHoard_Func (bool testConds, bool runActions) {
    unitgroup autoD0FFDC0B_g;
    int autoD0FFDC0B_u;
    playergroup autoF761DB16_g;
    int autoF761DB16_p;
    unitgroup autoE5826E76_g;
    int autoE5826E76_u;

    // Variable Declarations
    playergroup lv_itVikingsPlayerGroup;
    unit lv_itRegenGlobeTarget;
    int lv_itVikingsPlayer;
    unit lv_itVikingPerPlayer;

    // Variable Initialization
    lv_itVikingsPlayerGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    autoD0FFDC0B_g = UnitGroupAlliance(EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), c_unitAllianceAlly, RegionCircle(UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget)), 12.0), libCore_gv_filtersHeroicAllyorPlayerandnotStasis, 0);
    autoD0FFDC0B_u = 1;
    for ( ; autoD0FFDC0B_u <= UnitGroupCount(autoD0FFDC0B_g, c_unitCountAll) ; autoD0FFDC0B_u += (lv_itRegenGlobeTarget == UnitGroupUnit(autoD0FFDC0B_g, autoD0FFDC0B_u)) ) {
        lv_itRegenGlobeTarget = UnitGroupUnit(autoD0FFDC0B_g, autoD0FFDC0B_u);
        if (((UnitGetType(lv_itRegenGlobeTarget) == "HeroErik") || (UnitGetType(lv_itRegenGlobeTarget) == "HeroOlaf") || (UnitGetType(lv_itRegenGlobeTarget) == "HeroBaleog"))) {
            PlayerGroupAdd(lv_itVikingsPlayerGroup, UnitGetOwner(lv_itRegenGlobeTarget));
        }

    }
    autoF761DB16_g = lv_itVikingsPlayerGroup; 
    autoF761DB16_p = 1;
    for ( ; autoF761DB16_p <= PlayerGroupCount(autoF761DB16_g) ; autoF761DB16_p += (lv_itVikingsPlayer == PlayerGroupPlayer(autoF761DB16_g, autoF761DB16_p)) ) {
        lv_itVikingsPlayer = PlayerGroupPlayer(autoF761DB16_g, autoF761DB16_p);
        if ((UnitGetType(libGame_gv_players[lv_itVikingsPlayer].lv_heroUnit) == "HeroAbathur")) {
            UnitCreateEffectUnit(libGame_gv_players[lv_itVikingsPlayer].lv_activeVehicle, "LostVikingsVikingHoardIncrementTokenCounter", libGame_gv_players[lv_itVikingsPlayer].lv_activeVehicle);
        }
        else {
            autoE5826E76_g = libGame_gv_players[lv_itVikingsPlayer].lv_heroUnitGroup;
            autoE5826E76_u = 1;
            for ( ; autoE5826E76_u <= UnitGroupCount(autoE5826E76_g, c_unitCountAll) ; autoE5826E76_u += (lv_itVikingPerPlayer == UnitGroupUnit(autoE5826E76_g, autoE5826E76_u)) ) {
                lv_itVikingPerPlayer = UnitGroupUnit(autoE5826E76_g, autoE5826E76_u);
                UnitCreateEffectUnit(lv_itVikingPerPlayer, "LostVikingsVikingHoardIncrementTokenCounter", lv_itVikingPerPlayer);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsVikingHoard_Init () {
    libGDHL_gt_HeroLostVikingsVikingHoard = TriggerCreate("libGDHL_gt_HeroLostVikingsVikingHoard_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsVikingHoard, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroLostVikingsVikingHoard, c_playerAny, "LostVikingsVikingHoardDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Spin To Win
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsSpinToWin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    if ((lv_player >= 1) && (lv_player <= 10) && (UnitGetType(lv_unit) != "HeroLostVikingsController")) {
        UnitCreateEffectUnitWithSource(lv_unit, "LostVikingsSpinToWinSearch", lv_unit, c_gameCatalogAbil, "LostVikingsSpinToWin");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsSpinToWin_Init () {
    libGDHL_gt_HeroLostVikingsSpinToWin = TriggerCreate("libGDHL_gt_HeroLostVikingsSpinToWin_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsSpinToWin, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroLostVikingsSpinToWin, c_playerAny, "LostVikingsSpinToWinVikingImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Olaf The Stout
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsOlafTheStout_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerHero(libGame_gf_HeroGainTalentPlayer()) == "LostVikings"))) {
            return false;
        }

        if (!((PlayerHasTalent(libGame_gf_HeroGainTalentPlayer(), "LostVikingsMasteryOlafTheStout") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(libGame_gv_players[libGame_gf_HeroGainTalentPlayer()].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "HeroOlaf")) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "TalentBucketBlockChargedTarget", UnitGroupLoopCurrent(), 1);
            break;
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsOlafTheStout_Init () {
    libGDHL_gt_HeroLostVikingsOlafTheStout = TriggerCreate("libGDHL_gt_HeroLostVikingsOlafTheStout_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsOlafTheStout, false);
    libGame_gf_HeroGainTalent(libGDHL_gt_HeroLostVikingsOlafTheStout);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Respawn Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsRespawnTimerExpires_Func (bool testConds, bool runActions) {
    int autoA538AB50_ae;
    int autoA538AB50_ai;
    timer autoF35FEBDB_val;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoA538AB50_ae = libCore_gv_bALMaxPlayers;
    autoA538AB50_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoA538AB50_ai >= 0 && lv_itPlayer <= autoA538AB50_ae) || (autoA538AB50_ai <= 0 && lv_itPlayer >= autoA538AB50_ae) ) ; lv_itPlayer += autoA538AB50_ai ) {
        autoF35FEBDB_val = EventTimer();
        if (autoF35FEBDB_val == libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_erikDeathTimer) {
            libGDHL_gf_HeroDeathRespawnHeroforPlayer(libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_erik);
            break;
        }
        else if (autoF35FEBDB_val == libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_baleogDeathTimer) {
            libGDHL_gf_HeroDeathRespawnHeroforPlayer(libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_baleog);
            break;
        }
        else if (autoF35FEBDB_val == libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_olafDeathTimer) {
            libGDHL_gf_HeroDeathRespawnHeroforPlayer(libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_olaf);
            break;
        }
        else {
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsRespawnTimerExpires_Init () {
    libGDHL_gt_HeroLostVikingsRespawnTimerExpires = TriggerCreate("libGDHL_gt_HeroLostVikingsRespawnTimerExpires_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, false);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[1].lv_erikDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[1].lv_baleogDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[1].lv_olafDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[2].lv_erikDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[2].lv_baleogDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[2].lv_olafDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[3].lv_erikDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[3].lv_baleogDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[3].lv_olafDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[4].lv_erikDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[4].lv_baleogDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[4].lv_olafDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[5].lv_erikDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[5].lv_baleogDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[5].lv_olafDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[6].lv_erikDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[6].lv_baleogDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[6].lv_olafDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[7].lv_erikDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[7].lv_baleogDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[7].lv_olafDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[8].lv_erikDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[8].lv_baleogDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[8].lv_olafDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[9].lv_erikDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[9].lv_baleogDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[9].lv_olafDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[10].lv_erikDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[10].lv_baleogDeathTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsRespawnTimerExpires, libGDHL_gv_lostVikingsPlayer[10].lv_olafDeathTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Spawn
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lVPlayer;
    unit lv_lVController;
    int lv_itLostVikingsPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "HeroLostVikingsController"))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitCreatedUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitCreatedUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lVPlayer = UnitGetOwner(EventUnitCreatedUnit());
    lv_lVController = EventUnitCreatedUnit();
    AIRemovePlayerUnit(lv_lVController);
    UISetSelectionTypeEnabled(PlayerGroupSingle(lv_lVPlayer), c_localSelectionTypeUnknown, true);
    UISetDragSelectEnabled(PlayerGroupSingle(lv_lVPlayer), true);
    UISetFrameVisible(PlayerGroupSingle(lv_lVPlayer), c_syncFrameTypeControlGroupPanel, true);
    UnitControlGroupClear(lv_lVPlayer, 1);
    UnitControlGroupClear(lv_lVPlayer, 2);
    UnitControlGroupClear(lv_lVPlayer, 3);
    UnitControlGroupClear(lv_lVPlayer, 4);
    libNtve_gf_CreateUnitsAtPoint2(1, "HeroOlaf", 0, lv_lVPlayer, PointWithOffsetPolar(UnitGetPosition(lv_lVController), 1.5, 240.0));
    UnitSetFacing(UnitLastCreated(), PointGetFacing(libGame_gv_players[lv_lVPlayer].lv_spawnPoint), 0.0);
    UnitGroupAdd(libGame_gv_players[lv_lVPlayer].lv_heroUnitGroup, UnitLastCreated());
    AIAddPlayerUnit(UnitLastCreated());
    UnitControlGroupAddUnit(lv_lVPlayer, 1, UnitLastCreated());
    PathCreateForUnit(libCore_gv_playerGroupFromPlayer[lv_lVPlayer], UnitLastCreated());
    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilEffectInstant, c_abilClassFilterExcluded);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilEffectTarget, c_abilClassFilterExcluded);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilArmMagazine, c_abilClassFilterExcluded);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilInventory, c_abilClassFilterExcluded);
    PathSetLineTexture(PathLastCreated(), c_pathLocationAll, "Assets\\Textures\\storm_waypointline.dds");
    libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafPath = PathLastCreated();
    libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olaf = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "HeroBaleog", 0, lv_lVPlayer, PointWithOffsetPolar(UnitGetPosition(lv_lVController), 1.5, 120.0));
    UnitSetFacing(UnitLastCreated(), PointGetFacing(libGame_gv_players[lv_lVPlayer].lv_spawnPoint), 0.0);
    UnitGroupAdd(libGame_gv_players[lv_lVPlayer].lv_heroUnitGroup, UnitLastCreated());
    AIAddPlayerUnit(UnitLastCreated());
    UnitControlGroupAddUnit(lv_lVPlayer, 2, UnitLastCreated());
    PathCreateForUnit(libCore_gv_playerGroupFromPlayer[lv_lVPlayer], UnitLastCreated());
    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilEffectInstant, c_abilClassFilterExcluded);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilEffectTarget, c_abilClassFilterExcluded);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilArmMagazine, c_abilClassFilterExcluded);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilInventory, c_abilClassFilterExcluded);
    PathSetLineTexture(PathLastCreated(), c_pathLocationAll, "Assets\\Textures\\storm_waypointline.dds");
    libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogPath = PathLastCreated();
    libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleog = UnitLastCreated();
    libNtve_gf_CreateUnitsAtPoint2(1, "HeroErik", 0, lv_lVPlayer, PointWithOffsetPolar(UnitGetPosition(lv_lVController), 1.5, 0.0));
    UnitSetFacing(UnitLastCreated(), PointGetFacing(libGame_gv_players[lv_lVPlayer].lv_spawnPoint), 0.0);
    UnitGroupAdd(libGame_gv_players[lv_lVPlayer].lv_heroUnitGroup, UnitLastCreated());
    AIAddPlayerUnit(UnitLastCreated());
    UnitControlGroupAddUnit(lv_lVPlayer, 3, UnitLastCreated());
    UnitControlGroupAddUnits(lv_lVPlayer, 4, libGame_gv_players[lv_lVPlayer].lv_heroUnitGroup);
    UnitControlGroupRemoveUnit(lv_lVPlayer, 4, libGame_gv_players[lv_lVPlayer].lv_heroUnit);
    PathCreateForUnit(libCore_gv_playerGroupFromPlayer[lv_lVPlayer], UnitLastCreated());
    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilEffectInstant, c_abilClassFilterExcluded);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilEffectTarget, c_abilClassFilterExcluded);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilArmMagazine, c_abilClassFilterExcluded);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilInventory, c_abilClassFilterExcluded);
    PathSetLineTexture(PathLastCreated(), c_pathLocationAll, "Assets\\Textures\\storm_waypointline.dds");
    libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikPath = PathLastCreated();
    libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erik = UnitLastCreated();
    libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_player = lv_lVPlayer;
    libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_centerViking = UnitLastCreated();
    libGame_gv_players[lv_lVPlayer].lv_cameraCurrentTargetGroup = null;
    libGame_gv_players[lv_lVPlayer].lv_cameraPlayerUnitGroupToFocusOn = null;
    libGame_gf_CameraUpdateCameraForPlayer(lv_lVPlayer);
    libUIUI_gf_UIUnitStatusFramesHookupUnitStatusFramesForPlayer(lv_lVPlayer);
    libUIUI_gf_UIHeroTrackerArrowHookupTrackerArrowsForPlayer(lv_lVPlayer);
    libGDHL_gf_LostVikingsUISetupUIForPlayer(lv_lVPlayer);
    libGDHL_gf_LostVikingsHeroConsoleUnitStatusBarsSetUnitForBars(lv_lVPlayer);
    libGame_gv_players[lv_lVPlayer].lv_soundDeathAlertPrefix = "UI_HeroDeath_LostVikings_";
    UnitGroupLoopBegin(libGame_gv_players[lv_lVPlayer].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "Signal Respawn");
        UnitGroupSelect(libNtve_gf_ConvertUnitToUnitGroup(UnitGroupLoopCurrent()), lv_lVPlayer, true);
    }
    UnitGroupLoopEnd();
    UnitGroupSelect(libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[lv_lVPlayer].lv_heroUnit), lv_lVPlayer, false);
    TriggerEnable(libGDHL_gt_HeroLostVikingsUnitControllerUpdate, true);
    TriggerEnable(libGDHL_gt_HeroLostVikingsCheckpointReachedTimerCountdown, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsSpawn_Init () {
    libGDHL_gt_HeroLostVikingsSpawn = TriggerCreate("libGDHL_gt_HeroLostVikingsSpawn_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsSpawn, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroLostVikingsSpawn, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Debug Swap
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsDebugSwap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lVPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lVPlayer = libGame_gf_DebugHeroSwappedPlayer();
    libUIUI_gf_DeathTimerPanelUnregisterTimer(libGame_gf_TeamNumberOfPlayer(libGame_gf_DebugHeroSwappedPlayer()), libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafDeathTimer);
    libUIUI_gf_DeathTimerPanelUnregisterTimer(libGame_gf_TeamNumberOfPlayer(libGame_gf_DebugHeroSwappedPlayer()), libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikDeathTimer);
    libUIUI_gf_DeathTimerPanelUnregisterTimer(libGame_gf_TeamNumberOfPlayer(libGame_gf_DebugHeroSwappedPlayer()), libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogDeathTimer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsDebugSwap_Init () {
    libGDHL_gt_HeroLostVikingsDebugSwap = TriggerCreate("libGDHL_gt_HeroLostVikingsDebugSwap_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsDebugSwap, false);
    libGame_gf_DebugHeroSwapped(libGDHL_gt_HeroLostVikingsDebugSwap);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Viking Dies
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsVikingDies_Func (bool testConds, bool runActions) {
    string auto643616C6_val;
    unitgroup autoF6B19C6F_g;
    int autoF6B19C6F_u;
    int auto48403D2E_ae;
    int auto48403D2E_ai;
    string auto825968C9_val;

    // Variable Declarations
    unit lv_deadUnit;
    unitgroup lv_vikingUnitGroupIgnoringController;
    int lv_lVPlayer;
    int lv_killingPlayer;
    playergroup lv_killingTeamGroup;
    playergroup lv_killingGroup;
    string lv_downedBehavior;
    string lv_vikingDeathIcon;
    timer lv_vikingDeathTimer;
    bool lv_allVikingsDown;
    int lv_itViking;
    unit lv_itLivingViking;
    unitgroup lv_selectedUnits;

    // Variable Initialization
    lv_deadUnit = EventUnit();
    lv_vikingUnitGroupIgnoringController = UnitGroupEmpty();
    lv_lVPlayer = EventPlayer();
    lv_killingPlayer = libNtve_gf_KillingPlayer();
    lv_killingTeamGroup = PlayerGroupEmpty();
    lv_killingGroup = PlayerGroupEmpty();
    lv_vikingDeathTimer = TimerCreate();
    lv_allVikingsDown = true;
    lv_selectedUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[UnitGetOwner(lv_deadUnit)].lv_heroUnit) != "HeroAbathur"))) {
            return false;
        }

        if (!(((UnitGetType(lv_deadUnit) == "HeroBaleog") || (UnitGetType(lv_deadUnit) == "HeroOlaf") || (UnitGetType(lv_deadUnit) == "HeroErik")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killingPlayer = libNtve_gf_KillingPlayer();
    libGame_gf_SendEventHeroKilled(lv_killingPlayer, lv_deadUnit);
    auto643616C6_val = UnitGetType(lv_deadUnit);
    if (auto643616C6_val == "HeroErik") {
        lv_downedBehavior = "LostVikingsErikDowned";
        lv_vikingDeathTimer = libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikDeathTimer;
        DialogControlSendAnimationEvent(libGDHL_gv_lostVikingsUI.lv_erikDeathStatusFrame, libCore_gv_playerGroupFromPlayer[lv_lVPlayer], "UnitDead");
        libNtve_gf_CreateUnitsAtPoint2(1, "EriksGravestone", 0, lv_lVPlayer, PointWithOffsetPolar(libGame_gv_players[lv_lVPlayer].lv_spawnPoint, 1.5, libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_respawnPolarOffset));
        libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikGravestone = UnitLastCreated();
        UnitControlGroupAddUnit(lv_lVPlayer, 3, libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikGravestone);
        UnitControlGroupAddUnit(lv_lVPlayer, 4, libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikGravestone);
        libGDHL_gf_VikingDownGiveCarryBehaviorsToGravestone(lv_deadUnit, libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikGravestone);
    }
    else if (auto643616C6_val == "HeroBaleog") {
        lv_downedBehavior = "LostVikingsBaleogDowned";
        lv_vikingDeathTimer = libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogDeathTimer;
        DialogControlSendAnimationEvent(libGDHL_gv_lostVikingsUI.lv_baleogDeathStatusFrame, libCore_gv_playerGroupFromPlayer[lv_lVPlayer], "UnitDead");
        libNtve_gf_CreateUnitsAtPoint2(1, "BaleogsGravestone", 0, lv_lVPlayer, PointWithOffsetPolar(libGame_gv_players[lv_lVPlayer].lv_spawnPoint, 1.5, libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_respawnPolarOffset));
        libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogGravestone = UnitLastCreated();
        UnitControlGroupAddUnit(lv_lVPlayer, 2, libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogGravestone);
        UnitControlGroupAddUnit(lv_lVPlayer, 4, libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogGravestone);
        libGDHL_gf_VikingDownGiveCarryBehaviorsToGravestone(lv_deadUnit, libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogGravestone);
    }
    else if (auto643616C6_val == "HeroOlaf") {
        lv_downedBehavior = "LostVikingsOlafDowned";
        lv_vikingDeathTimer = libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafDeathTimer;
        DialogControlSendAnimationEvent(libGDHL_gv_lostVikingsUI.lv_olafDeathStatusFrame, libCore_gv_playerGroupFromPlayer[lv_lVPlayer], "UnitDead");
        libNtve_gf_CreateUnitsAtPoint2(1, "OlafsGravestone", 0, lv_lVPlayer, PointWithOffsetPolar(libGame_gv_players[lv_lVPlayer].lv_spawnPoint, 1.5, libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_respawnPolarOffset));
        libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafGravestone = UnitLastCreated();
        UnitControlGroupAddUnit(lv_lVPlayer, 1, libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafGravestone);
        UnitControlGroupAddUnit(lv_lVPlayer, 4, libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafGravestone);
        libGDHL_gf_VikingDownGiveCarryBehaviorsToGravestone(lv_deadUnit, libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafGravestone);
    }
    else {
    }
    if ((UnitIsSelected(lv_deadUnit, lv_lVPlayer) == true)) {
        UnitSelect(UnitLastCreated(), lv_lVPlayer, true);
    }

    UnitGroupLoopBegin(libGame_gv_players[lv_lVPlayer].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((libNtve_gf_UnitGroupIsDead(libNtve_gf_ConvertUnitToUnitGroup(UnitGroupLoopCurrent())) == false) && (UnitGetType(UnitGroupLoopCurrent()) != "HeroLostVikingsController")) {
            lv_allVikingsDown = false;
        }

    }
    UnitGroupLoopEnd();
    if ((lv_allVikingsDown == false)) {
        UnitGroupAddUnitGroup(lv_vikingUnitGroupIgnoringController, libGame_gv_players[lv_lVPlayer].lv_heroUnitGroup);
        UnitGroupRemove(lv_vikingUnitGroupIgnoringController, libGame_gv_players[lv_lVPlayer].lv_heroUnit);
        if ((UnitGroupCount(lv_vikingUnitGroupIgnoringController, c_unitCountAlive) == 1)) {
            autoF6B19C6F_g = lv_vikingUnitGroupIgnoringController;
            autoF6B19C6F_u = 1;
            for ( ; autoF6B19C6F_u <= UnitGroupCount(autoF6B19C6F_g, c_unitCountAll) ; autoF6B19C6F_u += (lv_itLivingViking == UnitGroupUnit(autoF6B19C6F_g, autoF6B19C6F_u)) ) {
                lv_itLivingViking = UnitGroupUnit(autoF6B19C6F_g, autoF6B19C6F_u);
                if ((UnitIsAlive(lv_itLivingViking) == true)) {
                    libGame_gv_players[lv_lVPlayer].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_itLivingViking);
                    libGame_gf_CameraUpdateCameraForPlayer(lv_lVPlayer);
                }

            }
        }

    }

    auto48403D2E_ae = libUIUI_gv_uI_MaxHeroGroupStatusFrames;
    auto48403D2E_ai = 1;
    lv_itViking = 1;
    for ( ; ( (auto48403D2E_ai >= 0 && lv_itViking <= auto48403D2E_ae) || (auto48403D2E_ai <= 0 && lv_itViking >= auto48403D2E_ae) ) ; lv_itViking += auto48403D2E_ai ) {
        if ((libUIUI_gv_uIHeroTrackerArrows.lv_unit[lv_itViking] == lv_deadUnit)) {
            auto825968C9_val = UnitGetType(lv_deadUnit);
            if (auto825968C9_val == "HeroErik") {
                libNtve_gf_SetDialogItemImage(libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[lv_itViking], "Assets\\Textures\\storm_ui_hud_heromechanic_vikings_dead_erik.dds", libCore_gv_playerGroupFromPlayer[lv_lVPlayer]);
            }
            else if (auto825968C9_val == "HeroOlaf") {
                libNtve_gf_SetDialogItemImage(libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[lv_itViking], "Assets\\Textures\\storm_ui_hud_heromechanic_vikings_dead_olaf.dds", libCore_gv_playerGroupFromPlayer[lv_lVPlayer]);
            }
            else if (auto825968C9_val == "HeroBaleog") {
                libNtve_gf_SetDialogItemImage(libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[lv_itViking], "Assets\\Textures\\storm_ui_hud_heromechanic_vikings_dead_baleog.dds", libCore_gv_playerGroupFromPlayer[lv_lVPlayer]);
            }
            else {
            }
            break;
        }

    }
    UnitBehaviorAdd(lv_deadUnit, "Dead", lv_deadUnit, 1);
    if ((TimerGetDuration(lv_vikingDeathTimer) > 0.0)) {
        UnitBehaviorSetDuration(lv_deadUnit, "Dead", TimerGetRemaining(lv_vikingDeathTimer));
    }
    else {
        UnitBehaviorSetDuration(lv_deadUnit, "Dead", 0.0);
    }
    UnitGroupLoopBegin(libGame_gv_players[lv_lVPlayer].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), lv_downedBehavior, lv_deadUnit, 1);
    }
    UnitGroupLoopEnd();
    UnitBehaviorAdd(libGame_gv_players[lv_lVPlayer].lv_heroUnit, lv_downedBehavior, lv_deadUnit, 1);
    libCore_gf_ClearAllNonpermanentBehaviorsonUnit(lv_deadUnit);
    if ((lv_allVikingsDown == true)) {
        libGame_gv_players[lv_lVPlayer].lv_isDead = true;
        libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay(true, lv_lVPlayer);
        libGame_gf_HeroDeathCheckForTeamDominatedAnnouncement(libGame_gf_TeamNumberOfPlayer(lv_lVPlayer));
        DialogControlSendAnimationEvent(libGDHL_gv_lostVikingsUI.lv_allDeathStatusFrame, libCore_gv_playerGroupFromPlayer[lv_lVPlayer], "UnitDead");
    }

    lv_vikingDeathIcon = (CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(lv_deadUnit), "HeroIcon", 0));
    libUIUI_gf_DeathAnnouncementPanelRegisterDeath(lv_lVPlayer, lv_killingPlayer, lv_vikingDeathIcon, lv_deadUnit, UnitTypeGetName(UnitGetType(lv_deadUnit)), lv_vikingDeathTimer);
    libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_respawnPolarOffset += 120.0;
    if ((libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_checkpointReachedCairn != null)) {
        UnitCreateEffectPoint(lv_deadUnit, "LostVikingsPlayAgainTeleport", PointWithOffsetPolar(UnitGetPosition(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_checkpointReachedCairn), 2.5, libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_respawnPolarOffset));
        Wait(0.0625, c_timeGame);
    }
    else {
        libGDHL_gf_VikingDownStartRespawnTimer(lv_deadUnit, lv_vikingDeathTimer);
        Wait(0.125, c_timeGame);
        if ((libNtve_gf_UnitGroupIsDead(libNtve_gf_ConvertUnitToUnitGroup(lv_deadUnit)) == true)) {
            UnitSetPosition(lv_deadUnit, PointWithOffsetPolar(libGame_gv_players[lv_lVPlayer].lv_spawnPoint, 1.5, libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_respawnPolarOffset), false);
        }

    }
    lv_selectedUnits = UnitGroupSelected(lv_lVPlayer);
    if ((UnitGroupCount(lv_selectedUnits, c_unitCountAlive) <= 0)) {
        if ((libGame_gv_players[lv_lVPlayer].lv_activeVehicle != null)) {
            UnitSelect(libGame_gv_players[lv_lVPlayer].lv_activeVehicle, lv_lVPlayer, true);
        }
        else {
            UnitSelect(libGame_gv_players[lv_lVPlayer].lv_heroUnit, lv_lVPlayer, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsVikingDies_Init () {
    libGDHL_gt_HeroLostVikingsVikingDies = TriggerCreate("libGDHL_gt_HeroLostVikingsVikingDies_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsVikingDies, false);
    TriggerAddEventUnitDied(libGDHL_gt_HeroLostVikingsVikingDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Viking Removed
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsVikingRemoved_Func (bool testConds, bool runActions) {
    string autoE2C695E8_val;

    // Variable Declarations
    unit lv_unit;
    int lv_lVPlayer;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_lVPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(lv_unit) == "HeroBaleog") || (UnitGetType(lv_unit) == "HeroOlaf") || (UnitGetType(lv_unit) == "HeroErik")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE2C695E8_val = UnitGetType(lv_unit);
    if (autoE2C695E8_val == "HeroErik") {
        PathDestroy(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikPath);
    }
    else if (autoE2C695E8_val == "HeroBaleog") {
        PathDestroy(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogPath);
    }
    else if (autoE2C695E8_val == "HeroOlaf") {
        PathDestroy(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafPath);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsVikingRemoved_Init () {
    libGDHL_gt_HeroLostVikingsVikingRemoved = TriggerCreate("libGDHL_gt_HeroLostVikingsVikingRemoved_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsVikingRemoved, false);
    TriggerAddEventUnitRemoved(libGDHL_gt_HeroLostVikingsVikingRemoved, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Under Attack Ping
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsUnderAttackPing_Func (bool testConds, bool runActions) {
    string autoD6AE5AC0_val;

    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((lv_player > 0))) {
            return false;
        }

        if (!((lv_player <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroLostVikingsController"))) {
            return false;
        }

        if (!((UnitIsAlive(lv_unit) == true))) {
            return false;
        }

        if (!((DistanceBetweenPoints(UnitGetPosition(lv_unit), CameraGetTarget(lv_player)) >= libGDHL_gv_data_LostVikingsUIWarningCameraDistance_C))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_CreatePingFacingAngleWithType(libCore_gv_playerGroupFromPlayer[lv_player], "AssistMePingMinimap", UnitGetPosition(lv_unit), Color(100.00, 100.00, 100.00), 2.0, 270.0, -1, -1);
    autoD6AE5AC0_val = UnitGetType(lv_unit);
    if (autoD6AE5AC0_val == "HeroErik") {
        SoundPlayForPlayer(SoundLink("ErikBase_AI_Caution", c_soundIndexAny), lv_player, libCore_gv_playerGroupFromPlayer[lv_player], 100.0, 0.0);
    }
    else if (autoD6AE5AC0_val == "HeroBaleog") {
        SoundPlayForPlayer(SoundLink("BaleogBase_AI_Caution", c_soundIndexAny), lv_player, libCore_gv_playerGroupFromPlayer[lv_player], 100.0, 0.0);
    }
    else if (autoD6AE5AC0_val == "HeroOlaf") {
        SoundPlayForPlayer(SoundLink("OlafBase_AI_Caution", c_soundIndexAny), lv_player, libCore_gv_playerGroupFromPlayer[lv_player], 100.0, 0.0);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsUnderAttackPing_Init () {
    libGDHL_gt_HeroLostVikingsUnderAttackPing = TriggerCreate("libGDHL_gt_HeroLostVikingsUnderAttackPing_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsUnderAttackPing, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroLostVikingsUnderAttackPing, null, "LostVikingsAttackedPingResponse", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Under Attack UI
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsUnderAttackUI_Func (bool testConds, bool runActions) {
    unit auto426DF74E_val;

    // Variable Declarations
    int lv_sourcePlayer;
    unit lv_sourceUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_sourcePlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerSource);
    lv_sourceUnit = EventPlayerEffectUsedUnit(c_effectUnitSource);
    if (((UnitGetType(libGame_gv_players[lv_sourcePlayer].lv_heroUnit) != "HeroLostVikingsController") || (UnitIsAlive(lv_sourceUnit) == false) || (DistanceBetweenPoints(UnitGetPosition(lv_sourceUnit), CameraGetTarget(lv_sourcePlayer)) < libGDHL_gv_data_LostVikingsUIWarningCameraDistance_C))) {
        return true;
    }

    auto426DF74E_val = lv_sourceUnit;
    if (auto426DF74E_val == libGDHL_gv_lostVikingsPlayer[lv_sourcePlayer].lv_olaf) {
        DialogControlSendAnimationEvent(libGDHL_gv_lostVikingsUI.lv_olafUnitStatusFrame, libCore_gv_playerGroupFromPlayer[lv_sourcePlayer], "HPWarningFlash");
        DialogControlSendAnimationEvent(libGDHL_gv_lostVikingsUI.lv_olafUnselectedIconImage, libCore_gv_playerGroupFromPlayer[lv_sourcePlayer], "HPWarningFlash");
    }
    else if (auto426DF74E_val == libGDHL_gv_lostVikingsPlayer[lv_sourcePlayer].lv_baleog) {
        DialogControlSendAnimationEvent(libGDHL_gv_lostVikingsUI.lv_baleogUnitStatusFrame, libCore_gv_playerGroupFromPlayer[lv_sourcePlayer], "HPWarningFlash");
        DialogControlSendAnimationEvent(libGDHL_gv_lostVikingsUI.lv_baleogUnselectedIconImage, libCore_gv_playerGroupFromPlayer[lv_sourcePlayer], "HPWarningFlash");
    }
    else if (auto426DF74E_val == libGDHL_gv_lostVikingsPlayer[lv_sourcePlayer].lv_erik) {
        DialogControlSendAnimationEvent(libGDHL_gv_lostVikingsUI.lv_erikUnitStatusFrame, libCore_gv_playerGroupFromPlayer[lv_sourcePlayer], "HPWarningFlash");
        DialogControlSendAnimationEvent(libGDHL_gv_lostVikingsUI.lv_erikUnselectedIconImage, libCore_gv_playerGroupFromPlayer[lv_sourcePlayer], "HPWarningFlash");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsUnderAttackUI_Init () {
    libGDHL_gt_HeroLostVikingsUnderAttackUI = TriggerCreate("libGDHL_gt_HeroLostVikingsUnderAttackUI_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsUnderAttackUI, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroLostVikingsUnderAttackUI, c_playerAny, "LostVikingsDamageResponseDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - XP Gain
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsXPGain_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unitgroup lv_vikingGroup;
    int lv_lVPlayer;
    unit lv_lVController;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_vikingGroup = UnitGroupEmpty();
    lv_lVPlayer = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "HeroLostVikingsController"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lVPlayer = UnitGetOwner(lv_unit);
    UnitGroupLoopBegin(libGame_gv_players[lv_lVPlayer].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "HeroLostVikingsController")) {
            UnitXPAddXP(UnitGroupLoopCurrent(), null, EventUnitXPDelta());
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsXPGain_Init () {
    libGDHL_gt_HeroLostVikingsXPGain = TriggerCreate("libGDHL_gt_HeroLostVikingsXPGain_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsXPGain, false);
    TriggerAddEventUnitGainExperience(libGDHL_gt_HeroLostVikingsXPGain, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Behavior Talent Gained
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsBehaviorTalentGained_Func (bool testConds, bool runActions) {
    int autoBE5385BE_ae;
    int autoBE5385BE_ai;
    int auto4652AE1C_ae;
    int auto4652AE1C_ai;

    // Variable Declarations
    int lv_lVPlayer;
    unit lv_lVController;
    int lv_currentTier;
    int lv_talentIndexSelected;
    int lv_itPlayer;
    int lv_itBehavior;
    int lv_heroIndex;
    unit lv_heroUnit;
    int lv_abilityIndex;
    int lv_itTier;
    int lv_chosenTalentIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[libGame_gf_HeroGainTalentPlayer()].lv_heroUnit) == "HeroLostVikingsController"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lVPlayer = libGame_gf_HeroGainTalentPlayer();
    autoBE5385BE_ae = 1;
    autoBE5385BE_ai = -1;
    lv_itTier = libCore_gv_talents_MaxTiers_C;
    for ( ; ( (autoBE5385BE_ai >= 0 && lv_itTier <= autoBE5385BE_ae) || (autoBE5385BE_ai <= 0 && lv_itTier >= autoBE5385BE_ae) ) ; lv_itTier += autoBE5385BE_ai ) {
        if ((libGame_gv_talents_TalentChoices[lv_lVPlayer][lv_itTier].lv_selection != 0)) {
            lv_currentTier = lv_itTier;
            break;
        }

    }
    lv_talentIndexSelected = libGame_gv_talents_TalentChoices[lv_lVPlayer][lv_currentTier].lv_selection;
    auto4652AE1C_ae = libGame_gv_talents_TalentChoices[lv_lVPlayer][lv_currentTier].lv_talentData[lv_talentIndexSelected].lv_behaviorCount;
    auto4652AE1C_ai = 1;
    lv_itBehavior = 1;
    for ( ; ( (auto4652AE1C_ai >= 0 && lv_itBehavior <= auto4652AE1C_ae) || (auto4652AE1C_ai <= 0 && lv_itBehavior >= auto4652AE1C_ae) ) ; lv_itBehavior += auto4652AE1C_ai ) {
        UnitGroupLoopBegin(libGame_gv_players[lv_lVPlayer].lv_heroUnitGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), libGame_gv_talents_TalentChoices[lv_lVPlayer][lv_currentTier].lv_talentData[lv_talentIndexSelected].lv_behaviors[lv_itBehavior], UnitGroupLoopCurrent(), 1);
        }
        UnitGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsBehaviorTalentGained_Init () {
    libGDHL_gt_HeroLostVikingsBehaviorTalentGained = TriggerCreate("libGDHL_gt_HeroLostVikingsBehaviorTalentGained_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsBehaviorTalentGained, false);
    libGame_gf_HeroGainTalent(libGDHL_gt_HeroLostVikingsBehaviorTalentGained);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Unit Controller Update
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsUnitControllerUpdate_Func (bool testConds, bool runActions) {
    int autoEF8275DB_ae;
    unitgroup auto0F8637B5_g;
    int auto0F8637B5_u;

    // Variable Declarations
    unit lv_itViking;
    int lv_itLostVikingsPlayerTeam;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoEF8275DB_ae = libCore_gv_bALMaxPlayers;
    lv_itLostVikingsPlayerTeam = 1;
    for ( ; lv_itLostVikingsPlayerTeam <= autoEF8275DB_ae ; lv_itLostVikingsPlayerTeam += 1 ) {
        if ((libGDHL_gv_lostVikingsPlayer[lv_itLostVikingsPlayerTeam].lv_centerViking != null)) {
            if ((UnitGetType(libGame_gv_players[lv_itLostVikingsPlayerTeam].lv_heroUnit) == "HeroLostVikingsController")) {
                if ((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lv_itLostVikingsPlayerTeam) == false)) {
                    if ((UnitIsValid(libGDHL_gv_lostVikingsPlayer[lv_itLostVikingsPlayerTeam].lv_boat) == true)) {
                        UnitSetPosition(libGame_gv_players[lv_itLostVikingsPlayerTeam].lv_heroUnit, UnitGetPosition(libGDHL_gv_lostVikingsPlayer[lv_itLostVikingsPlayerTeam].lv_boat), false);
                        continue;
                    }

                    if ((UnitIsAlive(libGDHL_gv_lostVikingsPlayer[lv_itLostVikingsPlayerTeam].lv_centerViking) == false)) {
                        auto0F8637B5_g = libGame_gv_players[lv_itLostVikingsPlayerTeam].lv_heroUnitGroup;
                        auto0F8637B5_u = 1;
                        for ( ; auto0F8637B5_u <= UnitGroupCount(auto0F8637B5_g, c_unitCountAll) ; auto0F8637B5_u += (lv_itViking == UnitGroupUnit(auto0F8637B5_g, auto0F8637B5_u)) ) {
                            lv_itViking = UnitGroupUnit(auto0F8637B5_g, auto0F8637B5_u);
                            if ((UnitGetType(lv_itViking) != "HeroLostVikingsController") && (UnitIsAlive(lv_itViking) == true)) {
                                libGDHL_gv_lostVikingsPlayer[lv_itLostVikingsPlayerTeam].lv_centerViking = lv_itViking;
                                break;
                            }

                        }
                    }

                }

                if ((DistanceBetweenPoints(UnitGetPosition(libGDHL_gv_lostVikingsPlayer[lv_itLostVikingsPlayerTeam].lv_centerViking), UnitGetPosition(libGame_gv_players[lv_itLostVikingsPlayerTeam].lv_heroUnit)) >= 4.0)) {
                    UnitSetPosition(libGame_gv_players[lv_itLostVikingsPlayerTeam].lv_heroUnit, UnitGetPosition(libGDHL_gv_lostVikingsPlayer[lv_itLostVikingsPlayerTeam].lv_centerViking), false);
                }
                else {
                    UnitSetPosition(libGame_gv_players[lv_itLostVikingsPlayerTeam].lv_heroUnit, UnitGetPosition(libGDHL_gv_lostVikingsPlayer[lv_itLostVikingsPlayerTeam].lv_centerViking), true);
                }
            }
            else {
                libGDHL_gv_lostVikingsPlayer[lv_itLostVikingsPlayerTeam].lv_centerViking = null;
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsUnitControllerUpdate_Init () {
    libGDHL_gt_HeroLostVikingsUnitControllerUpdate = TriggerCreate("libGDHL_gt_HeroLostVikingsUnitControllerUpdate_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsUnitControllerUpdate, false);
    TriggerAddEventTimePeriodic(libGDHL_gt_HeroLostVikingsUnitControllerUpdate, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Moonwell Redistribution
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsMoonwellRedistribution_Func (bool testConds, bool runActions) {
    unitgroup auto26A09CC5_g;
    int auto26A09CC5_u;

    // Variable Declarations
    unit lv_unit;
    unit lv_moonwell;
    unit lv_itHeroUnit;

    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_moonwell = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(lv_unit) == "HeroOlaf") || (UnitGetType(lv_unit) == "HeroErik") || (UnitGetType(lv_unit) == "HeroBaleog")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto26A09CC5_g = libGame_gv_players[UnitGetOwner(lv_unit)].lv_heroUnitGroup;
    auto26A09CC5_u = 1;
    for ( ; auto26A09CC5_u <= UnitGroupCount(auto26A09CC5_g, c_unitCountAll) ; auto26A09CC5_u += (lv_itHeroUnit == UnitGroupUnit(auto26A09CC5_g, auto26A09CC5_u)) ) {
        lv_itHeroUnit = UnitGroupUnit(auto26A09CC5_g, auto26A09CC5_u);
        if ((lv_itHeroUnit == libGame_gv_players[UnitGetOwner(lv_unit)].lv_heroUnit)) {
            UnitBehaviorAdd(lv_itHeroUnit, "HealingFountainCooldown", lv_moonwell, 1);
            continue;
        }

        if ((lv_itHeroUnit != lv_unit)) {
            UnitBehaviorAdd(lv_itHeroUnit, "HealingFountainCooldown", lv_moonwell, 1);
            UnitCreateEffectUnit(lv_itHeroUnit, "FountainApplySet", lv_itHeroUnit);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsMoonwellRedistribution_Init () {
    libGDHL_gt_HeroLostVikingsMoonwellRedistribution = TriggerCreate("libGDHL_gt_HeroLostVikingsMoonwellRedistribution_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsMoonwellRedistribution, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroLostVikingsMoonwellRedistribution, c_playerAny, "MoonwellDrinkStartingSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Viking Enters Stasis
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsVikingEntersStasis_Func (bool testConds, bool runActions) {
    unitgroup autoA22E935F_g;
    int autoA22E935F_u;

    // Variable Declarations
    int lv_vikingsPlayer;
    unitgroup lv_vikingsUnitGroup;
    unit lv_vikingsUnit;

    // Variable Initialization
    lv_vikingsUnitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vikingsPlayer = UnitGetOwner(EventUnit());
    if ((lv_vikingsPlayer >= 1) && (lv_vikingsPlayer <= libCore_gv_bALMaxPlayers)) {
        if ((libGDHL_gv_lostVikingsPlayer[lv_vikingsPlayer].lv_boat == EventUnit())) {
            PlayerPauseAllCooldowns(lv_vikingsPlayer, true);
        }
        else {
            UnitGroupAddUnitGroup(lv_vikingsUnitGroup, libGame_gv_players[lv_vikingsPlayer].lv_heroUnitGroup);
            UnitGroupRemove(lv_vikingsUnitGroup, libGame_gv_players[lv_vikingsPlayer].lv_heroUnit);
            autoA22E935F_g = lv_vikingsUnitGroup;
            autoA22E935F_u = 1;
            for ( ; autoA22E935F_u <= UnitGroupCount(autoA22E935F_g, c_unitCountAll) ; autoA22E935F_u += (lv_vikingsUnit == UnitGroupUnit(autoA22E935F_g, autoA22E935F_u)) ) {
                lv_vikingsUnit = UnitGroupUnit(autoA22E935F_g, autoA22E935F_u);
                if ((libNtve_gf_UnitGroupIsDead(libNtve_gf_ConvertUnitToUnitGroup(lv_vikingsUnit)) == false) && ((UnitFilterMatch(lv_vikingsUnit, lv_vikingsPlayer, UnitFilter(0, 0, 0, (1 << (c_targetFilterStasis - 32)))) == true) || (UnitHasBehavior2(lv_vikingsUnit, "LostVikingsLongboatRaidPoofDisabler") == true) || (UnitHasBehavior2(lv_vikingsUnit, "LongboatRaidHideVikings") == true))) {
                    return true;
                }

            }
            PlayerPauseAllCooldowns(lv_vikingsPlayer, true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsVikingEntersStasis_Init () {
    libGDHL_gt_HeroLostVikingsVikingEntersStasis = TriggerCreate("libGDHL_gt_HeroLostVikingsVikingEntersStasis_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsVikingEntersStasis, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroLostVikingsVikingEntersStasis, null, "LostVikingsStasisController", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Vikings Leaves Stasis
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsVikingsLeavesStasis_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_vikingsPlayer;
    unitgroup lv_vikingsUnitGroup;
    unit lv_vikingsUnit;

    // Variable Initialization
    lv_vikingsUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vikingsPlayer = UnitGetOwner(EventUnit());
    PlayerPauseAllCooldowns(lv_vikingsPlayer, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsVikingsLeavesStasis_Init () {
    libGDHL_gt_HeroLostVikingsVikingsLeavesStasis = TriggerCreate("libGDHL_gt_HeroLostVikingsVikingsLeavesStasis_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsVikingsLeavesStasis, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroLostVikingsVikingsLeavesStasis, null, "LostVikingsStasisController", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Unit Clicked
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsUnitClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_lVPlayerTeam;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) == EventPlayer()))) {
            return false;
        }

        if (!((UnitGetType(EventUnit()) != "LongboatRaidBoat"))) {
            return false;
        }

        if (!((UnitGetType(libGame_gv_players[EventPlayer()].lv_heroUnit) == "HeroLostVikingsController"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lVPlayerTeam = UnitGetOwner(EventUnit());
    libGDHL_gv_lostVikingsPlayer[lv_lVPlayerTeam].lv_centerViking = EventUnit();
    if ((EventUnit() == libGDHL_gv_lostVikingsPlayer[lv_lVPlayerTeam].lv_longboatCaptain)) {
        UnitGroupSelect(libGDHL_gv_lostVikingsPlayer[lv_lVPlayerTeam].lv_longboatCrew, UnitGetOwner(EventUnit()), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsUnitClicked_Init () {
    libGDHL_gt_HeroLostVikingsUnitClicked = TriggerCreate("libGDHL_gt_HeroLostVikingsUnitClicked_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsUnitClicked, false);
    TriggerAddEventUnitClick(libGDHL_gt_HeroLostVikingsUnitClicked, null, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Use Vehicle
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsUseVehicle_Func (bool testConds, bool runActions) {
    string auto5F9E13C0_val;

    // Variable Declarations
    int lv_controlGroup;
    int lv_lVPlayer;
    unit lv_vehicle;
    unit lv_vikingPilot;
    unitgroup lv_exitingControlGroup;

    // Variable Initialization
    lv_exitingControlGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_heroUnit) == "HeroLostVikingsController"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vehicle = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_vikingPilot = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_lVPlayer = UnitGetOwner(lv_vikingPilot);
    auto5F9E13C0_val = UnitGetType(lv_vikingPilot);
    if (auto5F9E13C0_val == "HeroOlaf") {
        lv_controlGroup = 1;
    }
    else if (auto5F9E13C0_val == "HeroBaleog") {
        lv_controlGroup = 2;
    }
    else if (auto5F9E13C0_val == "HeroErik") {
        lv_controlGroup = 3;
    }
    else {
    }
    Wait(0.0625, c_timeGame);
    UnitControlGroupAddUnit(lv_lVPlayer, lv_controlGroup, lv_vehicle);
    UnitControlGroupRemoveUnit(lv_lVPlayer, lv_controlGroup, lv_vikingPilot);
    UnitControlGroupRemoveUnit(lv_lVPlayer, 4, lv_vikingPilot);
    UnitControlGroupAddUnit(lv_lVPlayer, 4, lv_vehicle);
    while ((UnitIsAlive(lv_vehicle) == true)) {
        UnitSetPosition(lv_vikingPilot, UnitGetPosition(lv_vehicle), false);
        Wait(0.0625, c_timeGame);
    }
    if ((UnitGroupSelected(lv_lVPlayer) != libNtve_gf_ConvertUnitToUnitGroup(lv_vehicle))) {
        lv_exitingControlGroup = UnitGroupSelected(lv_lVPlayer);
        UnitGroupSelect(lv_exitingControlGroup, lv_lVPlayer, false);
        UnitSelect(lv_vikingPilot, lv_lVPlayer, true);
    }

    UnitControlGroupRemoveUnit(lv_lVPlayer, lv_controlGroup, lv_vehicle);
    UnitControlGroupAddUnit(lv_lVPlayer, lv_controlGroup, lv_vikingPilot);
    UnitControlGroupAddUnit(lv_lVPlayer, 4, lv_vikingPilot);
    UnitControlGroupRemoveUnit(lv_lVPlayer, 4, lv_vehicle);
    if ((lv_exitingControlGroup != null)) {
        UnitGroupSelect(lv_exitingControlGroup, lv_lVPlayer, true);
        if ((UnitGroupHasUnit(lv_exitingControlGroup, lv_vehicle) == false)) {
            UnitSelect(lv_vikingPilot, lv_lVPlayer, false);
        }
        else {
            UnitSelect(lv_vehicle, lv_lVPlayer, false);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsUseVehicle_Init () {
    libGDHL_gt_HeroLostVikingsUseVehicle = TriggerCreate("libGDHL_gt_HeroLostVikingsUseVehicle_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsUseVehicle, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroLostVikingsUseVehicle, c_playerAny, "UseVehicleCastCompleteSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Use Transport
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsUseTransport_Func (bool testConds, bool runActions) {
    string auto7EEE3C94_val;

    // Variable Declarations
    int lv_controlGroup;
    int lv_lVPlayer;
    unit lv_fakeSelectionVehicle;
    unit lv_vikingCargoUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[libGame_gf_HeroEnteredTransportPlayerEntering()].lv_heroUnit) == "HeroLostVikingsController"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lVPlayer = libGame_gf_HeroEnteredTransportPlayerEntering();
    lv_vikingCargoUnit = libGame_gf_HeroEnteredTransportCargoUnit();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "LostVikingsMedivacDummyUnit", 0, lv_lVPlayer, UnitGetPosition(lv_vikingCargoUnit));
    lv_fakeSelectionVehicle = UnitLastCreated();
    auto7EEE3C94_val = UnitGetType(lv_vikingCargoUnit);
    if (auto7EEE3C94_val == "HeroOlaf") {
        lv_controlGroup = 1;
    }
    else if (auto7EEE3C94_val == "HeroBaleog") {
        lv_controlGroup = 2;
    }
    else if (auto7EEE3C94_val == "HeroErik") {
        lv_controlGroup = 3;
    }
    else {
    }
    Wait(0.0625, c_timeGame);
    UnitControlGroupAddUnit(lv_lVPlayer, lv_controlGroup, lv_fakeSelectionVehicle);
    UnitControlGroupRemoveUnit(lv_lVPlayer, lv_controlGroup, lv_vikingCargoUnit);
    UnitControlGroupRemoveUnit(lv_lVPlayer, 4, lv_vikingCargoUnit);
    UnitControlGroupAddUnit(lv_lVPlayer, 4, lv_fakeSelectionVehicle);
    while ((libNtve_gf_UnitIsInsideTransport(lv_vikingCargoUnit) == true)) {
        UnitSetPosition(lv_fakeSelectionVehicle, UnitGetPosition(libGame_gf_HeroEnteredTransportTransport()), true);
        Wait(0.0625, c_timeGame);
    }
    UnitControlGroupRemoveUnit(lv_lVPlayer, lv_controlGroup, lv_fakeSelectionVehicle);
    UnitControlGroupAddUnit(lv_lVPlayer, lv_controlGroup, lv_vikingCargoUnit);
    UnitControlGroupAddUnit(lv_lVPlayer, 4, lv_vikingCargoUnit);
    UnitControlGroupRemoveUnit(lv_lVPlayer, 4, lv_fakeSelectionVehicle);
    if ((UnitIsSelected(lv_fakeSelectionVehicle, lv_lVPlayer) == true)) {
        UnitSelect(lv_vikingCargoUnit, lv_lVPlayer, true);
    }

    if ((UnitIsSelected(libGame_gf_HeroEnteredTransportTransport(), lv_lVPlayer) == true)) {
        UnitSelect(lv_vikingCargoUnit, lv_lVPlayer, true);
    }

    UnitRemove(lv_fakeSelectionVehicle);
    libGame_gv_players[lv_lVPlayer].lv_cameraCurrentTargetGroup = null;
    libGame_gv_players[lv_lVPlayer].lv_cameraPlayerUnitGroupToFocusOn = null;
    libGame_gf_CameraUpdateCameraForPlayer(lv_lVPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsUseTransport_Init () {
    libGDHL_gt_HeroLostVikingsUseTransport = TriggerCreate("libGDHL_gt_HeroLostVikingsUseTransport_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsUseTransport, false);
    libGame_gf_HeroEnteredTransport(libGDHL_gt_HeroLostVikingsUseTransport);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Rally Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsRallyCast_Func (bool testConds, bool runActions) {
    string autoFA0FCA6E_val;

    // Variable Declarations
    int lv_lVPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lVPlayer = EventPlayer();
    autoFA0FCA6E_val = UnitGetType(EventUnit());
    if (autoFA0FCA6E_val == "OlafsGravestone") {
        PathCreateForUnit(libCore_gv_playerGroupFromPlayer[lv_lVPlayer], EventUnit());
        PathSetVisible(PathLastCreated(), c_pathLocationWorld, true);
        PathSetLineTexture(PathLastCreated(), c_pathLocationAll, "Assets\\Textures\\storm_waypointline.dds");
        if ((libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafRallyDisplayed == true)) {
            PathDestroy(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafDeathRallyDisplay);
        }

        libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafDeathRallyDisplay = PathLastCreated();
        libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafRallyDisplayed = true;
        PathSetVisible(PathLastCreated(), c_pathLocationAll, true);
    }
    else if (autoFA0FCA6E_val == "EriksGravestone") {
        PathCreateForUnit(libCore_gv_playerGroupFromPlayer[lv_lVPlayer], EventUnit());
        PathSetVisible(PathLastCreated(), c_pathLocationWorld, true);
        PathSetLineTexture(PathLastCreated(), c_pathLocationAll, "Assets\\Textures\\storm_waypointline.dds");
        if ((libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikRallyDisplayed == true)) {
            PathDestroy(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikDeathRallyDisplay);
        }

        libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikDeathRallyDisplay = PathLastCreated();
        libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikRallyDisplayed = true;
        PathSetVisible(PathLastCreated(), c_pathLocationAll, true);
    }
    else if (autoFA0FCA6E_val == "BaleogsGravestone") {
        PathCreateForUnit(libCore_gv_playerGroupFromPlayer[lv_lVPlayer], EventUnit());
        PathSetVisible(PathLastCreated(), c_pathLocationWorld, true);
        PathSetLineTexture(PathLastCreated(), c_pathLocationAll, "Assets\\Textures\\storm_waypointline.dds");
        if ((libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogRallyDisplayed == true)) {
            PathDestroy(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogDeathRallyDisplay);
        }

        libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogDeathRallyDisplay = PathLastCreated();
        libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogRallyDisplayed = true;
        PathSetVisible(PathLastCreated(), c_pathLocationAll, true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsRallyCast_Init () {
    libGDHL_gt_HeroLostVikingsRallyCast = TriggerCreate("libGDHL_gt_HeroLostVikingsRallyCast_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsRallyCast, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroLostVikingsRallyCast, null, AbilityCommand("LostVikingsRally", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroLostVikingsRallyCast, null, AbilityCommand("LostVikingsBaleogRally", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroLostVikingsRallyCast, null, AbilityCommand("LostVikingsErikRally", 0), c_unitAbilStageAll, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroLostVikingsRallyCast, null, AbilityCommand("LostVikingsOlafRally", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Rally Finish/Cancel
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsRallyFinishCancel_Func (bool testConds, bool runActions) {
    string auto0216BCA1_val;

    // Variable Declarations
    int lv_lVPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "HeroErik") || (UnitGetType(EventUnit()) == "HeroOlaf") || (UnitGetType(EventUnit()) == "HeroBaleog")))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("LostVikingsRally", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("LostVikingsBaleogRally", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("LostVikingsOlafRally", 0)))) {
            return false;
        }

        if (!((EventUnitAbility() != AbilityCommand("LostVikingsErikRally", 0)))) {
            return false;
        }

        if (!((AbilityClass(AbilityCommandGetAbility(EventUnitAbility())) != c_classIdCAbilInventory))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_lVPlayer = UnitGetOwner(EventUnit());
    auto0216BCA1_val = UnitGetType(EventUnit());
    if (auto0216BCA1_val == "HeroOlaf") {
        if ((libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafRallyDisplayed == true)) {
            PathSetVisible(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafDeathRallyDisplay, c_pathLocationWorld, false);
            PathDestroy(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafDeathRallyDisplay);
            libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafRallyDisplayed = false;
        }

    }
    else if (auto0216BCA1_val == "HeroErik") {
        if ((libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikRallyDisplayed == true)) {
            PathSetVisible(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikDeathRallyDisplay, c_pathLocationWorld, false);
            PathDestroy(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikDeathRallyDisplay);
            libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikRallyDisplayed = false;
        }

    }
    else if (auto0216BCA1_val == "HeroBaleog") {
        if ((libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogRallyDisplayed == true)) {
            PathSetVisible(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogDeathRallyDisplay, c_pathLocationWorld, false);
            PathDestroy(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogDeathRallyDisplay);
            libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogRallyDisplayed = false;
        }

    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsRallyFinishCancel_Init () {
    libGDHL_gt_HeroLostVikingsRallyFinishCancel = TriggerCreate("libGDHL_gt_HeroLostVikingsRallyFinishCancel_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsRallyFinishCancel, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroLostVikingsRallyFinishCancel, null, null, c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Rally Sounds
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsRallySounds_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitTargetPoint() != null)) {
        UnitCreateEffectPoint(EventUnit(), "LostVikingsRallyPointDummyEffectForSound", EventUnitTargetPoint());
    }
    else {
        UnitCreateEffectUnit(EventUnit(), "LostVikingsRallyPointDummyEffectForSound", EventUnitTargetUnit());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsRallySounds_Init () {
    libGDHL_gt_HeroLostVikingsRallySounds = TriggerCreate("libGDHL_gt_HeroLostVikingsRallySounds_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsRallySounds, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroLostVikingsRallySounds, null, AbilityCommand("LostVikingsOlafRally", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroLostVikingsRallySounds, null, AbilityCommand("LostVikingsErikRally", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroLostVikingsRallySounds, null, AbilityCommand("LostVikingsBaleogRally", 0), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroLostVikingsRallySounds, null, AbilityCommand("LostVikingsOlafRally", 0), c_unitAbilStageQueue, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroLostVikingsRallySounds, null, AbilityCommand("LostVikingsErikRally", 0), c_unitAbilStageQueue, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroLostVikingsRallySounds, null, AbilityCommand("LostVikingsBaleogRally", 0), c_unitAbilStageQueue, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Play Again Complete
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsPlayAgainComplete_Func (bool testConds, bool runActions) {
    int auto0981DBD7_ae;
    int auto0981DBD7_ai;

    // Variable Declarations
    point lv_ghostErikPoint;
    fixed lv_ghostErikFacing;
    bool lv_ghostErikValidTeleport;
    point lv_ghostOlafPoint;
    fixed lv_ghostOlafFacing;
    bool lv_ghostOlafValidTeleport;
    point lv_ghostBaleogPoint;
    fixed lv_ghostBaleogFacing;
    bool lv_ghostBaleogValidTeleport;
    int lv_lVPlayer;
    int lv_itViking;
    unit lv_summonerViking;
    unit lv_cairn;
    fixed lv_polarMove;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_summonerViking = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_lVPlayer = UnitGetOwner(lv_summonerViking);
    lv_cairn = UnitGroupUnit(UnitGroup("LostVikingsPlayAgainCairn", lv_lVPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_respawnPolarOffset = (UnitGetFacing(lv_summonerViking) - 180.0);
    UnitGroupLoopBegin(UnitGroup("ErikPlayAgainGhost", lv_lVPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_ghostErikPoint = UnitGetPosition(UnitGroupLoopCurrent());
        lv_ghostErikFacing = UnitGetFacing(UnitGroupLoopCurrent());
        if ((UnitBehaviorCount(UnitGroupLoopCurrent(), "LostVikingsPlayAgainTeleportConfirmation") == 1)) {
            lv_ghostErikValidTeleport = true;
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("OlafPlayAgainGhost", lv_lVPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_ghostOlafPoint = UnitGetPosition(UnitGroupLoopCurrent());
        lv_ghostOlafFacing = UnitGetFacing(UnitGroupLoopCurrent());
        if ((UnitBehaviorCount(UnitGroupLoopCurrent(), "LostVikingsPlayAgainTeleportConfirmation") == 1)) {
            lv_ghostOlafValidTeleport = true;
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("BaleogPlayAgainGhost", lv_lVPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_ghostBaleogPoint = UnitGetPosition(UnitGroupLoopCurrent());
        lv_ghostBaleogFacing = UnitGetFacing(UnitGroupLoopCurrent());
        if ((UnitBehaviorCount(UnitGroupLoopCurrent(), "LostVikingsPlayAgainTeleportConfirmation") == 1)) {
            lv_ghostBaleogValidTeleport = true;
        }

    }
    UnitGroupLoopEnd();
    if ((UnitBehaviorCount(lv_summonerViking, "LostVikingsCheckpointReachedCarry") >= 1)) {
        UnitBehaviorAdd(lv_cairn, "LostVikingsPlayAgainCheckpointReachedCairnBehavior", lv_cairn, 1);
        libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_checkpointReachedDeathTimerActive = true;
        TimerStart(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_checkpointReachedCarinRespawnTimer, UnitBehaviorDuration(lv_cairn, "LostVikingsPlayAgainCheckpointReachedCairnBehavior"), false, c_timeGame);
        TextTagCreate(IntToText(FixedToInt(TimerGetRemaining(libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_checkpointReachedCarinRespawnTimer))), 24, UnitGetPosition(lv_cairn), 1.0, true, true, PlayerGroupAll());
        TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
        libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_gravestoneTextTag = TextTagLastCreated();
        libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_checkpointReachedCairn = lv_cairn;
    }

    UnitGroupLoopBegin(libGame_gv_players[lv_lVPlayer].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupLoopCurrent() != lv_summonerViking) && (UnitGroupLoopCurrent() != libGame_gv_players[lv_lVPlayer].lv_heroUnit)) {
            auto0981DBD7_ae = libUIUI_gv_uI_MaxHeroGroupStatusFrames;
            auto0981DBD7_ai = 1;
            lv_itViking = 1;
            for ( ; ( (auto0981DBD7_ai >= 0 && lv_itViking <= auto0981DBD7_ae) || (auto0981DBD7_ai <= 0 && lv_itViking >= auto0981DBD7_ae) ) ; lv_itViking += auto0981DBD7_ai ) {
                if ((libUIUI_gv_uIHeroTrackerArrows.lv_unit[lv_itViking] == UnitGroupLoopCurrent())) {
                    libNtve_gf_SetDialogItemImage(libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[lv_itViking], (CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(UnitGroupLoopCurrent()), "HeroIcon", lv_lVPlayer)), libCore_gv_playerGroupFromPlayer[lv_lVPlayer]);
                }

            }
            if ((UnitGetType(UnitGroupLoopCurrent()) == "HeroErik") && (lv_ghostErikValidTeleport == true)) {
                UnitCreateEffectUnit(UnitGroupLoopCurrent(), "CleanseDebuffsUnstoppable", UnitGroupLoopCurrent());
                UnitCreateEffectUnit(UnitGroupLoopCurrent(), "LostVikingsPlayAgainCleanseDoTsAndBlinds", UnitGroupLoopCurrent());
                libGDHL_gf_HeroLostVikingsPlayAgainTeleportViking(UnitGroupLoopCurrent(), lv_ghostErikPoint);
                UnitSetFacing(UnitGroupLoopCurrent(), lv_ghostErikFacing, 0.0);
                libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "AnimPlay Spell Spell,C 0 0.000000");
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                if ((libNtve_gf_UnitGroupIsDead(libNtve_gf_ConvertUnitToUnitGroup(UnitGroupLoopCurrent())) == true)) {
                    libGDHL_gf_HeroDeathRespawnHeroforPlayer(UnitGroupLoopCurrent());
                    libUIUI_gf_DeathTimerPanelUnregisterTimer(libGame_gf_TeamNumberOfPlayer(lv_lVPlayer), libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_erikDeathTimer);
                }

            }
            else if ((UnitGetType(UnitGroupLoopCurrent()) == "HeroOlaf") && (lv_ghostOlafValidTeleport == true)) {
                UnitCreateEffectUnit(UnitGroupLoopCurrent(), "CleanseDebuffsUnstoppable", UnitGroupLoopCurrent());
                UnitCreateEffectUnit(UnitGroupLoopCurrent(), "LostVikingsPlayAgainCleanseDoTsAndBlinds", UnitGroupLoopCurrent());
                libGDHL_gf_HeroLostVikingsPlayAgainTeleportViking(UnitGroupLoopCurrent(), lv_ghostOlafPoint);
                UnitSetFacing(UnitGroupLoopCurrent(), lv_ghostOlafFacing, 0.0);
                libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "AnimPlay Spell Spell,C 0 0.000000");
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                if ((libNtve_gf_UnitGroupIsDead(libNtve_gf_ConvertUnitToUnitGroup(UnitGroupLoopCurrent())) == true)) {
                    libGDHL_gf_HeroDeathRespawnHeroforPlayer(UnitGroupLoopCurrent());
                    libUIUI_gf_DeathTimerPanelUnregisterTimer(libGame_gf_TeamNumberOfPlayer(lv_lVPlayer), libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_olafDeathTimer);
                }

            }
            else if ((UnitGetType(UnitGroupLoopCurrent()) == "HeroBaleog") && (lv_ghostBaleogValidTeleport == true)) {
                UnitCreateEffectUnit(UnitGroupLoopCurrent(), "CleanseDebuffsUnstoppable", UnitGroupLoopCurrent());
                UnitCreateEffectUnit(UnitGroupLoopCurrent(), "LostVikingsPlayAgainCleanseDoTsAndBlinds", UnitGroupLoopCurrent());
                libGDHL_gf_HeroLostVikingsPlayAgainTeleportViking(UnitGroupLoopCurrent(), lv_ghostBaleogPoint);
                UnitSetFacing(UnitGroupLoopCurrent(), lv_ghostBaleogFacing, 0.0);
                libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "AnimPlay Spell Spell,C 0 0.000000");
                UnitIssueOrder(UnitGroupLoopCurrent(), Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                if ((libNtve_gf_UnitGroupIsDead(libNtve_gf_ConvertUnitToUnitGroup(UnitGroupLoopCurrent())) == true)) {
                    libGDHL_gf_HeroDeathRespawnHeroforPlayer(UnitGroupLoopCurrent());
                    libUIUI_gf_DeathTimerPanelUnregisterTimer(libGame_gf_TeamNumberOfPlayer(lv_lVPlayer), libGDHL_gv_lostVikingsPlayer[lv_lVPlayer].lv_baleogDeathTimer);
                }

            }
        }

        UnitSelect(UnitGroupLoopCurrent(), lv_lVPlayer, true);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "LostVikingsErikDowned", 1);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "LostVikingsBaleogDowned", 1);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "LostVikingsOlafDowned", 1);
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(libGame_gv_players[lv_lVPlayer].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "HeroLostVikingsController")) {
            UnitCreateEffectUnitWithSource(UnitGroupLoopCurrent(), "LostVikingsPlayAgainCreateHealer", UnitGroupLoopCurrent(), c_gameCatalogAbil, "LostVikingsPlayAgain");
        }

    }
    UnitGroupLoopEnd();
    libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay(false, lv_lVPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsPlayAgainComplete_Init () {
    libGDHL_gt_HeroLostVikingsPlayAgainComplete = TriggerCreate("libGDHL_gt_HeroLostVikingsPlayAgainComplete_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsPlayAgainComplete, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroLostVikingsPlayAgainComplete, c_playerAny, "LostVikingsPlayAgainFinalSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Play Again Force Ghost Facing/Placement
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsPlayAgainForceGhostFacingPlacement_Func (bool testConds, bool runActions) {
    string auto76FD89A8_val;

    // Variable Declarations
    point lv_movePoint;
    unit lv_cairn;
    fixed lv_offsetAngle;
    string lv_vikingType;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnitCreatedUnit()) == "BaleogPlayAgainGhost") || (UnitGetType(EventUnitCreatedUnit()) == "ErikPlayAgainGhost") || (UnitGetType(EventUnitCreatedUnit()) == "OlafPlayAgainGhost")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("LostVikingsPlayAgainCairn", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_cairn = UnitGroupLoopCurrent();
    }
    UnitGroupLoopEnd();
    auto76FD89A8_val = UnitGetType(EventUnit());
    if (auto76FD89A8_val == "HeroBaleog") {
        if ((UnitGetType(EventUnitCreatedUnit()) == "OlafPlayAgainGhost")) {
            lv_offsetAngle = 120.0;
            lv_vikingType = "HeroOlaf";
        }
        else if ((UnitGetType(EventUnitCreatedUnit()) == "ErikPlayAgainGhost")) {
            lv_offsetAngle = -120.0;
            lv_vikingType = "HeroErik";
        }
    }
    else if (auto76FD89A8_val == "HeroErik") {
        if ((UnitGetType(EventUnitCreatedUnit()) == "BaleogPlayAgainGhost")) {
            lv_offsetAngle = 120.0;
            lv_vikingType = "HeroBaleog";
        }
        else if ((UnitGetType(EventUnitCreatedUnit()) == "OlafPlayAgainGhost")) {
            lv_offsetAngle = -120.0;
            lv_vikingType = "HeroOlaf";
        }
    }
    else if (auto76FD89A8_val == "HeroOlaf") {
        if ((UnitGetType(EventUnitCreatedUnit()) == "ErikPlayAgainGhost")) {
            lv_offsetAngle = 120.0;
            lv_vikingType = "HeroErik";
        }
        else if ((UnitGetType(EventUnitCreatedUnit()) == "BaleogPlayAgainGhost")) {
            lv_offsetAngle = -120.0;
            lv_vikingType = "HeroBaleog";
        }
    }
    else {
    }
    lv_movePoint = PointWithOffsetPolar(UnitTypePlacementFromPoint(lv_vikingType, UnitGetOwner(EventUnit()), UnitGetPosition(lv_cairn), 3.0), DistanceBetweenPoints(UnitGetPosition(lv_cairn), UnitGetPosition(EventUnit())), (AngleBetweenPoints(UnitGetPosition(lv_cairn), UnitGetPosition(EventUnit())) + lv_offsetAngle));
    libStEx_gf_MoveUnit(EventUnitCreatedUnit(), lv_movePoint, false);
    libNtve_gf_MakeUnitFacePoint(EventUnitCreatedUnit(), UnitGetPosition(lv_cairn), 0.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsPlayAgainForceGhostFacingPlacement_Init () {
    libGDHL_gt_HeroLostVikingsPlayAgainForceGhostFacingPlacement = TriggerCreate("libGDHL_gt_HeroLostVikingsPlayAgainForceGhostFacingPlacement_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsPlayAgainForceGhostFacingPlacement, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroLostVikingsPlayAgainForceGhostFacingPlacement, null, "LostVikingsPlayAgain", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Checkpoint Timer Pause in Time Stop
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsCheckpointTimerPauseinTimeStop_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    unit lv_cairn;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "LostVikingsPlayAgainCairn"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_cairn = EventUnit();
    lv_itPlayer = UnitGetOwner(lv_cairn);
    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate) && (TimerIsPaused(libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_checkpointReachedCarinRespawnTimer) == false)) {
        TimerPause(libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_checkpointReachedCarinRespawnTimer, true);
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeDeactivate) && (TimerIsPaused(libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_checkpointReachedCarinRespawnTimer) == true)) {
        TimerPause(libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_checkpointReachedCarinRespawnTimer, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsCheckpointTimerPauseinTimeStop_Init () {
    libGDHL_gt_HeroLostVikingsCheckpointTimerPauseinTimeStop = TriggerCreate("libGDHL_gt_HeroLostVikingsCheckpointTimerPauseinTimeStop_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsCheckpointTimerPauseinTimeStop, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroLostVikingsCheckpointTimerPauseinTimeStop, null, c_behaviorCategoryTimeStop, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroLostVikingsCheckpointTimerPauseinTimeStop, null, c_behaviorCategoryTimeStop, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Checkpoint Reached Timer Countdown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsCheckpointReachedTimerCountdown_Func (bool testConds, bool runActions) {
    int autoF7D0772B_ae;
    int autoF7D0772B_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoF7D0772B_ae = libCore_gv_bALMaxPlayers;
    autoF7D0772B_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoF7D0772B_ai >= 0 && lv_itPlayer <= autoF7D0772B_ae) || (autoF7D0772B_ai <= 0 && lv_itPlayer >= autoF7D0772B_ae) ) ; lv_itPlayer += autoF7D0772B_ai ) {
        if ((UnitGetType(libGame_gv_players[lv_itPlayer].lv_heroUnit) == "HeroLostVikingsController") && (libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_checkpointReachedDeathTimerActive == true) && (libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_gravestoneTextTag != c_textTagNone)) {
            if ((TimerGetRemaining(libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_checkpointReachedCarinRespawnTimer) > 0.0)) {
                TextTagSetText(libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_gravestoneTextTag, IntToText(FixedToInt(TimerGetRemaining(libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_checkpointReachedCarinRespawnTimer))));
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsCheckpointReachedTimerCountdown_Init () {
    libGDHL_gt_HeroLostVikingsCheckpointReachedTimerCountdown = TriggerCreate("libGDHL_gt_HeroLostVikingsCheckpointReachedTimerCountdown_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsCheckpointReachedTimerCountdown, false);
    TriggerAddEventTimePeriodic(libGDHL_gt_HeroLostVikingsCheckpointReachedTimerCountdown, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Checkpoint Reach Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsCheckpointReachTimerExpires_Func (bool testConds, bool runActions) {
    int autoE81687E9_ae;
    int autoE81687E9_ai;
    int auto7CA7A370_ae;
    int auto7CA7A370_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itViking;
    unit lv_cairn;
    fixed lv_polarMove;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE81687E9_ae = libCore_gv_bALMaxPlayers;
    autoE81687E9_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoE81687E9_ai >= 0 && lv_itPlayer <= autoE81687E9_ae) || (autoE81687E9_ai <= 0 && lv_itPlayer >= autoE81687E9_ae) ) ; lv_itPlayer += autoE81687E9_ai ) {
        if ((libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_checkpointReachedCarinRespawnTimer == EventTimer())) {
            TextTagDestroy(libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_gravestoneTextTag);
            UnitGroupLoopBegin(libGame_gv_players[lv_itPlayer].lv_heroUnitGroup);
            for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                UnitBehaviorRemove(UnitGroupLoopCurrent(), "LostVikingsVikingDowned", 1);
                UnitBehaviorRemove(UnitGroupLoopCurrent(), "LostVikingsErikDowned", 1);
                UnitBehaviorRemove(UnitGroupLoopCurrent(), "LostVikingsBaleogDowned", 1);
                UnitBehaviorRemove(UnitGroupLoopCurrent(), "LostVikingsOlafDowned", 1);
                if ((libNtve_gf_UnitGroupIsDead(libNtve_gf_ConvertUnitToUnitGroup(UnitGroupLoopCurrent())) == true)) {
                    UnitRevive(UnitGroupLoopCurrent());
                    UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, 100.0);
                    UnitSelect(UnitGroupLoopCurrent(), lv_itPlayer, true);
                    UnitBehaviorRemove(UnitGroupLoopCurrent(), "Dead", 1);
                    libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "Signal Respawn");
                    if ((UnitGetType(UnitGroupLoopCurrent()) == "HeroErik")) {
                        libUIUI_gf_DeathTimerPanelUnregisterTimer(libGame_gf_TeamNumberOfPlayer(lv_itPlayer), libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_erikDeathTimer);
                        DialogControlSendAnimationEvent(libGDHL_gv_lostVikingsUI.lv_erikDeathStatusFrame, libCore_gv_playerGroupFromPlayer[lv_itPlayer], "VikingRevived");
                        UnitControlGroupRemoveUnit(lv_itPlayer, 3, libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_erikGravestone);
                        UnitControlGroupRemoveUnit(lv_itPlayer, 4, libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_erikGravestone);
                        UnitRemove(libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_erikGravestone);
                        libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_erikGravestone = null;
                        UnitControlGroupAddUnit(lv_itPlayer, 3, UnitGroupLoopCurrent());
                        UnitControlGroupAddUnit(lv_itPlayer, 4, UnitGroupLoopCurrent());
                    }

                    if ((UnitGetType(UnitGroupLoopCurrent()) == "HeroOlaf")) {
                        libUIUI_gf_DeathTimerPanelUnregisterTimer(libGame_gf_TeamNumberOfPlayer(lv_itPlayer), libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_olafDeathTimer);
                        DialogControlSendAnimationEvent(libGDHL_gv_lostVikingsUI.lv_olafDeathStatusFrame, libCore_gv_playerGroupFromPlayer[lv_itPlayer], "VikingRevived");
                        UnitControlGroupRemoveUnit(lv_itPlayer, 1, libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_olafGravestone);
                        UnitControlGroupRemoveUnit(lv_itPlayer, 4, libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_olafGravestone);
                        UnitRemove(libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_olafGravestone);
                        libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_olafGravestone = null;
                        UnitControlGroupAddUnit(lv_itPlayer, 1, UnitGroupLoopCurrent());
                        UnitControlGroupAddUnit(lv_itPlayer, 4, UnitGroupLoopCurrent());
                    }

                    if ((UnitGetType(UnitGroupLoopCurrent()) == "HeroBaleog")) {
                        libUIUI_gf_DeathTimerPanelUnregisterTimer(libGame_gf_TeamNumberOfPlayer(lv_itPlayer), libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_baleogDeathTimer);
                        DialogControlSendAnimationEvent(libGDHL_gv_lostVikingsUI.lv_baleogDeathStatusFrame, libCore_gv_playerGroupFromPlayer[lv_itPlayer], "VikingRevived");
                        UnitControlGroupRemoveUnit(lv_itPlayer, 2, libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_baleogGravestone);
                        UnitControlGroupRemoveUnit(lv_itPlayer, 4, libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_baleogGravestone);
                        UnitRemove(libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_baleogGravestone);
                        libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_baleogGravestone = null;
                        UnitControlGroupAddUnit(lv_itPlayer, 2, UnitGroupLoopCurrent());
                        UnitControlGroupAddUnit(lv_itPlayer, 4, UnitGroupLoopCurrent());
                    }

                    auto7CA7A370_ae = libUIUI_gv_uI_MaxHeroGroupStatusFrames;
                    auto7CA7A370_ai = 1;
                    lv_itViking = 1;
                    for ( ; ( (auto7CA7A370_ai >= 0 && lv_itViking <= auto7CA7A370_ae) || (auto7CA7A370_ai <= 0 && lv_itViking >= auto7CA7A370_ae) ) ; lv_itViking += auto7CA7A370_ai ) {
                        if ((libUIUI_gv_uIHeroTrackerArrows.lv_unit[lv_itViking] == UnitGroupLoopCurrent())) {
                            libNtve_gf_SetDialogItemImage(libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[lv_itViking], (CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(UnitGroupLoopCurrent()), "HeroIcon", lv_itPlayer)), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
                        }

                    }
                }

                UnitCreateEffectUnit(UnitGroupLoopCurrent(), "LostVikingsPlayAgainHeal", UnitGroupLoopCurrent());
            }
            UnitGroupLoopEnd();
            TimerPause(libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_olafDeathTimer, true);
            TimerPause(libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_erikDeathTimer, true);
            TimerPause(libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_baleogDeathTimer, true);
            libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay(false, lv_itPlayer);
            libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_checkpointReachedCairn = null;
            libGDHL_gv_lostVikingsPlayer[lv_itPlayer].lv_checkpointReachedDeathTimerActive = false;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsCheckpointReachTimerExpires_Init () {
    libGDHL_gt_HeroLostVikingsCheckpointReachTimerExpires = TriggerCreate("libGDHL_gt_HeroLostVikingsCheckpointReachTimerExpires_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsCheckpointReachTimerExpires, false);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsCheckpointReachTimerExpires, libGDHL_gv_lostVikingsPlayer[1].lv_checkpointReachedCarinRespawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsCheckpointReachTimerExpires, libGDHL_gv_lostVikingsPlayer[2].lv_checkpointReachedCarinRespawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsCheckpointReachTimerExpires, libGDHL_gv_lostVikingsPlayer[3].lv_checkpointReachedCarinRespawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsCheckpointReachTimerExpires, libGDHL_gv_lostVikingsPlayer[4].lv_checkpointReachedCarinRespawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsCheckpointReachTimerExpires, libGDHL_gv_lostVikingsPlayer[5].lv_checkpointReachedCarinRespawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsCheckpointReachTimerExpires, libGDHL_gv_lostVikingsPlayer[6].lv_checkpointReachedCarinRespawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsCheckpointReachTimerExpires, libGDHL_gv_lostVikingsPlayer[7].lv_checkpointReachedCarinRespawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsCheckpointReachTimerExpires, libGDHL_gv_lostVikingsPlayer[8].lv_checkpointReachedCarinRespawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsCheckpointReachTimerExpires, libGDHL_gv_lostVikingsPlayer[9].lv_checkpointReachedCarinRespawnTimer);
    TriggerAddEventTimer(libGDHL_gt_HeroLostVikingsCheckpointReachTimerExpires, libGDHL_gv_lostVikingsPlayer[10].lv_checkpointReachedCarinRespawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Longboat Raid Selection
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsLongboatRaidSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_erik;
    bool lv_erikLoaded;
    unit lv_baleog;
    bool lv_baleogLoaded;
    unit lv_olaf;
    bool lv_olafLoaded;
    unit lv_boat;
    int lv_player;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "LongboatRaidBoat"))) {
            return false;
        }

        if (!((UnitGetType(libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit) != "HeroAbathur"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_boat = EventUnit();
    lv_player = UnitGetOwner(lv_boat);
    libGDHL_gv_lostVikingsPlayer[lv_player].lv_boat = lv_boat;
    UISetFrameVisible(libCore_gv_playerGroupFromPlayer[lv_player], c_syncFrameTypeControlGroupPanel, false);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(lv_boat, lv_player);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetChannelBehaviorForBehaviorChannelBar(lv_player, EventUnitBehavior());
    libUIUI_gf_UIUnitStatusFramesUpdateUnitStatusFramesForUnit(lv_player, lv_boat);
    libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_boat);
    libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    UnitSelect(lv_boat, lv_player, true);
    UnitGroupLoopBegin(libGame_gv_players[lv_player].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitBehaviorCount(UnitGroupLoopCurrent(), "LostVikingsLongboatRaidPoofDisabler") == 1)) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "HeroOlaf")) {
                lv_olafLoaded = true;
                lv_olaf = UnitGroupLoopCurrent();
                UnitGroupAdd(libGDHL_gv_lostVikingsPlayer[UnitGetOwner(EventUnit())].lv_longboatCrew, UnitGroupLoopCurrent());
            }
            else if ((UnitGetType(UnitGroupLoopCurrent()) == "HeroErik")) {
                lv_erikLoaded = true;
                lv_erik = UnitGroupLoopCurrent();
                UnitGroupAdd(libGDHL_gv_lostVikingsPlayer[UnitGetOwner(EventUnit())].lv_longboatCrew, UnitGroupLoopCurrent());
            }
            else if ((UnitGetType(UnitGroupLoopCurrent()) == "HeroBaleog")) {
                lv_baleogLoaded = true;
                lv_baleog = UnitGroupLoopCurrent();
                UnitGroupAdd(libGDHL_gv_lostVikingsPlayer[UnitGetOwner(EventUnit())].lv_longboatCrew, UnitGroupLoopCurrent());
            }
        }
        else {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "HeroOlaf")) {
                lv_olaf = UnitGroupLoopCurrent();
            }
            else if ((UnitGetType(UnitGroupLoopCurrent()) == "HeroErik")) {
                lv_erik = UnitGroupLoopCurrent();
            }
            else if ((UnitGetType(UnitGroupLoopCurrent()) == "HeroBaleog")) {
                lv_baleog = UnitGroupLoopCurrent();
            }
        }
    }
    UnitGroupLoopEnd();
    AIAddPlayerUnit(lv_boat);
    if ((lv_olafLoaded == true)) {
        AIRemovePlayerUnit(lv_olaf);
        UnitControlGroupRemoveUnit(lv_player, 1, lv_olaf);
        UnitControlGroupAddUnit(lv_player, 1, lv_boat);
        UnitControlGroupAddUnit(lv_player, 4, lv_boat);
    }

    if ((lv_erikLoaded == true)) {
        AIRemovePlayerUnit(lv_erik);
        UnitControlGroupRemoveUnit(lv_player, 3, lv_erik);
        UnitControlGroupAddUnit(lv_player, 3, lv_boat);
        UnitControlGroupAddUnit(lv_player, 4, lv_boat);
    }

    if ((lv_baleogLoaded == true)) {
        AIRemovePlayerUnit(lv_baleog);
        UnitControlGroupRemoveUnit(lv_player, 2, lv_baleog);
        UnitControlGroupAddUnit(lv_player, 2, lv_boat);
        UnitControlGroupAddUnit(lv_player, 4, lv_boat);
    }

    if (((libCore_gf_ActorStoredForUnit(lv_erik, 1) != null) || (libCore_gf_ActorStoredForUnit(lv_olaf, 1) != null) || (libCore_gf_ActorStoredForUnit(lv_baleog, 1) != null))) {
        libNtve_gf_AttachActorToUnit(lv_boat, "GenericHeroLight", "Ref_Origin");
        libCore_gf_StoreActorForUnit(lv_boat, 1, libNtve_gf_ActorLastCreated());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsLongboatRaidSelection_Init () {
    libGDHL_gt_HeroLostVikingsLongboatRaidSelection = TriggerCreate("libGDHL_gt_HeroLostVikingsLongboatRaidSelection_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsLongboatRaidSelection, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroLostVikingsLongboatRaidSelection, null, "LongboatRaidTimedLife", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Longboat Raid Ends (Reset Control Groups)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsLongboatRaidEndsResetControlGroups_Func (bool testConds, bool runActions) {
    string auto45D50667_val;

    // Variable Declarations
    unit lv_boat;
    int lv_lVPlayer;
    unit lv_erik;
    unit lv_olaf;
    unit lv_baleog;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) != null))) {
            return false;
        }

        if (!((UnitGetType(libGame_gv_players[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_heroUnit) != "HeroAbathur"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_boat = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    AIRemovePlayerUnit(lv_boat);
    lv_lVPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    UnitGroupLoopBegin(libGDHL_gv_lostVikingsPlayer[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_longboatCrew);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        auto45D50667_val = UnitGetType(UnitGroupLoopCurrent());
        if (auto45D50667_val == "HeroErik") {
            lv_erik = UnitGroupLoopCurrent();
            UnitControlGroupAddUnit(lv_lVPlayer, 3, lv_erik);
            UnitControlGroupRemoveUnit(lv_lVPlayer, 3, lv_boat);
            AIAddPlayerUnit(lv_erik);
        }
        else if (auto45D50667_val == "HeroBaleog") {
            lv_baleog = UnitGroupLoopCurrent();
            UnitControlGroupAddUnit(lv_lVPlayer, 2, lv_baleog);
            UnitControlGroupRemoveUnit(lv_lVPlayer, 2, lv_boat);
            AIAddPlayerUnit(lv_baleog);
        }
        else if (auto45D50667_val == "HeroOlaf") {
            lv_olaf = UnitGroupLoopCurrent();
            UnitControlGroupAddUnit(lv_lVPlayer, 1, lv_olaf);
            UnitControlGroupRemoveUnit(lv_lVPlayer, 1, lv_boat);
            AIAddPlayerUnit(lv_olaf);
        }
        else {
        }
    }
    UnitGroupLoopEnd();
    UnitControlGroupRemoveUnit(lv_lVPlayer, 4, lv_boat);
    Wait(0.25, c_timeGame);
    libUIUI_gf_UIHeroTrackerArrowShowHideForPlayer(true, lv_lVPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsLongboatRaidEndsResetControlGroups_Init () {
    libGDHL_gt_HeroLostVikingsLongboatRaidEndsResetControlGroups = TriggerCreate("libGDHL_gt_HeroLostVikingsLongboatRaidEndsResetControlGroups_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsLongboatRaidEndsResetControlGroups, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroLostVikingsLongboatRaidEndsResetControlGroups, c_playerAny, "LostVikingsLongboatRaidDeathDelay");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Longboat Raid Expiration
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsLongboatRaidExpiration_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_erik;
    fixed lv_erikCurrentFace;
    point lv_erikLaunchLoc;
    unit lv_baleog;
    fixed lv_baleogCurrentFace;
    point lv_baleogLaunchLoc;
    unit lv_olaf;
    fixed lv_olafCurrentFace;
    point lv_olafLaunchLoc;
    unit lv_boat;
    int lv_lVPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventPlayerEffectUsedUnit(c_effectUnitCaster) != null))) {
            return false;
        }

        if (!((UnitGetType(libGame_gv_players[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_heroUnit) != "HeroAbathur"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_boat = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_lVPlayer = UnitGetOwner(lv_boat);
    libGDHL_gv_lostVikingsPlayer[UnitGetOwner(lv_boat)].lv_boat = null;
    UnitSelect(lv_boat, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), false);
    UnitGroupLoopBegin(libGDHL_gv_lostVikingsPlayer[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_longboatCrew);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "HeroErik")) {
            lv_erik = UnitGroupLoopCurrent();
            if ((UnitIsAlive(lv_erik) == true)) {
                UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(lv_boat), false);
            }

            UnitCreateEffectUnit(lv_erik, "LostVikingsLongboatRaidTeleport", lv_erik);
            UnitCreateEffectUnit(lv_erik, "LongboatRaidModifyCooldown", lv_erik);
            UnitBehaviorRemove(lv_erik, "LongboatRaidHideVikings", 1);
            UnitSelect(lv_erik, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), true);
            UnitGroupRemove(libGDHL_gv_lostVikingsPlayer[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_longboatCrew, UnitGroupLoopCurrent());
            UnitCreateEffectUnit(lv_erik, "LostVikingsSuppressClickActionSoundCreatePersistent", lv_erik);
            if ((PlayerHasTalent(EventPlayer(), "LostVikingsMasterySpyGames") == true)) {
                UnitBehaviorAdd(lv_erik, "SpyGamesCooldown", lv_erik, 1);
            }

        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "HeroBaleog")) {
            lv_baleog = UnitGroupLoopCurrent();
            if ((UnitIsAlive(lv_baleog) == true)) {
                UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(lv_boat), false);
            }

            UnitCreateEffectUnit(lv_baleog, "LostVikingsLongboatRaidTeleport", lv_baleog);
            UnitBehaviorRemove(lv_baleog, "LongboatRaidHideVikings", 1);
            UnitSelect(lv_baleog, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), true);
            UnitGroupRemove(libGDHL_gv_lostVikingsPlayer[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_longboatCrew, UnitGroupLoopCurrent());
            UnitCreateEffectUnit(lv_baleog, "LostVikingsSuppressClickActionSoundCreatePersistent", lv_baleog);
        }

        if ((UnitGetType(UnitGroupLoopCurrent()) == "HeroOlaf")) {
            lv_olaf = UnitGroupLoopCurrent();
            if ((UnitIsAlive(lv_olaf) == true)) {
                UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(lv_boat), false);
            }

            UnitCreateEffectUnit(lv_olaf, "LostVikingsLongboatRaidTeleport", lv_olaf);
            UnitBehaviorRemove(lv_olaf, "LongboatRaidHideVikings", 1);
            UnitSelect(lv_olaf, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), true);
            UnitGroupRemove(libGDHL_gv_lostVikingsPlayer[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_longboatCrew, UnitGroupLoopCurrent());
            UnitCreateEffectUnit(lv_olaf, "LostVikingsSuppressClickActionSoundCreatePersistent", lv_olaf);
        }

        UISetFrameVisible(libCore_gv_playerGroupFromPlayer[EventPlayer()], c_syncFrameTypeControlGroupPanel, true);
    }
    UnitGroupLoopEnd();
    libGame_gv_players[lv_lVPlayer].lv_cameraCurrentTargetGroup = null;
    libGame_gv_players[lv_lVPlayer].lv_cameraPlayerUnitGroupToFocusOn = null;
    libGame_gf_CameraUpdateCameraForPlayer(lv_lVPlayer);
    libUIUI_gv_uIHeroStatusFrames[lv_lVPlayer].lv_unitCount -= 1;
    Wait(0.25, c_timeGame);
    libUIUI_gf_UIHeroTrackerArrowShowHideForPlayer(true, lv_lVPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsLongboatRaidExpiration_Init () {
    libGDHL_gt_HeroLostVikingsLongboatRaidExpiration = TriggerCreate("libGDHL_gt_HeroLostVikingsLongboatRaidExpiration_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsLongboatRaidExpiration, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroLostVikingsLongboatRaidExpiration, c_playerAny, "LongboatRaidExpirationDelayDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Hide Vikings On
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsHideVikingsOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unit lv_boat;
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    UnitCreateEffectUnit(EventUnit(), "UseVehicleTeleToBaseSearchForDestination", EventUnit());
    lv_itPlayer = UnitGetOwner(EventUnit());
    libUIUI_gf_UIHeroTrackerArrowShowHideForPlayer(false, lv_itPlayer);
    UnitGroupLoopBegin(UnitGroup("LongboatRaidBoat", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_boat = UnitGroupLoopCurrent();
    }
    UnitGroupLoopEnd();
    libGame_gf_SendEventCheckUnitForAbilityRedirect(lv_unit, lv_boat, false, UnitGetPosition(lv_boat));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsHideVikingsOn_Init () {
    libGDHL_gt_HeroLostVikingsHideVikingsOn = TriggerCreate("libGDHL_gt_HeroLostVikingsHideVikingsOn_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsHideVikingsOn, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroLostVikingsHideVikingsOn, null, "LongboatRaidHideVikings", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Longboat Raid Target Response
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsLongboatRaidTargetResponse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "LostVikingsLongboatTargetResponseDummyDamage", EventUnitDamageSourceUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsLongboatRaidTargetResponse_Init () {
    libGDHL_gt_HeroLostVikingsLongboatRaidTargetResponse = TriggerCreate("libGDHL_gt_HeroLostVikingsLongboatRaidTargetResponse_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsLongboatRaidTargetResponse, false);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroLostVikingsLongboatRaidTargetResponse, null, c_unitDamageTypeAny, c_unitDamageEither, "LostVikingsLongboatRaidWeaponDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings - Abathur Clone
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsAbathurClone_Func (bool testConds, bool runActions) {
    int autoED12D7AD_ae;
    int autoED12D7AD_ai;
    string auto0F54B8AF_val;

    // Variable Declarations
    int lv_itPlayer;
    int lv_lVPlayer;
    string lv_heroicCooldownLink;

    // Variable Initialization
    lv_heroicCooldownLink = "";

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "HeroErik") || (UnitGetType(EventUnit()) == "HeroBaleog") || (UnitGetType(EventUnit()) == "HeroOlaf")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoED12D7AD_ae = 10;
    autoED12D7AD_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoED12D7AD_ai >= 0 && lv_itPlayer <= autoED12D7AD_ae) || (autoED12D7AD_ai <= 0 && lv_itPlayer >= autoED12D7AD_ae) ) ; lv_itPlayer += autoED12D7AD_ai ) {
        if ((UnitGetType(libGame_gv_players[lv_itPlayer].lv_heroUnit) == "HeroLostVikingsController")) {
            lv_lVPlayer = lv_itPlayer;
            break;
        }

    }
    auto0F54B8AF_val = UnitGetType(EventUnit());
    if (auto0F54B8AF_val == "HeroErik") {
        UnitBehaviorAdd(EventUnit(), "LostVikingsBaleogDowned", EventUnit(), 1);
        UnitBehaviorAdd(EventUnit(), "LostVikingsOlafDowned", EventUnit(), 1);
    }
    else if (auto0F54B8AF_val == "HeroBaleog") {
        UnitBehaviorAdd(EventUnit(), "LostVikingsErikDowned", EventUnit(), 1);
        UnitBehaviorAdd(EventUnit(), "LostVikingsOlafDowned", EventUnit(), 1);
    }
    else if (auto0F54B8AF_val == "HeroOlaf") {
        UnitBehaviorAdd(EventUnit(), "LostVikingsErikDowned", EventUnit(), 1);
        UnitBehaviorAdd(EventUnit(), "LostVikingsBaleogDowned", EventUnit(), 1);
    }
    else {
    }
    UnitBehaviorAdd(EventUnit(), "LostVikings1VikingAlive", EventUnit(), 1);
    UnitBehaviorAdd(EventUnit(), "UltimateEvolutionAlternateHero", EventUnit(), 1);
    if ((PlayerHasTalent(lv_lVPlayer, "LostVikingsMasteryJump") == true)) {
        UnitBehaviorAdd(EventUnit(), "LostVikingsJumpEnabled", EventUnit(), 1);
    }

    if ((PlayerHasTalent(lv_lVPlayer, "LostVikingsMasterySpinToWin") == true)) {
        UnitBehaviorAdd(EventUnit(), "LostVikingsSpinToWinCarry", EventUnit(), 1);
    }

    if ((PlayerHasTalent(lv_lVPlayer, "LostVikingsMasteryNordicAttackSquad") == true)) {
        UnitBehaviorAdd(EventUnit(), "LostVikingsNordicAttackSquadCarry", EventUnit(), 1);
    }

    if ((PlayerHasTalent(lv_lVPlayer, "LostVikingsMasteryNorseForce") == true)) {
        UnitBehaviorAdd(EventUnit(), "LostVikingsNorseForceEnabled", EventUnit(), 1);
    }

    PlayerAddCooldown(UnitGetOwner(EventUnit()), CatalogFieldValueGet(c_gameCatalogAbil, "LostVikingsLongboatRaidNewer", "Cost[" + IntToString(0) + "].Cooldown.Link", UnitGetOwner(EventUnit())), 15.0);
    PlayerAddCooldown(UnitGetOwner(EventUnit()), CatalogFieldValueGet(c_gameCatalogAbil, "LostVikingsPlayAgain", "Cost[" + IntToString(0) + "].Cooldown.Link", UnitGetOwner(EventUnit())), 15.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsAbathurClone_Init () {
    libGDHL_gt_HeroLostVikingsAbathurClone = TriggerCreate("libGDHL_gt_HeroLostVikingsAbathurClone_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsAbathurClone, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroLostVikingsAbathurClone, null, "UltimateEvolutionBuild", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings Clone - Longboat Raid Selection
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsCloneLongboatRaidSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_erik;
    bool lv_erikLoaded;
    unit lv_baleog;
    bool lv_baleogLoaded;
    unit lv_olaf;
    bool lv_olafLoaded;
    unit lv_boat;
    int lv_player;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "LongboatRaidBoat"))) {
            return false;
        }

        if (!((UnitGetType(libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit) == "HeroAbathur"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_boat = EventUnit();
    lv_player = UnitGetOwner(lv_boat);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(lv_boat, lv_player);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetChannelBehaviorForBehaviorChannelBar(lv_player, EventUnitBehavior());
    UnitSelect(lv_boat, lv_player, true);
    UnitBehaviorAdd(lv_boat, "UltimateEvolutionAlternateHero", libGame_gv_players[lv_player].lv_heroUnit, 1);
    if ((UnitBehaviorCount(libGame_gv_players[lv_player].lv_activeVehicle, "LostVikingsLongboatRaidPoofDisabler") == 1)) {
        UnitGroupAdd(libGDHL_gv_lostVikingsPlayer[lv_player].lv_longboatCrew, libGame_gv_players[lv_player].lv_activeVehicle);
    }

    libGame_gv_players[lv_player].lv_cameraPlayerHasControl = false;
    libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_boat);
    libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    libGame_gv_players[lv_player].lv_cameraPlayerHasControl = true;
    libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsCloneLongboatRaidSelection_Init () {
    libGDHL_gt_HeroLostVikingsCloneLongboatRaidSelection = TriggerCreate("libGDHL_gt_HeroLostVikingsCloneLongboatRaidSelection_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsCloneLongboatRaidSelection, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroLostVikingsCloneLongboatRaidSelection, null, "LongboatRaidTimedLife", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Lost Vikings Clone - Longboat Raid Expiration
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroLostVikingsCloneLongboatRaidExpiration_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_viking;
    unit lv_boat;
    int lv_player;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_heroUnit) == "HeroAbathur"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_boat = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    UnitSelect(lv_boat, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), false);
    if ((UnitIsAlive(libGame_gv_players[lv_player].lv_activeVehicle) == true)) {
        lv_viking = libGame_gv_players[lv_player].lv_activeVehicle;
        UnitSetPosition(lv_viking, UnitGetPosition(lv_boat), false);
        UnitCreateEffectUnit(lv_viking, "LostVikingsLongboatRaidTeleport", lv_viking);
        UnitBehaviorRemove(lv_viking, "LongboatRaidHideVikings", 1);
        UnitSelect(lv_viking, UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), true);
        UnitGroupRemove(libGDHL_gv_lostVikingsPlayer[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_longboatCrew, lv_viking);
        libGame_gv_players[lv_player].lv_cameraPlayerHasControl = false;
        libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_viking);
        libGame_gf_CameraUpdateCameraForPlayer(lv_player);
        libGame_gv_players[lv_player].lv_cameraPlayerHasControl = true;
        libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroLostVikingsCloneLongboatRaidExpiration_Init () {
    libGDHL_gt_HeroLostVikingsCloneLongboatRaidExpiration = TriggerCreate("libGDHL_gt_HeroLostVikingsCloneLongboatRaidExpiration_Func");
    TriggerEnable(libGDHL_gt_HeroLostVikingsCloneLongboatRaidExpiration, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroLostVikingsCloneLongboatRaidExpiration, c_playerAny, "LostVikingsLongboatRaidDeathDelay");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lost Vikings UI Initialize
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LostVikingsUIInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlCreateInPanelFromTemplate(libUIUI_gv_heroSpecificStatusContainer, c_triggerControlTypePanel, "LostVikings/LostVikingsIconFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libGDHL_gv_lostVikingsUI.lv_lostVikingsIconFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LostVikingsOlafIconDeselected");
    libGDHL_gv_lostVikingsUI.lv_olafUnselectedIconImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LostVikingsOlafIconSelected");
    libGDHL_gv_lostVikingsUI.lv_olafSelectedIconImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LostVikingsOlafIconDead");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libGDHL_gv_lostVikingsUI.lv_olafDeadImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "LostVikingsOlafDeadOverlayFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libGDHL_gv_lostVikingsUI.lv_lostOlafDeadImageOverlay = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LostVikingsBaleogIconDeselected");
    libGDHL_gv_lostVikingsUI.lv_baleogUnselectedIconImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LostVikingsBaleogIconSelected");
    libGDHL_gv_lostVikingsUI.lv_baleogSelectedIconImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LostVikingsBaleogIconDead");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libGDHL_gv_lostVikingsUI.lv_baleogDeadImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "LostVikingsBaleogDeadOverlayFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libGDHL_gv_lostVikingsUI.lv_lostBaleogDeadImageOverlay = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LostVikingsErikIconDeselected");
    libGDHL_gv_lostVikingsUI.lv_erikUnselectedIconImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LostVikingsErikIconSelected");
    libGDHL_gv_lostVikingsUI.lv_erikSelectedIconImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LostVikingsErikIconDead");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libGDHL_gv_lostVikingsUI.lv_erikDeadImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "LostVikingsErikDeadOverlayFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libGDHL_gv_lostVikingsUI.lv_lostErikDeadImageOverlay = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlCreateInPanelFromTemplate(libUIUI_gv_heroSpecificFullUIModContainer, c_triggerControlTypePanel, "LostVikings/LostVikingsChannelFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libGDHL_gv_lostVikingsUI.lv_lostVikingsChannelFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "LostVikingsOlafCastChannelBarFrame");
    libGDHL_gv_lostVikingsUI.lv_lostVikingsOlafCastChannelBarFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "LostVikingsBaleogCastChannelBarFrame");
    libGDHL_gv_lostVikingsUI.lv_lostVikingsBaleogCastChannelBarFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "LostVikingsErikCastChannelBarFrame");
    libGDHL_gv_lostVikingsUI.lv_lostVikingsErikCastChannelBarFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "LostVikingsOlafBehaviorChannelBarFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libGDHL_gv_lostVikingsUI.lv_lostVikingsOlafBehaviorChannelBarFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusDurationBar, "LostVikingsBehaviorChannelBar");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libGDHL_gv_lostVikingsUI.lv_lostVikingsOlafBehaviorChannelBarDurationBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "LostVikingsBehaviorChannelBar/ChannelNameLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libGDHL_gv_lostVikingsUI.lv_lostVikingsOlafBehaviorChannelBarBehaviorLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "LostVikingsBaleogBehaviorChannelBarFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libGDHL_gv_lostVikingsUI.lv_lostVikingsBaleogBehaviorChannelBarFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusDurationBar, "LostVikingsBehaviorChannelBar");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libGDHL_gv_lostVikingsUI.lv_lostVikingsBaleogBehaviorChannelBarDurationBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "LostVikingsBehaviorChannelBar/ChannelNameLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libGDHL_gv_lostVikingsUI.lv_lostVikingsBaleogBehaviorChannelBarBehaviorLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "LostVikingsErikBehaviorChannelBarFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libGDHL_gv_lostVikingsUI.lv_lostVikingsErikBehaviorChannelBarFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusDurationBar, "LostVikingsBehaviorChannelBar");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libGDHL_gv_lostVikingsUI.lv_lostVikingsErikBehaviorChannelBarDurationBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "LostVikingsBehaviorChannelBar/ChannelNameLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libGDHL_gv_lostVikingsUI.lv_lostVikingsErikBehaviorChannelBarBehaviorLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    lv_currentPanelLayer -= 1;
    DialogControlCreateInPanelFromTemplate(libUIUI_gv_heroSpecificFullUIModContainer, c_triggerControlTypePanel, "LostVikings/LostVikingsHeroStatsFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libGDHL_gv_lostVikingsUI.lv_heroStatsFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "ErikUnitStatusFrame");
    libGDHL_gv_lostVikingsUI.lv_erikUnitStatusFrame = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "UnitNameLabel/Label");
    libGDHL_gv_lostVikingsUI.lv_erikNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HealthBarLabel/StatusLabel");
    libGDHL_gv_lostVikingsUI.lv_erikHPLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DownedLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libGDHL_gv_lostVikingsUI.lv_erikDownedLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "BaleogUnitStatusFrame");
    libGDHL_gv_lostVikingsUI.lv_baleogUnitStatusFrame = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "UnitNameLabel/Label");
    libGDHL_gv_lostVikingsUI.lv_baleogNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HealthBarLabel/StatusLabel");
    libGDHL_gv_lostVikingsUI.lv_baleogHPLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DownedLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libGDHL_gv_lostVikingsUI.lv_baleogDownedLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "OlafUnitStatusFrame");
    libGDHL_gv_lostVikingsUI.lv_olafUnitStatusFrame = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "UnitNameLabel/Label");
    libGDHL_gv_lostVikingsUI.lv_olafNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HealthBarLabel/StatusLabel");
    libGDHL_gv_lostVikingsUI.lv_olafHPLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DownedLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libGDHL_gv_lostVikingsUI.lv_olafDownedLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    lv_currentPanelLayer -= 1;
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ConsoleUIContainer/ControlGroupPanel/ControlGroupButton0/ControlGroupStatusFrame");
    libGDHL_gv_lostVikingsUI.lv_olafDeathStatusFrame = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ConsoleUIContainer/ControlGroupPanel/ControlGroupButton1/ControlGroupStatusFrame");
    libGDHL_gv_lostVikingsUI.lv_baleogDeathStatusFrame = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ConsoleUIContainer/ControlGroupPanel/ControlGroupButton2/ControlGroupStatusFrame");
    libGDHL_gv_lostVikingsUI.lv_erikDeathStatusFrame = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/ConsoleUIContainer/ControlGroupPanel/ControlGroupButton3/ControlGroupStatusFrame");
    libGDHL_gv_lostVikingsUI.lv_allDeathStatusFrame = DialogControlLastCreated();
    TriggerEnable(libGDHL_gt_LostVikingsUIUpdate, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LostVikingsUIInitialize_Init () {
    libGDHL_gt_LostVikingsUIInitialize = TriggerCreate("libGDHL_gt_LostVikingsUIInitialize_Func");
    libCore_gf_IncludeModInitialization(libGDHL_gt_LostVikingsUIInitialize);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lost Vikings UI Update
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LostVikingsUIUpdate_Func (bool testConds, bool runActions) {
    int auto929639CD_ae;

    // Variable Declarations
    int lv_itLostVikingsPlayerTeam;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto929639CD_ae = libCore_gv_bALMaxPlayers;
    lv_itLostVikingsPlayerTeam = 1;
    for ( ; lv_itLostVikingsPlayerTeam <= auto929639CD_ae ; lv_itLostVikingsPlayerTeam += 1 ) {
        if ((UnitGetType(libGame_gv_players[lv_itLostVikingsPlayerTeam].lv_heroUnit) != "HeroLostVikingsController")) {
            continue;
        }

        libGDHL_gf_LostVikingsUIUpdateAllSelectionDownedStatusForPlayer(lv_itLostVikingsPlayerTeam);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LostVikingsUIUpdate_Init () {
    libGDHL_gt_LostVikingsUIUpdate = TriggerCreate("libGDHL_gt_LostVikingsUIUpdate_Func");
    TriggerEnable(libGDHL_gt_LostVikingsUIUpdate, false);
    TriggerAddEventTimePeriodic(libGDHL_gt_LostVikingsUIUpdate, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lost Vikings UI Clean Up UI For Debug Hero Swap
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LostVikingsUICleanUpUIForDebugHeroSwap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = libGame_gf_DebugHeroSwappedPlayer();
    if ((libGame_gv_players[lv_player].lv_heroIndex != libCore_gf_GetHeroIndexForUnitType("HeroLostVikingsController"))) {
        libGDHL_gf_LostVikingsUIUnSetupUIForPlayer(lv_player);
    }

    libAIAI_gf_HeroAILostVikingsClearDebuggingUI(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LostVikingsUICleanUpUIForDebugHeroSwap_Init () {
    libGDHL_gt_LostVikingsUICleanUpUIForDebugHeroSwap = TriggerCreate("libGDHL_gt_LostVikingsUICleanUpUIForDebugHeroSwap_Func");
    libGame_gf_DebugHeroSwapped(libGDHL_gt_LostVikingsUICleanUpUIForDebugHeroSwap);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Lost Vikings Console Unit Status Bars Channel Behavior Added
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_LostVikingsConsoleUnitStatusBarsChannelBehaviorAdded_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_heroUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventPlayer() >= 1))) {
            return false;
        }

        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((CatalogFieldValueGetAsInt(c_gameCatalogBehavior, EventUnitBehavior(), "BehaviorCategories[Restorable]", c_playerAny) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    if ((UnitGetType(EventUnit()) != "HeroErik") && (UnitGetType(EventUnit()) != "HeroBaleog") && (UnitGetType(EventUnit()) != "HeroOlaf")) {
        return true;
    }

    libGDHL_gf_LostVikingsConsoleUnitStatusBarsSetChannelBehaviorForBehaviorChannelBar(lv_player, EventUnitBehavior(), EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_LostVikingsConsoleUnitStatusBarsChannelBehaviorAdded_Init () {
    libGDHL_gt_LostVikingsConsoleUnitStatusBarsChannelBehaviorAdded = TriggerCreate("libGDHL_gt_LostVikingsConsoleUnitStatusBarsChannelBehaviorAdded_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_LostVikingsConsoleUnitStatusBarsChannelBehaviorAdded, null, null, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Malfurion - Twilight Dream - Silence Target
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMalfurionTwilightDreamSilenceTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    int lv_owner;

    // Variable Initialization
    lv_targetUnit = EventUnit();
    lv_owner = UnitGetOwner(lv_targetUnit);

    // Conditions
    if (testConds) {
        if (!((lv_owner > 0))) {
            return false;
        }

        if (!((lv_owner <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(lv_targetUnit), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UILowHPSetSoundChannelsForSilence(lv_owner);
    SoundPlayForPlayer(SoundLink("Malfurion_TwilightDream_Loop", -1), lv_owner, libCore_gv_playerGroupFromPlayer[lv_owner], 100.0, 0.0);
    Wait(5.0, c_timeGame);
    SoundStop(SoundLastPlayed(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMalfurionTwilightDreamSilenceTarget_Init () {
    libGDHL_gt_HeroMalfurionTwilightDreamSilenceTarget = TriggerCreate("libGDHL_gt_HeroMalfurionTwilightDreamSilenceTarget_Func");
    TriggerEnable(libGDHL_gt_HeroMalfurionTwilightDreamSilenceTarget, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMalfurionTwilightDreamSilenceTarget, null, "TwilightDreamSilence", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMalfurionTwilightDreamSilenceTarget, null, "TwilightDreamSilence", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Malfurion - Twilight Dream - Silence End
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMalfurionTwilightDreamSilenceEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    int lv_owner;

    // Variable Initialization
    lv_targetUnit = EventUnit();
    lv_owner = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((lv_owner > 0))) {
            return false;
        }

        if (!((lv_owner <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(lv_targetUnit), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UILowHPSetSoundChannelsForNormal(lv_owner);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMalfurionTwilightDreamSilenceEnd_Init () {
    libGDHL_gt_HeroMalfurionTwilightDreamSilenceEnd = TriggerCreate("libGDHL_gt_HeroMalfurionTwilightDreamSilenceEnd_Func");
    TriggerEnable(libGDHL_gt_HeroMalfurionTwilightDreamSilenceEnd, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMalfurionTwilightDreamSilenceEnd, null, "TwilightDreamSilence", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Malfurion - Innervate CDR
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMalfurionInnervateCDR_Func (bool testConds, bool runActions) {
    int auto2AFE4DF1_ae;
    int auto2AFE4DF1_ai;

    // Variable Declarations
    fixed lv_cDRAmount;
    int lv_itAbility;
    unit lv_hero;
    int lv_heroIndex;
    string lv_abilLink;
    string lv_cooldownLink;
    fixed lv_currentCooldownAmount;
    fixed lv_newCooldownAmount;
    string lv_chargeLink;
    fixed lv_currentChargeAmount;
    fixed lv_newChargeAmount;

    // Variable Initialization
    lv_cDRAmount = -0.5;
    lv_cooldownLink = "";
    lv_chargeLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_heroIndex = libCore_gf_GetHeroIndexForUnitType(UnitGetType(lv_hero));
    auto2AFE4DF1_ae = libGame_gv_players[lv_heroIndex].lv_heroData.lv_numberOfAbilities;
    auto2AFE4DF1_ai = 1;
    lv_itAbility = 1;
    for ( ; ( (auto2AFE4DF1_ai >= 0 && lv_itAbility <= auto2AFE4DF1_ae) || (auto2AFE4DF1_ai <= 0 && lv_itAbility >= auto2AFE4DF1_ae) ) ; lv_itAbility += auto2AFE4DF1_ai ) {
        if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_isAffectedByCooldownReduction == true) && (libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_isHeroic == false) && (libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_isTrait == false)) {
            lv_abilLink = libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_ability;
            lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.Link", UnitGetOwner(lv_hero));
            UnitModifyCooldown(lv_hero, lv_cooldownLink, lv_cDRAmount, c_cooldownOperationAdd);
            if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_usesCharges == true)) {
                lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Charge.Link", UnitGetOwner(lv_hero));
                UnitAddChargeRegenRemaining(lv_hero, lv_chargeLink, lv_cDRAmount);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMalfurionInnervateCDR_Init () {
    libGDHL_gt_HeroMalfurionInnervateCDR = TriggerCreate("libGDHL_gt_HeroMalfurionInnervateCDR_Func");
    TriggerEnable(libGDHL_gt_HeroMalfurionInnervateCDR, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMalfurionInnervateCDR, c_playerAny, "MalfurionInnervateModifyUnitDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Medic UI Initialize
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_MedicUIInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookup(libUIUI_gv_fullscreenStatusPanel, c_triggerControlTypePanel, "MedivacAlert");
    libGDHL_gv_medicUI.lv_medivacAlert = DialogControlLastCreated();
    DialogControlHookup(libGDHL_gv_medicUI.lv_medivacAlert, c_triggerControlTypeLabel, "DepartSecondsLabel");
    libGDHL_gv_medicUI.lv_medivacCountdownNumber = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_MedicUIInitialize_Init () {
    libGDHL_gt_MedicUIInitialize = TriggerCreate("libGDHL_gt_MedicUIInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Medic - AIDisplacementGrenadeThink
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMedicAIDisplacementGrenadeThink_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_grenadeUnit;
    point lv_grenadePosition;
    point lv_targetUnitPosition;
    int lv_player;
    order lv_detonateGrenadeOrder;
    unit lv_currentTacticalTargetUnit;

    // Variable Initialization
    lv_grenadeUnit = EventUnitCreatedUnit();
    lv_player = UnitGetOwner(EventUnitCreatedUnit());
    lv_currentTacticalTargetUnit = g_currentMedicDisplacementGrenadeTarget[lv_player];

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lv_player) == true) && (UnitIsAlive(lv_grenadeUnit) == true) && (UnitIsAlive(lv_currentTacticalTargetUnit) == true)) {
        lv_grenadePosition = UnitGetPosition(lv_grenadeUnit);
        lv_targetUnitPosition = UnitGetPosition(lv_currentTacticalTargetUnit);
        if ((DistanceSquaredBetweenPoints(lv_grenadePosition, lv_targetUnitPosition) < (c_MedicDisplacementGrenadeRadius * c_MedicDisplacementGrenadeRadius))) {
            lv_detonateGrenadeOrder = Order(AbilityCommand("MedicDetonateDisplacementGrenade", 0));
            if ((UnitOrderIsValid(libGame_gv_players[lv_player].lv_heroUnit, lv_detonateGrenadeOrder) == true)) {
                HeroAIUnitIssueOrder(libGame_gv_players[lv_player].lv_heroUnit, lv_detonateGrenadeOrder, c_orderQueueReplace);
                TriggerEnable(TriggerGetCurrent(), false);
                return true;
            }

        }

        Wait(0.0625, c_timeGame);
    }
    TriggerEnable(TriggerGetCurrent(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMedicAIDisplacementGrenadeThink_Init () {
    libGDHL_gt_HeroMedicAIDisplacementGrenadeThink = TriggerCreate("libGDHL_gt_HeroMedicAIDisplacementGrenadeThink_Func");
    TriggerEnable(libGDHL_gt_HeroMedicAIDisplacementGrenadeThink, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroMedicAIDisplacementGrenadeThink, null, "MedicDisplacementGrenade", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Medic - Medivac Dropship Set Dropoff Location
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMedicMedivacDropshipSetDropoffLocation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dropoffUnit;

    // Variable Initialization
    lv_dropoffUnit = EventUnitCreatedUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_dropoffUnit) == "MedicMedivacDropshipDropoffLocationUnit"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_medicMedivacDropshipDropoffLocation[UnitGetOwner(lv_dropoffUnit)] = lv_dropoffUnit;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMedicMedivacDropshipSetDropoffLocation_Init () {
    libGDHL_gt_HeroMedicMedivacDropshipSetDropoffLocation = TriggerCreate("libGDHL_gt_HeroMedicMedivacDropshipSetDropoffLocation_Func");
    TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipSetDropoffLocation, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroMedicMedivacDropshipSetDropoffLocation, null, "MedicMedivacDropship", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Medic - Medivac Dropship En Route Orders
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMedicMedivacDropshipEnRouteOrders_Func (bool testConds, bool runActions) {
    unitgroup auto26450680_g;
    int auto26450680_u;

    // Variable Declarations
    unit lv_dropship;
    int lv_player;
    unit lv_itCargoUnit;
    point lv_dropoffLocationPoint;

    // Variable Initialization
    lv_dropship = EventUnit();
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_dropship) == "MedicMedivacDropship"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dropoffLocationPoint = UnitGetPosition(libGDHL_gv_medicMedivacDropshipDropoffLocation[lv_player]);
    if ((DistanceBetweenPoints(UnitGetPosition(lv_dropship), lv_dropoffLocationPoint) < 20.0)) {
        UnitCreateEffectPoint(lv_dropship, "MedicMedivacDropshipLaunchMissile", libNtve_gf_PointWithZOffset(lv_dropoffLocationPoint, 2.0));
    }
    else {
        UnitIssueOrder(lv_dropship, OrderTargetingPoint(AbilityCommand("move", 0), lv_dropoffLocationPoint), c_orderQueueReplace);
    }
    if ((DistanceBetweenPoints(UnitGetPosition(lv_dropship), lv_dropoffLocationPoint) > 20.0)) {
        libNtve_gf_SendActorMessageToUnit(lv_dropship, "AnimPlay Spell Spell,B NonLooping");
    }

    auto26450680_g = UnitCargoGroup(lv_dropship);
    auto26450680_u = 1;
    for ( ; auto26450680_u <= UnitGroupCount(auto26450680_g, c_unitCountAll) ; auto26450680_u += (lv_itCargoUnit == UnitGroupUnit(auto26450680_g, auto26450680_u)) ) {
        lv_itCargoUnit = UnitGroupUnit(auto26450680_g, auto26450680_u);
        libGDHL_gf_UIHeroSpecificStatusFrameShowHideMedivacUI(false, UnitGetOwner(lv_itCargoUnit));
    }
    UnitCreateEffectPoint(lv_dropship, "MedicMedivacDropshipDestinationDecelerationPersistent", lv_dropoffLocationPoint);
    UnitCreateEffectUnit(lv_dropship, "MedicMedivacDropshipRemoveHonkClickResponse", lv_dropship);
    while ((UnitIsAlive(lv_dropship) == true) && (UnitBehaviorCount(lv_dropship, "MedicMedivacDropshipEnRoute") == 1)) {
        if ((DistanceBetweenPoints(UnitGetPosition(lv_dropship), lv_dropoffLocationPoint) <= 5.0)) {
            UnitBehaviorRemove(lv_dropship, "MedicMedivacDropshipDepartureAscent", 1);
        }

        if ((DistanceBetweenPoints(UnitGetPosition(lv_dropship), lv_dropoffLocationPoint) <= 1.0)) {
            UnitBehaviorSetDurationRemaining(libGDHL_gv_medicMedivacDropshipDropoffLocation[lv_player], "MedicMedivacDropshipDropoffLocationTimedLife", 0.0);
            UnitBehaviorRemove(lv_dropship, "MedicMedivacDropshipEnRoute", 1);
        }

        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMedicMedivacDropshipEnRouteOrders_Init () {
    libGDHL_gt_HeroMedicMedivacDropshipEnRouteOrders = TriggerCreate("libGDHL_gt_HeroMedicMedivacDropshipEnRouteOrders_Func");
    TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipEnRouteOrders, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMedicMedivacDropshipEnRouteOrders, null, "MedicMedivacDropshipDepartureAscent", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Medic - Medivac Drop Off Reselection For Medic
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMedicMedivacDropOffReselectionForMedic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_heroUnit;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    lv_heroUnit = libGame_gv_players[lv_player].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_heroUnit) == "HeroMedic"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitSelect(EventPlayerEffectUsedUnit(c_effectUnitCaster), lv_player, false);
    UnitSelect(lv_heroUnit, lv_player, true);
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(lv_heroUnit, lv_player);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(lv_heroUnit, lv_player);
    libGDHL_gf_UIHeroSpecificStatusFrameShowHideMedivacUI(false, lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMedicMedivacDropOffReselectionForMedic_Init () {
    libGDHL_gt_HeroMedicMedivacDropOffReselectionForMedic = TriggerCreate("libGDHL_gt_HeroMedicMedivacDropOffReselectionForMedic_Func");
    TriggerEnable(libGDHL_gt_HeroMedicMedivacDropOffReselectionForMedic, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMedicMedivacDropOffReselectionForMedic, c_playerAny, "MedicMedivacDropshipExitDropshipSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Medic - Medivac Dropship Death Cleanup
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMedicMedivacDropshipDeathCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dropship;
    int lv_player;
    unit lv_heroUnit;

    // Variable Initialization
    lv_dropship = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_dropship) == "MedicMedivacDropship"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(lv_dropship);
    lv_heroUnit = libGame_gv_players[lv_player].lv_heroUnit;
    UnitSelect(lv_dropship, lv_player, false);
    UnitSelect(lv_heroUnit, lv_player, true);
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(lv_heroUnit, lv_player);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(lv_heroUnit, lv_player);
    if ((libGDHL_gv_medicMedivacDropshipDropoffLocation[lv_player] != null)) {
        UnitKill(libGDHL_gv_medicMedivacDropshipDropoffLocation[lv_player]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMedicMedivacDropshipDeathCleanup_Init () {
    libGDHL_gt_HeroMedicMedivacDropshipDeathCleanup = TriggerCreate("libGDHL_gt_HeroMedicMedivacDropshipDeathCleanup_Func");
    TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipDeathCleanup, false);
    TriggerAddEventUnitDied(libGDHL_gt_HeroMedicMedivacDropshipDeathCleanup, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Medic - Medivac Text Tags
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMedicMedivacTextTags_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dropship;
    int lv_textTag;
    int lv_itPlayer;

    // Variable Initialization
    lv_dropship = EventUnit();
    lv_textTag = c_textTagNone;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_dropship) == "MedicMedivacDropship"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitIsAlive(lv_dropship) == true) && (UnitBehaviorDuration(lv_dropship, "MedicMedivacDropshipAcceptingPassengers") > 0.1)) {
        libNtve_gf_SetDialogItemText(libGDHL_gv_medicUI.lv_medivacCountdownNumber, FixedToText(Floor(UnitBehaviorDuration(lv_dropship, "MedicMedivacDropshipAcceptingPassengers")), 0), libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_dropship))].lv_teamPlayerGroupNoNPCPlayers);
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMedicMedivacTextTags_Init () {
    libGDHL_gt_HeroMedicMedivacTextTags = TriggerCreate("libGDHL_gt_HeroMedicMedivacTextTags_Func");
    TriggerEnable(libGDHL_gt_HeroMedicMedivacTextTags, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMedicMedivacTextTags, null, "MedicMedivacDropshipAcceptingPassengers", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Medic - Medivac Dropship Selection
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMedicMedivacDropshipSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medic;
    int lv_localPathDisplay;
    unit lv_dropship;
    int lv_player;
    int lv_playerTeam;

    // Variable Initialization
    lv_dropship = EventUnitCreatedUnit();
    lv_player = UnitGetOwner(lv_dropship);
    lv_playerTeam = libGame_gf_TeamNumberOfPlayer(lv_player);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_dropship) == "MedicMedivacDropship"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_medic = libGame_gv_players[lv_player].lv_heroUnit;
    libNtve_gf_MakeUnitFacePoint(lv_dropship, UnitGetPosition(libGDHL_gv_medicMedivacDropshipDropoffLocation[UnitGetOwner(lv_dropship)]), 0.0);
    if ((UnitIsAlive(lv_medic) == false)) {
        UnitKill(lv_dropship);
        return true;
    }

    UnitSelect(lv_medic, lv_player, false);
    UnitSelect(lv_dropship, lv_player, true);
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(lv_dropship, lv_player);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(lv_dropship, lv_player);
    libCore_gf_CreateMinimapPingStorm(libGame_gv_teams[lv_playerTeam].lv_teamPlayerGroupNoNPCPlayers, "MedivacAlert", UnitGetPosition(lv_dropship), Color(0.00, 0.00, 100.00), 2.0);
    libCore_gf_CreateMinimapPingStorm(libGame_gv_teams[lv_playerTeam].lv_teamPlayerGroupNoNPCPlayers, "StormObjective", UnitGetPosition(libGDHL_gv_medicMedivacDropshipDropoffLocation[lv_player]), ColorWithAlpha(0,0,0,0), 8.0);
    PathCreateForUnit(libGame_gv_teams[lv_playerTeam].lv_teamPlayerGroupNoNPCPlayers, lv_dropship);
    lv_localPathDisplay = PathLastCreated();
    PathSetDestinationPoint(lv_localPathDisplay, UnitGetPosition(libGDHL_gv_medicMedivacDropshipDropoffLocation[lv_player]));
    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
    PathSetDestinationUnit(lv_localPathDisplay, libGDHL_gv_medicMedivacDropshipDropoffLocation[lv_player]);
    PathSetLineTexture(lv_localPathDisplay, c_pathLocationAll, "Assets\\Textures\\storm_waypointline.dds");
    while ((UnitIsAlive(lv_dropship) == true) && (UnitBehaviorCount(lv_dropship, "MedicMedivacDropshipFinalDepartureDelay") != 1)) {
        if ((UnitHasBehavior2(lv_dropship, "MedicMedivacDropshipAcceptingPassengers") == true)) {
            libAIAI_gf_RecruitAIForTransport(lv_dropship);
        }

        Wait(0.0625, c_timeGame);
    }
    PathDestroy(lv_localPathDisplay);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMedicMedivacDropshipSelection_Init () {
    libGDHL_gt_HeroMedicMedivacDropshipSelection = TriggerCreate("libGDHL_gt_HeroMedicMedivacDropshipSelection_Func");
    TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipSelection, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroMedicMedivacDropshipSelection, null, "MedicMedivacDropship", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Medic - Medivac Dropship Prepare Warning
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMedicMedivacDropshipPrepareWarning_Func (bool testConds, bool runActions) {
    playergroup auto806EB42B_g;
    int auto806EB42B_p;

    // Variable Declarations
    int lv_player;
    int lv_itPlayer;

    // Variable Initialization
    lv_player = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));

    // Actions
    if (!runActions) {
        return true;
    }

    auto806EB42B_g = libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_player)].lv_teamPlayerGroupNoNPCPlayers; 
    auto806EB42B_p = 1;
    for ( ; auto806EB42B_p <= PlayerGroupCount(auto806EB42B_g) ; auto806EB42B_p += (lv_itPlayer == PlayerGroupPlayer(auto806EB42B_g, auto806EB42B_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto806EB42B_g, auto806EB42B_p);
        if ((lv_player != lv_itPlayer)) {
            UIDisplayMessage(PlayerGroupSingle(lv_itPlayer), c_messageAreaChat, StringExternal("Param/Value/lib_GDHL_15FD0FCD"));
        }

    }
    UIDisplayMessage(libGame_gv_teams[libGame_gf_EnemyTeamNumberOfPlayer(lv_player)].lv_teamPlayerGroupNoNPCPlayers, c_messageAreaChat, StringExternal("Param/Value/lib_GDHL_9B23BD86"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMedicMedivacDropshipPrepareWarning_Init () {
    libGDHL_gt_HeroMedicMedivacDropshipPrepareWarning = TriggerCreate("libGDHL_gt_HeroMedicMedivacDropshipPrepareWarning_Func");
    TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipPrepareWarning, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMedicMedivacDropshipPrepareWarning, c_playerAny, "MedicMedivacDropshipPrepareSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Medic - Medivac Dropship Dropoff Selection
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMedicMedivacDropshipDropoffSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dropship;
    unit lv_cargoUnit;
    int lv_cargoPlayer;

    // Variable Initialization
    lv_dropship = EventUnit();
    lv_cargoUnit = EventUnitCargo();
    lv_cargoPlayer = UnitGetOwner(EventUnitCargo());

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_dropship) == "MedicMedivacDropship"))) {
            return false;
        }

        if (!((UnitGetType(libGame_gv_players[lv_cargoPlayer].lv_heroUnit) != "HeroLostVikingsController"))) {
            return false;
        }

        if (!((UnitGetType(libGame_gv_players[lv_cargoPlayer].lv_heroUnit) != "HeroSamuro"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lv_cargoUnit == libGame_gv_players[lv_cargoPlayer].lv_heroUnit) || (UnitGroupHasUnit(libGame_gv_players[lv_cargoPlayer].lv_heroUnitGroup, lv_cargoUnit) == true))) {
        UnitSelect(lv_dropship, lv_cargoPlayer, false);
        UnitSelect(libGame_gv_players[lv_cargoPlayer].lv_heroUnit, lv_cargoPlayer, true);
        libNtve_gf_RestoreUnitSelection(lv_cargoPlayer);
    }
    else {
        if ((lv_cargoUnit == libGame_gv_players[lv_cargoPlayer].lv_activeVehicle)) {
            UnitSelect(lv_dropship, lv_cargoPlayer, false);
            UnitSelect(libGame_gv_players[lv_cargoPlayer].lv_activeVehicle, lv_cargoPlayer, true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMedicMedivacDropshipDropoffSelection_Init () {
    libGDHL_gt_HeroMedicMedivacDropshipDropoffSelection = TriggerCreate("libGDHL_gt_HeroMedicMedivacDropshipDropoffSelection_Func");
    TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipDropoffSelection, false);
    TriggerAddEventUnitCargo(libGDHL_gt_HeroMedicMedivacDropshipDropoffSelection, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Medic - Medivac Dropship Transport Event
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMedicMedivacDropshipTransportEvent_Func (bool testConds, bool runActions) {
    playergroup auto76C240DB_g;
    int auto76C240DB_p;
    int auto94E6FF96_ae;
    int auto94E6FF96_ai;

    // Variable Declarations
    unit lv_cargoUnit;
    unit lv_medivac;
    int lv_cargoAmt;
    playergroup lv_pipPlayerGroup;
    int lv_itPlayer;
    int lv_itPip;

    // Variable Initialization
    lv_cargoUnit = EventUnitCargo();
    lv_medivac = EventUnit();
    lv_pipPlayerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_medivac) == "MedicMedivacDropship"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_SendEventHeroEnteredTransport(UnitGetOwner(lv_cargoUnit), lv_medivac, lv_cargoUnit);
    if ((UnitGetType(libGame_gv_players[UnitGetOwner(lv_cargoUnit)].lv_heroUnit) != "HeroLostVikingsController")) {
        libGame_gv_players[UnitGetOwner(lv_cargoUnit)].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_medivac);
        libGame_gf_CameraUpdateCameraForPlayer(UnitGetOwner(lv_cargoUnit));
        if ((UnitGetOwner(lv_medivac) != UnitGetOwner(lv_cargoUnit))) {
            libNtve_gf_StoreUnitSelection(UnitGetOwner(lv_cargoUnit), libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
        }

    }

    if (((libGame_gv_players[UnitGetOwner(lv_cargoUnit)].lv_activeVehicle != null) && (UnitGetType(libGame_gv_players[UnitGetOwner(lv_cargoUnit)].lv_heroUnit) == "HeroAbathur"))) {
        TransmissionSendForPlayerSelect(PlayerGroupSingle(UnitGetOwner(lv_cargoUnit)), TransmissionSourceFromUnit(libGame_gv_players[UnitGetOwner(lv_cargoUnit)].lv_activeVehicle, false, true, ""), PortraitGetGame(), "", "Stand", null, StringExternal("Param/Value/lib_GDHL_4FE2EF61"), StringToText(""), 60.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
        libGDHL_gv_medivacTransmissionPortraitOverride[UnitGetOwner(lv_cargoUnit)] = TransmissionLastSent();
    }
    else {
        TransmissionSendForPlayerSelect(PlayerGroupSingle(UnitGetOwner(lv_cargoUnit)), TransmissionSourceFromUnit(libGame_gv_players[UnitGetOwner(lv_cargoUnit)].lv_heroUnit, false, true, ""), PortraitGetGame(), "", "Stand", null, StringExternal("Param/Value/lib_GDHL_8F93019A"), StringToText(""), 60.0, c_transmissionDurationAdd, false, c_maxPlayers, false);
        libGDHL_gv_medivacTransmissionPortraitOverride[UnitGetOwner(lv_cargoUnit)] = TransmissionLastSent();
    }
    lv_cargoAmt = UnitGroupCount(UnitCargoGroup(lv_medivac), c_unitCountAlive);
    UnitGroupLoopBegin(UnitCargoGroup(lv_medivac));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        PlayerGroupAdd(lv_pipPlayerGroup, UnitGetOwner(UnitGroupLoopCurrent()));
    }
    UnitGroupLoopEnd();
    auto76C240DB_g = lv_pipPlayerGroup; 
    auto76C240DB_p = 1;
    for ( ; auto76C240DB_p <= PlayerGroupCount(auto76C240DB_g) ; auto76C240DB_p += (lv_itPlayer == PlayerGroupPlayer(auto76C240DB_g, auto76C240DB_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto76C240DB_g, auto76C240DB_p);
        auto94E6FF96_ae = lv_cargoAmt;
        auto94E6FF96_ai = 1;
        lv_itPip = 1;
        for ( ; ( (auto94E6FF96_ai >= 0 && lv_itPip <= auto94E6FF96_ae) || (auto94E6FF96_ai <= 0 && lv_itPip >= auto94E6FF96_ae) ) ; lv_itPip += auto94E6FF96_ai ) {
            DialogControlSendAnimationEvent(libGDHL_gv_medicUI.lv_medivacAlert, libCore_gv_playerGroupFromPlayer[lv_itPlayer], ("Pip" + IntToString(lv_itPip)));
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMedicMedivacDropshipTransportEvent_Init () {
    libGDHL_gt_HeroMedicMedivacDropshipTransportEvent = TriggerCreate("libGDHL_gt_HeroMedicMedivacDropshipTransportEvent_Func");
    TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipTransportEvent, false);
    TriggerAddEventUnitCargo(libGDHL_gt_HeroMedicMedivacDropshipTransportEvent, null, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Medic - Medivac Dropship Transport Exit Event
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMedicMedivacDropshipTransportExitEvent_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dropship;
    unit lv_cargoUnit;
    int lv_cargoOwner;

    // Variable Initialization
    lv_dropship = EventUnit();
    lv_cargoUnit = EventUnitCargo();
    lv_cargoOwner = UnitGetOwner(lv_cargoUnit);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_dropship) == "MedicMedivacDropship"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libGame_gv_players[lv_cargoOwner].lv_heroUnit) != "HeroSamuro") && (UnitGetType(libGame_gv_players[lv_cargoOwner].lv_heroUnit) != "HeroLostVikingsController")) {
        libGame_gv_players[lv_cargoOwner].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[lv_cargoOwner].lv_heroUnitGroup;
        libGame_gf_CameraUpdateCameraForPlayer(lv_cargoOwner);
    }

    TransmissionClear(libGDHL_gv_medivacTransmissionPortraitOverride[lv_cargoOwner]);
    libGame_gf_SendEventHeroExitedTransport(lv_cargoOwner, lv_dropship);
    libAIAI_gf_FreeAIFromTransport(lv_cargoOwner);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMedicMedivacDropshipTransportExitEvent_Init () {
    libGDHL_gt_HeroMedicMedivacDropshipTransportExitEvent = TriggerCreate("libGDHL_gt_HeroMedicMedivacDropshipTransportExitEvent_Func");
    TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipTransportExitEvent, false);
    TriggerAddEventUnitCargo(libGDHL_gt_HeroMedicMedivacDropshipTransportExitEvent, null, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Medic - Medivac Dropship Overlay On
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMedicMedivacDropshipOverlayOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("Medic_MedivacDropship_2D_On", -1), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Medic_MedivacDropship_2D_BG", -1), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
    if (((PlayerSkin(UnitGetOwner(UnitTransport(lv_unit))) == "MedicSkinLove") || (PlayerSkin(UnitGetOwner(UnitTransport(lv_unit))) == "MedicSkinLoveVar1") || (PlayerSkin(UnitGetOwner(UnitTransport(lv_unit))) == "MedicSkinLoveVar2"))) {
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(lv_player, libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI_MedivacLoveOverlay.StormCutscene", EventUnitBehavior());
    }
    else {
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(lv_player, libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI_MedivacOverlay.StormCutscene", EventUnitBehavior());
    }
    libGDHL_gf_UIHeroSpecificStatusFrameShowHideMedivacUI(true, lv_player);
    while ((UnitHasBehavior2(lv_unit, "MedicInsideMedivacDropship") == true)) {
        Wait(0.0625, c_timeGame);
    }
    SoundStop(SoundLastPlayed(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMedicMedivacDropshipOverlayOn_Init () {
    libGDHL_gt_HeroMedicMedivacDropshipOverlayOn = TriggerCreate("libGDHL_gt_HeroMedicMedivacDropshipOverlayOn_Func");
    TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipOverlayOn, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMedicMedivacDropshipOverlayOn, null, "MedicInsideMedivacDropship", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Medic - Medivac Dropship Overlay Off
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMedicMedivacDropshipOverlayOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    SoundPlayForPlayer(SoundLink("Medic_MedivacDropship_2D_Off", -1), c_maxPlayers, PlayerGroupSingle(lv_player), 100.0, 0.0);
    libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(lv_player, "Cutscenes\\GameUI_MedivacLoveOverlay.StormCutscene", EventUnitBehavior());
    libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(lv_player, "Cutscenes\\GameUI_MedivacOverlay.StormCutscene", EventUnitBehavior());
    libGDHL_gf_UIHeroSpecificStatusFrameShowHideMedivacUI(false, lv_player);
    if ((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) != "HeroLostVikingsController")) {
        libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_player, UnitGetPosition(lv_unit), 0.0, -1, 0.0, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMedicMedivacDropshipOverlayOff_Init () {
    libGDHL_gt_HeroMedicMedivacDropshipOverlayOff = TriggerCreate("libGDHL_gt_HeroMedicMedivacDropshipOverlayOff_Func");
    TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipOverlayOff, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMedicMedivacDropshipOverlayOff, null, "MedicInsideMedivacDropship", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Medic - Medivac Dropship Countdown Sound
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMedicMedivacDropshipCountdownSound_Func (bool testConds, bool runActions) {
    unitgroup auto0273C090_g;
    int auto0273C090_u;
    unitgroup autoD48B766C_g;
    int autoD48B766C_u;

    // Variable Declarations
    unit lv_itUnit;
    playergroup lv_playersInVac;

    // Variable Initialization
    lv_playersInVac = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsed() == "MedicMedivacDropshipCountdownSound")) {
        auto0273C090_g = UnitCargoGroup(EventPlayerEffectUsedUnit(c_effectUnitTarget));
        auto0273C090_u = 1;
        for ( ; auto0273C090_u <= UnitGroupCount(auto0273C090_g, c_unitCountAll) ; auto0273C090_u += (lv_itUnit == UnitGroupUnit(auto0273C090_g, auto0273C090_u)) ) {
            lv_itUnit = UnitGroupUnit(auto0273C090_g, auto0273C090_u);
            if ((PlayerGroupHasPlayer(lv_playersInVac, UnitGetOwner(lv_itUnit)) == false)) {
                PlayerGroupAdd(lv_playersInVac, UnitGetOwner(lv_itUnit));
            }

        }
        SoundPlayForPlayer(SoundLink("Medic_MedivacDropship_2D_Warning_Beep_Regular", -1), c_maxPlayers, lv_playersInVac, 100.0, 0.0);
    }

    if ((EventPlayerEffectUsed() == "MedicMedivacDropshipCountdownSoundFinal")) {
        autoD48B766C_g = UnitCargoGroup(EventPlayerEffectUsedUnit(c_effectUnitTarget));
        autoD48B766C_u = 1;
        for ( ; autoD48B766C_u <= UnitGroupCount(autoD48B766C_g, c_unitCountAll) ; autoD48B766C_u += (lv_itUnit == UnitGroupUnit(autoD48B766C_g, autoD48B766C_u)) ) {
            lv_itUnit = UnitGroupUnit(autoD48B766C_g, autoD48B766C_u);
            if ((PlayerGroupHasPlayer(lv_playersInVac, UnitGetOwner(lv_itUnit)) == false)) {
                PlayerGroupAdd(lv_playersInVac, UnitGetOwner(lv_itUnit));
            }

        }
        SoundPlayForPlayer(SoundLink("Medic_MedivacDropship_2D_Warning_Beep_OneSecond", -1), c_maxPlayers, lv_playersInVac, 100.0, 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMedicMedivacDropshipCountdownSound_Init () {
    libGDHL_gt_HeroMedicMedivacDropshipCountdownSound = TriggerCreate("libGDHL_gt_HeroMedicMedivacDropshipCountdownSound_Func");
    TriggerEnable(libGDHL_gt_HeroMedicMedivacDropshipCountdownSound, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMedicMedivacDropshipCountdownSound, c_playerAny, "MedicMedivacDropshipCountdownSound");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMedicMedivacDropshipCountdownSound, c_playerAny, "MedicMedivacDropshipCountdownSoundFinal");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Medic - Medivac Being Boarded
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMedicMedivacBeingBoarded_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_caster) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_caster, "MedicMedivacDropshipBoarding", EventPlayerEffectUsedUnit(c_effectUnitTarget), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMedicMedivacBeingBoarded_Init () {
    libGDHL_gt_HeroMedicMedivacBeingBoarded = TriggerCreate("libGDHL_gt_HeroMedicMedivacBeingBoarded_Func");
    TriggerEnable(libGDHL_gt_HeroMedicMedivacBeingBoarded, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMedicMedivacBeingBoarded, c_playerAny, "MedicMedivacDropshipSmartCommandCreatePersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Medic - Medivac Game Over Hide
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMedicMedivacGameOverHide_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libGDHL_gv_medicUI.lv_medivacAlert, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMedicMedivacGameOverHide_Init () {
    libGDHL_gt_HeroMedicMedivacGameOverHide = TriggerCreate("libGDHL_gt_HeroMedicMedivacGameOverHide_Func");
    TriggerEnable(libGDHL_gt_HeroMedicMedivacGameOverHide, false);
    libGame_gf_ClearHeroSpecificUI(libGDHL_gt_HeroMedicMedivacGameOverHide);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Medic - Healing Beam LookAt
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMedicHealingBeamLookAt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_medic;
    unit lv_target;

    // Variable Initialization
    lv_medic = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.125, c_timeGame);
    libNtve_gf_MakeUnitLookAtUnit(lv_medic, "RobotArmsOnly", lv_target, "Ref_Center");
    while (!((UnitBehaviorCount(lv_medic, "MedicCastingHealingBeamBuff") == 0))) {
        Wait(0.0625, c_timeGame);
    }
    libNtve_gf_SimpleLookAtStop(lv_medic, "RobotArmsOnly");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMedicHealingBeamLookAt_Init () {
    libGDHL_gt_HeroMedicHealingBeamLookAt = TriggerCreate("libGDHL_gt_HeroMedicHealingBeamLookAt_Func");
    TriggerEnable(libGDHL_gt_HeroMedicHealingBeamLookAt, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMedicHealingBeamLookAt, c_playerAny, "MedicHealingBeamCreatePersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Medic - Hearth Cleanup
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMedicHearthCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hearthingUnit;

    // Variable Initialization
    lv_hearthingUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_hearthingUnit, "MedicHealingBeamDestroyPersistent", lv_hearthingUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMedicHearthCleanup_Init () {
    libGDHL_gt_HeroMedicHearthCleanup = TriggerCreate("libGDHL_gt_HeroMedicHearthCleanup_Func");
    TriggerEnable(libGDHL_gt_HeroMedicHearthCleanup, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMedicHearthCleanup, c_playerAny, "PortBackToBaseTeleport");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Medic - Healing Beam Ally Range Visibility
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMedicHealingBeamAllyRangeVisibility_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "MedicHealingBeamApplyAllyRangeDisplayBuff", EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMedicHealingBeamAllyRangeVisibility_Init () {
    libGDHL_gt_HeroMedicHealingBeamAllyRangeVisibility = TriggerCreate("libGDHL_gt_HeroMedicHealingBeamAllyRangeVisibility_Func");
    TriggerEnable(libGDHL_gt_HeroMedicHealingBeamAllyRangeVisibility, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMedicHealingBeamAllyRangeVisibility, c_playerAny, "MedicHealingBeamApplyAllyRangeDisplayDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Medic - Safeguard Damage Reduction Behavior Responses
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMedicSafeguardDamageReductionBehaviorResponses_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageTaken;
    fixed lv_verticalOffset;
    fixed lv_horizOffset;
    unit lv_caster;
    unit lv_shieldedUnit;
    int lv_shieldedUnitOwner;
    string lv_behavior;

    // Variable Initialization
    lv_damageTaken = EventUnitBehaviorCumulativeDamageModification();
    lv_verticalOffset = 2.0;
    lv_horizOffset = RandomFixed(-0.4, -0.6);
    lv_shieldedUnit = EventUnit();
    lv_shieldedUnitOwner = UnitGetOwner(lv_shieldedUnit);
    lv_behavior = EventUnitBehavior();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(lv_shieldedUnit) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitFilterMatch(lv_shieldedUnit, lv_shieldedUnitOwner, libCore_gv_filtersHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeIncrease)) {
        lv_caster = UnitBehaviorEffectUnit(lv_shieldedUnit, lv_behavior, c_effectUnitCaster, 0);
        libGDHL_gv_medicSafeguardCasterOwner[lv_shieldedUnitOwner] = UnitGetOwner(lv_caster);
    }
    else if ((EventUnitBehaviorChange() == c_unitBehaviorChangeRefresh)) {
        if ((lv_damageTaken > 0.0)) {
            FloatingCombatElementCreateNumberTextAtUnit(PlayerGroupSingle(libGDHL_gv_medicSafeguardCasterOwner[lv_shieldedUnitOwner]), "FloatingCombatElements/FloatingCombatAmountReadable", "HealState", lv_shieldedUnit, FixedToInt(lv_damageTaken), StringExternal("Param/Value/lib_GDHL_B72F8A0A"), libNtve_gv_FloatingCombatTextAutoRandomSeed);
        }
        lv_caster = UnitBehaviorEffectUnit(lv_shieldedUnit, lv_behavior, c_effectUnitCaster, 0);
        libGDHL_gv_medicSafeguardCasterOwner[lv_shieldedUnitOwner] = UnitGetOwner(lv_caster);
    }
    else if ((EventUnitBehaviorChange() == c_unitBehaviorChangeDecrease)) {
        if ((lv_damageTaken > 0.0)) {
            FloatingCombatElementCreateNumberTextAtUnit(PlayerGroupSingle(libGDHL_gv_medicSafeguardCasterOwner[lv_shieldedUnitOwner]), "FloatingCombatElements/FloatingCombatAmountReadable", "HealState", lv_shieldedUnit, FixedToInt(lv_damageTaken), StringExternal("Param/Value/lib_GDHL_937F3062"), libNtve_gv_FloatingCombatTextAutoRandomSeed);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMedicSafeguardDamageReductionBehaviorResponses_Init () {
    libGDHL_gt_HeroMedicSafeguardDamageReductionBehaviorResponses = TriggerCreate("libGDHL_gt_HeroMedicSafeguardDamageReductionBehaviorResponses_Func");
    TriggerEnable(libGDHL_gt_HeroMedicSafeguardDamageReductionBehaviorResponses, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMedicSafeguardDamageReductionBehaviorResponses, null, "MedicSafeguardBuff", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMedicSafeguardDamageReductionBehaviorResponses, null, "MedicSafeguardBuff", c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMedicSafeguardDamageReductionBehaviorResponses, null, "MedicSafeguardBuff", c_unitBehaviorChangeDecrease);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMedicSafeguardDamageReductionBehaviorResponses, null, "MedicSafeguardTraumaTriggerMastery", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMedicSafeguardDamageReductionBehaviorResponses, null, "MedicSafeguardTraumaTriggerMastery", c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMedicSafeguardDamageReductionBehaviorResponses, null, "MedicSafeguardTraumaTriggerMastery", c_unitBehaviorChangeDecrease);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMedicSafeguardDamageReductionBehaviorResponses, null, "MedicSafeguardShieldSequencerMasteryBuff", c_unitBehaviorChangeIncrease);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMedicSafeguardDamageReductionBehaviorResponses, null, "MedicSafeguardShieldSequencerMasteryBuff", c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMedicSafeguardDamageReductionBehaviorResponses, null, "MedicSafeguardShieldSequencerMasteryBuff", c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Monk - Sixth Sense Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMonkSixthSenseProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_player, "MonkSixthSense") == true))) {
            return false;
        }

        if (!((UnitGetType(lv_unit) == "HeroMonk"))) {
            return false;
        }

        if (!((UnitHasBehaviorWithFlag(lv_unit, c_unitBehaviorFlagUser1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_unit, "MonkSixthSenseApplyBlockBehavior", lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMonkSixthSenseProc_Init () {
    libGDHL_gt_HeroMonkSixthSenseProc = TriggerCreate("libGDHL_gt_HeroMonkSixthSenseProc_Func");
    TriggerEnable(libGDHL_gt_HeroMonkSixthSenseProc, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroMonkSixthSenseProc, null, c_behaviorCategoryStun, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroMonkSixthSenseProc, null, c_behaviorCategoryUser5, c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero -Monk - Divine Palm - Set Life
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_MonkDivinePalmSetLife_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitSetPropertyFixed(EventUnit(), c_unitPropLife, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_MonkDivinePalmSetLife_Init () {
    libGDHL_gt_MonkDivinePalmSetLife = TriggerCreate("libGDHL_gt_MonkDivinePalmSetLife_Func");
    TriggerEnable(libGDHL_gt_MonkDivinePalmSetLife, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_MonkDivinePalmSetLife, null, "MonkDivinePalmProcBehavior", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Monk - Divine Palm Overlay On
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMonkDivinePalmOverlayOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(lv_unit) == true) && (UnitTestState(lv_unit, c_unitStateHallucination) == false) && (UnitHasBehavior2(lv_unit, "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(UnitGetOwner(lv_unit), libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI_StasisOverlay.StormCutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMonkDivinePalmOverlayOn_Init () {
    libGDHL_gt_HeroMonkDivinePalmOverlayOn = TriggerCreate("libGDHL_gt_HeroMonkDivinePalmOverlayOn_Func");
    TriggerEnable(libGDHL_gt_HeroMonkDivinePalmOverlayOn, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMonkDivinePalmOverlayOn, null, "MonkDivinePalmProcBehavior", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Monk - Divine Palm Overlay Off
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMonkDivinePalmOverlayOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_unit, "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(UnitGetOwner(lv_unit), "Cutscenes\\GameUI_StasisOverlay.StormCutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMonkDivinePalmOverlayOff_Init () {
    libGDHL_gt_HeroMonkDivinePalmOverlayOff = TriggerCreate("libGDHL_gt_HeroMonkDivinePalmOverlayOff_Func");
    TriggerEnable(libGDHL_gt_HeroMonkDivinePalmOverlayOff, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMonkDivinePalmOverlayOff, null, "MonkDivinePalmProcBehavior", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Monk - Seven-Sided Strike Take Facing
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMonkSevenSidedStrikeTakeFacing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroMonkFacing[UnitGetOwner(lv_unit)] = UnitGetFacing(lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMonkSevenSidedStrikeTakeFacing_Init () {
    libGDHL_gt_HeroMonkSevenSidedStrikeTakeFacing = TriggerCreate("libGDHL_gt_HeroMonkSevenSidedStrikeTakeFacing_Func");
    TriggerEnable(libGDHL_gt_HeroMonkSevenSidedStrikeTakeFacing, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroMonkSevenSidedStrikeTakeFacing, null, AbilityCommand("MonkSevenSidedStrike", 0), c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Monk - Seven-Sided Strike Finish Set Facing
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMonkSevenSidedStrikeFinishSetFacing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_unit, "MonkSevenSidedStrikeIdle") == true)) {
        UnitSetFacing(lv_unit, 270.0, 0.0);
    }
    else {
        UnitSetFacing(lv_unit, libGDHL_gv_heroMonkFacing[UnitGetOwner(lv_unit)], 0.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMonkSevenSidedStrikeFinishSetFacing_Init () {
    libGDHL_gt_HeroMonkSevenSidedStrikeFinishSetFacing = TriggerCreate("libGDHL_gt_HeroMonkSevenSidedStrikeFinishSetFacing_Func");
    TriggerEnable(libGDHL_gt_HeroMonkSevenSidedStrikeFinishSetFacing, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMonkSevenSidedStrikeFinishSetFacing, c_playerAny, "MonkSevenSidedStrikeFinalTeleport");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMonkSevenSidedStrikeFinishSetFacing, c_playerAny, "MonkSevenSidedStrikeIdleTeleport");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Monk - Abathur Ultimate Evolution Clone
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMonkAbathurUltimateEvolutionClone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_ownerofAbathur;
    int lv_ownerofTarget;

    // Variable Initialization
    lv_ownerofAbathur = libGDHL_gf_AbathurUltimateEvolutionHeroCopiedAbathurOwner();
    lv_ownerofTarget = libGDHL_gf_AbathurUltimateEvolutionHeroCopiedTargetOwner();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[lv_ownerofAbathur].lv_activeVehicle) == "HeroMonk"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(libGame_gv_players[lv_ownerofTarget].lv_heroUnit, "MonkTranscendenceCarryBehavior") == true)) {
        UnitBehaviorAdd(libGame_gv_players[lv_ownerofAbathur].lv_activeVehicle, "MonkTranscendenceCarryBehavior", libGame_gv_players[lv_ownerofAbathur].lv_activeVehicle, 1);
    }

    if ((UnitHasBehavior2(libGame_gv_players[lv_ownerofTarget].lv_heroUnit, "MonkIronFistsCarryBehavior") == true)) {
        UnitBehaviorAdd(libGame_gv_players[lv_ownerofAbathur].lv_activeVehicle, "MonkIronFistsCarryBehavior", libGame_gv_players[lv_ownerofAbathur].lv_activeVehicle, 1);
    }

    if ((UnitHasBehavior2(libGame_gv_players[lv_ownerofTarget].lv_heroUnit, "MonkInsightCarryBehavior") == true)) {
        UnitBehaviorAdd(libGame_gv_players[lv_ownerofAbathur].lv_activeVehicle, "MonkInsightCarryBehavior", libGame_gv_players[lv_ownerofAbathur].lv_activeVehicle, 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMonkAbathurUltimateEvolutionClone_Init () {
    libGDHL_gt_HeroMonkAbathurUltimateEvolutionClone = TriggerCreate("libGDHL_gt_HeroMonkAbathurUltimateEvolutionClone_Func");
    libGDHL_gf_AbathurUltimateEvolutionHeroCopied(libGDHL_gt_HeroMonkAbathurUltimateEvolutionClone);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Muradin - Dwarf Toss
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMuradinDwarfToss_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_abilityRange;
    point lv_playerTargetPoint;
    fixed lv_distanceFromMuradinToPlayerTargetPoint;
    fixed lv_muradinRadius;
    point lv_calculatedTargetPoint;
    bool lv_minDistanceChecked;
    fixed lv_modifiedDistance;
    bool lv_maxDistanceChecked;
    unit lv_muradin;
    int lv_muradinPlayer;
    point lv_positionOfMuradin;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_muradin = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_muradinPlayer = UnitGetOwner(lv_muradin);
    lv_positionOfMuradin = UnitGetPosition(lv_muradin);
    lv_muradinRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, (UnitGetType(lv_muradin)), "Radius", lv_muradinPlayer));
    lv_abilityRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogActor, "MuradinDwarfTossRangeSplat", "Scale", lv_muradinPlayer)) + lv_muradinRadius);
    lv_playerTargetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_distanceFromMuradinToPlayerTargetPoint = DistanceBetweenPoints(lv_positionOfMuradin, lv_playerTargetPoint);
    lv_calculatedTargetPoint = lv_playerTargetPoint;
    while ((UnitTypePlacementFromPoint(UnitGetType(lv_muradin), lv_muradinPlayer, lv_calculatedTargetPoint, 1.5) == null)) {
        lv_modifiedDistance += 0.125;
        if ((lv_maxDistanceChecked == false)) {
            if (((lv_distanceFromMuradinToPlayerTargetPoint + lv_modifiedDistance) <= lv_abilityRange)) {
                lv_calculatedTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_positionOfMuradin, (lv_distanceFromMuradinToPlayerTargetPoint + lv_muradinRadius + lv_modifiedDistance), lv_playerTargetPoint);
            }
            else {
                lv_maxDistanceChecked = true;
            }
        }

        if ((lv_minDistanceChecked == false) && (UnitTypePlacementFromPoint(UnitGetType(lv_muradin), lv_muradinPlayer, lv_calculatedTargetPoint, 1.5) == null)) {
            if (((lv_distanceFromMuradinToPlayerTargetPoint - lv_modifiedDistance) > (lv_muradinRadius + 0.125))) {
                lv_calculatedTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lv_positionOfMuradin, ((lv_distanceFromMuradinToPlayerTargetPoint + lv_muradinRadius) - lv_modifiedDistance), lv_playerTargetPoint);
            }
            else {
                lv_minDistanceChecked = true;
            }
        }

        if ((lv_minDistanceChecked == true) && (lv_maxDistanceChecked == true)) {
            libNtve_gf_UIErrorMessage(libCore_gv_playerGroupFromPlayer[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)], StringExternal("Param/Value/lib_GDHL_37DA855A"), SoundLink("UI_GenericError", -1));
            UnitBehaviorRemove(lv_muradin, "DwarfToss", 1);
            UnitAbilityReset(lv_muradin, AbilityCommand("MuradinDwarfToss", 0), c_spendLocationAll);
            UnitSetPropertyFixed(lv_muradin, c_unitPropEnergy, (UnitGetPropertyFixed(lv_muradin, c_unitPropEnergy, c_unitPropCurrent) + StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "MuradinDwarfToss", "Cost[0].Vital[2]", lv_muradinPlayer))));
            return true;
        }

    }
    if ((UnitIsAlive(lv_muradin) == true)) {
        UnitCreateEffectPointWithSource(lv_muradin, "DwarfTossLaunchMissile", lv_calculatedTargetPoint, c_gameCatalogAbil, "MuradinDwarfToss");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMuradinDwarfToss_Init () {
    libGDHL_gt_HeroMuradinDwarfToss = TriggerCreate("libGDHL_gt_HeroMuradinDwarfToss_Func");
    TriggerEnable(libGDHL_gt_HeroMuradinDwarfToss, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMuradinDwarfToss, c_playerAny, "DwarfTossInitialSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Muradin - Haymaker
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMuradinHaymaker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    unit lv_muradin;
    fixed lv_abilityRange;
    fixed lv_distanceFromMuradinToPlayerTargetPoint;
    fixed lv_muradinRadius;
    point lv_targetPoint;
    point lv_actualTargetPoint;
    fixed lv_modifiedDistance;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_muradin = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_abilityRange = libGDHL_gv_heroMuradinHaymakerLaunchDistance;
    lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_targetUnit), lv_abilityRange, UnitGetPosition(lv_muradin));
    lv_modifiedDistance = (lv_abilityRange + 0.0);
    lv_actualTargetPoint = lv_targetPoint;
    while ((PointPathingPassable(lv_actualTargetPoint) == false)) {
        lv_modifiedDistance += 0.125;
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_targetUnit), lv_modifiedDistance, UnitGetPosition(lv_muradin));
        if ((lv_modifiedDistance >= libGDHL_gv_heroMuradinHaymakerCutoffDistance)) {
            return true;
        }

    }
    if ((UnitBehaviorCount(lv_targetUnit, "Dead") == 0)) {
        if ((UnitHasBehavior2(lv_muradin, "HaymakerGrandSlamCarryBehavior") == true)) {
            UnitCreateEffectPoint(lv_targetUnit, "HaymakerGrandSlamLaunchTarget", lv_actualTargetPoint);
        }
        else {
            UnitCreateEffectPoint(lv_targetUnit, "HaymakerLaunchTarget", lv_actualTargetPoint);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMuradinHaymaker_Init () {
    libGDHL_gt_HeroMuradinHaymaker = TriggerCreate("libGDHL_gt_HeroMuradinHaymaker_Func");
    TriggerEnable(libGDHL_gt_HeroMuradinHaymaker, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMuradinHaymaker, c_playerAny, "HaymakerImpactDelayPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Muradin - Avatar Apply Health Buff
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMuradinAvatarApplyHealthBuff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogBehavior, "MuradinAvatarHealthBuff", "Modification.VitalMaxArray[" + IntToString(0) + "]", lv_player, CatalogFieldValueGet(c_gameCatalogBehavior, "MuradinAvatar", "Modification.VitalMaxArray[" + IntToString(0) + "]", lv_player));
    UnitCreateEffectUnit(lv_unit, "AvatarApplyBehavior", lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMuradinAvatarApplyHealthBuff_Init () {
    libGDHL_gt_HeroMuradinAvatarApplyHealthBuff = TriggerCreate("libGDHL_gt_HeroMuradinAvatarApplyHealthBuff_Func");
    TriggerEnable(libGDHL_gt_HeroMuradinAvatarApplyHealthBuff, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroMuradinAvatarApplyHealthBuff, null, AbilityCommand("MuradinAvatar", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Murky Spawn
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_MurkySpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = libGame_gf_HeroSpawnPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroMurky"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_players[lv_player].lv_soundDeathAlertPrefix = "UI_HeroDeath_Murky_";
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_MurkySpawn_Init () {
    libGDHL_gt_MurkySpawn = TriggerCreate("libGDHL_gt_MurkySpawn_Func");
    libGame_gf_HeroSpawn(libGDHL_gt_MurkySpawn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Murky UI Initialize
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_MurkyUIInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlCreateInPanelFromTemplate(libUIUI_gv_heroSpecificStatusContainer, c_triggerControlTypePanel, "Murky/MurkyEggFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libGDHL_gv_murkyUI.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "MurkyEggOk");
    libGDHL_gv_murkyUI.lv_eggOk = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "MurkyEggBroken");
    libGDHL_gv_murkyUI.lv_eggBroken = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_MurkyUIInitialize_Init () {
    libGDHL_gt_MurkyUIInitialize = TriggerCreate("libGDHL_gt_MurkyUIInitialize_Func");
    libCore_gf_IncludeModInitialization(libGDHL_gt_MurkyUIInitialize);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Murky - Murky Egg Dies
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMurkyMurkyEggDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_eggOwnerPlayer;
    int lv_eggOwnerPlayerTeam;
    unit lv_murkyHeroUnit;
    int lv_killingPlayer;
    int lv_level;
    int lv_enemyTeam;
    fixed lv_revealDuration;
    fixed lv_cooldownOnEgg;
    fixed lv_cooldownToAdd;
    playergroup lv_killingTeamGroup;
    int lv_itPlayer;
    playergroup lv_awardGroup;
    fixed lv_xPGranted;
    playergroup lv_killingGroup;

    // Variable Initialization
    lv_killingTeamGroup = PlayerGroupEmpty();
    lv_awardGroup = PlayerGroupEmpty();
    lv_killingGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "MurkyRespawnEgg"))) {
            return false;
        }

        if (!((libGame_gv_heroDeathMurkyRespawnEggs[EventPlayer()] == EventUnit()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_eggOwnerPlayer = EventPlayer();
    lv_eggOwnerPlayerTeam = libGame_gf_TeamNumberOfPlayer(lv_eggOwnerPlayer);
    lv_murkyHeroUnit = libGame_gv_players[lv_eggOwnerPlayer].lv_heroUnit;
    if ((UnitIsValid(lv_murkyHeroUnit) == false)) {
        libGame_gv_heroDeathMurkyRespawnEggs[lv_eggOwnerPlayer] = null;
        return true;
    }

    lv_killingPlayer = libNtve_gf_KillingPlayer();
    libGame_gv_heroDeathMurkyRespawnEggs[lv_eggOwnerPlayer] = null;
    libGame_gv_heroDeathMurkyRespawnEggPoint[lv_eggOwnerPlayer] = UnitGetPosition(EventUnit());
    libGame_gv_heroDeathMurkyRespawnEggDeathTimeStamp[lv_eggOwnerPlayer] = TimerGetElapsed(libGame_gv_gameTimer);
    if ((UnitHasBehavior2(libGame_gv_players[lv_eggOwnerPlayer].lv_heroUnit, "Dead") == true) && (libGame_gv_players[lv_eggOwnerPlayer].lv_isDead == true)) {
        UnitSetPosition(libGame_gv_players[lv_eggOwnerPlayer].lv_heroUnit, libGame_gv_players[lv_eggOwnerPlayer].lv_spawnPoint, false);
        lv_level = libGame_gf_GetCustomValueLevelofHeroUnit(lv_murkyHeroUnit);
        if (((TimerGetElapsed(libGame_gv_players[lv_eggOwnerPlayer].lv_respawnTimer) > 0.0) || ((TimerGetElapsed(libGame_gv_players[lv_eggOwnerPlayer].lv_respawnTimer) == 0.0) && (TimerGetRemaining(libGame_gv_players[lv_eggOwnerPlayer].lv_respawnTimer) != libCore_gf_HeroDeathTime(lv_eggOwnerPlayer, lv_level))))) {
            if ((PlayerHasTalent(lv_eggOwnerPlayer, "MurkyBigTunaKahuna") == true)) {
                libGame_gf_HeroDeathModifyRespawnTimer(lv_eggOwnerPlayer, (libCore_gf_HeroDeathTime(lv_eggOwnerPlayer, lv_level) - libCore_gv_bALMurkyWithEggandBigFishTalentDeathTime));
            }
            else {
                libGame_gf_HeroDeathModifyRespawnTimer(lv_eggOwnerPlayer, (libCore_gf_HeroDeathTime(lv_eggOwnerPlayer, lv_level) - libCore_gv_bALMurkyWithEggDeathTime));
            }
            if ((libGDHL_gv_murkyDeathOverlayActive[lv_eggOwnerPlayer] == true)) {
                libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(UnitGetOwner(libGame_gv_players[lv_eggOwnerPlayer].lv_heroUnit), "Cutscenes\\GameUI_MedivacOverlay.StormCutscene", "MurkyDeathTimerDummy");
                libGDHL_gv_murkyDeathOverlayActive[lv_eggOwnerPlayer] = false;
                libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay(true, lv_eggOwnerPlayer);
            }

        }

        SoundPlayForPlayer(SoundLink("Murky_Death_NoEgg_Vox", -1), lv_eggOwnerPlayer, PlayerGroupAll(), 100.0, 0.0);
        UnitBehaviorRemove(libGame_gv_players[lv_eggOwnerPlayer].lv_heroUnit, "TalentGatheringPowerMurky", c_unitBehaviorCountAll);
    }
    else {
        UnitBehaviorAdd(libGame_gv_players[lv_eggOwnerPlayer].lv_heroUnit, "MurkyDeadEggReveal", libNtve_gf_KillingUnit(), 1);
        lv_enemyTeam = (3 - lv_eggOwnerPlayerTeam);
        lv_revealDuration = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "MurkyDeadEggReveal", "Duration", c_playerAny));
        libGDHL_gv_murkyRevealPing[lv_eggOwnerPlayer] = PingLastCreated();
        if ((UnitGetOwner(libNtve_gf_KillingUnit()) <= libCore_gv_bALMaxPlayers)) {
            TextExpressionSetToken("Param/Expression/lib_GDHL_39CFD00B", "A", UnitTypeGetName(UnitGetType(libGame_gv_players[UnitGetOwner(libNtve_gf_KillingUnit())].lv_heroUnit)));
            TextExpressionSetToken("Param/Expression/lib_GDHL_39CFD00B", "B", FixedToText(libGDHL_gv_mURKY_BAL_EGG_DEATH_cd, 0));
            UIDisplayMessage(libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_GDHL_39CFD00B"));
        }
        else if (((UnitGetOwner(libNtve_gf_KillingUnit()) == libCore_gv_cOMPUTER_TeamOrder) || (UnitGetOwner(libNtve_gf_KillingUnit()) == libCore_gv_cOMPUTER_TeamChaos))) {
            TextExpressionSetToken("Param/Expression/lib_GDHL_2F88A6C6", "A", StringExternal("Param/Value/lib_GDHL_A749A22B"));
            TextExpressionSetToken("Param/Expression/lib_GDHL_2F88A6C6", "B", FixedToText(libGDHL_gv_mURKY_BAL_EGG_DEATH_cd, 0));
            UIDisplayMessage(libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_GDHL_2F88A6C6"));
        }
        else if ((UnitGetOwner(libNtve_gf_KillingUnit()) == libCore_gv_cOMPUTER_Hostile)) {
            TextExpressionSetToken("Param/Expression/lib_GDHL_A932E0EB", "A", StringExternal("Param/Value/lib_GDHL_A501371D"));
            TextExpressionSetToken("Param/Expression/lib_GDHL_A932E0EB", "B", FixedToText(libGDHL_gv_mURKY_BAL_EGG_DEATH_cd, 0));
            UIDisplayMessage(libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_GDHL_A932E0EB"));
        }
    }
    SoundPlayForPlayer(SoundLink("Murky_RespawnEgg_Death_Vox", -1), lv_eggOwnerPlayer, PlayerGroupSingle(lv_eggOwnerPlayer), 100.0, 0.0);
    libGDHL_gf_UIHeroSpecificStatusFrameUpdateMurkyEggStatus(UnitGetOwner(EventUnit()));
    lv_cooldownOnEgg = UnitGetCooldown(libGame_gv_players[lv_eggOwnerPlayer].lv_heroUnit, CatalogFieldValueGet(c_gameCatalogAbil, "MurkyRespawnEgg", "Cost[" + IntToString(0) + "].Cooldown.Link", UnitGetOwner(libGame_gv_players[lv_eggOwnerPlayer].lv_heroUnit)));
    UnitCreateEffectUnit(lv_murkyHeroUnit, "RespawnEggCancelOrder", lv_murkyHeroUnit);
    if ((lv_cooldownOnEgg <= libGDHL_gv_mURKY_BAL_EGG_DEATH_cd)) {
        lv_cooldownToAdd = (libGDHL_gv_mURKY_BAL_EGG_DEATH_cd - lv_cooldownOnEgg);
        UnitModifyCooldown(libGame_gv_players[lv_eggOwnerPlayer].lv_heroUnit, CatalogFieldValueGet(c_gameCatalogAbil, "MurkyRespawnEgg", "Cost[" + IntToString(0) + "].Cooldown.Link", UnitGetOwner(libGame_gv_players[lv_eggOwnerPlayer].lv_heroUnit)), lv_cooldownToAdd, c_cooldownOperationAdd);
    }

    TimerStart(libGDHL_gv_murkyEggDeathTimer[lv_eggOwnerPlayer], libGDHL_gv_mURKY_BAL_EGG_DEATH_cd, false, c_timeGame);
    libUIUI_gf_DeathAnnouncementPanelRegisterDeath(lv_eggOwnerPlayer, lv_killingPlayer, "Assets\\Textures\\ui_targetportrait_hero_murkysegg.dds", EventUnit(), StringExternal("Param/Value/lib_GDHL_557A7E63"), libGDHL_gv_murkyEggDeathTimer[lv_eggOwnerPlayer]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMurkyMurkyEggDies_Init () {
    libGDHL_gt_HeroMurkyMurkyEggDies = TriggerCreate("libGDHL_gt_HeroMurkyMurkyEggDies_Func");
    TriggerEnable(libGDHL_gt_HeroMurkyMurkyEggDies, false);
    TriggerAddEventUnitDied(libGDHL_gt_HeroMurkyMurkyEggDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Murky - Murky Dies
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMurkyMurkyDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadUnit;
    int lv_deadPlayer;
    int lv_killingPlayer;
    playergroup lv_killingTeamGroup;
    playergroup lv_killingGroup;
    int lv_i;
    fixed lv_respawnTime;

    // Variable Initialization
    lv_killingTeamGroup = PlayerGroupEmpty();
    lv_killingGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroMurky"))) {
            return false;
        }

        if (!((EventUnit() == libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "AbnormalDeath") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadUnit = EventUnit();
    lv_deadPlayer = EventPlayer();
    lv_killingPlayer = libNtve_gf_KillingPlayer();
    PingDestroy(libGDHL_gv_murkyRevealPing[lv_deadPlayer]);
    libGame_gv_players[lv_deadPlayer].lv_isDead = true;
    libGame_gf_SendEventHeroKilled(lv_killingPlayer, lv_deadUnit);
    lv_killingTeamGroup = libGame_gf_EnemyPlayerGroupOfPlayer(lv_deadPlayer);
    lv_killingGroup = libGame_gf_HeroDeathGetKillingGroupFromKillingTeamGroupAndDeadUnit(lv_killingTeamGroup, lv_killingPlayer, lv_deadUnit);
    if (((UnitIsAlive(libGame_gv_heroDeathMurkyRespawnEggs[lv_deadPlayer]) == false) || (libGame_gv_heroDeathMurkyRespawnEggs[lv_deadPlayer] == null))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DeadUnitCameraTarget", 0, lv_deadPlayer, UnitGetPosition(lv_deadUnit));
        libGame_gv_players[lv_deadPlayer].lv_cameraDeadUnitCameraTarget = UnitLastCreated();
        libGame_gv_players[lv_deadPlayer].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[lv_deadPlayer].lv_cameraDeadUnitCameraTarget);
        libGame_gf_HeroDeathUpdateUIElementsForDeath(true, true, true, lv_deadPlayer, lv_killingPlayer);
        lv_respawnTime = libCore_gf_HeroDeathTime(lv_deadPlayer, UnitLevel(libGame_gv_players[lv_deadPlayer].lv_heroUnit));
    }
    else {
        UnitBehaviorAdd(libGame_gv_heroDeathMurkyRespawnEggs[lv_deadPlayer], "MurkyEggAnimDelay", libGame_gv_players[lv_deadPlayer].lv_heroUnit, 1);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DeadUnitCameraTarget", 0, lv_deadPlayer, UnitGetPosition(lv_deadUnit));
        libGame_gv_players[lv_deadPlayer].lv_cameraDeadUnitCameraTarget = UnitLastCreated();
        if ((libCore_gv_sYSGameMode != libCore_ge_GameModes_Tutorial1Deprecated)) {
            libGame_gv_players[lv_deadPlayer].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[lv_deadPlayer].lv_cameraDeadUnitCameraTarget);
        }

        libGame_gv_players[lv_deadPlayer].lv_cameraCameraLockInterrupt = true;
        libGame_gf_HeroDeathUpdateUIElementsForDeath(false, true, false, lv_deadPlayer, lv_killingPlayer);
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(lv_deadPlayer, libUIUI_ge_FullscreenOverlayPriorities_Death, "Cutscenes\\GameUI_MurkyRespawnOverlay.StormCutscene", "MurkyDeathTimerDummy");
        libGDHL_gv_murkyDeathOverlayActive[lv_deadPlayer] = true;
        if ((PlayerHasTalent(lv_deadPlayer, "MurkyBigTunaKahuna") == true)) {
            lv_respawnTime = libCore_gv_bALMurkyWithEggandBigFishTalentDeathTime;
        }
        else {
            lv_respawnTime = libCore_gv_bALMurkyWithEggDeathTime;
        }
    }
    libGame_gf_CameraUpdateCameraForPlayer(lv_deadPlayer);
    SoundPlayForPlayer(SoundLink("Murky_Death_NoEgg_Vox", -1), lv_deadPlayer, lv_killingGroup, 100.0, 0.0);
    libGame_gf_HeroDeathStartRespawnTimer(lv_deadPlayer, lv_respawnTime);
    if ((libGDHL_gv_murkyEggDeathTimer[lv_deadPlayer] != null)) {
        libUIUI_gf_DeathTimerPanelUnregisterTimer(libGame_gf_TeamNumberOfPlayer(lv_deadPlayer), libGDHL_gv_murkyEggDeathTimer[lv_deadPlayer]);
    }

    libGame_gf_HeroDeathPortHeroBackAndSetDeathState(lv_deadPlayer, libGame_gv_players[lv_deadPlayer].lv_spawnPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMurkyMurkyDies_Init () {
    libGDHL_gt_HeroMurkyMurkyDies = TriggerCreate("libGDHL_gt_HeroMurkyMurkyDies_Func");
    TriggerEnable(libGDHL_gt_HeroMurkyMurkyDies, false);
    TriggerAddEventUnitDied(libGDHL_gt_HeroMurkyMurkyDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Murky - Revive While Egg Is Alive
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMurkyReviveWhileEggIsAlive_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_respawningPlayer;

    // Variable Initialization
    lv_respawningPlayer = libGame_gf_HeroRespawnPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[lv_respawningPlayer].lv_heroUnit) == "HeroMurky"))) {
            return false;
        }

        if (!((libGDHL_gv_murkyDeathOverlayActive[lv_respawningPlayer] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_murkyDeathOverlayActive[lv_respawningPlayer] = false;
    libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(UnitGetOwner(libGame_gv_players[lv_respawningPlayer].lv_heroUnit), "Cutscenes\\GameUI_MedivacOverlay.StormCutscene", "MurkyDeathTimerDummy");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMurkyReviveWhileEggIsAlive_Init () {
    libGDHL_gt_HeroMurkyReviveWhileEggIsAlive = TriggerCreate("libGDHL_gt_HeroMurkyReviveWhileEggIsAlive_Func");
    TriggerEnable(libGDHL_gt_HeroMurkyReviveWhileEggIsAlive, false);
    libGame_gf_HeroRespawn(libGDHL_gt_HeroMurkyReviveWhileEggIsAlive);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Murky - Create Egg On Spawn
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMurkyCreateEggOnSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_egg;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[libGame_gf_HeroSpawnPlayer()].lv_heroUnit) == "HeroMurky"))) {
            return false;
        }

        if (!((libGame_gv_heroDeathMurkyRespawnEggs[libGame_gf_HeroSpawnPlayer()] == null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gf_HeroMurkyCreateEggAtBaseforPlayer(libGame_gf_HeroSpawnPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMurkyCreateEggOnSpawn_Init () {
    libGDHL_gt_HeroMurkyCreateEggOnSpawn = TriggerCreate("libGDHL_gt_HeroMurkyCreateEggOnSpawn_Func");
    TriggerEnable(libGDHL_gt_HeroMurkyCreateEggOnSpawn, false);
    libGame_gf_HeroSpawn(libGDHL_gt_HeroMurkyCreateEggOnSpawn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Murky - Clean Up Egg UI For Debug Hero Swap
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMurkyCleanUpEggUIForDebugHeroSwap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = libGame_gf_DebugHeroSwappedPlayer();
    if ((libGame_gv_players[lv_player].lv_heroIndex != libCore_gf_GetHeroIndexForUnitType("HeroMurky"))) {
        DialogControlSetVisible(libGDHL_gv_murkyUI.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lv_player], false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMurkyCleanUpEggUIForDebugHeroSwap_Init () {
    libGDHL_gt_HeroMurkyCleanUpEggUIForDebugHeroSwap = TriggerCreate("libGDHL_gt_HeroMurkyCleanUpEggUIForDebugHeroSwap_Func");
    libGame_gf_DebugHeroSwapped(libGDHL_gt_HeroMurkyCleanUpEggUIForDebugHeroSwap);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Murky - A Fishy Deal Variables
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMurkyAFishyDealVariables_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((lv_player >= 1))) {
            return false;
        }

        if (!((lv_player <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_players[lv_player].lv_bribeTokenLink = "MurkyAFishyDealTokenCounter";
    libGame_gv_players[lv_player].lv_bribeChargeStackRequirement = libGDHL_gv_heroMurkyAFishyDealStackCountRequirement;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMurkyAFishyDealVariables_Init () {
    libGDHL_gt_HeroMurkyAFishyDealVariables = TriggerCreate("libGDHL_gt_HeroMurkyAFishyDealVariables_Func");
    TriggerEnable(libGDHL_gt_HeroMurkyAFishyDealVariables, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMurkyAFishyDealVariables, null, "MurkyAFishyDealTokenCounter", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Murky - A Fishy Deal Charge Count Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMurkyAFishyDealChargeCountProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitAddChargeUsed(lv_caster, "Abil/MurkyAFishyDeal", -1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMurkyAFishyDealChargeCountProc_Init () {
    libGDHL_gt_HeroMurkyAFishyDealChargeCountProc = TriggerCreate("libGDHL_gt_HeroMurkyAFishyDealChargeCountProc_Func");
    TriggerEnable(libGDHL_gt_HeroMurkyAFishyDealChargeCountProc, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroMurkyAFishyDealChargeCountProc, c_playerAny, "MurkyAFishyDealIncreaseChargeCountDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Murky - Egg Hunt Unit Group Controller
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMurkyEggHuntUnitGroupController_Func (bool testConds, bool runActions) {
    unitgroup auto9B9A13E9_g;
    int auto9B9A13E9_u;

    // Variable Declarations
    unit lv_u;
    int lv_player;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnitCreatedUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libGDHL_gv_heroMurkyEggHuntUnitGroup[lv_player], EventUnitCreatedUnit());
    if ((UnitGroupCount(libGDHL_gv_heroMurkyEggHuntUnitGroup[lv_player], c_unitCountAlive) > libGDHL_gv_heroMurkyEggHuntMaxCount)) {
        auto9B9A13E9_g = libGDHL_gv_heroMurkyEggHuntUnitGroup[lv_player];
        auto9B9A13E9_u = 1;
        for ( ; auto9B9A13E9_u <= UnitGroupCount(auto9B9A13E9_g, c_unitCountAll) ; auto9B9A13E9_u += (lv_u == UnitGroupUnit(auto9B9A13E9_g, auto9B9A13E9_u)) ) {
            lv_u = UnitGroupUnit(auto9B9A13E9_g, auto9B9A13E9_u);
            UnitGroupRemove(libGDHL_gv_heroMurkyEggHuntUnitGroup[lv_player], lv_u);
            UnitKill(lv_u);
            break;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMurkyEggHuntUnitGroupController_Init () {
    libGDHL_gt_HeroMurkyEggHuntUnitGroupController = TriggerCreate("libGDHL_gt_HeroMurkyEggHuntUnitGroupController_Func");
    TriggerEnable(libGDHL_gt_HeroMurkyEggHuntUnitGroupController, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroMurkyEggHuntUnitGroupController, null, "MurkyEggHunt", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Murky - Fish Eye Dynamic Application
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMurkyFishEyeDynamicApplication_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("MurkyRespawnEgg", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "MurkySpawnEggFishEyeTalentBuff", EventUnit(), 1);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMurkyFishEyeDynamicApplication_Init () {
    libGDHL_gt_HeroMurkyFishEyeDynamicApplication = TriggerCreate("libGDHL_gt_HeroMurkyFishEyeDynamicApplication_Func");
    TriggerEnable(libGDHL_gt_HeroMurkyFishEyeDynamicApplication, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMurkyFishEyeDynamicApplication, null, "MurkySpawnEggFishEyeTalentCarryBehavior", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Murky - Respawn Egg Created
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMurkyRespawnEggCreated_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_heroDeathMurkyRespawnEggs[UnitGetOwner(EventUnit())] = EventUnitCreatedUnit();
    libGame_gv_heroDeathMurkyRespawnEggPoint[UnitGetOwner(EventUnit())] = UnitGetPosition(EventUnitCreatedUnit());
    libGDHL_gf_UIHeroSpecificStatusFrameUpdateMurkyEggStatus(UnitGetOwner(EventUnitCreatedUnit()));
    UnitGroupLoopBegin(UnitGroup("MurkyRespawnEgg", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGroupLoopCurrent() != libGame_gv_heroDeathMurkyRespawnEggs[UnitGetOwner(EventUnit())])) {
            UnitCreateEffectUnit(UnitGroupLoopCurrent(), "TimedLifeFate", UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMurkyRespawnEggCreated_Init () {
    libGDHL_gt_HeroMurkyRespawnEggCreated = TriggerCreate("libGDHL_gt_HeroMurkyRespawnEggCreated_Func");
    TriggerEnable(libGDHL_gt_HeroMurkyRespawnEggCreated, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroMurkyRespawnEggCreated, null, "MurkyRespawnEgg", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Murky - Assault Egg Buff Changes
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroMurkyAssaultEggBuffChanges_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    fixed lv_assaultEggSpeedBoostFactor;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroMurky"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    if ((TechTreeBehaviorCount(lv_player, "HiddenAssaultSpeedBoost", c_techCountQueuedOrBetter) == 1)) {
        lv_assaultEggSpeedBoostFactor = libGDHL_gv_bALMurkyAssaultEggSpeedBoost;
    }
    else {
        lv_assaultEggSpeedBoostFactor = (libGDHL_gv_bALMurkyAssaultEggSpeedBoost * -1.0);
    }
    CatalogFieldValueModify(c_gameCatalogBehavior, "Mounted", "Modification.UnifiedMoveSpeedFactor", lv_player, FixedToString(lv_assaultEggSpeedBoostFactor, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogBehavior, "SummonedUnitMountBehavior", "Modification.UnifiedMoveSpeedFactor", lv_player, FixedToString(lv_assaultEggSpeedBoostFactor, c_fixedPrecisionAny), c_upgradeOperationAdd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroMurkyAssaultEggBuffChanges_Init () {
    libGDHL_gt_HeroMurkyAssaultEggBuffChanges = TriggerCreate("libGDHL_gt_HeroMurkyAssaultEggBuffChanges_Func");
    TriggerEnable(libGDHL_gt_HeroMurkyAssaultEggBuffChanges, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMurkyAssaultEggBuffChanges, null, "HiddenAssaultSpeedBoost", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMurkyAssaultEggBuffChanges, null, "HiddenAssaultSpeedBoost", c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroMurkyAssaultEggBuffChanges, null, "HiddenAssaultSpeedBoost", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Necromancer - Skeleton Mastery Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNecromancerSkeletonMasteryProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_playerHero;
    unit lv_playerVehicle;
    int lv_player;
    unit lv_minion;
    point lv_positionofMinion;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(libGame_gf_HeroParticipatedInNPCTakedownMinion()) == "FootmanMinion") || (UnitGetType(libGame_gf_HeroParticipatedInNPCTakedownMinion()) == "RangedMinion") || (UnitGetType(libGame_gf_HeroParticipatedInNPCTakedownMinion()) == "CatapultMinion") || (UnitGetType(libGame_gf_HeroParticipatedInNPCTakedownMinion()) == "WizardMinion")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer();
    lv_minion = libGame_gf_HeroParticipatedInNPCTakedownMinion();
    lv_positionofMinion = UnitGetPosition(lv_minion);
    lv_playerHero = libGame_gv_players[lv_player].lv_heroUnit;
    lv_playerVehicle = libGame_gv_players[lv_player].lv_activeVehicle;
    if ((UnitGetType(lv_playerHero) == "HeroNecromancer")) {
        if ((UnitIsAlive(lv_playerHero) == true) && (lv_playerVehicle == null) && (DistanceBetweenPoints(UnitGetPosition(lv_playerHero), lv_positionofMinion) <= libGDHL_gv_heroNecromancerSkeletonMasteryRange) && (UnitFilterMatch(lv_playerHero, lv_player, UnitFilter(0, (1 << (c_targetFilterStasis - 32)), 0, 0)) == false)) {
            UnitCreateEffectPointWithSource(lv_playerHero, "NecromancerRaiseSkeletonCreationPersistent", lv_positionofMinion, c_gameCatalogAbil, "NecromancerRaiseSkeletonDisplayAbility");
        }

    }
    else {
        if ((UnitGetType(lv_playerVehicle) == "HeroNecromancer")) {
            if ((UnitIsAlive(lv_playerVehicle) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_playerVehicle), lv_positionofMinion) <= libGDHL_gv_heroNecromancerSkeletonMasteryRange) && (UnitFilterMatch(lv_playerVehicle, lv_player, UnitFilter(0, (1 << (c_targetFilterStasis - 32)), 0, 0)) == false)) {
                UnitCreateEffectPointWithSource(lv_playerVehicle, "NecromancerRaiseSkeletonCreationPersistent", lv_positionofMinion, c_gameCatalogAbil, "NecromancerRaiseSkeletonDisplayAbility");
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNecromancerSkeletonMasteryProc_Init () {
    libGDHL_gt_HeroNecromancerSkeletonMasteryProc = TriggerCreate("libGDHL_gt_HeroNecromancerSkeletonMasteryProc_Func");
    TriggerEnable(libGDHL_gt_HeroNecromancerSkeletonMasteryProc, false);
    libGame_gf_HeroParticipatedInNPCTakedown(libGDHL_gt_HeroNecromancerSkeletonMasteryProc);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Necromancer - Skeleton Mastery Spawned
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNecromancerSkeletonMasterySpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_lowestUnit;
    fixed lv_lowestHP;
    int lv_unitGroup;
    int lv_maxSkeles;
    unit lv_skeleton;
    int lv_player;

    // Variable Initialization
    lv_lowestHP = 10000.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    lv_skeleton = EventUnit();
    if ((PlayerHasTalent(lv_player, "NecromancerTalentSkeletonMastery") == true)) {
        lv_maxSkeles = libGDHL_gv_heroNecromancerSkeletonMasteryRaisedMageTalentMaxUnits;
    }
    else {
        lv_maxSkeles = libGDHL_gv_heroNecromancerSkeletonMasteryMaxUnits;
    }
    UnitGroupAdd(libGDHL_gv_heroNecromancerSkeletonMasteryUnitGroup[lv_player], lv_skeleton);
    if ((UnitGroupCount(libGDHL_gv_heroNecromancerSkeletonMasteryUnitGroup[lv_player], c_unitCountAlive) > lv_maxSkeles)) {
        UnitGroupLoopBegin(libGDHL_gv_heroNecromancerSkeletonMasteryUnitGroup[lv_player]);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            lv_u = UnitGroupLoopCurrent();
            if ((UnitGetPropertyFixed(lv_u, c_unitPropLife, c_unitPropCurrent) < lv_lowestHP)) {
                lv_lowestHP = UnitGetPropertyFixed(lv_u, c_unitPropLife, c_unitPropCurrent);
                lv_lowestUnit = lv_u;
            }

        }
        UnitGroupLoopEnd();
        UnitKill(lv_lowestUnit);
    }

    lv_unitGroup = UnitGroupCount(libGDHL_gv_heroNecromancerSkeletonMasteryUnitGroup[lv_player], c_unitCountAlive);
    libAIAI_gf_SummonedAIInitialAttackLogic(true, lv_skeleton, libGame_gv_players[lv_player].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNecromancerSkeletonMasterySpawned_Init () {
    libGDHL_gt_HeroNecromancerSkeletonMasterySpawned = TriggerCreate("libGDHL_gt_HeroNecromancerSkeletonMasterySpawned_Func");
    TriggerEnable(libGDHL_gt_HeroNecromancerSkeletonMasterySpawned, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroNecromancerSkeletonMasterySpawned, null, "NecromancerRaiseSkeletonTimedLife", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Necromancer - Skeleton Mastery Max Count Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNecromancerSkeletonMasteryMaxCountProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    unit lv_lowestUnit;
    fixed lv_lowestHP;
    int lv_unitGroup;
    int lv_maxSkeles;
    unit lv_skeleton;
    int lv_player;

    // Variable Initialization
    lv_lowestHP = 10000.0;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    if ((PlayerHasTalent(lv_player, "NecromancerTalentSkeletonMastery") == true)) {
        lv_maxSkeles = libGDHL_gv_heroNecromancerSkeletonMasteryRaisedMageTalentMaxUnits;
    }
    else {
        lv_maxSkeles = libGDHL_gv_heroNecromancerSkeletonMasteryMaxUnits;
    }
    UnitGroupLoopBegin(libGDHL_gv_heroNecromancerSkeletonMasteryUnitGroup[lv_player]);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_u = UnitGroupLoopCurrent();
        if ((UnitGetPropertyFixed(lv_u, c_unitPropLife, c_unitPropCurrent) < lv_lowestHP)) {
            lv_lowestHP = UnitGetPropertyFixed(lv_u, c_unitPropLife, c_unitPropCurrent);
            lv_lowestUnit = lv_u;
        }

    }
    UnitGroupLoopEnd();
    UnitKill(lv_lowestUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNecromancerSkeletonMasteryMaxCountProc_Init () {
    libGDHL_gt_HeroNecromancerSkeletonMasteryMaxCountProc = TriggerCreate("libGDHL_gt_HeroNecromancerSkeletonMasteryMaxCountProc_Func");
    TriggerEnable(libGDHL_gt_HeroNecromancerSkeletonMasteryMaxCountProc, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroNecromancerSkeletonMasteryMaxCountProc, c_playerAny, "NecromancerRaiseSkeletonPeriodicDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Necromancer - Jailors Hook to AI
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNecromancerJailorsHooktoAI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_maxSkeles;
    unit lv_skeleton;
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_skeleton = EventUnit();
    lv_player = UnitGetOwner(lv_skeleton);
    libAIAI_gf_SummonedAIInitialAttackLogic(true, lv_skeleton, libGame_gv_players[lv_player].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNecromancerJailorsHooktoAI_Init () {
    libGDHL_gt_HeroNecromancerJailorsHooktoAI = TriggerCreate("libGDHL_gt_HeroNecromancerJailorsHooktoAI_Func");
    TriggerEnable(libGDHL_gt_HeroNecromancerJailorsHooktoAI, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroNecromancerJailorsHooktoAI, null, "NecromancerJailorsAttackController", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Necromancer - Track Mortal Wounds Damage Reduction
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNecromancerTrackMortalWoundsDamageReduction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_ownerOfUnit;
    fixed lv_healAmountPrevented;
    fixed lv_healAmount;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_ownerOfUnit = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((lv_ownerOfUnit <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitBehaviorCount(lv_unit, "NecromancerSpectralScytheMasteryMortalWoundDebuff") == 1))) {
            return false;
        }

        if (!((UnitFilterMatch(lv_unit, lv_ownerOfUnit, libCore_gv_filtersHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_healAmount = EventUnitHealAmount();
    lv_healAmountPrevented = (lv_healAmount * 3.0);
    libGDHL_gv_heroNecromancerMortalWoundsNumbers[lv_ownerOfUnit] += lv_healAmountPrevented;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNecromancerTrackMortalWoundsDamageReduction_Init () {
    libGDHL_gt_HeroNecromancerTrackMortalWoundsDamageReduction = TriggerCreate("libGDHL_gt_HeroNecromancerTrackMortalWoundsDamageReduction_Func");
    TriggerEnable(libGDHL_gt_HeroNecromancerTrackMortalWoundsDamageReduction, false);
    TriggerAddEventUnitHealed(libGDHL_gt_HeroNecromancerTrackMortalWoundsDamageReduction, null, c_unitVitalLife, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Necromancer - Mortal Wounds Debuff Controller
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNecromancerMortalWoundsDebuffController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    unit lv_target;
    int lv_ownerofTarget;
    fixed lv_horizOffset;
    fixed lv_vertOffset;

    // Variable Initialization
    lv_target = EventUnit();
    lv_ownerofTarget = UnitGetOwner(lv_target);
    lv_horizOffset = RandomFixed(-0.4, -0.6);
    lv_vertOffset = 2.0;

    // Conditions
    if (testConds) {
        if (!((lv_ownerofTarget <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitFilterMatch(lv_target, lv_ownerofTarget, libCore_gv_filtersHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        lv_caster = UnitBehaviorEffectUnit(lv_target, "NecromancerSpectralScytheMasteryMortalWoundDebuff", c_effectUnitCaster, 0);
        libGDHL_gv_heroNecromancerMortalWoundsCasterOwner[lv_ownerofTarget] = UnitGetOwner(lv_caster);
    }
    else if ((EventUnitBehaviorChange() == c_unitBehaviorChangeRefresh)) {
        lv_caster = UnitBehaviorEffectUnit(lv_target, "NecromancerSpectralScytheMasteryMortalWoundDebuff", c_effectUnitCaster, 0);
        libGDHL_gv_heroNecromancerMortalWoundsCasterOwner[lv_ownerofTarget] = UnitGetOwner(lv_caster);
        if ((libGDHL_gv_heroNecromancerMortalWoundsNumbers[lv_ownerofTarget] > 0.0)) {
            libUIUI_gf_UIFloatingCombatTextCreateTextTag(libGDHL_gv_heroNecromancerMortalWoundsCasterOwner[lv_ownerofTarget], libUIUI_gv_floatingCombatTextMediumDuration, (StringExternal("Param/Value/lib_GDHL_C4E4A123") + FixedToText(libGDHL_gv_heroNecromancerMortalWoundsNumbers[lv_ownerofTarget], 0)), lv_target, lv_vertOffset, lv_horizOffset, libCore_ge_FloatingTextType_InsaneDamage, true);
        }

        libGDHL_gv_heroNecromancerMortalWoundsNumbers[lv_ownerofTarget] = 0.0;
    }
    else if ((EventUnitBehaviorChange() == c_unitBehaviorChangeDeactivate)) {
        if ((libGDHL_gv_heroNecromancerMortalWoundsNumbers[lv_ownerofTarget] > 0.0)) {
            libUIUI_gf_UIFloatingCombatTextCreateTextTag(libGDHL_gv_heroNecromancerMortalWoundsCasterOwner[lv_ownerofTarget], libUIUI_gv_floatingCombatTextMediumDuration, (StringExternal("Param/Value/lib_GDHL_36589B6A") + FixedToText(libGDHL_gv_heroNecromancerMortalWoundsNumbers[lv_ownerofTarget], 0)), lv_target, lv_vertOffset, lv_horizOffset, libCore_ge_FloatingTextType_InsaneDamage, true);
        }

        libGDHL_gv_heroNecromancerMortalWoundsNumbers[lv_ownerofTarget] = 0.0;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNecromancerMortalWoundsDebuffController_Init () {
    libGDHL_gt_HeroNecromancerMortalWoundsDebuffController = TriggerCreate("libGDHL_gt_HeroNecromancerMortalWoundsDebuffController_Func");
    TriggerEnable(libGDHL_gt_HeroNecromancerMortalWoundsDebuffController, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroNecromancerMortalWoundsDebuffController, null, "NecromancerSpectralScytheMasteryMortalWoundDebuff", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroNecromancerMortalWoundsDebuffController, null, "NecromancerSpectralScytheMasteryMortalWoundDebuff", c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroNecromancerMortalWoundsDebuffController, null, "NecromancerSpectralScytheMasteryMortalWoundDebuff", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Necromancer - Spawn Bone Armor Item
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNecromancerSpawnBoneArmorItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = EventUnitCreatedUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "HeroNecromancer"))) {
            return false;
        }

        if (!((UnitInventoryCount(lv_unit, c_unitInventoryCountCarried) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitInventoryCreate(lv_unit, "NecromancerTalentBoneArmorItem");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNecromancerSpawnBoneArmorItem_Init () {
    libGDHL_gt_HeroNecromancerSpawnBoneArmorItem = TriggerCreate("libGDHL_gt_HeroNecromancerSpawnBoneArmorItem_Func");
    TriggerEnable(libGDHL_gt_HeroNecromancerSpawnBoneArmorItem, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroNecromancerSpawnBoneArmorItem, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Necromancer - Raised Mage Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNecromancerRaisedMageProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    unit lv_necromancer;
    int lv_enemyTeam;
    int lv_alliedTeam;

    // Variable Initialization
    lv_unit = libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "HeroNecromancer"))) {
            return false;
        }

        if (!((PlayerHasTalent(libGame_gf_HeroParticipatedInTakedownKillingPlayer(), "NecromancerTalentRaisedMage") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPointWithSource(lv_unit, "NecromancerSkeletalMagesSpawnPersistent", libGame_gf_HeroParticipatedInTakedownKilledHeroPosition(), c_gameCatalogAbil, "NecromancerSkeletalMages");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNecromancerRaisedMageProc_Init () {
    libGDHL_gt_HeroNecromancerRaisedMageProc = TriggerCreate("libGDHL_gt_HeroNecromancerRaisedMageProc_Func");
    TriggerEnable(libGDHL_gt_HeroNecromancerRaisedMageProc, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroNecromancerRaisedMageProc);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Covert Mission Takedown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaCovertMissionTakedown_Func (bool testConds, bool runActions) {
    int auto1E7F2B54_ae;
    int auto1E7F2B54_ai;

    // Variable Declarations
    int lv_i;
    int lv_stacksGranted;
    int lv_player;
    unit lv_nova;

    // Variable Initialization
    lv_stacksGranted = 10;
    lv_player = libGame_gf_HeroParticipatedInTakedownKillingPlayer();
    lv_nova = libGame_gv_players[lv_player].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_player, "NovaCovertMission") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto1E7F2B54_ae = lv_stacksGranted;
    auto1E7F2B54_ai = 1;
    lv_i = 1;
    for ( ; ( (auto1E7F2B54_ai >= 0 && lv_i <= auto1E7F2B54_ae) || (auto1E7F2B54_ai <= 0 && lv_i >= auto1E7F2B54_ae) ) ; lv_i += auto1E7F2B54_ai ) {
        UnitCreateEffectUnit(lv_nova, "TalentBribeAdd1Token", lv_nova);
        if ((ModI(UnitBehaviorCount(lv_nova, libGame_gv_players[lv_player].lv_bribeTokenLink), libGame_gv_players[lv_player].lv_bribeChargeStackRequirement) == 0)) {
            UnitAddChargeUsed(lv_nova, "Abil/TalentBucketBribe", -1.0);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaCovertMissionTakedown_Init () {
    libGDHL_gt_HeroNovaCovertMissionTakedown = TriggerCreate("libGDHL_gt_HeroNovaCovertMissionTakedown_Func");
    TriggerEnable(libGDHL_gt_HeroNovaCovertMissionTakedown, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroNovaCovertMissionTakedown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Covert Mission Variables
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaCovertMissionVariables_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!((lv_player >= 1))) {
            return false;
        }

        if (!((lv_player <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_players[lv_player].lv_bribeTokenLink = "NovaCovertMissionTokenCounter";
    libGame_gv_players[lv_player].lv_bribeChargeStackRequirement = libGDHL_gv_heroNovaCovertMissionStackCountRequirement;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaCovertMissionVariables_Init () {
    libGDHL_gt_HeroNovaCovertMissionVariables = TriggerCreate("libGDHL_gt_HeroNovaCovertMissionVariables_Func");
    TriggerEnable(libGDHL_gt_HeroNovaCovertMissionVariables, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroNovaCovertMissionVariables, null, "NovaCovertMissionTokenCounter", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Triple Tap Ability Used
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaTripleTapAbilityUsed_Func (bool testConds, bool runActions) {
    unitgroup auto3426D486_g;
    int auto3426D486_u;

    // Variable Declarations
    unit lv_targetUnit;
    unit lv_itUnit;
    int lv_novaPlayer;
    point lv_currentPositionOfTarget;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_novaPlayer = UnitGetOwner(EventUnit());
    lv_targetUnit = EventUnitTargetUnit();
    libGDHL_gv_novaTripleTapCaster[lv_novaPlayer] = EventUnit();
    libGDHL_gv_novaTripleTapTarget[lv_novaPlayer] = lv_targetUnit;
    libGDHL_gv_novaTripleTapTargetLastPoint[lv_novaPlayer] = UnitGetPosition(lv_targetUnit);
    libGDHL_gv_novaTripleTappingBoolean[lv_novaPlayer] = true;
    while ((libGDHL_gv_novaTripleTappingBoolean[lv_novaPlayer] == true)) {
        if (((UnitIsAlive(libGDHL_gv_novaTripleTapTarget[lv_novaPlayer]) == false) || (DistanceBetweenPoints(UnitGetPosition(libGDHL_gv_novaTripleTapTarget[lv_novaPlayer]), libGDHL_gv_novaTripleTapTargetLastPoint[lv_novaPlayer]) >= libGDHL_gv_novaTripleTapDisjointDistanceThreshold))) {
            libGDHL_gv_novaTripleTappingBoolean[lv_novaPlayer] = false;
            UnitBehaviorAdd(libGDHL_gv_novaTripleTapTarget[lv_novaPlayer], "TripleTapDummyRemove", libGDHL_gv_novaTripleTapCaster[lv_novaPlayer], 1);
            break;
        }

        lv_currentPositionOfTarget = UnitGetPosition(libGDHL_gv_novaTripleTapTarget[lv_novaPlayer]);
        if ((DistanceBetweenPoints(lv_currentPositionOfTarget, libGDHL_gv_novaTripleTapTargetLastPoint[lv_novaPlayer]) > libGDHL_gv_novaTripleTapRedirectDistanceThreshold) && (DistanceBetweenPoints(lv_currentPositionOfTarget, libGDHL_gv_novaTripleTapTargetLastPoint[lv_novaPlayer]) < libGDHL_gv_novaTripleTapDisjointDistanceThreshold)) {
            auto3426D486_g = libGDHL_gv_novaTripleTapMissileGroup[lv_novaPlayer];
            auto3426D486_u = 1;
            for ( ; auto3426D486_u <= UnitGroupCount(auto3426D486_g, c_unitCountAll) ; auto3426D486_u += (lv_itUnit == UnitGroupUnit(auto3426D486_g, auto3426D486_u)) ) {
                lv_itUnit = UnitGroupUnit(auto3426D486_g, auto3426D486_u);
                UnitCreateEffectUnit(lv_itUnit, "NovaTripleTapMissileRedirect", libGDHL_gv_novaTripleTapTarget[lv_novaPlayer]);
            }
        }

        libGDHL_gv_novaTripleTapTargetLastPoint[lv_novaPlayer] = lv_currentPositionOfTarget;
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaTripleTapAbilityUsed_Init () {
    libGDHL_gt_HeroNovaTripleTapAbilityUsed = TriggerCreate("libGDHL_gt_HeroNovaTripleTapAbilityUsed_Func");
    TriggerEnable(libGDHL_gt_HeroNovaTripleTapAbilityUsed, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroNovaTripleTapAbilityUsed, null, AbilityCommand("NovaTripleTap", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Triple Tap Missiles
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaTripleTapMissiles_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "TripleTapArrowMissile"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnitCreatedUnit());
    if ((libGDHL_gv_novaTripleTappingBoolean[lv_player] == false)) {
        UnitCreateEffectPoint(EventUnitCreatedUnit(), "NovaTripleTapMissileRedirectPoint", libGDHL_gv_novaTripleTapTargetLastPoint[lv_player]);
        return true;
    }

    UnitGroupAdd(libGDHL_gv_novaTripleTapMissileGroup[lv_player], EventUnitCreatedUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaTripleTapMissiles_Init () {
    libGDHL_gt_HeroNovaTripleTapMissiles = TriggerCreate("libGDHL_gt_HeroNovaTripleTapMissiles_Func");
    TriggerEnable(libGDHL_gt_HeroNovaTripleTapMissiles, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroNovaTripleTapMissiles, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Triple Tap Missile Cleanup
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaTripleTapMissileCleanup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_HeroNovaUnit;
    int lv_player;
    unitgroup lv_missileUnitGroup;

    // Variable Initialization
    lv_missileUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    lv_missileUnitGroup = libGDHL_gv_novaTripleTapMissileGroup[lv_player];
    if (((UnitGroupCount(lv_missileUnitGroup, c_unitCountAlive) == 0) && (UnitHasBehavior2(libGDHL_gv_novaTripleTapCaster[lv_player], "TripleTapInventoryDisableBehavior") == false))) {
        libGDHL_gv_novaTripleTappingBoolean[lv_player] = false;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaTripleTapMissileCleanup_Init () {
    libGDHL_gt_HeroNovaTripleTapMissileCleanup = TriggerCreate("libGDHL_gt_HeroNovaTripleTapMissileCleanup_Func");
    TriggerEnable(libGDHL_gt_HeroNovaTripleTapMissileCleanup, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroNovaTripleTapMissileCleanup, c_playerAny, "TripleTapSuicideRemove");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Holo Clone Spawned
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaHoloCloneSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_creatingUnit;
    unit lv_createdUnit;
    int lv_ownerOfCreatedUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_createdUnit = EventUnitCreatedUnit();
    if ((UnitGetType(lv_createdUnit) != "NovaHoloClone") && (UnitGetType(lv_createdUnit) != "NovaHoloCloneCloaked")) {
        return true;
    }

    lv_ownerOfCreatedUnit = UnitGetOwner(lv_createdUnit);
    if ((UnitGetType(libGame_gv_players[lv_ownerOfCreatedUnit].lv_heroUnit) == "HeroAbathur")) {
        UnitBehaviorAdd(lv_createdUnit, "UltimateEvolutionAlternateHero", lv_createdUnit, 1);
        lv_creatingUnit = libGame_gv_players[lv_ownerOfCreatedUnit].lv_activeVehicle;
    }
    else {
        lv_creatingUnit = libGame_gv_players[lv_ownerOfCreatedUnit].lv_heroUnit;
    }
    UISetSelectionTypeEnabled(PlayerGroupSingle(lv_ownerOfCreatedUnit), c_localSelectionTypeWorldPanelHero, false);
    UnitSetFacing(lv_createdUnit, UnitGetFacing(lv_creatingUnit), 0.0);
    UnitSetPropertyFixed(lv_createdUnit, c_unitPropXP, UnitXPTotal(lv_creatingUnit));
    UnitSetPropertyFixed(lv_createdUnit, c_unitPropLifeMax, UnitGetPropertyFixed(lv_creatingUnit, c_unitPropLifeMax, c_unitPropCurrent));
    UnitSetPropertyFixed(lv_createdUnit, c_unitPropLife, UnitGetPropertyFixed(lv_creatingUnit, c_unitPropLife, c_unitPropCurrent));
    UnitSetPropertyFixed(lv_createdUnit, c_unitPropEnergyMax, UnitGetPropertyFixed(lv_creatingUnit, c_unitPropEnergyMax, c_unitPropCurrent));
    UnitSetPropertyFixed(lv_createdUnit, c_unitPropEnergy, UnitGetPropertyFixed(lv_creatingUnit, c_unitPropEnergy, c_unitPropCurrent));
    UnitIssueOrder(lv_createdUnit, OrderTargetingPoint(AbilityCommand("attack", 0), UnitGetPosition(lv_createdUnit)), c_orderQueueReplace);
    while ((UnitIsAlive(lv_createdUnit) == true)) {
        Wait(0.125, c_timeGame);
    }
    UISetSelectionTypeEnabled(PlayerGroupSingle(lv_ownerOfCreatedUnit), c_localSelectionTypeWorldPanelHero, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaHoloCloneSpawned_Init () {
    libGDHL_gt_HeroNovaHoloCloneSpawned = TriggerCreate("libGDHL_gt_HeroNovaHoloCloneSpawned_Func");
    TriggerEnable(libGDHL_gt_HeroNovaHoloCloneSpawned, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroNovaHoloCloneSpawned, null, "NovaHoloDecoy", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Damage-Based Decloak
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaDamageBasedDecloak_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nova;

    // Variable Initialization
    lv_nova = EventUnit();

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageAttempted() > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_nova, "CloakRemovalOnDamageSet", lv_nova);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaDamageBasedDecloak_Init () {
    libGDHL_gt_HeroNovaDamageBasedDecloak = TriggerCreate("libGDHL_gt_HeroNovaDamageBasedDecloak_Func");
    TriggerEnable(libGDHL_gt_HeroNovaDamageBasedDecloak, false);
    TriggerAddDamageEvent(libGDHL_gt_HeroNovaDamageBasedDecloak, null, "HeroNova", c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Holo Clone Spawn Match Map Mechanics
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaHoloCloneSpawnMatchMapMechanics_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("NovaHoloClone", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "MapMechanicStack", EventPlayerEffectUsedUnit(c_effectUnitCaster), UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "MapMechanicStack"));
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("NovaHoloCloneCloaked", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitBehaviorAdd(UnitGroupLoopCurrent(), "MapMechanicStack", EventPlayerEffectUsedUnit(c_effectUnitCaster), UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "MapMechanicStack"));
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaHoloCloneSpawnMatchMapMechanics_Init () {
    libGDHL_gt_HeroNovaHoloCloneSpawnMatchMapMechanics = TriggerCreate("libGDHL_gt_HeroNovaHoloCloneSpawnMatchMapMechanics_Func");
    TriggerEnable(libGDHL_gt_HeroNovaHoloCloneSpawnMatchMapMechanics, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroNovaHoloCloneSpawnMatchMapMechanics, c_playerAny, "HoloCloneSpawnSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Holo Decoy - Issue Order Ability
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaHoloDecoyIssueOrderAbility_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_p;
    unit lv_u;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayerEffectUsedUnit(c_effectUnitTarget) == null)) {
        UnitGroupLoopBegin(UnitGroup("NovaHoloClone", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingPoint(AbilityCommand("move", 0), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueReplace);
        }
        UnitGroupLoopEnd();
    }
    else {
        UnitGroupLoopBegin(UnitGroup("NovaHoloClone", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_orderQueueReplace);
        }
        UnitGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaHoloDecoyIssueOrderAbility_Init () {
    libGDHL_gt_HeroNovaHoloDecoyIssueOrderAbility = TriggerCreate("libGDHL_gt_HeroNovaHoloDecoyIssueOrderAbility_Func");
    TriggerEnable(libGDHL_gt_HeroNovaHoloDecoyIssueOrderAbility, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroNovaHoloDecoyIssueOrderAbility, c_playerAny, "HoloDecoyIssueOrder");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Holo Decoy Double Fake Apply Issue Order
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaHoloDecoyDoubleFakeApplyIssueOrder_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventUnit(), "NovaHoloDecoyDoubleFakePersistent", EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaHoloDecoyDoubleFakeApplyIssueOrder_Init () {
    libGDHL_gt_HeroNovaHoloDecoyDoubleFakeApplyIssueOrder = TriggerCreate("libGDHL_gt_HeroNovaHoloDecoyDoubleFakeApplyIssueOrder_Func");
    TriggerEnable(libGDHL_gt_HeroNovaHoloDecoyDoubleFakeApplyIssueOrder, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroNovaHoloDecoyDoubleFakeApplyIssueOrder, null, "NovaHoloDecoyDoubleFakeTimedLife", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Nova - Anti-Armor Shells Attack Cooldown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroNovaAntiArmorShellsAttackCooldown_Func (bool testConds, bool runActions) {
    fixed auto5EA1B378_at;

    // Actions
    if (!runActions) {
        return true;
    }

    auto5EA1B378_at = 0;
    while (!((UnitWeaponPeriodRemaining(EventUnit(), 2) == 0.0)) && auto5EA1B378_at <= 3.0) {
        Wait(0.0625, c_timeGame);
        auto5EA1B378_at = auto5EA1B378_at + 0.0625;
    }
    UnitBehaviorRemove(EventUnit(), "NovaAntiArmorShellsWeaponSuppression", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroNovaAntiArmorShellsAttackCooldown_Init () {
    libGDHL_gt_HeroNovaAntiArmorShellsAttackCooldown = TriggerCreate("libGDHL_gt_HeroNovaAntiArmorShellsAttackCooldown_Func");
    TriggerEnable(libGDHL_gt_HeroNovaAntiArmorShellsAttackCooldown, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroNovaAntiArmorShellsAttackCooldown, null, "NovaAntiArmorShellsWeaponSuppression", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Raynor - Raynor's Banshee Fly In
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRaynorRaynorsBansheeFlyIn_Func (bool testConds, bool runActions) {
    int autoCA9A7369_n;
    int autoCA9A7369_i;

    // Variable Declarations
    int lv_player;
    point lv_dropPoint;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_dropPoint = EventPlayerEffectUsedPoint(c_effectLocationCasterPoint);

    // Actions
    if (!runActions) {
        return true;
    }

    autoCA9A7369_n = 2;
    for (autoCA9A7369_i = 1; autoCA9A7369_i <= autoCA9A7369_n; autoCA9A7369_i += 1) {
        libNtve_gf_CreateUnitsAtPoint2(1, "RaynorRaynorsBanshee", 0, lv_player, libNtve_gf_PointOffsetTowardsPoint(lv_dropPoint, 10.0, libGame_gv_players[EventPlayer()].lv_spawnPoint));
        UnitGroupAdd(libGame_gv_players[lv_player].lv_summonedUnitGroup, UnitLastCreated());
        UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RaynorRaynorsRaidersRetargetBansheesPersistent", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    }
    Wait(0.5, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRaynorRaynorsBansheeFlyIn_Init () {
    libGDHL_gt_HeroRaynorRaynorsBansheeFlyIn = TriggerCreate("libGDHL_gt_HeroRaynorRaynorsBansheeFlyIn_Func");
    TriggerEnable(libGDHL_gt_HeroRaynorRaynorsBansheeFlyIn, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRaynorRaynorsBansheeFlyIn, c_playerAny, "RaynorRaynorsRaidersTargetedPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Raynor - Raynor's Banshee Fly Out
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRaynorRaynorsBansheeFlyOut_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_flyAway;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_flyAway = UnitGetPosition(EventUnit());
    UnitIssueOrder(EventUnit(), OrderTargetingPoint(AbilityCommand("move", 0), libNtve_gf_PointOffsetTowardsPoint(lv_flyAway, 20.0, libGame_gv_players[EventPlayer()].lv_spawnPoint)), c_orderQueueReplace);
    UnitBehaviorRemove(libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit, "RaynorsRaidersLeaderBehavior", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRaynorRaynorsBansheeFlyOut_Init () {
    libGDHL_gt_HeroRaynorRaynorsBansheeFlyOut = TriggerCreate("libGDHL_gt_HeroRaynorRaynorsBansheeFlyOut_Func");
    TriggerEnable(libGDHL_gt_HeroRaynorRaynorsBansheeFlyOut, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRaynorRaynorsBansheeFlyOut, null, "RaynorRaynorsBansheeAscend", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Raynor - Banshees Command
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRaynorBansheesCommand_Func (bool testConds, bool runActions) {
    unitgroup auto91691D68_g;
    int auto91691D68_u;

    // Variable Declarations
    point lv_p;
    unit lv_u;
    unit lv_itBanshee;
    unitgroup lv_raynorsRaidersBanshees;
    unit lv_bansheeTargetUnit;

    // Variable Initialization
    lv_raynorsRaidersBanshees = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_raynorsRaidersBanshees = UnitGroup("RaynorRaynorsBanshee", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 2);
    lv_bansheeTargetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    auto91691D68_g = lv_raynorsRaidersBanshees;
    auto91691D68_u = 1;
    for ( ; auto91691D68_u <= UnitGroupCount(auto91691D68_g, c_unitCountAll) ; auto91691D68_u += (lv_itBanshee == UnitGroupUnit(auto91691D68_g, auto91691D68_u)) ) {
        lv_itBanshee = UnitGroupUnit(auto91691D68_g, auto91691D68_u);
        if ((UnitIsAlive(lv_itBanshee) == true)) {
            if ((lv_bansheeTargetUnit == null)) {
                UnitIssueOrder(lv_itBanshee, OrderTargetingPoint(AbilityCommand("move", 0), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lv_itBanshee, OrderTargetingUnit(AbilityCommand("attack", 0), lv_bansheeTargetUnit), c_orderQueueReplace);
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRaynorBansheesCommand_Init () {
    libGDHL_gt_HeroRaynorBansheesCommand = TriggerCreate("libGDHL_gt_HeroRaynorBansheesCommand_Func");
    TriggerEnable(libGDHL_gt_HeroRaynorBansheesCommand, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRaynorBansheesCommand, c_playerAny, "RaynorRaynorsRaidersRetargetBansheesPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Raynor - Relentless Leader Stun Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRaynorRelentlessLeaderStunProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;

    // Variable Initialization
    lv_player = EventPlayer();
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_player, "RaynorRelentlessLeader") == true))) {
            return false;
        }

        if (!((UnitGetType(lv_unit) == "HeroRaynor"))) {
            return false;
        }

        if (!((UnitHasBehavior2(lv_unit, "RaynorRelentlessLeaderCooldown") == false))) {
            return false;
        }

        if (!((UnitHasBehaviorWithFlag(lv_unit, c_unitBehaviorFlagUser1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_unit, "RaynorRelentlessLeaderProcSet", lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRaynorRelentlessLeaderStunProc_Init () {
    libGDHL_gt_HeroRaynorRelentlessLeaderStunProc = TriggerCreate("libGDHL_gt_HeroRaynorRelentlessLeaderStunProc_Func");
    TriggerEnable(libGDHL_gt_HeroRaynorRelentlessLeaderStunProc, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroRaynorRelentlessLeaderStunProc, null, c_behaviorCategoryStun, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroRaynorRelentlessLeaderStunProc, null, c_behaviorCategoryStun, c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroRaynorRelentlessLeaderStunProc, null, c_behaviorCategoryUser5, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroRaynorRelentlessLeaderStunProc, null, c_behaviorCategoryUser5, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Raynor - A Card To Play - Talent Gained
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRaynorACardToPlayTalentGained_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(libGame_gf_HeroGainTalentPlayer(), "RaynorACardToPlay") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libGDHL_gt_HeroRaynorACardToPlayHeroTakedown, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRaynorACardToPlayTalentGained_Init () {
    libGDHL_gt_HeroRaynorACardToPlayTalentGained = TriggerCreate("libGDHL_gt_HeroRaynorACardToPlayTalentGained_Func");
    TriggerEnable(libGDHL_gt_HeroRaynorACardToPlayTalentGained, false);
    libGame_gf_HeroGainTalent(libGDHL_gt_HeroRaynorACardToPlayTalentGained);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Raynor - A Card To Play - Hero Takedown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRaynorACardToPlayHeroTakedown_Func (bool testConds, bool runActions) {
    int auto7A59D43D_ae;
    int auto7A59D43D_ai;

    // Variable Declarations
    int lv_itPlayer;
    unit lv_unit;
    string lv_unitType;
    fixed lv_cooldownReduction;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_unitType = UnitGetType(EventUnit());
    lv_cooldownReduction = -15.0;

    // Conditions
    if (testConds) {
        if (!((libGame_gf_UnitIsHero(lv_unit) == true))) {
            return false;
        }

        if (!((UnitFilterMatch(lv_unit, UnitGetOwner(lv_unit), UnitFilter(0, 0, 0, (1 << (c_targetFilterHallucination - 32)))) == true))) {
            return false;
        }

        if (!(((UnitIsAlive(lv_unit) == true) || ((lv_unitType != "HeroTyrael") && (lv_unitType != "HeroUther") && (lv_unitType != "HeroLeoric"))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7A59D43D_ae = libCore_gv_bALMaxPlayers;
    auto7A59D43D_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto7A59D43D_ai >= 0 && lv_itPlayer <= auto7A59D43D_ae) || (auto7A59D43D_ai <= 0 && lv_itPlayer >= auto7A59D43D_ae) ) ; lv_itPlayer += auto7A59D43D_ai ) {
        if ((PlayerHasTalent(lv_itPlayer, "RaynorACardToPlay") == true)) {
            UnitModifyCooldown(libGame_gv_players[lv_itPlayer].lv_heroUnit, CatalogFieldValueGet(c_gameCatalogAbil, "RaynorHyperion", "Cost[" + IntToString(0) + "].Cooldown.Link", lv_itPlayer), lv_cooldownReduction, c_cooldownOperationDefault);
            UnitModifyCooldown(libGame_gv_players[lv_itPlayer].lv_heroUnit, CatalogFieldValueGet(c_gameCatalogAbil, "RaynorRaynorsBansheeTargeted", "Cost[" + IntToString(0) + "].Cooldown.Link", lv_itPlayer), lv_cooldownReduction, c_cooldownOperationDefault);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRaynorACardToPlayHeroTakedown_Init () {
    libGDHL_gt_HeroRaynorACardToPlayHeroTakedown = TriggerCreate("libGDHL_gt_HeroRaynorACardToPlayHeroTakedown_Func");
    TriggerEnable(libGDHL_gt_HeroRaynorACardToPlayHeroTakedown, false);
    TriggerAddEventUnitDied(libGDHL_gt_HeroRaynorACardToPlayHeroTakedown, null);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroRaynorACardToPlayHeroTakedown, null, c_behaviorCategoryUser13, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Raynor - Puttin' On A Clinic Special Death State Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRaynorPuttinOnAClinicSpecialDeathStateProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_raynor;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(libGame_gf_HeroEntersSpecialDeathStateHero(), "RaynorPuttinOnAClinicTarget") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_raynor = UnitBehaviorEffectUnit(libGame_gf_HeroEntersSpecialDeathStateHero(), "RaynorPuttinOnAClinicTarget", c_effectUnitCaster, 0);
    UnitCreateEffectUnit(lv_raynor, "RaynorPuttinOnAClinicModifyCooldown2", lv_raynor);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRaynorPuttinOnAClinicSpecialDeathStateProc_Init () {
    libGDHL_gt_HeroRaynorPuttinOnAClinicSpecialDeathStateProc = TriggerCreate("libGDHL_gt_HeroRaynorPuttinOnAClinicSpecialDeathStateProc_Func");
    TriggerEnable(libGDHL_gt_HeroRaynorPuttinOnAClinicSpecialDeathStateProc, false);
    libGame_gf_HeroEntersSpecialDeathState(libGDHL_gt_HeroRaynorPuttinOnAClinicSpecialDeathStateProc);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Raynor - Raider Recruitment Add Stacks on Cooldown Reset
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRaynorRaiderRecruitmentAddStacksonCooldownReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(libGame_gf_SpecialCaseTalentCooldownResetPlayer(), "RaynorRaidersRecruitment") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = libGame_gf_SpecialCaseTalentCooldownResetPlayer();
    UnitBehaviorAdd(libGame_gv_players[lv_player].lv_heroUnit, "RaidersRecruitment", libGame_gv_players[lv_player].lv_heroUnit, 50);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRaynorRaiderRecruitmentAddStacksonCooldownReset_Init () {
    libGDHL_gt_HeroRaynorRaiderRecruitmentAddStacksonCooldownReset = TriggerCreate("libGDHL_gt_HeroRaynorRaiderRecruitmentAddStacksonCooldownReset_Func");
    TriggerEnable(libGDHL_gt_HeroRaynorRaiderRecruitmentAddStacksonCooldownReset, false);
    libGame_gf_SpecialCaseTalentCooldownReset(libGDHL_gt_HeroRaynorRaiderRecruitmentAddStacksonCooldownReset);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rehgar - Totemic Projection (Talent) - Save Totem
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRehgarTotemicProjectionTalentSaveTotem_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroRehgarTotemicProjectionTalentActiveTotem[EventPlayer()] = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRehgarTotemicProjectionTalentSaveTotem_Init () {
    libGDHL_gt_HeroRehgarTotemicProjectionTalentSaveTotem = TriggerCreate("libGDHL_gt_HeroRehgarTotemicProjectionTalentSaveTotem_Func");
    TriggerEnable(libGDHL_gt_HeroRehgarTotemicProjectionTalentSaveTotem, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRehgarTotemicProjectionTalentSaveTotem, c_playerAny, "RehgarEarthbindTotemCreateUnitSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rehgar - Totemic Projection (Talent) - Move Totem
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRehgarTotemicProjectionTalentMoveTotem_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TotemicProjectionDeathDummyEffect", UnitGetPosition(libGDHL_gv_heroRehgarTotemicProjectionTalentActiveTotem[EventPlayer()]));
    UnitSetPosition(libGDHL_gv_heroRehgarTotemicProjectionTalentActiveTotem[EventPlayer()], EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), false);
    libNtve_gf_SendActorMessageToUnit(libGDHL_gv_heroRehgarTotemicProjectionTalentActiveTotem[EventPlayer()], "Signal EarthbindTotemPlayBirth");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRehgarTotemicProjectionTalentMoveTotem_Init () {
    libGDHL_gt_HeroRehgarTotemicProjectionTalentMoveTotem = TriggerCreate("libGDHL_gt_HeroRehgarTotemicProjectionTalentMoveTotem_Func");
    TriggerEnable(libGDHL_gt_HeroRehgarTotemicProjectionTalentMoveTotem, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRehgarTotemicProjectionTalentMoveTotem, c_playerAny, "RehgarTotemicProjectionTargetPoint");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rehgar - Totemic Projection Reset On Rewind Use
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRehgarTotemicProjectionResetOnRewindUse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_caster) == "HeroRehgar"))) {
            return false;
        }

        if (!((UnitGetOwner(lv_caster) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitHasBehavior2(lv_caster, "RehgarEarthbindTotemTotemicProjectionEnabler") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(lv_caster, "RehgarEarthbindTotemTotemicProjectionEnabler", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRehgarTotemicProjectionResetOnRewindUse_Init () {
    libGDHL_gt_HeroRehgarTotemicProjectionResetOnRewindUse = TriggerCreate("libGDHL_gt_HeroRehgarTotemicProjectionResetOnRewindUse_Func");
    TriggerEnable(libGDHL_gt_HeroRehgarTotemicProjectionResetOnRewindUse, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRehgarTotemicProjectionResetOnRewindUse, c_playerAny, "TalentRewindSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rehgar - Lightning Shield - Rising Storm (Talent) - Initial
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRehgarLightningShieldRisingStormTalentInitial_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rehgarPlayer;
    unit lv_casterUnit;
    unit lv_sourceUnit;
    fixed lv_stackCount;
    fixed lv_multiplier;
    fixed lv_damage;

    // Variable Initialization
    lv_casterUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_sourceUnit = EventPlayerEffectUsedUnit(c_effectUnitSource);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rehgarPlayer = UnitGetOwner(lv_casterUnit);
    lv_stackCount = UnitBehaviorCount(lv_sourceUnit, "RehgarRisingStormTokenCounter");
    lv_multiplier = (lv_stackCount * 0.1);
    lv_damage = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "RehgarLightningShieldInitialDamage", "Amount", lv_rehgarPlayer)) * lv_multiplier);
    UnitDamageWithSource(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RehgarLightningShieldInitialDamage", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_damage, c_gameCatalogAbil, "RehgarLightningShield");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRehgarLightningShieldRisingStormTalentInitial_Init () {
    libGDHL_gt_HeroRehgarLightningShieldRisingStormTalentInitial = TriggerCreate("libGDHL_gt_HeroRehgarLightningShieldRisingStormTalentInitial_Func");
    TriggerEnable(libGDHL_gt_HeroRehgarLightningShieldRisingStormTalentInitial, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRehgarLightningShieldRisingStormTalentInitial, c_playerAny, "RehgarLightningShieldInitialDamageDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rehgar - Lightning Shield - Rising Storm (Talent) - Periodic
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRehgarLightningShieldRisingStormTalentPeriodic_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rehgarPlayer;
    unit lv_casterUnit;
    unit lv_sourceUnit;
    fixed lv_stackCount;
    fixed lv_multiplier;
    fixed lv_damage;

    // Variable Initialization
    lv_casterUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_sourceUnit = EventPlayerEffectUsedUnit(c_effectUnitSource);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rehgarPlayer = UnitGetOwner(lv_casterUnit);
    lv_stackCount = UnitBehaviorCount(lv_sourceUnit, "RehgarRisingStormTokenCounter");
    lv_multiplier = (lv_stackCount * 0.1);
    lv_damage = (StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "RehgarLightningShieldPeriodicDamage", "Amount", lv_rehgarPlayer)) * lv_multiplier);
    UnitDamageWithSource(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RehgarLightningShieldPeriodicDamage", EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_damage, c_gameCatalogAbil, "RehgarLightningShield");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRehgarLightningShieldRisingStormTalentPeriodic_Init () {
    libGDHL_gt_HeroRehgarLightningShieldRisingStormTalentPeriodic = TriggerCreate("libGDHL_gt_HeroRehgarLightningShieldRisingStormTalentPeriodic_Func");
    TriggerEnable(libGDHL_gt_HeroRehgarLightningShieldRisingStormTalentPeriodic, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRehgarLightningShieldRisingStormTalentPeriodic, c_playerAny, "RehgarLightningShieldPeriodicDamageDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rehgar - Tidal Waves Modify Cooldown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRehgarTidalWavesModifyCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_rehgarUnit;

    // Variable Initialization
    lv_rehgarUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitModifyCooldown(lv_rehgarUnit, CatalogReferenceGet("Abil,RehgarChainHeal,Cost[0].Cooldown.Link", UnitGetOwner(lv_rehgarUnit)), -1.0, c_cooldownOperationAdd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRehgarTidalWavesModifyCooldown_Init () {
    libGDHL_gt_HeroRehgarTidalWavesModifyCooldown = TriggerCreate("libGDHL_gt_HeroRehgarTidalWavesModifyCooldown_Func");
    TriggerEnable(libGDHL_gt_HeroRehgarTidalWavesModifyCooldown, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRehgarTidalWavesModifyCooldown, c_playerAny, "RehgarChainHealTidalWavesModifyCooldownRehgarDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rehgar - Earthliving Enchant - Hot Apply
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRehgarEarthlivingEnchantHotApply_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_rehgarUnit;
    unit lv_targetUnit;

    // Variable Initialization
    lv_rehgarUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_targetUnit, "RehgarChainHealEarthlivingEnchantHeal", lv_rehgarUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRehgarEarthlivingEnchantHotApply_Init () {
    libGDHL_gt_HeroRehgarEarthlivingEnchantHotApply = TriggerCreate("libGDHL_gt_HeroRehgarEarthlivingEnchantHotApply_Func");
    TriggerEnable(libGDHL_gt_HeroRehgarEarthlivingEnchantHotApply, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRehgarEarthlivingEnchantHotApply, c_playerAny, "RehgarChainHealEarthlivingEnchantApplyHealBehaviorDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rehgar - Farseer's Blessing Mastery
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRehgarFarseersBlessingMastery_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    unit lv_unit;
    fixed lv_scale;

    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_scale = 0.5;

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(lv_unit, "FarseersBlessingCarryBehavior") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, "RehgarAncestralHealingAncientHealingSplashCreateHealer", "RechargeVitalRate", UnitGetOwner(lv_unit), FixedToString((EventPlayerEffectUsedAmountFixed(c_effectAmountHealed, true) * lv_scale), c_fixedPrecisionAny));
    UnitCreateEffectUnitWithSource(lv_unit, "RehgarAncestralHealingFarseersBlessingSearch", lv_target, c_gameCatalogBehavior, "FarseersBlessingCarryBehavior");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRehgarFarseersBlessingMastery_Init () {
    libGDHL_gt_HeroRehgarFarseersBlessingMastery = TriggerCreate("libGDHL_gt_HeroRehgarFarseersBlessingMastery_Func");
    TriggerEnable(libGDHL_gt_HeroRehgarFarseersBlessingMastery, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRehgarFarseersBlessingMastery, c_playerAny, "RehgarAncestralHealingAncientHealingCreateHealer");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rehgar - Break Ghost Wolf On Attack
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRehgarBreakGhostWolfOnAttack_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventUnitDamageSourceUnit(), "RehgarGhostWolfBuff") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.125, c_timeGame);
    UnitBehaviorRemove(EventUnitDamageSourceUnit(), "RehgarGhostWolfBuff", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRehgarBreakGhostWolfOnAttack_Init () {
    libGDHL_gt_HeroRehgarBreakGhostWolfOnAttack = TriggerCreate("libGDHL_gt_HeroRehgarBreakGhostWolfOnAttack_Func");
    TriggerEnable(libGDHL_gt_HeroRehgarBreakGhostWolfOnAttack, false);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroRehgarBreakGhostWolfOnAttack, null, c_unitDamageTypeBasic, c_unitDamageEither, "RehgarWeaponDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rehgar - Ghost Wolf After Port To Town
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRehgarGhostWolfAfterPortToTown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = libGame_gf_HeroPortedBackToTownPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroRehgar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.25, c_timeGame);
    UnitBehaviorAdd(libGame_gv_players[lv_player].lv_heroUnit, "RehgarGhostWolfBuff", libGame_gv_players[lv_player].lv_heroUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRehgarGhostWolfAfterPortToTown_Init () {
    libGDHL_gt_HeroRehgarGhostWolfAfterPortToTown = TriggerCreate("libGDHL_gt_HeroRehgarGhostWolfAfterPortToTown_Func");
    TriggerEnable(libGDHL_gt_HeroRehgarGhostWolfAfterPortToTown, false);
    libGame_gf_HeroPortedBackToTown(libGDHL_gt_HeroRehgarGhostWolfAfterPortToTown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rehgar - Ghost Wolf Mounting Special Case
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRehgarGhostWolfMountingSpecialCase_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = libGame_gf_HeroSpecialCaseMountingPlayer();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroRehgar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(libGame_gv_players[lv_player].lv_heroUnit, "RehgarGhostWolfBuff", libGame_gv_players[lv_player].lv_heroUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRehgarGhostWolfMountingSpecialCase_Init () {
    libGDHL_gt_HeroRehgarGhostWolfMountingSpecialCase = TriggerCreate("libGDHL_gt_HeroRehgarGhostWolfMountingSpecialCase_Func");
    TriggerEnable(libGDHL_gt_HeroRehgarGhostWolfMountingSpecialCase, false);
    libGame_gf_HeroSpecialCaseMounting(libGDHL_gt_HeroRehgarGhostWolfMountingSpecialCase);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rexxar UI Initialize
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_RexxarUIInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlCreateInPanelFromTemplate(libUIUI_gv_heroSpecificStatusContainer, c_triggerControlTypePanel, "Rexxar/RexxarMishaUnitStatusFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libGDHL_gv_rexxarUI.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrame");
    libGDHL_gv_rexxarUI.lv_rexxarMishaUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusBar, "HeroUnitStatusFrame/HealthBar");
    libGDHL_gv_rexxarUI.lv_rexxarMishaHealth = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "RexxarMishaDarkImage");
    libGDHL_gv_rexxarUI.lv_rexxarMishaIcon2 = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "RexxarMishaSkullImage");
    libGDHL_gv_rexxarUI.lv_rexxarMishaIcon3 = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_RexxarUIInitialize_Init () {
    libGDHL_gt_RexxarUIInitialize = TriggerCreate("libGDHL_gt_RexxarUIInitialize_Func");
    libCore_gf_IncludeModInitialization(libGDHL_gt_RexxarUIInitialize);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Rexxar UI Cleanup For Hero Swap
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_RexxarUICleanupForHeroSwap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = libGame_gf_DebugHeroSwappedPlayer();
    if ((libGame_gv_players[lv_player].lv_heroIndex != libCore_gf_GetHeroIndexForUnitType("HeroRexxar"))) {
        libGDHL_gf_RexxarUICleanup(lv_player);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_RexxarUICleanupForHeroSwap_Init () {
    libGDHL_gt_RexxarUICleanupForHeroSwap = TriggerCreate("libGDHL_gt_RexxarUICleanupForHeroSwap_Func");
    libGame_gf_DebugHeroSwapped(libGDHL_gt_RexxarUICleanupForHeroSwap);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Clean Up - For Abathur Ultimate Evolution Clone
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarCleanUpForAbathurUltimateEvolutionClone_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGDHL_gf_AbathurUltimateEvolutionClonedUnit()) == "HeroRexxar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gf_RexxarUICleanup(libGDHL_gf_AbathurUltimateEvolutionAbathurPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarCleanUpForAbathurUltimateEvolutionClone_Init () {
    libGDHL_gt_HeroRexxarCleanUpForAbathurUltimateEvolutionClone = TriggerCreate("libGDHL_gt_HeroRexxarCleanUpForAbathurUltimateEvolutionClone_Func");
    libGDHL_gf_AbathurUltimateEvolutionEnded(libGDHL_gt_HeroRexxarCleanUpForAbathurUltimateEvolutionClone);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Unleash the Boars Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarUnleashtheBoarsCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_monitoredUnit;
    unit lv_monitoredUnit2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_monitoredUnit2 = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_monitoredUnit = OrderGetTargetUnit(UnitOrder(lv_monitoredUnit2, 0));
    libGDHL_gf_HeroRexxarUnleashtheBoarsTeleportValidation(lv_monitoredUnit2, lv_monitoredUnit, 15.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarUnleashtheBoarsCast_Init () {
    libGDHL_gt_HeroRexxarUnleashtheBoarsCast = TriggerCreate("libGDHL_gt_HeroRexxarUnleashtheBoarsCast_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarUnleashtheBoarsCast, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRexxarUnleashtheBoarsCast, c_playerAny, "RexxarUnleashTheBoarsIssueAttackOrder");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Misha - Clear Pursuit Target on Unit Death
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarMishaClearPursuitTargetonUnitDeath_Func (bool testConds, bool runActions) {
    int auto500B7D6E_ae;
    int auto500B7D6E_ai;

    // Variable Declarations
    int lv_rexxarPlayer;
    unit lv_target;

    // Variable Initialization
    lv_target = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    auto500B7D6E_ae = libCore_gv_bALMaxPlayers;
    auto500B7D6E_ai = 1;
    lv_rexxarPlayer = 1;
    for ( ; ( (auto500B7D6E_ai >= 0 && lv_rexxarPlayer <= auto500B7D6E_ae) || (auto500B7D6E_ai <= 0 && lv_rexxarPlayer >= auto500B7D6E_ae) ) ; lv_rexxarPlayer += auto500B7D6E_ai ) {
        if ((lv_target == libGDHL_gv_heroRexxarMishaPursuitTarget[lv_rexxarPlayer])) {
            libGDHL_gv_heroRexxarMishaPursuitTarget[lv_rexxarPlayer] = null;
            libGDHL_gv_heroRexxarMishaLastKnownTargetLocation[lv_rexxarPlayer] = null;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarMishaClearPursuitTargetonUnitDeath_Init () {
    libGDHL_gt_HeroRexxarMishaClearPursuitTargetonUnitDeath = TriggerCreate("libGDHL_gt_HeroRexxarMishaClearPursuitTargetonUnitDeath_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarMishaClearPursuitTargetonUnitDeath, false);
    TriggerAddEventUnitDied(libGDHL_gt_HeroRexxarMishaClearPursuitTargetonUnitDeath, UnitRefFromVariable("libGDHL_gv_heroRexxarMishaPursuitTarget[1]"));
    TriggerAddEventUnitDied(libGDHL_gt_HeroRexxarMishaClearPursuitTargetonUnitDeath, UnitRefFromVariable("libGDHL_gv_heroRexxarMishaPursuitTarget[2]"));
    TriggerAddEventUnitDied(libGDHL_gt_HeroRexxarMishaClearPursuitTargetonUnitDeath, UnitRefFromVariable("libGDHL_gv_heroRexxarMishaPursuitTarget[3]"));
    TriggerAddEventUnitDied(libGDHL_gt_HeroRexxarMishaClearPursuitTargetonUnitDeath, UnitRefFromVariable("libGDHL_gv_heroRexxarMishaPursuitTarget[4]"));
    TriggerAddEventUnitDied(libGDHL_gt_HeroRexxarMishaClearPursuitTargetonUnitDeath, UnitRefFromVariable("libGDHL_gv_heroRexxarMishaPursuitTarget[5]"));
    TriggerAddEventUnitDied(libGDHL_gt_HeroRexxarMishaClearPursuitTargetonUnitDeath, UnitRefFromVariable("libGDHL_gv_heroRexxarMishaPursuitTarget[6]"));
    TriggerAddEventUnitDied(libGDHL_gt_HeroRexxarMishaClearPursuitTargetonUnitDeath, UnitRefFromVariable("libGDHL_gv_heroRexxarMishaPursuitTarget[7]"));
    TriggerAddEventUnitDied(libGDHL_gt_HeroRexxarMishaClearPursuitTargetonUnitDeath, UnitRefFromVariable("libGDHL_gv_heroRexxarMishaPursuitTarget[8]"));
    TriggerAddEventUnitDied(libGDHL_gt_HeroRexxarMishaClearPursuitTargetonUnitDeath, UnitRefFromVariable("libGDHL_gv_heroRexxarMishaPursuitTarget[9]"));
    TriggerAddEventUnitDied(libGDHL_gt_HeroRexxarMishaClearPursuitTargetonUnitDeath, UnitRefFromVariable("libGDHL_gv_heroRexxarMishaPursuitTarget[10]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Misha - Set Pursuit Target From Misha, Focus!
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarMishaSetPursuitTargetFromMishaFocus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_rexxar;
    int lv_rexxarPlayer;
    unit lv_target;

    // Variable Initialization
    lv_rexxar = EventPlayerEffectUsedUnitLaunch();
    lv_rexxarPlayer = UnitGetOwner(lv_rexxar);
    lv_target = EventPlayerEffectUsedUnitImpact();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGDHL_gv_heroRexxarMishaPursuitTarget[lv_rexxarPlayer] != lv_target)) {
        libGDHL_gv_heroRexxarMishaPursuitTarget[lv_rexxarPlayer] = null;
        libGDHL_gv_heroRexxarMishaLastKnownTargetLocation[lv_rexxarPlayer] = null;
        if ((UnitTypeTestAttribute(UnitGetType(lv_target), c_unitAttributeStructure) == false)) {
            libGDHL_gv_heroRexxarMishaPursuitTarget[lv_rexxarPlayer] = lv_target;
            libGDHL_gv_heroRexxarMishaLastKnownTargetLocation[lv_rexxarPlayer] = UnitGetPosition(lv_target);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarMishaSetPursuitTargetFromMishaFocus_Init () {
    libGDHL_gt_HeroRexxarMishaSetPursuitTargetFromMishaFocus = TriggerCreate("libGDHL_gt_HeroRexxarMishaSetPursuitTargetFromMishaFocus_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarMishaSetPursuitTargetFromMishaFocus, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRexxarMishaSetPursuitTargetFromMishaFocus, c_playerAny, "RexxarMishaFocusModifyUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Misha - Clear Pursuit Target From Misha, Follow!
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarMishaClearPursuitTargetFromMishaFollow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_rexxar;
    int lv_rexxarPlayer;

    // Variable Initialization
    lv_rexxar = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_rexxarPlayer = UnitGetOwner(lv_rexxar);

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroRexxarMishaPursuitTarget[lv_rexxarPlayer] = null;
    libGDHL_gv_heroRexxarMishaLastKnownTargetLocation[lv_rexxarPlayer] = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarMishaClearPursuitTargetFromMishaFollow_Init () {
    libGDHL_gt_HeroRexxarMishaClearPursuitTargetFromMishaFollow = TriggerCreate("libGDHL_gt_HeroRexxarMishaClearPursuitTargetFromMishaFollow_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarMishaClearPursuitTargetFromMishaFollow, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRexxarMishaClearPursuitTargetFromMishaFollow, c_playerAny, "RexxaeMishaFollowFollowApply");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Misha - Set Pursuit Target From Attacks
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarMishaSetPursuitTargetFromAttacks_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_misha;
    int lv_rexxarPlayer;
    unit lv_target;

    // Variable Initialization
    lv_misha = EventPlayerEffectUsedUnitLaunch();
    lv_rexxarPlayer = UnitGetOwner(lv_misha);
    lv_target = EventPlayerEffectUsedUnitImpact();

    // Conditions
    if (testConds) {
        if (!((lv_rexxarPlayer >= 1))) {
            return false;
        }

        if (!((lv_rexxarPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGDHL_gv_heroRexxarMishaPursuitTarget[lv_rexxarPlayer] != lv_target)) {
        libGDHL_gv_heroRexxarMishaPursuitTarget[lv_rexxarPlayer] = null;
        libGDHL_gv_heroRexxarMishaLastKnownTargetLocation[lv_rexxarPlayer] = null;
        if ((UnitTypeTestAttribute(UnitGetType(lv_target), c_unitAttributeStructure) == false)) {
            libGDHL_gv_heroRexxarMishaPursuitTarget[lv_rexxarPlayer] = lv_target;
            libGDHL_gv_heroRexxarMishaLastKnownTargetLocation[lv_rexxarPlayer] = UnitGetPosition(lv_target);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarMishaSetPursuitTargetFromAttacks_Init () {
    libGDHL_gt_HeroRexxarMishaSetPursuitTargetFromAttacks = TriggerCreate("libGDHL_gt_HeroRexxarMishaSetPursuitTargetFromAttacks_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarMishaSetPursuitTargetFromAttacks, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRexxarMishaSetPursuitTargetFromAttacks, c_playerAny, "RexxarMishaWeaponDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Misha Fixate Used
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarMishaFixateUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_rexxar;
    int lv_rexxarPlayer;
    unit lv_targetUnit;
    point lv_targetPoint;
    unit lv_misha;

    // Variable Initialization
    lv_rexxar = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_rexxarPlayer = EventPlayer();
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_misha = libGDHL_gv_rexxarMishaUnit[lv_rexxarPlayer];

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsSelected(libGDHL_gv_rexxarMishaUnit[lv_rexxarPlayer], lv_rexxarPlayer) == true)) {
        UnitSelect(libGDHL_gv_rexxarMishaUnit[lv_rexxarPlayer], lv_rexxarPlayer, false);
    }

    if ((UnitHasBehavior2(lv_rexxar, "RexxarMishaFollowRexxarCarry") == true)) {
        UnitAbilityReset(lv_rexxar, AbilityCommand("RexxarMishaFollowCancel", 0), c_spendLocationUnit);
        UnitIssueOrder(lv_rexxar, Order(AbilityCommand("RexxarMishaFollowCancel", 0)), c_orderQueueAddToFront);
    }

    if ((libGDHL_gv_commandMishaTargetUnit[lv_rexxarPlayer] != null)) {
        UnitBehaviorRemovePlayer(libGDHL_gv_commandMishaTargetUnit[lv_rexxarPlayer], "RexxarMishaFocussedTargetUnit", lv_rexxarPlayer, 1);
        UnitCreateEffectUnit(libGDHL_gv_rexxarMishaUnit[lv_rexxarPlayer], "RexxarMishaFocusTargetOff", libGDHL_gv_commandMishaTargetUnit[lv_rexxarPlayer]);
    }

    if ((libGDHL_gv_commandMishaTargetPoint[lv_rexxarPlayer] != null)) {
        UnitCreateEffectPoint(libGDHL_gv_rexxarMishaUnit[lv_rexxarPlayer], "RexxarMishaFocusTargetOff", libGDHL_gv_commandMishaTargetPoint[lv_rexxarPlayer]);
    }

    if ((libGDHL_gv_commandMishaTargetMoonwell[lv_rexxarPlayer] != null)) {
        UnitCreateEffectUnit(libGDHL_gv_rexxarMishaUnit[lv_rexxarPlayer], "RexxarMishaFocusTargetOff", libGDHL_gv_commandMishaTargetMoonwell[lv_rexxarPlayer]);
    }

    if ((lv_targetUnit != null) && (lv_targetUnit != lv_misha)) {
        libGDHL_gv_commandMishaTargetPoint[lv_rexxarPlayer] = null;
        if (((UnitFilterMatch(lv_targetUnit, EventPlayer(), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) || (UnitFilterMatch(lv_targetUnit, EventPlayer(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
            libGDHL_gv_commandMishaTargetUnit[lv_rexxarPlayer] = lv_targetUnit;
            UnitCreateEffectUnit(lv_rexxar, "RexxarApplyMishaFocusTargetBehavior", libGDHL_gv_commandMishaTargetUnit[lv_rexxarPlayer]);
            UnitBehaviorRemove(libGDHL_gv_rexxarMishaUnit[lv_rexxarPlayer], "RexxarMishaFocussedOnPoint", 1);
            UnitBehaviorAddPlayer(libGDHL_gv_rexxarMishaUnit[lv_rexxarPlayer], "RexxarMishaFocussedOnUnit", lv_rexxarPlayer, 1);
            TransmissionSendForPlayer(PlayerGroupSingle(lv_rexxarPlayer), TransmissionSourceFromUnit(libGame_gv_players[lv_rexxarPlayer].lv_heroUnit, false, true, ""), PortraitGetGame(), "", "Talk", SoundLink("RexxarBase_Misha_FocusUnit", c_soundIndexAny), StringToText(""), StringToText(""), 0.0, c_transmissionDurationAdd, false, lv_rexxarPlayer);
            Wait(0.25, c_timeGame);
            TransmissionSendForPlayer(PlayerGroupSingle(lv_rexxarPlayer), TransmissionSourceFromUnit(libGDHL_gv_rexxarMishaUnit[lv_rexxarPlayer], false, true, ""), PortraitGetGame(), "", "Talk", SoundLink("Rexxar_Misha_VOX_FocusUnit", c_soundIndexAny), StringToText(""), StringToText(""), 0.0, c_transmissionDurationAdd, false, lv_rexxarPlayer);
        }
        else {
            if (((UnitGetType(lv_targetUnit) == "TownMoonwell") || (UnitGetType(lv_targetUnit) == "TownMoonwellL2") || (UnitGetType(lv_targetUnit) == "TownMoonwellL3"))) {
                UnitBehaviorRemove(libGDHL_gv_rexxarMishaUnit[lv_rexxarPlayer], "RexxarMishaFocussedOnUnit", 1);
                UnitBehaviorAdd(libGDHL_gv_rexxarMishaUnit[lv_rexxarPlayer], "RexxarMishaFocussedOnPoint", lv_rexxar, 1);
                libGDHL_gv_commandMishaTargetMoonwell[lv_rexxarPlayer] = lv_targetUnit;
            }
            else {
                UnitCreateEffectUnit(libGDHL_gv_rexxarMishaUnit[lv_rexxarPlayer], "RexxarMishaFocusTargetOff", lv_targetUnit);
                libGDHL_gv_commandMishaTargetPoint[lv_rexxarPlayer] = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_targetUnit), 3.0, UnitGetPosition(libGDHL_gv_rexxarMishaUnit[lv_rexxarPlayer]));
                UnitCreateEffectPoint(lv_rexxar, "RexxarMishaFocusTargetOn", libGDHL_gv_commandMishaTargetPoint[lv_rexxarPlayer]);
                libGDHL_gv_commandMishaTargetUnit[lv_rexxarPlayer] = null;
                UnitBehaviorRemove(libGDHL_gv_rexxarMishaUnit[lv_rexxarPlayer], "RexxarMishaFocussedOnUnit", 1);
                UnitBehaviorAddPlayer(libGDHL_gv_rexxarMishaUnit[lv_rexxarPlayer], "RexxarMishaFocussedOnPoint", lv_rexxarPlayer, 1);
                TransmissionSendForPlayer(PlayerGroupSingle(lv_rexxarPlayer), TransmissionSourceFromUnit(libGame_gv_players[lv_rexxarPlayer].lv_heroUnit, false, true, ""), PortraitGetGame(), "", "Talk", SoundLink("RexxarBase_Misha_FocusPoint", c_soundIndexAny), StringToText(""), StringToText(""), 0.0, c_transmissionDurationAdd, false, lv_rexxarPlayer);
            }
        }
    }
    else {
        if ((lv_targetPoint != null)) {
            libGDHL_gv_commandMishaTargetPoint[lv_rexxarPlayer] = lv_targetPoint;
            libGDHL_gv_commandMishaTargetUnit[lv_rexxarPlayer] = null;
            UnitBehaviorRemove(libGDHL_gv_rexxarMishaUnit[lv_rexxarPlayer], "RexxarMishaFocussedOnUnit", 1);
            UnitBehaviorAddPlayer(libGDHL_gv_rexxarMishaUnit[lv_rexxarPlayer], "RexxarMishaFocussedOnPoint", lv_rexxarPlayer, 1);
            TransmissionSendForPlayer(PlayerGroupSingle(lv_rexxarPlayer), TransmissionSourceFromUnit(libGame_gv_players[lv_rexxarPlayer].lv_heroUnit, false, true, ""), PortraitGetGame(), "", "Talk", SoundLink("RexxarBase_Misha_FocusPoint", c_soundIndexAny), StringToText(""), StringToText(""), 0.0, c_transmissionDurationAdd, false, lv_rexxarPlayer);
        }

        if ((lv_targetUnit == lv_misha)) {
            libGDHL_gv_commandMishaTargetPoint[lv_rexxarPlayer] = UnitGetPosition(lv_misha);
            libGDHL_gv_commandMishaTargetUnit[lv_rexxarPlayer] = null;
            UnitBehaviorRemove(libGDHL_gv_rexxarMishaUnit[lv_rexxarPlayer], "RexxarMishaFocussedOnUnit", 1);
            UnitBehaviorAddPlayer(libGDHL_gv_rexxarMishaUnit[lv_rexxarPlayer], "RexxarMishaFocussedOnPoint", lv_rexxarPlayer, 1);
            TransmissionSendForPlayer(PlayerGroupSingle(lv_rexxarPlayer), TransmissionSourceFromUnit(libGame_gv_players[lv_rexxarPlayer].lv_heroUnit, false, true, ""), PortraitGetGame(), "", "Talk", SoundLink("RexxarBase_Misha_FocusPoint", c_soundIndexAny), StringToText(""), StringToText(""), 0.0, c_transmissionDurationAdd, false, lv_rexxarPlayer);
        }

    }
    libGDHL_gf_HeroRexxarMishaThink(lv_rexxarPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarMishaFixateUsed_Init () {
    libGDHL_gt_HeroRexxarMishaFixateUsed = TriggerCreate("libGDHL_gt_HeroRexxarMishaFixateUsed_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarMishaFixateUsed, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRexxarMishaFixateUsed, c_playerAny, "RexxarMishaFocusTargetOn");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Misha Gains Map Mechanic Stack
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarMishaGainsMapMechanicStack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rexxarPlayer;
    unit lv_mishaUnit;
    unit lv_rexxarUnit;
    int lv_mapMechanicCount;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "RexxarMisha"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rexxarPlayer = UnitGetOwner(EventUnit());
    lv_mishaUnit = EventUnit();
    lv_rexxarUnit = libGame_gv_players[lv_rexxarPlayer].lv_heroUnit;
    lv_mapMechanicCount = UnitBehaviorCount(lv_mishaUnit, "MapMechanicStack");
    UnitBehaviorAdd(lv_rexxarUnit, "MapMechanicStack", lv_mishaUnit, lv_mapMechanicCount);
    UnitBehaviorRemove(lv_mishaUnit, "MapMechanicStack", lv_mapMechanicCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarMishaGainsMapMechanicStack_Init () {
    libGDHL_gt_HeroRexxarMishaGainsMapMechanicStack = TriggerCreate("libGDHL_gt_HeroRexxarMishaGainsMapMechanicStack_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarMishaGainsMapMechanicStack, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRexxarMishaGainsMapMechanicStack, null, "MapMechanicStack", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Misha Charge Disable
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarMishaChargeDisable_Func (bool testConds, bool runActions) {
    fixed autoC7C43B8B_at;

    // Variable Declarations
    int lv_rexxarPlayer;
    unit lv_mishaUnit;
    unit lv_rexxarUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "RexxarMisha"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rexxarPlayer = UnitGetOwner(EventUnit());
    lv_mishaUnit = EventUnit();
    lv_rexxarUnit = libGame_gv_players[lv_rexxarPlayer].lv_heroUnit;
    UnitBehaviorAdd(lv_rexxarUnit, "RexxarDisableCharge", lv_rexxarUnit, 1);
    autoC7C43B8B_at = 0;
    while (!((UnitHasBehavior2(lv_mishaUnit, EventUnitBehavior()) == false)) && autoC7C43B8B_at <= 20.0) {
        Wait(0.0625, c_timeGame);
        autoC7C43B8B_at = autoC7C43B8B_at + 0.0625;
    }
    UnitBehaviorRemove(lv_rexxarUnit, "RexxarDisableCharge", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarMishaChargeDisable_Init () {
    libGDHL_gt_HeroRexxarMishaChargeDisable = TriggerCreate("libGDHL_gt_HeroRexxarMishaChargeDisable_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarMishaChargeDisable, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroRexxarMishaChargeDisable, null, c_behaviorCategoryStun, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroRexxarMishaChargeDisable, null, c_behaviorCategoryUser6, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroRexxarMishaChargeDisable, null, c_behaviorCategoryUser7, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroRexxarMishaChargeDisable, null, c_behaviorCategoryUser5, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRexxarMishaChargeDisable, null, "SylvanasMindControlTarget", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Misha Mend Pet Disable
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarMishaMendPetDisable_Func (bool testConds, bool runActions) {
    fixed auto5D78EC36_at;

    // Variable Declarations
    int lv_rexxarPlayer;
    unit lv_mishaUnit;
    unit lv_rexxarUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "RexxarMisha"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rexxarPlayer = UnitGetOwner(EventUnit());
    lv_mishaUnit = EventUnit();
    lv_rexxarUnit = libGame_gv_players[lv_rexxarPlayer].lv_heroUnit;
    UnitBehaviorAdd(lv_rexxarUnit, "RexxarDisableMendPet", lv_rexxarUnit, 1);
    auto5D78EC36_at = 0;
    while (!((UnitHasBehavior2(lv_mishaUnit, EventUnitBehavior()) == false)) && auto5D78EC36_at <= 20.0) {
        Wait(0.0625, c_timeGame);
        auto5D78EC36_at = auto5D78EC36_at + 0.0625;
    }
    UnitBehaviorRemove(lv_rexxarUnit, "RexxarDisableMendPet", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarMishaMendPetDisable_Init () {
    libGDHL_gt_HeroRexxarMishaMendPetDisable = TriggerCreate("libGDHL_gt_HeroRexxarMishaMendPetDisable_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarMishaMendPetDisable, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroRexxarMishaMendPetDisable, null, c_behaviorCategoryUser6, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Misha Spawn
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarMishaSpawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rexxarPlayer;
    unit lv_misha;
    unit lv_rexxar;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "RexxarMisha"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rexxarPlayer = UnitGetOwner(EventUnitCreatedUnit());
    lv_misha = EventUnitCreatedUnit();
    libGDHL_gv_rexxarMishaUnit[lv_rexxarPlayer] = EventUnitCreatedUnit();
    lv_rexxar = libGame_gv_players[lv_rexxarPlayer].lv_heroUnit;
    libGDHL_gv_commandMishaTargetPoint[lv_rexxarPlayer] = null;
    libGDHL_gv_commandMishaTargetUnit[lv_rexxarPlayer] = null;
    libGDHL_gv_mishaCurrentAIState[lv_rexxarPlayer] = libGDHL_ge_MishaState_Idle;
    UnitBehaviorRemove(lv_misha, "RexxarMishaHold", 1);
    UnitCreateEffectUnit(lv_rexxar, "RexxarMishaApplyBasicAttackDamageResponseController", lv_misha);
    UnitCreateEffectUnit(lv_misha, "RexxarMishaApplyBasicAttackDamageResponseController2", lv_rexxar);
    libNtve_gf_MakeUnitFacePoint(lv_misha, PointWithOffset(UnitGetGoalPosition(lv_rexxar), 0.0, -5.0), 0.0);
    if ((UnitGetType(libGame_gv_players[lv_rexxarPlayer].lv_heroUnit) == "HeroAbathur")) {
        lv_rexxar = libGame_gv_players[lv_rexxarPlayer].lv_activeVehicle;
        UnitBehaviorAdd(lv_misha, "UltimateEvolutionBuff", lv_rexxar, 1);
        UnitBehaviorAdd(lv_misha, "AbathurUltimateEvolutionCleanupTarget", lv_rexxar, 1);
    }
    else {
        if ((PlayerHasTalent(lv_rexxarPlayer, "RexxarHunterGatherer") == true)) {
            UnitBehaviorAdd(lv_misha, "RexxarHunterGathererCarryBehavior", lv_misha, 1);
            UnitBehaviorAdd(lv_misha, "RexxarHunterGathererMishaTokenCounter", lv_misha, 1);
            CatalogFieldValueSet(c_gameCatalogEffect, "RexxarHunterGathererModifyDynamicMishaTokenCount", "Value", lv_rexxarPlayer, IntToString(UnitBehaviorCount(lv_rexxar, "RexxarHunterGathererRexxarTokenCounter")));
            UnitCreateEffectUnit(lv_rexxar, "RexxarHunterGathererModifyDynamicMishaTokenCount", lv_misha);
        }

        if ((PlayerHasTalent(lv_rexxarPlayer, "RexxarSpiritBondGrizzledFortitude") == true)) {
            UnitBehaviorAdd(lv_misha, "TalentBucketBlockChargedTarget", lv_misha, 1);
        }

        if ((PlayerHasTalent(lv_rexxarPlayer, "RexxarSpiritBondWildfireBear") == true)) {
            UnitBehaviorAdd(lv_misha, "RexxarSpiritBondWildfireBear", lv_misha, 1);
        }

        if ((PlayerHasTalent(lv_rexxarPlayer, "RexxarAnimalHusbandry") == true)) {
            UnitBehaviorAdd(lv_misha, "RexxarAnimalHusbandryHealthBuffCarry", lv_misha, 1);
            UnitBehaviorAdd(lv_misha, "RexxarAnimalHusbandryTokenCounter", lv_misha, 1);
            CatalogFieldValueSet(c_gameCatalogEffect, "RexxarAnimalHusbandryDynamicModifyTokenCounter", "Value", lv_rexxarPlayer, IntToString((UnitBehaviorCount(lv_rexxar, "RexxarAnimalHusbandryTokenCounter") / 2)));
            UnitCreateEffectUnit(lv_rexxar, "RexxarAnimalHusbandryDynamicModifyTokenCounter", lv_misha);
        }

        if ((PlayerHasTalent(lv_rexxarPlayer, "RexxarDireBeast") == true)) {
            UnitBehaviorAdd(lv_misha, "RexxarDireBeastTokenCounter", lv_misha, 1);
        }

    }
    if (((libGame_gv_players[lv_rexxarPlayer].lv_activeVehicle != null) && (UnitGetType(libGame_gv_players[lv_rexxarPlayer].lv_activeVehicle) != "HeroRexxar"))) {
        UnitSetPosition(lv_misha, UnitGetPosition(libGame_gv_players[lv_rexxarPlayer].lv_heroUnit), false);
        UnitBehaviorAdd(lv_misha, "UsingVehicle", lv_misha, 1);
        UnitGroupRemove(libGame_gv_players[lv_rexxarPlayer].lv_heroUnitGroup, lv_misha);
    }

    UnitGroupAdd(libGame_gv_players[lv_rexxarPlayer].lv_heroUnitGroup, lv_misha);
    AIAddPlayerUnit(lv_misha);
    libGDHL_gf_RexxarUISetup(lv_rexxarPlayer, lv_misha);
    libUIUI_gf_UIUnitStatusFramesUpdateUnitStatusFramesForUnit(lv_rexxarPlayer, lv_misha);
    DialogControlSetVisible(libGDHL_gv_rexxarUI.lv_rexxarMishaIcon2, libCore_gv_playerGroupFromPlayer[lv_rexxarPlayer], false);
    DialogControlSetVisible(libGDHL_gv_rexxarUI.lv_rexxarMishaIcon3, libCore_gv_playerGroupFromPlayer[lv_rexxarPlayer], false);
    UnitCreateEffectUnit(lv_rexxar, "RexxarMishaCreateDummyPersistent", lv_misha);
    while ((UnitIsAlive(lv_misha) == true) && (UnitIsAlive(lv_rexxar) == true)) {
        libGDHL_gf_HeroRexxarMishaThink(lv_rexxarPlayer);
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarMishaSpawn_Init () {
    libGDHL_gt_HeroRexxarMishaSpawn = TriggerCreate("libGDHL_gt_HeroRexxarMishaSpawn_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarMishaSpawn, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroRexxarMishaSpawn, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Misha Dance
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarMishaDance_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroRexxar"))) {
            return false;
        }

        if (!((libGDHL_gv_rexxarMishaUnit[EventPlayer()] != null))) {
            return false;
        }

        if (!((UnitIsAlive(libGDHL_gv_rexxarMishaUnit[EventPlayer()]) == true))) {
            return false;
        }

        if (!((OrderGetAbilityCommand(UnitOrder(libGDHL_gv_rexxarMishaUnit[EventPlayer()], 0)) != AbilityCommand("stop", 3)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitIssueOrder(libGDHL_gv_rexxarMishaUnit[EventPlayer()], EventUnitOrder(), c_orderQueueAddToFront);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarMishaDance_Init () {
    libGDHL_gt_HeroRexxarMishaDance = TriggerCreate("libGDHL_gt_HeroRexxarMishaDance_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarMishaDance, false);
    TriggerAddEventUnitOrder(libGDHL_gt_HeroRexxarMishaDance, null, AbilityCommand("HoldFire", 3));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Rexxar Dies
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarRexxarDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rexxarPlayer;
    unit lv_misha;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gf_HeroKilledUnit()) == "HeroRexxar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rexxarPlayer = libGame_gf_HeroKilledPlayer();
    libGDHL_gv_heroRexxarMishaPursuitTarget[lv_rexxarPlayer] = null;
    libGDHL_gv_heroRexxarMishaLastKnownTargetLocation[lv_rexxarPlayer] = null;
    if ((UnitHasBehavior2(libGame_gf_HeroKilledUnit(), "RexxarMishaAlive") == true)) {
        Wait(0.0625, c_timeGame);
        UnitGroupLoopBegin(libGame_gv_players[lv_rexxarPlayer].lv_heroUnitGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "RexxarMisha")) {
                lv_misha = UnitGroupLoopCurrent();
                UnitCreateEffectUnit(lv_misha, "RexxarAnimalHusbandryResetTokenCounter", lv_misha);
            }

        }
        UnitGroupLoopEnd();
        UnitKill(lv_misha);
    }
    else {
        libUIUI_gf_DeathTimerPanelUnregisterTimer(libGame_gf_TeamNumberOfPlayer(lv_rexxarPlayer), libGDHL_gv_mishaDeathTimer[lv_rexxarPlayer]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarRexxarDies_Init () {
    libGDHL_gt_HeroRexxarRexxarDies = TriggerCreate("libGDHL_gt_HeroRexxarRexxarDies_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarRexxarDies, false);
    libGame_gf_HeroKilled(libGDHL_gt_HeroRexxarRexxarDies);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Remove Misha
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarRemoveMisha_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroRexxar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("RexxarMisha", UnitGetOwner(EventUnit()), RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarRemoveMisha_Init () {
    libGDHL_gt_HeroRexxarRemoveMisha = TriggerCreate("libGDHL_gt_HeroRexxarRemoveMisha_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarRemoveMisha, false);
    TriggerAddEventUnitRemoved(libGDHL_gt_HeroRexxarRemoveMisha, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Rexxar Stasis Start (Includes Feign Death)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarRexxarStasisStartIncludesFeignDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rexxarPlayer;
    unit lv_misha;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroRexxar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_rexxarIsInStasis[UnitGetOwner(EventUnit())] = true;
    libGDHL_gv_rexxarStasisOrderCount[UnitGetOwner(EventUnit())] = UnitOrderCount(EventUnit());
    libGDHL_gf_HeroRexxarMishaFixateOff(UnitGetOwner(EventUnit()));
    if ((UnitHasBehavior2(EventUnit(), "RexxarMishaAlive") == true)) {
        UnitGroupLoopBegin(libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnitGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            if ((UnitGetType(UnitGroupLoopCurrent()) == "RexxarMisha")) {
                lv_misha = UnitGroupLoopCurrent();
            }

        }
        UnitGroupLoopEnd();
        UnitSelect(lv_misha, UnitGetOwner(EventUnit()), true);
    }

    UISetSelectionTypeEnabled(PlayerGroupSingle(lv_rexxarPlayer), c_localSelectionTypeWorldPanelHero, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarRexxarStasisStartIncludesFeignDeath_Init () {
    libGDHL_gt_HeroRexxarRexxarStasisStartIncludesFeignDeath = TriggerCreate("libGDHL_gt_HeroRexxarRexxarStasisStartIncludesFeignDeath_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarRexxarStasisStartIncludesFeignDeath, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroRexxarRexxarStasisStartIncludesFeignDeath, null, c_behaviorCategoryUser6, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Rexxar Stasis End (Included Feign Death)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarRexxarStasisEndIncludedFeignDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rexxarPlayer;
    unit lv_misha;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroRexxar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_rexxarIsInStasis[UnitGetOwner(EventUnit())] = false;
    UnitGroupLoopBegin(libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "RexxarMisha")) {
            lv_misha = UnitGroupLoopCurrent();
        }

        UnitSelect(lv_misha, UnitGetOwner(EventUnit()), false);
    }
    UnitGroupLoopEnd();
    UISetSelectionTypeEnabled(PlayerGroupSingle(lv_rexxarPlayer), c_localSelectionTypeWorldPanelHero, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarRexxarStasisEndIncludedFeignDeath_Init () {
    libGDHL_gt_HeroRexxarRexxarStasisEndIncludedFeignDeath = TriggerCreate("libGDHL_gt_HeroRexxarRexxarStasisEndIncludedFeignDeath_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarRexxarStasisEndIncludedFeignDeath, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroRexxarRexxarStasisEndIncludedFeignDeath, null, c_behaviorCategoryUser6, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Misha Dies
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarMishaDies_Func (bool testConds, bool runActions) {
    playergroup auto6A884D65_g;
    int auto6A884D65_p;

    // Variable Declarations
    int lv_itPlayer;
    int lv_killingPlayer;
    int lv_rexxarPlayer;
    unit lv_rexxarUnit;
    unit lv_misha;
    playergroup lv_killingTeamGroup;
    playergroup lv_killingGroup;

    // Variable Initialization
    lv_killingTeamGroup = PlayerGroupEmpty();
    lv_killingGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "RexxarMisha"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rexxarPlayer = UnitGetOwner(EventUnit());
    lv_misha = EventUnit();
    lv_killingPlayer = libNtve_gf_KillingPlayer();
    lv_killingTeamGroup = libGame_gf_EnemyPlayerGroupOfPlayer(lv_rexxarPlayer);
    libGDHL_gv_heroRexxarMishaPursuitTarget[lv_rexxarPlayer] = null;
    libGDHL_gv_heroRexxarMishaLastKnownTargetLocation[lv_rexxarPlayer] = null;
    libGDHL_gf_HeroRexxarMishaFixateOff(lv_rexxarPlayer);
    if ((UnitGetType(libGame_gv_players[EventPlayer()].lv_heroUnit) != "HeroAbathur")) {
        lv_rexxarUnit = libGame_gv_players[lv_rexxarPlayer].lv_heroUnit;
        lv_killingGroup = libGame_gf_HeroDeathGetKillingGroupFromKillingTeamGroupAndDeadUnit(lv_killingTeamGroup, libNtve_gf_KillingPlayer(), EventUnit());
        libGame_gf_HeroDeathAwardXP(lv_killingPlayer, EventUnit(), lv_killingTeamGroup, lv_killingGroup, true);
        if ((lv_killingPlayer == 16)) {
            libGame_gf_SendEventHeroAllyKilled(lv_rexxarPlayer, lv_misha);
        }
        else {
            libGame_gf_SendEventHeroAllyKilled(lv_killingPlayer, lv_misha);
        }
        auto6A884D65_g = lv_killingGroup; 
        auto6A884D65_p = 1;
        for ( ; auto6A884D65_p <= PlayerGroupCount(auto6A884D65_g) ; auto6A884D65_p += (lv_itPlayer == PlayerGroupPlayer(auto6A884D65_g, auto6A884D65_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto6A884D65_g, auto6A884D65_p);
            libGame_gf_ScoreValuesRecordXPContributionForPlayer(lv_itPlayer, (libCore_gf_DataXPXPForHero(lv_itPlayer, EventUnit()) / PlayerGroupCount(lv_killingGroup)), false);
            libGame_gf_SendEventHeroParticipatedInTakedown(libNtve_gf_KillingPlayer(), lv_itPlayer, lv_rexxarPlayer, EventUnit(), UnitGetPosition(EventUnit()));
        }
        if ((UnitIsAlive(lv_rexxarUnit) == true)) {
            TimerStart(libGDHL_gv_mishaDeathTimer[lv_rexxarPlayer], UnitBehaviorDurationTotal(lv_rexxarUnit, "RexxarSpiritBondCooldown"), false, c_timeGame);
            libUIUI_gf_DeathAnnouncementPanelRegisterDeath(lv_rexxarPlayer, libNtve_gf_KillingPlayer(), "Assets\\Textures\\ui_targetportrait_hero_misha.dds", EventUnit(), StringExternal("Param/Value/lib_GDHL_DC9CFEF0"), libGDHL_gv_mishaDeathTimer[lv_rexxarPlayer]);
        }

    }

    UnitSelect(EventUnit(), lv_rexxarPlayer, false);
    libUIUI_gv_uIHeroStatusFrames[lv_rexxarPlayer].lv_unitCount -= 1;
    DialogControlSetVisible(libGDHL_gv_rexxarUI.lv_rexxarMishaHealth, libCore_gv_playerGroupFromPlayer[lv_rexxarPlayer], false);
    DialogControlSetVisible(libGDHL_gv_rexxarUI.lv_rexxarMishaIcon2, libCore_gv_playerGroupFromPlayer[lv_rexxarPlayer], true);
    DialogControlSetVisible(libGDHL_gv_rexxarUI.lv_rexxarMishaIcon3, libCore_gv_playerGroupFromPlayer[lv_rexxarPlayer], true);
    DialogControlSendAnimationEvent(libGDHL_gv_rexxarUI.lv_rexxarMishaIcon3, libCore_gv_playerGroupFromPlayer[lv_rexxarPlayer], "ShrinkOverlay");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarMishaDies_Init () {
    libGDHL_gt_HeroRexxarMishaDies = TriggerCreate("libGDHL_gt_HeroRexxarMishaDies_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarMishaDies, false);
    TriggerAddEventUnitDied(libGDHL_gt_HeroRexxarMishaDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Misha Gorge End
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarMishaGorgeEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rexxarPlayer;
    unit lv_misha;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "RexxarMisha"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_players[UnitGetOwner(EventUnit())].lv_activeVehicle == null)) {
        if ((UnitPathableToUnit(EventUnit(), libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit, 0.0, 0.0) == false)) {
            UnitSetPosition(EventUnit(), UnitGetPosition(libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit), false);
        }

    }
    else {
        if ((UnitPathableToUnit(EventUnit(), libGame_gv_players[UnitGetOwner(EventUnit())].lv_activeVehicle, 0.0, 0.0) == false)) {
            UnitSetPosition(EventUnit(), UnitGetPosition(libGame_gv_players[UnitGetOwner(EventUnit())].lv_activeVehicle), false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarMishaGorgeEnd_Init () {
    libGDHL_gt_HeroRexxarMishaGorgeEnd = TriggerCreate("libGDHL_gt_HeroRexxarMishaGorgeEnd_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarMishaGorgeEnd, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRexxarMishaGorgeEnd, null, "GorgePostGorgeTargetCleanup", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Misha Teleport
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarMishaTeleport_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((EventPlayerEffectUsed() == "PortBackToBaseTeleport") || (libCore_gv_mAPMapStringID == "TowersOfDoom")))) {
            return false;
        }

        if (!((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroRexxar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(libGame_gv_players[lv_player].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "RexxarMisha")) {
            UnitCreateEffectUnit(UnitGroupLoopCurrent(), "RexxarMishaHoldIssueStopOrder", UnitGroupLoopCurrent());
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "RexxarMishaManualOrder", 1);
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "RexxarMishaLeashTimeToLeash", 1);
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "RexxarMishaHold", 1);
            UnitCreateEffectUnit(UnitGroupLoopCurrent(), "RexxarMishaCommandRemoveTargetPriorityBuffSearch", UnitGroupLoopCurrent());
            UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(libGame_gv_players[lv_player].lv_heroUnit), false);
            UnitCreateEffectUnit(UnitGroupLoopCurrent(), "PortBackToBaseHealthRestore", UnitGroupLoopCurrent());
            Wait(0.0625, c_timeGame);
            UnitCreateEffectPoint(UnitGroupLoopCurrent(), "RexxarMishaFocusTargetOff", libGDHL_gv_commandMishaTargetPoint[lv_player]);
            libGDHL_gv_commandMishaTargetPoint[lv_player] = null;
            UnitBehaviorRemove(libGDHL_gv_commandMishaTargetUnit[lv_player], "RexxarMishaFocussedTargetUnit", 1);
            libGDHL_gv_commandMishaTargetUnit[lv_player] = null;
            UnitBehaviorRemove(libGDHL_gv_commandMishaTargetMoonwell[lv_player], "RexxarMishaFocussedTargetUnit", 1);
            libGDHL_gv_commandMishaTargetMoonwell[lv_player] = null;
            UnitBehaviorRemove(libGDHL_gv_rexxarMishaUnit[lv_player], "RexxarMishaFocussedOnPoint", 1);
            UnitBehaviorRemove(libGDHL_gv_rexxarMishaUnit[lv_player], "RexxarMishaFocussedOnUnit", 1);
            libGDHL_gv_heroRexxarMishaPursuitTarget[lv_player] = null;
            libGDHL_gv_mishaCurrentAIState[lv_player] = libGDHL_ge_MishaState_Idle;
            libGDHL_gv_heroRexxarMishaLastKnownTargetLocation[lv_player] = null;
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarMishaTeleport_Init () {
    libGDHL_gt_HeroRexxarMishaTeleport = TriggerCreate("libGDHL_gt_HeroRexxarMishaTeleport_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarMishaTeleport, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRexxarMishaTeleport, c_playerAny, "PortBackToBaseTeleport");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRexxarMishaTeleport, c_playerAny, "UnderworldTeleport");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Misha Underworld Gate Used
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarMishaUnderworldGateUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_mishaUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(libGame_gv_players[libGame_gf_MapHauntedMinesPlayerChangesPlanePlayer()].lv_heroUnit) == "HeroRexxar") || (UnitGetType(libGame_gv_players[libGame_gf_MapHauntedMinesPlayerChangesPlanePlayer()].lv_activeVehicle) == "HeroRexxar")))) {
            return false;
        }

        if (!((TimerGetElapsed(libGame_gv_gameTimer) > 120.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = libGame_gf_MapHauntedMinesPlayerUsesGatePlayer();
    UnitGroupLoopBegin(libGame_gv_players[lv_player].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "RexxarMisha")) {
            lv_mishaUnit = UnitGroupLoopCurrent();
            if ((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroRexxar")) {
                UnitSetPosition(lv_mishaUnit, UnitGetPosition(libGame_gv_players[lv_player].lv_heroUnit), false);
            }
            else {
                UnitSetPosition(lv_mishaUnit, UnitGetPosition(libGame_gv_players[lv_player].lv_activeVehicle), false);
            }
            UnitBehaviorRemove(lv_mishaUnit, "RexxarMishaManualOrder", 1);
            UnitBehaviorRemove(lv_mishaUnit, "RexxarMishaLeashTimeToLeash", 1);
            UnitBehaviorRemove(lv_mishaUnit, "RexxarMishaHold", 1);
            UnitIssueOrder(lv_mishaUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            UnitCreateEffectUnit(lv_mishaUnit, "RexxarMishaCommandRemoveTargetPriorityBuffSearch", lv_mishaUnit);
            UnitCreateEffectUnit(lv_mishaUnit, "RexxarMishaHoldIssueStopOrder", lv_mishaUnit);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarMishaUnderworldGateUsed_Init () {
    libGDHL_gt_HeroRexxarMishaUnderworldGateUsed = TriggerCreate("libGDHL_gt_HeroRexxarMishaUnderworldGateUsed_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarMishaUnderworldGateUsed, false);
    libGame_gf_MapHauntedMinesPlayerChangesPlane(libGDHL_gt_HeroRexxarMishaUnderworldGateUsed);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Misha Vehicle Used
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarMishaVehicleUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))].lv_heroUnit) == "HeroRexxar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    libGDHL_gf_HeroRexxarMishaFixateOff(lv_player);
    UnitGroupLoopBegin(libGame_gv_players[lv_player].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "RexxarMisha")) {
            while (((UnitFilterMatch(UnitGroupLoopCurrent(), UnitGetOwner(UnitGroupLoopCurrent()), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)))) != true) || (UnitHasBehavior2(UnitGroupLoopCurrent(), "GorgePostGorgeTargetCleanup") == true))) {
                Wait(0.0625, c_timeGame);
                if ((libGame_gv_players[EventPlayerEffectUsedUnitOwner(c_effectPlayerOrigin)].lv_activeVehicle == null)) {
                    return true;
                }

            }
            UnitCreateEffectUnit(UnitGroupLoopCurrent(), "RexxarMishaCommandRemoveTargetPriorityBuffSearch", UnitGroupLoopCurrent());
            UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(libGame_gv_players[lv_player].lv_heroUnit), false);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "UsingVehicle", UnitGroupLoopCurrent(), 1);
            break;
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarMishaVehicleUsed_Init () {
    libGDHL_gt_HeroRexxarMishaVehicleUsed = TriggerCreate("libGDHL_gt_HeroRexxarMishaVehicleUsed_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarMishaVehicleUsed, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRexxarMishaVehicleUsed, c_playerAny, "UseVehicleCastCompleteSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Misha Vehicle Done
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarMishaVehicleDone_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)].lv_heroUnit) == "HeroRexxar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    if ((lv_player > 0) && (lv_player <= libCore_gv_bALMaxPlayers)) {
        Wait(0.0625, c_timeGame);
        UnitSetPosition(libGDHL_gv_rexxarMishaUnit[lv_player], UnitGetPosition(libGame_gv_players[lv_player].lv_heroUnit), false);
        UnitBehaviorRemove(libGDHL_gv_rexxarMishaUnit[lv_player], "UsingVehicle", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarMishaVehicleDone_Init () {
    libGDHL_gt_HeroRexxarMishaVehicleDone = TriggerCreate("libGDHL_gt_HeroRexxarMishaVehicleDone_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarMishaVehicleDone, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRexxarMishaVehicleDone, c_playerAny, "UseVehicleFinalDummy");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRexxarMishaVehicleDone, c_playerAny, "LeaveVehicleSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Stuff Misha Into Transport
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarStuffMishaIntoTransport_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(libGame_gv_players[libGame_gf_HeroEnteredTransportPlayerEntering()].lv_heroUnit) == "HeroRexxar") || (UnitGetType(libGame_gv_players[libGame_gf_HeroEnteredTransportPlayerEntering()].lv_activeVehicle) == "HeroRexxar")))) {
            return false;
        }

        if (!((libGDHL_gv_rexxarMishaUnit[libGame_gf_HeroEnteredTransportPlayerEntering()] != null))) {
            return false;
        }

        if (!((UnitIsAlive(libGDHL_gv_rexxarMishaUnit[libGame_gf_HeroEnteredTransportPlayerEntering()]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(libGame_gv_players[libGame_gf_HeroEnteredTransportPlayerEntering()].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "RexxarMisha")) {
            while (((UnitFilterMatch(UnitGroupLoopCurrent(), UnitGetOwner(UnitGroupLoopCurrent()), UnitFilter(0, (1 << (c_targetFilterStasis - 32)), 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) || (UnitFilterMatch(UnitGroupLoopCurrent(), UnitGetOwner(UnitGroupLoopCurrent()), UnitFilter((1 << c_targetFilterMissile), 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) || (UnitHasBehavior2(UnitGroupLoopCurrent(), "GorgePostGorgeTargetCleanup") == true))) {
                Wait(0.0625, c_timeGame);
            }
            if ((UnitFilterMatch(UnitGroupLoopCurrent(), UnitGetOwner(UnitGroupLoopCurrent()), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) && (((libGame_gv_players[UnitGetOwner(UnitGroupLoopCurrent())].lv_activeVehicle != null) && (libNtve_gf_UnitIsInsideTransport(libGame_gv_players[libGame_gf_HeroEnteredTransportPlayerEntering()].lv_activeVehicle) == true)) || ((libGame_gv_players[UnitGetOwner(UnitGroupLoopCurrent())].lv_activeVehicle == null) && (libNtve_gf_UnitIsInsideTransport(libGame_gv_players[libGame_gf_HeroEnteredTransportPlayerEntering()].lv_heroUnit) == true)))) {
                UnitCreateEffectUnit(UnitGroupLoopCurrent(), "RexxarMishaCommandRemoveTargetPriorityBuffSearch", UnitGroupLoopCurrent());
                UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(libGame_gv_players[libGame_gf_HeroEnteredTransportPlayerEntering()].lv_heroUnit), false);
                UnitBehaviorAdd(UnitGroupLoopCurrent(), "UsingVehicle", UnitGroupLoopCurrent(), 1);
            }

        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarStuffMishaIntoTransport_Init () {
    libGDHL_gt_HeroRexxarStuffMishaIntoTransport = TriggerCreate("libGDHL_gt_HeroRexxarStuffMishaIntoTransport_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarStuffMishaIntoTransport, false);
    libGame_gf_HeroEnteredTransport(libGDHL_gt_HeroRexxarStuffMishaIntoTransport);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Kick Misha Out Of Transport
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarKickMishaOutOfTransport_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(libGame_gv_players[libGame_gf_HeroExitingTransportPlayerExiting()].lv_heroUnit) == "HeroRexxar") || (UnitGetType(libGame_gv_players[libGame_gf_HeroExitingTransportPlayerExiting()].lv_activeVehicle) == "HeroRexxar")))) {
            return false;
        }

        if (!((libGDHL_gv_rexxarMishaUnit[libGame_gf_HeroExitingTransportPlayerExiting()] != null))) {
            return false;
        }

        if (!((UnitIsAlive(libGDHL_gv_rexxarMishaUnit[libGame_gf_HeroExitingTransportPlayerExiting()]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(libGame_gv_players[libGame_gf_HeroExitingTransportPlayerExiting()].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "RexxarMisha") && (UnitHasBehavior2(UnitGroupLoopCurrent(), "UsingVehicle") == true)) {
            Wait(0.0625, c_timeGame);
            UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(libGame_gv_players[libGame_gf_HeroExitingTransportPlayerExiting()].lv_heroUnit), false);
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "UsingVehicle", 1);
        }

    }
    UnitGroupLoopEnd();
    libGame_gv_players[libGame_gf_HeroExitingTransportPlayerExiting()].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[libGame_gf_HeroExitingTransportPlayerExiting()].lv_heroUnit);
    libGame_gv_players[libGame_gf_HeroExitingTransportPlayerExiting()].lv_cameraCurrentTargetGroup = libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[libGame_gf_HeroExitingTransportPlayerExiting()].lv_heroUnit);
    libGame_gf_CameraUpdateCameraForPlayer(libGame_gf_HeroExitingTransportPlayerExiting());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarKickMishaOutOfTransport_Init () {
    libGDHL_gt_HeroRexxarKickMishaOutOfTransport = TriggerCreate("libGDHL_gt_HeroRexxarKickMishaOutOfTransport_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarKickMishaOutOfTransport, false);
    libGame_gf_HeroExitedTransport(libGDHL_gt_HeroRexxarKickMishaOutOfTransport);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Misha Mounted Behavior Disabled
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarMishaMountedBehaviorDisabled_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "RexxarMisha"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "SummonedUnitMountBehaviorSuppressor", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarMishaMountedBehaviorDisabled_Init () {
    libGDHL_gt_HeroRexxarMishaMountedBehaviorDisabled = TriggerCreate("libGDHL_gt_HeroRexxarMishaMountedBehaviorDisabled_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarMishaMountedBehaviorDisabled, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRexxarMishaMountedBehaviorDisabled, null, "SummonedUnitMountBehavior", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Alive Misha Grizzled Fortitude
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarAliveMishaGrizzledFortitude_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[libGame_gf_HeroGainTalentPlayer()].lv_heroUnit) == "HeroRexxar"))) {
            return false;
        }

        if (!((PlayerHasTalent(libGame_gf_HeroGainTalentPlayer(), "RexxarSpiritBondGrizzledFortitude") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(libGame_gv_players[libGame_gf_HeroGainTalentPlayer()].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((UnitGetType(UnitGroupLoopCurrent()) == "RexxarMisha") || (UnitGetType(UnitGroupLoopCurrent()) == "HeroRexxar"))) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "TalentBucketBlockChargedTarget", UnitGroupLoopCurrent(), 1);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarAliveMishaGrizzledFortitude_Init () {
    libGDHL_gt_HeroRexxarAliveMishaGrizzledFortitude = TriggerCreate("libGDHL_gt_HeroRexxarAliveMishaGrizzledFortitude_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarAliveMishaGrizzledFortitude, false);
    libGame_gf_HeroGainTalent(libGDHL_gt_HeroRexxarAliveMishaGrizzledFortitude);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Alive Misha Easy Prey
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarAliveMishaEasyPrey_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[libGame_gf_HeroGainTalentPlayer()].lv_heroUnit) == "HeroRexxar"))) {
            return false;
        }

        if (!((PlayerHasTalent(libGame_gf_HeroGainTalentPlayer(), "RexxarSpiritBondEasyPrey") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(libGame_gv_players[libGame_gf_HeroGainTalentPlayer()].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "RexxarMisha")) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "RexxarMishaEasyPreyDamageReduction", UnitGroupLoopCurrent(), 1);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarAliveMishaEasyPrey_Init () {
    libGDHL_gt_HeroRexxarAliveMishaEasyPrey = TriggerCreate("libGDHL_gt_HeroRexxarAliveMishaEasyPrey_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarAliveMishaEasyPrey, false);
    libGame_gf_HeroGainTalent(libGDHL_gt_HeroRexxarAliveMishaEasyPrey);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Alive Misha Wildfire Bear
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarAliveMishaWildfireBear_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[libGame_gf_HeroGainTalentPlayer()].lv_heroUnit) == "HeroRexxar"))) {
            return false;
        }

        if (!((PlayerHasTalent(libGame_gf_HeroGainTalentPlayer(), "RexxarSpiritBondWildfireBear") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(libGame_gv_players[libGame_gf_HeroGainTalentPlayer()].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "RexxarMisha")) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "RexxarSpiritBondWildfireBear", UnitGroupLoopCurrent(), 1);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarAliveMishaWildfireBear_Init () {
    libGDHL_gt_HeroRexxarAliveMishaWildfireBear = TriggerCreate("libGDHL_gt_HeroRexxarAliveMishaWildfireBear_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarAliveMishaWildfireBear, false);
    libGame_gf_HeroGainTalent(libGDHL_gt_HeroRexxarAliveMishaWildfireBear);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Alive Misha Animal Husbandry
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarAliveMishaAnimalHusbandry_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[libGame_gf_HeroGainTalentPlayer()].lv_heroUnit) == "HeroRexxar"))) {
            return false;
        }

        if (!((PlayerHasTalent(libGame_gf_HeroGainTalentPlayer(), "RexxarAnimalHusbandry") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(libGame_gv_players[libGame_gf_HeroGainTalentPlayer()].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "RexxarMisha")) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "RexxarAnimalHusbandryHealthBuffCarry", UnitGroupLoopCurrent(), 1);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "RexxarAnimalHusbandryTokenCounter", UnitGroupLoopCurrent(), 1);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarAliveMishaAnimalHusbandry_Init () {
    libGDHL_gt_HeroRexxarAliveMishaAnimalHusbandry = TriggerCreate("libGDHL_gt_HeroRexxarAliveMishaAnimalHusbandry_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarAliveMishaAnimalHusbandry, false);
    libGame_gf_HeroGainTalent(libGDHL_gt_HeroRexxarAliveMishaAnimalHusbandry);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Alive Misha Dire Beast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarAliveMishaDireBeast_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[libGame_gf_HeroGainTalentPlayer()].lv_heroUnit) == "HeroRexxar"))) {
            return false;
        }

        if (!((PlayerHasTalent(libGame_gf_HeroGainTalentPlayer(), "RexxarDireBeast") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(libGame_gv_players[libGame_gf_HeroGainTalentPlayer()].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "RexxarMisha")) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "RexxarDireBeastTokenCounter", UnitGroupLoopCurrent(), 1);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarAliveMishaDireBeast_Init () {
    libGDHL_gt_HeroRexxarAliveMishaDireBeast = TriggerCreate("libGDHL_gt_HeroRexxarAliveMishaDireBeast_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarAliveMishaDireBeast, false);
    libGame_gf_HeroGainTalent(libGDHL_gt_HeroRexxarAliveMishaDireBeast);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Alive Misha Primal Intimidation
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarAliveMishaPrimalIntimidation_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroRexxar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "RexxarMisha")) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "TalentImposingPresenceCarry", EventUnit(), 1);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarAliveMishaPrimalIntimidation_Init () {
    libGDHL_gt_HeroRexxarAliveMishaPrimalIntimidation = TriggerCreate("libGDHL_gt_HeroRexxarAliveMishaPrimalIntimidation_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarAliveMishaPrimalIntimidation, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRexxarAliveMishaPrimalIntimidation, null, "TalentImposingPresenceCarry", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Alive Misha Hunter-Gatherer
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarAliveMishaHunterGatherer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) != "RexxarMisha"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(libGame_gv_players[UnitGetOwner(lv_unit)].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) == "RexxarMisha")) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "RexxarHunterGathererMishaTokenCounter", UnitGroupLoopCurrent(), 1);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "RexxarHunterGathererCarryBehavior", UnitGroupLoopCurrent(), 1);
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarAliveMishaHunterGatherer_Init () {
    libGDHL_gt_HeroRexxarAliveMishaHunterGatherer = TriggerCreate("libGDHL_gt_HeroRexxarAliveMishaHunterGatherer_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarAliveMishaHunterGatherer, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRexxarAliveMishaHunterGatherer, null, "RexxarHunterGathererCarryBehavior", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Hunter-Gatherer Controller
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarHunterGathererController_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);

    // Conditions
    if (testConds) {
        if (!((libGDHL_gv_hunterGathererGlobe[lv_player] != lv_unit))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_player, "RexxarHunterGatherer") == true))) {
            return false;
        }

        if (!((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroRexxar"))) {
            return false;
        }

        if (!((UnitBehaviorCount(libGame_gv_players[lv_player].lv_heroUnit, "RexxarHunterGathererQuestCompleteCarry") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_hunterGathererGlobe[lv_player] = lv_unit;
    UnitGroupLoopBegin(libGame_gv_players[lv_player].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitCreateEffectUnit(UnitGroupLoopCurrent(), "RexxarHunterGathererModifyTokenCount", UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarHunterGathererController_Init () {
    libGDHL_gt_HeroRexxarHunterGathererController = TriggerCreate("libGDHL_gt_HeroRexxarHunterGathererController_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarHunterGathererController, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRexxarHunterGathererController, c_playerAny, "RexxarHunterGathererDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Thrill of the Hunt Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarThrilloftheHuntProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == "HeroRexxar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(libGDHL_gv_rexxarMishaUnit[lv_player]) == true)) {
        UnitBehaviorAdd(libGDHL_gv_rexxarMishaUnit[lv_player], "RexxarThrilloftheHuntBuff", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarThrilloftheHuntProc_Init () {
    libGDHL_gt_HeroRexxarThrilloftheHuntProc = TriggerCreate("libGDHL_gt_HeroRexxarThrilloftheHuntProc_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarThrilloftheHuntProc, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRexxarThrilloftheHuntProc, c_playerAny, "RexxarThrilloftheHuntProcSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Hardened Skin
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarHardenedSkin_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == "HeroRexxar"))) {
            return false;
        }

        if (!((UnitIsAlive(libGDHL_gv_rexxarMishaUnit[lv_player]) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(libGDHL_gv_rexxarMishaUnit[lv_player], "RexxarHardenedSkinBuff", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarHardenedSkin_Init () {
    libGDHL_gt_HeroRexxarHardenedSkin = TriggerCreate("libGDHL_gt_HeroRexxarHardenedSkin_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarHardenedSkin, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroRexxarHardenedSkin, c_playerAny, "RexxarHardenedSkinCastSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Bestial Wrath Spirit Bond/Bear Necessities Heal Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarBestialWrathSpiritBondBearNecessitiesHealProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mishaUnit;
    unit lv_damagedUnit;
    int lv_mishaPlayer;
    fixed lv_healAmount;
    fixed lv_spiritBondHealMod;
    fixed lv_bearNecessitiesHealMod;
    fixed lv_bearNecessitiesMendPetHealMod;
    fixed lv_finalHealMod;

    // Variable Initialization
    lv_mishaUnit = EventUnitDamageSourceUnit();
    lv_damagedUnit = EventUnit();
    lv_mishaPlayer = UnitGetOwner(lv_mishaUnit);
    lv_spiritBondHealMod = 0.5;
    lv_bearNecessitiesHealMod = 0.5;
    lv_bearNecessitiesMendPetHealMod = 1.0;

    // Conditions
    if (testConds) {
        if (!((((PlayerHasTalent(lv_mishaPlayer, "RexxarBearNecessitiesCharge") == true) && (UnitFilterMatch(lv_damagedUnit, lv_mishaPlayer, UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) || ((PlayerHasTalent(lv_mishaPlayer, "RexxarSpiritBond") == true) && (UnitBehaviorCount(EventUnitDamageSourceUnit(), "RexxarBestialWrathMishaBehavior") == 1))))) {
            return false;
        }

        if (!((UnitIsAlive(libGame_gv_players[lv_mishaPlayer].lv_heroUnit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerHasTalent(lv_mishaPlayer, "RexxarSpiritBond") == true) && (UnitBehaviorCount(lv_mishaUnit, "RexxarBestialWrathMishaBehavior") == 1)) {
        lv_finalHealMod += lv_spiritBondHealMod;
    }
    if ((PlayerHasTalent(lv_mishaPlayer, "RexxarBearNecessitiesCharge") == true) && (UnitFilterMatch(lv_damagedUnit, lv_mishaPlayer, UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
        if ((UnitBehaviorCount(lv_mishaUnit, "RexxarMendPet") == 1)) {
            lv_finalHealMod += lv_bearNecessitiesMendPetHealMod;
        }
        else {
            lv_finalHealMod += lv_bearNecessitiesHealMod;
        }
    }
    lv_healAmount = (EventUnitDamageAttemptedVitals() * lv_finalHealMod);
    CatalogFieldValueSet(c_gameCatalogEffect, "RexxarMishaBasicAttackRexxarHealingCreateHealer", "RechargeVitalRate", lv_mishaPlayer, FixedToString(lv_healAmount, 2));
    UnitCreateEffectUnitWithSource(EventUnitDamageSourceUnit(), "RexxarMishaBasicAttackRexxarHealingCreateHealer", libGame_gv_players[lv_mishaPlayer].lv_heroUnit, c_gameCatalogAbil, "RexxarBestialWrath");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarBestialWrathSpiritBondBearNecessitiesHealProc_Init () {
    libGDHL_gt_HeroRexxarBestialWrathSpiritBondBearNecessitiesHealProc = TriggerCreate("libGDHL_gt_HeroRexxarBestialWrathSpiritBondBearNecessitiesHealProc_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarBestialWrathSpiritBondBearNecessitiesHealProc, false);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroRexxarBestialWrathSpiritBondBearNecessitiesHealProc, null, c_unitDamageTypeAny, c_unitDamageEither, "RexxarMishaWeaponDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Charge Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarChargeCast_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libGDHL_gv_commandMishaTargetPoint[EventPlayer()] != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gf_HeroRexxarMishaFixateOff(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarChargeCast_Init () {
    libGDHL_gt_HeroRexxarChargeCast = TriggerCreate("libGDHL_gt_HeroRexxarChargeCast_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarChargeCast, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroRexxarChargeCast, null, AbilityCommand("RexxarMishaChargeRedirect", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Feign Death Overlay On
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarFeignDeathOverlayOn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventUnit()) == true) && (UnitTestState(EventUnit(), c_unitStateHallucination) == false) && (UnitHasBehavior2(EventUnit(), "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(EventPlayer(), libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI_StasisOverlay.StormCutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarFeignDeathOverlayOn_Init () {
    libGDHL_gt_HeroRexxarFeignDeathOverlayOn = TriggerCreate("libGDHL_gt_HeroRexxarFeignDeathOverlayOn_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarFeignDeathOverlayOn, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRexxarFeignDeathOverlayOn, null, "RexxarFeignDeathInvulnerable", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Rexxar - Feign Death Overlay Off
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroRexxarFeignDeathOverlayOff_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(EventPlayer(), "Cutscenes\\GameUI_StasisOverlay.StormCutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroRexxarFeignDeathOverlayOff_Init () {
    libGDHL_gt_HeroRexxarFeignDeathOverlayOff = TriggerCreate("libGDHL_gt_HeroRexxarFeignDeathOverlayOff_Func");
    TriggerEnable(libGDHL_gt_HeroRexxarFeignDeathOverlayOff, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroRexxarFeignDeathOverlayOff, null, "RexxarFeignDeathInvulnerable", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - SgtHammer - Complete Hearthstone
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSgtHammerCompleteHearthstone_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroSgtHammer"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "SgtHammerHearthed", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSgtHammerCompleteHearthstone_Init () {
    libGDHL_gt_HeroSgtHammerCompleteHearthstone = TriggerCreate("libGDHL_gt_HeroSgtHammerCompleteHearthstone_Func");
    TriggerEnable(libGDHL_gt_HeroSgtHammerCompleteHearthstone, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroSgtHammerCompleteHearthstone, null, AbilityCommand("PortBackToBase", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroSgtHammerCompleteHearthstone, null, AbilityCommand("PortBackToBase", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - SgtHammer - Siege Mode Update
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSgtHammerSiegeModeUpdate_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) != ""))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!(((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate) || (EventUnitBehaviorChange() == c_unitBehaviorChangeDeactivate)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UIUpdateEventPlayerStatsChange(UnitGetOwner(EventUnit()));
    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeDeactivate)) {
        UnitAbilityReset(EventUnit(), AbilityCommand("SgtHammerSiegeMode", 0), c_spendLocationAll);
        UnitAbilitySpendExplicit(EventUnit(), AbilityCommand("SgtHammerSiegeMode", 0), c_spendLocationAll, 0.0, 1.0, 1.0, 1.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSgtHammerSiegeModeUpdate_Init () {
    libGDHL_gt_HeroSgtHammerSiegeModeUpdate = TriggerCreate("libGDHL_gt_HeroSgtHammerSiegeModeUpdate_Func");
    TriggerEnable(libGDHL_gt_HeroSgtHammerSiegeModeUpdate, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroSgtHammerSiegeModeUpdate, null, "SiegeMode", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - SgtHammer - Blunt Force Gun - Prep Start
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSgtHammerBluntForceGunPrepStart_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_casterPoint;
    point lv_targetPoint;

    // Variable Initialization
    lv_casterPoint = UnitGetPosition(EventUnit());
    lv_targetPoint = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(EventUnit(), "SgtHammerModifyUnitTankTurret", EventUnitTargetPoint());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSgtHammerBluntForceGunPrepStart_Init () {
    libGDHL_gt_HeroSgtHammerBluntForceGunPrepStart = TriggerCreate("libGDHL_gt_HeroSgtHammerBluntForceGunPrepStart_Func");
    TriggerEnable(libGDHL_gt_HeroSgtHammerBluntForceGunPrepStart, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroSgtHammerBluntForceGunPrepStart, null, AbilityCommand("SgtHammerBluntForceGun", 0), c_abilEffectStagePrep, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - SgtHammer - Blunt Force Gun - Target Calculation
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSgtHammerBluntForceGunTargetCalculation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_casterPoint;
    unit lv_sgtHammerCasterUnit;
    int lv_sgtHammerCasterPlayer;
    point lv_targetPoint;
    fixed lv_targetAngle;
    point lv_abilityTargetPoint;
    point lv_originTargetPoint;
    fixed lv_yPointOffset;
    fixed lv_xPointOffsetDistance;
    fixed lv_xofFoundPoint;
    fixed lv_yofFoundPoint;
    fixed lv_yTriangleOriginal;
    fixed lv_yTriangleNew;
    fixed lv_xTriangleOriginal;
    fixed lv_xTriangleNew;
    int lv_ping;
    fixed lv_distanceBetweenPoints;
    fixed lv_distanceBetweenPointsIncrement;
    fixed lv_pingDistance;
    int lv_pingLoop;
    int lv_pingIncrement;
    int lv_pingPlayer;

    // Variable Initialization
    lv_casterPoint = UnitGetPosition(EventUnit());
    lv_sgtHammerCasterUnit = EventUnit();
    lv_sgtHammerCasterPlayer = EventPlayer();
    lv_targetPoint = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    PathDestroy(libGDHL_gv_heroSgtHammerPathDisplay[lv_sgtHammerCasterPlayer]);
    PathDestroy(libGDHL_gv_heroSgtHammerPathDisplayEnemies[lv_sgtHammerCasterPlayer]);
    if (((libMapM_gf_MapMechanicExistsOnMap(libMapM_gv_mMUnderworldMechanicName_C) == true) || (libMapM_gf_MapMechanicExistsOnMap("HauntedMinesRework") == true))) {
        if ((libNtve_gf_UnitInRegion(libGame_gv_players[lv_sgtHammerCasterPlayer].lv_heroUnit, RegionFromName("Underworld Below")) == true)) {
            lv_abilityTargetPoint = libGDHL_gf_TargetCalculation(lv_targetPoint, lv_casterPoint, RegionEntireMap());
            if ((UnitGetType(lv_sgtHammerCasterUnit) != "SgtHammerBluntForceGunInvisibleOrbitalDummy")) {
                libGDHL_gv_heroSgtHammerOrbitalBFGTargetPoint[lv_sgtHammerCasterPlayer] = lv_abilityTargetPoint;
            }

            lv_targetAngle = AngleBetweenPoints(lv_casterPoint, lv_abilityTargetPoint);
            if ((PointGetY(lv_abilityTargetPoint) >= 130.0)) {
                lv_xofFoundPoint = PointGetX(lv_abilityTargetPoint);
                lv_yofFoundPoint = PointGetY(lv_abilityTargetPoint);
                if ((PointGetX(lv_abilityTargetPoint) > PointGetX(lv_casterPoint))) {
                    lv_yTriangleOriginal = (PointGetY(lv_casterPoint) - lv_yofFoundPoint);
                    lv_xTriangleOriginal = (PointGetX(lv_casterPoint) - lv_xofFoundPoint);
                    lv_yPointOffset = (130.0 - lv_yofFoundPoint);
                    lv_yTriangleNew = (PointGetY(lv_casterPoint) - 130.0);
                    if ((lv_yTriangleOriginal != 0.0)) {
                        lv_xTriangleNew = ((lv_yTriangleNew/lv_yTriangleOriginal) * lv_xTriangleOriginal);
                    }

                    lv_xPointOffsetDistance = (lv_xTriangleOriginal - lv_xTriangleNew);
                    lv_abilityTargetPoint = PointWithOffset(lv_abilityTargetPoint, lv_xPointOffsetDistance, lv_yPointOffset);
                }
                else {
                    if ((PointGetX(lv_abilityTargetPoint) < PointGetX(lv_casterPoint))) {
                        lv_yTriangleOriginal = (PointGetY(lv_casterPoint) - lv_yofFoundPoint);
                        lv_xTriangleOriginal = (lv_xofFoundPoint - PointGetX(lv_casterPoint));
                        lv_yPointOffset = (130.0 - lv_yofFoundPoint);
                        lv_yTriangleNew = (PointGetY(lv_casterPoint) - 130.0);
                        if ((lv_yTriangleOriginal != 0.0)) {
                            lv_xTriangleNew = ((lv_yTriangleNew/lv_yTriangleOriginal) * lv_xTriangleOriginal);
                        }

                        lv_xPointOffsetDistance = (lv_xTriangleOriginal - lv_xTriangleNew);
                        lv_xPointOffsetDistance = (-1.0 * lv_xPointOffsetDistance);
                        lv_abilityTargetPoint = PointWithOffset(lv_abilityTargetPoint, lv_xPointOffsetDistance, lv_yPointOffset);
                    }

                }
            }

            lv_distanceBetweenPoints = DistanceBetweenPoints(lv_casterPoint, lv_abilityTargetPoint);
            if ((lv_abilityTargetPoint != null)) {
                lv_originTargetPoint = libGDHL_gf_TargetCalculation(PointWithOffsetPolar(lv_casterPoint, 1.0, (lv_targetAngle + 180)), lv_casterPoint, RegionFromName("Underworld Above"));
                if ((PointGetY(lv_originTargetPoint) >= 130.0)) {
                    lv_xofFoundPoint = PointGetX(lv_originTargetPoint);
                    lv_yofFoundPoint = PointGetY(lv_originTargetPoint);
                    if ((PointGetX(lv_originTargetPoint) > PointGetX(lv_casterPoint))) {
                        lv_yTriangleOriginal = (PointGetY(lv_casterPoint) - lv_yofFoundPoint);
                        lv_xTriangleOriginal = (PointGetX(lv_casterPoint) - lv_xofFoundPoint);
                        lv_yPointOffset = (130.0 - lv_yofFoundPoint);
                        lv_yTriangleNew = (PointGetY(lv_casterPoint) - 130.0);
                        if ((lv_yTriangleOriginal != 0.0)) {
                            lv_xTriangleNew = ((lv_yTriangleNew/lv_yTriangleOriginal) * lv_xTriangleOriginal);
                        }

                        lv_xPointOffsetDistance = (lv_xTriangleOriginal - lv_xTriangleNew);
                        lv_originTargetPoint = PointWithOffset(lv_originTargetPoint, lv_xPointOffsetDistance, lv_yPointOffset);
                    }
                    else {
                        if ((PointGetX(lv_originTargetPoint) < PointGetX(lv_casterPoint))) {
                            lv_yTriangleOriginal = (PointGetY(lv_casterPoint) - lv_yofFoundPoint);
                            lv_xTriangleOriginal = (lv_xofFoundPoint - PointGetX(lv_casterPoint));
                            lv_yPointOffset = (130.0 - lv_yofFoundPoint);
                            lv_yTriangleNew = (PointGetY(lv_casterPoint) - 130.0);
                            if ((lv_yTriangleOriginal != 0.0)) {
                                lv_xTriangleNew = ((lv_yTriangleNew/lv_yTriangleOriginal) * lv_xTriangleOriginal);
                            }

                            lv_xPointOffsetDistance = (lv_xTriangleOriginal - lv_xTriangleNew);
                            lv_xPointOffsetDistance = (-1.0 * lv_xPointOffsetDistance);
                            lv_originTargetPoint = PointWithOffset(lv_originTargetPoint, lv_xPointOffsetDistance, lv_yPointOffset);
                        }
                        else {
                            if ((PointGetX(lv_originTargetPoint) == PointGetX(lv_casterPoint))) {
                                lv_originTargetPoint = PointWithOffset(lv_originTargetPoint, 0.0, lv_yPointOffset);
                            }

                        }
                    }
                }

                if ((UnitGetType(lv_sgtHammerCasterUnit) != "SgtHammerBluntForceGunInvisibleOrbitalDummy")) {
                    libGDHL_gv_heroSgtHammerOrbitalBFGOriginPoint[lv_sgtHammerCasterPlayer] = lv_originTargetPoint;
                }

                if ((UnitGetType(lv_sgtHammerCasterUnit) == "SgtHammerBluntForceGunInvisibleOrbitalDummy")) {
                    UnitCreateEffectPointWithSource(lv_sgtHammerCasterUnit, "BluntForceGunLaunchMissileOrbital", lv_abilityTargetPoint, c_gameCatalogAbil, "SgtHammerBluntForceGun");
                }
                else {
                    UnitCreateEffectPointWithSource(lv_sgtHammerCasterUnit, "BluntForceGunLaunchMissile", lv_abilityTargetPoint, c_gameCatalogAbil, "SgtHammerBluntForceGun");
                }
            }

        }
        else {
            lv_abilityTargetPoint = libGDHL_gf_TargetCalculation(lv_targetPoint, lv_casterPoint, RegionFromName("Underworld Above"));
            if ((UnitGetType(lv_sgtHammerCasterUnit) != "SgtHammerBluntForceGunInvisibleOrbitalDummy")) {
                libGDHL_gv_heroSgtHammerOrbitalBFGTargetPoint[lv_sgtHammerCasterPlayer] = lv_abilityTargetPoint;
            }

            lv_targetAngle = AngleBetweenPoints(lv_casterPoint, lv_abilityTargetPoint);
            if ((PointGetY(lv_abilityTargetPoint) <= 130.0)) {
                lv_xofFoundPoint = PointGetX(lv_abilityTargetPoint);
                lv_yofFoundPoint = PointGetY(lv_abilityTargetPoint);
                if ((PointGetX(lv_abilityTargetPoint) > PointGetX(lv_casterPoint))) {
                    lv_yTriangleOriginal = (PointGetY(lv_casterPoint) - lv_yofFoundPoint);
                    lv_xTriangleOriginal = (PointGetX(lv_casterPoint) - lv_xofFoundPoint);
                    lv_yPointOffset = (130.0 - lv_yofFoundPoint);
                    lv_yTriangleNew = (PointGetY(lv_casterPoint) - 130.0);
                    if ((lv_yTriangleOriginal != 0.0)) {
                        lv_xTriangleNew = ((lv_yTriangleNew/lv_yTriangleOriginal) * lv_xTriangleOriginal);
                    }

                    lv_xPointOffsetDistance = (lv_xTriangleOriginal - lv_xTriangleNew);
                    lv_abilityTargetPoint = PointWithOffset(lv_abilityTargetPoint, lv_xPointOffsetDistance, lv_yPointOffset);
                }
                else {
                    if ((PointGetX(lv_abilityTargetPoint) < PointGetX(lv_casterPoint))) {
                        lv_yTriangleOriginal = (PointGetY(lv_casterPoint) - lv_yofFoundPoint);
                        lv_xTriangleOriginal = (lv_xofFoundPoint - PointGetX(lv_casterPoint));
                        lv_yPointOffset = (130.0 - lv_yofFoundPoint);
                        lv_yTriangleNew = (PointGetY(lv_casterPoint) - 130.0);
                        if ((lv_yTriangleOriginal != 0.0)) {
                            lv_xTriangleNew = ((lv_yTriangleNew/lv_yTriangleOriginal) * lv_xTriangleOriginal);
                        }

                        lv_xPointOffsetDistance = (lv_xTriangleOriginal - lv_xTriangleNew);
                        lv_xPointOffsetDistance = (-1.0 * lv_xPointOffsetDistance);
                        lv_abilityTargetPoint = PointWithOffset(lv_abilityTargetPoint, lv_xPointOffsetDistance, lv_yPointOffset);
                    }

                }
            }

            lv_distanceBetweenPoints = DistanceBetweenPoints(lv_casterPoint, lv_abilityTargetPoint);
            if ((lv_abilityTargetPoint != null)) {
                lv_originTargetPoint = libGDHL_gf_TargetCalculation(PointWithOffsetPolar(lv_casterPoint, 1.0, (lv_targetAngle + 180)), lv_casterPoint, RegionFromName("Underworld Above"));
                if ((PointGetY(lv_originTargetPoint) <= 130.0)) {
                    lv_xofFoundPoint = PointGetX(lv_originTargetPoint);
                    lv_yofFoundPoint = PointGetY(lv_originTargetPoint);
                    if ((PointGetX(lv_originTargetPoint) > PointGetX(lv_casterPoint))) {
                        lv_yTriangleOriginal = (PointGetY(lv_casterPoint) - lv_yofFoundPoint);
                        lv_xTriangleOriginal = (PointGetX(lv_casterPoint) - lv_xofFoundPoint);
                        lv_yPointOffset = (130.0 - lv_yofFoundPoint);
                        lv_yTriangleNew = (PointGetY(lv_casterPoint) - 130.0);
                        if ((lv_yTriangleOriginal != 0.0)) {
                            lv_xTriangleNew = ((lv_yTriangleNew/lv_yTriangleOriginal) * lv_xTriangleOriginal);
                        }

                        lv_xPointOffsetDistance = (lv_xTriangleOriginal - lv_xTriangleNew);
                        lv_originTargetPoint = PointWithOffset(lv_originTargetPoint, lv_xPointOffsetDistance, lv_yPointOffset);
                    }
                    else {
                        if ((PointGetX(lv_originTargetPoint) < PointGetX(lv_casterPoint))) {
                            lv_yTriangleOriginal = (PointGetY(lv_casterPoint) - lv_yofFoundPoint);
                            lv_xTriangleOriginal = (lv_xofFoundPoint - PointGetX(lv_casterPoint));
                            lv_yPointOffset = (130.0 - lv_yofFoundPoint);
                            lv_yTriangleNew = (PointGetY(lv_casterPoint) - 130.0);
                            if ((lv_yTriangleOriginal != 0.0)) {
                                lv_xTriangleNew = ((lv_yTriangleNew/lv_yTriangleOriginal) * lv_xTriangleOriginal);
                            }

                            lv_xPointOffsetDistance = (lv_xTriangleOriginal - lv_xTriangleNew);
                            lv_xPointOffsetDistance = (-1.0 * lv_xPointOffsetDistance);
                            lv_originTargetPoint = PointWithOffset(lv_originTargetPoint, lv_xPointOffsetDistance, lv_yPointOffset);
                        }
                        else {
                            if ((PointGetX(lv_originTargetPoint) == PointGetX(lv_casterPoint))) {
                                lv_originTargetPoint = PointWithOffset(lv_originTargetPoint, 0.0, lv_yPointOffset);
                            }

                        }
                    }
                }

                if ((UnitGetType(lv_sgtHammerCasterUnit) != "SgtHammerBluntForceGunInvisibleOrbitalDummy")) {
                    libGDHL_gv_heroSgtHammerOrbitalBFGOriginPoint[lv_sgtHammerCasterPlayer] = lv_originTargetPoint;
                }

                if ((UnitGetType(lv_sgtHammerCasterUnit) == "SgtHammerBluntForceGunInvisibleOrbitalDummy")) {
                    UnitCreateEffectPointWithSource(lv_sgtHammerCasterUnit, "BluntForceGunLaunchMissileOrbital", lv_abilityTargetPoint, c_gameCatalogAbil, "SgtHammerBluntForceGun");
                }
                else {
                    UnitCreateEffectPointWithSource(lv_sgtHammerCasterUnit, "BluntForceGunLaunchMissile", lv_abilityTargetPoint, c_gameCatalogAbil, "SgtHammerBluntForceGun");
                }
            }

        }
    }
    else {
        lv_abilityTargetPoint = libGDHL_gf_TargetCalculation(lv_targetPoint, lv_casterPoint, RegionPlayableMap());
        if ((UnitGetType(lv_sgtHammerCasterUnit) != "SgtHammerBluntForceGunInvisibleOrbitalDummy")) {
            libGDHL_gv_heroSgtHammerOrbitalBFGTargetPoint[lv_sgtHammerCasterPlayer] = lv_abilityTargetPoint;
        }

        lv_targetAngle = AngleBetweenPoints(lv_casterPoint, lv_targetPoint);
        if ((lv_abilityTargetPoint != null)) {
            if ((UnitGetType(lv_sgtHammerCasterUnit) == "SgtHammerBluntForceGunInvisibleOrbitalDummy")) {
                UnitCreateEffectPointWithSource(lv_sgtHammerCasterUnit, "BluntForceGunLaunchMissileOrbital", lv_abilityTargetPoint, c_gameCatalogAbil, "SgtHammerBluntForceGun");
            }
            else {
                UnitCreateEffectPointWithSource(lv_sgtHammerCasterUnit, "BluntForceGunLaunchMissile", lv_abilityTargetPoint, c_gameCatalogAbil, "SgtHammerBluntForceGun");
            }
            lv_originTargetPoint = libGDHL_gf_TargetCalculation(PointWithOffsetPolar(lv_casterPoint, 1.0, (lv_targetAngle + 180)), lv_casterPoint, RegionPlayableMap());
            if ((UnitGetType(lv_sgtHammerCasterUnit) != "SgtHammerBluntForceGunInvisibleOrbitalDummy")) {
                libGDHL_gv_heroSgtHammerOrbitalBFGOriginPoint[lv_sgtHammerCasterPlayer] = lv_originTargetPoint;
            }

        }

    }
    if ((UnitGetType(lv_sgtHammerCasterUnit) == "SgtHammerBluntForceGunInvisibleOrbitalDummy")) {
        if ((PlayerGroupHasPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, lv_sgtHammerCasterPlayer) == true)) {
            PathCreateForUnit(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), lv_sgtHammerCasterUnit);
            PathSetLineTexture(PathLastCreated(), c_pathLocationMinimap, "Assets\\Textures\\storm_waypointline.dds");
            libGDHL_gv_heroSgtHammerPathDisplay[lv_sgtHammerCasterPlayer] = PathLastCreated();
            PathSetColor(libGDHL_gv_heroSgtHammerPathDisplay[lv_sgtHammerCasterPlayer], c_pathLocationMinimap, Color(0.00, 0.00, 100.00));
            PathSetDestinationPoint(libGDHL_gv_heroSgtHammerPathDisplay[lv_sgtHammerCasterPlayer], lv_abilityTargetPoint);
            PathSetVisible(libGDHL_gv_heroSgtHammerPathDisplay[lv_sgtHammerCasterPlayer], c_pathLocationWorld, false);
            if ((PlayerGroupCount(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers) > 0)) {
                PathCreateForUnit(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), lv_sgtHammerCasterUnit);
                PathSetLineTexture(PathLastCreated(), c_pathLocationMinimap, "Assets\\Textures\\storm_waypointline.dds");
                libGDHL_gv_heroSgtHammerPathDisplayEnemies[lv_sgtHammerCasterPlayer] = PathLastCreated();
                PathSetColor(libGDHL_gv_heroSgtHammerPathDisplayEnemies[lv_sgtHammerCasterPlayer], c_pathLocationMinimap, Color(100.00, 0.00, 0.00));
                PathSetDestinationPoint(libGDHL_gv_heroSgtHammerPathDisplayEnemies[lv_sgtHammerCasterPlayer], lv_abilityTargetPoint);
                PathSetVisible(libGDHL_gv_heroSgtHammerPathDisplayEnemies[lv_sgtHammerCasterPlayer], c_pathLocationWorld, false);
            }

        }
        else {
            PathCreateForUnit(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), lv_sgtHammerCasterUnit);
            PathSetLineTexture(PathLastCreated(), c_pathLocationMinimap, "Assets\\Textures\\storm_waypointline.dds");
            libGDHL_gv_heroSgtHammerPathDisplay[lv_sgtHammerCasterPlayer] = PathLastCreated();
            PathSetColor(libGDHL_gv_heroSgtHammerPathDisplay[lv_sgtHammerCasterPlayer], c_pathLocationMinimap, Color(0.00, 0.00, 100.00));
            PathSetDestinationPoint(libGDHL_gv_heroSgtHammerPathDisplay[lv_sgtHammerCasterPlayer], lv_abilityTargetPoint);
            PathSetVisible(libGDHL_gv_heroSgtHammerPathDisplay[lv_sgtHammerCasterPlayer], c_pathLocationWorld, false);
            if ((PlayerGroupCount(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers) > 0)) {
                PathCreateForUnit(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), lv_sgtHammerCasterUnit);
                PathSetLineTexture(PathLastCreated(), c_pathLocationMinimap, "Assets\\Textures\\storm_waypointline.dds");
                libGDHL_gv_heroSgtHammerPathDisplayEnemies[lv_sgtHammerCasterPlayer] = PathLastCreated();
                PathSetColor(libGDHL_gv_heroSgtHammerPathDisplayEnemies[lv_sgtHammerCasterPlayer], c_pathLocationMinimap, Color(100.00, 0.00, 0.00));
                PathSetDestinationPoint(libGDHL_gv_heroSgtHammerPathDisplayEnemies[lv_sgtHammerCasterPlayer], lv_abilityTargetPoint);
                PathSetVisible(libGDHL_gv_heroSgtHammerPathDisplayEnemies[lv_sgtHammerCasterPlayer], c_pathLocationWorld, false);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSgtHammerBluntForceGunTargetCalculation_Init () {
    libGDHL_gt_HeroSgtHammerBluntForceGunTargetCalculation = TriggerCreate("libGDHL_gt_HeroSgtHammerBluntForceGunTargetCalculation_Func");
    TriggerEnable(libGDHL_gt_HeroSgtHammerBluntForceGunTargetCalculation, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroSgtHammerBluntForceGunTargetCalculation, null, AbilityCommand("SgtHammerBluntForceGun", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - SgtHammer - Blunt Force Gun Check For Location
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSgtHammerBluntForceGunCheckForLocation_Func (bool testConds, bool runActions) {
    fixed auto8AB055E4_at;

    // Variable Declarations
    unit lv_missile;
    unit lv_dummy;
    int lv_sgtHammerPlayer;
    bool lv_dummyBoolean;

    // Variable Initialization
    lv_missile = EventUnit();
    lv_sgtHammerPlayer = UnitGetOwner(lv_missile);

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(libGame_gv_players[lv_sgtHammerPlayer].lv_heroUnit, "SgtHammerOrbitalBFGCarryBehavior") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroSgtHammerOrbitalBFGUnit[lv_sgtHammerPlayer] = lv_missile;
    auto8AB055E4_at = 0;
    while (!((UnitIsAlive(lv_missile) == false)) && auto8AB055E4_at <= 30.0) {
        Wait(0.0625, c_timeGame);
        auto8AB055E4_at = auto8AB055E4_at + 0.0625;
    }
    Wait(5.0, c_timeGame);
    if ((libGDHL_gv_heroSgtHammerOrbitalBFGUnit[lv_sgtHammerPlayer] == lv_missile)) {
        libNtve_gf_UnitCreateFacingPoint(1, "SgtHammerBluntForceGunInvisibleOrbitalDummy", c_unitCreateIgnorePlacement, lv_sgtHammerPlayer, libGDHL_gv_heroSgtHammerOrbitalBFGOriginPoint[lv_sgtHammerPlayer], libGDHL_gv_heroSgtHammerOrbitalBFGTargetPoint[lv_sgtHammerPlayer]);
        lv_dummy = UnitLastCreated();
        UnitIssueOrder(lv_dummy, OrderTargetingPoint(AbilityCommand("SgtHammerBluntForceGun", 0), libGDHL_gv_heroSgtHammerOrbitalBFGTargetPoint[lv_sgtHammerPlayer]), c_orderQueueReplace);
        Wait(45.0, c_timeGame);
        UnitRemove(lv_dummy);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSgtHammerBluntForceGunCheckForLocation_Init () {
    libGDHL_gt_HeroSgtHammerBluntForceGunCheckForLocation = TriggerCreate("libGDHL_gt_HeroSgtHammerBluntForceGunCheckForLocation_Func");
    TriggerEnable(libGDHL_gt_HeroSgtHammerBluntForceGunCheckForLocation, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroSgtHammerBluntForceGunCheckForLocation, null, "BluntForceGunMissileScan", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - SgtHammer - Concussive Blast - Cancel
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSgtHammerConcussiveBlastCancel_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_soundPoint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("SgtHammerConcussiveBlastScrap", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("SgtHammerConcussiveBlastScrapCenter", EventPlayer(), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitKill(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSgtHammerConcussiveBlastCancel_Init () {
    libGDHL_gt_HeroSgtHammerConcussiveBlastCancel = TriggerCreate("libGDHL_gt_HeroSgtHammerConcussiveBlastCancel_Func");
    TriggerEnable(libGDHL_gt_HeroSgtHammerConcussiveBlastCancel, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroSgtHammerConcussiveBlastCancel, c_playerAny, "ConcussiveBlastScrapCancelDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - SgtHammer - Resistant Talent Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSgtHammerResistantTalentProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_player, "SgtHammerResistant") == true))) {
            return false;
        }

        if (!((UnitGetType(lv_unit) == "HeroSgtHammer"))) {
            return false;
        }

        if (!((UnitHasBehavior2(lv_unit, "SiegeMode") == true))) {
            return false;
        }

        if (!((UnitHasBehaviorWithFlag(lv_unit, c_unitBehaviorFlagUser1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnitWithSource(lv_unit, "SgtHammerResistantApply50ResistentBuff", lv_unit, c_gameCatalogAbil, "SgtHammerSiegeMode");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSgtHammerResistantTalentProc_Init () {
    libGDHL_gt_HeroSgtHammerResistantTalentProc = TriggerCreate("libGDHL_gt_HeroSgtHammerResistantTalentProc_Func");
    TriggerEnable(libGDHL_gt_HeroSgtHammerResistantTalentProc, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroSgtHammerResistantTalentProc, null, c_behaviorCategoryStun, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroSgtHammerResistantTalentProc, null, c_behaviorCategoryStun, c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroSgtHammerResistantTalentProc, null, c_behaviorCategoryUser5, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroSgtHammerResistantTalentProc, null, c_behaviorCategoryUser5, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Stitches - Hungry for More Talent Regen Globe Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroStitchesHungryforMoreTalentRegenGlobeProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((lv_player > 0))) {
            return false;
        }

        if (!((lv_player <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_player, "StitchesHungryforMore") == true))) {
            return false;
        }

        if (!((UnitGetTokenCount(UnitLastCreated(), CatalogFieldValueGet(c_gameCatalogBehavior, "StitchesHungryForMoreQuestToken", "TokenId", 0)) < CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "StitchesHungryForMoreQuestToken", "Max", 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_unit, "StitchesHungryForMoreIncrementQuestToken", lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroStitchesHungryforMoreTalentRegenGlobeProc_Init () {
    libGDHL_gt_HeroStitchesHungryforMoreTalentRegenGlobeProc = TriggerCreate("libGDHL_gt_HeroStitchesHungryforMoreTalentRegenGlobeProc_Func");
    TriggerEnable(libGDHL_gt_HeroStitchesHungryforMoreTalentRegenGlobeProc, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroStitchesHungryforMoreTalentRegenGlobeProc, c_playerAny, "RegenGlobeImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Stitches - Devour Last Bite Mastery Special Death State
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroStitchesDevourLastBiteMasterySpecialDeathState_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_stitches;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(libGame_gf_HeroEntersSpecialDeathStateHero(), "StitchesDevourLastBite") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_stitches = UnitBehaviorEffectUnit(libGame_gf_HeroEntersSpecialDeathStateHero(), "StitchesDevourLastBite", c_effectUnitCaster, 0);
    UnitBehaviorAdd(lv_stitches, "StitchesDevourLastBiteDelay", lv_stitches, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroStitchesDevourLastBiteMasterySpecialDeathState_Init () {
    libGDHL_gt_HeroStitchesDevourLastBiteMasterySpecialDeathState = TriggerCreate("libGDHL_gt_HeroStitchesDevourLastBiteMasterySpecialDeathState_Func");
    TriggerEnable(libGDHL_gt_HeroStitchesDevourLastBiteMasterySpecialDeathState, false);
    libGame_gf_HeroEntersSpecialDeathState(libGDHL_gt_HeroStitchesDevourLastBiteMasterySpecialDeathState);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Stitches - Retchling Spawned
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroStitchesRetchlingSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_summonedUnit;
    int lv_ownerPlayer;

    // Variable Initialization
    lv_summonedUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_ownerPlayer = UnitGetOwner(lv_summonedUnit);

    // Conditions
    if (testConds) {
        if (!((lv_ownerPlayer > 0))) {
            return false;
        }

        if (!((lv_ownerPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libGame_gv_players[lv_ownerPlayer].lv_summonedUnitGroup, lv_summonedUnit);
    libAIAI_gf_SummonedAIInitialAttackLogic(true, lv_summonedUnit, libGame_gv_players[lv_ownerPlayer].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroStitchesRetchlingSpawned_Init () {
    libGDHL_gt_HeroStitchesRetchlingSpawned = TriggerCreate("libGDHL_gt_HeroStitchesRetchlingSpawned_Func");
    TriggerEnable(libGDHL_gt_HeroStitchesRetchlingSpawned, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroStitchesRetchlingSpawned, c_playerAny, "DevourRetchlingTimedLife");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Stitches - Retchling Vile Gas Restorative Fumes
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroStitchesRetchlingVileGasRestorativeFumes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_casterUnit;
    int lv_ownerPlayer;
    unit lv_itUnit;

    // Variable Initialization
    lv_casterUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_ownerPlayer = UnitGetOwner(lv_casterUnit);

    // Conditions
    if (testConds) {
        if (!((lv_ownerPlayer > 0))) {
            return false;
        }

        if (!((lv_ownerPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[lv_ownerPlayer].lv_heroUnit, "StitchesVileGasRestorativeFumesTalentCreateHealer", libGame_gv_players[lv_ownerPlayer].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroStitchesRetchlingVileGasRestorativeFumes_Init () {
    libGDHL_gt_HeroStitchesRetchlingVileGasRestorativeFumes = TriggerCreate("libGDHL_gt_HeroStitchesRetchlingVileGasRestorativeFumes_Func");
    TriggerEnable(libGDHL_gt_HeroStitchesRetchlingVileGasRestorativeFumes, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroStitchesRetchlingVileGasRestorativeFumes, c_playerAny, "StitchesVileGasRestorativeFumesRetchlingDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Stitches - Hook - Hook Vision
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroStitchesHookHookVision_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_stitches;
    point lv_effectPoint;
    int lv_stitchesTeam;
    int lv_enemyTeam;

    // Variable Initialization
    lv_stitches = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_effectPoint = EventPlayerEffectUsedPoint(c_effectLocationSourcePoint);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_stitchesTeam = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_stitches));
    if ((lv_stitchesTeam == 1)) {
        lv_enemyTeam = libCore_gv_cOMPUTER_TeamChaos;
    }
    else {
        lv_enemyTeam = libCore_gv_cOMPUTER_TeamOrder;
    }
    if ((VisIsVisibleForPlayer(lv_enemyTeam, lv_effectPoint) == true)) {
        VisRevealArea(lv_enemyTeam, RegionCircle(UnitGetPosition(lv_stitches), 0.5), 0.25, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroStitchesHookHookVision_Init () {
    libGDHL_gt_HeroStitchesHookHookVision = TriggerCreate("libGDHL_gt_HeroStitchesHookHookVision_Func");
    TriggerEnable(libGDHL_gt_HeroStitchesHookHookVision, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroStitchesHookHookVision, c_playerAny, "StitchesHookMissileScan");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Stitches - Hook - Spawn Helping Hand Item
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroStitchesHookSpawnHelpingHandItem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = EventUnitCreatedUnit();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "HeroStitches"))) {
            return false;
        }

        if (!((UnitInventoryCount(lv_unit, c_unitInventoryCountCarried) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitInventoryCreate(lv_unit, "StitchesHookHelpingHandItem");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroStitchesHookSpawnHelpingHandItem_Init () {
    libGDHL_gt_HeroStitchesHookSpawnHelpingHandItem = TriggerCreate("libGDHL_gt_HeroStitchesHookSpawnHelpingHandItem_Func");
    TriggerEnable(libGDHL_gt_HeroStitchesHookSpawnHelpingHandItem, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroStitchesHookSpawnHelpingHandItem, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Stitches - Hook Launch Target Used
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroStitchesHookLaunchTargetUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_StitchesUnit;
    unit lv_targetUnit;
    point lv_currentPositionOfTarget;
    bool lv_notTimeStopped;
    unit lv_hookUnit;

    // Variable Initialization
    lv_StitchesUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_notTimeStopped = true;

    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitHasBehavior2(lv_targetUnit, "Hooked") == true) && (UnitIsAlive(lv_targetUnit) == true) && (UnitIsAlive(lv_StitchesUnit) == true) && (lv_notTimeStopped == true)) {
        if ((UnitHasBehaviorWithFlag(lv_targetUnit, c_behaviorCategoryTimeStop) == true)) {
            if ((UnitHasBehaviorWithFlag(lv_StitchesUnit, c_behaviorCategoryTimeStop) == true)) {
                UnitGroupLoopBegin(UnitGroup("StitchesHookLaunchUnitSecondaryMissile", UnitGetOwner(lv_StitchesUnit), RegionCircle(UnitGetPosition(lv_targetUnit), 5.0), UnitFilter((1 << c_targetFilterMissile), 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy), 0), 0));
                for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                    libNtve_gf_PauseUnit(UnitGroupLoopCurrent(), true);
                    lv_hookUnit = UnitGroupLoopCurrent();
                }
                UnitGroupLoopEnd();
                UnitCreateEffectUnit(lv_StitchesUnit, "StitchesHookPauseHookDummy", lv_StitchesUnit);
                lv_notTimeStopped = false;
            }
            else {
                UnitCreateEffectUnit(lv_StitchesUnit, "TimeStopMissileUnitRedirect", lv_targetUnit);
                lv_notTimeStopped = false;
            }
        }
        else {
            if ((UnitHasBehaviorWithFlag(lv_StitchesUnit, c_behaviorCategoryTimeStop) == true)) {
                UnitCreateEffectUnit(lv_StitchesUnit, "TimeStopMissileUnitRedirect", lv_targetUnit);
                lv_notTimeStopped = false;
            }

            if ((UnitFilterMatch(lv_targetUnit, 1, UnitFilter(0, (1 << (c_targetFilterStasis - 32)), 0, 0)) == true)) {
                UnitCreateEffectUnit(lv_StitchesUnit, "TimeStopMissileUnitRedirect", lv_targetUnit);
                lv_notTimeStopped = false;
            }

        }
        Wait(0.0625, c_timeGame);
    }
    while ((lv_hookUnit != null)) {
        if ((UnitHasBehaviorWithFlag(lv_StitchesUnit, c_behaviorCategoryTimeStop) == false)) {
            libNtve_gf_PauseUnit(lv_hookUnit, false);
            lv_hookUnit = null;
        }
        else {
            Wait(0.0625, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroStitchesHookLaunchTargetUsed_Init () {
    libGDHL_gt_HeroStitchesHookLaunchTargetUsed = TriggerCreate("libGDHL_gt_HeroStitchesHookLaunchTargetUsed_Func");
    TriggerEnable(libGDHL_gt_HeroStitchesHookLaunchTargetUsed, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroStitchesHookLaunchTargetUsed, c_playerAny, "StitchesHookLaunchUnit");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Stitches - Gorge Decreases
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroStitchesGorgeDecreases_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimPlay Spell Spell,D 0 -1.000000 -1.000000 1.000000 AsTimeScale");
    libNtve_gf_SendActorMessageToUnit(EventUnit(), "AnimSetTime Spell 1.000000");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroStitchesGorgeDecreases_Init () {
    libGDHL_gt_HeroStitchesGorgeDecreases = TriggerCreate("libGDHL_gt_HeroStitchesGorgeDecreases_Func");
    TriggerEnable(libGDHL_gt_HeroStitchesGorgeDecreases, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroStitchesGorgeDecreases, null, "StitchesGorgeInitialCasterBehavior", c_unitBehaviorChangeDecrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Stitches - Gorge Activate
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroStitchesGorgeActivate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_eatenUnit;
    unit lv_stitches;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_stitches = UnitBehaviorEffectUnit(EventUnit(), "StitchesGorgeTarget", c_effectUnitCaster, 0);
    lv_eatenUnit = UnitBehaviorEffectUnit(EventUnit(), "StitchesGorgeTarget", c_effectUnitTarget, 0);
    if ((UnitTestState(EventUnit(), c_unitStateHallucination) == false) && (UnitIsAlive(EventUnit()) == true) && (UnitHasBehavior2(EventUnit(), "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(UnitGetOwner(lv_eatenUnit), libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI_GorgeOverlay.StormCutscene", EventUnitBehavior());
    }

    while ((UnitIsAlive(lv_stitches) == true) && (UnitHasBehavior2(lv_eatenUnit, "StitchesGorgeTarget") == true)) {
        if (((libGame_gv_players[UnitGetOwner(lv_stitches)].lv_activeVehicle != null) || (UnitHasBehavior2(lv_stitches, "InCargo") == true))) {
            break;
        }

        if ((UnitHasBehavior2(lv_eatenUnit, "StitchesGorgeDummyBehavior") == true)) {
            UnitSetPosition(lv_eatenUnit, UnitGetPosition(lv_stitches), true);
        }

        Wait(0.0625, c_timeGame);
    }
    if ((UnitIsAlive(lv_eatenUnit) == true)) {
        UnitBehaviorRemove(lv_stitches, "StitchesGorgeInitialCasterBehavior", 1);
        if ((libGame_gv_players[UnitGetOwner(lv_stitches)].lv_activeVehicle != null)) {
            lv_stitches = libGame_gv_players[UnitGetOwner(lv_stitches)].lv_activeVehicle;
        }

        UnitSetPosition(lv_eatenUnit, UnitGetPosition(lv_stitches), false);
        UnitCreateEffectPoint(lv_eatenUnit, "GorgeLaunchTargetOut", PointWithOffsetPolar(UnitGetPosition(lv_stitches), 1.75, UnitGetFacing(lv_stitches)));
        UnitBehaviorRemove(lv_eatenUnit, "StitchesGorgeTarget", 1);
        UnitBehaviorRemove(lv_eatenUnit, "StitchesGorgeTargetTimer", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroStitchesGorgeActivate_Init () {
    libGDHL_gt_HeroStitchesGorgeActivate = TriggerCreate("libGDHL_gt_HeroStitchesGorgeActivate_Func");
    TriggerEnable(libGDHL_gt_HeroStitchesGorgeActivate, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroStitchesGorgeActivate, null, "StitchesGorgeTarget", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Stitches - Gorge Off
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroStitchesGorgeOff_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(UnitGetOwner(EventUnit()), "Cutscenes\\GameUI_GorgeOverlay.StormCutscene", EventUnitBehavior());
    }

    if ((UnitGetType(EventUnit()) != "HeroFalstad") && (UnitGetType(EventUnit()) != "HeroFaerieDragon")) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropHeight, 0.0);
        return true;
    }

    if ((UnitGetType(EventUnit()) == "HeroFaerieDragon")) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropHeight, 1.0);
        return true;
    }

    if ((UnitGetType(EventUnit()) == "HeroFalstad")) {
        UnitSetPropertyFixed(EventUnit(), c_unitPropHeight, 2.0);
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroStitchesGorgeOff_Init () {
    libGDHL_gt_HeroStitchesGorgeOff = TriggerCreate("libGDHL_gt_HeroStitchesGorgeOff_Func");
    TriggerEnable(libGDHL_gt_HeroStitchesGorgeOff, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroStitchesGorgeOff, null, "StitchesGorgeTarget", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Stitches - Flea Bag Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroStitchesFleaBagProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_player, "StitchesFleaBag") == true))) {
            return false;
        }

        if (!((UnitGetType(lv_unit) == "HeroStitches"))) {
            return false;
        }

        if (!((UnitHasBehaviorWithFlag(lv_unit, c_unitBehaviorFlagUser1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_unit, "StitchesFleaBagModifyUnit", lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroStitchesFleaBagProc_Init () {
    libGDHL_gt_HeroStitchesFleaBagProc = TriggerCreate("libGDHL_gt_HeroStitchesFleaBagProc_Func");
    TriggerEnable(libGDHL_gt_HeroStitchesFleaBagProc, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroStitchesFleaBagProc, null, c_behaviorCategoryStun, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroStitchesFleaBagProc, null, c_behaviorCategoryStun, c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroStitchesFleaBagProc, null, c_behaviorCategoryUser5, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroStitchesFleaBagProc, null, c_behaviorCategoryUser5, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Sylvanas - Mind Control - Target Select
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSylvanasMindControlTargetSelect_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_previousCameraUnitGroup;
    int lv_targetPlayer;
    playergroup lv_targetPlayerGroup;
    int lv_casterPlayer;
    unit lv_mindControlledUnit;
    bool lv_mindControlledUnitIsPlayerHero;

    // Variable Initialization
    lv_previousCameraUnitGroup = UnitGroupEmpty();
    lv_targetPlayer = UnitGetOwner(EventUnit());
    lv_targetPlayerGroup = PlayerGroupEmpty();
    lv_casterPlayer = UnitGetOwner(UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, 0));
    lv_mindControlledUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((lv_targetPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((lv_targetPlayer != 0))) {
            return false;
        }

        if (!((lv_casterPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((lv_casterPlayer != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetPlayerGroup = PlayerGroupSingle(lv_targetPlayer);
    if ((lv_mindControlledUnit == libGame_gv_players[lv_targetPlayer].lv_heroUnit)) {
        lv_mindControlledUnitIsPlayerHero = true;
    }

    if ((UnitTestState(lv_mindControlledUnit, c_unitStateHallucination) == true)) {
        libAIAI_gf_MinionAIUnhookUnitFromMinionAI(lv_mindControlledUnit);
    }

    if ((lv_mindControlledUnitIsPlayerHero == true)) {
        UISetCommandAllowed(lv_targetPlayerGroup, c_uiCommandAllowButtons, false);
        UISetCommandAllowed(lv_targetPlayerGroup, c_uiCommandAllowHotkeys, false);
        UISetCommandAllowed(lv_targetPlayerGroup, c_uiCommandAllowInfoPanel, false);
        UISetCommandAllowed(lv_targetPlayerGroup, c_uiCommandAllowMinimap, false);
        UISetCommandAllowed(lv_targetPlayerGroup, c_uiCommandAllowModifiers, false);
        UISetCommandAllowed(lv_targetPlayerGroup, c_uiCommandAllowPings, false);
        UISetCommandAllowed(lv_targetPlayerGroup, c_uiCommandAllowQueue, false);
        UISetCommandAllowed(lv_targetPlayerGroup, c_uiCommandAllowSmartClick, false);
        if ((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lv_targetPlayer) == true)) {
            AISetUnitTacticalDisabled(lv_mindControlledUnit, true);
            HeroClaimForTactical(lv_targetPlayer, 3, false);
        }

    }
    else {
        libNtve_gf_MakeUnitUncommandable(lv_mindControlledUnit, true);
    }
    libGDHL_gv_heroSylvanasMindControlTargetUnit[lv_casterPlayer] = lv_mindControlledUnit;
    libNtve_gf_ShareVisionofUnit(lv_mindControlledUnit, true, lv_casterPlayer);
    libGame_gf_PlayerHeroDisplacementCameraLock(lv_mindControlledUnit, EventUnitBehavior());
    libGDHL_gv_heroSylvanasActiveMindControlCounter += 1;
    TriggerEnable(libGDHL_gt_HeroSylvanasMovementCommandForwarding, true);
    UnitIssueOrder(lv_mindControlledUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
    if (((lv_mindControlledUnit == libGame_gv_players[lv_targetPlayer].lv_heroUnit) || (lv_mindControlledUnit == libGame_gv_players[lv_targetPlayer].lv_activeVehicle))) {
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(lv_targetPlayer, libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI_SylvanasOverlay.StormCutscene", "SylvanasMindControlTarget");
    }

    while ((UnitHasBehavior2(lv_mindControlledUnit, "SylvanasMindControlTarget") == true)) {
        Wait(0.0625, c_timeGame);
    }
    if ((UnitTestState(lv_mindControlledUnit, c_unitStateHallucination) == true)) {
        libAIAI_gf_SummonedAIInitialAttackLogic(false, lv_mindControlledUnit, libGame_gv_players[UnitGetOwner(lv_mindControlledUnit)].lv_heroUnit);
    }

    if ((lv_mindControlledUnitIsPlayerHero == true)) {
        UISetCommandAllowed(lv_targetPlayerGroup, c_uiCommandAllowButtons, true);
        UISetCommandAllowed(lv_targetPlayerGroup, c_uiCommandAllowHotkeys, true);
        UISetCommandAllowed(lv_targetPlayerGroup, c_uiCommandAllowInfoPanel, true);
        UISetCommandAllowed(lv_targetPlayerGroup, c_uiCommandAllowMinimap, true);
        UISetCommandAllowed(lv_targetPlayerGroup, c_uiCommandAllowModifiers, true);
        UISetCommandAllowed(lv_targetPlayerGroup, c_uiCommandAllowPings, true);
        UISetCommandAllowed(lv_targetPlayerGroup, c_uiCommandAllowQueue, true);
        UISetCommandAllowed(lv_targetPlayerGroup, c_uiCommandAllowSmartClick, true);
        if ((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lv_targetPlayer) == true)) {
            AISetUnitTacticalDisabled(lv_mindControlledUnit, false);
            HeroReleaseFromTactical(lv_targetPlayer);
        }

    }
    else {
        libNtve_gf_MakeUnitUncommandable(lv_mindControlledUnit, false);
    }
    libGDHL_gv_heroSylvanasMindControlTargetUnit[lv_casterPlayer] = null;
    libNtve_gf_ShareVisionofUnit(lv_mindControlledUnit, false, lv_casterPlayer);
    libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(lv_targetPlayer, "Cutscenes\\GameUI_SylvanasOverlay.StormCutscene", "SylvanasMindControlTarget");
    libGDHL_gv_heroSylvanasActiveMindControlCounter -= 1;
    if ((libGDHL_gv_heroSylvanasActiveMindControlCounter < 1)) {
        libGDHL_gv_heroSylvanasActiveMindControlCounter = 0;
        TriggerEnable(libGDHL_gt_HeroSylvanasMovementCommandForwarding, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSylvanasMindControlTargetSelect_Init () {
    libGDHL_gt_HeroSylvanasMindControlTargetSelect = TriggerCreate("libGDHL_gt_HeroSylvanasMindControlTargetSelect_Func");
    TriggerEnable(libGDHL_gt_HeroSylvanasMindControlTargetSelect, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroSylvanasMindControlTargetSelect, null, "SylvanasMindControlTarget", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Sylvanas - Movement Command Forwarding
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSylvanasMovementCommandForwarding_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroSylvanas"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "SylvanasMindControlCaster") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitOrderCount(EventUnit()) == 2)) {
        if ((OrderGetTargetUnit(EventUnitOrder()) == null)) {
            UnitIssueOrder(libGDHL_gv_heroSylvanasMindControlTargetUnit[EventPlayer()], OrderTargetingPoint(AbilityCommand("move", 0), OrderGetTargetPoint(EventUnitOrder())), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(libGDHL_gv_heroSylvanasMindControlTargetUnit[EventPlayer()], OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(OrderGetTargetUnit(EventUnitOrder()))), c_orderQueueReplace);
        }
    }
    else {
        if ((OrderGetTargetUnit(EventUnitOrder()) == null)) {
            UnitIssueOrder(libGDHL_gv_heroSylvanasMindControlTargetUnit[EventPlayer()], OrderTargetingPoint(AbilityCommand("move", 0), OrderGetTargetPoint(EventUnitOrder())), c_orderQueueAddToEnd);
        }
        else {
            UnitIssueOrder(libGDHL_gv_heroSylvanasMindControlTargetUnit[EventPlayer()], OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(OrderGetTargetUnit(EventUnitOrder()))), c_orderQueueAddToEnd);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSylvanasMovementCommandForwarding_Init () {
    libGDHL_gt_HeroSylvanasMovementCommandForwarding = TriggerCreate("libGDHL_gt_HeroSylvanasMovementCommandForwarding_Func");
    TriggerEnable(libGDHL_gt_HeroSylvanasMovementCommandForwarding, false);
    TriggerAddEventUnitOrder(libGDHL_gt_HeroSylvanasMovementCommandForwarding, null, AbilityCommand("move", 0));
    TriggerAddEventUnitOrder(libGDHL_gt_HeroSylvanasMovementCommandForwarding, null, AbilityCommand("move", 3));
    TriggerAddEventUnitOrder(libGDHL_gt_HeroSylvanasMovementCommandForwarding, null, AbilityCommand("CaptureMacGuffin", 0));
    TriggerAddEventUnitOrder(libGDHL_gt_HeroSylvanasMovementCommandForwarding, null, AbilityCommand("CaptureMacGuffinTwo", 0));
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Sylvanas Has Cast Wailing Arrow
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroAISylvanasHasCastWailingArrow_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_arrowUnit;
    unit lv_sylvanasUnit;
    int lv_sylvPlayer;
    unitgroup lv_arrowUnitGroup;
    unitgroup lv_EnemyUnitGroup;
    bool lv_shouldFire;

    // Variable Initialization
    lv_sylvanasUnit = EventUnit();
    lv_sylvPlayer = EventPlayer();
    lv_arrowUnitGroup = UnitGroupEmpty();
    lv_EnemyUnitGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lv_sylvPlayer) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.125, c_timeGame);
    lv_arrowUnitGroup = UnitGroup("SylvanasWailingArrowMissile", lv_sylvPlayer, RegionCircle(UnitGetPosition(lv_sylvanasUnit), 5.0), UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_arrowUnit = UnitGroupUnit(lv_arrowUnitGroup, 1);
    while (true) {
        if (((UnitIsValid(lv_arrowUnit) != true) || (UnitIsValid(lv_sylvanasUnit) != true))) {
            return true;
        }

        lv_EnemyUnitGroup = libAIAI_gf_AIGetEnemiesInRegion(lv_sylvPlayer, RegionCircle(UnitGetPosition(lv_arrowUnit), 5.0));
        lv_shouldFire = EnoughEnemiesInArea(lv_EnemyUnitGroup, UnitGetPosition(lv_arrowUnit), 3.5, 2.0, 4.0, 6.0);
        if ((lv_shouldFire == true)) {
            HeroAIUnitIssueOrder(lv_sylvanasUnit, Order(AbilityCommand("SylvanasWailingArrowActivate", 0)), c_orderQueueReplace);
            return true;
        }

        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroAISylvanasHasCastWailingArrow_Init () {
    libGDHL_gt_HeroAISylvanasHasCastWailingArrow = TriggerCreate("libGDHL_gt_HeroAISylvanasHasCastWailingArrow_Func");
    TriggerEnable(libGDHL_gt_HeroAISylvanasHasCastWailingArrow, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroAISylvanasHasCastWailingArrow, null, AbilityCommand("SylvanasWailingArrow", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Sylvanas - Wailing Arrow - Silence Target
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSylvanasWailingArrowSilenceTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    int lv_owner;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetUnit = EventUnit();
    lv_owner = UnitGetOwner(lv_targetUnit);
    libUIUI_gf_UILowHPSetSoundChannelsForSilence(lv_owner);
    SoundPlayForPlayer(SoundLink("Sylvanas_WailingArrow_SilenceLoop", -1), UnitGetOwner(lv_targetUnit), libCore_gv_playerGroupFromPlayer[UnitGetOwner(lv_targetUnit)], 100.0, 0.0);
    Wait(2.5, c_timeGame);
    SoundStop(SoundLastPlayed(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSylvanasWailingArrowSilenceTarget_Init () {
    libGDHL_gt_HeroSylvanasWailingArrowSilenceTarget = TriggerCreate("libGDHL_gt_HeroSylvanasWailingArrowSilenceTarget_Func");
    TriggerEnable(libGDHL_gt_HeroSylvanasWailingArrowSilenceTarget, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroSylvanasWailingArrowSilenceTarget, null, "SylvanasWailingArrowTarget", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroSylvanasWailingArrowSilenceTarget, null, "SylvanasWailingArrowTarget", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Sylvanas - Wailing Arrow - Deafening Blast Silence Target
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSylvanasWailingArrowDeafeningBlastSilenceTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_targetUnit;
    int lv_owner;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetUnit = EventUnit();
    lv_owner = UnitGetOwner(lv_targetUnit);
    libUIUI_gf_UILowHPSetSoundChannelsForSilence(lv_owner);
    SoundPlayForPlayer(SoundLink("Sylvanas_WailingArrow_SilenceLoop", -1), UnitGetOwner(lv_targetUnit), libCore_gv_playerGroupFromPlayer[UnitGetOwner(lv_targetUnit)], 100.0, 0.0);
    Wait(5.0, c_timeGame);
    SoundStop(SoundLastPlayed(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSylvanasWailingArrowDeafeningBlastSilenceTarget_Init () {
    libGDHL_gt_HeroSylvanasWailingArrowDeafeningBlastSilenceTarget = TriggerCreate("libGDHL_gt_HeroSylvanasWailingArrowDeafeningBlastSilenceTarget_Func");
    TriggerEnable(libGDHL_gt_HeroSylvanasWailingArrowDeafeningBlastSilenceTarget, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroSylvanasWailingArrowDeafeningBlastSilenceTarget, null, "SylvanasWailingArrowDeafeningBlastTarget", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroSylvanasWailingArrowDeafeningBlastSilenceTarget, null, "SylvanasWailingArrowDeafeningBlastTarget", c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Sylvanas - Wailing Arrow - Silence End
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSylvanasWailingArrowSilenceEnd_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_targetUnit;
    int lv_owner;
    fixed lv_cooldownTime;
    fixed lv_modifiedCooldownTime;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_targetUnit = EventUnit();
    lv_owner = UnitGetOwner(lv_targetUnit);
    libUIUI_gf_UILowHPSetSoundChannelsForNormal(lv_owner);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSylvanasWailingArrowSilenceEnd_Init () {
    libGDHL_gt_HeroSylvanasWailingArrowSilenceEnd = TriggerCreate("libGDHL_gt_HeroSylvanasWailingArrowSilenceEnd_Func");
    TriggerEnable(libGDHL_gt_HeroSylvanasWailingArrowSilenceEnd, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroSylvanasWailingArrowSilenceEnd, null, "SylvanasWailingArrowTarget", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroSylvanasWailingArrowSilenceEnd, null, "SylvanasWailingArrowDeafeningBlastTarget", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Sylvanas - Withering Fire NPC Kill Add Charge
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSylvanasWitheringFireNPCKillAddCharge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_sylvanas;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(libGame_gv_players[libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer()].lv_heroUnit) == "HeroSylvanas") || (UnitGetType(libGame_gv_players[libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer()].lv_activeVehicle) == "HeroSylvanas")))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(libGame_gf_HeroParticipatedInNPCTakedownMinion()), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(libGame_gf_HeroParticipatedInNPCTakedownMinion()), c_unitAttributeSummoned) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(libGame_gf_HeroParticipatedInNPCTakedownMinion()), c_unitAttributeLight) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(libGame_gf_HeroParticipatedInNPCTakedownMinion()), c_unitAttributeRobotic) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(libGame_gf_HeroParticipatedInNPCTakedownMinion()), c_unitAttributeMapCreature) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(libGame_gf_HeroParticipatedInNPCTakedownMinion()), c_unitAttributeBiological) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libGame_gv_players[libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer()].lv_heroUnit) == "HeroSylvanas")) {
        lv_sylvanas = libGame_gv_players[libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer()].lv_heroUnit;
    }
    else {
        lv_sylvanas = libGame_gv_players[libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer()].lv_activeVehicle;
    }
    UnitCreateEffectUnit(lv_sylvanas, "SylvanasWitheringFireOverflowingQuiverAutoInitialSet", lv_sylvanas);
    UnitCreateEffectUnit(lv_sylvanas, "SylvanasWitheringFireAddCharge", lv_sylvanas);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSylvanasWitheringFireNPCKillAddCharge_Init () {
    libGDHL_gt_HeroSylvanasWitheringFireNPCKillAddCharge = TriggerCreate("libGDHL_gt_HeroSylvanasWitheringFireNPCKillAddCharge_Func");
    TriggerEnable(libGDHL_gt_HeroSylvanasWitheringFireNPCKillAddCharge, false);
    libGame_gf_HeroParticipatedInNPCTakedown(libGDHL_gt_HeroSylvanasWitheringFireNPCKillAddCharge);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Sylvanas - Withering Fire Hero Kill Add Charge
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSylvanasWitheringFireHeroKillAddCharge_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_sylvanas;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit) == "HeroSylvanas") || (UnitGetType(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_activeVehicle) == "HeroSylvanas")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit) == "HeroSylvanas")) {
        lv_sylvanas = libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit;
    }
    else {
        lv_sylvanas = libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_activeVehicle;
    }
    UnitCreateEffectUnit(lv_sylvanas, "SylvanasWitheringFireAdd3ChargesPersistent", lv_sylvanas);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSylvanasWitheringFireHeroKillAddCharge_Init () {
    libGDHL_gt_HeroSylvanasWitheringFireHeroKillAddCharge = TriggerCreate("libGDHL_gt_HeroSylvanasWitheringFireHeroKillAddCharge_Func");
    TriggerEnable(libGDHL_gt_HeroSylvanasWitheringFireHeroKillAddCharge, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroSylvanasWitheringFireHeroKillAddCharge);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Sylvanas - Possession Rewire
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroSylvanasPossessionRewire_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bribedUnit;
    unit lv_greedUnit;
    int lv_regenGlobeOwner;
    fixed lv_xPGrantedFromUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bribedUnit = EventUnit();
    lv_greedUnit = UnitBehaviorEffectUnit(lv_bribedUnit, EventUnitBehavior(), c_effectUnitCaster, 0);
    lv_xPGrantedFromUnit = UnitGetPropertyFixed(lv_bribedUnit, c_unitPropKillXP, c_unitPropCurrent);
    libGame_gf_AwardXPForNPCKill(lv_bribedUnit, UnitGetOwner(lv_greedUnit), c_unitAttributeBiological, UnitGetOwner(lv_greedUnit), lv_xPGrantedFromUnit);
    libGame_gf_SendEventHeroMindControlsNPC(lv_bribedUnit, UnitGetOwner(lv_bribedUnit));
    if ((UnitGetOwner(lv_bribedUnit) == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_regenGlobeOwner = libCore_gv_cOMPUTER_TeamChaos;
    }
    else {
        lv_regenGlobeOwner = libCore_gv_cOMPUTER_TeamOrder;
    }
    UnitSetOwner(lv_bribedUnit, lv_regenGlobeOwner, true);
    UnitStatusBarClearOverride(lv_bribedUnit);
    Wait(0.25, c_timeGame);
    UnitStatusBarOverride(lv_bribedUnit, c_unitStatusGroupAll);
    if (((UnitGetType(lv_bribedUnit) == "FlagBearerMinion") || (UnitGetType(lv_bribedUnit) == "WizardMinion"))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RegenGlobe", c_unitCreateIgnorePlacement, lv_regenGlobeOwner, UnitGetPosition(lv_bribedUnit));
    }

    libAIAI_gf_MinionAISetMinionTargetUnit(lv_bribedUnit, null);
    UnitIssueOrder(lv_bribedUnit, Order(libAIAI_gv_aIStopAbil), c_orderQueueReplace);
    libGame_gf_CalculateSpawnedMinionGoalPoints(UnitGetOwner(lv_bribedUnit), UnitGetPosition(lv_bribedUnit));
    libAIAI_gf_MinionAIStartMinionAI(libAIAI_gf_MinionAIGetWaveNumberForMinion(libAIAI_gf_MinionAIGetIndexForMinion(lv_bribedUnit)), lv_bribedUnit, libGame_gv_spawnedMinionLane, libGame_gv_spawnedMinionFirstWaypointIndex, false, true, false, libGame_gf_EnemyTeam(libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_greedUnit))), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroSylvanasPossessionRewire_Init () {
    libGDHL_gt_HeroSylvanasPossessionRewire = TriggerCreate("libGDHL_gt_HeroSylvanasPossessionRewire_Func");
    TriggerEnable(libGDHL_gt_HeroSylvanasPossessionRewire, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroSylvanasPossessionRewire, null, "SylvanasPossessionTarget", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tassadar - Khaydarin Resonance Talent Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTassadarKhaydarinResonanceTalentProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((lv_player >= 1))) {
            return false;
        }

        if (!((lv_player <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_player, "TassadarKhaydarinResonance") == true))) {
            return false;
        }

        if (!((UnitBehaviorCount(lv_unit, "TassadarKhaydarinResonanceTokenCounter") != 40))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_unit, "TassadarKhaydarinResonanceModifyTokenCount", lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTassadarKhaydarinResonanceTalentProc_Init () {
    libGDHL_gt_HeroTassadarKhaydarinResonanceTalentProc = TriggerCreate("libGDHL_gt_HeroTassadarKhaydarinResonanceTalentProc_Func");
    TriggerEnable(libGDHL_gt_HeroTassadarKhaydarinResonanceTalentProc, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTassadarKhaydarinResonanceTalentProc, c_playerAny, "RegenGlobeImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tassadar - Static Charge Mastery Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTassadarStaticChargeMasteryProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_target;
    unit lv_source;

    // Variable Initialization
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_source = EventPlayerEffectUsedUnit(c_effectUnitSource);

    // Conditions
    if (testConds) {
        if (!((lv_target == UnitBehaviorEffectUnit(lv_source, "TassadarPsionicStormStaticChargeMasteryDebuff", c_effectUnitCaster, 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnitWithSource(lv_target, "PsionicStormStaticChargeProcSet", lv_source, c_gameCatalogBehavior, "TassadarPsionicStormStaticChargeMasteryDebuff");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTassadarStaticChargeMasteryProc_Init () {
    libGDHL_gt_HeroTassadarStaticChargeMasteryProc = TriggerCreate("libGDHL_gt_HeroTassadarStaticChargeMasteryProc_Func");
    TriggerEnable(libGDHL_gt_HeroTassadarStaticChargeMasteryProc, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTassadarStaticChargeMasteryProc, c_playerAny, "PsionicStormStaticChargeMasteryDummyProc");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tassadar - Mental Acuity - Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTassadarMentalAcuityProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_Tassadar;

    // Variable Initialization
    lv_player = libGame_gf_HeroParticipatedInTakedownKillingPlayer();
    lv_Tassadar = libGame_gv_players[lv_player].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_player, "TassadarMasteryMentalAcuity") == true))) {
            return false;
        }

        if (!((libGame_gv_players[lv_player].lv_isDead == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_Tassadar, "TassadarOracleMentalAcuityTalentModifyTokenCount", lv_Tassadar);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTassadarMentalAcuityProc_Init () {
    libGDHL_gt_HeroTassadarMentalAcuityProc = TriggerCreate("libGDHL_gt_HeroTassadarMentalAcuityProc_Func");
    TriggerEnable(libGDHL_gt_HeroTassadarMentalAcuityProc, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroTassadarMentalAcuityProc);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tassadar - Weapon Increment vs Tassadar
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTassadarWeaponIncrementvsTassadar_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == "HeroTassadar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_SendActorMessageToUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "StatusIncrement WeaponNext");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTassadarWeaponIncrementvsTassadar_Init () {
    libGDHL_gt_HeroTassadarWeaponIncrementvsTassadar = TriggerCreate("libGDHL_gt_HeroTassadarWeaponIncrementvsTassadar_Func");
    TriggerEnable(libGDHL_gt_HeroTassadarWeaponIncrementvsTassadar, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTassadarWeaponIncrementvsTassadar, c_playerAny, "TassadarHeroWeaponLaunchMissile");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tassadar - Update Distortion Beam Period
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "HeroTassadar"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_UpdateTassadarAbilityStats(lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod_Init () {
    libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod = TriggerCreate("libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod_Func");
    TriggerEnable(libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod, null, c_behaviorCategoryUser10, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod, null, c_behaviorCategoryUser10, c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod, null, c_behaviorCategoryUser3, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod, null, c_behaviorCategoryUser3, c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod, null, "TassadarArchon", c_unitBehaviorChangeDeactivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod, null, "ArchonTwilightArchon", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thrall UI Initialize
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_ThrallUIInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    int auto0DDEF1BA_ae;
    int auto0DDEF1BA_ai;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_itTraitStackFrame;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlCreateInPanelFromTemplate(libUIUI_gv_heroSpecificStatusContainer, c_triggerControlTypePanel, "Thrall/ThrallTraitFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libGDHL_gv_thrallUI.lv_mainPanel = DialogControlLastCreated();
    auto0DDEF1BA_ae = libGDHL_gv_thrallTraitMaxStacks;
    auto0DDEF1BA_ai = 1;
    lv_itTraitStackFrame = 1;
    for ( ; ( (auto0DDEF1BA_ai >= 0 && lv_itTraitStackFrame <= auto0DDEF1BA_ae) || (auto0DDEF1BA_ai <= 0 && lv_itTraitStackFrame >= auto0DDEF1BA_ae) ) ; lv_itTraitStackFrame += auto0DDEF1BA_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "ThrallChargeFrame" + IntToString(lv_itTraitStackFrame) + "/ChargedTrait");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libGDHL_gv_thrallUI.lv_counterImage[lv_itTraitStackFrame] = DialogControlLastCreated();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_ThrallUIInitialize_Init () {
    libGDHL_gt_ThrallUIInitialize = TriggerCreate("libGDHL_gt_ThrallUIInitialize_Func");
    libCore_gf_IncludeModInitialization(libGDHL_gt_ThrallUIInitialize);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thrall - Show Frostwolf Resilience UI
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_ThrallShowFrostwolfResilienceUI_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_unit);
    DialogControlSetVisible(libGDHL_gv_thrallUI.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lv_player], true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_ThrallShowFrostwolfResilienceUI_Init () {
    libGDHL_gt_ThrallShowFrostwolfResilienceUI = TriggerCreate("libGDHL_gt_ThrallShowFrostwolfResilienceUI_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_ThrallShowFrostwolfResilienceUI, c_playerAny, "ThrallFrostwolfResilienceInitialDummy");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_ThrallShowFrostwolfResilienceUI, c_playerAny, "ThrallFrostwolfResilienceDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thrall - Gets Stack Of Frostwolf Resilience
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_ThrallGetsStackOfFrostwolfResilience_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_unit);
    libGDHL_gf_UIHeroSpecificStatusFrameUpdateThrallStatus(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_ThrallGetsStackOfFrostwolfResilience_Init () {
    libGDHL_gt_ThrallGetsStackOfFrostwolfResilience = TriggerCreate("libGDHL_gt_ThrallGetsStackOfFrostwolfResilience_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_ThrallGetsStackOfFrostwolfResilience, c_playerAny, "ThrallFrostwolfResilienceApplySwitch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thrall UI Clean Up UI For Debug Hero Swap
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_ThrallUICleanUpUIForDebugHeroSwap_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = libGame_gf_DebugHeroSwappedPlayer();
    if ((libGame_gv_players[lv_player].lv_heroIndex != libCore_gf_GetHeroIndexForUnitType("HeroThrall"))) {
        DialogControlSetVisible(libGDHL_gv_thrallUI.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lv_player], false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_ThrallUICleanUpUIForDebugHeroSwap_Init () {
    libGDHL_gt_ThrallUICleanUpUIForDebugHeroSwap = TriggerCreate("libGDHL_gt_ThrallUICleanUpUIForDebugHeroSwap_Func");
    libGame_gf_DebugHeroSwapped(libGDHL_gt_ThrallUICleanUpUIForDebugHeroSwap);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thrall UI Clean Up UI For Abathur Ultimate Evolution Clone
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_ThrallUICleanUpUIForAbathurUltimateEvolutionClone_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libGDHL_gf_AbathurUltimateEvolutionClonedUnit()) == "HeroThrall")) {
        DialogControlSetVisible(libGDHL_gv_thrallUI.lv_mainPanel, libCore_gv_playerGroupFromPlayer[libGDHL_gf_AbathurUltimateEvolutionAbathurPlayer()], false);
        libGDHL_gf_UIClearThrallStatusOnDeath(libGDHL_gf_AbathurUltimateEvolutionAbathurPlayer());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_ThrallUICleanUpUIForAbathurUltimateEvolutionClone_Init () {
    libGDHL_gt_ThrallUICleanUpUIForAbathurUltimateEvolutionClone = TriggerCreate("libGDHL_gt_ThrallUICleanUpUIForAbathurUltimateEvolutionClone_Func");
    libGDHL_gf_AbathurUltimateEvolutionEnded(libGDHL_gt_ThrallUICleanUpUIForAbathurUltimateEvolutionClone);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Thrall Dies
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_ThrallDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gf_HeroKilledUnit()) == "HeroThrall"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gf_UIClearThrallStatusOnDeath(libGame_gf_HeroKilledPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_ThrallDies_Init () {
    libGDHL_gt_ThrallDies = TriggerCreate("libGDHL_gt_ThrallDies_Func");
    libGame_gf_HeroKilled(libGDHL_gt_ThrallDies);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Thrall - Windfury Ride The Wind Mastery Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroThrallWindfuryRideTheWindMasteryProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_newWindfuryDuration;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "WindfurySpeedBuff") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((EventPlayerEffectUsed() == "WindfuryRideTheWindMasteryDummy") || ((EventPlayerEffectUsed() == "ThrallWindfuryTempestFuryDamage") && (UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "ThrallRideTheWindCarry") == 1)))) {
        lv_newWindfuryDuration = (UnitBehaviorDuration(EventPlayerEffectUsedUnit(c_effectUnitCaster), "WindfurySpeedBuff") + 1.0);
        UnitBehaviorSetDuration(EventPlayerEffectUsedUnit(c_effectUnitCaster), "WindfurySpeedBuff", lv_newWindfuryDuration);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroThrallWindfuryRideTheWindMasteryProc_Init () {
    libGDHL_gt_HeroThrallWindfuryRideTheWindMasteryProc = TriggerCreate("libGDHL_gt_HeroThrallWindfuryRideTheWindMasteryProc_Func");
    TriggerEnable(libGDHL_gt_HeroThrallWindfuryRideTheWindMasteryProc, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroThrallWindfuryRideTheWindMasteryProc, c_playerAny, "WindfuryRideTheWindMasteryDummy");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroThrallWindfuryRideTheWindMasteryProc, c_playerAny, "ThrallWindfuryTempestFuryDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Thrall - Earthquake Earthen Shield Mastery Shield Application
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroThrallEarthquakeEarthenShieldMasteryShieldApplication_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_maxHealth;
    fixed lv_shieldHealthMod;
    fixed lv_totalShield;

    // Variable Initialization
    lv_shieldHealthMod = 0.15;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        lv_maxHealth = UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent);
        lv_totalShield = (lv_maxHealth * lv_shieldHealthMod);
        CatalogFieldValueSet(c_gameCatalogBehavior, "ThrallEarthenShield", "DamageResponse.ModifyLimit", UnitGetOwner(EventUnit()), FixedToString(lv_totalShield, c_fixedPrecisionAny));
        UnitCreateEffectUnit(EventUnit(), "ThrallEarthquakeApplyEarthenShieldsMasteryBuff", EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroThrallEarthquakeEarthenShieldMasteryShieldApplication_Init () {
    libGDHL_gt_HeroThrallEarthquakeEarthenShieldMasteryShieldApplication = TriggerCreate("libGDHL_gt_HeroThrallEarthquakeEarthenShieldMasteryShieldApplication_Func");
    TriggerEnable(libGDHL_gt_HeroThrallEarthquakeEarthenShieldMasteryShieldApplication, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroThrallEarthquakeEarthenShieldMasteryShieldApplication, null, "EarthenShieldDummyBehavior", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Thrall - Sundering Used
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroThrallSunderingUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_thrallPosition[lv_player] = UnitGetPosition(lv_unit);
    UnitCreateEffectPointWithSource(lv_unit, "ThrallSunderingInitialPersistent", libGDHL_gf_TargetCalculation(EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), libGDHL_gv_thrallPosition[lv_player], RegionEntireMap()), c_gameCatalogAbil, "ThrallSundering");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroThrallSunderingUsed_Init () {
    libGDHL_gt_HeroThrallSunderingUsed = TriggerCreate("libGDHL_gt_HeroThrallSunderingUsed_Func");
    TriggerEnable(libGDHL_gt_HeroThrallSunderingUsed, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroThrallSunderingUsed, c_playerAny, "ThrallSunderingInitialDummyPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tinker - Overlock Turret
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTinkerOverlockTurret_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_duration;

    // Variable Initialization
    lv_duration = UnitBehaviorDuration(EventUnit(), "RockItTurretTimedLife");

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "TinkerRockItTurret") && (TechTreeBehaviorCount(UnitGetOwner(EventUnit()), "Ability3Rune3", c_techCountCompleteOnly) == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorSetDurationRemaining(EventUnit(), "RockItTurretTimedLife", (lv_duration + 5.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTinkerOverlockTurret_Init () {
    libGDHL_gt_HeroTinkerOverlockTurret = TriggerCreate("libGDHL_gt_HeroTinkerOverlockTurret_Func");
    TriggerEnable(libGDHL_gt_HeroTinkerOverlockTurret, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTinkerOverlockTurret, null, "Overclock", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tinker - Deth Lazor Scaling
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTinkerDethLazorScaling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    int lv_stacks;
    int lv_offsets;
    string lv_searchEffect;
    int lv_i;
    fixed lv_offsetValue;
    fixed lv_firinMahLazorzOffsetValue;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);
    lv_searchEffect = "DethLazorCharged1Search";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_stacks = UnitBehaviorCount(lv_unit, "DethLazorStack");
    lv_offsets = (lv_stacks + 11);
    lv_offsetValue = ((lv_offsets * 0.75) * -1.0);
    lv_firinMahLazorzOffsetValue = ((lv_offsets * 0.8) * -1.0);
    libGDHL_gv_heroTinkerDethLazorLastChargeLevel[lv_player] = 0;
    if ((lv_stacks <= 5)) {
        if ((PlayerHasTalent(lv_player, "TinkerMasteryEZPZDimensionalRipper") == true)) {
            lv_searchEffect = "DethLazorCharged1RelicSearch";
            libGDHL_gv_heroTinkerDethLazorLastChargeLevel[lv_player] = 1;
        }
        else {
            lv_searchEffect = "DethLazorCharged1Search";
            libGDHL_gv_heroTinkerDethLazorLastChargeLevel[lv_player] = 1;
        }
    }
    else if ((lv_stacks > 5) && (lv_stacks <= 11)) {
        if ((PlayerHasTalent(lv_player, "TinkerMasteryEZPZDimensionalRipper") == true)) {
            lv_searchEffect = "DethLazorCharged2RelicSearch";
            libGDHL_gv_heroTinkerDethLazorLastChargeLevel[lv_player] = 2;
        }
        else {
            lv_searchEffect = "DethLazorCharged2Search";
            libGDHL_gv_heroTinkerDethLazorLastChargeLevel[lv_player] = 2;
        }
    }
    else if ((lv_stacks >= 11) && (UnitBehaviorCount(EventUnit(), "GoblinFusionBuff") == 0)) {
        if ((PlayerHasTalent(lv_player, "TinkerMasteryEZPZDimensionalRipper") == true)) {
            lv_searchEffect = "DethLazorCharged3RelicSearch";
            libGDHL_gv_heroTinkerDethLazorLastChargeLevel[lv_player] = 3;
        }
        else {
            lv_searchEffect = "DethLazorCharged3Search";
            libGDHL_gv_heroTinkerDethLazorLastChargeLevel[lv_player] = 3;
        }
    }
    else if ((lv_stacks >= 11) && (UnitBehaviorCount(lv_unit, "GoblinFusionBuff") == 1)) {
        if ((PlayerHasTalent(UnitGetOwner(EventUnit()), "TinkerMasteryEZPZDimensionalRipper") == true)) {
            lv_searchEffect = "DethLazorChargedGoblinFusionMasteryDimensionalRipperSearch";
            libGDHL_gv_heroTinkerDethLazorLastChargeLevel[lv_player] = 4;
        }
        else {
            lv_searchEffect = "DethLazorChargedGoblinFusionMasterySearch";
            libGDHL_gv_heroTinkerDethLazorLastChargeLevel[lv_player] = 4;
        }
    }
    CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeSearchPersistent", "PeriodCount", lv_player, IntToString(lv_offsets));
    CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeSearchPersistent", "PeriodicEffectArray[" + IntToString(0) + "]", lv_player, (lv_searchEffect));
    CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeBeamPersistent", "InitialOffset", lv_player, ("0," + FixedToString(lv_offsetValue, 2) + ",0"));
    if ((PlayerHasTalent(lv_player, "TinkerTalentFirinMahLazorz") == true) && ((EventUnitBehaviorChange() == c_unitBehaviorChangeIncrease) || (EventUnitBehaviorChange() == c_unitBehaviorChangeActivate))) {
        CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeBeamPersistent", "FinalOffset", lv_player, ("0," + FixedToString(lv_firinMahLazorzOffsetValue, 2) + ",0"));
        CatalogFieldValueSet(c_gameCatalogEffect, "TinkerDethLazorFirinMahLazorzCasterPersistent", "FinalOffset", lv_player, ("0," + FixedToString(lv_firinMahLazorzOffsetValue, 2) + ",0"));
        CatalogFieldValueSet(c_gameCatalogEffect, "TinkerDethLazorFirinMahLazorzTalentSearch", "AreaArray[" + IntToString(0) + "].RectangleHeight", lv_player, FixedToString((7.5 + (IntToFixed(lv_stacks) * 0.725)), 2));
        CatalogFieldValueSet(c_gameCatalogEffect, "TinkerDethLazorFirinMahLazorzTalentSearch", "AreaRelativeOffset", lv_player, ("0," + FixedToString((-4.25 - (IntToFixed(lv_stacks) / 2.6)), 2)));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTinkerDethLazorScaling_Init () {
    libGDHL_gt_HeroTinkerDethLazorScaling = TriggerCreate("libGDHL_gt_HeroTinkerDethLazorScaling_Func");
    TriggerEnable(libGDHL_gt_HeroTinkerDethLazorScaling, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTinkerDethLazorScaling, null, "DethLazorStack", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tinker - Deth Lazor Goblin Fusion Scaling
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTinkerDethLazorGoblinFusionScaling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    int lv_stacks;
    int lv_offsets;
    string lv_searchEffect;
    int lv_i;
    fixed lv_offsetValue;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);
    lv_searchEffect = "DethLazorCharged3Search";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_stacks = UnitBehaviorCount(lv_unit, "DethLazorStack");
    if ((lv_stacks >= 11) && (UnitBehaviorCount(lv_unit, "GoblinFusionBuff") == 1)) {
        if ((UnitBehaviorCount(lv_unit, "TinkerDethLazorMasteryCarryBehavior") == 1)) {
            lv_searchEffect = "DethLazorChargedGoblinFusionMasteryDimensionalRipperSearch";
        }
        else {
            lv_searchEffect = "DethLazorChargedGoblinFusionMasterySearch";
        }
    }
    CatalogFieldValueSet(c_gameCatalogEffect, "DethLazorChargeSearchPersistent", "PeriodicEffectArray[" + IntToString(0) + "]", lv_player, (lv_searchEffect));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTinkerDethLazorGoblinFusionScaling_Init () {
    libGDHL_gt_HeroTinkerDethLazorGoblinFusionScaling = TriggerCreate("libGDHL_gt_HeroTinkerDethLazorGoblinFusionScaling_Func");
    TriggerEnable(libGDHL_gt_HeroTinkerDethLazorGoblinFusionScaling, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTinkerDethLazorGoblinFusionScaling, null, "GoblinFusionBuff", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tinker - Deth Lazor Turning Update
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTinkerDethLazorTurningUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    fixed lv_facingAngle;
    fixed lv_nextFacingAngle;

    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitHasBehavior2(lv_unit, "DethLazorActive") == true)) {
        lv_facingAngle = UnitGetFacing(lv_unit);
        Wait(0.0625, c_timeGame);
        lv_nextFacingAngle = UnitGetFacing(lv_unit);
        if ((lv_facingAngle > lv_nextFacingAngle)) {
            libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal ShuffleRight");
        }
        else {
            if ((lv_facingAngle < lv_nextFacingAngle)) {
                libNtve_gf_SendActorMessageToUnit(lv_unit, "Signal ShuffleLeft");
            }
            else {
                libNtve_gf_SendActorMessageToUnit(lv_unit, "AnimClear Walk 0.000000");
            }
        }
    }
    libNtve_gf_SendActorMessageToUnit(lv_unit, "AnimClear Walk");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTinkerDethLazorTurningUpdate_Init () {
    libGDHL_gt_HeroTinkerDethLazorTurningUpdate = TriggerCreate("libGDHL_gt_HeroTinkerDethLazorTurningUpdate_Func");
    TriggerEnable(libGDHL_gt_HeroTinkerDethLazorTurningUpdate, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTinkerDethLazorTurningUpdate, null, "DethLazorActive", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tinker - Deth Lazor Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTinkerDethLazorCast_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroTinkerDethLazorActive[EventPlayer()] = true;
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroTinker", "StationaryTurningRate", EventPlayer(), FixedToString(libGDHL_gv_heroTinkerDethLazorMaxTurnRate, 0));
    TriggerEnable(libGDHL_gt_HeroTinkerDethLazorLeftClick, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTinkerDethLazorCast_Init () {
    libGDHL_gt_HeroTinkerDethLazorCast = TriggerCreate("libGDHL_gt_HeroTinkerDethLazorCast_Func");
    TriggerEnable(libGDHL_gt_HeroTinkerDethLazorCast, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTinkerDethLazorCast, null, "DethLazorActive", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tinker - Deth Lazor Left Click
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTinkerDethLazorLeftClick_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroTinker") || (UnitGetType(libGame_gv_players[lv_player].lv_activeVehicle) == "HeroTinker")))) {
            return false;
        }

        if (!(((UnitBehaviorCount(libGame_gv_players[lv_player].lv_heroUnit, "DethLazorActive") == 1) || (UnitBehaviorCount(libGame_gv_players[lv_player].lv_activeVehicle, "DethLazorActive") == 1)))) {
            return false;
        }

        if (!(((UnitBehaviorCount(libGame_gv_players[lv_player].lv_heroUnit, "DethLazorStack") >= 2) || (UnitBehaviorCount(libGame_gv_players[lv_player].lv_activeVehicle, "DethLazorStack") >= 2)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroAbathur")) {
        UnitCreateEffectUnit(libGame_gv_players[lv_player].lv_activeVehicle, "DethLazorDestroyPersistent", libGame_gv_players[lv_player].lv_activeVehicle);
    }
    else {
        UnitCreateEffectUnit(libGame_gv_players[lv_player].lv_heroUnit, "DethLazorDestroyPersistent", libGame_gv_players[lv_player].lv_heroUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTinkerDethLazorLeftClick_Init () {
    libGDHL_gt_HeroTinkerDethLazorLeftClick = TriggerCreate("libGDHL_gt_HeroTinkerDethLazorLeftClick_Func");
    TriggerEnable(libGDHL_gt_HeroTinkerDethLazorLeftClick, false);
    TriggerAddEventMouseClicked(libGDHL_gt_HeroTinkerDethLazorLeftClick, c_playerAny, c_mouseButtonLeft, true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tinker - Deth Lazor End
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTinkerDethLazorEnd_Func (bool testConds, bool runActions) {
    int autoD05A2F49_ae;
    int autoD05A2F49_ai;

    // Variable Declarations
    int lv_i;
    bool lv_dethLazorAimTriggerEnabled;
    int lv_tinkerIndex;
    int lv_triggeringTinkerPlayer;
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(lv_unit) <= libCore_gv_bALMaxPlayers)) {
        CatalogFieldValueSet(c_gameCatalogUnit, "HeroTinker", "StationaryTurningRate", lv_player, CatalogFieldValueGet(c_gameCatalogUnit, "HeroTinker", "StationaryTurningRate", 0));
    }
    else {
        autoD05A2F49_ae = libCore_gv_bALMaxPlayers;
        autoD05A2F49_ai = 1;
        lv_tinkerIndex = 1;
        for ( ; ( (autoD05A2F49_ai >= 0 && lv_tinkerIndex <= autoD05A2F49_ae) || (autoD05A2F49_ai <= 0 && lv_tinkerIndex >= autoD05A2F49_ae) ) ; lv_tinkerIndex += autoD05A2F49_ai ) {
            if ((TechTreeUnitCount(lv_tinkerIndex, "HeroAbathur", c_techCountCompleteOnly) == 1) && (TechTreeUnitCount(lv_tinkerIndex, "HeroTinker", c_techCountCompleteOnly) == 0) && (lv_tinkerIndex != lv_player) && (libGDHL_gv_heroTinkerDethLazorActive[lv_tinkerIndex] == true)) {
                lv_triggeringTinkerPlayer = lv_tinkerIndex;
                CatalogFieldValueSet(c_gameCatalogUnit, "HeroTinker", "StationaryTurningRate", lv_tinkerIndex, CatalogFieldValueGet(c_gameCatalogUnit, "HeroTinker", "StationaryTurningRate", 0));
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTinkerDethLazorEnd_Init () {
    libGDHL_gt_HeroTinkerDethLazorEnd = TriggerCreate("libGDHL_gt_HeroTinkerDethLazorEnd_Func");
    TriggerEnable(libGDHL_gt_HeroTinkerDethLazorEnd, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTinkerDethLazorEnd, null, "DethLazorActive", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combat Style - Tinker - Clockwerk Steam Fists Duration
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_CombatStyleTinkerClockwerkSteamFistsDuration_Func (bool testConds, bool runActions) {
    unitgroup auto78EFE64A_g;
    int auto78EFE64A_u;

    // Variable Declarations
    fixed lv_cooldown;
    fixed lv_duration;
    unit lv_tinker;
    unitgroup lv_searchedUnits;
    unit lv_u;
    unitgroup lv_turrets;

    // Variable Initialization
    lv_tinker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_searchedUnits = UnitGroupEmpty();
    lv_turrets = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_tinker) == "HeroTinker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_turrets = UnitGroup("TinkerRockItTurret", UnitGetOwner(lv_tinker), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto78EFE64A_g = lv_turrets;
    auto78EFE64A_u = 1;
    for ( ; auto78EFE64A_u <= UnitGroupCount(auto78EFE64A_g, c_unitCountAll) ; auto78EFE64A_u += (lv_u == UnitGroupUnit(auto78EFE64A_g, auto78EFE64A_u)) ) {
        lv_u = UnitGroupUnit(auto78EFE64A_g, auto78EFE64A_u);
        lv_duration = UnitBehaviorDuration(lv_u, "RockItTurretTimedLife");
        UnitBehaviorSetDurationRemaining(lv_u, "RockItTurretTimedLife", (lv_duration + 2));
        UnitCreateEffectUnit(lv_tinker, "ClockwerkSteamFistsDummySet", lv_u);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_CombatStyleTinkerClockwerkSteamFistsDuration_Init () {
    libGDHL_gt_CombatStyleTinkerClockwerkSteamFistsDuration = TriggerCreate("libGDHL_gt_CombatStyleTinkerClockwerkSteamFistsDuration_Func");
    TriggerEnable(libGDHL_gt_CombatStyleTinkerClockwerkSteamFistsDuration, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_CombatStyleTinkerClockwerkSteamFistsDuration, c_playerAny, "ClockwerkSteamfistsDummyEffect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Combat Style - Tinker - Mecha-Lord Mastery Duration
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_CombatStyleTinkerMechaLordMasteryDuration_Func (bool testConds, bool runActions) {
    unitgroup autoC6BEAE5A_g;
    int autoC6BEAE5A_u;

    // Variable Declarations
    fixed lv_cooldown;
    fixed lv_duration;
    unit lv_tinker;
    unitgroup lv_searchedUnits;
    unit lv_u;
    unitgroup lv_turrets;

    // Variable Initialization
    lv_tinker = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_searchedUnits = UnitGroupEmpty();
    lv_turrets = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(lv_tinker, "TinkerMechaLordMasteryCarryBehavior") == 1))) {
            return false;
        }

        if (!((UnitGetType(lv_tinker) == "HeroTinker"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC6BEAE5A_g = lv_turrets;
    autoC6BEAE5A_u = 1;
    for ( ; autoC6BEAE5A_u <= UnitGroupCount(autoC6BEAE5A_g, c_unitCountAll) ; autoC6BEAE5A_u += (lv_u == UnitGroupUnit(autoC6BEAE5A_g, autoC6BEAE5A_u)) ) {
        lv_u = UnitGroupUnit(autoC6BEAE5A_g, autoC6BEAE5A_u);
        lv_duration = UnitBehaviorDuration(lv_u, "RockItTurretTimedLife");
        UnitBehaviorSetDurationRemaining(lv_u, "RockItTurretTimedLife", (lv_duration + 1.0));
        UnitCreateEffectUnit(lv_tinker, "ClockwerkSteamFistsDummySet", lv_u);
    }
    if ((UnitBehaviorCount(lv_tinker, "TinkerRoboGoblin") == 1)) {
        lv_duration = UnitBehaviorDuration(lv_tinker, "TinkerRoboGoblin");
        UnitBehaviorSetDurationRemaining(lv_tinker, "TinkerRoboGoblin", (lv_duration + 1.0));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_CombatStyleTinkerMechaLordMasteryDuration_Init () {
    libGDHL_gt_CombatStyleTinkerMechaLordMasteryDuration = TriggerCreate("libGDHL_gt_CombatStyleTinkerMechaLordMasteryDuration_Func");
    TriggerEnable(libGDHL_gt_CombatStyleTinkerMechaLordMasteryDuration, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_CombatStyleTinkerMechaLordMasteryDuration, c_playerAny, "MechaLordMasteryDummyEffect");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tinker - Robo-Goblin Turret Focus Set Target
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTinkerRoboGoblinTurretFocusSetTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_owningPlayer;
    unit lv_focusTarget;

    // Variable Initialization
    lv_owningPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_focusTarget = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGDHL_gv_heroTinkerRoboGoblinTurretFocusTarget[lv_owningPlayer] != null)) {
        if ((libGDHL_gv_heroTinkerRoboGoblinTurretFocusTarget[lv_owningPlayer] == lv_focusTarget)) {
        }
        else {
            UnitBehaviorRemove(libGDHL_gv_heroTinkerRoboGoblinTurretFocusTarget[lv_owningPlayer], "TinkerRoboGoblinMechaLordTalentFocusTarget", 1);
            libGDHL_gv_heroTinkerRoboGoblinTurretFocusTarget[lv_owningPlayer] = lv_focusTarget;
        }
    }
    else {
        libGDHL_gv_heroTinkerRoboGoblinTurretFocusTarget[lv_owningPlayer] = lv_focusTarget;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTinkerRoboGoblinTurretFocusSetTarget_Init () {
    libGDHL_gt_HeroTinkerRoboGoblinTurretFocusSetTarget = TriggerCreate("libGDHL_gt_HeroTinkerRoboGoblinTurretFocusSetTarget_Func");
    TriggerEnable(libGDHL_gt_HeroTinkerRoboGoblinTurretFocusSetTarget, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTinkerRoboGoblinTurretFocusSetTarget, c_playerAny, "TinkerRoboGoblinApplyMechaLordTalentFocusTarget");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tinker - It's Raining Scrap Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTinkerItsRainingScrapProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "TinkerItsRainingScrapLaunchMissile", UnitTypePlacementFromPoint("TinkerSalvageScrap", lv_player, EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 5.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTinkerItsRainingScrapProc_Init () {
    libGDHL_gt_HeroTinkerItsRainingScrapProc = TriggerCreate("libGDHL_gt_HeroTinkerItsRainingScrapProc_Func");
    TriggerEnable(libGDHL_gt_HeroTinkerItsRainingScrapProc, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTinkerItsRainingScrapProc, c_playerAny, "TinkerItsRainingScrapDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tinker - Firin' Mah Lazorz Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTinkerFirinMahLazorzProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;
    int lv_player;

    // Variable Initialization
    lv_point = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_player, "TinkerTalentFirinMahLazorz") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("TinkerRockItTurret", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitCreateEffectPointWithSource(UnitGroupLoopCurrent(), "TinkerDethLazorFirinMahLazorzTargetPersistent", lv_point, c_gameCatalogAbil, "TinkerDethLazorCharged");
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTinkerFirinMahLazorzProc_Init () {
    libGDHL_gt_HeroTinkerFirinMahLazorzProc = TriggerCreate("libGDHL_gt_HeroTinkerFirinMahLazorzProc_Func");
    TriggerEnable(libGDHL_gt_HeroTinkerFirinMahLazorzProc, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTinkerFirinMahLazorzProc, c_playerAny, "DethLazorChargedBeamSwitch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tinker - Firin' Mah Lazorz - Target Memory
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTinkerFirinMahLazorzTargetMemory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_localTurret;
    order lv_turretOrder;

    // Variable Initialization
    lv_localTurret = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    while ((UnitHasBehavior2(lv_localTurret, "TinkerDethLazorFirinMahLazorzTurretBehavior") == true)) {
        Wait(0.0625, c_timeGame);
    }
    UnitIssueOrder(lv_localTurret, OrderTargetingUnit(AbilityCommand("attack", 0), libGDHL_gv_heroTinkerRoboGoblinTurretFocusTarget[UnitGetOwner(lv_localTurret)]), c_orderQueueReplace);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTinkerFirinMahLazorzTargetMemory_Init () {
    libGDHL_gt_HeroTinkerFirinMahLazorzTargetMemory = TriggerCreate("libGDHL_gt_HeroTinkerFirinMahLazorzTargetMemory_Func");
    TriggerEnable(libGDHL_gt_HeroTinkerFirinMahLazorzTargetMemory, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTinkerFirinMahLazorzTargetMemory, c_playerAny, "TinkerDethLazorFirinMahLazorzTargetPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tinker - Robo-Goblin Mecha Lord Turret Selection
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTinkerRoboGoblinMechaLordTurretSelection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_gazlowePlayer;
    unit lv_rockItTurret;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventPlayerEffectUsedUnit(c_effectUnitCaster), "UltimateEvolutionBuff") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rockItTurret = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_gazlowePlayer = UnitGetOwner(lv_rockItTurret);
    UnitSelect(lv_rockItTurret, lv_gazlowePlayer, true);
    UISetSelectionTypeEnabled(PlayerGroupSingle(lv_gazlowePlayer), c_localSelectionTypeWorldPanelHero, false);
    libGDHL_gv_heroTinkerRoboGoblinTurretCount[lv_gazlowePlayer] += 1;
    while (!((UnitIsAlive(lv_rockItTurret) == false))) {
        Wait(0.125, c_timeGame);
    }
    libGDHL_gv_heroTinkerRoboGoblinTurretCount[lv_gazlowePlayer] -= 1;
    if ((libGDHL_gv_heroTinkerRoboGoblinTurretCount[lv_gazlowePlayer] < 1)) {
        UISetSelectionTypeEnabled(PlayerGroupSingle(lv_gazlowePlayer), c_localSelectionTypeWorldPanelHero, true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTinkerRoboGoblinMechaLordTurretSelection_Init () {
    libGDHL_gt_HeroTinkerRoboGoblinMechaLordTurretSelection = TriggerCreate("libGDHL_gt_HeroTinkerRoboGoblinMechaLordTurretSelection_Func");
    TriggerEnable(libGDHL_gt_HeroTinkerRoboGoblinMechaLordTurretSelection, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTinkerRoboGoblinMechaLordTurretSelection, c_playerAny, "TinkerRoboGoblinRockItTurretSpawnPersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tychus - Dash - Regen Globe Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTychusDashRegenGlobeProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tychusPlayer;
    unit lv_tychusUnit;
    const int lv_dashMaxCount = 25;

    // Variable Initialization
    lv_tychusPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    lv_tychusUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((lv_tychusPlayer >= 1))) {
            return false;
        }

        if (!((lv_tychusPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_tychusPlayer, "TychusMasteryRunandGunDash") == true))) {
            return false;
        }

        if (!((UnitBehaviorCount(lv_tychusUnit, "TychusRunAndGunDashQuestToken") < lv_dashMaxCount))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_tychusUnit, "TychusRunAndGunDashQuestIncrementToken", lv_tychusUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTychusDashRegenGlobeProc_Init () {
    libGDHL_gt_HeroTychusDashRegenGlobeProc = TriggerCreate("libGDHL_gt_HeroTychusDashRegenGlobeProc_Func");
    TriggerEnable(libGDHL_gt_HeroTychusDashRegenGlobeProc, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTychusDashRegenGlobeProc, c_playerAny, "RegenGlobeImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tychus - Relentless Soldier Talent Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTychusRelentlessSoldierTalentProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_player, "TychusRelentlessSoldier") == true))) {
            return false;
        }

        if (!((UnitGetType(lv_unit) == "HeroTychus"))) {
            return false;
        }

        if (!((UnitHasBehaviorWithFlag(lv_unit, c_unitBehaviorFlagUser1) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_unit, "TychusRelentlessSoldierApplyResistantBehavior", lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTychusRelentlessSoldierTalentProc_Init () {
    libGDHL_gt_HeroTychusRelentlessSoldierTalentProc = TriggerCreate("libGDHL_gt_HeroTychusRelentlessSoldierTalentProc_Func");
    TriggerEnable(libGDHL_gt_HeroTychusRelentlessSoldierTalentProc, false);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroTychusRelentlessSoldierTalentProc, null, c_behaviorCategoryStun, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroTychusRelentlessSoldierTalentProc, null, c_behaviorCategoryStun, c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroTychusRelentlessSoldierTalentProc, null, c_behaviorCategoryUser5, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroTychusRelentlessSoldierTalentProc, null, c_behaviorCategoryUser5, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tychus - Master Assassin - Hero Takedown Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTychusMasterAssassinHeroTakedownProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_tychusPlayer;
    unit lv_tychusUnit;
    const int lv_masterAssassinMaxCount = 15;

    // Variable Initialization
    lv_tychusPlayer = libGame_gf_HeroParticipatedInTakedownKillingPlayer();
    lv_tychusUnit = libGame_gv_players[lv_tychusPlayer].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((lv_tychusPlayer >= 1))) {
            return false;
        }

        if (!((lv_tychusPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_tychusPlayer, "TychusMasterAssassin") == true))) {
            return false;
        }

        if (!((UnitBehaviorCount(lv_tychusUnit, "TychusMasterAssassinQuestToken") < lv_masterAssassinMaxCount))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_tychusUnit, "TychusMasterAssassinQuestIncrementToken", lv_tychusUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTychusMasterAssassinHeroTakedownProc_Init () {
    libGDHL_gt_HeroTychusMasterAssassinHeroTakedownProc = TriggerCreate("libGDHL_gt_HeroTychusMasterAssassinHeroTakedownProc_Func");
    TriggerEnable(libGDHL_gt_HeroTychusMasterAssassinHeroTakedownProc, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroTychusMasterAssassinHeroTakedownProc);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tychus - That's The Stuff - On
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTychusThatsTheStuffOn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(UnitGetOwner(EventUnit()), "TychusThatsTheStuff") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libGDHL_gt_HeroTychusThatsTheStuffDamageTracker, true);
    libGDHL_gv_heroTychusThatsTheStuffCastCount += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTychusThatsTheStuffOn_Init () {
    libGDHL_gt_HeroTychusThatsTheStuffOn = TriggerCreate("libGDHL_gt_HeroTychusThatsTheStuffOn_Func");
    TriggerEnable(libGDHL_gt_HeroTychusThatsTheStuffOn, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTychusThatsTheStuffOn, null, "TychusMinigunActiveBuff", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tychus - That's The Stuff - Damage Tracker
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTychusThatsTheStuffDamageTracker_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damageAmount;
    const fixed lv_damageDealtHealingFraction = 1.0;
    unit lv_itUnit;
    int lv_itPlayer;

    // Variable Initialization
    lv_itUnit = EventUnitDamageSourceUnit();
    lv_itPlayer = UnitGetOwner(EventUnitDamageSourceUnit());

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_itUnit, "TychusMinigunActiveBuff") == true))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_itPlayer, "TychusThatsTheStuff") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((lv_itPlayer > libCore_gv_bALMaxPlayers) || (lv_itPlayer <= 0))) {
        return true;
    }

    lv_damageAmount = ((EventUnitDamageAmount() + EventUnitDamageBehaviorShield()) * lv_damageDealtHealingFraction);
    libGDHL_gv_heroTychusThatsTheStuffCombinedHeal[lv_itPlayer] += lv_damageAmount;
    libGDHL_gv_heroTychusThatsTheStuffHealPreviewCombinedDamage[UnitGetOwner(lv_itUnit)] += lv_damageAmount;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTychusThatsTheStuffDamageTracker_Init () {
    libGDHL_gt_HeroTychusThatsTheStuffDamageTracker = TriggerCreate("libGDHL_gt_HeroTychusThatsTheStuffDamageTracker_Func");
    TriggerEnable(libGDHL_gt_HeroTychusThatsTheStuffDamageTracker, false);
    TriggerAddDamageEvent(libGDHL_gt_HeroTychusThatsTheStuffDamageTracker, "HeroTychus", null, c_unitDamageTypeAny, c_unitDamageEither, "TychusMinigunPercentageDamage");
    TriggerAddDamageEvent(libGDHL_gt_HeroTychusThatsTheStuffDamageTracker, "HeroTychus", null, c_unitDamageTypeAny, c_unitDamageEither, "TychusMinigunSizzlinAttacksAndTheBiggerTheyAreTalentPercentageDamage");
    TriggerAddDamageEvent(libGDHL_gt_HeroTychusThatsTheStuffDamageTracker, "HeroTychus", null, c_unitDamageTypeAny, c_unitDamageEither, "TychusMinigunSizzlinAttacksTalentActivePercentageDamage");
    TriggerAddDamageEvent(libGDHL_gt_HeroTychusThatsTheStuffDamageTracker, "HeroTychus", null, c_unitDamageTypeAny, c_unitDamageEither, "TychusMinigunTheBiggerTheyAreTalentPercentageDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tychus - That's The Stuff - Heal Preview Catalog
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTychusThatsTheStuffHealPreviewCatalog_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;
    int lv_itPlayer;

    // Variable Initialization
    lv_itUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_itPlayer = UnitGetOwner(lv_itUnit);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_itUnit) == "HeroTychus"))) {
            return false;
        }

        if (!((UnitHasBehavior2(lv_itUnit, "TychusMinigunActiveBuff") == true))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_itPlayer, "TychusThatsTheStuff") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, "TychusMinigunThatsTheStuffTalentDummyHealer", "RechargeVitalRate", lv_itPlayer, FixedToString(libGDHL_gv_heroTychusThatsTheStuffHealPreviewCombinedDamage[lv_itPlayer], 1));
    UnitBehaviorAdd(lv_itUnit, "TychusMinigunThatsTheStuffHealingPreview", lv_itUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTychusThatsTheStuffHealPreviewCatalog_Init () {
    libGDHL_gt_HeroTychusThatsTheStuffHealPreviewCatalog = TriggerCreate("libGDHL_gt_HeroTychusThatsTheStuffHealPreviewCatalog_Func");
    TriggerEnable(libGDHL_gt_HeroTychusThatsTheStuffHealPreviewCatalog, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTychusThatsTheStuffHealPreviewCatalog, c_playerAny, "TychusMinigunThatsTheStuffDamageResponseSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tychus - That's The Stuff - Off
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTychusThatsTheStuffOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_itUnit;
    int lv_itPlayer;
    fixed lv_healAmount;

    // Variable Initialization
    lv_itUnit = EventUnit();
    lv_itPlayer = UnitGetOwner(lv_itUnit);
    lv_healAmount = libGDHL_gv_heroTychusThatsTheStuffCombinedHeal[lv_itPlayer];

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_itPlayer, "TychusThatsTheStuff") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGDHL_gv_heroTychusThatsTheStuffCastCount -= 1;
    if ((libGDHL_gv_heroTychusThatsTheStuffCastCount == 0)) {
        TriggerEnable(libGDHL_gt_HeroTychusThatsTheStuffDamageTracker, false);
    }

    CatalogFieldValueSet(c_gameCatalogEffect, "TychusMinigunThatsTheStuffTalentCreateHealer", "RechargeVitalRate", lv_itPlayer, FixedToString(lv_healAmount, 2));
    CatalogFieldValueSet(c_gameCatalogEffect, "TychusMinigunThatsTheStuffTalentDummyHealer", "RechargeVitalRate", lv_itPlayer, "0");
    UnitCreateEffectUnit(lv_itUnit, "TychusMinigunThatsTheStuffTalentCreateHealer", lv_itUnit);
    libGDHL_gv_heroTychusThatsTheStuffCombinedHeal[lv_itPlayer] = 0.0;
    libGDHL_gv_heroTychusThatsTheStuffHealPreviewCombinedDamage[lv_itPlayer] = 0.0;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTychusThatsTheStuffOff_Init () {
    libGDHL_gt_HeroTychusThatsTheStuffOff = TriggerCreate("libGDHL_gt_HeroTychusThatsTheStuffOff_Func");
    TriggerEnable(libGDHL_gt_HeroTychusThatsTheStuffOff, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTychusThatsTheStuffOff, null, "TychusMinigunActiveBuff", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tychus - Update Orders On Issue Order Ability
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTychusUpdateOrdersOnIssueOrderAbility_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("TychusLaserDrill", EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitIssueOrder(UnitGroupLoopCurrent(), OrderTargetingUnit(AbilityCommand("attack", 0), EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_orderQueueReplace);
        UnitBehaviorRemove(UnitGroupLoopCurrent(), "LaserDrillDamageIncrease", 5);
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTychusUpdateOrdersOnIssueOrderAbility_Init () {
    libGDHL_gt_HeroTychusUpdateOrdersOnIssueOrderAbility = TriggerCreate("libGDHL_gt_HeroTychusUpdateOrdersOnIssueOrderAbility_Func");
    TriggerEnable(libGDHL_gt_HeroTychusUpdateOrdersOnIssueOrderAbility, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTychusUpdateOrdersOnIssueOrderAbility, c_playerAny, "LaserDrillAttackOrderCreatePersistent");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tychus - Overkill Targeted Retarget v.H16
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTychusOverkillTargetedRetargetvH16_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitTarget)) == true)) {
        UnitCreateEffectUnitWithSource(EventPlayerEffectUsedUnit(c_effectUnitCaster), "OverkillTargetedRetargetInitialPersistent", EventPlayerEffectUsedUnit(c_effectUnitTarget), c_gameCatalogAbil, "TychusOverkillTargeted");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTychusOverkillTargetedRetargetvH16_Init () {
    libGDHL_gt_HeroTychusOverkillTargetedRetargetvH16 = TriggerCreate("libGDHL_gt_HeroTychusOverkillTargetedRetargetvH16_Func");
    TriggerEnable(libGDHL_gt_HeroTychusOverkillTargetedRetargetvH16, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTychusOverkillTargetedRetargetvH16, c_playerAny, "OverkillTargetedRetargetDestroyPersistentSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tychus - Overkill Rolling Reload
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTychusOverkillRollingReload_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tychus;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_tychus = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    if ((UnitHasBehavior2(lv_tychus, "TychusOverkillTargetedActive") == true) && (PlayerHasTalent(UnitGetOwner(lv_tychus), "TychusRunAndGunRollingReload") == true)) {
        UnitBehaviorSetDurationRemaining(lv_tychus, "TychusOverkillTargetedActive", (UnitBehaviorDuration(lv_tychus, "TychusOverkillTargetedActive") + libGDHL_gv_tychus_RunAndGunRollingReload_DurationInc));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTychusOverkillRollingReload_Init () {
    libGDHL_gt_HeroTychusOverkillRollingReload = TriggerCreate("libGDHL_gt_HeroTychusOverkillRollingReload_Func");
    TriggerEnable(libGDHL_gt_HeroTychusOverkillRollingReload, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTychusOverkillRollingReload, c_playerAny, "RunAndGunApplyBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tyrael - Sanctification Facing
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTyraelSanctificationFacing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    libGame_gv_players[lv_player].lv_cameraCameraLockInterrupt = false;
    if ((PlayerHasTalent(lv_player, "TyraelMasterySanctificationHolyArena") == true)) {
        TimerStart(libGDHL_gv_sanctifcationTimer[lv_player], 4.5, false, c_timeGame);
    }
    else {
        TimerStart(libGDHL_gv_sanctifcationTimer[lv_player], 3.5, false, c_timeGame);
    }
    libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    UnitSetFacing(libGame_gv_players[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)].lv_heroUnit, 270.0, 0.05);
    Wait(0.05, c_timeGame);
    UnitSetFacing(libGame_gv_players[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)].lv_heroUnit, 270.0, 0.05);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTyraelSanctificationFacing_Init () {
    libGDHL_gt_HeroTyraelSanctificationFacing = TriggerCreate("libGDHL_gt_HeroTyraelSanctificationFacing_Func");
    TriggerEnable(libGDHL_gt_HeroTyraelSanctificationFacing, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTyraelSanctificationFacing, c_playerAny, "SanctificationInitialSet");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroTyraelSanctificationFacing, c_playerAny, "TyraelSanctificationPrepareSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tyrael - Archangel's Wrath Suppress Collision
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTyraelArchangelsWrathSuppressCollision_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogUnit, "HeroTyrael", "Collide[" + IntToString(1) + "]", UnitGetOwner(EventUnit()), "0");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroTyrael", "Collide[" + IntToString(8) + "]", UnitGetOwner(EventUnit()), "0");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroUther", "Collide[" + IntToString(10) + "]", UnitGetOwner(EventUnit()), "1");
    while (!((UnitHasBehavior2(EventUnit(), "TyraelArchangelsWrathDeathActiveBuff") == false))) {
        Wait(0.0625, c_timeGame);
    }
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroTyrael", "Collide[" + IntToString(1) + "]", UnitGetOwner(EventUnit()), "1");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroTyrael", "Collide[" + IntToString(8) + "]", UnitGetOwner(EventUnit()), "1");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroUther", "Collide[" + IntToString(10) + "]", UnitGetOwner(EventUnit()), "0");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTyraelArchangelsWrathSuppressCollision_Init () {
    libGDHL_gt_HeroTyraelArchangelsWrathSuppressCollision = TriggerCreate("libGDHL_gt_HeroTyraelArchangelsWrathSuppressCollision_Func");
    TriggerEnable(libGDHL_gt_HeroTyraelArchangelsWrathSuppressCollision, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTyraelArchangelsWrathSuppressCollision, null, "TyraelArchangelsWrathDeathActiveBuff", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tyrael - Sanctification Fullscreen Overlay On
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTyraelSanctificationFullscreenOverlayOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = EventUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_unit, "TyraelSanctificationDisplayBehavior", lv_unit, 1);
    UnitBehaviorSetDurationRemaining(lv_unit, "TyraelSanctificationDisplayBehavior", TimerGetRemaining(libGDHL_gv_sanctifcationTimer[UnitBehaviorEffectPlayer(lv_unit, EventUnitBehavior(), c_effectPlayerOrigin, 0)]));
    if ((UnitTestState(EventUnit(), c_unitStateHallucination) == false) && (UnitHasBehavior2(EventUnit(), "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(EventPlayer(), libUIUI_ge_FullscreenOverlayPriorities_Invulnerable, "Cutscenes\\GameUI_InvulnerableOverlay.StormCutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTyraelSanctificationFullscreenOverlayOn_Init () {
    libGDHL_gt_HeroTyraelSanctificationFullscreenOverlayOn = TriggerCreate("libGDHL_gt_HeroTyraelSanctificationFullscreenOverlayOn_Func");
    TriggerEnable(libGDHL_gt_HeroTyraelSanctificationFullscreenOverlayOn, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTyraelSanctificationFullscreenOverlayOn, null, "Sanctification", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTyraelSanctificationFullscreenOverlayOn, null, "SanctificationHolyArenaMastery", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tyrael - Sanctification Fullscreen Overlay Off
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTyraelSanctificationFullscreenOverlayOff_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "TyraelSanctificationDisplayBehavior", 1);
    if ((UnitHasBehavior2(EventUnit(), "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(EventPlayer(), "Cutscenes\\GameUI_InvulnerableOverlay.StormCutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTyraelSanctificationFullscreenOverlayOff_Init () {
    libGDHL_gt_HeroTyraelSanctificationFullscreenOverlayOff = TriggerCreate("libGDHL_gt_HeroTyraelSanctificationFullscreenOverlayOff_Func");
    TriggerEnable(libGDHL_gt_HeroTyraelSanctificationFullscreenOverlayOff, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTyraelSanctificationFullscreenOverlayOff, null, "Sanctification", c_unitBehaviorChangeDestroy);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroTyraelSanctificationFullscreenOverlayOff, null, "SanctificationHolyArenaMastery", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Tyrande - Sentinel Shot - Target Calculation
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroTyrandeSentinelShotTargetCalculation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_cosineofTargetAngle;
    unit lv_tyrandeCaster;
    point lv_casterPoint;
    point lv_targetPoint;
    fixed lv_targetXToEdgeOfMap;
    fixed lv_targetYToEdgeOfMap;
    fixed lv_targetAngle;
    fixed lv_triangle1C;
    fixed lv_triangle2C;
    point lv_owlTargetPoint;

    // Variable Initialization
    lv_tyrandeCaster = EventUnit();
    lv_casterPoint = UnitGetPosition(lv_tyrandeCaster);
    lv_targetPoint = EventUnitTargetPoint();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_owlTargetPoint = libGDHL_gf_TargetCalculation(lv_targetPoint, lv_casterPoint, RegionPlayableMap());
    lv_targetAngle = AngleBetweenPoints(lv_casterPoint, lv_targetPoint);
    if ((lv_owlTargetPoint != null)) {
        if ((PlayerHasTalent(UnitGetOwner(lv_tyrandeCaster), "TyrandeMasteryRanger") == true)) {
            UnitCreateEffectPointWithSource(lv_tyrandeCaster, "SentinelShotRangerLaunchMissile", lv_owlTargetPoint, c_gameCatalogAbil, "TyrandeSentinelShot");
        }
        else {
            UnitCreateEffectPointWithSource(lv_tyrandeCaster, "SentinelShotLaunchMissile", lv_owlTargetPoint, c_gameCatalogAbil, "TyrandeSentinelShot");
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroTyrandeSentinelShotTargetCalculation_Init () {
    libGDHL_gt_HeroTyrandeSentinelShotTargetCalculation = TriggerCreate("libGDHL_gt_HeroTyrandeSentinelShotTargetCalculation_Func");
    TriggerEnable(libGDHL_gt_HeroTyrandeSentinelShotTargetCalculation, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroTyrandeSentinelShotTargetCalculation, null, AbilityCommand("TyrandeSentinelShot", 0), c_unitAbilStageComplete, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Witch Doctor - Zombie Prison - Kill Zombies
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroWitchDoctorZombiePrisonKillZombies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_caster;
    int lv_player;
    point lv_soundPoint;

    // Variable Initialization
    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_player = UnitGetOwner(lv_caster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerHasTalent(lv_player, "WitchDoctorDeadRush") == true)) {
        UnitGroupLoopBegin(UnitGroup("WitchDoctorZombieWallUnit", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitCreateEffectUnit(lv_caster, "WitchDoctorZombieWallDeadRushTalentSearch", UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }

    UnitGroupLoopBegin(UnitGroup("WitchDoctorZombieWallUnit", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_soundPoint = UnitGetPosition(UnitGroupLoopCurrent());
        UnitCreateEffectUnit(UnitGroupLoopCurrent(), "WitchDoctorZombieWallCancelModifyTimedLifeDuration", UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    PlayerCreateEffectPoint(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "WitchDoctorZombieWallDeathSoundPersistent", lv_soundPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroWitchDoctorZombiePrisonKillZombies_Init () {
    libGDHL_gt_HeroWitchDoctorZombiePrisonKillZombies = TriggerCreate("libGDHL_gt_HeroWitchDoctorZombiePrisonKillZombies_Func");
    TriggerEnable(libGDHL_gt_HeroWitchDoctorZombiePrisonKillZombies, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroWitchDoctorZombiePrisonKillZombies, c_playerAny, "WitchDoctorZombiePrisonCancelDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Witch Doctor - Zombie Prison - Relic Zombies Spawned
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroWitchDoctorZombiePrisonRelicZombiesSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_Zombie;
    int lv_ownerPlayer;
    point lv_positionOfAbility;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_Zombie = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_ownerPlayer = UnitGetOwner(lv_Zombie);
    lv_positionOfAbility = UnitGetPosition(lv_Zombie);
    libAIAI_gf_SummonedAIInitialAttackLogic(false, lv_Zombie, libGame_gv_players[lv_ownerPlayer].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroWitchDoctorZombiePrisonRelicZombiesSpawned_Init () {
    libGDHL_gt_HeroWitchDoctorZombiePrisonRelicZombiesSpawned = TriggerCreate("libGDHL_gt_HeroWitchDoctorZombiePrisonRelicZombiesSpawned_Func");
    TriggerEnable(libGDHL_gt_HeroWitchDoctorZombiePrisonRelicZombiesSpawned, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroWitchDoctorZombiePrisonRelicZombiesSpawned, c_playerAny, "WitchDoctorZombieWallIssueMorphOrder");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Witch Doctor - Ravenous Spirit - Cast
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroWitchDoctorRavenousSpiritCast_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_ravenousSpiritUnit;
    string lv_ravenousSpiritBehavior;
    fixed lv_ravenousSpiritDuration;
    unit lv_controllerUnit;

    // Variable Initialization
    lv_ravenousSpiritBehavior = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectUnitCaster);
    if ((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroAbathur")) {
        lv_controllerUnit = libGame_gv_players[lv_player].lv_activeVehicle;
    }
    else {
        lv_controllerUnit = libGame_gv_players[lv_player].lv_heroUnit;
    }
    UnitSelect(EventPlayerEffectUsedUnit(c_effectUnitTarget), lv_player, true);
    lv_ravenousSpiritUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_ravenousSpiritBehavior = CatalogFieldValueGet(c_gameCatalogEffect, (EventPlayerEffectUsed()), "Behavior", lv_player);
    lv_ravenousSpiritDuration = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, lv_ravenousSpiritBehavior, "Duration", lv_player));
    UnitBehaviorSetDuration(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RavenousSoulsChannel", lv_ravenousSpiritDuration);
    UnitBehaviorSetDurationRemaining(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RavenousSoulsChannel", lv_ravenousSpiritDuration);
    libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_ravenousSpiritUnit);
    libGame_gv_players[lv_player].lv_cameraCurrentTarget = lv_ravenousSpiritUnit;
    libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    while ((UnitHasBehavior2(lv_controllerUnit, "RavenousSoulsChannel") == true)) {
        Wait(0.0625, c_timeGame);
    }
    UnitKill(lv_ravenousSpiritUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroWitchDoctorRavenousSpiritCast_Init () {
    libGDHL_gt_HeroWitchDoctorRavenousSpiritCast = TriggerCreate("libGDHL_gt_HeroWitchDoctorRavenousSpiritCast_Func");
    TriggerEnable(libGDHL_gt_HeroWitchDoctorRavenousSpiritCast, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroWitchDoctorRavenousSpiritCast, c_playerAny, "WitchDoctorRavenousSpiritApplyBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Witch Doctor - Ravenous Spirit - Expires
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroWitchDoctorRavenousSpiritExpires_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "WitchDoctorRavenousSpiritUnit"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(libGame_gv_players[EventPlayer()].lv_heroUnit, "RavenousSoulsChannel", 1);
    if ((UnitGetType(libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit) == "HeroAbathur")) {
        if ((UnitIsAlive(libGame_gv_players[UnitGetOwner(EventUnit())].lv_activeVehicle) == true)) {
            libGame_gv_players[EventPlayer()].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[EventPlayer()].lv_activeVehicle);
        }
        else {
            libGame_gv_players[EventPlayer()].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[EventPlayer()].lv_heroUnitGroup;
        }
    }
    else {
        libGame_gv_players[EventPlayer()].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[EventPlayer()].lv_heroUnitGroup;
    }
    libGame_gf_CameraUpdateCameraForPlayer(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroWitchDoctorRavenousSpiritExpires_Init () {
    libGDHL_gt_HeroWitchDoctorRavenousSpiritExpires = TriggerCreate("libGDHL_gt_HeroWitchDoctorRavenousSpiritExpires_Func");
    TriggerEnable(libGDHL_gt_HeroWitchDoctorRavenousSpiritExpires, false);
    TriggerAddEventUnitDied(libGDHL_gt_HeroWitchDoctorRavenousSpiritExpires, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Witch Doctor - Passive (Target)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroWitchDoctorPassiveTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_debuff;
    unit lv_witchDoctor;
    unit lv_killedUnit;
    int lv_wDPlayer;

    // Variable Initialization
    lv_killedUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!(((UnitBehaviorCount(lv_killedUnit, "WitchDoctorVoodooRitualDoT") == 1) || (UnitBehaviorCount(lv_killedUnit, "WitchDoctorVoodooRitualDeathRitualTalentDoT") == 1)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(lv_killedUnit, "WitchDoctorVoodooRitualDoT") == 1)) {
        lv_debuff = "WitchDoctorVoodooRitualDoT";
    }
    else {
        lv_debuff = "WitchDoctorVoodooRitualDeathRitualTalentDoT";
    }
    lv_witchDoctor = libGame_gv_players[UnitBehaviorEffectPlayer(lv_killedUnit, lv_debuff, c_effectPlayerCaster, 0)].lv_heroUnit;
    lv_wDPlayer = UnitGetOwner(lv_witchDoctor);
    if ((UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeStructure) == false) && (UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeSummoned) == false) && (UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeLight) == false) && (UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeRobotic) == false) && (UnitTypeTestAttribute(UnitGetType(lv_killedUnit), c_unitAttributeBiological) == true)) {
        UnitCreateEffectUnit(lv_witchDoctor, "WitchDoctorVoodooRitualProcSet", lv_witchDoctor);
    }

    if ((PlayerHasTalent(lv_wDPlayer, "WitchDoctorBloodRitual") == true)) {
        UnitCreateEffectUnit(lv_witchDoctor, "WitchDoctorVoodooRitualBloodRitualSet", lv_witchDoctor);
    }

    UnitBehaviorRemove(EventUnit(), "WitchDoctorVoodooRitualDoT", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroWitchDoctorPassiveTarget_Init () {
    libGDHL_gt_HeroWitchDoctorPassiveTarget = TriggerCreate("libGDHL_gt_HeroWitchDoctorPassiveTarget_Func");
    TriggerEnable(libGDHL_gt_HeroWitchDoctorPassiveTarget, false);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveTarget, null, c_unitDamageTypeBasic, c_unitDamageFatal, null);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWitchDoctorPassiveTarget, null, c_unitDamageTypeAbility, c_unitDamageFatal, null);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGDHL_gt_HeroWitchDoctorPassiveTarget, null, c_unitBehaviorFlagUser13, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Witch Doctor - Gargantuan - Issue Stomp Order
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroWitchDoctorGargantuanIssueStompOrder_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_wD;
    unit lv_gargantuan;

    // Variable Initialization
    lv_wD = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("WitchDoctorGargantuan", UnitGetOwner(lv_wD), RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_gargantuan = UnitGroupLoopCurrent();
    }
    UnitGroupLoopEnd();
    UnitCreateEffectUnit(lv_wD, "WitchDoctorGargantuanIssueStompCastOrder", lv_gargantuan);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroWitchDoctorGargantuanIssueStompOrder_Init () {
    libGDHL_gt_HeroWitchDoctorGargantuanIssueStompOrder = TriggerCreate("libGDHL_gt_HeroWitchDoctorGargantuanIssueStompOrder_Func");
    TriggerEnable(libGDHL_gt_HeroWitchDoctorGargantuanIssueStompOrder, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroWitchDoctorGargantuanIssueStompOrder, c_playerAny, "WitchDoctorGargantuanStompCommandCastSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Witch Doctor- Gargantuan - Created
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroWitchDoctorGargantuanCreated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_witchDoctorUnit;
    unit lv_gargantuanUnit;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());
    lv_witchDoctorUnit = libGame_gv_players[lv_player].lv_heroUnit;
    lv_gargantuanUnit = EventUnitCreatedUnit();

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libGame_gv_players[lv_player].lv_summonedUnitGroup, lv_gargantuanUnit);
    UnitGroupClear(libGDHL_gv_heroWitchDoctorGargantuanAggroGroup[lv_player]);
    UnitCreateEffectUnit(lv_gargantuanUnit, "WitchDoctorGargantuanApplyStompController", lv_witchDoctorUnit);
    libGDHL_gf_HeroWitchDoctorGargantuanAI(lv_witchDoctorUnit, EventUnitCreatedUnit(), lv_player, UnitGetPosition(EventUnitCreatedUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroWitchDoctorGargantuanCreated_Init () {
    libGDHL_gt_HeroWitchDoctorGargantuanCreated = TriggerCreate("libGDHL_gt_HeroWitchDoctorGargantuanCreated_Func");
    TriggerEnable(libGDHL_gt_HeroWitchDoctorGargantuanCreated, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroWitchDoctorGargantuanCreated, null, "WitchDoctorGargantuan", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Witch Doctor- Gargantuan - Stomp Used
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroWitchDoctorGargantuanStompUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_originalOwner;

    // Variable Initialization
    lv_originalOwner = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[lv_originalOwner].lv_heroUnit, "WitchDoctorGargantuanModifyStompCommandCooldown", libGame_gv_players[lv_originalOwner].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroWitchDoctorGargantuanStompUsed_Init () {
    libGDHL_gt_HeroWitchDoctorGargantuanStompUsed = TriggerCreate("libGDHL_gt_HeroWitchDoctorGargantuanStompUsed_Func");
    TriggerEnable(libGDHL_gt_HeroWitchDoctorGargantuanStompUsed, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroWitchDoctorGargantuanStompUsed, c_playerAny, "WitchDoctorGargantuanStompSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Wizard - Critical Mass CD Reduction
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroWizardCriticalMassCDReduction_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;
    unit lv_vehicle;
    point lv_deadUnitPosition;

    // Variable Initialization
    lv_player = libGame_gf_HeroParticipatedInTakedownKillingPlayer();
    lv_unit = libGame_gv_players[lv_player].lv_heroUnit;
    lv_vehicle = libGame_gv_players[lv_player].lv_activeVehicle;

    // Conditions
    if (testConds) {
        if (!((UnitIsAlive(lv_unit) == true))) {
            return false;
        }

        if (!(((UnitGetType(lv_unit) == "HeroWizard") || (UnitGetType(lv_vehicle) == "HeroWizard")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadUnitPosition = UnitGetPosition(libGame_gf_HeroParticipatedInTakedownKilledHero());
    if ((UnitGetType(lv_unit) == "HeroWizard")) {
        UnitCreateEffectUnit(lv_unit, "WizardCriticalMassCooldownRefund", lv_unit);
        UnitCreateEffectUnit(lv_unit, "WizardCriticalMassModifyPlayerCooldowns", lv_unit);
        UnitCreateEffectPoint(lv_unit, "WizardCriticalMassDummyPersistent", lv_deadUnitPosition);
    }
    else {
        UnitCreateEffectUnit(lv_vehicle, "WizardCriticalMassCooldownRefund", lv_vehicle);
        UnitCreateEffectUnit(lv_vehicle, "WizardCriticalMassModifyPlayerCooldowns", lv_vehicle);
        UnitCreateEffectPoint(lv_vehicle, "WizardCriticalMassDummyPersistent", lv_deadUnitPosition);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroWizardCriticalMassCDReduction_Init () {
    libGDHL_gt_HeroWizardCriticalMassCDReduction = TriggerCreate("libGDHL_gt_HeroWizardCriticalMassCDReduction_Func");
    TriggerEnable(libGDHL_gt_HeroWizardCriticalMassCDReduction, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroWizardCriticalMassCDReduction);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Wizard - Dominance
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroWizardDominance_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;

    // Variable Initialization
    lv_player = libGame_gf_HeroParticipatedInTakedownKillingPlayer();
    lv_unit = libGame_gv_players[lv_player].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "HeroWizard"))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_player, "WizardDominance") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnitWithSource(lv_unit, "WizardDominanceSet", lv_unit, c_gameCatalogBehavior, "WizardDominanceDummySourceBehavior");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroWizardDominance_Init () {
    libGDHL_gt_HeroWizardDominance = TriggerCreate("libGDHL_gt_HeroWizardDominance_Func");
    TriggerEnable(libGDHL_gt_HeroWizardDominance, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroWizardDominance);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Wizard - Remove Archon on Hearth
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroWizardRemoveArchononHearth_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;

    // Variable Initialization
    lv_player = libGame_gf_HeroPortedBackToTownPlayer();
    lv_unit = libGame_gv_players[lv_player].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "HeroWizard"))) {
            return false;
        }

        if (!((UnitBehaviorCount(lv_unit, "WizardArchonPurePowerBuff") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(lv_unit, "WizardArchonNoOutroAnim", lv_unit, 1);
    UnitBehaviorRemove(lv_unit, "WizardArchonPurePowerBuff", 1);
    PlayerAddCooldown(lv_player, "Abil/WizardArchonPurePower", 10.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroWizardRemoveArchononHearth_Init () {
    libGDHL_gt_HeroWizardRemoveArchononHearth = TriggerCreate("libGDHL_gt_HeroWizardRemoveArchononHearth_Func");
    TriggerEnable(libGDHL_gt_HeroWizardRemoveArchononHearth, false);
    libGame_gf_HeroPortedBackToTown(libGDHL_gt_HeroWizardRemoveArchononHearth);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Wizard - Illusionist - Damage Check
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroWizardIllusionistDamageCheck_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    fixed lv_damageTaken;
    fixed lv_totalHealth;
    fixed lv_percentDamageTaken;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((UnitGetType(lv_unit) == "HeroWizard"))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_player, "WizardTeleportIllusionist") == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(lv_unit, "WizardIllusionistCooldown") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damageTaken = EventUnitDamageAbsorbed();
    lv_totalHealth = UnitGetPropertyFixed(lv_unit, c_unitPropLifeMax, c_unitPropCurrent);
    lv_percentDamageTaken = (lv_damageTaken/lv_totalHealth);
    if ((lv_percentDamageTaken > libGDHL_gv_illusionistProcPercentageConstant)) {
        UnitCreateEffectUnit(lv_unit, "WizardIllusionistProcSet", lv_unit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroWizardIllusionistDamageCheck_Init () {
    libGDHL_gt_HeroWizardIllusionistDamageCheck = TriggerCreate("libGDHL_gt_HeroWizardIllusionistDamageCheck_Func");
    TriggerEnable(libGDHL_gt_HeroWizardIllusionistDamageCheck, false);
    TriggerAddEventUnitDamaged(libGDHL_gt_HeroWizardIllusionistDamageCheck, null, c_unitDamageTypeAny, c_unitDamageEither, null);
    TriggerAddEventUnitDamageAbsorbed(libGDHL_gt_HeroWizardIllusionistDamageCheck, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Wizard - Announcer VO Override
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroWizardAnnouncerVOOverride_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_wizardPlayer;
    string lv_overrideString;
    string lv_skin;

    // Variable Initialization
    lv_overrideString = "";

    // Conditions
    if (testConds) {
        if (!((libGame_gv_players[libGame_gf_HeroSpawnPlayer()].lv_heroIndex == libCore_gf_GetHeroIndexForUnitType("HeroWizard")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_wizardPlayer = libGame_gf_HeroSpawnPlayer();
    lv_overrideString = "WizardA";
    libCore_gf_DataAddAnnouncerVOOverrideforPlayer(lv_wizardPlayer, lv_overrideString, libCore_ge_AnnouncerVOEvents_DoubleKill);
    libCore_gf_DataAddAnnouncerVOOverrideforPlayer(lv_wizardPlayer, lv_overrideString, libCore_ge_AnnouncerVOEvents_TripleKill);
    libCore_gf_DataAddAnnouncerVOOverrideforPlayer(lv_wizardPlayer, lv_overrideString, libCore_ge_AnnouncerVOEvents_QuadraKill);
    libCore_gf_DataAddAnnouncerVOOverrideforPlayer(lv_wizardPlayer, lv_overrideString, libCore_ge_AnnouncerVOEvents_MegaKill);
    libCore_gf_DataAddAnnouncerVOOverrideforPlayer(lv_wizardPlayer, lv_overrideString, libCore_ge_AnnouncerVOEvents_SixKill);
    libCore_gf_DataAddAnnouncerVOOverrideforPlayer(lv_wizardPlayer, lv_overrideString, libCore_ge_AnnouncerVOEvents_SevenKill);
    libCore_gf_DataAddAnnouncerVOOverrideforPlayer(lv_wizardPlayer, lv_overrideString, libCore_ge_AnnouncerVOEvents_EightKill);
    libCore_gf_DataAddAnnouncerVOOverrideforPlayer(lv_wizardPlayer, lv_overrideString, libCore_ge_AnnouncerVOEvents_NineKill);
    libCore_gf_DataAddAnnouncerVOOverrideforPlayer(lv_wizardPlayer, lv_overrideString, libCore_ge_AnnouncerVOEvents_TenKill);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroWizardAnnouncerVOOverride_Init () {
    libGDHL_gt_HeroWizardAnnouncerVOOverride = TriggerCreate("libGDHL_gt_HeroWizardAnnouncerVOOverride_Func");
    libGame_gf_HeroSpawn(libGDHL_gt_HeroWizardAnnouncerVOOverride);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Uther - Beacon of Light Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroUtherBeaconofLightProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    fixed lv_healInitValue;
    fixed lv_healFinalValue;

    // Variable Initialization
    lv_unit = EventUnitHealLaunchUnit();
    lv_player = UnitGetOwner(lv_unit);
    lv_healInitValue = EventUnitHealAmount();
    lv_healFinalValue = (lv_healInitValue * 0.3);

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_player, "UtherBeaconofLight") == true))) {
            return false;
        }

        if (!((EventUnitHealLaunchUnit() != EventUnit()))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), lv_player, libCore_gv_filtersHeroicAllyorPlayer) == true))) {
            return false;
        }

        if (!((UnitIsAlive(lv_unit) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, "UtherBeaconofLightCreateHealer", "RechargeVitalRate", lv_player, FixedToString(lv_healFinalValue, 2));
    UnitCreateEffectUnitWithSource(lv_unit, "UtherBeaconofLightCreateHealer", lv_unit, c_gameCatalogEffect, "UtherBeaconofLightCreateHealer");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroUtherBeaconofLightProc_Init () {
    libGDHL_gt_HeroUtherBeaconofLightProc = TriggerCreate("libGDHL_gt_HeroUtherBeaconofLightProc_Func");
    TriggerEnable(libGDHL_gt_HeroUtherBeaconofLightProc, false);
    TriggerAddEventUnitHealed(libGDHL_gt_HeroUtherBeaconofLightProc, null, c_unitVitalLife, "HolyLightCreateHealer");
    TriggerAddEventUnitHealed(libGDHL_gt_HeroUtherBeaconofLightProc, null, c_unitVitalLife, "UtherHolyLightHolyShockTalentProcCreateHealer");
    TriggerAddEventUnitHealed(libGDHL_gt_HeroUtherBeaconofLightProc, null, c_unitVitalLife, "BlessedChampionCreateHealer");
    TriggerAddEventUnitHealed(libGDHL_gt_HeroUtherBeaconofLightProc, null, c_unitVitalLife, "HolyRadianceCreateHealer");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Uther - Blessed Champion Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroUtherBlessedChampionProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    fixed lv_healAmount;
    fixed lv_healAmountMod;

    // Variable Initialization
    lv_unit = EventUnitHealLaunchUnit();
    lv_player = UnitGetOwner(lv_unit);
    lv_healAmount = EventUnitHealAmount();
    lv_healAmountMod = (lv_healAmount * libGDHL_gv_bALHeroUtherBlessedChampionHeal);

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_player, "UtherMasteryBlessedChampion") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, "BlessedChampionCreateHealer", "RechargeVitalRate", lv_player, FixedToString(lv_healAmountMod, 2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroUtherBlessedChampionProc_Init () {
    libGDHL_gt_HeroUtherBlessedChampionProc = TriggerCreate("libGDHL_gt_HeroUtherBlessedChampionProc_Func");
    TriggerEnable(libGDHL_gt_HeroUtherBlessedChampionProc, false);
    TriggerAddEventUnitHealed(libGDHL_gt_HeroUtherBlessedChampionProc, null, c_unitVitalLife, "HolyLightCreateHealer");
    TriggerAddEventUnitHealed(libGDHL_gt_HeroUtherBlessedChampionProc, null, c_unitVitalLife, "UtherHolyLightHolyShockTalentProcCreateHealer");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Uther - Spirit of Redemption Cooldown Reset
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroUtherSpiritofRedemptionCooldownReset_Func (bool testConds, bool runActions) {
    int auto5E5F8669_ae;
    int auto5E5F8669_ai;

    // Variable Declarations
    int lv_i;
    unit lv_hero;
    int lv_heroIndex;
    string lv_abilLink;
    string lv_cooldownLink;
    fixed lv_currentCooldownAmount;
    fixed lv_newCooldownAmount;
    string lv_chargeLink;
    fixed lv_currentChargeAmount;
    fixed lv_newChargeAmount;

    // Variable Initialization
    lv_hero = EventUnit();
    lv_cooldownLink = "";
    lv_chargeLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        lv_heroIndex = libCore_gf_GetHeroIndexForUnitType(UnitGetType(lv_hero));
        libNtve_gf_UnitRemoveCooldown(EventUnit(), "Abil/UtherHolyShock");
        auto5E5F8669_ae = libCore_gv_dataHeroesMaxAbilitiesPerHero;
        auto5E5F8669_ai = 1;
        lv_i = 1;
        for ( ; ( (auto5E5F8669_ai >= 0 && lv_i <= auto5E5F8669_ae) || (auto5E5F8669_ai <= 0 && lv_i >= auto5E5F8669_ae) ) ; lv_i += auto5E5F8669_ai ) {
            lv_abilLink = libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_i].lv_ability;
            if ((lv_abilLink != null)) {
                if ((lv_abilLink != "UtherDivineStorm") && (lv_abilLink != "UtherDivineIntervention")) {
                    lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.Link", UnitGetOwner(lv_hero));
                    libNtve_gf_UnitRemoveCooldown(lv_hero, lv_cooldownLink);
                }

                lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Charge.Link", UnitGetOwner(lv_hero));
                UnitAddChargeUsed(lv_hero, lv_chargeLink, -1.0);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroUtherSpiritofRedemptionCooldownReset_Init () {
    libGDHL_gt_HeroUtherSpiritofRedemptionCooldownReset = TriggerCreate("libGDHL_gt_HeroUtherSpiritofRedemptionCooldownReset_Func");
    TriggerEnable(libGDHL_gt_HeroUtherSpiritofRedemptionCooldownReset, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroUtherSpiritofRedemptionCooldownReset, null, "SpiritOfRedemptionSpiritFormBuff", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Uther - Eternal Devotion Suppress Collision
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroUtherEternalDevotionSuppressCollision_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogUnit, "HeroUther", "Collide[" + IntToString(1) + "]", UnitGetOwner(EventUnit()), "0");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroUther", "Collide[" + IntToString(8) + "]", UnitGetOwner(EventUnit()), "0");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroUther", "Collide[" + IntToString(10) + "]", UnitGetOwner(EventUnit()), "1");
    while (!((UnitHasBehavior2(EventUnit(), "SpiritOfRedemptionSpiritFormBuff") == false))) {
        Wait(0.0625, c_timeGame);
    }
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroUther", "Collide[" + IntToString(1) + "]", UnitGetOwner(EventUnit()), "1");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroUther", "Collide[" + IntToString(8) + "]", UnitGetOwner(EventUnit()), "1");
    CatalogFieldValueSet(c_gameCatalogUnit, "HeroUther", "Collide[" + IntToString(10) + "]", UnitGetOwner(EventUnit()), "0");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroUtherEternalDevotionSuppressCollision_Init () {
    libGDHL_gt_HeroUtherEternalDevotionSuppressCollision = TriggerCreate("libGDHL_gt_HeroUtherEternalDevotionSuppressCollision_Func");
    TriggerEnable(libGDHL_gt_HeroUtherEternalDevotionSuppressCollision, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroUtherEternalDevotionSuppressCollision, null, "SpiritOfRedemptionSpiritFormBuff", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Uther - Divine Shield Fullscreen Overlay On
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroUtherDivineShieldFullscreenOverlayOn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(EventPlayer(), libUIUI_ge_FullscreenOverlayPriorities_Invulnerable, "Cutscenes\\GameUI_InvulnerableOverlay.StormCutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroUtherDivineShieldFullscreenOverlayOn_Init () {
    libGDHL_gt_HeroUtherDivineShieldFullscreenOverlayOn = TriggerCreate("libGDHL_gt_HeroUtherDivineShieldFullscreenOverlayOn_Func");
    TriggerEnable(libGDHL_gt_HeroUtherDivineShieldFullscreenOverlayOn, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroUtherDivineShieldFullscreenOverlayOn, null, "DivineIntervention", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Uther - Divine Shield Fullscreen Overlay Off
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroUtherDivineShieldFullscreenOverlayOff_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(EventPlayer(), "Cutscenes\\GameUI_InvulnerableOverlay.StormCutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroUtherDivineShieldFullscreenOverlayOff_Init () {
    libGDHL_gt_HeroUtherDivineShieldFullscreenOverlayOff = TriggerCreate("libGDHL_gt_HeroUtherDivineShieldFullscreenOverlayOff_Func");
    TriggerEnable(libGDHL_gt_HeroUtherDivineShieldFullscreenOverlayOff, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroUtherDivineShieldFullscreenOverlayOff, null, "DivineIntervention", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zagara - Devouring Maw - Overlay On
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZagaraDevouringMawOverlayOn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventUnit()) == true) && (UnitTestState(EventUnit(), c_unitStateHallucination) == false) && (UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true) && (UnitHasBehavior2(EventUnit(), "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(EventPlayer(), libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI_StasisOverlay.StormCutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZagaraDevouringMawOverlayOn_Init () {
    libGDHL_gt_HeroZagaraDevouringMawOverlayOn = TriggerCreate("libGDHL_gt_HeroZagaraDevouringMawOverlayOn_Func");
    TriggerEnable(libGDHL_gt_HeroZagaraDevouringMawOverlayOn, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroZagaraDevouringMawOverlayOn, null, "DevouringMawTargetBehavior", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zagara - Devouring Maw - Overlay Off
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZagaraDevouringMawOverlayOff_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(EventPlayer(), "Cutscenes\\GameUI_StasisOverlay.StormCutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZagaraDevouringMawOverlayOff_Init () {
    libGDHL_gt_HeroZagaraDevouringMawOverlayOff = TriggerCreate("libGDHL_gt_HeroZagaraDevouringMawOverlayOff_Func");
    TriggerEnable(libGDHL_gt_HeroZagaraDevouringMawOverlayOff, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroZagaraDevouringMawOverlayOff, null, "DevouringMawTargetBehavior", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zagara - Exit Nydus Worm Used
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZagaraExitNydusWormUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_nydusWormUnit;
    unit lv_zagaraUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_nydusWormUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    if ((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroZagara")) {
        lv_zagaraUnit = libGame_gv_players[lv_player].lv_heroUnit;
    }
    else {
        lv_zagaraUnit = libGame_gv_players[lv_player].lv_activeVehicle;
    }
    if ((PointPathingPassable(PointWithOffsetPolar(UnitGetPosition(lv_nydusWormUnit), 3.0, -60.0)) == true)) {
        UnitSetPosition(lv_zagaraUnit, PointWithOffsetPolar(UnitGetPosition(lv_nydusWormUnit), 3.0, -60.0), false);
        UnitCreateEffectUnit(lv_zagaraUnit, "HeroGenericMissileInterruptLaunchMissileSource", lv_zagaraUnit);
    }
    else {
        UnitSetPosition(lv_zagaraUnit, UnitGetPosition(lv_nydusWormUnit), false);
        UnitCreateEffectUnit(lv_zagaraUnit, "HeroGenericMissileInterruptLaunchMissileSource", lv_zagaraUnit);
    }
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 0.0, -1, 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZagaraExitNydusWormUsed_Init () {
    libGDHL_gt_HeroZagaraExitNydusWormUsed = TriggerCreate("libGDHL_gt_HeroZagaraExitNydusWormUsed_Func");
    TriggerEnable(libGDHL_gt_HeroZagaraExitNydusWormUsed, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroZagaraExitNydusWormUsed, c_playerAny, "ZagaraExitNydusWormRemoveBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zagara - Nydus Worm Spawned
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZagaraNydusWormSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "ZagaraNydusWorm"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libGDHL_gv_heroZagaraNydusWormUnitGroup[UnitGetOwner(EventUnitCreatedUnit())], EventUnitCreatedUnit());
    libGDHL_gf_HeroZagaraUpdateNydusWormLineofSuccession(UnitGetOwner(EventUnitCreatedUnit()));
    if (((UnitHasBehavior2(EventUnit(), "UltimateEvolutionBuff") == true) || (UnitHasBehavior2(EventUnit(), "UltimateEvolutionBuild") == true))) {
        UnitBehaviorAdd(EventUnitCreatedUnit(), "AbathurUltimateEvolutionCleanupTarget", EventUnitCreatedUnit(), 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZagaraNydusWormSpawned_Init () {
    libGDHL_gt_HeroZagaraNydusWormSpawned = TriggerCreate("libGDHL_gt_HeroZagaraNydusWormSpawned_Func");
    TriggerEnable(libGDHL_gt_HeroZagaraNydusWormSpawned, false);
    TriggerAddEventUnitCreated(libGDHL_gt_HeroZagaraNydusWormSpawned, null, "ZagaraSummonNydusWorm", null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zagara - Nydus Worm Targeting State
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZagaraNydusWormTargetingState_Func (bool testConds, bool runActions) {
    unitgroup autoB9C44FF0_g;
    int autoB9C44FF0_u;
    unitgroup auto7CB34C57_g;
    int auto7CB34C57_u;

    // Variable Declarations
    unit lv_wormUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGroupCount(libGDHL_gv_heroZagaraNydusWormUnitGroup[EventPlayer()], c_unitCountAlive) == 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventTargetModeState() == c_targetModeStateOn)) {
        auto7CB34C57_g = libGDHL_gv_heroZagaraNydusWormUnitGroup[EventPlayer()];
        auto7CB34C57_u = 1;
        for ( ; auto7CB34C57_u <= UnitGroupCount(auto7CB34C57_g, c_unitCountAll) ; auto7CB34C57_u += (lv_wormUnit == UnitGroupUnit(auto7CB34C57_g, auto7CB34C57_u)) ) {
            lv_wormUnit = UnitGroupUnit(auto7CB34C57_g, auto7CB34C57_u);
            UnitBehaviorAdd(lv_wormUnit, "ZagaraNydusWormOldestWorm", lv_wormUnit, 1);
            break;
        }
    }
    else {
        autoB9C44FF0_g = libGDHL_gv_heroZagaraNydusWormUnitGroup[EventPlayer()];
        autoB9C44FF0_u = 1;
        for ( ; autoB9C44FF0_u <= UnitGroupCount(autoB9C44FF0_g, c_unitCountAll) ; autoB9C44FF0_u += (lv_wormUnit == UnitGroupUnit(autoB9C44FF0_g, autoB9C44FF0_u)) ) {
            lv_wormUnit = UnitGroupUnit(autoB9C44FF0_g, autoB9C44FF0_u);
            UnitBehaviorRemove(lv_wormUnit, "ZagaraNydusWormOldestWorm", 1);
            break;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZagaraNydusWormTargetingState_Init () {
    libGDHL_gt_HeroZagaraNydusWormTargetingState = TriggerCreate("libGDHL_gt_HeroZagaraNydusWormTargetingState_Func");
    TriggerEnable(libGDHL_gt_HeroZagaraNydusWormTargetingState, false);
    TriggerAddEventTargetModeUpdate(libGDHL_gt_HeroZagaraNydusWormTargetingState, c_playerAny, AbilityCommand("ZagaraSummonNydusWorm", 0), c_targetModeStateOn);
    TriggerAddEventTargetModeUpdate(libGDHL_gt_HeroZagaraNydusWormTargetingState, c_playerAny, AbilityCommand("ZagaraSummonNydusWorm", 0), c_targetModeStateOff);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zagara - Nydus Worm Dies
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZagaraNydusWormDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unitgroup lv_nydusWormGroup;
    unit lv_zagaraUnit;

    // Variable Initialization
    lv_nydusWormGroup = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ZagaraNydusWorm"))) {
            return false;
        }

        if (!(((UnitHasBehavior2(libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit, "ZagaraInsideNydusWorm") == true) || (UnitHasBehavior2(libGame_gv_players[UnitGetOwner(EventUnit())].lv_activeVehicle, "ZagaraInsideNydusWorm") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    lv_nydusWormGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("ZagaraNydusWorm", "", "", UnitGetOwner(EventUnit()), -1, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroZagara")) {
        lv_zagaraUnit = libGame_gv_players[lv_player].lv_heroUnit;
    }
    else {
        lv_zagaraUnit = libGame_gv_players[lv_player].lv_activeVehicle;
    }
    if ((UnitGroupCount(lv_nydusWormGroup, c_unitCountAlive) < 1)) {
        UnitSetPosition(lv_zagaraUnit, UnitGetPosition(EventUnit()), false);
        UnitBehaviorRemove(lv_zagaraUnit, "ZagaraInsideNydusWorm", 1);
    }
    else {
        UnitSetPosition(lv_zagaraUnit, UnitGetPosition(UnitGroupRandomUnit(lv_nydusWormGroup, c_unitCountAlive)), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZagaraNydusWormDies_Init () {
    libGDHL_gt_HeroZagaraNydusWormDies = TriggerCreate("libGDHL_gt_HeroZagaraNydusWormDies_Func");
    TriggerEnable(libGDHL_gt_HeroZagaraNydusWormDies, false);
    TriggerAddEventUnitDied(libGDHL_gt_HeroZagaraNydusWormDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zagara - Nydus Worm Dies - Update Line of Succession
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZagaraNydusWormDiesUpdateLineofSuccession_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "ZagaraNydusWorm"))) {
            return false;
        }

        if (!((EventPlayer() > 0))) {
            return false;
        }

        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupRemove(libGDHL_gv_heroZagaraNydusWormUnitGroup[UnitGetOwner(EventUnit())], EventUnit());
    libGDHL_gf_HeroZagaraUpdateNydusWormLineofSuccession(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZagaraNydusWormDiesUpdateLineofSuccession_Init () {
    libGDHL_gt_HeroZagaraNydusWormDiesUpdateLineofSuccession = TriggerCreate("libGDHL_gt_HeroZagaraNydusWormDiesUpdateLineofSuccession_Func");
    TriggerEnable(libGDHL_gt_HeroZagaraNydusWormDiesUpdateLineofSuccession, false);
    TriggerAddEventUnitDied(libGDHL_gt_HeroZagaraNydusWormDiesUpdateLineofSuccession, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zagara - Nydus Worm Exit Animation
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZagaraNydusWormExitAnimation_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_nydusWormUnit;
    unit lv_zagara;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_zagara = EventUnit();
    lv_nydusWormUnit = EventUnitTargetUnit();
    if ((UnitHasBehavior2(lv_nydusWormUnit, "ZagaraNydusWormBirth") == false)) {
        libNtve_gf_SendActorMessageToUnit(lv_nydusWormUnit, "AnimPlay Spell Spell,B");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZagaraNydusWormExitAnimation_Init () {
    libGDHL_gt_HeroZagaraNydusWormExitAnimation = TriggerCreate("libGDHL_gt_HeroZagaraNydusWormExitAnimation_Func");
    TriggerEnable(libGDHL_gt_HeroZagaraNydusWormExitAnimation, false);
    TriggerAddEventUnitAbility(libGDHL_gt_HeroZagaraNydusWormExitAnimation, null, AbilityCommand("ZagaraExitNydusWorm", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zagara Summon Nydus Worm - Broodling Spawned
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZagaraSummonNydusWormBroodlingSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_broodling;
    int lv_ownerPlayer;
    point lv_positionOfNydus;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_broodling = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_ownerPlayer = UnitGetOwner(lv_broodling);
    lv_positionOfNydus = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    libAIAI_gf_SummonedAIInitialAttackLogic(false, lv_broodling, libGame_gv_players[lv_ownerPlayer].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZagaraSummonNydusWormBroodlingSpawned_Init () {
    libGDHL_gt_HeroZagaraSummonNydusWormBroodlingSpawned = TriggerCreate("libGDHL_gt_HeroZagaraSummonNydusWormBroodlingSpawned_Func");
    TriggerEnable(libGDHL_gt_HeroZagaraSummonNydusWormBroodlingSpawned, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroZagaraSummonNydusWormBroodlingSpawned, c_playerAny, "SummonNydusWormApplyBroodlingBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zagara - Roach Spawned
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZagaraRoachSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_roach;
    int lv_ownerPlayer;
    point lv_positionOfEgg;
    unit lv_zagaraUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_roach = EventUnit();
    lv_ownerPlayer = UnitGetOwner(lv_roach);
    lv_positionOfEgg = UnitGetPosition(EventUnit());
    lv_zagaraUnit = libGame_gv_players[lv_ownerPlayer].lv_heroUnit;
    libAIAI_gf_SummonedAIInitialAttackLogic(false, lv_roach, lv_zagaraUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZagaraRoachSpawned_Init () {
    libGDHL_gt_HeroZagaraRoachSpawned = TriggerCreate("libGDHL_gt_HeroZagaraRoachSpawned_Func");
    TriggerEnable(libGDHL_gt_HeroZagaraRoachSpawned, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroZagaraRoachSpawned, null, "ZagaraRoachTimedLife", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zagara - Baneling Barrage
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZagaraBanelingBarrage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_movementIncrement;
    int lv_triggeringPlayer;
    unit lv_zagara;
    point lv_targetPoint;
    unit lv_baneling;
    point lv_lastPointChecked;
    point lv_forwardPoint;
    point lv_leftPoint;
    point lv_rightPoint;

    // Variable Initialization
    lv_movementIncrement = 1.0;
    lv_triggeringPlayer = EventPlayer();
    lv_zagara = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetPoint = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_lastPointChecked = UnitGetPosition(lv_zagara);

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_UnitCreateFacingPoint(1, "ZagaraBaneling", 0, lv_triggeringPlayer, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_zagara), 0.75, lv_targetPoint), lv_targetPoint);
    lv_baneling = UnitLastCreated();
    SoundPlayOnUnit(SoundLink("Zagara_BanelingEgg_Explode", -1), PlayerGroupAll(), lv_baneling, 0.0, 100.0, 0.0);
    lv_forwardPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_baneling), lv_movementIncrement, lv_targetPoint);
    UnitIssueOrder(lv_baneling, OrderTargetingPoint(AbilityCommand("move", 0), lv_forwardPoint), c_orderQueueReplace);
    UnitCreateEffectUnit(lv_zagara, "SummonBanelingsSpeedCheckApplyPersistent", lv_baneling);
    while ((UnitIsAlive(lv_baneling) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_baneling), lv_targetPoint) > lv_movementIncrement)) {
        lv_forwardPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_baneling), lv_movementIncrement, lv_targetPoint);
        lv_leftPoint = PointWithOffsetPolar(lv_forwardPoint, 0.7, (AngleBetweenPoints(UnitGetPosition(lv_baneling), lv_targetPoint) + 70.0));
        lv_rightPoint = PointWithOffsetPolar(lv_forwardPoint, 0.7, (AngleBetweenPoints(UnitGetPosition(lv_baneling), lv_targetPoint) - 70.0));
        if (((PointPathingPassable(lv_forwardPoint) == true) || (PointPathingPassable(lv_leftPoint) == true) || (PointPathingPassable(lv_rightPoint) == true))) {
            UnitIssueOrder(lv_baneling, OrderTargetingPoint(AbilityCommand("move", 0), lv_forwardPoint), c_orderQueueReplace);
            lv_lastPointChecked = UnitGetPosition(lv_baneling);
            Wait(0.125, c_timeGame);
        }
        else {
            UnitKill(lv_baneling);
        }
    }
    UnitKill(lv_baneling);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZagaraBanelingBarrage_Init () {
    libGDHL_gt_HeroZagaraBanelingBarrage = TriggerCreate("libGDHL_gt_HeroZagaraBanelingBarrage_Func");
    TriggerEnable(libGDHL_gt_HeroZagaraBanelingBarrage, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroZagaraBanelingBarrage, c_playerAny, "SummonBanelingsLaunchDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zagara - Hydralisk or Mutalisk Control
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZagaraHydraliskorMutaliskControl_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;
    unit lv_zagara;
    unit lv_targetUnit;
    point lv_lastKnownLocation;
    unit lv_summonedPet;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_zagara = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsValid(lv_targetUnit) == true)) {
        lv_lastKnownLocation = UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitTarget));
        if ((UnitBehaviorCount(lv_zagara, "ZagaraHydraliskMutaliskTalentCarryBehavior") == 1)) {
            libNtve_gf_UnitCreateFacingPoint(1, "ZagaraMutalisk", 0, lv_triggeringPlayer, PointWithOffsetPolar(UnitGetPosition(lv_zagara), 1.0, 0.0), UnitGetPosition(lv_targetUnit));
        }
        else {
            libNtve_gf_UnitCreateFacingPoint(1, "ZagaraHydralisk", 0, lv_triggeringPlayer, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_zagara), 0.75, UnitGetPosition(lv_targetUnit)), UnitGetPosition(lv_targetUnit));
        }
    }
    else {
        if ((UnitBehaviorCount(lv_zagara, "ZagaraHydraliskMutaliskTalentCarryBehavior") == 1)) {
            UnitCreate(1, "ZagaraMutalisk", 0, lv_triggeringPlayer, PointWithOffsetPolar(UnitGetPosition(lv_zagara), 1.0, 0.0), 0.0);
        }
        else {
            UnitCreate(1, "ZagaraHydralisk", 0, lv_triggeringPlayer, PointWithOffsetPolar(UnitGetPosition(lv_zagara), 1.0, 0.0), 0.0);
        }
    }
    lv_summonedPet = UnitLastCreated();
    libAIAI_gf_MinionAIUnhookUnitFromMinionAI(lv_summonedPet);
    while ((UnitIsValid(lv_targetUnit) == true) && (UnitIsAlive(lv_summonedPet) == true) && (UnitFilterMatch(lv_targetUnit, lv_triggeringPlayer, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) && ((libNtve_gf_UnitIsVisibleToPlayer(lv_targetUnit, lv_triggeringPlayer) == true) || (DistanceBetweenPoints(UnitGetPosition(lv_summonedPet), lv_lastKnownLocation) != 0.0))) {
        if ((DistanceBetweenPoints(UnitGetPosition(lv_summonedPet), UnitGetPosition(lv_targetUnit)) > 30.0)) {
            break;
        }

        if ((libNtve_gf_UnitIsVisibleToPlayer(lv_targetUnit, lv_triggeringPlayer) == true)) {
            UnitIssueOrder(lv_summonedPet, OrderTargetingUnit(AbilityCommand("attack", 0), lv_targetUnit), c_orderQueueReplace);
            lv_lastKnownLocation = PointWithOffsetPolar(UnitGetPosition(lv_targetUnit), 2.0, UnitGetFacing(lv_targetUnit));
        }
        else {
            UnitIssueOrder(lv_summonedPet, OrderTargetingPoint(AbilityCommand("move", 0), lv_lastKnownLocation), c_orderQueueReplace);
        }
        Wait(0.125, c_timeGame);
    }
    if ((UnitIsAlive(lv_summonedPet) == true)) {
        libAIAI_gf_SummonedAIInitialAttackLogic(true, lv_summonedPet, lv_zagara);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZagaraHydraliskorMutaliskControl_Init () {
    libGDHL_gt_HeroZagaraHydraliskorMutaliskControl = TriggerCreate("libGDHL_gt_HeroZagaraHydraliskorMutaliskControl_Func");
    TriggerEnable(libGDHL_gt_HeroZagaraHydraliskorMutaliskControl, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroZagaraHydraliskorMutaliskControl, c_playerAny, "SummonHydraliskMutaliskSwitch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zagara - Infested Drop Spawn Roach
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZagaraInfestedDropSpawnRoach_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectPoint(EventPlayerEffectUsedUnit(c_effectUnitCaster), "InfestedDropLaunchTriggeredRoachSpawnMissile", UnitTypePlacementFromPoint(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), EventPlayerEffectUsedPoint(c_effectLocationTargetPoint), 15.0));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZagaraInfestedDropSpawnRoach_Init () {
    libGDHL_gt_HeroZagaraInfestedDropSpawnRoach = TriggerCreate("libGDHL_gt_HeroZagaraInfestedDropSpawnRoach_Func");
    TriggerEnable(libGDHL_gt_HeroZagaraInfestedDropSpawnRoach, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroZagaraInfestedDropSpawnRoach, c_playerAny, "InfestedDropRoachSpawnDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zagara - Infest Scaling
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZagaraInfestScaling_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_rangedDamageDealtFraction;
    int lv_player;
    unit lv_zagara;
    fixed lv_siegeScore;
    fixed lv_modScore;
    fixed lv_finalScore;

    // Variable Initialization
    lv_rangedDamageDealtFraction = 1.0;
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_zagara = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_siegeScore = PlayerScoreValueGetAsFixed(lv_player, "SiegeDamage");
    lv_modScore = (lv_siegeScore / 1000.0);
    lv_finalScore = (lv_rangedDamageDealtFraction + (Trunc(lv_modScore) / 100.0));

    // Actions
    if (!runActions) {
        return true;
    }

    if ((CatalogFieldValueGet(c_gameCatalogBehavior, "ZagaraInfestBuff", "Modification.DamageDealtFraction[" + IntToString(c_unitDamageTypeBasic) + "]", lv_player) != FixedToString(lv_finalScore, c_fixedPrecisionAny))) {
        CatalogFieldValueSet(c_gameCatalogBehavior, "ZagaraInfestBuff", "Modification.DamageDealtFraction[" + IntToString(c_unitDamageTypeBasic) + "]", lv_player, FixedToString(lv_finalScore, c_fixedPrecisionAny));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZagaraInfestScaling_Init () {
    libGDHL_gt_HeroZagaraInfestScaling = TriggerCreate("libGDHL_gt_HeroZagaraInfestScaling_Func");
    TriggerEnable(libGDHL_gt_HeroZagaraInfestScaling, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroZagaraInfestScaling, c_playerAny, "ZagaraInfestSearch");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zagara - Tyrant Maw CDR on Death
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZagaraTyrantMawCDRonDeath_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(libGame_gf_HeroParticipatedInTakedownKillingPlayer(), "ZagaraMasteryTyrantMaw") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "DevouringMawTyrantMawMasteryModifyCooldown", libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZagaraTyrantMawCDRonDeath_Init () {
    libGDHL_gt_HeroZagaraTyrantMawCDRonDeath = TriggerCreate("libGDHL_gt_HeroZagaraTyrantMawCDRonDeath_Func");
    TriggerEnable(libGDHL_gt_HeroZagaraTyrantMawCDRonDeath, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroZagaraTyrantMawCDRonDeath);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zagara - Hunter Killer - Hydralisk Transfusion
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZagaraHunterKillerHydraliskTransfusion_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zagaraPlayer;

    // Variable Initialization
    lv_zagaraPlayer = UnitGetOwner(EventUnitTarget());

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(lv_zagaraPlayer, "ZagaraMasteryHydraliskTransfusion") == true))) {
            return false;
        }

        if (!((UnitFilterMatch(EventUnit(), UnitGetOwner(EventUnit()), libCore_gv_filtersHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerHasTalent(lv_zagaraPlayer, "ZagaraMasteryGroovedSpines") == true)) {
        UnitCreateEffectUnit(EventUnitTarget(), "ZagaraHunterKillerHydraliskTransfusionGroovedSpinesCreateHealer", libGame_gv_players[lv_zagaraPlayer].lv_heroUnit);
    }
    else {
        UnitCreateEffectUnit(EventUnitTarget(), "ZagaraHunterKillerHydraliskTransfusionCreateHealer", libGame_gv_players[lv_zagaraPlayer].lv_heroUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZagaraHunterKillerHydraliskTransfusion_Init () {
    libGDHL_gt_HeroZagaraHunterKillerHydraliskTransfusion = TriggerCreate("libGDHL_gt_HeroZagaraHunterKillerHydraliskTransfusion_Func");
    TriggerEnable(libGDHL_gt_HeroZagaraHunterKillerHydraliskTransfusion, false);
    TriggerAddEventUnitAttacked2(libGDHL_gt_HeroZagaraHunterKillerHydraliskTransfusion, null, "ZagaraHydraliskMelee");
    TriggerAddEventUnitAttacked2(libGDHL_gt_HeroZagaraHunterKillerHydraliskTransfusion, null, "ZagaraHydraliskRanged");
    TriggerAddEventUnitAttacked2(libGDHL_gt_HeroZagaraHunterKillerHydraliskTransfusion, null, "ZagaraMutaliskWeapon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zagara - Endless Creep Apply Behavior
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZagaraEndlessCreepApplyBehavior_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_zagaraPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((PlayerHasTalent(libGame_gf_HeroGainTalentPlayer(), "ZagaraMasteryEndlessCreep") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_zagaraPlayer = libGame_gf_HeroGainTalentPlayer();
    UnitGroupLoopBegin(UnitGroup("ZagaraCreepTumorBurrowed", lv_zagaraPlayer, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "ZagaraCreepTumorEndlessCreepLife") == false)) {
            UnitCreateEffectUnit(libGame_gv_players[lv_zagaraPlayer].lv_heroUnit, "ZagaraCreepTumorEndlessCreepApplyBehavior", UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    UnitGroupLoopBegin(UnitGroup("ZagaraCreepTumor", lv_zagaraPlayer, RegionEntireMap(), UnitFilter(0, 0, 0, 0), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "ZagaraCreepTumorEndlessCreepLife") == false)) {
            UnitCreateEffectUnit(libGame_gv_players[lv_zagaraPlayer].lv_heroUnit, "ZagaraCreepTumorEndlessCreepApplyBehavior", UnitGroupLoopCurrent());
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZagaraEndlessCreepApplyBehavior_Init () {
    libGDHL_gt_HeroZagaraEndlessCreepApplyBehavior = TriggerCreate("libGDHL_gt_HeroZagaraEndlessCreepApplyBehavior_Func");
    TriggerEnable(libGDHL_gt_HeroZagaraEndlessCreepApplyBehavior, false);
    libGame_gf_HeroGainTalent(libGDHL_gt_HeroZagaraEndlessCreepApplyBehavior);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zeratul - Shroud of Adun FCT
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZeratulShroudofAdunFCT_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;
    fixed lv_shieldValue;
    fixed lv_health;
    fixed lv_healthPercentage;

    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_player = UnitGetOwner(lv_unit);
    lv_health = UnitGetPropertyFixed(lv_unit, c_unitPropLifeMax, c_unitPropCurrent);
    lv_healthPercentage = (lv_health * 0.15);

    // Conditions
    if (testConds) {
        if (!((lv_player >= 1))) {
            return false;
        }

        if (!((lv_player <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_shieldValue = UnitBehaviorDamageModifyRemaining(lv_unit, "ZeratulShroudofAdun");
    if ((lv_shieldValue > 0.0)) {
        FloatingCombatElementCreateTextAtUnit(PlayerGroupSingle(UnitGetOwner(lv_unit)), "FloatingCombatElements/FloatingCombatLesserAmountReceived", "ShieldState", lv_unit, FixedToText(lv_shieldValue, 0), libNtve_gv_FloatingCombatTextAutoRandomSeed);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZeratulShroudofAdunFCT_Init () {
    libGDHL_gt_HeroZeratulShroudofAdunFCT = TriggerCreate("libGDHL_gt_HeroZeratulShroudofAdunFCT_Func");
    TriggerEnable(libGDHL_gt_HeroZeratulShroudofAdunFCT, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroZeratulShroudofAdunFCT, c_playerAny, "ZeratulShroudofAdunApplyShield");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroZeratulShroudofAdunFCT, c_playerAny, "ZeratulShroudofAdunApply5Shield");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zeratul - Seeker in the Dark Structure Target
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZeratulSeekerintheDarkStructureTarget_Func (bool testConds, bool runActions) {
    // Variable Declarations
    point lv_point;
    unit lv_unit;
    point lv_unitPoint;
    int lv_player;
    point lv_newPoint;

    // Variable Initialization
    lv_point = EventPlayerEffectUsedPoint(c_effectLocationTargetUnit);
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_unitPoint = UnitGetPosition(lv_unit);
    lv_player = UnitGetOwner(lv_unit);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_point = libNtve_gf_PointOffsetTowardsPoint(lv_point, 2.0, lv_unitPoint);
    lv_newPoint = UnitTypePlacementFromPoint(UnitGetType(lv_unit), lv_player, lv_point, 5.0);
    UnitCreateEffectPoint(lv_unit, "ZeratulSingularitySpikeSeekerintheDarkTalentTeleport", lv_newPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZeratulSeekerintheDarkStructureTarget_Init () {
    libGDHL_gt_HeroZeratulSeekerintheDarkStructureTarget = TriggerCreate("libGDHL_gt_HeroZeratulSeekerintheDarkStructureTarget_Func");
    TriggerEnable(libGDHL_gt_HeroZeratulSeekerintheDarkStructureTarget, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroZeratulSeekerintheDarkStructureTarget, c_playerAny, "ZeratulSingularitySpikeSeekerintheDarkTalentTargetisStructureDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zeratul - Grim Task Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZeratulGrimTaskProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_zeratul;

    // Variable Initialization
    lv_player = libGame_gf_HeroParticipatedInTakedownKillingPlayer();
    lv_zeratul = libGame_gv_players[lv_player].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!((lv_player >= 1))) {
            return false;
        }

        if (!((lv_player <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_player, "ZeratulGrimTask") == true))) {
            return false;
        }

        if (!((UnitGetTokenCount(lv_zeratul, CatalogFieldValueGet(c_gameCatalogBehavior, "ZeratulGrimTaskQuestToken", "TokenId", c_playerAny)) < CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "ZeratulGrimTaskQuestToken", "Max", c_playerAny)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_zeratul, "ZeratulGrimTaskModifyQuestToken", lv_zeratul);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZeratulGrimTaskProc_Init () {
    libGDHL_gt_HeroZeratulGrimTaskProc = TriggerCreate("libGDHL_gt_HeroZeratulGrimTaskProc_Func");
    TriggerEnable(libGDHL_gt_HeroZeratulGrimTaskProc, false);
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_HeroZeratulGrimTaskProc);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zeratul - Shadow Hunter Talent Proc
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZeratulShadowHunterTalentProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    int lv_player;

    // Variable Initialization
    lv_unit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_player = UnitGetOwner(lv_unit);

    // Conditions
    if (testConds) {
        if (!((lv_player >= 1))) {
            return false;
        }

        if (!((lv_player <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((PlayerHasTalent(lv_player, "ZeratulShadowHunter") == true))) {
            return false;
        }

        if (!((UnitBehaviorCount(lv_unit, "ZeratulShadowHunterTalentTokenCounter") != 25))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_unit, "ZeratulBlinkShadowHunterTalentModifyTokenCount", lv_unit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZeratulShadowHunterTalentProc_Init () {
    libGDHL_gt_HeroZeratulShadowHunterTalentProc = TriggerCreate("libGDHL_gt_HeroZeratulShadowHunterTalentProc_Func");
    TriggerEnable(libGDHL_gt_HeroZeratulShadowHunterTalentProc, false);
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_HeroZeratulShadowHunterTalentProc, c_playerAny, "RegenGlobeImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zeratul - Void Prison Apply Stasis Overlay
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZeratulVoidPrisonApplyStasisOverlay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_prisoner;
    int lv_prisonerOwner;

    // Variable Initialization
    lv_prisoner = EventUnit();
    lv_prisonerOwner = UnitGetOwner(lv_prisoner);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(lv_prisoner) == true) && (UnitTestState(lv_prisoner, c_unitStateHallucination) == false) && (UnitTypeTestAttribute(UnitGetType(lv_prisoner), c_unitAttributeHeroic) == true) && (UnitHasBehavior2(lv_prisoner, "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(lv_prisonerOwner, libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI_StasisOverlay.StormCutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZeratulVoidPrisonApplyStasisOverlay_Init () {
    libGDHL_gt_HeroZeratulVoidPrisonApplyStasisOverlay = TriggerCreate("libGDHL_gt_HeroZeratulVoidPrisonApplyStasisOverlay_Func");
    TriggerEnable(libGDHL_gt_HeroZeratulVoidPrisonApplyStasisOverlay, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroZeratulVoidPrisonApplyStasisOverlay, null, "VoidPrison", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zeratul - Void Prison Remove Stasis Overlay
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZeratulVoidPrisonRemoveStasisOverlay_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_prisoner;
    int lv_prisonerOwner;

    // Variable Initialization
    lv_prisoner = EventUnit();
    lv_prisonerOwner = UnitGetOwner(lv_prisoner);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_prisoner, "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(lv_prisonerOwner, "Cutscenes\\GameUI_StasisOverlay.StormCutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZeratulVoidPrisonRemoveStasisOverlay_Init () {
    libGDHL_gt_HeroZeratulVoidPrisonRemoveStasisOverlay = TriggerCreate("libGDHL_gt_HeroZeratulVoidPrisonRemoveStasisOverlay_Func");
    TriggerEnable(libGDHL_gt_HeroZeratulVoidPrisonRemoveStasisOverlay, false);
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_HeroZeratulVoidPrisonRemoveStasisOverlay, null, "VoidPrison", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Zeratul - Damage-Based Decloak
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_HeroZeratulDamageBasedDecloak_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_zeratul;

    // Variable Initialization
    lv_zeratul = EventUnit();

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageAttempted() > 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_zeratul, "CloakRemovalOnDamageSet", lv_zeratul);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_HeroZeratulDamageBasedDecloak_Init () {
    libGDHL_gt_HeroZeratulDamageBasedDecloak = TriggerCreate("libGDHL_gt_HeroZeratulDamageBasedDecloak_Func");
    TriggerEnable(libGDHL_gt_HeroZeratulDamageBasedDecloak, false);
    TriggerAddDamageEvent(libGDHL_gt_HeroZeratulDamageBasedDecloak, null, "HeroZeratul", c_unitDamageTypeAny, c_unitDamageNonFatal, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Overdrive Update Mana And AP
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentOverdriveUpdateManaAndAP_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventUnit(), "OverdriveManaCostOverride") == 0))) {
            return false;
        }

        if (!(((UnitGetType(EventUnit()) != "HeroIllidan") && (UnitGetType(EventUnit()) != "HeroBarbarian")))) {
            return false;
        }

        if (!(((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate) || (EventUnitBehaviorChange() == c_unitBehaviorChangeDeactivate)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_UpdateHeroManaCosts(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentOverdriveUpdateManaAndAP_Init () {
    libGDHL_gt_TalentOverdriveUpdateManaAndAP = TriggerCreate("libGDHL_gt_TalentOverdriveUpdateManaAndAP_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_TalentOverdriveUpdateManaAndAP, null, "BucketOverdrive", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent Bucket - Marksman On (Update Stats)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentBucketMarksmanOnUpdateStats_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "HeroTassadar")) {
        UnitBehaviorRemove(EventUnit(), "TalentBucketMarksman", 1);
        UnitBehaviorAdd(EventUnit(), "FocusedAttackDamageResponseDistortionBeam", EventUnit(), 1);
    }

    libUIUI_gf_UIUpdateEventPlayerStatsChange(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentBucketMarksmanOnUpdateStats_Init () {
    libGDHL_gt_TalentBucketMarksmanOnUpdateStats = TriggerCreate("libGDHL_gt_TalentBucketMarksmanOnUpdateStats_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_TalentBucketMarksmanOnUpdateStats, null, "TalentBucketMarksman", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent Bucket - Distortion Beam Damage (Add Cooldown Behavior)
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentBucketDistortionBeamDamageAddCooldownBehavior_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventUnitDamageSourceUnit(), "FocusedAttackDamageResponseDistortionBeam") == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnitDamageSourceUnit(), "TalentBucketMarksmanCooldown", EventUnitDamageSourceUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentBucketDistortionBeamDamageAddCooldownBehavior_Init () {
    libGDHL_gt_TalentBucketDistortionBeamDamageAddCooldownBehavior = TriggerCreate("libGDHL_gt_TalentBucketDistortionBeamDamageAddCooldownBehavior_Func");
    TriggerAddEventUnitDamaged(libGDHL_gt_TalentBucketDistortionBeamDamageAddCooldownBehavior, null, c_unitDamageTypeAny, c_unitDamageEither, "TassadarHeroWeaponDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_TalentBucketDistortionBeamDamageAddCooldownBehavior, null, c_unitDamageTypeAny, c_unitDamageEither, "TassadarDistortionBeamDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_TalentBucketDistortionBeamDamageAddCooldownBehavior, null, c_unitDamageTypeAny, c_unitDamageEither, "TassadarArchonWeaponDamage");
    TriggerAddEventUnitDamaged(libGDHL_gt_TalentBucketDistortionBeamDamageAddCooldownBehavior, null, c_unitDamageTypeAny, c_unitDamageEither, "TassadarArchonTwilightArchonTalentDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Focused Attack Cooldown
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_FocusedAttackCooldown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_hero;
    fixed lv_currentCooldownAmount;
    fixed lv_newCooldownAmount;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    if ((UnitHasBehavior2(lv_hero, "TalentBucketMarksmanCooldown") == true) && (UnitHasBehavior2(lv_hero, "TalentBucketMarksman") == false)) {
        lv_currentCooldownAmount = UnitBehaviorDuration(lv_hero, "TalentBucketMarksmanCooldown");
        lv_newCooldownAmount = (lv_currentCooldownAmount - 1.0);
        UnitBehaviorSetDurationRemaining(lv_hero, "TalentBucketMarksmanCooldown", MaxF(lv_newCooldownAmount, 0.1));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_FocusedAttackCooldown_Init () {
    libGDHL_gt_FocusedAttackCooldown = TriggerCreate("libGDHL_gt_FocusedAttackCooldown_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_FocusedAttackCooldown, c_playerAny, "FocusedAttackCooldownReductionDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Ice Block - Overlay On
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentIceBlockOverlayOn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(EventUnit()) == true) && (UnitTestState(EventUnit(), c_unitStateHallucination) == false) && (UnitHasBehavior2(EventUnit(), "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayAddItemForPlayer(EventPlayer(), libUIUI_ge_FullscreenOverlayPriorities_Stasis, "Cutscenes\\GameUI_StasisOverlay.StormCutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentIceBlockOverlayOn_Init () {
    libGDHL_gt_TalentIceBlockOverlayOn = TriggerCreate("libGDHL_gt_TalentIceBlockOverlayOn_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_TalentIceBlockOverlayOn, null, "TalentBucketIceBlock", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Ice Block - Overlay Off
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentIceBlockOverlayOff_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "HeroGenericIgnoreFullscreenOverlay") == false)) {
        libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(EventPlayer(), "Cutscenes\\GameUI_StasisOverlay.StormCutscene", EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentIceBlockOverlayOff_Init () {
    libGDHL_gt_TalentIceBlockOverlayOff = TriggerCreate("libGDHL_gt_TalentIceBlockOverlayOff_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_TalentIceBlockOverlayOff, null, "TalentBucketIceBlock", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Rewind Activate
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentRewindActivate_Func (bool testConds, bool runActions) {
    int auto17161144_ae;
    int auto17161144_ai;

    // Variable Declarations
    int lv_itAbility;
    unit lv_hero;
    int lv_heroIndex;
    string lv_abilLink;
    string lv_cooldownLink;
    fixed lv_currentCooldownAmount;
    fixed lv_newCooldownAmount;
    string lv_chargeLink;
    fixed lv_currentChargeAmount;
    fixed lv_newChargeAmount;

    // Variable Initialization
    lv_cooldownLink = "";
    lv_chargeLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_heroIndex = libCore_gf_GetHeroIndexForUnitType(UnitGetType(lv_hero));
    auto17161144_ae = libGame_gv_players[lv_heroIndex].lv_heroData.lv_numberOfAbilities;
    auto17161144_ai = 1;
    lv_itAbility = 1;
    for ( ; ( (auto17161144_ai >= 0 && lv_itAbility <= auto17161144_ae) || (auto17161144_ai <= 0 && lv_itAbility >= auto17161144_ae) ) ; lv_itAbility += auto17161144_ai ) {
        if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_isAffectedByCooldownReduction == true) && (libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_isHeroic == false) && (libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_isTrait == false)) {
            lv_abilLink = libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_ability;
            lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.Link", UnitGetOwner(lv_hero));
            UnitModifyCooldown(lv_hero, lv_cooldownLink, -60.0, c_cooldownOperationAdd);
            if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_usesCharges == true)) {
                lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Charge.Link", UnitGetOwner(lv_hero));
                UnitAddChargeUsed(lv_hero, lv_chargeLink, -1.0);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentRewindActivate_Init () {
    libGDHL_gt_TalentRewindActivate = TriggerCreate("libGDHL_gt_TalentRewindActivate_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_TalentRewindActivate, c_playerAny, "TalentRewindSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Fury of the Storm
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentFuryoftheStorm_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_damage;
    fixed lv_modifiedDamage;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitBehaviorCount(EventUnitDamageSourceUnit(), "FuryoftheStormCarryBehavior") == 1) || (UnitBehaviorCount(EventUnitDamageSourceUnit(), "TalentBucketFuryoftheStormCarryBehavior") == 1) || (UnitBehaviorCount(EventUnitDamageSourceUnit(), "DemonHunterFuryoftheStormCarryBehavior") == 1) || (UnitBehaviorCount(EventUnitDamageSourceUnit(), "TalentBucketFuryoftheStormCarryBehaviorTychus") == 1)))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnitDamageSourceUnit(), "FuryoftheStormCooldown") == 0))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnitDamageSourceUnit(), "FuryoftheStormCooldownTychus") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damage = EventUnitDamageAttempted();
    lv_modifiedDamage = (lv_damage * (1.0 - libCore_gv_talents_FuryOfTheStormBounceDamagePercent_C));
    CatalogFieldValueSet(c_gameCatalogEffect, "FuryoftheStormHop1Damage", "Amount", UnitGetOwner(EventUnitDamageSourceUnit()), FixedToString(lv_modifiedDamage, c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogEffect, "FuryoftheStormHop2Damage", "Amount", UnitGetOwner(EventUnitDamageSourceUnit()), FixedToString(lv_modifiedDamage, c_fixedPrecisionAny));
    UnitCreateEffectUnit(EventUnitDamageSourceUnit(), "FuryoftheStormHop1Delay", EventUnit());
    if (((UnitBehaviorCount(EventUnitDamageSourceUnit(), "FuryoftheStormCarryBehavior") == 1) || (UnitBehaviorCount(EventUnitDamageSourceUnit(), "TalentBucketFuryoftheStormCarryBehavior") == 1) || (UnitBehaviorCount(EventUnitDamageSourceUnit(), "DemonHunterFuryoftheStormCarryBehavior") == 1))) {
        UnitBehaviorAdd(EventUnitDamageSourceUnit(), "FuryoftheStormCooldown", EventUnitDamageSourceUnit(), 1);
    }
    else if ((UnitBehaviorCount(EventUnitDamageSourceUnit(), "TalentBucketFuryoftheStormCarryBehaviorTychus") == 1)) {
        UnitBehaviorAdd(EventUnitDamageSourceUnit(), "FuryoftheStormCooldownTychus", EventUnitDamageSourceUnit(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentFuryoftheStorm_Init () {
    libGDHL_gt_TalentFuryoftheStorm = TriggerCreate("libGDHL_gt_TalentFuryoftheStorm_Func");
    TriggerAddEventUnitDamaged(libGDHL_gt_TalentFuryoftheStorm, null, c_unitDamageTypeBasic, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Eye of the Storm Explosion Damage Update
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentEyeoftheStormExplosionDamageUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, "EyeoftheStormExplodeDamage", "Amount", EventPlayer(), FixedToString((UnitGetPropertyFixed(EventUnit(), c_unitPropLifeMax, c_unitPropCurrent) * libCore_gv_talents_EyeOfTheStormExplosionDamagePercentage), c_fixedPrecisionAny));
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(UnitGetOwner(EventUnit()), UnitGetPosition(EventUnit()), 0.125, -1, 0.0, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentEyeoftheStormExplosionDamageUpdate_Init () {
    libGDHL_gt_TalentEyeoftheStormExplosionDamageUpdate = TriggerCreate("libGDHL_gt_TalentEyeoftheStormExplosionDamageUpdate_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_TalentEyeoftheStormExplosionDamageUpdate, null, "ResurgenceoftheStormRezDelay", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Eye of the Storm Cloak Suppression
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentEyeoftheStormCloakSuppression_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "HeroZeratul") || (UnitGetType(EventUnit()) == "HeroNova")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(EventUnit(), "HoldFire", 1);
    UnitBehaviorRemove(EventUnit(), "HoldFireInitial", 1);
    UnitBehaviorAdd(EventUnit(), "ZeratulPermanentCloakReveal", EventUnit(), 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentEyeoftheStormCloakSuppression_Init () {
    libGDHL_gt_TalentEyeoftheStormCloakSuppression = TriggerCreate("libGDHL_gt_TalentEyeoftheStormCloakSuppression_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_TalentEyeoftheStormCloakSuppression, null, "ResurgenceoftheStormRezDelay", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Swift Storm
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentSwiftStorm_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueModify(c_gameCatalogBehavior, "Mounted", "Modification.UnifiedMoveSpeedFactor", UnitGetOwner(EventUnit()), FixedToString(libGDHL_gv_bALHeroSwiftStormMountSpeedIncrease, c_fixedPrecisionAny), c_upgradeOperationAdd);
    CatalogFieldValueModify(c_gameCatalogBehavior, "SummonedUnitMountBehavior", "Modification.UnifiedMoveSpeedFactor", UnitGetOwner(EventUnit()), FixedToString(libGDHL_gv_bALHeroSwiftStormMountSpeedIncrease, c_fixedPrecisionAny), c_upgradeOperationAdd);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentSwiftStorm_Init () {
    libGDHL_gt_TalentSwiftStorm = TriggerCreate("libGDHL_gt_TalentSwiftStorm_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_TalentSwiftStorm, null, "TalentBucketSwiftStormCarryBehavior", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Follow Through
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentFollowThrough_Func (bool testConds, bool runActions) {
    int auto98ECC35E_ae;
    int auto98ECC35E_ai;

    // Variable Declarations
    int lv_i;
    unit lv_hero;
    int lv_heroIndex;
    string lv_abilLink;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(EventUnit(), "TalentBucketFollowThroughCooldown") == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "TalentBucketFollowThroughCarryBehavior") == true))) {
            return false;
        }

        if (!((AbilityCommandGetAbility(AbilityCommand("BarbarianShotofFury", 0)) != AbilityCommandGetAbility(EventUnitAbility())))) {
            return false;
        }

        if (!((AbilityCommandGetAbility(AbilityCommand("BarbarianAncientSpear", 0)) != AbilityCommandGetAbility(EventUnitAbility())))) {
            return false;
        }

        if (!((AbilityCommandGetAbility(AbilityCommand("L90ETCPowerslide", 0)) != AbilityCommandGetAbility(EventUnitAbility())))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hero = EventUnit();
    lv_heroIndex = libCore_gf_GetHeroIndexForUnitType(UnitGetType(lv_hero));
    auto98ECC35E_ae = libCore_gv_dataHeroesMaxAbilitiesPerHero;
    auto98ECC35E_ai = 1;
    lv_i = 1;
    for ( ; ( (auto98ECC35E_ai >= 0 && lv_i <= auto98ECC35E_ae) || (auto98ECC35E_ai <= 0 && lv_i >= auto98ECC35E_ae) ) ; lv_i += auto98ECC35E_ai ) {
        lv_abilLink = libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_i].lv_ability;
        if ((lv_abilLink == AbilityCommandGetAbility(EventUnitAbility()))) {
            UnitBehaviorAdd(lv_hero, "TalentBucketFollowThrough", lv_hero, 1);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentFollowThrough_Init () {
    libGDHL_gt_TalentFollowThrough = TriggerCreate("libGDHL_gt_TalentFollowThrough_Func");
    TriggerAddEventUnitAbility(libGDHL_gt_TalentFollowThrough, null, null, c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Gathering Power Takedowns
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentGatheringPowerTakedowns_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_unit;

    // Variable Initialization
    lv_player = libGame_gf_HeroParticipatedInTakedownKillingPlayer();
    lv_unit = libGame_gv_players[lv_player].lv_heroUnit;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libGame_gv_players[lv_player].lv_isDead == true) || (UnitHasBehavior2(lv_unit, "TalentGatheringPowerCarry") == false))) {
        return true;
    }

    if ((UnitGetType(lv_unit) == "HeroMurky")) {
        if (((UnitIsAlive(lv_unit) == true) || (UnitIsAlive(libGame_gv_heroDeathMurkyRespawnEggs[lv_player]) == true) || (libGame_gv_heroDeathMurkyRespawnEggs[lv_player] != null))) {
            UnitBehaviorAdd(lv_unit, "TalentGatheringPowerMurky", lv_unit, 1);
        }

    }
    else {
        if ((UnitIsAlive(lv_unit) == true)) {
            UnitBehaviorAdd(lv_unit, "TalentGatheringPowerStack", lv_unit, 1);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentGatheringPowerTakedowns_Init () {
    libGDHL_gt_TalentGatheringPowerTakedowns = TriggerCreate("libGDHL_gt_TalentGatheringPowerTakedowns_Func");
    libGame_gf_HeroParticipatedInTakedown(libGDHL_gt_TalentGatheringPowerTakedowns);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Gathering Power Removal
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentGatheringPowerRemoval_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_killedHero;
    int lv_gatheringPowerStacks;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(libGame_gf_HeroKilledUnit(), "TalentGatheringPowerCarry") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killedHero = libGame_gf_HeroKilledUnit();
    lv_gatheringPowerStacks = UnitBehaviorCount(lv_killedHero, "TalentGatheringPowerStack");
    lv_gatheringPowerStacks /= 2;
    UnitBehaviorRemove(lv_killedHero, "TalentGatheringPowerStack", c_unitBehaviorCountAll);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentGatheringPowerRemoval_Init () {
    libGDHL_gt_TalentGatheringPowerRemoval = TriggerCreate("libGDHL_gt_TalentGatheringPowerRemoval_Func");
    libGame_gf_HeroKilled(libGDHL_gt_TalentGatheringPowerRemoval);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Scouting Drone Self Revealer
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentScoutingDroneSelfRevealer_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget)) <= 12))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "ScoutingDroneApplySelfRevealer", EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentScoutingDroneSelfRevealer_Init () {
    libGDHL_gt_TalentScoutingDroneSelfRevealer = TriggerCreate("libGDHL_gt_TalentScoutingDroneSelfRevealer_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_TalentScoutingDroneSelfRevealer, c_playerAny, "TalentScoutingDroneDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Apply XP To MULE
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentApplyXPToMULE_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mULEUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mULEUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    libGame_gf_UpdateScalingForUnit(lv_mULEUnit, libGame_gv_scalingTicks, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentApplyXPToMULE_Init () {
    libGDHL_gt_TalentApplyXPToMULE = TriggerCreate("libGDHL_gt_TalentApplyXPToMULE_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_TalentApplyXPToMULE, c_playerAny, "CalldownMULEApplyTimedLifeBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Apply XP To Healing Ward
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentApplyXPToHealingWard_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_healingWardUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_healingWardUnit = EventUnit();
    libGame_gf_UpdateScalingForUnit(lv_healingWardUnit, libGame_gv_scalingTicks, 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentApplyXPToHealingWard_Init () {
    libGDHL_gt_TalentApplyXPToHealingWard = TriggerCreate("libGDHL_gt_TalentApplyXPToHealingWard_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_TalentApplyXPToHealingWard, null, "HealingWardTimedLife", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Cleanse DoT Behaviors
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentCleanseDoTBehaviors_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemoveCategory(EventUnit(), c_unitBehaviorFlagUser14);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentCleanseDoTBehaviors_Init () {
    libGDHL_gt_TalentCleanseDoTBehaviors = TriggerCreate("libGDHL_gt_TalentCleanseDoTBehaviors_Func");
    TriggerAddEventUnitBehaviorChange(libGDHL_gt_TalentCleanseDoTBehaviors, null, "ImmunetoDoTsBehavior", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Bribe - Add Stacks on Cooldown Reset
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentBribeAddStacksonCooldownReset_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_playerHero;

    // Variable Initialization
    lv_player = libGame_gf_SpecialCaseTalentCooldownResetPlayer();
    lv_playerHero = libGame_gv_players[lv_player].lv_heroUnit;

    // Conditions
    if (testConds) {
        if (!(((UnitHasBehavior2(libGame_gv_players[lv_player].lv_heroUnit, "TalentBribeTalentCarry") == true) || (PlayerHasTalent(libGame_gf_SpecialCaseTalentCooldownResetPlayer(), "BrightwingPixieCharm") == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_playerHero, "TalentBribeAdd100Token", lv_playerHero);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentBribeAddStacksonCooldownReset_Init () {
    libGDHL_gt_TalentBribeAddStacksonCooldownReset = TriggerCreate("libGDHL_gt_TalentBribeAddStacksonCooldownReset_Func");
    libGame_gf_SpecialCaseTalentCooldownReset(libGDHL_gt_TalentBribeAddStacksonCooldownReset);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talent - Bribe Camp Respawn Timer Modification
//--------------------------------------------------------------------------------------------------
bool libGDHL_gt_TalentBribeCampRespawnTimerModification_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_campIndex;

    // Variable Initialization
    lv_campIndex = libMapM_gf_JungleGetJungleCampForUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget));

    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gv_jungleCreepCamps[lv_campIndex].lv_defenderDefendersBribedCount += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGDHL_gt_TalentBribeCampRespawnTimerModification_Init () {
    libGDHL_gt_TalentBribeCampRespawnTimerModification = TriggerCreate("libGDHL_gt_TalentBribeCampRespawnTimerModification_Func");
    TriggerAddEventPlayerEffectUsed(libGDHL_gt_TalentBribeCampRespawnTimerModification, c_playerAny, "TalentBribeTimeReductionDummy");
}

void libGDHL_InitTriggers () {
    libGDHL_gt_SeasonalEventAnnounceCountdownNoIntro_Init();
    libGDHL_gt_DEBUGSeasonalEventSpawnChance_Init();
    libGDHL_gt_DEBUGSeasonalEventVictoryChance_Init();
    libGDHL_gt_HallowsEndHeadlessHorsemanFinale_Init();
    libGDHL_gt_HallowsEndHeadlessHorsemanDebug_Init();
    libGDHL_gt_LNYTimerLogic_Init();
    libGDHL_gt_LNYLNYTimerExpires_Init();
    libGDHL_gt_LNYRunEventInitialization_Init();
    libGDHL_gt_LNYPlayerClicksOnLunarNewYearUnit_Init();
    libGDHL_gt_LNYPlayerStopsCatchingLunarNewYearUnit_Init();
    libGDHL_gt_LNYLunarNewYearUnitDies_Init();
    libGDHL_gt_LNYLunarNewYearClickableUnitClicked_Init();
    libGDHL_gt_DEBUGLNYSpawnChance_Init();
    libGDHL_gt_LNYLunarNewYearVictorySequence_Init();
    libGDHL_gt_LNYLunarNewYearVictorySequenceTest_Init();
    libGDHL_gt_LNYAnnounceLNYCountdown_Init();
    libGDHL_gt_LNYAnnounceNormalCountdown_Init();
    libGDHL_gt_StarCraftEventTeamGetsEvent_Init();
    libGDHL_gt_StarCraftEventIdentifyGatesAsValidPoints_Init();
    libGDHL_gt_StarCraftEventPlayerBeginsCollectingArtifact_Init();
    libGDHL_gt_StarCraftEventPlayerStopsCollectingArtifact_Init();
    libGDHL_gt_StarCraftEventArtifactPieceGetsCollected_Init();
    libGDHL_gt_StarCraftEventSCVTurnsInArtifactPiece_Init();
    libGDHL_gt_StarCraftEventSCVDropsArtifact_Init();
    libGDHL_gt_StarCraftEventArtifactPieceGetsCollectedBySCV_Init();
    libGDHL_gt_StarCraftEventOpenTheGatesTimerStartedStartEvent_Init();
    libGDHL_gt_StarCraftEventEventTimerExpiresSpawningStops_Init();
    libGDHL_gt_StarCraftEventCompletelyEndEventTimerExpires_Init();
    libGDHL_gt_StarCraftEventOpenTheGateTimerExpires_Init();
    libGDHL_gt_StarCraftEventVictorySequenceTriggered_Init();
    libGDHL_gt_StarCraftEventSCVDies_Init();
    libGDHL_gt_StarCraftEventArtifactDies_Init();
    libGDHL_gt_LNYRoosterPlayerGivesWantedItem_Init();
    libGDHL_gt_LNYRoosterRoosterRejectsItem_Init();
    libGDHL_gt_LNYRoosterRoosterAcceptsItem_Init();
    libGDHL_gt_LNYRoosterRoosterStopsMoving_Init();
    libGDHL_gt_LNYRoosterPlayerCollectsItem_Init();
    libGDHL_gt_LNYRoosterEventTimerExpires_Init();
    libGDHL_gt_LNYOpenTheGatesTimerExpires_Init();
    libGDHL_gt_LNYRoosterInitializeMainUI_Init();
    libGDHL_gt_IncludeGameDataHelper_Init();
    libGDHL_gt_SummonedUnitAPApplication_Init();
    libGDHL_gt_HeroGenericCameraShakeLightTarget_Init();
    libGDHL_gt_HeroGenericCameraShakeMediumTarget_Init();
    libGDHL_gt_HeroGenericCameraShakeHeavyTarget_Init();
    libGDHL_gt_HeroGenericCameraShakeAutoCaster_Init();
    libGDHL_gt_HeroGenericCameraShakeLightCaster_Init();
    libGDHL_gt_HeroGenericCameraShakeMediumCaster_Init();
    libGDHL_gt_HeroGenericCameraShakeHeavyCaster_Init();
    libGDHL_gt_HeroPortBackToBase_Init();
    libGDHL_gt_HeroPortBackToBaseStart_Init();
    libGDHL_gt_HeroPortBackToBaseEnd_Init();
    libGDHL_gt_HeroPortBackToBaseFizzle_Init();
    libGDHL_gt_HeroGenericApplyFlashbangEffect_Init();
    libGDHL_gt_HeroGenericRemoveFlashBangEffect_Init();
    libGDHL_gt_HeroGenericSpeedRibbonController_Init();
    libGDHL_gt_HeroicSummonsUnitGainsHeroicSummonBehavior_Init();
    libGDHL_gt_HeroAbathurAbathurExitsTransport_Init();
    libGDHL_gt_HeroAbathurSymbiote_Init();
    libGDHL_gt_HeroAbathurCarapaceRegenerativeMicrobes_Init();
    libGDHL_gt_HeroAbathurSymbioteScreenEffect_Init();
    libGDHL_gt_HeroAbathurStabFacer_Init();
    libGDHL_gt_HeroAbathurVolatileMutationUltimateEvolution_Init();
    libGDHL_gt_HeroAbathurUltimateEvolutionStartControl_Init();
    libGDHL_gt_HeroAbathurUltimateEvolutionStopControl_Init();
    libGDHL_gt_HeroAbathurUltimateEvolutionUnitDead_Init();
    libGDHL_gt_HeroAbathurLocustSpawned_Init();
    libGDHL_gt_HeroAbathurLocustNestSetFacing_Init();
    libGDHL_gt_HeroAbathurLocustNestCast_Init();
    libGDHL_gt_HeroAbathurSymbioteHivemindSingleTarget_Init();
    libGDHL_gt_HeroAbathurSymbioteHivemindStab_Init();
    libGDHL_gt_HeroAbathurMonstrosityAddMinionKillStacks_Init();
    libGDHL_gt_HeroAbathurMonstrosityInitialHooktoAI_Init();
    libGDHL_gt_HeroAbathurMonstrositySymbioteendHooktoAI_Init();
    libGDHL_gt_HeroAbathurMonstrosityDeselectedHooktoAI_Init();
    libGDHL_gt_HeroAbathurMonstrosityUnhookAI_Init();
    libGDHL_gt_HeroAbathurMonstrosityKillInitialTarget_Init();
    libGDHL_gt_HeroAbathurMonstrosityAddSymbioteStacks_Init();
    libGDHL_gt_HeroAbathurSymbiotedMonstrositySymbioted_Init();
    libGDHL_gt_HeroArtanisBladeDashPhasePrismCast_Init();
    libGDHL_gt_HeroArtanisTwinBladesZealotChargeTargeting_Init();
    libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamSetTarget_Init();
    libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamUnitCreated_Init();
    libGDHL_gt_HeroArtanisSpearofAdunPurifierBeamRedirectTarget2ElectricBoogaloo_Init();
    libGDHL_gt_HeroArthasAntiMagicShellHeal_Init();
    libGDHL_gt_HeroArthasDeathCoilImmortalCoilStoreDamageDealt_Init();
    libGDHL_gt_HeroArthasDeathCoilImmortalCoilAddHeroDamageBonusHealing_Init();
    libGDHL_gt_HeroArthasArmyoftheDeadMinionAITakeoverDeath_Init();
    libGDHL_gt_HeroArthasArmyoftheDeadMinionAITakeoverTransport_Init();
    libGDHL_gt_HeroArthasArmyoftheDeadPortGhouls_Init();
    libGDHL_gt_HeroArthasArmyoftheDeadGhoulSpawned_Init();
    libGDHL_gt_HeroAnubarakBurrowChargeSuppressCollision_Init();
    libGDHL_gt_HeroAnubarakBurrowChargeMaxRange_Init();
    libGDHL_gt_HeroAnubarakBurrowChargeCancel_Init();
    libGDHL_gt_HeroAnubarakBurrowChargeUnpathableCheck_Init();
    libGDHL_gt_HeroAnubarakBeetleCreation_Init();
    libGDHL_gt_HeroAnubarakBeetleJuicedMasterySpecialDeathStateProc_Init();
    libGDHL_gt_HeroAnubarakCocoonSoundEffect_Init();
    libGDHL_gt_HeroAnubarakCocoonOn_Init();
    libGDHL_gt_HeroAnubarakCocoonOff_Init();
    libGDHL_gt_HeroAzmodanSpawned_Init();
    libGDHL_gt_HeroAzmodanSinsGraspCooldownProc_Init();
    libGDHL_gt_HeroAzmodanDemonicInvasionHookUnitsIntoAI_Init();
    libGDHL_gt_HeroAzmodanDemonicInvasionUnpathableLocation_Init();
    libGDHL_gt_HeroAzmodanCustomKillVO_Init();
    libGDHL_gt_HeroAzmodanGlobeofAnnihilationRevealerCreate_Init();
    libGDHL_gt_HeroAzmodanDemonLieutenantCreate_Init();
    libGDHL_gt_HeroAzmodanDemonCreate_Init();
    libGDHL_gt_HeroAzmodanDemonCreateBattlebornMastery_Init();
    libGDHL_gt_HeroAzmodanDemonGeneralBirthFacing_Init();
    libGDHL_gt_HeroSonyaWrathoftheBerserkerBuffDurationExtension_Init();
    libGDHL_gt_HeroBarbarianAncientSpearLaunchBarbarianUsed_Init();
    libGDHL_gt_HeroBarbarianLeap_Init();
    libGDHL_gt_HeroBarbarianLeapRefactor_Init();
    libGDHL_gt_HeroButcherButchersBrandDurationRefresh_Init();
    libGDHL_gt_HeroButcherGainsEnraged_Init();
    libGDHL_gt_HeroButcherRuthlessOnslaughtTargetAudioTelegraph_Init();
    libGDHL_gt_HeroButcherRuthlessOnslaughtTravelValidation_Init();
    libGDHL_gt_HeroButcherRuthlessOnslaughtCast_Init();
    libGDHL_gt_HeroButcherRuthlessOnslaughtCancelAnimationHook_Init();
    libGDHL_gt_HeroButcherGainsOmnivoreTalent_Init();
    libGDHL_gt_HeroButcherRemoveFreshMeatOnDeath_Init();
    libGDHL_gt_HeroButcherButcherParticipatedInTakedown_Init();
    libGDHL_gt_HeroButcherButcherParticipatedinNPCTakedown_Init();
    libGDHL_gt_HeroButcherBloodGlobeVehicleLogic_Init();
    libGDHL_gt_HeroChenWanderingKegActivate_Init();
    libGDHL_gt_HeroChenWanderingKegMoveTracker_Init();
    libGDHL_gt_HeroChenWanderingKegDeactivate_Init();
    libGDHL_gt_HeroChenStormEarthAndFireStasis_Init();
    libGDHL_gt_HeroChenStormEarthAndFireStasisCleanup_Init();
    libGDHL_gt_HeroChenStormEarthFireActivatedNew_Init();
    libGDHL_gt_HeroChenElementDies_Init();
    libGDHL_gt_HeroChenElementFatalDamageResponse_Init();
    libGDHL_gt_HeroChenStormEarthFireRegenerationMaster_Init();
    libGDHL_gt_HeroChenExpirationCleanup_Init();
    libGDHL_gt_HeroChenStormEarthFireEarthAbility_Init();
    libGDHL_gt_HeroChenStormEarthFireMinesEntrance_Init();
    libGDHL_gt_HeroChenSwiftReflexesTalentMissed_Init();
    libGDHL_gt_HeroChenPurifyingBrewTalentProc_Init();
    libGDHL_gt_HeroChenFreshestIngredientsTalentProc_Init();
    libGDHL_gt_CrusaderFallingSwordTeleport_Init();
    libGDHL_gt_CrusaderFallingSwordFinalSet_Init();
    libGDHL_gt_HeroDiabloOverPowerFacing_Init();
    libGDHL_gt_HeroDiabloInfernoBreathCast_Init();
    libGDHL_gt_HeroDiabloInfernoBreathEnd_Init();
    libGDHL_gt_HeroDiabloInfernalPowerProc_Init();
    libGDHL_gt_HeroDiabloBlackSoulstoneTalentsProc_Init();
    libGDHL_gt_HeroDiabloBlackSoulstoneStackTalentPicked_Init();
    libGDHL_gt_HeroDemonHunterVaultDamageBuff_Init();
    libGDHL_gt_HeroDemonHunterManticoreProc_Init();
    libGDHL_gt_HeroDemonHunterPunishmentInitialPick_Init();
    libGDHL_gt_HeroDemonHunterGloomCast_Init();
    libGDHL_gt_HeroDryadLeapingStrikeSetTargetVariable_Init();
    libGDHL_gt_HeroDryadLeapingStrikeFindLandingLocation_Init();
    libGDHL_gt_HeroDryadLeapingStrikeCreateAttackPersistent_Init();
    libGDHL_gt_HeroDryadNaturesToxinHandleApplication_Init();
    libGDHL_gt_HeroDryadWispDividingWispDuration_Init();
    libGDHL_gt_HeroDryadDanceCancelOrders_Init();
    libGDHL_gt_HeroDryadAbolishMagicBehaviorActivate_Init();
    libGDHL_gt_HeroDryadAbolishMagicBehaviorDeactivate_Init();
    libGDHL_gt_HeroDryadAbolishMagicCCRecognition_Init();
    libGDHL_gt_HeroDryadActivateCameraSettings_Init();
    libGDHL_gt_HeroDryadDeactivateCameraSettings_Init();
    libGDHL_gt_HeroDryadActivateCameraforSymbiote_Init();
    libGDHL_gt_HeroDryadLossofControlCamera_Init();
    libGDHL_gt_HeroGreymaneCursedBulletDamage_Init();
    libGDHL_gt_HeroGreymaneGofortheThroatSpecialDeathProcs_Init();
    libGDHL_gt_HeroGreymaneTalentWizenedDuelistTakedowns_Init();
    libGDHL_gt_HeroGreymaneActorSoundSwaps_Init();
    libGDHL_gt_HeroFaerieDragonPhaseShiftCamera_Init();
    libGDHL_gt_HeroFaerieDragonPixieCharmChargeCountProc_Init();
    libGDHL_gt_HeroFalstadWingmanVariables_Init();
    libGDHL_gt_HeroFalstadThunderstormRefresh_Init();
    libGDHL_gt_HeroFalstadFlightCameraHeightRestore_Init();
    libGDHL_gt_HeroIllidanApplyFotBCooldownonInventoryUse_Init();
    libGDHL_gt_HeroIllidanMetamorphosisAvatarApplyHealthBuff_Init();
    libGDHL_gt_HeroIllidanTheHuntTargetDistanceCheck_Init();
    libGDHL_gt_HeroIllidanTheHuntNowhereToHideTalentActivate_Init();
    libGDHL_gt_HeroIllidanBladesOfAzzinothAddCharge_Init();
    libGDHL_gt_HeroIllidanMetamorphasisActivate_Init();
    libGDHL_gt_HeroIllidanMetamorphasisDeactivate_Init();
    libGDHL_gt_HeroIllidanUnendingHatredHeroTakedown_Init();
    libGDHL_gt_HeroIllidanUnendingHatredNPCKill_Init();
    libGDHL_gt_HeroJainaWaterElementalCreated_Init();
    libGDHL_gt_HeroJainaWaterElementalCommand_Init();
    libGDHL_gt_HeroJainaFrostboltWintermuteCast_Init();
    libGDHL_gt_HeroJainaConeofColdWintermuteCast_Init();
    libGDHL_gt_HeroJainaBlizzardWintermuteCast_Init();
    libGDHL_gt_HeroJainaWaterElementalVehicleInitial_Init();
    libGDHL_gt_HeroJainaIceBarrierAddShields_Init();
    libGDHL_gt_HeroJainaImprovedIceBlockOverlayOn_Init();
    libGDHL_gt_HeroJainaImprovedIceBlockOverlayOff_Init();
    libGDHL_gt_HeroKaelthasPhoenixSpawnSelection_Init();
    libGDHL_gt_HeroKaelthasTwinSpheresTalentPickCooldownReset_Init();
    libGDHL_gt_HeroKaelthasPyroblastMissileCreated_Init();
    libGDHL_gt_HeroKaelthasPryoblastMissileTeleportValidation_Init();
    libGDHL_gt_HeroKerriganAssimilationPassiveAddShields_Init();
    libGDHL_gt_HeroKerriganRavageCDR_Init();
    libGDHL_gt_HeroKerriganRavageCDROnHeroSpecialDeathState_Init();
    libGDHL_gt_HeroKerriganRavageCDROnTowerSpecialDeathState_Init();
    libGDHL_gt_HeroKerriganSicUltralisk_Init();
    libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbility_Init();
    libGDHL_gt_HeroKerriganUltraliskUpdateOrdersOnIssueOrderAbilityPoint_Init();
    libGDHL_gt_HeroKerriganUltraliskTorrasqueReborn_Init();
    libGDHL_gt_HeroKerriganUltraliskDies_Init();
    libGDHL_gt_HeroKerriganQueensRushProc_Init();
    libGDHL_gt_HeroETCProgRockTalentRegenGlobeProc_Init();
    libGDHL_gt_HeroL90ETCPowerslideTargetCheck_Init();
    libGDHL_gt_HeroL90ETCStageDiveTeleportUnit_Init();
    libGDHL_gt_HeroL90ETCStageDiveFinalSet_Init();
    libGDHL_gt_HeroL90ETCMoshPitOn_Init();
    libGDHL_gt_HeroLiLiCloudSerpentSurgingWindsAbilityPowerTransference_Init();
    libGDHL_gt_HeroLiLiCloudSerpentStatTracking_Init();
    libGDHL_gt_HeroLiLiCloudSerpentTurretSerpentSerpentSidekickSummonandSimplifiedAI_Init();
    libGDHL_gt_HeroLiLiCloudSerpentTurretSerpentSummonandSimplifiedAI_Init();
    libGDHL_gt_HeroLiLiCloudSerpentSummonandSimplifiedAI_Init();
    libGDHL_gt_HeroLiLiCloudSerpentAttackMimic_Init();
    libGDHL_gt_HeroLiLiShakeItOffCCProc_Init();
    libGDHL_gt_LeoricSpawn_Init();
    libGDHL_gt_HeroLeoricWraithWalkDevouringMawSpecialCase_Init();
    libGDHL_gt_HeroLeoricWraithWalkCast_Init();
    libGDHL_gt_LeoricUndyingStart_Init();
    libGDHL_gt_LeoricUndyingEnd_Init();
    libGDHL_gt_LeoricSwappedDuringUndying_Init();
    libGDHL_gt_LeoricUndyingHealingDeathTimerReduction_Init();
    libGDHL_gt_LeoricUIInitialize_Init();
    libGDHL_gt_LeoricUICleanUpUIForHeroSwap_Init();
    libGDHL_gt_HeroLeoricAddReanimationStackWhileInVehicle_Init();
    libGDHL_gt_LeoricFealtyUntoDeathEnemyNPCProcListener_Init();
    libGDHL_gt_LeoricFealtyUntoDeathAlliedNPCProcListener_Init();
    libGDHL_gt_HeroLostVikingsVikingBriberyNPCProcListener_Init();
    libGDHL_gt_HeroLostVikingsVikingBriberyUsed_Init();
    libGDHL_gt_HeroLostVikingsVikingBriberyScoreReset_Init();
    libGDHL_gt_HeroLostVikingsVikingBriberyAddStacksonCooldownReset_Init();
    libGDHL_gt_HeroLostVikingsVikingHoard_Init();
    libGDHL_gt_HeroLostVikingsSpinToWin_Init();
    libGDHL_gt_HeroLostVikingsOlafTheStout_Init();
    libGDHL_gt_HeroLostVikingsRespawnTimerExpires_Init();
    libGDHL_gt_HeroLostVikingsSpawn_Init();
    libGDHL_gt_HeroLostVikingsDebugSwap_Init();
    libGDHL_gt_HeroLostVikingsVikingDies_Init();
    libGDHL_gt_HeroLostVikingsVikingRemoved_Init();
    libGDHL_gt_HeroLostVikingsUnderAttackPing_Init();
    libGDHL_gt_HeroLostVikingsUnderAttackUI_Init();
    libGDHL_gt_HeroLostVikingsXPGain_Init();
    libGDHL_gt_HeroLostVikingsBehaviorTalentGained_Init();
    libGDHL_gt_HeroLostVikingsUnitControllerUpdate_Init();
    libGDHL_gt_HeroLostVikingsMoonwellRedistribution_Init();
    libGDHL_gt_HeroLostVikingsVikingEntersStasis_Init();
    libGDHL_gt_HeroLostVikingsVikingsLeavesStasis_Init();
    libGDHL_gt_HeroLostVikingsUnitClicked_Init();
    libGDHL_gt_HeroLostVikingsUseVehicle_Init();
    libGDHL_gt_HeroLostVikingsUseTransport_Init();
    libGDHL_gt_HeroLostVikingsRallyCast_Init();
    libGDHL_gt_HeroLostVikingsRallyFinishCancel_Init();
    libGDHL_gt_HeroLostVikingsRallySounds_Init();
    libGDHL_gt_HeroLostVikingsPlayAgainComplete_Init();
    libGDHL_gt_HeroLostVikingsPlayAgainForceGhostFacingPlacement_Init();
    libGDHL_gt_HeroLostVikingsCheckpointTimerPauseinTimeStop_Init();
    libGDHL_gt_HeroLostVikingsCheckpointReachedTimerCountdown_Init();
    libGDHL_gt_HeroLostVikingsCheckpointReachTimerExpires_Init();
    libGDHL_gt_HeroLostVikingsLongboatRaidSelection_Init();
    libGDHL_gt_HeroLostVikingsLongboatRaidEndsResetControlGroups_Init();
    libGDHL_gt_HeroLostVikingsLongboatRaidExpiration_Init();
    libGDHL_gt_HeroLostVikingsHideVikingsOn_Init();
    libGDHL_gt_HeroLostVikingsLongboatRaidTargetResponse_Init();
    libGDHL_gt_HeroLostVikingsAbathurClone_Init();
    libGDHL_gt_HeroLostVikingsCloneLongboatRaidSelection_Init();
    libGDHL_gt_HeroLostVikingsCloneLongboatRaidExpiration_Init();
    libGDHL_gt_LostVikingsUIInitialize_Init();
    libGDHL_gt_LostVikingsUIUpdate_Init();
    libGDHL_gt_LostVikingsUICleanUpUIForDebugHeroSwap_Init();
    libGDHL_gt_LostVikingsConsoleUnitStatusBarsChannelBehaviorAdded_Init();
    libGDHL_gt_HeroMalfurionTwilightDreamSilenceTarget_Init();
    libGDHL_gt_HeroMalfurionTwilightDreamSilenceEnd_Init();
    libGDHL_gt_HeroMalfurionInnervateCDR_Init();
    libGDHL_gt_MedicUIInitialize_Init();
    libGDHL_gt_HeroMedicAIDisplacementGrenadeThink_Init();
    libGDHL_gt_HeroMedicMedivacDropshipSetDropoffLocation_Init();
    libGDHL_gt_HeroMedicMedivacDropshipEnRouteOrders_Init();
    libGDHL_gt_HeroMedicMedivacDropOffReselectionForMedic_Init();
    libGDHL_gt_HeroMedicMedivacDropshipDeathCleanup_Init();
    libGDHL_gt_HeroMedicMedivacTextTags_Init();
    libGDHL_gt_HeroMedicMedivacDropshipSelection_Init();
    libGDHL_gt_HeroMedicMedivacDropshipPrepareWarning_Init();
    libGDHL_gt_HeroMedicMedivacDropshipDropoffSelection_Init();
    libGDHL_gt_HeroMedicMedivacDropshipTransportEvent_Init();
    libGDHL_gt_HeroMedicMedivacDropshipTransportExitEvent_Init();
    libGDHL_gt_HeroMedicMedivacDropshipOverlayOn_Init();
    libGDHL_gt_HeroMedicMedivacDropshipOverlayOff_Init();
    libGDHL_gt_HeroMedicMedivacDropshipCountdownSound_Init();
    libGDHL_gt_HeroMedicMedivacBeingBoarded_Init();
    libGDHL_gt_HeroMedicMedivacGameOverHide_Init();
    libGDHL_gt_HeroMedicHealingBeamLookAt_Init();
    libGDHL_gt_HeroMedicHearthCleanup_Init();
    libGDHL_gt_HeroMedicHealingBeamAllyRangeVisibility_Init();
    libGDHL_gt_HeroMedicSafeguardDamageReductionBehaviorResponses_Init();
    libGDHL_gt_HeroMonkSixthSenseProc_Init();
    libGDHL_gt_MonkDivinePalmSetLife_Init();
    libGDHL_gt_HeroMonkDivinePalmOverlayOn_Init();
    libGDHL_gt_HeroMonkDivinePalmOverlayOff_Init();
    libGDHL_gt_HeroMonkSevenSidedStrikeTakeFacing_Init();
    libGDHL_gt_HeroMonkSevenSidedStrikeFinishSetFacing_Init();
    libGDHL_gt_HeroMonkAbathurUltimateEvolutionClone_Init();
    libGDHL_gt_HeroMuradinDwarfToss_Init();
    libGDHL_gt_HeroMuradinHaymaker_Init();
    libGDHL_gt_HeroMuradinAvatarApplyHealthBuff_Init();
    libGDHL_gt_MurkySpawn_Init();
    libGDHL_gt_MurkyUIInitialize_Init();
    libGDHL_gt_HeroMurkyMurkyEggDies_Init();
    libGDHL_gt_HeroMurkyMurkyDies_Init();
    libGDHL_gt_HeroMurkyReviveWhileEggIsAlive_Init();
    libGDHL_gt_HeroMurkyCreateEggOnSpawn_Init();
    libGDHL_gt_HeroMurkyCleanUpEggUIForDebugHeroSwap_Init();
    libGDHL_gt_HeroMurkyAFishyDealVariables_Init();
    libGDHL_gt_HeroMurkyAFishyDealChargeCountProc_Init();
    libGDHL_gt_HeroMurkyEggHuntUnitGroupController_Init();
    libGDHL_gt_HeroMurkyFishEyeDynamicApplication_Init();
    libGDHL_gt_HeroMurkyRespawnEggCreated_Init();
    libGDHL_gt_HeroMurkyAssaultEggBuffChanges_Init();
    libGDHL_gt_HeroNecromancerSkeletonMasteryProc_Init();
    libGDHL_gt_HeroNecromancerSkeletonMasterySpawned_Init();
    libGDHL_gt_HeroNecromancerSkeletonMasteryMaxCountProc_Init();
    libGDHL_gt_HeroNecromancerJailorsHooktoAI_Init();
    libGDHL_gt_HeroNecromancerTrackMortalWoundsDamageReduction_Init();
    libGDHL_gt_HeroNecromancerMortalWoundsDebuffController_Init();
    libGDHL_gt_HeroNecromancerSpawnBoneArmorItem_Init();
    libGDHL_gt_HeroNecromancerRaisedMageProc_Init();
    libGDHL_gt_HeroNovaCovertMissionTakedown_Init();
    libGDHL_gt_HeroNovaCovertMissionVariables_Init();
    libGDHL_gt_HeroNovaTripleTapAbilityUsed_Init();
    libGDHL_gt_HeroNovaTripleTapMissiles_Init();
    libGDHL_gt_HeroNovaTripleTapMissileCleanup_Init();
    libGDHL_gt_HeroNovaHoloCloneSpawned_Init();
    libGDHL_gt_HeroNovaDamageBasedDecloak_Init();
    libGDHL_gt_HeroNovaHoloCloneSpawnMatchMapMechanics_Init();
    libGDHL_gt_HeroNovaHoloDecoyIssueOrderAbility_Init();
    libGDHL_gt_HeroNovaHoloDecoyDoubleFakeApplyIssueOrder_Init();
    libGDHL_gt_HeroNovaAntiArmorShellsAttackCooldown_Init();
    libGDHL_gt_HeroRaynorRaynorsBansheeFlyIn_Init();
    libGDHL_gt_HeroRaynorRaynorsBansheeFlyOut_Init();
    libGDHL_gt_HeroRaynorBansheesCommand_Init();
    libGDHL_gt_HeroRaynorRelentlessLeaderStunProc_Init();
    libGDHL_gt_HeroRaynorACardToPlayTalentGained_Init();
    libGDHL_gt_HeroRaynorACardToPlayHeroTakedown_Init();
    libGDHL_gt_HeroRaynorPuttinOnAClinicSpecialDeathStateProc_Init();
    libGDHL_gt_HeroRaynorRaiderRecruitmentAddStacksonCooldownReset_Init();
    libGDHL_gt_HeroRehgarTotemicProjectionTalentSaveTotem_Init();
    libGDHL_gt_HeroRehgarTotemicProjectionTalentMoveTotem_Init();
    libGDHL_gt_HeroRehgarTotemicProjectionResetOnRewindUse_Init();
    libGDHL_gt_HeroRehgarLightningShieldRisingStormTalentInitial_Init();
    libGDHL_gt_HeroRehgarLightningShieldRisingStormTalentPeriodic_Init();
    libGDHL_gt_HeroRehgarTidalWavesModifyCooldown_Init();
    libGDHL_gt_HeroRehgarEarthlivingEnchantHotApply_Init();
    libGDHL_gt_HeroRehgarFarseersBlessingMastery_Init();
    libGDHL_gt_HeroRehgarBreakGhostWolfOnAttack_Init();
    libGDHL_gt_HeroRehgarGhostWolfAfterPortToTown_Init();
    libGDHL_gt_HeroRehgarGhostWolfMountingSpecialCase_Init();
    libGDHL_gt_RexxarUIInitialize_Init();
    libGDHL_gt_RexxarUICleanupForHeroSwap_Init();
    libGDHL_gt_HeroRexxarCleanUpForAbathurUltimateEvolutionClone_Init();
    libGDHL_gt_HeroRexxarUnleashtheBoarsCast_Init();
    libGDHL_gt_HeroRexxarMishaClearPursuitTargetonUnitDeath_Init();
    libGDHL_gt_HeroRexxarMishaSetPursuitTargetFromMishaFocus_Init();
    libGDHL_gt_HeroRexxarMishaClearPursuitTargetFromMishaFollow_Init();
    libGDHL_gt_HeroRexxarMishaSetPursuitTargetFromAttacks_Init();
    libGDHL_gt_HeroRexxarMishaFixateUsed_Init();
    libGDHL_gt_HeroRexxarMishaGainsMapMechanicStack_Init();
    libGDHL_gt_HeroRexxarMishaChargeDisable_Init();
    libGDHL_gt_HeroRexxarMishaMendPetDisable_Init();
    libGDHL_gt_HeroRexxarMishaSpawn_Init();
    libGDHL_gt_HeroRexxarMishaDance_Init();
    libGDHL_gt_HeroRexxarRexxarDies_Init();
    libGDHL_gt_HeroRexxarRemoveMisha_Init();
    libGDHL_gt_HeroRexxarRexxarStasisStartIncludesFeignDeath_Init();
    libGDHL_gt_HeroRexxarRexxarStasisEndIncludedFeignDeath_Init();
    libGDHL_gt_HeroRexxarMishaDies_Init();
    libGDHL_gt_HeroRexxarMishaGorgeEnd_Init();
    libGDHL_gt_HeroRexxarMishaTeleport_Init();
    libGDHL_gt_HeroRexxarMishaUnderworldGateUsed_Init();
    libGDHL_gt_HeroRexxarMishaVehicleUsed_Init();
    libGDHL_gt_HeroRexxarMishaVehicleDone_Init();
    libGDHL_gt_HeroRexxarStuffMishaIntoTransport_Init();
    libGDHL_gt_HeroRexxarKickMishaOutOfTransport_Init();
    libGDHL_gt_HeroRexxarMishaMountedBehaviorDisabled_Init();
    libGDHL_gt_HeroRexxarAliveMishaGrizzledFortitude_Init();
    libGDHL_gt_HeroRexxarAliveMishaEasyPrey_Init();
    libGDHL_gt_HeroRexxarAliveMishaWildfireBear_Init();
    libGDHL_gt_HeroRexxarAliveMishaAnimalHusbandry_Init();
    libGDHL_gt_HeroRexxarAliveMishaDireBeast_Init();
    libGDHL_gt_HeroRexxarAliveMishaPrimalIntimidation_Init();
    libGDHL_gt_HeroRexxarAliveMishaHunterGatherer_Init();
    libGDHL_gt_HeroRexxarHunterGathererController_Init();
    libGDHL_gt_HeroRexxarThrilloftheHuntProc_Init();
    libGDHL_gt_HeroRexxarHardenedSkin_Init();
    libGDHL_gt_HeroRexxarBestialWrathSpiritBondBearNecessitiesHealProc_Init();
    libGDHL_gt_HeroRexxarChargeCast_Init();
    libGDHL_gt_HeroRexxarFeignDeathOverlayOn_Init();
    libGDHL_gt_HeroRexxarFeignDeathOverlayOff_Init();
    libGDHL_gt_HeroSgtHammerCompleteHearthstone_Init();
    libGDHL_gt_HeroSgtHammerSiegeModeUpdate_Init();
    libGDHL_gt_HeroSgtHammerBluntForceGunPrepStart_Init();
    libGDHL_gt_HeroSgtHammerBluntForceGunTargetCalculation_Init();
    libGDHL_gt_HeroSgtHammerBluntForceGunCheckForLocation_Init();
    libGDHL_gt_HeroSgtHammerConcussiveBlastCancel_Init();
    libGDHL_gt_HeroSgtHammerResistantTalentProc_Init();
    libGDHL_gt_HeroStitchesHungryforMoreTalentRegenGlobeProc_Init();
    libGDHL_gt_HeroStitchesDevourLastBiteMasterySpecialDeathState_Init();
    libGDHL_gt_HeroStitchesRetchlingSpawned_Init();
    libGDHL_gt_HeroStitchesRetchlingVileGasRestorativeFumes_Init();
    libGDHL_gt_HeroStitchesHookHookVision_Init();
    libGDHL_gt_HeroStitchesHookSpawnHelpingHandItem_Init();
    libGDHL_gt_HeroStitchesHookLaunchTargetUsed_Init();
    libGDHL_gt_HeroStitchesGorgeDecreases_Init();
    libGDHL_gt_HeroStitchesGorgeActivate_Init();
    libGDHL_gt_HeroStitchesGorgeOff_Init();
    libGDHL_gt_HeroStitchesFleaBagProc_Init();
    libGDHL_gt_HeroSylvanasMindControlTargetSelect_Init();
    libGDHL_gt_HeroSylvanasMovementCommandForwarding_Init();
    libGDHL_gt_HeroAISylvanasHasCastWailingArrow_Init();
    libGDHL_gt_HeroSylvanasWailingArrowSilenceTarget_Init();
    libGDHL_gt_HeroSylvanasWailingArrowDeafeningBlastSilenceTarget_Init();
    libGDHL_gt_HeroSylvanasWailingArrowSilenceEnd_Init();
    libGDHL_gt_HeroSylvanasWitheringFireNPCKillAddCharge_Init();
    libGDHL_gt_HeroSylvanasWitheringFireHeroKillAddCharge_Init();
    libGDHL_gt_HeroSylvanasPossessionRewire_Init();
    libGDHL_gt_HeroTassadarKhaydarinResonanceTalentProc_Init();
    libGDHL_gt_HeroTassadarStaticChargeMasteryProc_Init();
    libGDHL_gt_HeroTassadarMentalAcuityProc_Init();
    libGDHL_gt_HeroTassadarWeaponIncrementvsTassadar_Init();
    libGDHL_gt_HeroTassadarUpdateDistortionBeamPeriod_Init();
    libGDHL_gt_ThrallUIInitialize_Init();
    libGDHL_gt_ThrallShowFrostwolfResilienceUI_Init();
    libGDHL_gt_ThrallGetsStackOfFrostwolfResilience_Init();
    libGDHL_gt_ThrallUICleanUpUIForDebugHeroSwap_Init();
    libGDHL_gt_ThrallUICleanUpUIForAbathurUltimateEvolutionClone_Init();
    libGDHL_gt_ThrallDies_Init();
    libGDHL_gt_HeroThrallWindfuryRideTheWindMasteryProc_Init();
    libGDHL_gt_HeroThrallEarthquakeEarthenShieldMasteryShieldApplication_Init();
    libGDHL_gt_HeroThrallSunderingUsed_Init();
    libGDHL_gt_HeroTinkerOverlockTurret_Init();
    libGDHL_gt_HeroTinkerDethLazorScaling_Init();
    libGDHL_gt_HeroTinkerDethLazorGoblinFusionScaling_Init();
    libGDHL_gt_HeroTinkerDethLazorTurningUpdate_Init();
    libGDHL_gt_HeroTinkerDethLazorCast_Init();
    libGDHL_gt_HeroTinkerDethLazorLeftClick_Init();
    libGDHL_gt_HeroTinkerDethLazorEnd_Init();
    libGDHL_gt_CombatStyleTinkerClockwerkSteamFistsDuration_Init();
    libGDHL_gt_CombatStyleTinkerMechaLordMasteryDuration_Init();
    libGDHL_gt_HeroTinkerRoboGoblinTurretFocusSetTarget_Init();
    libGDHL_gt_HeroTinkerItsRainingScrapProc_Init();
    libGDHL_gt_HeroTinkerFirinMahLazorzProc_Init();
    libGDHL_gt_HeroTinkerFirinMahLazorzTargetMemory_Init();
    libGDHL_gt_HeroTinkerRoboGoblinMechaLordTurretSelection_Init();
    libGDHL_gt_HeroTychusDashRegenGlobeProc_Init();
    libGDHL_gt_HeroTychusRelentlessSoldierTalentProc_Init();
    libGDHL_gt_HeroTychusMasterAssassinHeroTakedownProc_Init();
    libGDHL_gt_HeroTychusThatsTheStuffOn_Init();
    libGDHL_gt_HeroTychusThatsTheStuffDamageTracker_Init();
    libGDHL_gt_HeroTychusThatsTheStuffHealPreviewCatalog_Init();
    libGDHL_gt_HeroTychusThatsTheStuffOff_Init();
    libGDHL_gt_HeroTychusUpdateOrdersOnIssueOrderAbility_Init();
    libGDHL_gt_HeroTychusOverkillTargetedRetargetvH16_Init();
    libGDHL_gt_HeroTychusOverkillRollingReload_Init();
    libGDHL_gt_HeroTyraelSanctificationFacing_Init();
    libGDHL_gt_HeroTyraelArchangelsWrathSuppressCollision_Init();
    libGDHL_gt_HeroTyraelSanctificationFullscreenOverlayOn_Init();
    libGDHL_gt_HeroTyraelSanctificationFullscreenOverlayOff_Init();
    libGDHL_gt_HeroTyrandeSentinelShotTargetCalculation_Init();
    libGDHL_gt_HeroWitchDoctorZombiePrisonKillZombies_Init();
    libGDHL_gt_HeroWitchDoctorZombiePrisonRelicZombiesSpawned_Init();
    libGDHL_gt_HeroWitchDoctorRavenousSpiritCast_Init();
    libGDHL_gt_HeroWitchDoctorRavenousSpiritExpires_Init();
    libGDHL_gt_HeroWitchDoctorPassiveTarget_Init();
    libGDHL_gt_HeroWitchDoctorGargantuanIssueStompOrder_Init();
    libGDHL_gt_HeroWitchDoctorGargantuanCreated_Init();
    libGDHL_gt_HeroWitchDoctorGargantuanStompUsed_Init();
    libGDHL_gt_HeroWizardCriticalMassCDReduction_Init();
    libGDHL_gt_HeroWizardDominance_Init();
    libGDHL_gt_HeroWizardRemoveArchononHearth_Init();
    libGDHL_gt_HeroWizardIllusionistDamageCheck_Init();
    libGDHL_gt_HeroWizardAnnouncerVOOverride_Init();
    libGDHL_gt_HeroUtherBeaconofLightProc_Init();
    libGDHL_gt_HeroUtherBlessedChampionProc_Init();
    libGDHL_gt_HeroUtherSpiritofRedemptionCooldownReset_Init();
    libGDHL_gt_HeroUtherEternalDevotionSuppressCollision_Init();
    libGDHL_gt_HeroUtherDivineShieldFullscreenOverlayOn_Init();
    libGDHL_gt_HeroUtherDivineShieldFullscreenOverlayOff_Init();
    libGDHL_gt_HeroZagaraDevouringMawOverlayOn_Init();
    libGDHL_gt_HeroZagaraDevouringMawOverlayOff_Init();
    libGDHL_gt_HeroZagaraExitNydusWormUsed_Init();
    libGDHL_gt_HeroZagaraNydusWormSpawned_Init();
    libGDHL_gt_HeroZagaraNydusWormTargetingState_Init();
    libGDHL_gt_HeroZagaraNydusWormDies_Init();
    libGDHL_gt_HeroZagaraNydusWormDiesUpdateLineofSuccession_Init();
    libGDHL_gt_HeroZagaraNydusWormExitAnimation_Init();
    libGDHL_gt_HeroZagaraSummonNydusWormBroodlingSpawned_Init();
    libGDHL_gt_HeroZagaraRoachSpawned_Init();
    libGDHL_gt_HeroZagaraBanelingBarrage_Init();
    libGDHL_gt_HeroZagaraHydraliskorMutaliskControl_Init();
    libGDHL_gt_HeroZagaraInfestedDropSpawnRoach_Init();
    libGDHL_gt_HeroZagaraInfestScaling_Init();
    libGDHL_gt_HeroZagaraTyrantMawCDRonDeath_Init();
    libGDHL_gt_HeroZagaraHunterKillerHydraliskTransfusion_Init();
    libGDHL_gt_HeroZagaraEndlessCreepApplyBehavior_Init();
    libGDHL_gt_HeroZeratulShroudofAdunFCT_Init();
    libGDHL_gt_HeroZeratulSeekerintheDarkStructureTarget_Init();
    libGDHL_gt_HeroZeratulGrimTaskProc_Init();
    libGDHL_gt_HeroZeratulShadowHunterTalentProc_Init();
    libGDHL_gt_HeroZeratulVoidPrisonApplyStasisOverlay_Init();
    libGDHL_gt_HeroZeratulVoidPrisonRemoveStasisOverlay_Init();
    libGDHL_gt_HeroZeratulDamageBasedDecloak_Init();
    libGDHL_gt_TalentOverdriveUpdateManaAndAP_Init();
    libGDHL_gt_TalentBucketMarksmanOnUpdateStats_Init();
    libGDHL_gt_TalentBucketDistortionBeamDamageAddCooldownBehavior_Init();
    libGDHL_gt_FocusedAttackCooldown_Init();
    libGDHL_gt_TalentIceBlockOverlayOn_Init();
    libGDHL_gt_TalentIceBlockOverlayOff_Init();
    libGDHL_gt_TalentRewindActivate_Init();
    libGDHL_gt_TalentFuryoftheStorm_Init();
    libGDHL_gt_TalentEyeoftheStormExplosionDamageUpdate_Init();
    libGDHL_gt_TalentEyeoftheStormCloakSuppression_Init();
    libGDHL_gt_TalentSwiftStorm_Init();
    libGDHL_gt_TalentFollowThrough_Init();
    libGDHL_gt_TalentGatheringPowerTakedowns_Init();
    libGDHL_gt_TalentGatheringPowerRemoval_Init();
    libGDHL_gt_TalentScoutingDroneSelfRevealer_Init();
    libGDHL_gt_TalentApplyXPToMULE_Init();
    libGDHL_gt_TalentApplyXPToHealingWard_Init();
    libGDHL_gt_TalentCleanseDoTBehaviors_Init();
    libGDHL_gt_TalentBribeAddStacksonCooldownReset_Init();
    libGDHL_gt_TalentBribeCampRespawnTimerModification_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libGDHL_InitLib_completed = false;

void libGDHL_InitLib () {
    if (libGDHL_InitLib_completed) {
        return;
    }

    libGDHL_InitLib_completed = true;

    libGDHL_InitLibraries();
    libGDHL_InitVariables();
    libGDHL_InitCustomScript();
    libGDHL_InitTriggers();
}

include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/MapMechanicsLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"
include "TriggerLibs/StartingExperienceLib"
include "TriggerLibs/SoundLib"
include "TriggerLibs/SupportLib"

