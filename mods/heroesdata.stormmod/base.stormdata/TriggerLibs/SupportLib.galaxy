include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib_h"
include "TriggerLibs/GameLib_h"
include "TriggerLibs/MapMechanicsLib_h"
include "TriggerLibs/AILib_h"
include "TriggerLibs/UILib_h"
include "TriggerLibs/StartingExperienceLib_h"
include "TriggerLibs/GameDataHelperLib_h"

include "TriggerLibs/SupportLib_h"

//--------------------------------------------------------------------------------------------------
// Library: Support
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libSprt_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libMapM_InitVariables();
    libAIAI_InitVariables();
    libUIUI_InitVariables();
    libStEx_InitVariables();
    libGDHL_InitVariables();
}

// Variable Initialization
bool libSprt_InitVariables_completed = false;

void libSprt_InitVariables () {
    int init_i;

    if (libSprt_InitVariables_completed) {
        return;
    }

    libSprt_InitVariables_completed = true;

    libSprt_gv_dataMiningPeriodicTimer = TimerCreate();
    for (init_i = 0; init_i <= libSprt_gv_dataMiningMaxNumberOfDifferentManaRegenSources; init_i += 1) {
        libSprt_gv_dataMiningManaRegenSourceNames[init_i] = "";
    }
    libSprt_gv_dEBUGBalanceProbeTimer = TimerCreate();
    libSprt_gv_dEBUGCombatTextEnabled = true;
    libSprt_gv_dEBUGDebugMessagesEnabled = true;
    libSprt_gv_dEBUGMapTextEnabled = true;
    libSprt_gv_dEBUGDPSTrackerGroup = UnitGroupEmpty();
    libSprt_gv_dEBUGDPSTrackerTimer = TimerCreate();
}

// Functions
void libSprt_gf_PerformanceTestStartPerformanceTest (string lp_name) {
    // Implementation
    UnitStatsStart(StringToText(lp_name), StringExternal("Param/Value/lib_Sprt_4E3C325E"), StringExternal("Param/Value/lib_Sprt_22E09DDC"));
    PerfTestStart(StringToText(lp_name));
}

void libSprt_gf_PerformanceTestStopPerformanceTest () {
    // Implementation
    UnitStatsStop();
    PerfTestStop();
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_EBB0E5D4"), true);
}

void libSprt_gf_PerformanceTestHeroSelectScreen () {
    // Implementation
    libGame_gv_players[1].lv_heroIndex = 1;
    Wait(2.0, c_timeGame);
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_B353FF5C"), true);
    libSprt_gf_PerformanceTestStartPerformanceTest("Hero Select Screen");
    Wait(10.0, c_timeGame);
    libSprt_gf_PerformanceTestStopPerformanceTest();
}

void libSprt_gf_PerformanceTestHeroesIdleBeforeGame () {
    // Variable Declarations
    int lv_loop;

    // Variable Initialization

    // Implementation
    Wait(8.0, c_timeGame);
    CameraPan(1, UnitGroupCenterOfGroup(UnitGroupSelected(1)), 0.0, -1, 0.0, false);
    CameraFollowUnitGroup(1, UnitGroupSelected(1), true, false);
    CameraLockInput(1, true);
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_3E5AD420"), true);
    libSprt_gf_PerformanceTestStartPerformanceTest("Idle Before Game");
    Wait(10.0, c_timeGame);
    libSprt_gf_PerformanceTestStopPerformanceTest();
}

void libSprt_gf_PerformanceTestHeroesIdleGameStart () {
    // Implementation
    Wait(8.0, c_timeGame);
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_DEACEE4E"), true);
    libSprt_gf_PerformanceTestStartPerformanceTest("Heroes Idle Game Start");
    Wait(10.0, c_timeGame);
    libSprt_gf_PerformanceTestStopPerformanceTest();
}

void libSprt_gf_PerformanceTestHeroesIdleMinionsFighting () {
    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_6EA60DAC"), true);
    libSprt_gf_PerformanceTestStartPerformanceTest("Heroes Idle Minions Fighting");
    Wait(10.0, c_timeGame);
    libSprt_gf_PerformanceTestStopPerformanceTest();
}

void libSprt_gf_PerformanceTestTwoHeroesActiveStart () {
    // Variable Declarations
    unit lv_hero;
    int lv_ownerPlayer;
    int lv_waveIndex;
    point lv_positionOfHero;

    // Variable Initialization

    // Implementation
    CameraPan(1, UnitGroupCenterOfGroup(UnitGroupSelected(1)), 0.0, -1, 0.0, false);
    CameraFollowUnitGroup(1, UnitGroupSelected(1), true, false);
    CameraLockInput(1, true);
    libAIAI_gf_HeroAITakeOverHeroForPlayer(1);
    libAIAI_gf_HeroAIEnableAIForPlayer(PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, 1));
    Wait(2.0, c_timeGame);
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_DFF38BE8"), true);
    libSprt_gf_PerformanceTestStartPerformanceTest("Two Heroes Activated");
    Wait(10.0, c_timeGame);
    libSprt_gf_PerformanceTestStopPerformanceTest();
}

void libSprt_gf_PerformanceTestTwoHeroesActiveInLane () {
    // Variable Declarations
    unit lv_hero;
    int lv_ownerPlayer;
    int lv_waveIndex;
    point lv_positionOfHero;

    // Variable Initialization

    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_E2FFA4A2"), true);
    libSprt_gf_PerformanceTestStartPerformanceTest("Two Heroes In Lane");
    Wait(10.0, c_timeGame);
    libSprt_gf_PerformanceTestStopPerformanceTest();
}

void libSprt_gf_PerformanceTestSixHeroesActiveStart () {
    // Variable Declarations
    unit lv_hero;
    int lv_ownerPlayer;
    int lv_waveIndex;
    point lv_positionOfHero;

    // Variable Initialization

    // Implementation
    libAIAI_gf_HeroAIEnableAIForPlayer(PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 2));
    libAIAI_gf_HeroAIEnableAIForPlayer(PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, 2));
    libAIAI_gf_HeroAIEnableAIForPlayer(PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 3));
    libAIAI_gf_HeroAIEnableAIForPlayer(PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, 3));
    Wait(2.0, c_timeGame);
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_DE92DCE3"), true);
    libSprt_gf_PerformanceTestStartPerformanceTest("Six Heroes Activated");
    Wait(10.0, c_timeGame);
    libSprt_gf_PerformanceTestStopPerformanceTest();
}

void libSprt_gf_PerformanceTestSixHeroesActiveInLane () {
    // Variable Declarations
    unit lv_hero;
    int lv_ownerPlayer;
    int lv_waveIndex;
    point lv_positionOfHero;

    // Variable Initialization

    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_28410EBD"), true);
    libSprt_gf_PerformanceTestStartPerformanceTest("Six Heroes In Lane");
    Wait(10.0, c_timeGame);
    libSprt_gf_PerformanceTestStopPerformanceTest();
}

void libSprt_gf_PerformanceTestTenHeroesActiveStart () {
    // Variable Declarations
    unit lv_hero;
    int lv_ownerPlayer;
    int lv_waveIndex;
    point lv_positionOfHero;

    // Variable Initialization

    // Implementation
    libAIAI_gf_HeroAIEnableAIForPlayer(PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 4));
    libAIAI_gf_HeroAIEnableAIForPlayer(PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, 4));
    libAIAI_gf_HeroAIEnableAIForPlayer(PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 5));
    libAIAI_gf_HeroAIEnableAIForPlayer(PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, 5));
    Wait(2.0, c_timeGame);
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_AF3E0FFC"), true);
    libSprt_gf_PerformanceTestStartPerformanceTest("Ten Heroes Activated");
    Wait(10.0, c_timeGame);
    libSprt_gf_PerformanceTestStopPerformanceTest();
}

void libSprt_gf_PerformanceTestTenHeroesActiveInLane () {
    // Variable Declarations
    unit lv_hero;
    int lv_ownerPlayer;
    int lv_waveIndex;
    point lv_positionOfHero;

    // Variable Initialization

    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_DEBDCE94"), true);
    libSprt_gf_PerformanceTestStartPerformanceTest("Ten Heroes In Lane");
    Wait(10.0, c_timeGame);
    libSprt_gf_PerformanceTestStopPerformanceTest();
}

void libSprt_gf_PerformanceTestChaosTeamDisabled () {
    playergroup auto413D494B_g;
    int auto413D494B_p;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    auto413D494B_g = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup; 
    auto413D494B_p = 1;
    for ( ; auto413D494B_p <= PlayerGroupCount(auto413D494B_g) ; auto413D494B_p += (lv_player == PlayerGroupPlayer(auto413D494B_g, auto413D494B_p)) ) {
        lv_player = PlayerGroupPlayer(auto413D494B_g, auto413D494B_p);
        if ((lv_player <= libCore_gv_bALMaxPlayers)) {
            libAIAI_gf_HeroAIDisableAIForPlayer(lv_player);
            UnitKill(libGame_gv_players[lv_player].lv_heroUnit);
        }

    }
    Wait(2.0, c_timeGame);
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_E52CD5EA"), true);
    libSprt_gf_PerformanceTestStartPerformanceTest("Chaos Team Disabled");
    Wait(10.0, c_timeGame);
    libSprt_gf_PerformanceTestStopPerformanceTest();
}

void libSprt_gf_PerformanceTestOrderTeamPushingUnopposed () {
    // Variable Declarations
    unit lv_hero;
    int lv_ownerPlayer;
    int lv_waveIndex;
    point lv_positionOfHero;

    // Variable Initialization

    // Implementation
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_0104DDDC"), true);
    libSprt_gf_PerformanceTestStartPerformanceTest("Order Team Pushing");
    Wait(10.0, c_timeGame);
    libSprt_gf_PerformanceTestStopPerformanceTest();
}

int libSprt_gf_StatTrackingGetTrackedPlayerFromString (string lp_chatString) {
    int autoF8F1686B_ae;
    int autoF8F1686B_ai;

    // Variable Declarations
    int lv_trackerPlayerHeroIndex;
    string lv_trackerPlayerHero;
    string lv_trackerPlayerStr;
    int lv_trackerPlayer;
    int lv_itPlayer;

    // Variable Initialization
    lv_trackerPlayerStr = "";

    // Implementation
    lv_trackerPlayerStr = StringWord(lp_chatString, 2);
    if ((StringToInt(lv_trackerPlayerStr) >= 1) && (StringToInt(lv_trackerPlayerStr) <= libCore_gv_bALMaxPlayers)) {
        return StringToInt(lv_trackerPlayerStr);
    }
    else {
        lv_trackerPlayerHero = (lv_trackerPlayerStr);
        if ((libCore_gf_GetIndexFromHero(lv_trackerPlayerHero) > 0)) {
            autoF8F1686B_ae = libCore_gv_bALMaxPlayers;
            autoF8F1686B_ai = 1;
            lv_itPlayer = 1;
            for ( ; ( (autoF8F1686B_ai >= 0 && lv_itPlayer <= autoF8F1686B_ae) || (autoF8F1686B_ai <= 0 && lv_itPlayer >= autoF8F1686B_ae) ) ; lv_itPlayer += autoF8F1686B_ai ) {
                if ((libGame_gv_players[lv_itPlayer].lv_heroData.lv_heroCatalogLink == lv_trackerPlayerHero)) {
                    return lv_itPlayer;
                }

            }
        }

    }
    TextExpressionSetToken("Param/Expression/lib_Sprt_AD72EB89", "A", StringToText(lv_trackerPlayerStr));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_AD72EB89"), true);
    return 0;
}

void libSprt_gf_StatTrackingStartTrackingforPlayer (int lp_player) {
    // Implementation
    if ((libSprt_gv_statTrackingOn[lp_player] == true)) {
        TextExpressionSetToken("Param/Expression/lib_Sprt_14ECA2B5", "A", IntToText(lp_player));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_14ECA2B5"), true);
        return ;
    }

    libSprt_gv_statTrackingPlayers += 1;
    if ((TriggerIsEnabled(libSprt_gt_StatTrackingDamageTracking) == false)) {
        TriggerEnable(libSprt_gt_StatTrackingDamageTracking, true);
        TriggerEnable(libSprt_gt_StatTrackingHealingTracking, true);
    }

    libSprt_gv_statTrackingOn[lp_player] = true;
    libSprt_gv_statTrackingStartTime[lp_player] = TimerGetElapsed(libGame_gv_gameTimer);
}

void libSprt_gf_StatTrackingBreakTrackingforPlayer (int lp_player) {
    // Implementation
    if ((libSprt_gv_statTrackingOn[lp_player] == true)) {
        libSprt_gf_StatTrackingReportStats(lp_player);
        libSprt_gv_statTrackingStartTime[lp_player] = TimerGetElapsed(libGame_gv_gameTimer);
        TextExpressionSetToken("Param/Expression/lib_Sprt_237EE8E2", "A", IntToText(lp_player));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_237EE8E2"), true);
    }

}

void libSprt_gf_StatTrackingStopTrackingforPlayer (int lp_player) {
    // Implementation
    if ((libSprt_gv_statTrackingOn[lp_player] == false)) {
        TextExpressionSetToken("Param/Expression/lib_Sprt_9EB0272F", "A", IntToText(lp_player));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_9EB0272F"), true);
        return ;
    }

    libSprt_gf_StatTrackingReportStats(lp_player);
    libSprt_gv_statTrackingOn[lp_player] = false;
    libSprt_gv_statTrackingPlayers -= 1;
    if ((libSprt_gv_statTrackingPlayers == 0)) {
        TriggerEnable(libSprt_gt_StatTrackingDamageTracking, false);
        TriggerEnable(libSprt_gt_StatTrackingHealingTracking, false);
    }

}

void libSprt_gf_StatTrackingReportStats (int lp_reportPlayer) {
    int auto4DC7E54B_ae;
    int auto4DC7E54B_ai;
    int auto98AE91C5_ae;
    int auto98AE91C5_ai;
    int autoFCC81157_ae;
    int autoFCC81157_ai;

    // Variable Declarations
    int lv_entriesInDataTable;
    int lv_itEntry;
    string lv_reportPlayerAsStr;
    string lv_dataTableName;
    string lv_effectName;
    int lv_itTalent;
    text lv_talentTextLine;
    fixed lv_gameSeconds;

    // Variable Initialization
    lv_reportPlayerAsStr = "";
    lv_dataTableName = "";
    lv_effectName = "";

    // Implementation
    lv_entriesInDataTable = DataTableValueCount(true);
    if ((lv_entriesInDataTable == 0)) {
        return ;
    }

    lv_gameSeconds = (TimerGetElapsed(libGame_gv_gameTimer) - libSprt_gv_statTrackingStartTime[lp_reportPlayer]);
    TriggerDebugOutput(7, StringExternal("Param/Value/lib_Sprt_63F766C8"), false);
    TextExpressionSetToken("Param/Expression/lib_Sprt_C2B10209", "A", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(libSprt_gv_statTrackingStartTime[lp_reportPlayer])));
    TextExpressionSetToken("Param/Expression/lib_Sprt_C2B10209", "B", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetElapsed(libGame_gv_gameTimer))));
    TextExpressionSetToken("Param/Expression/lib_Sprt_C2B10209", "C", UnitTypeGetName(UnitGetType(libGame_gv_players[lp_reportPlayer].lv_heroUnit)));
    TextExpressionSetToken("Param/Expression/lib_Sprt_C2B10209", "D", libGame_gv_players[lp_reportPlayer].lv_name);
    TextExpressionSetToken("Param/Expression/lib_Sprt_C2B10209", "E", FixedToText(lv_gameSeconds, c_fixedPrecisionAny));
    TriggerDebugOutput(7, TextExpressionAssemble("Param/Expression/lib_Sprt_C2B10209"), false);
    lv_reportPlayerAsStr = IntToString(lp_reportPlayer);
    auto4DC7E54B_ae = DataTableGetInt(true, ("DMGStatTrackPlayer" + lv_reportPlayerAsStr + ":EffectInstanceCount"));
    auto4DC7E54B_ai = 1;
    lv_itEntry = 1;
    for ( ; ( (auto4DC7E54B_ai >= 0 && lv_itEntry <= auto4DC7E54B_ae) || (auto4DC7E54B_ai <= 0 && lv_itEntry >= auto4DC7E54B_ae) ) ; lv_itEntry += auto4DC7E54B_ai ) {
        lv_effectName = DataTableGetString(true, ("DMGStatTrackPlayer" + lv_reportPlayerAsStr + ":Effect" + IntToString(lv_itEntry)));
        TextExpressionSetToken("Param/Expression/lib_Sprt_7E978CA8", "D", StringToText(lv_effectName));
        TextExpressionSetToken("Param/Expression/lib_Sprt_7E978CA8", "A", IntToText(DataTableGetInt(true, ("DMG" + lv_effectName + "Heroic:EffectCount" + IntToString(lp_reportPlayer)))));
        TextExpressionSetToken("Param/Expression/lib_Sprt_7E978CA8", "B", FixedToText(DataTableGetFixed(true, ("DMG" + lv_effectName + "Heroic:DamageAttempted" + IntToString(lp_reportPlayer))), 0));
        TextExpressionSetToken("Param/Expression/lib_Sprt_7E978CA8", "C", FixedToText(DataTableGetFixed(true, ("DMG" + lv_effectName + "Heroic:DamageDone" + IntToString(lp_reportPlayer))), 0));
        TextExpressionSetToken("Param/Expression/lib_Sprt_7E978CA8", "E", IntToText(DataTableGetInt(true, ("DMG" + lv_effectName + ":EffectCount" + IntToString(lp_reportPlayer)))));
        TextExpressionSetToken("Param/Expression/lib_Sprt_7E978CA8", "F", FixedToText(DataTableGetFixed(true, ("DMG" + lv_effectName + ":DamageAttempted" + IntToString(lp_reportPlayer))), 0));
        TextExpressionSetToken("Param/Expression/lib_Sprt_7E978CA8", "G", FixedToText(DataTableGetFixed(true, ("DMG" + lv_effectName + ":DamageDone" + IntToString(lp_reportPlayer))), 0));
        TriggerDebugOutput(7, TextExpressionAssemble("Param/Expression/lib_Sprt_7E978CA8"), false);
        DataTableSetString(true, ("DMGStatTrackPlayer" + lv_reportPlayerAsStr + ":Effect" + IntToString(lv_itEntry)), "");
        DataTableSetInt(true, ("DMG" + lv_effectName + "Heroic:EffectCount" + IntToString(lp_reportPlayer)), 0);
        DataTableSetFixed(true, ("DMG" + lv_effectName + "Heroic:DamageAttempted" + IntToString(lp_reportPlayer)), 0.0);
        DataTableSetFixed(true, ("DMG" + lv_effectName + "Heroic:DamageDone" + IntToString(lp_reportPlayer)), 0.0);
        DataTableSetInt(true, ("DMG" + lv_effectName + ":EffectCount" + IntToString(lp_reportPlayer)), 0);
        DataTableSetFixed(true, ("DMG" + lv_effectName + ":DamageAttempted" + IntToString(lp_reportPlayer)), 0.0);
        DataTableSetFixed(true, ("DMG" + lv_effectName + ":DamageDone" + IntToString(lp_reportPlayer)), 0.0);
    }
    TriggerDebugOutput(7, StringExternal("Param/Value/lib_Sprt_9950C0AA"), false);
    auto98AE91C5_ae = DataTableGetInt(true, ("HLGStatTrackPlayer" + lv_reportPlayerAsStr + ":EffectInstanceCount"));
    auto98AE91C5_ai = 1;
    lv_itEntry = 1;
    for ( ; ( (auto98AE91C5_ai >= 0 && lv_itEntry <= auto98AE91C5_ae) || (auto98AE91C5_ai <= 0 && lv_itEntry >= auto98AE91C5_ae) ) ; lv_itEntry += auto98AE91C5_ai ) {
        lv_effectName = DataTableGetString(true, ("HLGStatTrackPlayer" + lv_reportPlayerAsStr + ":Effect" + IntToString(lv_itEntry)));
        if ((CatalogFieldValueGet(c_gameCatalogEffect, lv_effectName, "AmountScoreArray[" + IntToString(0) + "].Value", c_playerAny) == "")) {
            continue;
        }

        TextExpressionSetToken("Param/Expression/lib_Sprt_8634C21F", "D", StringToText(lv_effectName));
        TextExpressionSetToken("Param/Expression/lib_Sprt_8634C21F", "A", IntToText(DataTableGetInt(true, ("HLG" + lv_effectName + "Heroic:EffectCount" + IntToString(lp_reportPlayer)))));
        TextExpressionSetToken("Param/Expression/lib_Sprt_8634C21F", "B", FixedToText(DataTableGetFixed(true, ("HLG" + lv_effectName + "Heroic:HealingDone" + IntToString(lp_reportPlayer))), 0));
        TextExpressionSetToken("Param/Expression/lib_Sprt_8634C21F", "E", IntToText(DataTableGetInt(true, ("HLG" + lv_effectName + ":EffectCount" + IntToString(lp_reportPlayer)))));
        TextExpressionSetToken("Param/Expression/lib_Sprt_8634C21F", "F", FixedToText(DataTableGetFixed(true, ("HLG" + lv_effectName + ":HealingDone" + IntToString(lp_reportPlayer))), 0));
        TriggerDebugOutput(7, TextExpressionAssemble("Param/Expression/lib_Sprt_8634C21F"), false);
        DataTableSetString(true, ("HLGStatTrackPlayer" + lv_reportPlayerAsStr + ":Effect" + IntToString(lv_itEntry)), "");
        DataTableSetInt(true, ("HLG" + lv_effectName + "Heroic:EffectCount" + IntToString(lp_reportPlayer)), 0);
        DataTableSetFixed(true, ("HLG" + lv_effectName + "Heroic:HealingDone" + IntToString(lp_reportPlayer)), 0.0);
        DataTableSetInt(true, ("HLG" + lv_effectName + ":EffectCount" + IntToString(lp_reportPlayer)), 0);
        DataTableSetFixed(true, ("HLG" + lv_effectName + ":HealingDone" + IntToString(lp_reportPlayer)), 0.0);
    }
    DataTableSetInt(true, ("DMGStatTrackPlayer" + lv_reportPlayerAsStr + ":EffectInstanceCount"), 0);
    DataTableSetInt(true, ("HLGStatTrackPlayer" + lv_reportPlayerAsStr + ":EffectInstanceCount"), 0);
    lv_talentTextLine = StringExternal("Param/Value/lib_Sprt_B1D004C9");
    autoFCC81157_ae = libCore_gv_talents_MaxTiers_C;
    autoFCC81157_ai = 1;
    lv_itTalent = 1;
    for ( ; ( (autoFCC81157_ai >= 0 && lv_itTalent <= autoFCC81157_ae) || (autoFCC81157_ai <= 0 && lv_itTalent >= autoFCC81157_ae) ) ; lv_itTalent += autoFCC81157_ai ) {
        TextExpressionSetToken("Param/Expression/lib_Sprt_E273B3DE", "A", IntToText(lv_itTalent));
        TextExpressionSetToken("Param/Expression/lib_Sprt_E273B3DE", "B", StringToText((libGame_gv_talents_TalentChoices[lp_reportPlayer][lv_itTalent].lv_talentData[libGame_gv_talents_TalentChoices[lp_reportPlayer][lv_itTalent].lv_selection].lv_talentCatalogLink)));
        lv_talentTextLine = (lv_talentTextLine + TextExpressionAssemble("Param/Expression/lib_Sprt_E273B3DE"));
    }
    TextExpressionSetToken("Param/Expression/lib_Sprt_0F17B510", "A", IntToText((libCore_gv_talents_MaxTiers_C + 1)));
    lv_talentTextLine = (lv_talentTextLine + TextExpressionAssemble("Param/Expression/lib_Sprt_0F17B510"));
    TextExpressionSetToken("Param/Expression/lib_Sprt_BBA46ABE", "A", FixedToText(PlayerScoreValueGetAsFixed(lp_reportPlayer, "HeroDamage"), 0));
    TextExpressionSetToken("Param/Expression/lib_Sprt_BBA46ABE", "B", FixedToText(PlayerScoreValueGetAsFixed(lp_reportPlayer, "SiegeDamage"), 0));
    TriggerDebugOutput(7, TextExpressionAssemble("Param/Expression/lib_Sprt_BBA46ABE"), false);
    TriggerDebugOutput(7, lv_talentTextLine, false);
}

int libSprt_gf_DataMiningGetManaRegenSourceIndex (string lp_name) {
    int auto85B681AE_ae;
    int auto85B681AE_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto85B681AE_ae = libSprt_gv_dataMiningMaxNumberOfDifferentManaRegenSources;
    auto85B681AE_ai = 1;
    lv_i = 1;
    for ( ; ( (auto85B681AE_ai >= 0 && lv_i <= auto85B681AE_ae) || (auto85B681AE_ai <= 0 && lv_i >= auto85B681AE_ae) ) ; lv_i += auto85B681AE_ai ) {
        if ((libSprt_gv_dataMiningManaRegenSourceNames[lv_i] == lp_name)) {
            return lv_i;
        }

        if ((libSprt_gv_dataMiningManaRegenSourceNames[lv_i] == "")) {
            libSprt_gv_dataMiningManaRegenSourceNames[lv_i] = lp_name;
            return lv_i;
        }

    }
    return 0;
}

void libSprt_gf_DataMiningPeriodicDataSend () {
    int auto9AD7948B_ae;
    int auto9AD7948B_ai;

    // Variable Declarations
    int lv_itTeam;
    int lv_itPlayer;
    int lv_itTown;
    int lv_itStructure;
    int lv_player;
    unit lv_heroUnit;
    unit lv_structureUnit;
    fixed lv_structureHPPercent;

    // Variable Initialization

    // Implementation
    auto9AD7948B_ae = libCore_gv_bALMaxTeams;
    auto9AD7948B_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (auto9AD7948B_ai >= 0 && lv_itTeam <= auto9AD7948B_ae) || (auto9AD7948B_ai <= 0 && lv_itTeam >= auto9AD7948B_ae) ) ; lv_itTeam += auto9AD7948B_ai ) {
        lv_player = PlayerGroupPlayer(libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, 1);
        if ((lv_player > 0) && (lv_player <= libCore_gv_bALMaxPlayers)) {
            StatEventCreate("PeriodicXPBreakdown");
            StatEventAddDataFixed(StatEventLastCreated(), "GameTime", TimerGetElapsed(libGame_gv_gameTimer));
            StatEventAddDataFixed(StatEventLastCreated(), "PreviousGameTime", libSprt_gv_dataMiningTimeStampofLastPeriodicTransmit);
            StatEventAddDataInt(StatEventLastCreated(), "Team", lv_itTeam);
            StatEventAddDataInt(StatEventLastCreated(), "TeamLevel", libGame_gv_teams[lv_itTeam].lv_teamLevel);
            StatEventAddDataFixed(StatEventLastCreated(), "MinionXP", libGame_gv_players[lv_player].lv_xPRecievedFromMinions);
            StatEventAddDataFixed(StatEventLastCreated(), "CreepXP", libGame_gv_players[lv_player].lv_xPRecievedFromCreeps);
            StatEventAddDataFixed(StatEventLastCreated(), "StructureXP", libGame_gv_players[lv_player].lv_xPRecievedFromStructures);
            StatEventAddDataFixed(StatEventLastCreated(), "HeroXP", libGame_gv_players[lv_player].lv_xPRecievedFromHeroes);
            StatEventAddDataFixed(StatEventLastCreated(), "TrickleXP", libGame_gv_players[lv_player].lv_xPRecievedFromTrickle);
            StatEventSend(StatEventLastCreated());
        }

    }
    libSprt_gv_dataMiningTimeStampofLastPeriodicTransmit = TimerGetElapsed(libGame_gv_gameTimer);
}

void libSprt_gf_DataMiningLogManaRegenForPlayer (int lp_player, string lp_regenSourceName, fixed lp_amount) {
    // Implementation
    libSprt_gv_dataMining_PlayerData[lp_player].lv_manaRegenAmounts[libSprt_gf_DataMiningGetManaRegenSourceIndex(lp_regenSourceName)] += lp_amount;
}

void libSprt_gf_DataMiningTurnDataMiningTriggersOnOff (bool lp_onOff) {
    // Implementation
    TriggerEnable(libSprt_gt_DataMiningListenForRegenGlobes, lp_onOff);
    if ((lp_onOff == true)) {
        TimerStart(libSprt_gv_dataMiningPeriodicTimer, libSprt_gv_dataMiningPeriodicSendPeriod, false, c_timeGame);
    }

    TriggerEnable(libSprt_gt_DataMiningPeriodicDataSendPeriodicEventTrigger, lp_onOff);
}

void libSprt_gf_DataMiningSendStartGameEvents () {
    int autoBAAD8CF8_ae;
    int autoBAAD8CF8_ai;
    int auto3E9EF2A0_val;
    int autoB5E0751A_ae;
    int autoB5E0751A_ai;
    int auto60B8D5BE_ae;
    int auto60B8D5BE_ai;
    int autoF8A3E2EA_ae;
    int autoF8A3E2EA_ai;

    // Variable Declarations
    int lv_i;
    int lv_k;
    string lv_controller;
    string lv_handle;

    // Variable Initialization
    lv_controller = "";
    lv_handle = "";

    // Implementation
    StatEventCreate("GameStart");
    StatEventAddDataFixed(StatEventLastCreated(), "MapSizeX", PointGetX(RegionGetBoundsMax(RegionEntireMap())));
    StatEventAddDataFixed(StatEventLastCreated(), "MapSizeY", PointGetY(RegionGetBoundsMax(RegionEntireMap())));
    StatEventSend(StatEventLastCreated());
    autoBAAD8CF8_ae = libCore_gv_bALMaxPlayers;
    autoBAAD8CF8_ai = 1;
    lv_i = 1;
    for ( ; ( (autoBAAD8CF8_ai >= 0 && lv_i <= autoBAAD8CF8_ae) || (autoBAAD8CF8_ai <= 0 && lv_i >= autoBAAD8CF8_ae) ) ; lv_i += autoBAAD8CF8_ai ) {
        auto3E9EF2A0_val = PlayerType(lv_i);
        if (auto3E9EF2A0_val == c_playerTypeNone) {
            lv_controller = "None";
        }
        else if (auto3E9EF2A0_val == c_playerTypeUser) {
            lv_controller = "User";
        }
        else if (auto3E9EF2A0_val == c_playerTypeComputer) {
            lv_controller = "Computer";
        }
        else {
        }
        StatEventCreate("PlayerInit");
        StatEventAddDataInt(StatEventLastCreated(), "PlayerID", lv_i);
        StatEventAddDataInt(StatEventLastCreated(), "Team", libGame_gf_TeamNumberOfPlayer(lv_i));
        StatEventAddDataString(StatEventLastCreated(), "Controller", lv_controller);
        if ((PlayerType(lv_i) == c_playerTypeUser)) {
            lv_handle = PlayerHandle(lv_i);
            if ((lv_handle != "")) {
                StatEventAddDataString(StatEventLastCreated(), "ToonHandle", lv_handle);
            }

        }

        StatEventSend(StatEventLastCreated());
    }
    autoB5E0751A_ae = libGame_gv_townTownCount;
    autoB5E0751A_ai = 1;
    lv_i = 1;
    for ( ; ( (autoB5E0751A_ai >= 0 && lv_i <= autoB5E0751A_ae) || (autoB5E0751A_ai <= 0 && lv_i >= autoB5E0751A_ae) ) ; lv_i += autoB5E0751A_ai ) {
        auto60B8D5BE_ae = libGame_gv_townTownData[lv_i].lv_structureCount;
        auto60B8D5BE_ai = 1;
        lv_k = 1;
        for ( ; ( (auto60B8D5BE_ai >= 0 && lv_k <= auto60B8D5BE_ae) || (auto60B8D5BE_ai <= 0 && lv_k >= auto60B8D5BE_ae) ) ; lv_k += auto60B8D5BE_ai ) {
            if ((libGame_gv_townTownData[lv_i].lv_structureTypes[lv_k] == libGame_ge_TownStructureTypes_TownHall)) {
                StatEventCreate("TownStructureInit");
                StatEventAddDataInt(StatEventLastCreated(), "TownID", lv_i);
                StatEventAddDataInt(StatEventLastCreated(), "Team", libGame_gf_TeamNumberOfPlayer(libGame_gv_townTownData[lv_i].lv_owner));
                StatEventAddDataInt(StatEventLastCreated(), "Lane", libGame_gv_townTownData[lv_i].lv_lane);
                StatEventAddDataFixed(StatEventLastCreated(), "PositionX", PointGetX(libGame_gv_townTownData[lv_i].lv_structureSpawnPoints[lv_k]));
                StatEventAddDataFixed(StatEventLastCreated(), "PositionY", PointGetY(libGame_gv_townTownData[lv_i].lv_structureSpawnPoints[lv_k]));
                StatEventSend(StatEventLastCreated());
            }

        }
    }
    autoF8A3E2EA_ae = libMapM_gv_jungleNumberOfCreepCamps;
    autoF8A3E2EA_ai = 1;
    lv_i = 1;
    for ( ; ( (autoF8A3E2EA_ai >= 0 && lv_i <= autoF8A3E2EA_ae) || (autoF8A3E2EA_ai <= 0 && lv_i >= autoF8A3E2EA_ae) ) ; lv_i += autoF8A3E2EA_ai ) {
        StatEventCreate("JungleCampInit");
        StatEventAddDataInt(StatEventLastCreated(), "CampID", lv_i);
        StatEventAddDataFixed(StatEventLastCreated(), "PositionX", PointGetX(libMapM_gv_jungleCreepCamps[lv_i].lv_mapDataCampCaptainSpawnPoint));
        StatEventAddDataFixed(StatEventLastCreated(), "PositionY", PointGetY(libMapM_gv_jungleCreepCamps[lv_i].lv_mapDataCampCaptainSpawnPoint));
        StatEventSend(StatEventLastCreated());
    }
}

void libSprt_gf_DataMiningSendEndOfGameDigests (int lp_WinningTeam) {
    int auto01159F25_ae;
    int auto01159F25_ai;
    int autoD3BAC227_ae;
    int autoD3BAC227_ai;

    // Variable Declarations
    int lv_player;
    int lv_source;
    string lv_sourceName;
    int lv_itTalentTier;

    // Variable Initialization
    lv_sourceName = "";

    // Implementation
    auto01159F25_ae = libCore_gv_bALMaxPlayers;
    auto01159F25_ai = 1;
    lv_player = 1;
    for ( ; ( (auto01159F25_ai >= 0 && lv_player <= auto01159F25_ae) || (auto01159F25_ai <= 0 && lv_player >= auto01159F25_ae) ) ; lv_player += auto01159F25_ai ) {
        if ((PlayerStatus(lv_player) == c_playerStatusUnused)) {
            continue;
        }

        StatEventCreate("EndOfGameXPBreakdown");
        StatEventAddDataInt(StatEventLastCreated(), "PlayerID", lv_player);
        StatEventAddDataFixed(StatEventLastCreated(), "MinionXP", libGame_gv_players[lv_player].lv_xPRecievedFromMinions);
        StatEventAddDataFixed(StatEventLastCreated(), "CreepXP", libGame_gv_players[lv_player].lv_xPRecievedFromCreeps);
        StatEventAddDataFixed(StatEventLastCreated(), "StructureXP", libGame_gv_players[lv_player].lv_xPRecievedFromStructures);
        StatEventAddDataFixed(StatEventLastCreated(), "HeroXP", libGame_gv_players[lv_player].lv_xPRecievedFromHeroes);
        StatEventAddDataFixed(StatEventLastCreated(), "TrickleXP", libGame_gv_players[lv_player].lv_xPRecievedFromTrickle);
        StatEventSend(StatEventLastCreated());
        StatEventCreate("EndOfGameTimeSpentDead");
        StatEventAddDataInt(StatEventLastCreated(), "PlayerID", lv_player);
        StatEventAddDataFixed(StatEventLastCreated(), "Time", libGame_gv_players[lv_player].lv_timeSpentDead);
        StatEventSend(StatEventLastCreated());
        if ((PlayerHasTalent(lv_player, "GenericTalentRegenerationMaster") == true)) {
            StatEventCreate("EndOfGameRegenMasterStacks");
            StatEventAddDataInt(StatEventLastCreated(), "PlayerID", lv_player);
            StatEventAddDataString(StatEventLastCreated(), "Hero", (UnitGetType(libGame_gv_players[lv_player].lv_heroUnit)));
            StatEventAddDataInt(StatEventLastCreated(), "Stack Count", UnitBehaviorCount(libGame_gv_players[lv_player].lv_heroUnit, "RegenerationMaster"));
            StatEventSend(StatEventLastCreated());
        }

        if ((PlayerHasTalent(lv_player, "GenericTalentSeasonedMarksman") == true)) {
            StatEventCreate("EndOfGameMarksmanStacks");
            StatEventAddDataInt(StatEventLastCreated(), "PlayerID", lv_player);
            StatEventAddDataString(StatEventLastCreated(), "Hero", (UnitGetType(libGame_gv_players[lv_player].lv_heroUnit)));
            StatEventAddDataInt(StatEventLastCreated(), "Stack Count", UnitBehaviorCount(libGame_gv_players[lv_player].lv_heroUnit, "TalentSeasonedMarksmanStackingBonus"));
            StatEventSend(StatEventLastCreated());
        }

        StatEventCreate("EndOfGameTalentChoices");
        StatEventAddDataInt(StatEventLastCreated(), "PlayerID", lv_player);
        StatEventAddDataString(StatEventLastCreated(), "Hero", (UnitGetType(libGame_gv_players[lv_player].lv_heroUnit)));
        StatEventAddDataInt(StatEventLastCreated(), "Level", libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_player)].lv_teamLevel);
        if ((libGame_gf_TeamNumberOfPlayer(lv_player) == lp_WinningTeam)) {
            StatEventAddDataString(StatEventLastCreated(), "Win/Loss", "Win");
        }
        else {
            StatEventAddDataString(StatEventLastCreated(), "Win/Loss", "Loss");
        }
        StatEventAddDataString(StatEventLastCreated(), "Map", libCore_gv_mAPMapStringID);
        autoD3BAC227_ae = 7;
        autoD3BAC227_ai = 1;
        lv_itTalentTier = 1;
        for ( ; ( (autoD3BAC227_ai >= 0 && lv_itTalentTier <= autoD3BAC227_ae) || (autoD3BAC227_ai <= 0 && lv_itTalentTier >= autoD3BAC227_ae) ) ; lv_itTalentTier += autoD3BAC227_ai ) {
            if ((libGame_gv_talents_TalentChoices[lv_player][lv_itTalentTier].lv_talentData[libGame_gv_talents_TalentChoices[lv_player][lv_itTalentTier].lv_selection].lv_talentCatalogLink != null)) {
                StatEventAddDataString(StatEventLastCreated(), ("Tier " + IntToString(lv_itTalentTier) + " Choice"), (libGame_gv_talents_TalentChoices[lv_player][lv_itTalentTier].lv_talentData[libGame_gv_talents_TalentChoices[lv_player][lv_itTalentTier].lv_selection].lv_talentCatalogLink));
            }
            else {
                break;
            }
        }
        StatEventSend(StatEventLastCreated());
    }
    libSprt_gf_DataMiningTurnDataMiningTriggersOnOff(false);
}

void libSprt_gf_DEBUGStartGame () {
    // Implementation
    if ((libCore_gv_dEBUGDebuggingEnabled == false)) {
        return ;
    }

    TimerStart(libGame_gv_openTheGatesTimer, 0.0625, false, c_timeGame);
    TriggerStop(libGame_gt_AnnounceCountdown);
}

void libSprt_gf_DEBUGSpawnCreepCamps () {
    int autoD6A4DA90_ae;
    int autoD6A4DA90_ai;

    // Variable Declarations
    int lv_itCamp;

    // Variable Initialization

    // Implementation
    if ((libCore_gv_dEBUGDebuggingEnabled == false)) {
        return ;
    }

    autoD6A4DA90_ae = libMapM_gv_jungleNumberOfCreepCamps;
    autoD6A4DA90_ai = 1;
    lv_itCamp = 1;
    for ( ; ( (autoD6A4DA90_ai >= 0 && lv_itCamp <= autoD6A4DA90_ae) || (autoD6A4DA90_ai <= 0 && lv_itCamp >= autoD6A4DA90_ae) ) ; lv_itCamp += autoD6A4DA90_ai ) {
        if ((TimerGetRemaining(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_stateCreepBirthTimer) > 0.0625)) {
            TimerStart(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_stateCreepBirthTimer, 0.0625, false, c_timeGame);
        }

    }
}

void libSprt_gf_DEBUGToggleSelection () {
    // Implementation
    if ((libCore_gv_dEBUGDebuggingEnabled == false)) {
        return ;
    }

    TriggerEnable(libUIUI_gt_UIDebugPanelSelectionEnabledCheckboxClicked, false);
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_selectionEnabledCheckbox, PlayerGroupAll(), false);
    if ((libSprt_gv_dEBUGSelectionEnabled == false)) {
        libSprt_gv_dEBUGSelectionEnabled = true;
        UISetDragSelectEnabled(PlayerGroupAll(), true);
        UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, true);
        libNtve_gf_SetDialogItemChecked(libUIUI_gv_uIDebugPanel.lv_selectionEnabledCheckbox, true, PlayerGroupAll());
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_76A66534"), true);
    }
    else {
        libSprt_gv_dEBUGSelectionEnabled = false;
        UISetDragSelectEnabled(PlayerGroupAll(), false);
        UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
        libNtve_gf_SetDialogItemChecked(libUIUI_gv_uIDebugPanel.lv_selectionEnabledCheckbox, false, PlayerGroupAll());
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_991AD450"), true);
    }
    Wait(0.25, c_timeGame);
    TriggerEnable(libUIUI_gt_UIDebugPanelSelectionEnabledCheckboxClicked, true);
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_selectionEnabledCheckbox, PlayerGroupAll(), true);
}

trigger auto_libSprt_gf_DEBUGToggleAllTalentSelection_Trigger = null;

void libSprt_gf_DEBUGToggleAllTalentSelection () {
    if (auto_libSprt_gf_DEBUGToggleAllTalentSelection_Trigger == null) {
        auto_libSprt_gf_DEBUGToggleAllTalentSelection_Trigger = TriggerCreate("auto_libSprt_gf_DEBUGToggleAllTalentSelection_TriggerFunc");
    }

    TriggerExecute(auto_libSprt_gf_DEBUGToggleAllTalentSelection_Trigger, false, false);
}

bool auto_libSprt_gf_DEBUGToggleAllTalentSelection_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    if ((libCore_gv_dEBUGDebuggingEnabled == false)) {
        return true;
    }

    TriggerEnable(libUIUI_gt_UIDebugPanelAllTalentsCheckboxClicked, false);
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_allTalentsCheckbox, PlayerGroupAll(), false);
    if ((libSprt_gv_dEBUGTalentDebugEnabled == false)) {
        libSprt_gv_dEBUGTalentDebugEnabled = true;
        SetTalentUpgradeRequired(false);
        libNtve_gf_SetDialogItemChecked(libUIUI_gv_uIDebugPanel.lv_allTalentsCheckbox, true, PlayerGroupAll());
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_64629C3D"), true);
    }
    else {
        libSprt_gv_dEBUGTalentDebugEnabled = false;
        SetTalentUpgradeRequired(true);
        libNtve_gf_SetDialogItemChecked(libUIUI_gv_uIDebugPanel.lv_allTalentsCheckbox, false, PlayerGroupAll());
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_1C162EE9"), true);
    }
    Wait(0.75, c_timeGame);
    TriggerEnable(libUIUI_gt_UIDebugPanelAllTalentsCheckboxClicked, true);
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_allTalentsCheckbox, PlayerGroupAll(), true);
    return true;
}

trigger auto_libSprt_gf_DEBUGToggleSpawnatCameraorBaseSelection_Trigger = null;

void libSprt_gf_DEBUGToggleSpawnatCameraorBaseSelection () {
    if (auto_libSprt_gf_DEBUGToggleSpawnatCameraorBaseSelection_Trigger == null) {
        auto_libSprt_gf_DEBUGToggleSpawnatCameraorBaseSelection_Trigger = TriggerCreate("auto_libSprt_gf_DEBUGToggleSpawnatCameraorBaseSelection_TriggerFunc");
    }

    TriggerExecute(auto_libSprt_gf_DEBUGToggleSpawnatCameraorBaseSelection_Trigger, false, false);
}

bool auto_libSprt_gf_DEBUGToggleSpawnatCameraorBaseSelection_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    if ((libCore_gv_dEBUGDebuggingEnabled == false)) {
        return true;
    }

    TriggerEnable(libUIUI_gt_UIDebugPanelSpawnAtBaseCheckboxClicked, false);
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_spawnAtCameraCheckbox, PlayerGroupAll(), false);
    if ((libUIUI_gv_uIDebugPanelSpawnAtCamera == false)) {
        libUIUI_gv_uIDebugPanelSpawnAtCamera = true;
        libNtve_gf_SetDialogItemChecked(libUIUI_gv_uIDebugPanel.lv_spawnAtCameraCheckbox, true, PlayerGroupAll());
    }
    else {
        libUIUI_gv_uIDebugPanelSpawnAtCamera = false;
        libNtve_gf_SetDialogItemChecked(libUIUI_gv_uIDebugPanel.lv_spawnAtCameraCheckbox, false, PlayerGroupAll());
    }
    Wait(0.75, c_timeGame);
    TriggerEnable(libUIUI_gt_UIDebugPanelSpawnAtBaseCheckboxClicked, true);
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_spawnAtCameraCheckbox, PlayerGroupAll(), true);
    return true;
}

trigger auto_libSprt_gf_DEBUGToggleMinionSpawning_Trigger = null;

void libSprt_gf_DEBUGToggleMinionSpawning () {
    if (auto_libSprt_gf_DEBUGToggleMinionSpawning_Trigger == null) {
        auto_libSprt_gf_DEBUGToggleMinionSpawning_Trigger = TriggerCreate("auto_libSprt_gf_DEBUGToggleMinionSpawning_TriggerFunc");
    }

    TriggerExecute(auto_libSprt_gf_DEBUGToggleMinionSpawning_Trigger, false, false);
}

bool auto_libSprt_gf_DEBUGToggleMinionSpawning_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    if ((libCore_gv_dEBUGDebuggingEnabled == false)) {
        return true;
    }

    TriggerEnable(libUIUI_gt_UIDebugPanelDisableMinionSpawningCheckboxClicked, false);
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_disableMinionSpawningCheckbox, PlayerGroupAll(), false);
    if ((libUIUI_gv_uIDebugPanelDisableMinionSpawningToggle == true)) {
        libUIUI_gv_uIDebugPanelDisableMinionSpawningToggle = false;
        libNtve_gf_SetDialogItemChecked(libUIUI_gv_uIDebugPanel.lv_disableMinionSpawningCheckbox, false, PlayerGroupAll());
        TriggerExecute(libSprt_gt_DEBUGToggleMinionSpawningtogminionspawn, true, false);
    }
    else {
        libUIUI_gv_uIDebugPanelDisableMinionSpawningToggle = true;
        libNtve_gf_SetDialogItemChecked(libUIUI_gv_uIDebugPanel.lv_disableMinionSpawningCheckbox, true, PlayerGroupAll());
        TriggerExecute(libSprt_gt_DEBUGToggleMinionSpawningtogminionspawn, true, false);
    }
    Wait(0.75, c_timeGame);
    TriggerEnable(libUIUI_gt_UIDebugPanelDisableMinionSpawningCheckboxClicked, true);
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_disableMinionSpawningCheckbox, PlayerGroupAll(), true);
    return true;
}

trigger auto_libSprt_gf_DEBUGToggleTrickleXP_Trigger = null;

void libSprt_gf_DEBUGToggleTrickleXP () {
    if (auto_libSprt_gf_DEBUGToggleTrickleXP_Trigger == null) {
        auto_libSprt_gf_DEBUGToggleTrickleXP_Trigger = TriggerCreate("auto_libSprt_gf_DEBUGToggleTrickleXP_TriggerFunc");
    }

    TriggerExecute(auto_libSprt_gf_DEBUGToggleTrickleXP_Trigger, false, false);
}

bool auto_libSprt_gf_DEBUGToggleTrickleXP_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    if ((libCore_gv_dEBUGDebuggingEnabled == false)) {
        return true;
    }

    TriggerEnable(libUIUI_gt_UIDebugPanelDisableTrickleXPCheckboxClicked, false);
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_disableTrickleXPCheckbox, PlayerGroupAll(), false);
    libUIUI_gv_uIDebugPanelDisableTrickleXPToggle = !(libUIUI_gv_uIDebugPanelDisableTrickleXPToggle);
    TriggerExecute(libSprt_gt_DEBUGToggleXPTrickletogtrickle, true, false);
    if ((libUIUI_gv_uIDebugPanelDisableTrickleXPToggle == true)) {
        libNtve_gf_SetDialogItemChecked(libUIUI_gv_uIDebugPanel.lv_disableTrickleXPCheckbox, true, PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemChecked(libUIUI_gv_uIDebugPanel.lv_disableTrickleXPCheckbox, false, PlayerGroupAll());
    }
    Wait(0.75, c_timeGame);
    TriggerEnable(libUIUI_gt_UIDebugPanelDisableTrickleXPCheckboxClicked, true);
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_disableTrickleXPCheckbox, PlayerGroupAll(), true);
    return true;
}

trigger auto_libSprt_gf_DEBUGToggleCombatText_Trigger = null;

void libSprt_gf_DEBUGToggleCombatText () {
    if (auto_libSprt_gf_DEBUGToggleCombatText_Trigger == null) {
        auto_libSprt_gf_DEBUGToggleCombatText_Trigger = TriggerCreate("auto_libSprt_gf_DEBUGToggleCombatText_TriggerFunc");
    }

    TriggerExecute(auto_libSprt_gf_DEBUGToggleCombatText_Trigger, false, false);
}

bool auto_libSprt_gf_DEBUGToggleCombatText_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    if ((libCore_gv_dEBUGDebuggingEnabled == false)) {
        return true;
    }

    TriggerEnable(libUIUI_gt_UIDebugPanelCombatTextCheckboxClicked, false);
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_floatingCombatTextCheckbox, PlayerGroupAll(), false);
    if ((libUIUI_gv_uIDebugPanelFloatingCombatTextToggle == true)) {
        libUIUI_gv_uIDebugPanelFloatingCombatTextToggle = false;
        libNtve_gf_SetDialogItemChecked(libUIUI_gv_uIDebugPanel.lv_floatingCombatTextCheckbox, false, PlayerGroupAll());
        TriggerExecute(libSprt_gt_DEBUGToggleFloatingCombatTexttogcombattext, true, false);
        DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_enableAllFloatingCombatTextCheckbox, PlayerGroupAll(), false);
    }
    else {
        libUIUI_gv_uIDebugPanelFloatingCombatTextToggle = true;
        libNtve_gf_SetDialogItemChecked(libUIUI_gv_uIDebugPanel.lv_floatingCombatTextCheckbox, true, PlayerGroupAll());
        TriggerExecute(libSprt_gt_DEBUGToggleFloatingCombatTexttogcombattext, true, false);
        DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_enableAllFloatingCombatTextCheckbox, PlayerGroupAll(), true);
    }
    Wait(0.75, c_timeGame);
    TriggerEnable(libUIUI_gt_UIDebugPanelCombatTextCheckboxClicked, true);
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_floatingCombatTextCheckbox, PlayerGroupAll(), true);
    return true;
}

trigger auto_libSprt_gf_DEBUGToggleAllCombatText_Trigger = null;

void libSprt_gf_DEBUGToggleAllCombatText () {
    if (auto_libSprt_gf_DEBUGToggleAllCombatText_Trigger == null) {
        auto_libSprt_gf_DEBUGToggleAllCombatText_Trigger = TriggerCreate("auto_libSprt_gf_DEBUGToggleAllCombatText_TriggerFunc");
    }

    TriggerExecute(auto_libSprt_gf_DEBUGToggleAllCombatText_Trigger, false, false);
}

bool auto_libSprt_gf_DEBUGToggleAllCombatText_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    if ((libCore_gv_dEBUGDebuggingEnabled == false)) {
        return true;
    }

    TriggerEnable(libUIUI_gt_UIDebugPanelEnableAllCombatTextCheckboxClicked, false);
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_enableAllFloatingCombatTextCheckbox, PlayerGroupAll(), false);
    if ((libUIUI_gv_uIDebugPanelShowAllCombatText == true)) {
        libUIUI_gv_uIDebugPanelShowAllCombatText = false;
        libNtve_gf_SetDialogItemChecked(libUIUI_gv_uIDebugPanel.lv_enableAllFloatingCombatTextCheckbox, false, PlayerGroupAll());
    }
    else {
        libUIUI_gv_uIDebugPanelShowAllCombatText = true;
        libNtve_gf_SetDialogItemChecked(libUIUI_gv_uIDebugPanel.lv_enableAllFloatingCombatTextCheckbox, true, PlayerGroupAll());
    }
    Wait(0.75, c_timeGame);
    TriggerEnable(libUIUI_gt_UIDebugPanelEnableAllCombatTextCheckboxClicked, true);
    if ((libUIUI_gv_uIDebugPanelFloatingCombatTextToggle == true)) {
        DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_enableAllFloatingCombatTextCheckbox, PlayerGroupAll(), true);
    }

    return true;
}

trigger auto_libSprt_gf_DEBUGToggleSavedHeroCheckbox_Trigger = null;

void libSprt_gf_DEBUGToggleSavedHeroCheckbox () {
    if (auto_libSprt_gf_DEBUGToggleSavedHeroCheckbox_Trigger == null) {
        auto_libSprt_gf_DEBUGToggleSavedHeroCheckbox_Trigger = TriggerCreate("auto_libSprt_gf_DEBUGToggleSavedHeroCheckbox_TriggerFunc");
    }

    TriggerExecute(auto_libSprt_gf_DEBUGToggleSavedHeroCheckbox_Trigger, false, false);
}

bool auto_libSprt_gf_DEBUGToggleSavedHeroCheckbox_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    if ((libCore_gv_dEBUGDebuggingEnabled == false)) {
        return true;
    }

    TriggerEnable(libUIUI_gt_UIDebugPanelSavedHeroCheckboxClicked, false);
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_savedHeroCheckbox, PlayerGroupAll(), false);
    if ((libUIUI_gv_uIDebugPanelSavedHero == false)) {
        libUIUI_gv_uIDebugPanelSavedHero = true;
        libNtve_gf_SetDialogItemChecked(libUIUI_gv_uIDebugPanel.lv_savedHeroCheckbox, true, PlayerGroupAll());
    }
    else {
        libUIUI_gv_uIDebugPanelSavedHero = false;
        libNtve_gf_SetDialogItemChecked(libUIUI_gv_uIDebugPanel.lv_savedHeroCheckbox, false, PlayerGroupAll());
    }
    Wait(0.75, c_timeGame);
    TriggerEnable(libUIUI_gt_UIDebugPanelSavedHeroCheckboxClicked, true);
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_savedHeroCheckbox, PlayerGroupSingle(1), true);
    return true;
}

void libSprt_gf_DEBUGRefreshCooldownsforUnit (int lp_player, unit lp_unit) {
    int auto8A789BA6_ae;
    int auto8A789BA6_ai;
    int autoFBC6DAF3_ae;

    // Variable Declarations
    int lv_itAbility;
    int lv_ownerofUnit;
    string lv_abilLink;
    string lv_cooldownLink;
    string lv_chargeLink;
    string lv_itemUnitType;
    int lv_itemIndex;
    int lv_currentRank;
    int lv_itItems;
    int lv_itAbilitiesOnItems;
    string lv_itemLink;
    unitgroup lv_unitGroup;

    // Variable Initialization
    lv_cooldownLink = "";
    lv_chargeLink = "";
    lv_unitGroup = UnitGroupEmpty();

    // Implementation
    lv_ownerofUnit = UnitGetOwner(lp_unit);
    auto8A789BA6_ae = UnitAbilityCount(lp_unit);
    auto8A789BA6_ai = 1;
    lv_itAbility = 1;
    for ( ; ( (auto8A789BA6_ai >= 0 && lv_itAbility <= auto8A789BA6_ae) || (auto8A789BA6_ai <= 0 && lv_itAbility >= auto8A789BA6_ae) ) ; lv_itAbility += auto8A789BA6_ai ) {
        lv_abilLink = UnitAbilityGet(lp_unit, lv_itAbility);
        if ((lv_abilLink != "") && (lv_abilLink != null) && ((AbilityClass(lv_abilLink) == c_classIdCAbilAugment) || (AbilityClass(lv_abilLink) == c_classIdCAbilBehavior) || (AbilityClass(lv_abilLink) == c_classIdCAbilEffectInstant) || (AbilityClass(lv_abilLink) == c_classIdCAbilEffectTarget) || (AbilityClass(lv_abilLink) == c_classIdCAbilMorph))) {
            lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.Link", lv_ownerofUnit);
            libNtve_gf_UnitRemoveCooldown(lp_unit, lv_cooldownLink);
            libNtve_gf_PlayerRemoveCooldown(lv_ownerofUnit, lv_cooldownLink);
            lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Charge.Link", lv_ownerofUnit);
            UnitAddChargeUsed(lp_unit, lv_chargeLink, -1.0);
            PlayerAddChargeUsed(lv_ownerofUnit, lv_cooldownLink, -1.0);
        }

    }
    autoFBC6DAF3_ae = UnitInventoryCount(lp_unit, c_unitInventoryCountCarried);
    lv_itItems = 1;
    for ( ; lv_itItems <= autoFBC6DAF3_ae ; lv_itItems += 1 ) {
        lv_itemUnitType = UnitGetType(UnitInventoryItem(lp_unit, lv_itItems));
        lv_itemLink = (CatalogFieldValueGet(c_gameCatalogUnit, lv_itemUnitType, "Item", c_playerAny));
        lv_abilLink = (CatalogFieldValueGet(c_gameCatalogItem, lv_itemLink, "Abil", c_playerAny));
        lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.Link", lv_ownerofUnit);
        libNtve_gf_UnitRemoveCooldown(lp_unit, lv_cooldownLink);
        lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Charge.Link", lv_ownerofUnit);
        UnitAddChargeUsed(lp_unit, lv_chargeLink, -1.0);
    }
}

void libSprt_gf_DEBUGToggleUpdateDeathUIElements () {
    // Implementation
    if ((libGame_gv_heroDeath_RunDeathUIUpdates == true)) {
        libGame_gv_heroDeath_RunDeathUIUpdates = false;
    }
    else {
        libGame_gv_heroDeath_RunDeathUIUpdates = true;
    }
}

void libSprt_gf_DEBUGIncrementAllQuests (int lp_player, int lp_count) {
    unitgroup auto3DF71D7D_g;
    int auto3DF71D7D_u;
    int auto4FF55E2E_ae;
    int auto4FF55E2E_ai;

    // Variable Declarations
    const int lv_globalMaxTokenCount = 1000;
    int lv_maxBehaviorTokenCount;
    unit lv_itSelectedUnit;
    unitgroup lv_selectedUnits;
    int lv_itBehavior;
    string lv_tokenBehavior;
    int lv_currentTokenCount;
    int lv_maxAllowedTokenCount;
    int lv_newTokenCount;

    // Variable Initialization
    lv_selectedUnits = UnitGroupSelected(lp_player);

    // Implementation
    auto3DF71D7D_g = lv_selectedUnits;
    auto3DF71D7D_u = 1;
    for ( ; auto3DF71D7D_u <= UnitGroupCount(auto3DF71D7D_g, c_unitCountAll) ; auto3DF71D7D_u += (lv_itSelectedUnit == UnitGroupUnit(auto3DF71D7D_g, auto3DF71D7D_u)) ) {
        lv_itSelectedUnit = UnitGroupUnit(auto3DF71D7D_g, auto3DF71D7D_u);
        auto4FF55E2E_ae = UnitBehaviorCountAll(lv_itSelectedUnit);
        auto4FF55E2E_ai = 1;
        lv_itBehavior = 1;
        for ( ; ( (auto4FF55E2E_ai >= 0 && lv_itBehavior <= auto4FF55E2E_ae) || (auto4FF55E2E_ai <= 0 && lv_itBehavior >= auto4FF55E2E_ae) ) ; lv_itBehavior += auto4FF55E2E_ai ) {
            lv_tokenBehavior = UnitBehaviorGet(lv_itSelectedUnit, lv_itBehavior);
            if ((CatalogFieldValueGet(c_gameCatalogBehavior, lv_tokenBehavior, "BehaviorCategories[" + IntToString(c_unitBehaviorFlagQuest) + "]", lp_player) == "1")) {
                lv_currentTokenCount = FixedToInt(UnitGetTokenCount(lv_itSelectedUnit, CatalogFieldValueGet(c_gameCatalogBehavior, lv_tokenBehavior, "TokenId", c_playerAny)));
                lv_maxBehaviorTokenCount = StringToInt(CatalogFieldValueGet(c_gameCatalogBehavior, lv_tokenBehavior, "Max", lp_player));
                lv_maxAllowedTokenCount = MinI(lv_globalMaxTokenCount, lv_maxBehaviorTokenCount);
                if ((lv_currentTokenCount >= lv_maxAllowedTokenCount)) {
                    TextExpressionSetToken("Param/Expression/lib_Sprt_F4F0601C", "A", StringToText((lv_tokenBehavior)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_F4F0601C"), true);
                    continue;
                }

                if ((lp_count == 0)) {
                    lv_newTokenCount = lv_maxAllowedTokenCount;
                    TextExpressionSetToken("Param/Expression/lib_Sprt_71F023F7", "A", StringToText((lv_tokenBehavior)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_71F023F7"), true);
                }
                else {
                    lv_newTokenCount = MinI((lp_count + lv_currentTokenCount), lv_maxAllowedTokenCount);
                    TextExpressionSetToken("Param/Expression/lib_Sprt_3D323D11", "B", IntToText(lp_count));
                    TextExpressionSetToken("Param/Expression/lib_Sprt_3D323D11", "A", StringToText((lv_tokenBehavior)));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_3D323D11"), true);
                }
                UnitSetTokenCount(lv_itSelectedUnit, CatalogFieldValueGet(c_gameCatalogBehavior, lv_tokenBehavior, "TokenId", c_playerAny), lv_newTokenCount);
            }

        }
    }
}

fixed libSprt_gf_DebugGameTimeDelta () {
    // Implementation
    return libSprt_gv_debug_GameTimeDelta;
}

void libSprt_gf_DEBUGTalentsRespec (int lp_player, int lp_tier) {
    int auto77BD8986_ae;
    int auto77BD8986_ai;
    int autoD88DF097_ae;
    int autoD88DF097_ai;
    unitgroup auto2AC838C9_g;
    int auto2AC838C9_u;

    // Variable Declarations
    int lv_itButton;
    int lv_itBehavior;
    unit lv_itHeroUnit;
    unit lv_heroUnit;
    int lv_heroIndex;

    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    auto77BD8986_ae = libGame_gv_talents_TalentChoices[lp_player][lp_tier].lv_numberOfTalentsForThisTier;
    auto77BD8986_ai = 1;
    lv_itButton = 1;
    for ( ; ( (auto77BD8986_ai >= 0 && lv_itButton <= auto77BD8986_ae) || (auto77BD8986_ai <= 0 && lv_itButton >= auto77BD8986_ae) ) ; lv_itButton += auto77BD8986_ai ) {
        libGame_gf_RemoveTalentAbilityModificationsForPlayerAtTalent(lp_player, lp_tier, lv_itButton);
        PlayerRemoveTalent(lp_player, libGame_gv_talents_TalentChoices[lp_player][lp_tier].lv_talentData[lv_itButton].lv_talentCatalogLink);
        autoD88DF097_ae = libGame_gv_talents_TalentChoices[lp_player][lp_tier].lv_talentData[lv_itButton].lv_behaviorCount;
        autoD88DF097_ai = 1;
        lv_itBehavior = 1;
        for ( ; ( (autoD88DF097_ai >= 0 && lv_itBehavior <= autoD88DF097_ae) || (autoD88DF097_ai <= 0 && lv_itBehavior >= autoD88DF097_ae) ) ; lv_itBehavior += autoD88DF097_ai ) {
            auto2AC838C9_g = libGame_gv_players[lp_player].lv_heroUnitGroup;
            auto2AC838C9_u = 1;
            for ( ; auto2AC838C9_u <= UnitGroupCount(auto2AC838C9_g, c_unitCountAll) ; auto2AC838C9_u += (lv_itHeroUnit == UnitGroupUnit(auto2AC838C9_g, auto2AC838C9_u)) ) {
                lv_itHeroUnit = UnitGroupUnit(auto2AC838C9_g, auto2AC838C9_u);
                UnitBehaviorRemove(lv_itHeroUnit, libGame_gv_talents_TalentChoices[lp_player][lp_tier].lv_talentData[lv_itButton].lv_behaviors[lv_itBehavior], 1);
            }
        }
    }
    TalentTreeClearTier(lp_player, lp_tier);
    libGame_gv_talents_TalentChoices[lp_player][lp_tier].lv_selection = 0;
    libUIUI_gf_UIUpdateEventPlayerStatsChange(lp_player);
    libGame_gf_TalentsUpdateChoicePanelForPlayer(lp_player);
}

void libSprt_gf_DEBUGAddDynamicStacksofBehaviortoUnit (fixed lp_rate, string lp_behavior, int lp_player, unit lp_unit) {
    // Variable Declarations
    int lv_count;

    // Variable Initialization

    // Implementation
    UnitBehaviorRemove(lp_unit, lp_behavior, 1000);
    lv_count = FloorI((libGame_gv_scalingTicks * lp_rate));
    UnitBehaviorAdd(lp_unit, lp_behavior, lp_unit, lv_count);
    TextExpressionSetToken("Param/Expression/lib_Sprt_76BB2D86", "A", IntToText(lv_count));
    TextExpressionSetToken("Param/Expression/lib_Sprt_76BB2D86", "A", IntToText(lv_count));
    TextExpressionSetToken("Param/Expression/lib_Sprt_76BB2D86", "B", StringToText(CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "Name", c_playerAny)));
    TextExpressionSetToken("Param/Expression/lib_Sprt_76BB2D86", "C", IntToText(lp_player));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Sprt_76BB2D86"));
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include Support
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_IncludeSupport_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_IncludeSupport_Init () {
    libSprt_gt_IncludeSupport = TriggerCreate("libSprt_gt_IncludeSupport_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AI Spawning Test
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_AISpawningTest_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(5, TextExpressionAssemble("Param/Expression/lib_Sprt_A8958054"), true);
    libGame_gv_players[1].lv_heroIndex = 1;
    Wait(10.0, c_timeGame);
    ConsoleCommand("restart", true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_AISpawningTest_Init () {
    libSprt_gt_AISpawningTest = TriggerCreate("libSprt_gt_AISpawningTest_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Automated Build Test
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_AutomatedBuildTest_Func (bool testConds, bool runActions) {
    playergroup autoE076AD7D_g;
    int autoE076AD7D_p;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(5, TextExpressionAssemble("Param/Expression/lib_Sprt_8F8ADE66"), true);
    libGame_gv_players[1].lv_heroIndex = 1;
    Wait(2.0, c_timeGame);
    ConsoleCommand("speed 8", true, true);
    libSprt_gf_DEBUGStartGame();
    Wait(2.0, c_timeGame);
    CameraPan(1, UnitGroupCenterOfGroup(UnitGroupSelected(1)), 0.0, -1, 0.0, false);
    CameraFollowUnitGroup(1, UnitGroupSelected(1), true, false);
    CameraLockInput(1, true);
    Wait(8.0, c_timeGame);
    libAIAI_gf_HeroAITakeOverHeroForPlayer(1);
    libAIAI_gf_HeroAIEnableAIForPlayer(PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, 1));
    libAIAI_gf_HeroAIEnableAIForPlayer(PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 2));
    libAIAI_gf_HeroAIEnableAIForPlayer(PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, 2));
    libAIAI_gf_HeroAIEnableAIForPlayer(PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 3));
    libAIAI_gf_HeroAIEnableAIForPlayer(PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, 3));
    libAIAI_gf_HeroAIEnableAIForPlayer(PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 4));
    libAIAI_gf_HeroAIEnableAIForPlayer(PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, 4));
    libAIAI_gf_HeroAIEnableAIForPlayer(PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 5));
    libAIAI_gf_HeroAIEnableAIForPlayer(PlayerGroupPlayer(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, 5));
    Wait(240.0, c_timeGame);
    TriggerDebugOutput(5, TextExpressionAssemble("Param/Expression/lib_Sprt_DCA8C979"), true);
    autoE076AD7D_g = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup; 
    autoE076AD7D_p = 1;
    for ( ; autoE076AD7D_p <= PlayerGroupCount(autoE076AD7D_g) ; autoE076AD7D_p += (lv_player == PlayerGroupPlayer(autoE076AD7D_g, autoE076AD7D_p)) ) {
        lv_player = PlayerGroupPlayer(autoE076AD7D_g, autoE076AD7D_p);
        if ((lv_player <= libCore_gv_bALMaxPlayers)) {
            libAIAI_gf_HeroAIDisableAIForPlayer(lv_player);
            UnitKill(libGame_gv_players[lv_player].lv_heroUnit);
        }

    }
    Wait(90.0, c_timeGame);
    ConsoleCommand("exit", true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_AutomatedBuildTest_Init () {
    libSprt_gt_AutomatedBuildTest = TriggerCreate("libSprt_gt_AutomatedBuildTest_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Test - Spawn Heroes For Heroes Performance Test Map
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_PerformanceTestSpawnHeroesForHeroesPerformanceTestMap_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 1);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, 1);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 2);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, 2);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 3);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, 3);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 4);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, 4);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 5);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, 5);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, 6);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, 6);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, 7);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, 7);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, 8);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, 8);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, 9);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, 9);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, 10);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, 10);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Stitches"), 1, 1, 0.0, 1, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Arthas"), 1, 1, 0.0, 2, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Diablo"), 1, 1, 0.0, 3, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Tyrael"), 1, 1, 0.0, 4, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Nova"), 1, 1, 0.0, 5, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Barbarian"), 1, 1, 0.0, 6, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Kerrigan"), 1, 1, 0.0, 7, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("Uther"), 1, 1, 0.0, 8, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("WitchDoctor"), 1, 1, 0.0, 9, 0);
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(libCore_gf_GetIndexFromHero("L90ETC"), 1, 1, 0.0, 10, 0);
    UnitBehaviorAdd(libGame_gv_players[6].lv_heroUnit, "Ultimate1Unlocked", libGame_gv_players[6].lv_heroUnit, 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_PerformanceTestSpawnHeroesForHeroesPerformanceTestMap_Init () {
    libSprt_gt_PerformanceTestSpawnHeroesForHeroesPerformanceTestMap = TriggerCreate("libSprt_gt_PerformanceTestSpawnHeroesForHeroesPerformanceTestMap_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Test - Run Performance Test
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_PerformanceTestRunPerformanceTest_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    int lv_targetPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libSprt_gv_performanceTestPerformanceTestRunning == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_Sprt_DC9BF57F", "A", IntToText(GameTestConfigType()));
    TriggerDebugOutput(5, TextExpressionAssemble("Param/Expression/lib_Sprt_DC9BF57F"), true);
    TriggerEnable(libSprt_gt_PerformanceTestGetFPS, true);
    TriggerEnable(libSprt_gt_PerformanceTestOutputFPSToFile, true);
    TriggerEnable(libSprt_gt_PerformanceTestMaintainHeroHealth, true);
    libSprt_gf_PerformanceTestHeroSelectScreen();
    libSprt_gf_PerformanceTestHeroesIdleBeforeGame();
    libSprt_gf_PerformanceTestHeroesIdleGameStart();
    Wait(15.0, c_timeGame);
    libSprt_gf_PerformanceTestHeroesIdleMinionsFighting();
    libSprt_gf_PerformanceTestTwoHeroesActiveStart();
    Wait(20.0, c_timeGame);
    libSprt_gf_PerformanceTestTwoHeroesActiveInLane();
    libSprt_gf_PerformanceTestSixHeroesActiveStart();
    Wait(20.0, c_timeGame);
    libSprt_gf_PerformanceTestSixHeroesActiveInLane();
    libSprt_gf_PerformanceTestTenHeroesActiveStart();
    Wait(20.0, c_timeGame);
    libSprt_gf_PerformanceTestTenHeroesActiveInLane();
    libSprt_gf_PerformanceTestChaosTeamDisabled();
    Wait(30.0, c_timeGame);
    libSprt_gf_PerformanceTestOrderTeamPushingUnopposed();
    ConsoleCommand("exit", true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_PerformanceTestRunPerformanceTest_Init () {
    libSprt_gt_PerformanceTestRunPerformanceTest = TriggerCreate("libSprt_gt_PerformanceTestRunPerformanceTest_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Test - Set Hero Choices
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_PerformanceTestSetHeroChoices_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_players[1].lv_heroIndex = libCore_gf_GetIndexFromHero("Muradin");
    libGame_gv_players[2].lv_heroIndex = libCore_gf_GetIndexFromHero("Stitches");
    libGame_gv_players[3].lv_heroIndex = libCore_gf_GetIndexFromHero("Nova");
    libGame_gv_players[4].lv_heroIndex = libCore_gf_GetIndexFromHero("Uther");
    libGame_gv_players[5].lv_heroIndex = libCore_gf_GetIndexFromHero("Falstad");
    libGame_gv_players[6].lv_heroIndex = libCore_gf_GetIndexFromHero("Arthas");
    libGame_gv_players[7].lv_heroIndex = libCore_gf_GetIndexFromHero("Kerrigan");
    libGame_gv_players[8].lv_heroIndex = libCore_gf_GetIndexFromHero("DemonHunter");
    libGame_gv_players[9].lv_heroIndex = libCore_gf_GetIndexFromHero("Tassadar");
    libGame_gv_players[10].lv_heroIndex = libCore_gf_GetIndexFromHero("WitchDoctor");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_PerformanceTestSetHeroChoices_Init () {
    libSprt_gt_PerformanceTestSetHeroChoices = TriggerCreate("libSprt_gt_PerformanceTestSetHeroChoices_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Test - Get FPS
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_PerformanceTestGetFPS_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    PerfTestGetFPS();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_PerformanceTestGetFPS_Init () {
    libSprt_gt_PerformanceTestGetFPS = TriggerCreate("libSprt_gt_PerformanceTestGetFPS_Func");
    TriggerEnable(libSprt_gt_PerformanceTestGetFPS, false);
    TriggerAddEventTimePeriodic(libSprt_gt_PerformanceTestGetFPS, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Test - Output FPS To File
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_PerformanceTestOutputFPSToFile_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(5, StringExternal("Param/Value/lib_Sprt_8CB44873"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_PerformanceTestOutputFPSToFile_Init () {
    libSprt_gt_PerformanceTestOutputFPSToFile = TriggerCreate("libSprt_gt_PerformanceTestOutputFPSToFile_Func");
    TriggerEnable(libSprt_gt_PerformanceTestOutputFPSToFile, false);
    TriggerAddEventTimePeriodic(libSprt_gt_PerformanceTestOutputFPSToFile, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Performance Test - Maintain Hero Health
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_PerformanceTestMaintainHeroHealth_Func (bool testConds, bool runActions) {
    int auto2B7B4FF6_ae;

    // Variable Declarations
    int lv_loop;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto2B7B4FF6_ae = 10;
    lv_loop = 1;
    for ( ; lv_loop <= auto2B7B4FF6_ae ; lv_loop += 1 ) {
        UnitSetPropertyFixed(libGame_gv_players[lv_loop].lv_heroUnit, c_unitPropLifePercent, 100.0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_PerformanceTestMaintainHeroHealth_Init () {
    libSprt_gt_PerformanceTestMaintainHeroHealth = TriggerCreate("libSprt_gt_PerformanceTestMaintainHeroHealth_Func");
    TriggerEnable(libSprt_gt_PerformanceTestMaintainHeroHealth, false);
    TriggerAddEventTimePeriodic(libSprt_gt_PerformanceTestMaintainHeroHealth, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat Tracking - Start for Player
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_StatTrackingStartforPlayer_Func (bool testConds, bool runActions) {
    int auto2F434F2A_ae;
    int auto2F434F2A_ai;

    // Variable Declarations
    int lv_trackerPlayer;
    int lv_trackerPlayerHeroIndex;
    string lv_trackerPlayerHero;
    string lv_trackerPlayerStr;
    int lv_itPlayer;

    // Variable Initialization
    lv_trackerPlayerStr = "";

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != "")) {
        lv_trackerPlayerStr = StringWord(EventChatMessage(false), 2);
        if ((StringToInt(lv_trackerPlayerStr) >= 1) && (StringToInt(lv_trackerPlayerStr) <= libCore_gv_bALMaxPlayers)) {
            libSprt_gf_StatTrackingStartTrackingforPlayer(StringToInt(lv_trackerPlayerStr));
        }
        else {
            lv_trackerPlayerHero = (lv_trackerPlayerStr);
            if ((libCore_gf_GetIndexFromHero(lv_trackerPlayerHero) > 0)) {
                auto2F434F2A_ae = libCore_gv_bALMaxPlayers;
                auto2F434F2A_ai = 1;
                lv_itPlayer = 1;
                for ( ; ( (auto2F434F2A_ai >= 0 && lv_itPlayer <= auto2F434F2A_ae) || (auto2F434F2A_ai <= 0 && lv_itPlayer >= auto2F434F2A_ae) ) ; lv_itPlayer += auto2F434F2A_ai ) {
                    if ((libGame_gv_players[lv_itPlayer].lv_heroData.lv_heroCatalogLink == lv_trackerPlayerHero)) {
                        libSprt_gf_StatTrackingStartTrackingforPlayer(lv_itPlayer);
                    }

                }
            }

        }
    }
    else {
        libSprt_gf_StatTrackingStartTrackingforPlayer(EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_StatTrackingStartforPlayer_Init () {
    libSprt_gt_StatTrackingStartforPlayer = TriggerCreate("libSprt_gt_StatTrackingStartforPlayer_Func");
    TriggerAddEventChatMessage(libSprt_gt_StatTrackingStartforPlayer, c_playerAny, "StatTrackStart", false);
    TriggerAddEventChatMessage(libSprt_gt_StatTrackingStartforPlayer, c_playerAny, "StatTrackerStart", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat Tracking - Log Break
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_StatTrackingLogBreak_Func (bool testConds, bool runActions) {
    int auto29B5A237_ae;
    int auto29B5A237_ai;

    // Variable Declarations
    int lv_trackerPlayer;
    int lv_trackerPlayerHeroIndex;
    string lv_trackerPlayerHero;
    string lv_trackerPlayerStr;
    int lv_itPlayer;

    // Variable Initialization
    lv_trackerPlayerStr = "";

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != "")) {
        lv_trackerPlayerStr = StringWord(EventChatMessage(false), 2);
        if ((StringToInt(lv_trackerPlayerStr) >= 1) && (StringToInt(lv_trackerPlayerStr) <= libCore_gv_bALMaxPlayers)) {
            libSprt_gf_StatTrackingBreakTrackingforPlayer(StringToInt(lv_trackerPlayerStr));
        }
        else {
            lv_trackerPlayerHero = (lv_trackerPlayerStr);
            if ((libCore_gf_GetIndexFromHero(lv_trackerPlayerHero) > 0)) {
                auto29B5A237_ae = libCore_gv_bALMaxPlayers;
                auto29B5A237_ai = 1;
                lv_itPlayer = 1;
                for ( ; ( (auto29B5A237_ai >= 0 && lv_itPlayer <= auto29B5A237_ae) || (auto29B5A237_ai <= 0 && lv_itPlayer >= auto29B5A237_ae) ) ; lv_itPlayer += auto29B5A237_ai ) {
                    if ((libGame_gv_players[lv_itPlayer].lv_heroData.lv_heroCatalogLink == lv_trackerPlayerHero)) {
                        libSprt_gf_StatTrackingBreakTrackingforPlayer(lv_itPlayer);
                    }

                }
            }

        }
    }
    else {
        libSprt_gf_StatTrackingBreakTrackingforPlayer(EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_StatTrackingLogBreak_Init () {
    libSprt_gt_StatTrackingLogBreak = TriggerCreate("libSprt_gt_StatTrackingLogBreak_Func");
    TriggerAddEventChatMessage(libSprt_gt_StatTrackingLogBreak, c_playerAny, "StatTrackBreak", false);
    TriggerAddEventChatMessage(libSprt_gt_StatTrackingLogBreak, c_playerAny, "StatTrackerBreak", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat Tracking - Stop
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_StatTrackingStop_Func (bool testConds, bool runActions) {
    int auto6BCF4C98_ae;
    int auto6BCF4C98_ai;

    // Variable Declarations
    int lv_triggeringPlayer;
    int lv_entriesInDataTable;
    int lv_itEntry;
    int lv_itPlayer;
    string lv_effectName;
    int lv_trackerPlayerHeroIndex;
    string lv_trackerPlayerHero;
    string lv_trackerPlayerStr;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();
    lv_effectName = "";
    lv_trackerPlayerStr = "";

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) != "")) {
        lv_trackerPlayerStr = StringWord(EventChatMessage(false), 2);
        if ((StringToInt(lv_trackerPlayerStr) >= 1) && (StringToInt(lv_trackerPlayerStr) <= libCore_gv_bALMaxPlayers)) {
            libSprt_gf_StatTrackingStopTrackingforPlayer(StringToInt(lv_trackerPlayerStr));
        }
        else {
            lv_trackerPlayerHero = (lv_trackerPlayerStr);
            if ((libCore_gf_GetIndexFromHero(lv_trackerPlayerHero) > 0)) {
                auto6BCF4C98_ae = libCore_gv_bALMaxPlayers;
                auto6BCF4C98_ai = 1;
                lv_itPlayer = 1;
                for ( ; ( (auto6BCF4C98_ai >= 0 && lv_itPlayer <= auto6BCF4C98_ae) || (auto6BCF4C98_ai <= 0 && lv_itPlayer >= auto6BCF4C98_ae) ) ; lv_itPlayer += auto6BCF4C98_ai ) {
                    if ((libGame_gv_players[lv_itPlayer].lv_heroData.lv_heroCatalogLink == lv_trackerPlayerHero)) {
                        libSprt_gf_StatTrackingStopTrackingforPlayer(lv_itPlayer);
                    }

                }
            }

        }
    }
    else {
        libSprt_gf_StatTrackingStopTrackingforPlayer(EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_StatTrackingStop_Init () {
    libSprt_gt_StatTrackingStop = TriggerCreate("libSprt_gt_StatTrackingStop_Func");
    TriggerAddEventChatMessage(libSprt_gt_StatTrackingStop, c_playerAny, "StatTrackStop", false);
    TriggerAddEventChatMessage(libSprt_gt_StatTrackingStop, c_playerAny, "StatTrackerStop", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat Tracking - Start Tracking for All Players
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_StatTrackingStartTrackingforAllPlayers_Func (bool testConds, bool runActions) {
    playergroup auto2BCE18E9_g;
    int auto2BCE18E9_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto2BCE18E9_g = PlayerGroupActive(); 
    auto2BCE18E9_p = 1;
    for ( ; auto2BCE18E9_p <= PlayerGroupCount(auto2BCE18E9_g) ; auto2BCE18E9_p += (lv_itPlayer == PlayerGroupPlayer(auto2BCE18E9_g, auto2BCE18E9_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto2BCE18E9_g, auto2BCE18E9_p);
        libSprt_gf_StatTrackingStartTrackingforPlayer(lv_itPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_StatTrackingStartTrackingforAllPlayers_Init () {
    libSprt_gt_StatTrackingStartTrackingforAllPlayers = TriggerCreate("libSprt_gt_StatTrackingStartTrackingforAllPlayers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat Tracking - Stop Tracking for All Players
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_StatTrackingStopTrackingforAllPlayers_Func (bool testConds, bool runActions) {
    playergroup auto87C42493_g;
    int auto87C42493_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto87C42493_g = PlayerGroupActive(); 
    auto87C42493_p = 1;
    for ( ; auto87C42493_p <= PlayerGroupCount(auto87C42493_g) ; auto87C42493_p += (lv_itPlayer == PlayerGroupPlayer(auto87C42493_g, auto87C42493_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto87C42493_g, auto87C42493_p);
        libSprt_gf_StatTrackingStopTrackingforPlayer(lv_itPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_StatTrackingStopTrackingforAllPlayers_Init () {
    libSprt_gt_StatTrackingStopTrackingforAllPlayers = TriggerCreate("libSprt_gt_StatTrackingStopTrackingforAllPlayers_Func");
    TriggerAddEventChatMessage(libSprt_gt_StatTrackingStopTrackingforAllPlayers, c_playerAny, "StatTrackStopAll", true);
    TriggerAddEventChatMessage(libSprt_gt_StatTrackingStopTrackingforAllPlayers, c_playerAny, "StatTrackerStopAll", true);
    TriggerAddEventChatMessage(libSprt_gt_StatTrackingStopTrackingforAllPlayers, c_playerAny, "stattrackstopall", true);
    TriggerAddEventChatMessage(libSprt_gt_StatTrackingStopTrackingforAllPlayers, c_playerAny, "stattrackerstopall", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat Tracking - Damage Tracking
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_StatTrackingDamageTracking_Func (bool testConds, bool runActions) {
    int auto8BE242BD_ae;
    int auto8BE242BD_ai;

    // Variable Declarations
    int lv_damagingPlayer;
    fixed lv_damageAttempted;
    fixed lv_damageDone;
    int lv_itDamageEffect;
    string lv_damagingEffect;
    string lv_damagingEffectName;
    string lv_damagingEffectCountAsStr;
    string lv_damagingEffectPlayerAsStr;
    bool lv_effectFound;
    string lv_lookupNamePrefix;

    // Variable Initialization
    lv_damagingPlayer = EventUnitDamageSourcePlayer();
    lv_damagingEffectName = "";
    lv_damagingEffectCountAsStr = "";
    lv_damagingEffectPlayerAsStr = "";
    lv_lookupNamePrefix = "";

    // Conditions
    if (testConds) {
        if (!((lv_damagingPlayer > 0))) {
            return false;
        }

        if (!((lv_damagingPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((libSprt_gv_statTrackingOn[lv_damagingPlayer] == true))) {
            return false;
        }

        if (!((lv_damagingPlayer != EventPlayer()))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damageAttempted = EventUnitDamageAttempted();
    lv_damageDone = EventUnitDamageAmount();
    lv_damagingEffect = EventUnitDamageEffect();
    lv_damagingEffectName = (lv_damagingEffect);
    lv_damagingEffectPlayerAsStr = IntToString(lv_damagingPlayer);
    auto8BE242BD_ae = DataTableGetInt(true, ("DMGStatTrackPlayer" + lv_damagingEffectPlayerAsStr + ":EffectInstanceCount"));
    auto8BE242BD_ai = 1;
    lv_itDamageEffect = 1;
    for ( ; ( (auto8BE242BD_ai >= 0 && lv_itDamageEffect <= auto8BE242BD_ae) || (auto8BE242BD_ai <= 0 && lv_itDamageEffect >= auto8BE242BD_ae) ) ; lv_itDamageEffect += auto8BE242BD_ai ) {
        if ((DataTableGetString(true, ("DMGStatTrackPlayer" + lv_damagingEffectPlayerAsStr + ":Effect" + IntToString(lv_itDamageEffect))) == lv_damagingEffectName)) {
            lv_effectFound = true;
            break;
        }

    }
    if ((lv_effectFound != true)) {
        DataTableSetInt(true, ("DMGStatTrackPlayer" + lv_damagingEffectPlayerAsStr + ":EffectInstanceCount"), (DataTableGetInt(true, ("DMGStatTrackPlayer" + lv_damagingEffectPlayerAsStr + ":EffectInstanceCount")) + 1));
        DataTableSetString(true, ("DMGStatTrackPlayer" + lv_damagingEffectPlayerAsStr + ":Effect" + IntToString(DataTableGetInt(true, ("DMGStatTrackPlayer" + lv_damagingEffectPlayerAsStr + ":EffectInstanceCount")))), lv_damagingEffectName);
    }

    if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true)) {
        lv_lookupNamePrefix = ("DMG" + lv_damagingEffectName + "Heroic");
    }
    else {
        lv_lookupNamePrefix = ("DMG" + lv_damagingEffectName);
    }
    lv_damagingEffectCountAsStr = IntToString(DataTableGetInt(true, (lv_lookupNamePrefix + ":EffectCount" + lv_damagingEffectPlayerAsStr)));
    DataTableSetInt(true, (lv_lookupNamePrefix + ":EffectCount" + lv_damagingEffectPlayerAsStr), (DataTableGetInt(true, (lv_lookupNamePrefix + ":EffectCount" + lv_damagingEffectPlayerAsStr)) + 1));
    DataTableSetFixed(true, (lv_lookupNamePrefix + ":DamageAttempted" + lv_damagingEffectPlayerAsStr), (DataTableGetFixed(true, (lv_lookupNamePrefix + ":DamageAttempted" + lv_damagingEffectPlayerAsStr)) + lv_damageAttempted));
    DataTableSetFixed(true, (lv_lookupNamePrefix + ":DamageDone" + lv_damagingEffectPlayerAsStr), (DataTableGetFixed(true, (lv_lookupNamePrefix + ":DamageDone" + lv_damagingEffectPlayerAsStr)) + lv_damageDone));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_StatTrackingDamageTracking_Init () {
    libSprt_gt_StatTrackingDamageTracking = TriggerCreate("libSprt_gt_StatTrackingDamageTracking_Func");
    TriggerEnable(libSprt_gt_StatTrackingDamageTracking, false);
    TriggerAddEventUnitDamaged(libSprt_gt_StatTrackingDamageTracking, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat Tracking - Healing Tracking
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_StatTrackingHealingTracking_Func (bool testConds, bool runActions) {
    int auto03E8CDA8_ae;
    int auto03E8CDA8_ai;

    // Variable Declarations
    int lv_healingPlayer;
    fixed lv_healingAttempted;
    fixed lv_healingDone;
    int lv_itHealingEffect;
    string lv_healingEffect;
    string lv_healingEffectName;
    string lv_healingEffectCountAsStr;
    string lv_healingEffectPlayerAsStr;
    bool lv_effectFound;
    string lv_lookupNamePrefix;

    // Variable Initialization
    lv_healingPlayer = UnitGetOwner(EventUnitHealLaunchUnit());
    lv_healingEffectName = "";
    lv_healingEffectCountAsStr = "";
    lv_healingEffectPlayerAsStr = "";
    lv_lookupNamePrefix = "";

    // Conditions
    if (testConds) {
        if (!((lv_healingPlayer > 0))) {
            return false;
        }

        if (!((lv_healingPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((libSprt_gv_statTrackingOn[lv_healingPlayer] == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_healingDone = EventUnitHealAmount();
    lv_healingEffect = EventUnitHealEffect();
    lv_healingEffectName = (lv_healingEffect);
    lv_healingEffectPlayerAsStr = IntToString(lv_healingPlayer);
    auto03E8CDA8_ae = DataTableGetInt(true, ("HLGStatTrackPlayer" + lv_healingEffectPlayerAsStr + ":EffectInstanceCount"));
    auto03E8CDA8_ai = 1;
    lv_itHealingEffect = 1;
    for ( ; ( (auto03E8CDA8_ai >= 0 && lv_itHealingEffect <= auto03E8CDA8_ae) || (auto03E8CDA8_ai <= 0 && lv_itHealingEffect >= auto03E8CDA8_ae) ) ; lv_itHealingEffect += auto03E8CDA8_ai ) {
        if ((DataTableGetString(true, ("HLGStatTrackPlayer" + lv_healingEffectPlayerAsStr + ":Effect" + IntToString(lv_itHealingEffect))) == lv_healingEffectName)) {
            lv_effectFound = true;
            break;
        }

    }
    if ((lv_effectFound != true)) {
        DataTableSetInt(true, ("HLGStatTrackPlayer" + lv_healingEffectPlayerAsStr + ":EffectInstanceCount"), (DataTableGetInt(true, ("HLGStatTrackPlayer" + lv_healingEffectPlayerAsStr + ":EffectInstanceCount")) + 1));
        DataTableSetString(true, ("HLGStatTrackPlayer" + lv_healingEffectPlayerAsStr + ":Effect" + IntToString(DataTableGetInt(true, ("HLGStatTrackPlayer" + lv_healingEffectPlayerAsStr + ":EffectInstanceCount")))), lv_healingEffectName);
    }

    if ((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true)) {
        lv_lookupNamePrefix = ("HLG" + lv_healingEffectName + "Heroic");
    }
    else {
        lv_lookupNamePrefix = ("HLG" + lv_healingEffectName);
    }
    lv_healingEffectCountAsStr = IntToString(DataTableGetInt(true, (lv_lookupNamePrefix + ":EffectCount" + lv_healingEffectPlayerAsStr)));
    DataTableSetInt(true, (lv_lookupNamePrefix + ":EffectCount" + lv_healingEffectPlayerAsStr), (DataTableGetInt(true, (lv_lookupNamePrefix + ":EffectCount" + lv_healingEffectPlayerAsStr)) + 1));
    DataTableSetFixed(true, (lv_lookupNamePrefix + ":HealingDone" + lv_healingEffectPlayerAsStr), (DataTableGetFixed(true, (lv_lookupNamePrefix + ":HealingDone" + lv_healingEffectPlayerAsStr)) + lv_healingDone));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_StatTrackingHealingTracking_Init () {
    libSprt_gt_StatTrackingHealingTracking = TriggerCreate("libSprt_gt_StatTrackingHealingTracking_Func");
    TriggerEnable(libSprt_gt_StatTrackingHealingTracking, false);
    TriggerAddEventUnitHealed(libSprt_gt_StatTrackingHealingTracking, null, c_unitVitalAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stat Tracking - Game Over
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_StatTrackingGameOver_Func (bool testConds, bool runActions) {
    int auto42E03538_ae;
    int auto42E03538_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto42E03538_ae = libCore_gv_bALMaxPlayers;
    auto42E03538_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto42E03538_ai >= 0 && lv_itPlayer <= auto42E03538_ae) || (auto42E03538_ai <= 0 && lv_itPlayer >= auto42E03538_ae) ) ; lv_itPlayer += auto42E03538_ai ) {
        if ((libSprt_gv_statTrackingOn[lv_itPlayer] == true)) {
            libSprt_gf_StatTrackingReportStats(lv_itPlayer);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_StatTrackingGameOver_Init () {
    libSprt_gt_StatTrackingGameOver = TriggerCreate("libSprt_gt_StatTrackingGameOver_Func");
    libGame_gf_GameOverEvent(libSprt_gt_StatTrackingGameOver);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data Mining - Listen For Regen Globes
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DataMiningListenForRegenGlobes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_triggeringPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    if (((lv_triggeringPlayer <= 0) || (lv_triggeringPlayer > libCore_gv_bALMaxPlayers))) {
        return true;
    }

    libGame_gv_players[lv_triggeringPlayer].lv_regenGlobes += 1;
    StatEventCreate("RegenGlobePickedUp");
    StatEventAddDataInt(StatEventLastCreated(), "PlayerID", lv_triggeringPlayer);
    StatEventSend(StatEventLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DataMiningListenForRegenGlobes_Init () {
    libSprt_gt_DataMiningListenForRegenGlobes = TriggerCreate("libSprt_gt_DataMiningListenForRegenGlobes_Func");
    TriggerEnable(libSprt_gt_DataMiningListenForRegenGlobes, false);
    TriggerAddEventPlayerEffectUsed(libSprt_gt_DataMiningListenForRegenGlobes, c_playerAny, "RegenGlobeImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data Mining - Periodic Data Send Periodic Event Trigger
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DataMiningPeriodicDataSendPeriodicEventTrigger_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gf_DataMiningPeriodicDataSend();
    TimerStart(libSprt_gv_dataMiningPeriodicTimer, libSprt_gv_dataMiningPeriodicSendPeriod, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DataMiningPeriodicDataSendPeriodicEventTrigger_Init () {
    libSprt_gt_DataMiningPeriodicDataSendPeriodicEventTrigger = TriggerCreate("libSprt_gt_DataMiningPeriodicDataSendPeriodicEventTrigger_Func");
    TriggerEnable(libSprt_gt_DataMiningPeriodicDataSendPeriodicEventTrigger, false);
    TriggerAddEventTimer(libSprt_gt_DataMiningPeriodicDataSendPeriodicEventTrigger, libSprt_gv_dataMiningPeriodicTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Inspect The Balance Probe (balanceprobe)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGInspectTheBalanceProbebalanceprobe_Func (bool testConds, bool runActions) {
    int autoCA64475E_ae;
    int autoCA64475E_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_probeScore;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoCA64475E_ae = libCore_gv_bALMaxPlayers;
    autoCA64475E_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoCA64475E_ai >= 0 && lv_itPlayer <= autoCA64475E_ae) || (autoCA64475E_ai <= 0 && lv_itPlayer >= autoCA64475E_ae) ) ; lv_itPlayer += autoCA64475E_ai ) {
        lv_probeScore = PlayerScoreValueGetAsInt(lv_itPlayer, "BalanceProbe");
        if ((lv_probeScore > 0)) {
            TextExpressionSetToken("Param/Expression/lib_Sprt_93078D24", "A", IntToText(lv_itPlayer));
            TextExpressionSetToken("Param/Expression/lib_Sprt_93078D24", "B", IntToText(lv_probeScore));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_93078D24"), true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGInspectTheBalanceProbebalanceprobe_Init () {
    libSprt_gt_DEBUGInspectTheBalanceProbebalanceprobe = TriggerCreate("libSprt_gt_DEBUGInspectTheBalanceProbebalanceprobe_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGInspectTheBalanceProbebalanceprobe, c_playerAny, "balanceprobe", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Reset The Balance Probe (balancereset)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGResetTheBalanceProbebalancereset_Func (bool testConds, bool runActions) {
    int auto2A10C238_ae;
    int auto2A10C238_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_D45E8DF9"), true);
    auto2A10C238_ae = libCore_gv_bALMaxPlayers;
    auto2A10C238_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto2A10C238_ai >= 0 && lv_itPlayer <= auto2A10C238_ae) || (auto2A10C238_ai <= 0 && lv_itPlayer >= auto2A10C238_ae) ) ; lv_itPlayer += auto2A10C238_ai ) {
        PlayerScoreValueSetFromInt(lv_itPlayer, "BalanceProbe", 0);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGResetTheBalanceProbebalancereset_Init () {
    libSprt_gt_DEBUGResetTheBalanceProbebalancereset = TriggerCreate("libSprt_gt_DEBUGResetTheBalanceProbebalancereset_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGResetTheBalanceProbebalancereset, c_playerAny, "balancereset", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Timed Balance Probe (balancetimer)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGTimedBalanceProbebalancetimer_Func (bool testConds, bool runActions) {
    int autoFF35C5E8_ae;
    int autoFF35C5E8_ai;

    // Variable Declarations
    int lv_itPlayer;
    string lv_durationString;
    fixed lv_duration;

    // Variable Initialization
    lv_durationString = "";

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_durationString = StringWord(EventChatMessage(false), 2);
    if ((lv_durationString == "")) {
        return true;
    }

    lv_duration = StringToFixed(lv_durationString);
    if ((lv_duration <= 0.0)) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_Sprt_C220AFA1", "A", FixedToText(lv_duration, 3));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_C220AFA1"), true);
    autoFF35C5E8_ae = libCore_gv_bALMaxPlayers;
    autoFF35C5E8_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoFF35C5E8_ai >= 0 && lv_itPlayer <= autoFF35C5E8_ae) || (autoFF35C5E8_ai <= 0 && lv_itPlayer >= autoFF35C5E8_ae) ) ; lv_itPlayer += autoFF35C5E8_ai ) {
        PlayerScoreValueSetFromInt(lv_itPlayer, "BalanceProbe", 0);
    }
    libSprt_gv_dEBUGBalanceProbeTimerDuration = lv_duration;
    TimerStart(libSprt_gv_dEBUGBalanceProbeTimer, lv_duration, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGTimedBalanceProbebalancetimer_Init () {
    libSprt_gt_DEBUGTimedBalanceProbebalancetimer = TriggerCreate("libSprt_gt_DEBUGTimedBalanceProbebalancetimer_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGTimedBalanceProbebalancetimer, c_playerAny, "balancetimer", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Balance Probe Timer Expires
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGBalanceProbeTimerExpires_Func (bool testConds, bool runActions) {
    int auto85FD5875_ae;
    int auto85FD5875_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_69378B97"), true);
    auto85FD5875_ae = libCore_gv_bALMaxPlayers;
    auto85FD5875_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto85FD5875_ai >= 0 && lv_itPlayer <= auto85FD5875_ae) || (auto85FD5875_ai <= 0 && lv_itPlayer >= auto85FD5875_ae) ) ; lv_itPlayer += auto85FD5875_ai ) {
        TextExpressionSetToken("Param/Expression/lib_Sprt_92FCDA60", "A", IntToText(lv_itPlayer));
        TextExpressionSetToken("Param/Expression/lib_Sprt_92FCDA60", "B", FixedToText((PlayerScoreValueGetAsInt(lv_itPlayer, "BalanceProbe") / libSprt_gv_dEBUGBalanceProbeTimerDuration), 3));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_92FCDA60"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGBalanceProbeTimerExpires_Init () {
    libSprt_gt_DEBUGBalanceProbeTimerExpires = TriggerCreate("libSprt_gt_DEBUGBalanceProbeTimerExpires_Func");
    TriggerAddEventTimer(libSprt_gt_DEBUGBalanceProbeTimerExpires, libSprt_gv_dEBUGBalanceProbeTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Help (-help)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGHelphelp_Func (bool testConds, bool runActions) {
    string auto626C8B02_val;

    // Variable Declarations
    text lv_helpText;
    text lv_mapMechanic;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto626C8B02_val = libMapM_gf_PrimaryMapMechanic();
    if (auto626C8B02_val == libMapM_gv_mMRavenMechanicName_C) {
        lv_mapMechanic = StringExternal("Param/Value/lib_Sprt_4F5B164C");
    }
    else if (auto626C8B02_val == libMapM_gv_mMGardensDragonMechanicName_C) {
        lv_mapMechanic = StringExternal("Param/Value/lib_Sprt_6C304C4B");
    }
    else if (auto626C8B02_val == libMapM_gv_mMUnderworldMechanicName_C) {
        lv_mapMechanic = StringExternal("Param/Value/lib_Sprt_0418D5C2");
    }
    else {
    }
    TextExpressionSetToken("Param/Expression/lib_Sprt_B8FC5DE5", "A", StringExternal("Param/Value/lib_Sprt_DBB0F085"));
    TextExpressionSetToken("Param/Expression/lib_Sprt_B8FC5DE5", "B", lv_mapMechanic);
    TextExpressionSetToken("Param/Expression/lib_Sprt_B8FC5DE5", "C", StringExternal("Param/Value/lib_Sprt_E371B151"));
    lv_helpText = TextExpressionAssemble("Param/Expression/lib_Sprt_B8FC5DE5");
    TriggerDebugOutput(1, lv_helpText, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGHelphelp_Init () {
    libSprt_gt_DEBUGHelphelp = TriggerCreate("libSprt_gt_DEBUGHelphelp_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGHelphelp, c_playerAny, "-help", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Player Number (-playernum)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGPlayerNumberplayernum_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_Sprt_25AF409F", "A", IntToText(EventPlayer()));
    UIDisplayMessage(libCore_gv_playerGroupFromPlayer[EventPlayer()], c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_Sprt_25AF409F"));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGPlayerNumberplayernum_Init () {
    libSprt_gt_DEBUGPlayerNumberplayernum = TriggerCreate("libSprt_gt_DEBUGPlayerNumberplayernum_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGPlayerNumberplayernum, c_playerAny, "-playernumber", true);
    TriggerAddEventChatMessage(libSprt_gt_DEBUGPlayerNumberplayernum, c_playerAny, "playernumber", true);
    TriggerAddEventChatMessage(libSprt_gt_DEBUGPlayerNumberplayernum, c_playerAny, "-playernum", true);
    TriggerAddEventChatMessage(libSprt_gt_DEBUGPlayerNumberplayernum, c_playerAny, "playernum", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Toggle Selection (togselection)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGToggleSelectiontogselection_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gf_DEBUGToggleSelection();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGToggleSelectiontogselection_Init () {
    libSprt_gt_DEBUGToggleSelectiontogselection = TriggerCreate("libSprt_gt_DEBUGToggleSelectiontogselection_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGToggleSelectiontogselection, c_playerAny, "togselection", true);
    TriggerAddEventChatMessage(libSprt_gt_DEBUGToggleSelectiontogselection, c_playerAny, "ts", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Toggle Minion Debug (togminiondebug)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGToggleMinionDebugtogminiondebug_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libSprt_gt_DEBUGMinionAI) == false)) {
        TriggerEnable(libSprt_gt_DEBUGMinionAI, true);
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_26B7B7BC"), true);
    }
    else {
        TriggerEnable(libSprt_gt_DEBUGMinionAI, false);
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_D8F534EE"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGToggleMinionDebugtogminiondebug_Init () {
    libSprt_gt_DEBUGToggleMinionDebugtogminiondebug = TriggerCreate("libSprt_gt_DEBUGToggleMinionDebugtogminiondebug_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGToggleMinionDebugtogminiondebug, c_playerAny, "togminiondebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Debug - Toggle Show XP Values (togshowxpvalues)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DebugToggleShowXPValuestogshowxpvalues_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSprt_gv_dEBUGXPTextEnabled == false)) {
        libSprt_gv_dEBUGXPTextEnabled = true;
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_3BFE4072"), true);
    }
    else {
        libSprt_gv_dEBUGXPTextEnabled = false;
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_0BD84C43"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DebugToggleShowXPValuestogshowxpvalues_Init () {
    libSprt_gt_DebugToggleShowXPValuestogshowxpvalues = TriggerCreate("libSprt_gt_DebugToggleShowXPValuestogshowxpvalues_Func");
    TriggerAddEventChatMessage(libSprt_gt_DebugToggleShowXPValuestogshowxpvalues, c_playerAny, "togshowxpvalues", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Start Game (startgame)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGStartGamestartgame_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((DialogControlIsEnabled(libUIUI_gv_uIDebugPanel.lv_startGameButton, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gf_DEBUGStartGame();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGStartGamestartgame_Init () {
    libSprt_gt_DEBUGStartGamestartgame = TriggerCreate("libSprt_gt_DEBUGStartGamestartgame_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGStartGamestartgame, c_playerAny, "startgame", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Disable Ping Limit (freepings)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGDisablePingLimitfreepings_Func (bool testConds, bool runActions) {
    playergroup auto670796E2_g;
    int auto670796E2_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gv_dEBUGPingLimitEnabled == true)) {
        libCore_gv_dEBUGPingLimitEnabled = false;
        auto670796E2_g = PlayerGroupActive(); 
        auto670796E2_p = 1;
        for ( ; auto670796E2_p <= PlayerGroupCount(auto670796E2_g) ; auto670796E2_p += (lv_itPlayer == PlayerGroupPlayer(auto670796E2_g, auto670796E2_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto670796E2_g, auto670796E2_p);
            libUIUI_gf_PingResetPingLockoutTimeandPingCount(lv_itPlayer);
        }
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_E9899B58"), true);
    }
    else {
        libCore_gv_dEBUGPingLimitEnabled = true;
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_27933BF2"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGDisablePingLimitfreepings_Init () {
    libSprt_gt_DEBUGDisablePingLimitfreepings = TriggerCreate("libSprt_gt_DEBUGDisablePingLimitfreepings_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGDisablePingLimitfreepings, c_playerAny, "freepings", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Pause Game Start Timer (pausestart)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGPauseGameStartTimerpausestart_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(libGame_gv_openTheGatesTimer) > 0.0)) {
        if ((TimerIsPaused(libGame_gv_openTheGatesTimer) == true)) {
            TimerPause(libGame_gv_openTheGatesTimer, false);
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_8C0D6AED"), true);
        }
        else {
            TimerPause(libGame_gv_openTheGatesTimer, true);
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_5AEB882F"), true);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGPauseGameStartTimerpausestart_Init () {
    libSprt_gt_DEBUGPauseGameStartTimerpausestart = TriggerCreate("libSprt_gt_DEBUGPauseGameStartTimerpausestart_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGPauseGameStartTimerpausestart, c_playerAny, "pausestart", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Turn On Normal Creep Camps (creepcamp)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGTurnOnNormalCreepCampscreepcamp_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((DialogControlIsEnabled(libUIUI_gv_uIDebugPanel.lv_spawnCreepCampsButton, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gf_DEBUGSpawnCreepCamps();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGTurnOnNormalCreepCampscreepcamp_Init () {
    libSprt_gt_DEBUGTurnOnNormalCreepCampscreepcamp = TriggerCreate("libSprt_gt_DEBUGTurnOnNormalCreepCampscreepcamp_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGTurnOnNormalCreepCampscreepcamp, c_playerAny, "creepcamp", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Respawn Creep Camps (respawncamps)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGRespawnCreepCampsrespawncamps_Func (bool testConds, bool runActions) {
    int auto79B01A43_ae;
    int auto79B01A43_ai;

    // Variable Declarations
    int lv_itCamp;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto79B01A43_ae = libMapM_gv_jungleNumberOfCreepCamps;
    auto79B01A43_ai = 1;
    lv_itCamp = 1;
    for ( ; ( (auto79B01A43_ai >= 0 && lv_itCamp <= auto79B01A43_ae) || (auto79B01A43_ai <= 0 && lv_itCamp >= auto79B01A43_ae) ) ; lv_itCamp += auto79B01A43_ai ) {
        if ((TimerGetRemaining(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_stateCreepRespawnTimer) > 1) && (TimerGetRemaining(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_stateCreepBirthTimer) > 1)) {
            TextExpressionSetToken("Param/Expression/lib_Sprt_2A27C727", "A", IntToText(lv_itCamp));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_2A27C727"), true);
            TimerStart(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_stateCreepRespawnTimer, (libMapM_gv_bALJungleBirthDelay + 1.0), false, c_timeGame);
            TimerStart(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_stateCreepBirthTimer, 1.0, false, c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGRespawnCreepCampsrespawncamps_Init () {
    libSprt_gt_DEBUGRespawnCreepCampsrespawncamps = TriggerCreate("libSprt_gt_DEBUGRespawnCreepCampsrespawncamps_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGRespawnCreepCampsrespawncamps, c_playerAny, "respawncamps", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Destroy Inventory Items (deleteitems)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGDestroyInventoryItemsdeleteitems_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitInventoryGroup(libGame_gv_players[EventPlayer()].lv_heroUnit));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        UnitInventoryRemove(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGDestroyInventoryItemsdeleteitems_Init () {
    libSprt_gt_DEBUGDestroyInventoryItemsdeleteitems = TriggerCreate("libSprt_gt_DEBUGDestroyInventoryItemsdeleteitems_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGDestroyInventoryItemsdeleteitems, c_playerAny, "deleteitems", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Spawn Hero (spawnhero)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGSpawnHerospawnhero_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_chatString;
    string lv_hero;
    int lv_heroIndex;
    int lv_player;
    int lv_level;
    fixed lv_xP;

    // Variable Initialization
    lv_chatString = "";
    lv_hero = "";
    lv_level = 1;

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 1) != "sh") && (StringWord(EventChatMessage(false), 1) != "spawnhero")) {
        return true;
    }

    lv_chatString = StringWord(EventChatMessage(false), 2);
    lv_hero = StringReplaceWord(lv_chatString, "Hero", "", c_stringReplaceAll, c_stringNoCase);
    lv_heroIndex = libCore_gf_GetIndexFromHero((lv_hero));
    lv_player = StringToInt(StringWord(EventChatMessage(false), 3));
    if ((StringWord(EventChatMessage(false), 4) != null)) {
        lv_level = StringToInt(StringWord(EventChatMessage(false), 4));
        lv_xP = libCore_gf_GetTotalXPForLevel(lv_level);
    }

    if ((lv_heroIndex == 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_3A7EE5DF"), true);
        return true;
    }

    if (((lv_player <= 0) || (lv_player > libCore_gv_bALMaxEnginePlayerCount))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_ECB650C9"), true);
        return true;
    }

    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(lv_heroIndex, 1, 1, lv_xP, lv_player, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGSpawnHerospawnhero_Init () {
    libSprt_gt_DEBUGSpawnHerospawnhero = TriggerCreate("libSprt_gt_DEBUGSpawnHerospawnhero_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGSpawnHerospawnhero, c_playerAny, "spawnhero", false);
    TriggerAddEventChatMessage(libSprt_gt_DEBUGSpawnHerospawnhero, c_playerAny, "sh", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Respawn Hero (debugrespawn)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGRespawnHerodebugrespawn_Func (bool testConds, bool runActions) {
    string autoF7DD28FB_val;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 1) != "debugrespawn")) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        lv_player = EventPlayer();
    }
    else {
        lv_player = StringToInt(StringWord(EventChatMessage(false), 2));
    }
    if (((libGame_gv_players[lv_player].lv_heroUnit == null) || (lv_player < 1) || (lv_player > 10))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_71113EF8"), true);
        return true;
    }

    autoF7DD28FB_val = UnitGetType(libGame_gv_players[lv_player].lv_heroUnit);
    if (autoF7DD28FB_val == "HeroLostVikingsController") {
        TimerStart(libGDHL_gv_lostVikingsPlayer[lv_player].lv_erikDeathTimer, 0.01, false, c_timeGame);
        TimerStart(libGDHL_gv_lostVikingsPlayer[lv_player].lv_baleogDeathTimer, 0.01, false, c_timeGame);
        TimerStart(libGDHL_gv_lostVikingsPlayer[lv_player].lv_olafDeathTimer, 0.01, false, c_timeGame);
        Wait(0.0625, c_timeGame);
        UnitGroupLoopBegin(libGame_gv_players[lv_player].lv_heroUnitGroup);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetPosition(UnitGroupLoopCurrent(), CameraGetTarget(EventPlayer()), false);
        }
        UnitGroupLoopEnd();
    }
    else if (autoF7DD28FB_val == "HeroLeoric") {
        UnitBehaviorRemove(libGame_gv_players[lv_player].lv_heroUnit, "LeoricUndying", 1);
        libGame_gf_HeroDeathStartRespawnTimer(lv_player, 0.0);
        Wait(0.0625, c_timeGame);
        UnitSetPosition(libGame_gv_players[lv_player].lv_heroUnit, CameraGetTarget(EventPlayer()), false);
    }
    else if (autoF7DD28FB_val == "HeroGall") {
        libGame_gf_HeroDeathStartRespawnTimer(lv_player, 0.0);
    }
    else {
        libGame_gf_HeroDeathStartRespawnTimer(lv_player, 0.0);
        Wait(0.0625, c_timeGame);
        UnitSetPosition(libGame_gv_players[lv_player].lv_heroUnit, CameraGetTarget(EventPlayer()), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGRespawnHerodebugrespawn_Init () {
    libSprt_gt_DEBUGRespawnHerodebugrespawn = TriggerCreate("libSprt_gt_DEBUGRespawnHerodebugrespawn_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGRespawnHerodebugrespawn, c_playerAny, "debugrespawn", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - AI Hero Mimic (heromimic)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGAIHeroMimicheromimic_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_0AC1A4E9"), true);
    libSprt_gv_dEBUGHeroMimic = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGAIHeroMimicheromimic_Init () {
    libSprt_gt_DEBUGAIHeroMimicheromimic = TriggerCreate("libSprt_gt_DEBUGAIHeroMimicheromimic_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGAIHeroMimicheromimic, c_playerAny, "heromimic", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - AI Set Hero (sethero)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGAISetHerosethero_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_hero;
    int lv_player;
    int lv_heroIndex;

    // Variable Initialization
    lv_hero = "";

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = StringToInt(StringWord(EventChatMessage(false), 2));
    lv_hero = StringWord(EventChatMessage(false), 3);
    lv_heroIndex = libCore_gf_GetIndexFromHero((lv_hero));
    if ((lv_heroIndex == 0)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Sprt_CDF6A5CC") + StringToText(lv_hero)), true);
        return true;
    }

    if ((!(((lv_player > 0) && (lv_player <= libCore_gv_bALMaxPlayers))))) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Sprt_31DF781A") + IntToText(lv_player)), true);
        return true;
    }

    if ((libGame_gv_players[lv_player].lv_heroIndex == 0)) {
        libGame_gv_players[lv_player].lv_heroIndex = lv_heroIndex;
        TriggerDebugOutput(1, (StringToText(lv_hero) + StringExternal("Param/Value/lib_Sprt_D31F1B1C") + IntToText(lv_player)), true);
    }
    else {
        libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(lv_heroIndex, 1, 1, 0.0, lv_player, 0);
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Sprt_76AC8E49") + IntToText(lv_player) + StringExternal("Param/Value/lib_Sprt_34B092C9") + StringToText(lv_hero) + StringExternal("Param/Value/lib_Sprt_66257F08")), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGAISetHerosethero_Init () {
    libSprt_gt_DEBUGAISetHerosethero = TriggerCreate("libSprt_gt_DEBUGAISetHerosethero_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGAISetHerosethero, c_playerAny, "sethero", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - AI Set All Hero (setallheroes)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGAISetAllHerosetallheroes_Func (bool testConds, bool runActions) {
    int autoD7C14807_ae;

    // Variable Declarations
    string lv_hero;
    int lv_heroIndex;
    int lv_playerIndex;

    // Variable Initialization
    lv_hero = "";

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_hero = StringWord(EventChatMessage(false), 2);
    lv_heroIndex = libCore_gf_GetIndexFromHero((lv_hero));
    if ((lv_heroIndex == 0)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Sprt_C8DD3280") + StringToText(lv_hero)), true);
        return true;
    }

    autoD7C14807_ae = libCore_gv_bALMaxPlayers;
    lv_playerIndex = 1;
    for ( ; lv_playerIndex <= autoD7C14807_ae ; lv_playerIndex += 1 ) {
        if ((libGame_gv_players[lv_playerIndex].lv_heroUnit != null)) {
            libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(lv_heroIndex, 1, 1, 0.0, lv_playerIndex, 0);
            TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Sprt_11581D48") + IntToText(lv_playerIndex) + StringExternal("Param/Value/lib_Sprt_B61E89E0") + StringToText(lv_hero) + StringExternal("Param/Value/lib_Sprt_C30CDE5A")), true);
        }
        else {
            libGame_gv_players[lv_playerIndex].lv_heroIndex = lv_heroIndex;
            TriggerDebugOutput(1, (StringToText(lv_hero) + StringExternal("Param/Value/lib_Sprt_B12CF695") + IntToText(lv_playerIndex)), true);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGAISetAllHerosetallheroes_Init () {
    libSprt_gt_DEBUGAISetAllHerosetallheroes = TriggerCreate("libSprt_gt_DEBUGAISetAllHerosetallheroes_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGAISetAllHerosetallheroes, c_playerAny, "setallheroes", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Log Random Heroes For Player
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGLogRandomHeroesForPlayer_Func (bool testConds, bool runActions) {
    int auto7198189B_ae;
    int auto7198189B_ai;

    // Variable Declarations
    int lv_heroIndex;
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_playerIndex = StringToInt(StringWord(EventChatMessage(false), 2));
    if ((lv_playerIndex == 0)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Sprt_65B029F6") + StringToText(StringWord(EventChatMessage(false), 2))), true);
        return true;
    }

    auto7198189B_ae = libCore_gv_dataHeroesNumberOfHeroes;
    auto7198189B_ai = 1;
    lv_heroIndex = 1;
    for ( ; ( (auto7198189B_ai >= 0 && lv_heroIndex <= auto7198189B_ae) || (auto7198189B_ai <= 0 && lv_heroIndex >= auto7198189B_ae) ) ; lv_heroIndex += auto7198189B_ai ) {
        if ((libCore_gf_MetagameDoesPlayerHaveAccessToHero(lv_playerIndex, lv_heroIndex) == true) && ((PlayerType(lv_playerIndex) != c_playerTypeComputer) || (libAIAI_gf_HeroAIAIDifficultyLevelShouldUseHero(lv_playerIndex, lv_heroIndex) == true))) {
            TriggerDebugOutput(1, StringToText(DataTableGetString(true, ("HeroIndex_" + IntToString(lv_heroIndex)))), true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGLogRandomHeroesForPlayer_Init () {
    libSprt_gt_DEBUGLogRandomHeroesForPlayer = TriggerCreate("libSprt_gt_DEBUGLogRandomHeroesForPlayer_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGLogRandomHeroesForPlayer, c_playerAny, "lograndomheroes", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Level AI Heros (heroxp)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGLevelAIHerosheroxp_Func (bool testConds, bool runActions) {
    int auto455FE030_ae;
    int auto455FE030_ai;

    // Variable Declarations
    fixed lv_amount;
    int lv_loopIndex;

    // Variable Initialization
    lv_amount = 1000.0;

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringLength(StringWord(EventChatMessage(false), 2)) > 1)) {
        lv_amount = StringToInt(StringWord(EventChatMessage(false), 2));
    }

    auto455FE030_ae = libCore_gv_bALMaxPlayers;
    auto455FE030_ai = 1;
    lv_loopIndex = 1;
    for ( ; ( (auto455FE030_ai >= 0 && lv_loopIndex <= auto455FE030_ae) || (auto455FE030_ai <= 0 && lv_loopIndex >= auto455FE030_ae) ) ; lv_loopIndex += auto455FE030_ai ) {
        if ((libGame_gv_players[lv_loopIndex].lv_heroUnit != null) && (libAIAI_gv_aIHeroes[lv_loopIndex].lv_heroState != libAIAI_ge_HeroAIStates_HSUnused)) {
            libGame_gf_GrantXPToPlayer(lv_amount, lv_loopIndex, libGame_ge_XPSources_Debug);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGLevelAIHerosheroxp_Init () {
    libSprt_gt_DEBUGLevelAIHerosheroxp = TriggerCreate("libSprt_gt_DEBUGLevelAIHerosheroxp_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGLevelAIHerosheroxp, c_playerAny, "heroxp", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Change Announcer
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGChangeAnnouncer_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_announcerIndex;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((StringWord(EventChatMessage(false), 2) != ""))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_announcerIndex = StringToInt(StringWord(EventChatMessage(false), 2));
    if (((lv_announcerIndex > libCore_gv_dataAnnouncerVONumberOfAnnouncerPacks) || (libCore_gv_dataAnnouncerVOPacks[lv_announcerIndex].lv_stringName == ""))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_1BECB98C"), true);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_Sprt_391FE7E0", "A", StringToText(libCore_gv_dataAnnouncerVOPacks[lv_announcerIndex].lv_stringName));
        TextExpressionSetToken("Param/Expression/lib_Sprt_391FE7E0", "B", IntToText(lv_player));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_391FE7E0"), true);
        libCore_gf_DataAnnouncerVOSetAnnouncerPackForPlayerGroup(PlayerGroupSingle(lv_player), lv_announcerIndex);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGChangeAnnouncer_Init () {
    libSprt_gt_DEBUGChangeAnnouncer = TriggerCreate("libSprt_gt_DEBUGChangeAnnouncer_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGChangeAnnouncer, c_playerAny, "announcer", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Toggle Floating Combat Text (togcombattext)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGToggleFloatingCombatTexttogcombattext_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gv_dEBUGCombatTextEnabled = !(libSprt_gv_dEBUGCombatTextEnabled);
    if ((libSprt_gv_dEBUGCombatTextEnabled == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_7E4733D6"), true);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_9879EAA2"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGToggleFloatingCombatTexttogcombattext_Init () {
    libSprt_gt_DEBUGToggleFloatingCombatTexttogcombattext = TriggerCreate("libSprt_gt_DEBUGToggleFloatingCombatTexttogcombattext_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGToggleFloatingCombatTexttogcombattext, c_playerAny, "togcombattext", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Toggle Minion Spawning (togminionspawn)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGToggleMinionSpawningtogminionspawn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_minionSpawningEnabled = !(libGame_gv_minionSpawningEnabled);
    if ((libGame_gv_minionSpawningEnabled == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_E118941E"), true);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_1BD47B30"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGToggleMinionSpawningtogminionspawn_Init () {
    libSprt_gt_DEBUGToggleMinionSpawningtogminionspawn = TriggerCreate("libSprt_gt_DEBUGToggleMinionSpawningtogminionspawn_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGToggleMinionSpawningtogminionspawn, c_playerAny, "togminionspawn", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Toggle Minion System Paused (togminionpause)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGToggleMinionSystemPausedtogminionpause_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_minionSystemStarted == true)) {
        libGame_gv_minionSystemPaused = !(libGame_gv_minionSystemPaused);
        if ((libGame_gv_minionSystemPaused == true)) {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_E48DDF62"), true);
            libGame_gf_MinionPauseUnpauseMinionSystem(true);
        }
        else {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_40639798"), true);
            libGame_gf_MinionPauseUnpauseMinionSystem(false);
        }
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_004C8FD1"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGToggleMinionSystemPausedtogminionpause_Init () {
    libSprt_gt_DEBUGToggleMinionSystemPausedtogminionpause = TriggerCreate("libSprt_gt_DEBUGToggleMinionSystemPausedtogminionpause_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGToggleMinionSystemPausedtogminionpause, c_playerAny, "togminionpause", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Toggle Minion System On/Off (togminionsystem)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGToggleMinionSystemOnOfftogminionsystem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    bool lv_onOff;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_onOff = !(libGame_gv_minionSystemStarted);
    if ((lv_onOff == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_C61F7599"), true);
        libGame_gf_MinionStartStopMinionSystem(true);
        libGame_gf_MinionStartStopMinionSpawnCycle(true);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_F311E8CE"), true);
        libGame_gf_MinionStartStopMinionSystem(false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGToggleMinionSystemOnOfftogminionsystem_Init () {
    libSprt_gt_DEBUGToggleMinionSystemOnOfftogminionsystem = TriggerCreate("libSprt_gt_DEBUGToggleMinionSystemOnOfftogminionsystem_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGToggleMinionSystemOnOfftogminionsystem, c_playerAny, "togminionsystem", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Toggle Minion Bonus XP On/Off
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGToggleMinionBonusXPOnOff_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gv_dEBUGBonusMinionXP = !(libSprt_gv_dEBUGBonusMinionXP);
    if ((libSprt_gv_dEBUGBonusMinionXP == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_4FF23A72"), true);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_36D4508C"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGToggleMinionBonusXPOnOff_Init () {
    libSprt_gt_DEBUGToggleMinionBonusXPOnOff = TriggerCreate("libSprt_gt_DEBUGToggleMinionBonusXPOnOff_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGToggleMinionBonusXPOnOff, c_playerAny, "togbonusminionxp", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Toggle Tower System On/Off (togtowersystem)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGToggleTowerSystemOnOfftogtowersystem_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gv_towerSystemOn = !(libAIAI_gv_towerSystemOn);
    if ((libAIAI_gv_towerSystemOn == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_AF77925B"), true);
        libAIAI_gf_TowerTurnTowerSystemOnOff(true);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_2D16A0B3"), true);
        libAIAI_gf_TowerTurnTowerSystemOnOff(false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGToggleTowerSystemOnOfftogtowersystem_Init () {
    libSprt_gt_DEBUGToggleTowerSystemOnOfftogtowersystem = TriggerCreate("libSprt_gt_DEBUGToggleTowerSystemOnOfftogtowersystem_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGToggleTowerSystemOnOfftogtowersystem, c_playerAny, "togtowersystem", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Toggle XP Trickle (togtrickle)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGToggleXPTrickletogtrickle_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_xPTrickleEnabled = !(libGame_gv_xPTrickleEnabled);
    if ((libGame_gv_xPTrickleEnabled == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_461B26D2"), true);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_9420B7C3"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGToggleXPTrickletogtrickle_Init () {
    libSprt_gt_DEBUGToggleXPTrickletogtrickle = TriggerCreate("libSprt_gt_DEBUGToggleXPTrickletogtrickle_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGToggleXPTrickletogtrickle, c_playerAny, "togtrickle", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Scale catchup XP Bonus (catchupxpbonus)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGScalecatchupXPBonuscatchupxpbonus_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_scalingTicks;
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_data_XP_CatchUpXPBonusScaler = StringToFixed(StringWord(EventChatMessage(false), 2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGScalecatchupXPBonuscatchupxpbonus_Init () {
    libSprt_gt_DEBUGScalecatchupXPBonuscatchupxpbonus = TriggerCreate("libSprt_gt_DEBUGScalecatchupXPBonuscatchupxpbonus_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGScalecatchupXPBonuscatchupxpbonus, c_playerAny, "catchupxpbonus", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Scale catchup XP Penalty (catchupxppenalty)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGScalecatchupXPPenaltycatchupxppenalty_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_scalingTicks;
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_data_XP_CatchUpXPPunishmentScaler = StringToFixed(StringWord(EventChatMessage(false), 2));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGScalecatchupXPPenaltycatchupxppenalty_Init () {
    libSprt_gt_DEBUGScalecatchupXPPenaltycatchupxppenalty = TriggerCreate("libSprt_gt_DEBUGScalecatchupXPPenaltycatchupxppenalty_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGScalecatchupXPPenaltycatchupxppenalty, c_playerAny, "catchupxppenalty", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Scale Camps (campscale)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGScaleCampscampscale_Func (bool testConds, bool runActions) {
    int auto9C650F90_ae;
    int auto9C650F90_ai;

    // Variable Declarations
    int lv_scalingTicks;
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_scalingTicks = StringToInt(StringWord(EventChatMessage(false), 2));
    auto9C650F90_ae = lv_scalingTicks;
    auto9C650F90_ai = 1;
    lv_i = 1;
    for ( ; ( (auto9C650F90_ai >= 0 && lv_i <= auto9C650F90_ae) || (auto9C650F90_ai <= 0 && lv_i >= auto9C650F90_ae) ) ; lv_i += auto9C650F90_ai ) {
        TriggerExecute(libGame_gt_JungleScalingTimerExpires, true, true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGScaleCampscampscale_Init () {
    libSprt_gt_DEBUGScaleCampscampscale = TriggerCreate("libSprt_gt_DEBUGScaleCampscampscale_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGScaleCampscampscale, c_playerAny, "campscale", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Have AI Take Over (-AI)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGHaveAITakeOverAI_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_players[EventPlayer()].lv_heroUnit == null)) {
        return true;
    }

    if ((libAIAI_gf_HeroAIIsAIEnabledForPlayer(EventPlayer()) == false)) {
        libAIAI_gf_HeroAITakeOverHeroForPlayer(EventPlayer());
    }
    else {
        libAIAI_gf_HeroAIReleaseHeroControl(EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGHaveAITakeOverAI_Init () {
    libSprt_gt_DEBUGHaveAITakeOverAI = TriggerCreate("libSprt_gt_DEBUGHaveAITakeOverAI_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGHaveAITakeOverAI, c_playerAny, "-AI", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - AI Avoid Player (solo)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGAIAvoidPlayersolo_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_teamIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libAIAI_gv_heroAIActive == false)) {
        return true;
    }

    lv_teamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(EventPlayer());
    if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidPlayer == EventPlayer())) {
        libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidPlayer = 0;
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Sprt_8E68F664") + IntToText(EventPlayer())), true);
    }
    else {
        libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidPlayer = EventPlayer();
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Sprt_5EBB0358") + IntToText(EventPlayer())), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGAIAvoidPlayersolo_Init () {
    libSprt_gt_DEBUGAIAvoidPlayersolo = TriggerCreate("libSprt_gt_DEBUGAIAvoidPlayersolo_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGAIAvoidPlayersolo, c_playerAny, "solo", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - AI Follow Player (share)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGAIFollowPlayershare_Func (bool testConds, bool runActions) {
    int auto99D03F98_ae;
    int auto99D03F98_ai;

    // Variable Declarations
    string lv_heroName;
    string lv_heroLink;
    int lv_loopIndex;
    int lv_playerIndex;

    // Variable Initialization
    lv_heroName = "";

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libAIAI_gv_heroAIActive == false)) {
        return true;
    }

    lv_heroName = ("Hero" + StringWord(EventChatMessage(false), 2));
    auto99D03F98_ae = libCore_gv_bALMaxPlayers;
    auto99D03F98_ai = 1;
    lv_loopIndex = 1;
    for ( ; ( (auto99D03F98_ai >= 0 && lv_loopIndex <= auto99D03F98_ae) || (auto99D03F98_ai <= 0 && lv_loopIndex >= auto99D03F98_ae) ) ; lv_loopIndex += auto99D03F98_ai ) {
        if ((libGame_gv_players[lv_loopIndex].lv_faction == libGame_gv_players[EventPlayer()].lv_faction) && (libAIAI_gf_HeroAIIsPlayerActive(lv_loopIndex, 2) == true) && (StringEqual(lv_heroName, (UnitGetType(libGame_gv_players[lv_loopIndex].lv_heroUnit)), c_stringNoCase) == true)) {
            lv_playerIndex = lv_loopIndex;
        }

    }
    if ((lv_playerIndex == 0)) {
        TriggerDebugOutput(1, (StringToText(lv_heroName) + StringExternal("Param/Value/lib_Sprt_D42154FA")), true);
        return true;
    }

    if ((libAIAI_gv_aIHeroes[lv_playerIndex].lv_tutorialForceFollowPlayer == EventPlayer())) {
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_tutorialForceFollowPlayer = 0;
        TriggerDebugOutput(1, (StringToText(lv_heroName) + StringExternal("Param/Value/lib_Sprt_B658424E")), true);
    }
    else {
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_tutorialForceFollowPlayer = EventPlayer();
        TriggerDebugOutput(1, (StringToText(lv_heroName) + StringExternal("Param/Value/lib_Sprt_1D9CBCBE") + IntToText(EventPlayer())), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGAIFollowPlayershare_Init () {
    libSprt_gt_DEBUGAIFollowPlayershare = TriggerCreate("libSprt_gt_DEBUGAIFollowPlayershare_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGAIFollowPlayershare, c_playerAny, "share", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - AI All Follow Player (group)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGAIAllFollowPlayergroup_Func (bool testConds, bool runActions) {
    int auto795061DF_ae;
    int auto795061DF_ai;
    int autoB538720F_ae;
    int autoB538720F_ai;
    int autoA0720C92_ae;
    int autoA0720C92_ai;

    // Variable Declarations
    string lv_heroName;
    string lv_heroLink;
    int lv_playerIndex;
    bool lv_allCurrentlyFollowing;

    // Variable Initialization
    lv_heroName = "";
    lv_allCurrentlyFollowing = true;

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libAIAI_gv_heroAIActive == false)) {
        return true;
    }

    auto795061DF_ae = libCore_gv_bALMaxPlayers;
    auto795061DF_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (auto795061DF_ai >= 0 && lv_playerIndex <= auto795061DF_ae) || (auto795061DF_ai <= 0 && lv_playerIndex >= auto795061DF_ae) ) ; lv_playerIndex += auto795061DF_ai ) {
        if ((libGame_gv_players[lv_playerIndex].lv_faction == libGame_gv_players[EventPlayer()].lv_faction) && (libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 2) == true) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_tutorialForceFollowPlayer != EventPlayer())) {
            lv_allCurrentlyFollowing = false;
        }

    }
    if ((lv_allCurrentlyFollowing == false)) {
        autoB538720F_ae = libCore_gv_bALMaxPlayers;
        autoB538720F_ai = 1;
        lv_playerIndex = 1;
        for ( ; ( (autoB538720F_ai >= 0 && lv_playerIndex <= autoB538720F_ae) || (autoB538720F_ai <= 0 && lv_playerIndex >= autoB538720F_ae) ) ; lv_playerIndex += autoB538720F_ai ) {
            if ((libGame_gv_players[lv_playerIndex].lv_faction == libGame_gv_players[EventPlayer()].lv_faction) && (libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 2) == true)) {
                libAIAI_gv_aIHeroes[lv_playerIndex].lv_tutorialForceFollowPlayer = EventPlayer();
            }

        }
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Sprt_3C38E9C6") + IntToText(EventPlayer())), true);
    }
    else {
        autoA0720C92_ae = libCore_gv_bALMaxPlayers;
        autoA0720C92_ai = 1;
        lv_playerIndex = 1;
        for ( ; ( (autoA0720C92_ai >= 0 && lv_playerIndex <= autoA0720C92_ae) || (autoA0720C92_ai <= 0 && lv_playerIndex >= autoA0720C92_ae) ) ; lv_playerIndex += autoA0720C92_ai ) {
            if ((libGame_gv_players[lv_playerIndex].lv_faction == libGame_gv_players[EventPlayer()].lv_faction) && (PlayerType(lv_playerIndex) == c_playerTypeComputer)) {
                libAIAI_gv_aIHeroes[lv_playerIndex].lv_tutorialForceFollowPlayer = 0;
            }

        }
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Sprt_75E4A0C0")), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGAIAllFollowPlayergroup_Init () {
    libSprt_gt_DEBUGAIAllFollowPlayergroup = TriggerCreate("libSprt_gt_DEBUGAIAllFollowPlayergroup_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGAIAllFollowPlayergroup, c_playerAny, "group", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - AI Show Talent Build (aishowtalentbuild)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGAIShowTalentBuildaishowtalentbuild_Func (bool testConds, bool runActions) {
    int auto3D49B51C_ae;
    int auto3D49B51C_ai;

    // Variable Declarations
    int lv_player;
    int lv_tier;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "")) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Sprt_3C953080") + IntToText(lv_player)), true);
        return true;
    }

    lv_player = StringToInt(StringWord(EventChatMessage(false), 2));
    if (((lv_player <= 0) || (lv_player > libCore_gv_bALMaxPlayers))) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Sprt_27CD8ED6") + IntToText(lv_player)), true);
        return true;
    }

    if ((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lv_player) == false)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Sprt_F2F675AF") + IntToText(lv_player)), true);
        return true;
    }

    if ((libAIAI_gv_aIHeroes[lv_player].lv_pickedTalentBuild == 0)) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Sprt_AB15DA4B") + IntToText(lv_player)), true);
        return true;
    }

    auto3D49B51C_ae = libCore_gv_talents_MaxTiers_C;
    auto3D49B51C_ai = 1;
    lv_tier = 1;
    for ( ; ( (auto3D49B51C_ai >= 0 && lv_tier <= auto3D49B51C_ae) || (auto3D49B51C_ai <= 0 && lv_tier >= auto3D49B51C_ae) ) ; lv_tier += auto3D49B51C_ai ) {
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Sprt_31F7C2F4") + IntToText(lv_tier) + StringExternal("Param/Value/lib_Sprt_C9E32AA3") + StringToText((libAIAI_gv_aIHeroes[lv_player].lv_talentBuilds[libAIAI_gv_aIHeroes[lv_player].lv_pickedTalentBuild].lv_talents[lv_tier]))), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGAIShowTalentBuildaishowtalentbuild_Init () {
    libSprt_gt_DEBUGAIShowTalentBuildaishowtalentbuild = TriggerCreate("libSprt_gt_DEBUGAIShowTalentBuildaishowtalentbuild_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGAIShowTalentBuildaishowtalentbuild, c_playerAny, "aishowtalentbuild", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - AI Cycle Through All Heroes (ailoadeveryhero)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGAICycleThroughAllHeroesailoadeveryhero_Func (bool testConds, bool runActions) {
    int autoF6CB69FC_ae;
    int autoF6CB69FC_ai;

    // Variable Declarations
    int lv_heroIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_players[EventPlayer()].lv_heroUnit == null)) {
        return true;
    }

    if ((libAIAI_gf_HeroAIIsAIEnabledForPlayer(EventPlayer()) == false)) {
        libAIAI_gf_HeroAITakeOverHeroForPlayer(EventPlayer());
    }

    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_9988D852"), true);
    autoF6CB69FC_ae = libCore_gv_dataHeroesNumberOfHeroes;
    autoF6CB69FC_ai = 1;
    lv_heroIndex = 1;
    for ( ; ( (autoF6CB69FC_ai >= 0 && lv_heroIndex <= autoF6CB69FC_ae) || (autoF6CB69FC_ai <= 0 && lv_heroIndex >= autoF6CB69FC_ae) ) ; lv_heroIndex += autoF6CB69FC_ai ) {
        if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_unitType != null)) {
            TextExpressionSetToken("Param/Expression/lib_Sprt_871A6EF2", "A", UnitTypeGetName(libGame_gv_players[lv_heroIndex].lv_heroData.lv_unitType));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_871A6EF2"), true);
            libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(lv_heroIndex, 1, 1, 0.0, 1, 0);
            Wait(4.0, c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGAICycleThroughAllHeroesailoadeveryhero_Init () {
    libSprt_gt_DEBUGAICycleThroughAllHeroesailoadeveryhero = TriggerCreate("libSprt_gt_DEBUGAICycleThroughAllHeroesailoadeveryhero_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGAICycleThroughAllHeroesailoadeveryhero, c_playerAny, "-AILoadEveryHero", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Display Hero AI Debug Info (aidebug)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGDisplayHeroAIDebugInfoaidebug_Func (bool testConds, bool runActions) {
    int auto20E84679_ae;
    int auto20E84679_ai;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gv_heroAIDisplayAIStatus = !(libAIAI_gv_heroAIDisplayAIStatus);
    auto20E84679_ae = libCore_gv_bALMaxPlayers;
    auto20E84679_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (auto20E84679_ai >= 0 && lv_playerIndex <= auto20E84679_ae) || (auto20E84679_ai <= 0 && lv_playerIndex >= auto20E84679_ae) ) ; lv_playerIndex += auto20E84679_ai ) {
        libAIAI_gf_HeroAIUpdateAIStatus(lv_playerIndex);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGDisplayHeroAIDebugInfoaidebug_Init () {
    libSprt_gt_DEBUGDisplayHeroAIDebugInfoaidebug = TriggerCreate("libSprt_gt_DEBUGDisplayHeroAIDebugInfoaidebug_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGDisplayHeroAIDebugInfoaidebug, c_playerAny, "aidebug", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Display Minion AI Debug Info (miniondebug)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGDisplayMinionAIDebugInfominiondebug_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gv_minionAIDisplayAIStatus = !(libAIAI_gv_minionAIDisplayAIStatus);
    libAIAI_gf_MinionAIToggleAIStatus(libAIAI_gv_minionAIDisplayAIStatus);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGDisplayMinionAIDebugInfominiondebug_Init () {
    libSprt_gt_DEBUGDisplayMinionAIDebugInfominiondebug = TriggerCreate("libSprt_gt_DEBUGDisplayMinionAIDebugInfominiondebug_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGDisplayMinionAIDebugInfominiondebug, c_playerAny, "miniondebug", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Display Defender AI Debug Info (defenderdebug)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGDisplayDefenderAIDebugInfodefenderdebug_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gv_defenderAIDisplayAIStatus = !(libAIAI_gv_defenderAIDisplayAIStatus);
    libAIAI_gf_DefenderAIToggleAIStatus(libAIAI_gv_defenderAIDisplayAIStatus);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGDisplayDefenderAIDebugInfodefenderdebug_Init () {
    libSprt_gt_DEBUGDisplayDefenderAIDebugInfodefenderdebug = TriggerCreate("libSprt_gt_DEBUGDisplayDefenderAIDebugInfodefenderdebug_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGDisplayDefenderAIDebugInfodefenderdebug, c_playerAny, "defenderdebug", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Victory (debug-victory)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGVictorydebugvictory_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_players[EventPlayer()].lv_faction == libGame_ge_Faction_Order)) {
        UnitKill(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core);
    }
    else {
        UnitKill(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGVictorydebugvictory_Init () {
    libSprt_gt_DEBUGVictorydebugvictory = TriggerCreate("libSprt_gt_DEBUGVictorydebugvictory_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGVictorydebugvictory, c_playerAny, "debug-victory", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Structures 1 Shot Minions (killer-structures)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGStructures1ShotMinionskillerstructures_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_minionFactor;
    string lv_mercFactor;
    int lv_playerIndex;

    // Variable Initialization
    lv_minionFactor = "8";
    lv_mercFactor = "-6.20";

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_926A367D"), true);
    PlayerGroupLoopBegin(libCore_gv_nPCPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CatalogFieldValueSet(c_gameCatalogEffect, "CannonTowerL2Damage", "AttributeFactor[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), lv_minionFactor);
        CatalogFieldValueSet(c_gameCatalogEffect, "CannonTowerL2Damage", "AttributeFactor[" + IntToString(4) + "]", PlayerGroupLoopCurrent(), lv_mercFactor);
        CatalogFieldValueSet(c_gameCatalogEffect, "CannonTowerL3Damage", "AttributeFactor[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), lv_minionFactor);
        CatalogFieldValueSet(c_gameCatalogEffect, "CannonTowerL3Damage", "AttributeFactor[" + IntToString(4) + "]", PlayerGroupLoopCurrent(), lv_mercFactor);
        CatalogFieldValueSet(c_gameCatalogEffect, "TownHallL2WeaponDamage", "AttributeFactor[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), lv_minionFactor);
        CatalogFieldValueSet(c_gameCatalogEffect, "TownHallL2WeaponDamage", "AttributeFactor[" + IntToString(4) + "]", PlayerGroupLoopCurrent(), lv_mercFactor);
        CatalogFieldValueSet(c_gameCatalogEffect, "TownHallL3WeaponDamage", "AttributeFactor[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), lv_minionFactor);
        CatalogFieldValueSet(c_gameCatalogEffect, "TownHallL3WeaponDamage", "AttributeFactor[" + IntToString(4) + "]", PlayerGroupLoopCurrent(), lv_mercFactor);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGStructures1ShotMinionskillerstructures_Init () {
    libSprt_gt_DEBUGStructures1ShotMinionskillerstructures = TriggerCreate("libSprt_gt_DEBUGStructures1ShotMinionskillerstructures_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGStructures1ShotMinionskillerstructures, c_playerAny, "killer-structures", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Increased Minion Damage (killer-minions)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGIncreasedMinionDamagekillerminions_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_structureFactor;
    int lv_playerIndex;

    // Variable Initialization
    lv_structureFactor = "3.5";

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_8C4049FA"), true);
    PlayerGroupLoopBegin(libCore_gv_nPCPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CatalogFieldValueSet(c_gameCatalogEffect, "FootmanMinionWeaponDamage", "AttributeFactor[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "-.5625");
        CatalogFieldValueSet(c_gameCatalogEffect, "FootmanMinionWeaponDamage", "AttributeFactor[" + IntToString(4) + "]", PlayerGroupLoopCurrent(), "-.15");
        CatalogFieldValueSet(c_gameCatalogEffect, "FootmanMinionWeaponDamage", "AttributeFactor[" + IntToString(7) + "]", PlayerGroupLoopCurrent(), lv_structureFactor);
        CatalogFieldValueSet(c_gameCatalogEffect, "WizardMinionWeaponDamage", "AttributeFactor[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "2.50");
        CatalogFieldValueSet(c_gameCatalogEffect, "WizardMinionWeaponDamage", "AttributeFactor[" + IntToString(4) + "]", PlayerGroupLoopCurrent(), "-1.25");
        CatalogFieldValueSet(c_gameCatalogEffect, "WizardMinionWeaponDamage", "AttributeFactor[" + IntToString(7) + "]", PlayerGroupLoopCurrent(), lv_structureFactor);
        CatalogFieldValueSet(c_gameCatalogEffect, "RangedMinionWeaponDamage", "AttributeFactor[" + IntToString(2) + "]", PlayerGroupLoopCurrent(), "2.15");
        CatalogFieldValueSet(c_gameCatalogEffect, "RangedMinionWeaponDamage", "AttributeFactor[" + IntToString(4) + "]", PlayerGroupLoopCurrent(), "-1.20");
        CatalogFieldValueSet(c_gameCatalogEffect, "RangedMinionWeaponDamage", "AttributeFactor[" + IntToString(7) + "]", PlayerGroupLoopCurrent(), lv_structureFactor);
    }
    PlayerGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGIncreasedMinionDamagekillerminions_Init () {
    libSprt_gt_DEBUGIncreasedMinionDamagekillerminions = TriggerCreate("libSprt_gt_DEBUGIncreasedMinionDamagekillerminions_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGIncreasedMinionDamagekillerminions, c_playerAny, "killer-minions", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Refresh Cooldowns (-cdr)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGRefreshCooldownscdr_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_HeroRefreshCooldowns(EventPlayer(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGRefreshCooldownscdr_Init () {
    libSprt_gt_DEBUGRefreshCooldownscdr = TriggerCreate("libSprt_gt_DEBUGRefreshCooldownscdr_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGRefreshCooldownscdr, c_playerAny, "-cdr", true);
    TriggerAddEventChatMessage(libSprt_gt_DEBUGRefreshCooldownscdr, c_playerAny, "cdr", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Defeat (debug-defeat)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGDefeatdebugdefeat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_players[EventPlayer()].lv_faction == libGame_ge_Faction_Order)) {
        UnitKill(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core);
    }
    else {
        UnitKill(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGDefeatdebugdefeat_Init () {
    libSprt_gt_DEBUGDefeatdebugdefeat = TriggerCreate("libSprt_gt_DEBUGDefeatdebugdefeat_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGDefeatdebugdefeat, c_playerAny, "debug-defeat", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Upvote (debug-upvote)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGUpvotedebugupvote_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libUIUI_gt_UIEndofMatchAwardsUpVoteButtonClicked, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGUpvotedebugupvote_Init () {
    libSprt_gt_DEBUGUpvotedebugupvote = TriggerCreate("libSprt_gt_DEBUGUpvotedebugupvote_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGUpvotedebugupvote, c_playerAny, "debug-upvote", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Tie (debug-tie)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGTiedebugtie_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitKill(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core);
    UnitKill(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGTiedebugtie_Init () {
    libSprt_gt_DEBUGTiedebugtie = TriggerCreate("libSprt_gt_DEBUGTiedebugtie_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGTiedebugtie, c_playerAny, "debug-tie", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Toggle Hero AI (togheroai)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGToggleHeroAItogheroai_Func (bool testConds, bool runActions) {
    int auto17C4EA2D_ae;
    int autoECA3F8F5_ae;

    // Variable Declarations
    bool lv_heroAICurrentlyActive;
    int lv_playerIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto17C4EA2D_ae = libCore_gv_bALMaxPlayers;
    lv_playerIndex = 1;
    for ( ; lv_playerIndex <= auto17C4EA2D_ae ; lv_playerIndex += 1 ) {
        if ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 2) == true) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState != libAIAI_ge_HeroAIStates_HSUnused)) {
            lv_heroAICurrentlyActive = true;
        }

    }
    autoECA3F8F5_ae = 10;
    lv_playerIndex = 1;
    for ( ; lv_playerIndex <= autoECA3F8F5_ae ; lv_playerIndex += 1 ) {
        if ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 2) == true)) {
            if ((lv_heroAICurrentlyActive == true)) {
                if ((libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState != libAIAI_ge_HeroAIStates_HSUnused)) {
                    libAIAI_gf_HeroAIDisableAIForPlayer(lv_playerIndex);
                }

            }
            else {
                if ((libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSUnused)) {
                    libAIAI_gf_HeroAIEnableAIForPlayer(lv_playerIndex);
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGToggleHeroAItogheroai_Init () {
    libSprt_gt_DEBUGToggleHeroAItogheroai = TriggerCreate("libSprt_gt_DEBUGToggleHeroAItogheroai_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGToggleHeroAItogheroai, c_playerAny, "togheroai", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Stop AI Think Tree
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGStopAIThinkTree_Func (bool testConds, bool runActions) {
    unitgroup autoDEA8DC14_g;
    int autoDEA8DC14_u;

    // Variable Declarations
    unit lv_itUnit;
    bool lv_destroy;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDEA8DC14_g = UnitGroupSelected(EventPlayer());
    autoDEA8DC14_u = 1;
    for ( ; autoDEA8DC14_u <= UnitGroupCount(autoDEA8DC14_g, c_unitCountAll) ; autoDEA8DC14_u += (lv_itUnit == UnitGroupUnit(autoDEA8DC14_g, autoDEA8DC14_u)) ) {
        lv_itUnit = UnitGroupUnit(autoDEA8DC14_g, autoDEA8DC14_u);
        lv_destroy = UnitDestroyAIThinkTree(lv_itUnit);
        UnitIssueOrder(lv_itUnit, Order(libAIAI_gv_aIStopAbil), c_orderQueueReplace);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGStopAIThinkTree_Init () {
    libSprt_gt_DEBUGStopAIThinkTree = TriggerCreate("libSprt_gt_DEBUGStopAIThinkTree_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGStopAIThinkTree, c_playerAny, "stopthinktree", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Start AI Think Tree
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGStartAIThinkTree_Func (bool testConds, bool runActions) {
    unitgroup auto0BB8D593_g;
    int auto0BB8D593_u;

    // Variable Declarations
    unit lv_itUnit;
    bool lv_start;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0BB8D593_g = UnitGroupSelected(EventPlayer());
    auto0BB8D593_u = 1;
    for ( ; auto0BB8D593_u <= UnitGroupCount(auto0BB8D593_g, c_unitCountAll) ; auto0BB8D593_u += (lv_itUnit == UnitGroupUnit(auto0BB8D593_g, auto0BB8D593_u)) ) {
        lv_itUnit = UnitGroupUnit(auto0BB8D593_g, auto0BB8D593_u);
        lv_start = UnitCreateAIThinkTree(lv_itUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGStartAIThinkTree_Init () {
    libSprt_gt_DEBUGStartAIThinkTree = TriggerCreate("libSprt_gt_DEBUGStartAIThinkTree_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGStartAIThinkTree, c_playerAny, "startthinktree", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Stop Regen (stopregen)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGStopRegenstopregen_Func (bool testConds, bool runActions) {
    unitgroup auto89F280D3_g;
    int auto89F280D3_u;

    // Variable Declarations
    unit lv_itUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto89F280D3_g = UnitGroupSelected(EventPlayer());
    auto89F280D3_u = 1;
    for ( ; auto89F280D3_u <= UnitGroupCount(auto89F280D3_g, c_unitCountAll) ; auto89F280D3_u += (lv_itUnit == UnitGroupUnit(auto89F280D3_g, auto89F280D3_u)) ) {
        lv_itUnit = UnitGroupUnit(auto89F280D3_g, auto89F280D3_u);
        UnitSetPropertyFixed(lv_itUnit, c_unitPropLifeRegen, 0.0);
        UnitSetPropertyFixed(lv_itUnit, c_unitPropEnergyRegen, 0.0);
        UnitSetPropertyFixed(lv_itUnit, c_unitPropShieldsRegen, 0.0);
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_E07BE344"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGStopRegenstopregen_Init () {
    libSprt_gt_DEBUGStopRegenstopregen = TriggerCreate("libSprt_gt_DEBUGStopRegenstopregen_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGStopRegenstopregen, c_playerAny, "stopregen", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Stop Health Regen For All Players (noregen)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGStopHealthRegenForAllPlayersnoregen_Func (bool testConds, bool runActions) {
    int auto6EDBB11F_ae;
    int auto6EDBB11F_ai;
    playergroup auto6F158E2D_g;
    int auto6F158E2D_p;
    unitgroup auto6FB9DA5E_g;
    int auto6FB9DA5E_u;
    int auto322481F7_ae;
    int auto322481F7_ai;
    playergroup auto0209C5C4_g;
    int auto0209C5C4_p;
    unitgroup auto45D8AE74_g;
    int auto45D8AE74_u;

    // Variable Declarations
    int lv_itTeam;
    int lv_itPlayer;
    unit lv_itUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSprt_gv_dEBUGNoRegen == false)) {
        auto322481F7_ae = 2;
        auto322481F7_ai = 1;
        lv_itTeam = 1;
        for ( ; ( (auto322481F7_ai >= 0 && lv_itTeam <= auto322481F7_ae) || (auto322481F7_ai <= 0 && lv_itTeam >= auto322481F7_ae) ) ; lv_itTeam += auto322481F7_ai ) {
            auto0209C5C4_g = libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false); 
            auto0209C5C4_p = 1;
            for ( ; auto0209C5C4_p <= PlayerGroupCount(auto0209C5C4_g) ; auto0209C5C4_p += (lv_itPlayer == PlayerGroupPlayer(auto0209C5C4_g, auto0209C5C4_p)) ) {
                lv_itPlayer = PlayerGroupPlayer(auto0209C5C4_g, auto0209C5C4_p);
                UnitBehaviorAdd(libGame_gv_players[lv_itPlayer].lv_heroUnit, "DEBUGSuppressLifeRegeneration", libGame_gv_players[lv_itPlayer].lv_heroUnit, 1);
                auto45D8AE74_g = libGame_gv_players[lv_itPlayer].lv_heroUnitGroup;
                auto45D8AE74_u = 1;
                for ( ; auto45D8AE74_u <= UnitGroupCount(auto45D8AE74_g, c_unitCountAll) ; auto45D8AE74_u += (lv_itUnit == UnitGroupUnit(auto45D8AE74_g, auto45D8AE74_u)) ) {
                    lv_itUnit = UnitGroupUnit(auto45D8AE74_g, auto45D8AE74_u);
                    UnitBehaviorAdd(lv_itUnit, "DEBUGSuppressLifeRegeneration", lv_itUnit, 1);
                }
            }
        }
        libSprt_gv_dEBUGNoRegen = true;
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_95A37801"), true);
    }
    else {
        auto6EDBB11F_ae = 2;
        auto6EDBB11F_ai = 1;
        lv_itTeam = 1;
        for ( ; ( (auto6EDBB11F_ai >= 0 && lv_itTeam <= auto6EDBB11F_ae) || (auto6EDBB11F_ai <= 0 && lv_itTeam >= auto6EDBB11F_ae) ) ; lv_itTeam += auto6EDBB11F_ai ) {
            auto6F158E2D_g = libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false); 
            auto6F158E2D_p = 1;
            for ( ; auto6F158E2D_p <= PlayerGroupCount(auto6F158E2D_g) ; auto6F158E2D_p += (lv_itPlayer == PlayerGroupPlayer(auto6F158E2D_g, auto6F158E2D_p)) ) {
                lv_itPlayer = PlayerGroupPlayer(auto6F158E2D_g, auto6F158E2D_p);
                UnitBehaviorRemove(libGame_gv_players[lv_itPlayer].lv_heroUnit, "DEBUGSuppressLifeRegeneration", 1);
                auto6FB9DA5E_g = libGame_gv_players[lv_itPlayer].lv_heroUnitGroup;
                auto6FB9DA5E_u = 1;
                for ( ; auto6FB9DA5E_u <= UnitGroupCount(auto6FB9DA5E_g, c_unitCountAll) ; auto6FB9DA5E_u += (lv_itUnit == UnitGroupUnit(auto6FB9DA5E_g, auto6FB9DA5E_u)) ) {
                    lv_itUnit = UnitGroupUnit(auto6FB9DA5E_g, auto6FB9DA5E_u);
                    UnitBehaviorRemove(lv_itUnit, "DEBUGSuppressLifeRegeneration", 1);
                }
            }
        }
        libSprt_gv_dEBUGNoRegen = false;
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_86123032"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGStopHealthRegenForAllPlayersnoregen_Init () {
    libSprt_gt_DEBUGStopHealthRegenForAllPlayersnoregen = TriggerCreate("libSprt_gt_DEBUGStopHealthRegenForAllPlayersnoregen_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGStopHealthRegenForAllPlayersnoregen, c_playerAny, "noregen", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Toggle Core Shield Mechanic (togcoreshield)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGToggleCoreShieldMechanictogcoreshield_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup("KingsCore", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "CoreScaling") == true)) {
            TextExpressionSetToken("Param/Expression/lib_Sprt_A2A9322D", "A", IntToText(libGame_gf_TeamNumberOfPlayer(UnitGetOwner(UnitGroupLoopCurrent()))));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_A2A9322D"), true);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "CoreShieldsLevel1", UnitGroupLoopCurrent(), 1);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "CoreShieldsLevel2", UnitGroupLoopCurrent(), 1);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "CoreShieldsLevel3", UnitGroupLoopCurrent(), 1);
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "CoreScaling", 1);
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Sprt_F5CC744D", "A", IntToText(libGame_gf_TeamNumberOfPlayer(UnitGetOwner(UnitGroupLoopCurrent()))));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_F5CC744D"), true);
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "CoreShieldsLevel1", 1);
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "CoreShieldsLevel2", 1);
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "CoreShieldsLevel3", 1);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "CoreScaling", UnitGroupLoopCurrent(), 1);
        }
        libGame_gf_CoreUpdateScaling();
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGToggleCoreShieldMechanictogcoreshield_Init () {
    libSprt_gt_DEBUGToggleCoreShieldMechanictogcoreshield = TriggerCreate("libSprt_gt_DEBUGToggleCoreShieldMechanictogcoreshield_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGToggleCoreShieldMechanictogcoreshield, c_playerAny, "togcoreshield", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Toggle Debug Output (togdebug)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGToggleDebugOutputtogdebug_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gv_dEBUGDebugMessagesEnabled = !(libSprt_gv_dEBUGDebugMessagesEnabled);
    if ((libSprt_gv_dEBUGDebugMessagesEnabled == true)) {
        TriggerDebugOutputEnable(true);
    }
    else {
        TriggerDebugOutputEnable(false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGToggleDebugOutputtogdebug_Init () {
    libSprt_gt_DEBUGToggleDebugOutputtogdebug = TriggerCreate("libSprt_gt_DEBUGToggleDebugOutputtogdebug_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGToggleDebugOutputtogdebug, c_playerAny, "togdebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Toggle For Cinematics (togcine)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGToggleForCinematicstogcine_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unitgroup lv_allLivingUnits;

    // Variable Initialization
    lv_allLivingUnits = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_allLivingUnits = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    libSprt_gv_dEBUGCinematicsModeEnabled = !(libSprt_gv_dEBUGCinematicsModeEnabled);
    if ((libSprt_gv_dEBUGCinematicsModeEnabled == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_BD3F04C7"), true);
        UnitGroupLoopBegin(lv_allLivingUnits);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "CinematicsBehavior", UnitGroupLoopCurrent(), 1);
        }
        UnitGroupLoopEnd();
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_FF85FFD0"), true);
        UnitGroupLoopBegin(lv_allLivingUnits);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "CinematicsBehavior", 1);
        }
        UnitGroupLoopEnd();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGToggleForCinematicstogcine_Init () {
    libSprt_gt_DEBUGToggleForCinematicstogcine = TriggerCreate("libSprt_gt_DEBUGToggleForCinematicstogcine_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGToggleForCinematicstogcine, c_playerAny, "togcine", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Toggle For Map Text (togmaptext)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGToggleForMapTexttogmaptext_Func (bool testConds, bool runActions) {
    int autoBD862901_ae;
    int autoBD862901_ai;
    int auto164B4004_ae;
    int auto164B4004_ai;

    // Variable Declarations
    int lv_itCamp;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gv_dEBUGMapTextEnabled = !(libSprt_gv_dEBUGMapTextEnabled);
    if ((libSprt_gv_dEBUGMapTextEnabled == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_A74648E9"), true);
        auto164B4004_ae = libMapM_gv_jungleNumberOfCreepCamps;
        auto164B4004_ai = 1;
        lv_itCamp = 1;
        for ( ; ( (auto164B4004_ai >= 0 && lv_itCamp <= auto164B4004_ae) || (auto164B4004_ai <= 0 && lv_itCamp >= auto164B4004_ae) ) ; lv_itCamp += auto164B4004_ai ) {
            libMapM_gf_JungleUpdateTextTagForCamp(lv_itCamp, libMapM_gv_jungleCreepCamps[lv_itCamp].lv_mapDataCampType);
        }
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_B11A350A"), true);
        autoBD862901_ae = libMapM_gv_jungleNumberOfCreepCamps;
        autoBD862901_ai = 1;
        lv_itCamp = 1;
        for ( ; ( (autoBD862901_ai >= 0 && lv_itCamp <= autoBD862901_ae) || (autoBD862901_ai <= 0 && lv_itCamp >= autoBD862901_ae) ) ; lv_itCamp += autoBD862901_ai ) {
            libMapM_gf_JungleUpdateTextTagForCamp(lv_itCamp, libMapM_gv_jungleCreepCamps[lv_itCamp].lv_mapDataCampType);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGToggleForMapTexttogmaptext_Init () {
    libSprt_gt_DEBUGToggleForMapTexttogmaptext = TriggerCreate("libSprt_gt_DEBUGToggleForMapTexttogmaptext_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGToggleForMapTexttogmaptext, c_playerAny, "togmaptext", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Turn Off Weather
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGTurnOffWeather_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "Storm_Doodad_KingsCrest_Docks_RollingFog");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGTurnOffWeather_Init () {
    libSprt_gt_DEBUGTurnOffWeather = TriggerCreate("libSprt_gt_DEBUGTurnOffWeather_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGTurnOffWeather, c_playerAny, "stopfog", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Turn On Minion Spell Resist
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGTurnOnMinionSpellResist_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_minionTakesReducedSpellDamage = true;
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_3F6D5C58"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGTurnOnMinionSpellResist_Init () {
    libSprt_gt_DEBUGTurnOnMinionSpellResist = TriggerCreate("libSprt_gt_DEBUGTurnOnMinionSpellResist_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGTurnOnMinionSpellResist, c_playerAny, "-reducespelldamage", true);
    TriggerAddEventChatMessage(libSprt_gt_DEBUGTurnOnMinionSpellResist, c_playerAny, "-waveclear", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Complete All Quests
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGCompleteAllQuests_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gf_DEBUGIncrementAllQuests(EventPlayer(), 0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGCompleteAllQuests_Init () {
    libSprt_gt_DEBUGCompleteAllQuests = TriggerCreate("libSprt_gt_DEBUGCompleteAllQuests_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGCompleteAllQuests, c_playerAny, "questcomplete", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Progress All Quests
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGProgressAllQuests_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_enteredTokenCount;

    // Variable Initialization
    lv_enteredTokenCount = StringToFixed(StringWord(EventChatMessage(false), 2));

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_enteredTokenCount == 0.0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_73E1C232"), true);
        return true;
    }

    libSprt_gf_DEBUGIncrementAllQuests(EventPlayer(), FixedToInt(lv_enteredTokenCount));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGProgressAllQuests_Init () {
    libSprt_gt_DEBUGProgressAllQuests = TriggerCreate("libSprt_gt_DEBUGProgressAllQuests_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGProgressAllQuests, c_playerAny, "questprogress", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Team Fight Perf Test
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGTeamFightPerfTest_Func (bool testConds, bool runActions) {
    int autoC249F3ED_ae;
    int autoC249F3ED_ai;
    int auto1BC2495B_ae;
    int auto1BC2495B_ai;
    int auto760EA7FC_ae;
    int auto760EA7FC_ai;
    int autoF13D00DA_ae;
    int autoF13D00DA_ai;

    // Variable Declarations
    int lv_playerIndex;
    int lv_waitTick;
    point lv_center;

    // Variable Initialization
    lv_center = Point(119.0, 171.0);

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC249F3ED_ae = 10;
    autoC249F3ED_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (autoC249F3ED_ai >= 0 && lv_playerIndex <= autoC249F3ED_ae) || (autoC249F3ED_ai <= 0 && lv_playerIndex >= autoC249F3ED_ae) ) ; lv_playerIndex += autoC249F3ED_ai ) {
        if ((libGame_gv_players[lv_playerIndex].lv_heroUnit != null)) {
            UnitSetPropertyFixed(libGame_gv_players[lv_playerIndex].lv_heroUnit, c_unitPropXP, (UnitGetPropertyFixed(libGame_gv_players[lv_playerIndex].lv_heroUnit, c_unitPropXP, c_unitPropCurrent) + 50000.0));
        }

    }
    ConsoleCommand("speed 8", true, true);
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(1, lv_center, 0.0, -1, 0.0, false);
    Wait(2.0, c_timeGame);
    ConsoleCommand("chat startgame", true, true);
    ConsoleCommand("chat -ai", true, true);
    ConsoleCommand("sm", true, true);
    auto1BC2495B_ae = 12;
    auto1BC2495B_ai = 1;
    lv_waitTick = 1;
    for ( ; ( (auto1BC2495B_ai >= 0 && lv_waitTick <= auto1BC2495B_ae) || (auto1BC2495B_ai <= 0 && lv_waitTick >= auto1BC2495B_ae) ) ; lv_waitTick += auto1BC2495B_ai ) {
        auto760EA7FC_ae = 10;
        auto760EA7FC_ai = 1;
        lv_playerIndex = 1;
        for ( ; ( (auto760EA7FC_ai >= 0 && lv_playerIndex <= auto760EA7FC_ae) || (auto760EA7FC_ai <= 0 && lv_playerIndex >= auto760EA7FC_ae) ) ; lv_playerIndex += auto760EA7FC_ai ) {
            if ((libGame_gv_players[lv_playerIndex].lv_heroUnit != null)) {
                UnitSetPosition(libGame_gv_players[lv_playerIndex].lv_heroUnit, libGame_gv_players[lv_playerIndex].lv_spawnPoint, false);
            }

        }
        Wait(3.0, c_timeGame);
    }
    ConsoleCommand("speed 1", true, true);
    ConsoleCommand("chat creepcamp", true, true);
    Wait(2.0, c_timeGame);
    autoF13D00DA_ae = 10;
    autoF13D00DA_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (autoF13D00DA_ai >= 0 && lv_playerIndex <= autoF13D00DA_ae) || (autoF13D00DA_ai <= 0 && lv_playerIndex >= autoF13D00DA_ae) ) ; lv_playerIndex += autoF13D00DA_ai ) {
        if ((libGame_gv_players[lv_playerIndex].lv_heroUnit != null)) {
            UnitSetPosition(libGame_gv_players[lv_playerIndex].lv_heroUnit, RegionRandomPoint(RegionCircle(lv_center, 4.0)), false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGTeamFightPerfTest_Init () {
    libSprt_gt_DEBUGTeamFightPerfTest = TriggerCreate("libSprt_gt_DEBUGTeamFightPerfTest_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGTeamFightPerfTest, c_playerAny, "perftest", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Toggle Jungle Camp Debug (togcampdebug)
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGToggleJungleCampDebugtogcampdebug_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libSprt_gt_DEBUGTargetJungleCreepState) == false)) {
        TriggerEnable(libSprt_gt_DEBUGTargetJungleCreepState, true);
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_18DF4B42"), true);
    }
    else {
        TriggerEnable(libSprt_gt_DEBUGTargetJungleCreepState, false);
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_1568A9D4"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGToggleJungleCampDebugtogcampdebug_Init () {
    libSprt_gt_DEBUGToggleJungleCampDebugtogcampdebug = TriggerCreate("libSprt_gt_DEBUGToggleJungleCampDebugtogcampdebug_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGToggleJungleCampDebugtogcampdebug, c_playerAny, "togcampdebug", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Target Jungle Creep State
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGTargetJungleCreepState_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_creepUnit;
    int lv_camp;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_creepUnit = UnitGroupUnit(UnitGroupSelected(1), 1);
    lv_camp = libMapM_gf_JungleGetJungleCampForUnit(lv_creepUnit);
    if ((lv_camp != 0)) {
        TextExpressionSetToken("Param/Expression/lib_Sprt_79246586", "A", IntToText(lv_camp));
        TextExpressionSetToken("Param/Expression/lib_Sprt_79246586", "B", StringToText(libMapM_ge_JungleCampStates_Ident(libMapM_gv_jungleCreepCamps[lv_camp].lv_aIState)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_79246586"), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGTargetJungleCreepState_Init () {
    libSprt_gt_DEBUGTargetJungleCreepState = TriggerCreate("libSprt_gt_DEBUGTargetJungleCreepState_Func");
    TriggerEnable(libSprt_gt_DEBUGTargetJungleCreepState, false);
    TriggerAddEventTimePeriodic(libSprt_gt_DEBUGTargetJungleCreepState, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Minion AI
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGMinionAI_Func (bool testConds, bool runActions) {
    int autoCA6396F3_val;

    // Variable Declarations
    unit lv_minion;
    int lv_minionIndex;
    point lv_previousWaypoint;
    point lv_nextWaypoint;
    point lv_flagbearerPoint;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((UnitGroupUnit(UnitGroupSelected(1), 1) != libGame_gv_players[1].lv_heroUnit))) {
            return false;
        }

        if (!((UnitGetCustomValue(UnitGroupUnit(UnitGroupSelected(1), 1), libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_MinionIndex)) != 0.0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_minion = UnitGroupUnit(UnitGroupSelected(1), 1);
    lv_minionIndex = FixedToInt(UnitGetCustomValue(lv_minion, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_MinionIndex)));
    autoCA6396F3_val = libAIAI_gf_MinionAIGetStateForMinion(lv_minionIndex);
    if (autoCA6396F3_val == libAIAI_ge_MinionAIStates_Advancing) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_C35E4D86"), true);
    }
    else if (autoCA6396F3_val == libAIAI_ge_MinionAIStates_AttackingMinions) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_0AE7674A"), true);
    }
    else if (autoCA6396F3_val == libAIAI_ge_MinionAIStates_AttackingHero) {
        TextExpressionSetToken("Param/Expression/lib_Sprt_26E979BA", "A", UnitTypeGetName(UnitGetType(libAIAI_gf_MinionAIGetTargetForMinion(lv_minionIndex))));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_26E979BA"), true);
    }
    else if (autoCA6396F3_val == libAIAI_ge_MinionAIStates_AttackingStructure) {
        TextExpressionSetToken("Param/Expression/lib_Sprt_C06D1587", "A", UnitTypeGetName(UnitGetType(libAIAI_gf_MinionAIGetTargetForMinion(lv_minionIndex))));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_C06D1587"), true);
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGMinionAI_Init () {
    libSprt_gt_DEBUGMinionAI = TriggerCreate("libSprt_gt_DEBUGMinionAI_Func");
    TriggerEnable(libSprt_gt_DEBUGMinionAI, false);
    TriggerAddEventTimePeriodic(libSprt_gt_DEBUGMinionAI, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Unlock Ally Color Settings
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGUnlockAllyColorSettings_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Sprt_D5B51D42") + TextWithColor(PlayerName(EventPlayer()), libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(EventPlayer(), false)))), true);
    UIUnitColorStyleClearOverride(PlayerGroupSingle(EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGUnlockAllyColorSettings_Init () {
    libSprt_gt_DEBUGUnlockAllyColorSettings = TriggerCreate("libSprt_gt_DEBUGUnlockAllyColorSettings_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGUnlockAllyColorSettings, c_playerAny, "HeroColor", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - 60 Second Pause
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUG60SecondPause_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libSprt_gv_dEBUG60SecondPauseOnOff == true)) {
        libSprt_gv_dEBUG60SecondPauseOnOff = false;
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_158D8409"), true);
    }
    else {
        libSprt_gv_dEBUG60SecondPauseOnOff = true;
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_E94315CF"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUG60SecondPause_Init () {
    libSprt_gt_DEBUG60SecondPause = TriggerCreate("libSprt_gt_DEBUG60SecondPause_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUG60SecondPause, c_playerAny, "60on", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Trigger A Save
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGTriggerASave_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gv_dEBUGDebuggingEnabled == false)) {
        return true;
    }

    GameSaveCreate(StringExternal("Param/Value/lib_Sprt_D009FA2B"), StringExternal("Param/Value/lib_Sprt_F0890456"), "", false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGTriggerASave_Init () {
    libSprt_gt_DEBUGTriggerASave = TriggerCreate("libSprt_gt_DEBUGTriggerASave_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGTriggerASave, c_playerAny, "-savegame", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Hero Is Alive
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGHeroIsAlive_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(libGame_gv_players[EventPlayer()].lv_heroUnit) == true)) {
        TextExpressionSetToken("Param/Expression/lib_Sprt_5A22D656", "A", UnitTypeGetName(UnitGetType(libGame_gv_players[EventPlayer()].lv_heroUnit)));
        TextExpressionSetToken("Param/Expression/lib_Sprt_5A22D656", "A", UnitTypeGetName(UnitGetType(libGame_gv_players[EventPlayer()].lv_heroUnit)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_5A22D656"), true);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_Sprt_69E15644", "A", UnitTypeGetName(UnitGetType(libGame_gv_players[EventPlayer()].lv_heroUnit)));
        TextExpressionSetToken("Param/Expression/lib_Sprt_69E15644", "A", UnitTypeGetName(UnitGetType(libGame_gv_players[EventPlayer()].lv_heroUnit)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_69E15644"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGHeroIsAlive_Init () {
    libSprt_gt_DEBUGHeroIsAlive = TriggerCreate("libSprt_gt_DEBUGHeroIsAlive_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGHeroIsAlive, c_playerAny, "-heroalive", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Short Hero Death
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGShortHeroDeath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_msg;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((StringCompare(StringWord(EventChatMessage(false), 1), EventChatMessage(true), c_stringNoCase) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gv_sYSDeathTimerCap = StringToFixed(StringWord(EventChatMessage(false), 2));
    if ((libCore_gv_sYSDeathTimerCap <= 0.0)) {
        libCore_gv_sYSDeathTimerCap = 0.0;
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_DB6D955D"), true);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_Sprt_C2D3C357", "A", FixedToText(libCore_gv_sYSDeathTimerCap, 0));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_C2D3C357"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGShortHeroDeath_Init () {
    libSprt_gt_DEBUGShortHeroDeath = TriggerCreate("libSprt_gt_DEBUGShortHeroDeath_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGShortHeroDeath, c_playerAny, "SHORTDEATH", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Invulnerable Structures
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGInvulnerableStructures_Func (bool testConds, bool runActions) {
    int auto9A9C00A4_ae;
    int auto9A9C00A4_ai;
    int auto255D3267_ae;
    int auto255D3267_ai;
    int autoA30348C2_ae;
    int autoA30348C2_ai;
    int auto17914A07_ae;
    int auto17914A07_ai;

    // Variable Declarations
    int lv_town;
    int lv_structure;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_59D31635"), true);
    if ((TimerGetElapsed(libGame_gv_gameTimer) < 30.0)) {
        auto9A9C00A4_ae = libGame_gv_townTownCount;
        auto9A9C00A4_ai = 1;
        lv_town = 1;
        for ( ; ( (auto9A9C00A4_ai >= 0 && lv_town <= auto9A9C00A4_ae) || (auto9A9C00A4_ai <= 0 && lv_town >= auto9A9C00A4_ae) ) ; lv_town += auto9A9C00A4_ai ) {
            auto255D3267_ae = libGame_gv_townTownData[lv_town].lv_structureCount;
            auto255D3267_ai = 1;
            lv_structure = 1;
            for ( ; ( (auto255D3267_ai >= 0 && lv_structure <= auto255D3267_ae) || (auto255D3267_ai <= 0 && lv_structure >= auto255D3267_ae) ) ; lv_structure += auto255D3267_ai ) {
                UnitBehaviorAdd(libGame_gv_townTownData[lv_town].lv_structureUnits[lv_structure], "StructureInvulnerability", libGame_gv_townTownData[lv_town].lv_structureUnits[lv_structure], 1);
            }
        }
        while (!((TimerGetElapsed(libGame_gv_gameTimer) >= 30.0))) {
            Wait(0.25, c_timeGame);
        }
        autoA30348C2_ae = libGame_gv_townTownCount;
        autoA30348C2_ai = 1;
        lv_town = 1;
        for ( ; ( (autoA30348C2_ai >= 0 && lv_town <= autoA30348C2_ae) || (autoA30348C2_ai <= 0 && lv_town >= autoA30348C2_ae) ) ; lv_town += autoA30348C2_ai ) {
            auto17914A07_ae = libGame_gv_townTownData[lv_town].lv_structureCount;
            auto17914A07_ai = 1;
            lv_structure = 1;
            for ( ; ( (auto17914A07_ai >= 0 && lv_structure <= auto17914A07_ae) || (auto17914A07_ai <= 0 && lv_structure >= auto17914A07_ae) ) ; lv_structure += auto17914A07_ai ) {
                UnitBehaviorRemove(libGame_gv_townTownData[lv_town].lv_structureUnits[lv_structure], "StructureInvulnerability", 1);
            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGInvulnerableStructures_Init () {
    libSprt_gt_DEBUGInvulnerableStructures = TriggerCreate("libSprt_gt_DEBUGInvulnerableStructures_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGInvulnerableStructures, c_playerAny, "invulnerablestructures", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Game Time
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGGameTime_Func (bool testConds, bool runActions) {
    int auto51819663_ae;
    int auto51819663_ai;
    int auto1E6EF0E0_ae;
    int auto1E6EF0E0_ai;
    int autoF862C5F8_ae;
    int autoF862C5F8_ai;
    int auto9890D104_ae;
    int auto9890D104_ai;
    unitgroup auto3BB2C50C_g;
    int auto3BB2C50C_u;
    int autoF568AF7C_ae;
    int autoF568AF7C_ai;
    unitgroup autoA7F07FFE_g;
    int autoA7F07FFE_u;

    // Variable Declarations
    text lv_msg;
    const int lv_maxLevel_C = 30;
    int[lv_maxLevel_C + 1] lv_heroLevel;
    fixed lv_newTime;
    fixed lv_newTimeDelta;
    fixed lv_requestedTimeChange;
    fixed lv_newTimerDuration;
    int lv_itTick;
    int lv_heroIndex;
    int lv_skinIndex;
    int lv_mountIndex;
    fixed lv_xP;
    int lv_itPlayer;
    int lv_newLevel;
    unit lv_itHero;
    int lv_itTown;
    unit lv_itStructure;
    region lv_baseRegion;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((StringCompare(StringWord(EventChatMessage(false), 1), EventChatMessage(true), c_stringNoCase) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((StringCompare(EventChatMessage(false), EventChatMessage(true), c_stringNoCase) == 0)) {
        TextExpressionSetToken("Param/Expression/lib_Sprt_3FB0E761", "A", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetElapsed(libGame_gv_gameTimer))));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Sprt_3FB0E761"));
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    lv_newTime = StringToFixed(StringWord(EventChatMessage(false), 2));
    if ((lv_newTime <= 0.0)) {
        TextExpressionSetToken("Param/Expression/lib_Sprt_822C3F09", "A", StringToText(StringWord(EventChatMessage(false), 2)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Sprt_822C3F09"));
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    lv_newTimeDelta = ((lv_newTime*60-TimerGetElapsed(libGame_gv_gameTimer))/60);
    if ((lv_newTimeDelta <= libSprt_gv_debug_GameTimeDelta)) {
        TextExpressionSetToken("Param/Expression/lib_Sprt_74D22EA0", "A", StringToText(StringWord(EventChatMessage(false), 2)));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Sprt_74D22EA0"));
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_Sprt_0B245A95", "A", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt((lv_newTime * 60.0))));
    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Sprt_0B245A95"));
    lv_newLevel = MinI(30, StringToInt(StringWord(EventChatMessage(false), 3)));
    if ((lv_newLevel > 0)) {
        auto51819663_ae = libCore_gv_bALMaxPlayers;
        auto51819663_ai = 1;
        lv_itPlayer = 1;
        for ( ; ( (auto51819663_ai >= 0 && lv_itPlayer <= auto51819663_ae) || (auto51819663_ai <= 0 && lv_itPlayer >= auto51819663_ae) ) ; lv_itPlayer += auto51819663_ai ) {
            lv_heroIndex = libGame_gv_players[lv_itPlayer].lv_heroIndex;
            if ((lv_heroIndex == 0)) {
                continue;
            }

            lv_skinIndex = libGame_gv_players[lv_itPlayer].lv_selectedSkin;
            lv_mountIndex = libGame_gv_players[lv_itPlayer].lv_selectedMount;
            lv_xP = libCore_gf_GetTotalXPForLevel(lv_newLevel);
            libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(lv_heroIndex, lv_skinIndex, lv_mountIndex, lv_xP, lv_itPlayer, 0);
        }
    }

    if ((lv_newTimeDelta == libSprt_gv_debug_GameTimeDelta)) {
        TriggerEnable(TriggerGetCurrent(), true);
        return true;
    }

    lv_requestedTimeChange = (lv_newTimeDelta-libSprt_gv_debug_GameTimeDelta);
    while (!((TimerIsPaused(libGame_gv_openTheGatesTimer) == false))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 0.0, false);
    Wait(1.0, c_timeGame);
    if ((TimerGetRemaining(libGame_gv_jungleWatchTowerStartTimer) > 0.0)) {
        lv_newTimerDuration = MaxF((TimerGetRemaining(libGame_gv_jungleWatchTowerStartTimer)-lv_requestedTimeChange*60), 0.0625);
        TimerStart(libGame_gv_jungleWatchTowerStartTimer, lv_newTimerDuration, false, c_timeGame);
    }

    if ((TimerGetRemaining(libGame_gv_xPTrickleStartTimer) > 0.0)) {
        lv_newTimerDuration = MaxF((TimerGetRemaining(libGame_gv_xPTrickleStartTimer)-lv_requestedTimeChange*60), 0.0625);
        TimerStart(libGame_gv_xPTrickleStartTimer, lv_newTimerDuration, false, c_timeGame);
    }

    Wait(1.0, c_timeGame);
    libGame_gv_scalingTicks = FixedToInt(lv_newTime);
    if ((libGame_gv_scalingTicks > libCore_gv_dataScalingMaxScalingTicks)) {
        libGame_gv_scalingTicks = libCore_gv_dataScalingMaxScalingTicks;
    }

    auto1E6EF0E0_ae = FixedToInt(lv_newTimeDelta);
    auto1E6EF0E0_ai = 1;
    lv_itTick = FixedToInt((FixedToInt(libSprt_gv_debug_GameTimeDelta) + 1));
    for ( ; ( (auto1E6EF0E0_ai >= 0 && lv_itTick <= auto1E6EF0E0_ae) || (auto1E6EF0E0_ai <= 0 && lv_itTick >= auto1E6EF0E0_ae) ) ; lv_itTick += auto1E6EF0E0_ai ) {
        libGame_gf_JungleUpdateScalingForCamps();
    }
    autoF862C5F8_ae = FixedToInt(lv_newTimeDelta);
    autoF862C5F8_ai = 1;
    lv_itTick = FixedToInt((FixedToInt(libSprt_gv_debug_GameTimeDelta) + 1));
    for ( ; ( (autoF862C5F8_ai >= 0 && lv_itTick <= autoF862C5F8_ae) || (autoF862C5F8_ai <= 0 && lv_itTick >= autoF862C5F8_ae) ) ; lv_itTick += autoF862C5F8_ai ) {
        libGame_gf_CoreUpdateScaling();
    }
    libSprt_gv_debug_GameTimeDelta = lv_newTimeDelta;
    Wait(1.0, c_timeGame);
    auto9890D104_ae = libCore_gv_bALMaxPlayers;
    auto9890D104_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto9890D104_ai >= 0 && lv_itPlayer <= auto9890D104_ae) || (auto9890D104_ai <= 0 && lv_itPlayer >= auto9890D104_ae) ) ; lv_itPlayer += auto9890D104_ai ) {
        lv_heroIndex = libGame_gv_players[lv_itPlayer].lv_heroIndex;
        if ((lv_heroIndex == 0)) {
            continue;
        }

        auto3BB2C50C_g = libGame_gv_players[lv_itPlayer].lv_heroUnitGroup;
        auto3BB2C50C_u = 1;
        for ( ; auto3BB2C50C_u <= UnitGroupCount(auto3BB2C50C_g, c_unitCountAll) ; auto3BB2C50C_u += (lv_itHero == UnitGroupUnit(auto3BB2C50C_g, auto3BB2C50C_u)) ) {
            lv_itHero = UnitGroupUnit(auto3BB2C50C_g, auto3BB2C50C_u);
            UnitBehaviorRemovePlayer(lv_itHero, "HeroGenericPregameAbilitySuppression", lv_itPlayer, 1);
        }
    }
    if ((lv_newTime >= 15.0)) {
        autoF568AF7C_ae = libGame_gv_townTownCount;
        autoF568AF7C_ai = 1;
        lv_itTown = 1;
        for ( ; ( (autoF568AF7C_ai >= 0 && lv_itTown <= autoF568AF7C_ae) || (autoF568AF7C_ai <= 0 && lv_itTown >= autoF568AF7C_ae) ) ; lv_itTown += autoF568AF7C_ai ) {
            if ((libGame_gv_townTownData[lv_itTown].lv_owner == libCore_gv_cOMPUTER_TeamOrder)) {
                lv_baseRegion = libCore_gv_mAPOrderBaseRegion;
            }
            else {
                lv_baseRegion = libCore_gv_mAPChaosBaseRegion;
            }
            if ((RegionContainsPoint(lv_baseRegion, RegionGetCenter(libGame_gv_townTownData[lv_itTown].lv_townRegion)) == false)) {
                autoA7F07FFE_g = UnitGroup(null, libGame_gv_townTownData[lv_itTown].lv_owner, libGame_gv_townTownData[lv_itTown].lv_townRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                autoA7F07FFE_u = 1;
                for ( ; autoA7F07FFE_u <= UnitGroupCount(autoA7F07FFE_g, c_unitCountAll) ; autoA7F07FFE_u += (lv_itStructure == UnitGroupUnit(autoA7F07FFE_g, autoA7F07FFE_u)) ) {
                    lv_itStructure = UnitGroupUnit(autoA7F07FFE_g, autoA7F07FFE_u);
                    UnitKill(lv_itStructure);
                }
                Wait(0.125, c_timeGame);
            }

        }
    }

    TriggerEnable(TriggerGetCurrent(), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGGameTime_Init () {
    libSprt_gt_DEBUGGameTime = TriggerCreate("libSprt_gt_DEBUGGameTime_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGGameTime, c_playerAny, "GAMETIME", false);
    TriggerAddEventChatMessage(libSprt_gt_DEBUGGameTime, c_playerAny, "-GT", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Game Time - Talent Stacks
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGGameTimeTalentStacks_Func (bool testConds, bool runActions) {
    int autoDBE86089_ae;
    int autoDA2D37D9_ae;
    int autoB1789CE4_ae;
    unitgroup autoE4A03EF4_g;
    int autoE4A03EF4_u;

    // Variable Declarations
    int lv_iter;
    unit lv_u_iter;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((StringCompare(StringWord(EventChatMessage(false), 1), EventChatMessage(true), c_stringNoCase) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((PlayerHasTalent(EventPlayer(), "GenericTalentBribe") == true)) {
        UnitBehaviorRemove(libGame_gv_players[EventPlayer()].lv_heroUnit, "BribeStacks", 50);
        UnitBehaviorAdd(libGame_gv_players[EventPlayer()].lv_heroUnit, "BribeStacks", libGame_gv_players[EventPlayer()].lv_heroUnit, 20);
        UnitAddChargeUsed(libGame_gv_players[EventPlayer()].lv_heroUnit, "Abil/TalentBucketBribe", -1.0);
        TextExpressionSetToken("Param/Expression/lib_Sprt_1CA8FC96", "A", IntToText(20));
        TextExpressionSetToken("Param/Expression/lib_Sprt_1CA8FC96", "A", IntToText(20));
        TextExpressionSetToken("Param/Expression/lib_Sprt_1CA8FC96", "B", StringToText(CatalogFieldValueGet(c_gameCatalogBehavior, "BribeStacks", "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_Sprt_1CA8FC96", "C", IntToText(EventPlayer()));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Sprt_1CA8FC96"));
    }

    if ((PlayerHasTalent(EventPlayer(), "GenericTalentGatheringPower") == true)) {
        UnitBehaviorRemove(libGame_gv_players[EventPlayer()].lv_heroUnit, "TalentGatheringPowerStack", 5);
        UnitBehaviorAdd(libGame_gv_players[EventPlayer()].lv_heroUnit, "TalentGatheringPowerStack", libGame_gv_players[EventPlayer()].lv_heroUnit, 2);
        TextExpressionSetToken("Param/Expression/lib_Sprt_2DCEA051", "A", IntToText(2));
        TextExpressionSetToken("Param/Expression/lib_Sprt_2DCEA051", "A", IntToText(2));
        TextExpressionSetToken("Param/Expression/lib_Sprt_2DCEA051", "B", StringToText(CatalogFieldValueGet(c_gameCatalogBehavior, "TalentGatheringPowerStack", "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_Sprt_2DCEA051", "C", IntToText(EventPlayer()));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Sprt_2DCEA051"));
    }

    if ((PlayerHasTalent(EventPlayer(), "GenericTalentSeasonedMarksman") == true)) {
        libSprt_gf_DEBUGAddDynamicStacksofBehaviortoUnit(1.5, "TalentSeasonedMarksmanStackingBonus", EventPlayer(), libGame_gv_players[EventPlayer()].lv_heroUnit);
    }

    if ((PlayerHasTalent(EventPlayer(), "GenericTalentRegenerationMaster") == true)) {
        libSprt_gf_DEBUGAddDynamicStacksofBehaviortoUnit(0.5, "RegenerationMaster", EventPlayer(), libGame_gv_players[EventPlayer()].lv_heroUnit);
    }

    if ((PlayerHasTalent(EventPlayer(), "GenericTalentConjurersPursuit") == true)) {
        libSprt_gf_DEBUGAddDynamicStacksofBehaviortoUnit(0.5, "ConjurersPursuit", EventPlayer(), libGame_gv_players[EventPlayer()].lv_heroUnit);
    }

    if ((UnitGetType(libGame_gv_players[EventPlayer()].lv_heroUnit) == "HeroDiablo")) {
        UnitBehaviorRemove(libGame_gv_players[EventPlayer()].lv_heroUnit, "BlackSoulstone", 200);
        UnitBehaviorAdd(libGame_gv_players[EventPlayer()].lv_heroUnit, "BlackSoulstone", libGame_gv_players[EventPlayer()].lv_heroUnit, 50);
        TextExpressionSetToken("Param/Expression/lib_Sprt_0C9176C9", "A", IntToText(20));
        TextExpressionSetToken("Param/Expression/lib_Sprt_0C9176C9", "A", IntToText(20));
        TextExpressionSetToken("Param/Expression/lib_Sprt_0C9176C9", "B", StringToText(CatalogFieldValueGet(c_gameCatalogBehavior, "BlackSoulstone", "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_Sprt_0C9176C9", "C", IntToText(EventPlayer()));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Sprt_0C9176C9"));
    }

    if ((PlayerHasTalent(EventPlayer(), "RaynorRaidersRecruitment") == true)) {
        UnitBehaviorRemove(libGame_gv_players[EventPlayer()].lv_heroUnit, "BribeStacks", 200);
        UnitBehaviorAdd(libGame_gv_players[EventPlayer()].lv_heroUnit, "BribeStacks", libGame_gv_players[EventPlayer()].lv_heroUnit, 20);
        UnitAddChargeUsed(libGame_gv_players[EventPlayer()].lv_heroUnit, "Abil/RaynorRaidersRecruitment", -1.0);
        TextExpressionSetToken("Param/Expression/lib_Sprt_884C70C5", "A", IntToText(20));
        TextExpressionSetToken("Param/Expression/lib_Sprt_884C70C5", "A", IntToText(20));
        TextExpressionSetToken("Param/Expression/lib_Sprt_884C70C5", "B", StringToText(CatalogFieldValueGet(c_gameCatalogBehavior, "BribeStacks", "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_Sprt_884C70C5", "C", IntToText(EventPlayer()));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Sprt_884C70C5"));
    }

    if ((UnitGetType(libGame_gv_players[EventPlayer()].lv_heroUnit) == "HeroButcher")) {
        UnitBehaviorRemove(libGame_gv_players[EventPlayer()].lv_heroUnit, "FreshMeatStack", 200);
        UnitBehaviorAdd(libGame_gv_players[EventPlayer()].lv_heroUnit, "FreshMeatStack", libGame_gv_players[EventPlayer()].lv_heroUnit, 15);
        TextExpressionSetToken("Param/Expression/lib_Sprt_A3EC2BE2", "A", IntToText(20));
        TextExpressionSetToken("Param/Expression/lib_Sprt_A3EC2BE2", "A", IntToText(20));
        TextExpressionSetToken("Param/Expression/lib_Sprt_A3EC2BE2", "B", StringToText(CatalogFieldValueGet(c_gameCatalogBehavior, "FreshMeatStack", "Name", c_playerAny)));
        TextExpressionSetToken("Param/Expression/lib_Sprt_A3EC2BE2", "C", IntToText(EventPlayer()));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Sprt_A3EC2BE2"));
    }

    if ((PlayerHasTalent(EventPlayer(), "WitchDoctorCombatStyleDeathRitual") == true)) {
        libSprt_gf_DEBUGAddDynamicStacksofBehaviortoUnit(8.0, "WitchDoctorVoodooRitualDeathRitualStatBonus", EventPlayer(), libGame_gv_players[EventPlayer()].lv_heroUnit);
    }

    if ((PlayerHasTalent(EventPlayer(), "MuradinStormboltPerfectStorm") == true)) {
        autoDBE86089_ae = FloorI((libGame_gv_scalingTicks * 2.0));
        lv_iter = 1;
        for ( ; lv_iter <= autoDBE86089_ae ; lv_iter += 1 ) {
            UnitCreateEffectUnit(libGame_gv_players[EventPlayer()].lv_heroUnit, "StormBoltPerfectStormMasteryDummyEffect", libGame_gv_players[EventPlayer()].lv_heroUnit);
        }
        TextExpressionSetToken("Param/Expression/lib_Sprt_2FCC404A", "A", IntToText(FloorI((libGame_gv_scalingTicks * 2.0))));
        TextExpressionSetToken("Param/Expression/lib_Sprt_2FCC404A", "A", IntToText(FloorI((libGame_gv_scalingTicks * 2.0))));
        TextExpressionSetToken("Param/Expression/lib_Sprt_2FCC404A", "B", StringToText("Perfect Storm Stacks"));
        TextExpressionSetToken("Param/Expression/lib_Sprt_2FCC404A", "C", IntToText(EventPlayer()));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Sprt_2FCC404A"));
    }

    if ((PlayerHasTalent(EventPlayer(), "StitchesMasterySavorTheFlavorDevour") == true)) {
        libSprt_gf_DEBUGAddDynamicStacksofBehaviortoUnit(1.0, "StitchesSavorTheFlavorDevour", EventPlayer(), libGame_gv_players[EventPlayer()].lv_heroUnit);
    }

    if ((PlayerHasTalent(EventPlayer(), "ETCMasteryProgRock") == true)) {
        autoDA2D37D9_ae = FloorI((libGame_gv_scalingTicks * 1.5));
        lv_iter = 1;
        for ( ; lv_iter <= autoDA2D37D9_ae ; lv_iter += 1 ) {
            PlayerCreateEffectUnit(EventPlayer(), "RegenGlobeImpactSet", libGame_gv_players[EventPlayer()].lv_heroUnit);
        }
        TextExpressionSetToken("Param/Expression/lib_Sprt_62F0678A", "A", IntToText(FloorI((libGame_gv_scalingTicks * 2.0))));
        TextExpressionSetToken("Param/Expression/lib_Sprt_62F0678A", "A", IntToText(FloorI((libGame_gv_scalingTicks * 2.0))));
        TextExpressionSetToken("Param/Expression/lib_Sprt_62F0678A", "B", StringToText("Prog Rock Stacks"));
        TextExpressionSetToken("Param/Expression/lib_Sprt_62F0678A", "C", IntToText(EventPlayer()));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Sprt_62F0678A"));
    }

    if ((PlayerHasTalent(EventPlayer(), "AzmodanMasteryTasteForBlood") == true)) {
        autoB1789CE4_ae = FloorI((libGame_gv_scalingTicks * 4.0));
        lv_iter = 1;
        for ( ; lv_iter <= autoB1789CE4_ae ; lv_iter += 1 ) {
            UnitCreateEffectUnit(libGame_gv_players[EventPlayer()].lv_heroUnit, "TasteForBloodDummySet", libGame_gv_players[EventPlayer()].lv_heroUnit);
        }
        TextExpressionSetToken("Param/Expression/lib_Sprt_DD2125CE", "A", IntToText(FloorI((libGame_gv_scalingTicks * 4.0))));
        TextExpressionSetToken("Param/Expression/lib_Sprt_DD2125CE", "A", IntToText(FloorI((libGame_gv_scalingTicks * 4.0))));
        TextExpressionSetToken("Param/Expression/lib_Sprt_DD2125CE", "B", StringToText("Globe of Annihilation"));
        TextExpressionSetToken("Param/Expression/lib_Sprt_DD2125CE", "C", IntToText(EventPlayer()));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Sprt_DD2125CE"));
    }

    if ((PlayerHasTalent(EventPlayer(), "LostVikingsMasteryVikingHoard") == true)) {
        autoE4A03EF4_g = libGame_gv_players[EventPlayer()].lv_heroUnitGroup;
        autoE4A03EF4_u = 1;
        for ( ; autoE4A03EF4_u <= UnitGroupCount(autoE4A03EF4_g, c_unitCountAll) ; autoE4A03EF4_u += (lv_u_iter == UnitGroupUnit(autoE4A03EF4_g, autoE4A03EF4_u)) ) {
            lv_u_iter = UnitGroupUnit(autoE4A03EF4_g, autoE4A03EF4_u);
            if ((UnitGetType(lv_u_iter) != "HeroLostVikingsController")) {
                libSprt_gf_DEBUGAddDynamicStacksofBehaviortoUnit(1.5, "LostVikingsVikingHoard", EventPlayer(), lv_u_iter);
            }

        }
    }

    if ((PlayerHasTalent(EventPlayer(), "KaelthasManaAddict") == true)) {
        libSprt_gf_DEBUGAddDynamicStacksofBehaviortoUnit(1.5, "KaelthasManaAddictStack", EventPlayer(), libGame_gv_players[EventPlayer()].lv_heroUnit);
    }

    if ((PlayerHasTalent(EventPlayer(), "LeoricMasteryReconstruction") == true)) {
        libSprt_gf_DEBUGAddDynamicStacksofBehaviortoUnit(0.5, "RegenerationMaster", EventPlayer(), libGame_gv_players[EventPlayer()].lv_heroUnit);
    }

    if ((PlayerHasTalent(EventPlayer(), "IllidanUnendingHatredPassive") == true)) {
        libSprt_gf_DEBUGAddDynamicStacksofBehaviortoUnit(1.5, "IllidanUnendingHatredStackingBonus", EventPlayer(), libGame_gv_players[EventPlayer()].lv_heroUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGGameTimeTalentStacks_Init () {
    libSprt_gt_DEBUGGameTimeTalentStacks = TriggerCreate("libSprt_gt_DEBUGGameTimeTalentStacks_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGGameTimeTalentStacks, c_playerAny, "GIVEMESTACKS", true);
    TriggerAddEventChatMessage(libSprt_gt_DEBUGGameTimeTalentStacks, c_playerAny, "-GIVEMESTACKS", true);
    TriggerAddEventChatMessage(libSprt_gt_DEBUGGameTimeTalentStacks, c_playerAny, "TALENTSTACKS", true);
    TriggerAddEventChatMessage(libSprt_gt_DEBUGGameTimeTalentStacks, c_playerAny, "-TALENTSTACKS", true);
    TriggerAddEventChatMessage(libSprt_gt_DEBUGGameTimeTalentStacks, c_playerAny, "STACKS", true);
    TriggerAddEventChatMessage(libSprt_gt_DEBUGGameTimeTalentStacks, c_playerAny, "-STACKS", true);
    TriggerAddEventChatMessage(libSprt_gt_DEBUGGameTimeTalentStacks, c_playerAny, "STACKSONSTACKS", true);
    TriggerAddEventChatMessage(libSprt_gt_DEBUGGameTimeTalentStacks, c_playerAny, "-STACKSONSTACKS", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Choose Talent
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGChooseTalent_Func (bool testConds, bool runActions) {
    int auto4EB8BA4A_ae;

    // Variable Declarations
    int lv_player;
    int lv_tier;
    int lv_button;
    int lv_tierIndex;
    int lv_numPreviousTalents;

    // Variable Initialization
    lv_numPreviousTalents = -1;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((StringCompare(StringWord(EventChatMessage(false), 1), EventChatMessage(true), c_stringNoCase) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = StringToInt(StringWord(EventChatMessage(false), 2));
    lv_tier = StringToInt(StringWord(EventChatMessage(false), 3));
    lv_button = StringToInt(StringWord(EventChatMessage(false), 4));
    if (((lv_player == 0) || (lv_tier == 0) || (lv_button == 0))) {
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Sprt_C75DC32D"));
        return true;
    }

    if (((lv_player < 1) || (lv_player > libCore_gv_bALMaxPlayers))) {
        TextExpressionSetToken("Param/Expression/lib_Sprt_62EA0E6F", "A", IntToText(lv_player));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Sprt_62EA0E6F"));
        return true;
    }

    libSprt_gf_DEBUGTalentsRespec(lv_player, lv_tier);
    auto4EB8BA4A_ae = (lv_tier - 1);
    lv_tierIndex = 1;
    for ( ; lv_tierIndex <= auto4EB8BA4A_ae ; lv_tierIndex += 1 ) {
        lv_numPreviousTalents += libGame_gv_talents_TalentChoices[lv_player][lv_tierIndex].lv_numberOfTalentsForThisTier;
    }
    TextExpressionSetToken("Param/Expression/lib_Sprt_B6092116", "C", IntToText(lv_player));
    TextExpressionSetToken("Param/Expression/lib_Sprt_B6092116", "A", IntToText(lv_tier));
    TextExpressionSetToken("Param/Expression/lib_Sprt_B6092116", "B", IntToText(lv_button));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_B6092116"), true);
    TalentTreeSetSelectedHeroTalentTree(lv_player, (lv_button + lv_numPreviousTalents));
    libGame_gf_TalentsChooseTalentForPlayer(lv_tier, lv_button, lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGChooseTalent_Init () {
    libSprt_gt_DEBUGChooseTalent = TriggerCreate("libSprt_gt_DEBUGChooseTalent_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGChooseTalent, c_playerAny, "TALENT", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - XPRange
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGXPRange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    fixed lv_inputXPRange;

    // Variable Initialization
    lv_player = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((StringCompare(StringWord(EventChatMessage(false), 1), EventChatMessage(true), c_stringNoCase) == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == null)) {
        TextExpressionSetToken("Param/Expression/lib_Sprt_43BDE6FF", "A", FixedToText(libCore_gv_bALXPRadius, c_fixedPrecisionAny));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Sprt_43BDE6FF"));
        return true;
    }
    else {
        libCore_gv_bALXPRadius = StringToFixed(StringWord(EventChatMessage(false), 2));
        TextExpressionSetToken("Param/Expression/lib_Sprt_144B5823", "A", FixedToText(libCore_gv_bALXPRadius, c_fixedPrecisionAny));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Sprt_144B5823"));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGXPRange_Init () {
    libSprt_gt_DEBUGXPRange = TriggerCreate("libSprt_gt_DEBUGXPRange_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGXPRange, c_playerAny, "XPRange", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Afk System
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGAfkSystem_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_afk_DebugOn == true)) {
        libGame_gv_afk_DebugOn = false;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_Sprt_78715EA0"));
    }
    else {
        libGame_gv_afk_DebugOn = true;
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_Sprt_F7A53840"));
        if ((libGame_gv_afk_AfkDetectionSystemSkipped == true)) {
            libGame_gf_AfkStartAfkWarningSystem(true);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGAfkSystem_Init () {
    libSprt_gt_DEBUGAfkSystem = TriggerCreate("libSprt_gt_DEBUGAfkSystem_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGAfkSystem, c_playerAny, "DEBUGAFK", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Start DPS Tracker
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGStartDPSTracker_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libSprt_gt_DEBUGDPSTracker) == false) && ((StringSub(EventChatMessage(false), 13, 14) == "") || (StringSub(EventChatMessage(false), 13, 14) == "0"))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_F79A7687"), true);
        return true;
    }
    else {
        if ((TriggerIsEnabled(libSprt_gt_DEBUGDPSTracker) == true)) {
            TriggerEnable(libSprt_gt_DEBUGDPSTracker, false);
            TriggerEnable(libSprt_gt_DEBUGDPSTrackerTimerExpires, false);
            libSprt_gv_dEBUGDPSTrackerTrackingInterval = 0.0;
            libSprt_gv_dEBUGDPSTrackerTotalDamage = 0.0;
            libSprt_gv_dEBUGDPSTrackerTime = 0.0;
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_2FE6DEF4"), true);
        }
        else {
            TriggerEnable(libSprt_gt_DEBUGDPSTracker, true);
            TriggerEnable(libSprt_gt_DEBUGDPSTrackerTimerExpires, true);
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_4721DE54"), true);
            libSprt_gv_dEBUGDPSTrackerTrackingInterval = StringToFixed(StringSub(EventChatMessage(false), 13, 14));
            TextExpressionSetToken("Param/Expression/lib_Sprt_05C0C86B", "A", StringExternal("Param/Value/lib_Sprt_A026A1A1"));
            TextExpressionSetToken("Param/Expression/lib_Sprt_05C0C86B", "B", FixedToText(libSprt_gv_dEBUGDPSTrackerTrackingInterval, c_fixedPrecisionAny));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_05C0C86B"), true);
            TimerStart(libSprt_gv_dEBUGDPSTrackerTimer, libSprt_gv_dEBUGDPSTrackerTrackingInterval, false, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGStartDPSTracker_Init () {
    libSprt_gt_DEBUGStartDPSTracker = TriggerCreate("libSprt_gt_DEBUGStartDPSTracker_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGStartDPSTracker, c_playerAny, "-dpstracker", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - DPS Tracker
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGDPSTracker_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnitDamageSourceUnit(), "DPSTracker") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gv_dEBUGDPSTrackerTotalDamage += EventUnitDamageAmount();
    UnitGroupAdd(libSprt_gv_dEBUGDPSTrackerGroup, EventUnitDamageSourceUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGDPSTracker_Init () {
    libSprt_gt_DEBUGDPSTracker = TriggerCreate("libSprt_gt_DEBUGDPSTracker_Func");
    TriggerEnable(libSprt_gt_DEBUGDPSTracker, false);
    TriggerAddEventUnitDamaged(libSprt_gt_DEBUGDPSTracker, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Clear DPS Tracker Stats
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGClearDPSTrackerStats_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(libSprt_gt_DEBUGDPSTracker) == true))) {
            return false;
        }

        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gv_dEBUGDPSTrackerTotalDamage = 0.0;
    libSprt_gv_dEBUGDPSTrackerTime = 0.0;
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_F5F8B601"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGClearDPSTrackerStats_Init () {
    libSprt_gt_DEBUGClearDPSTrackerStats = TriggerCreate("libSprt_gt_DEBUGClearDPSTrackerStats_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGClearDPSTrackerStats, c_playerAny, "-dpsclear", true);
    TriggerAddEventKeyPressed(libSprt_gt_DEBUGClearDPSTrackerStats, c_playerAny, c_keyNumPad5, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - DPS Tracker Timer Expires
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGDPSTrackerTimerExpires_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gv_dEBUGDPSTrackerTime += libSprt_gv_dEBUGDPSTrackerTrackingInterval;
    TimerStart(libSprt_gv_dEBUGDPSTrackerTimer, libSprt_gv_dEBUGDPSTrackerTrackingInterval, false, c_timeGame);
    TextExpressionSetToken("Param/Expression/lib_Sprt_CFB925D0", "A", StringExternal("Param/Value/lib_Sprt_47699D4A"));
    TextExpressionSetToken("Param/Expression/lib_Sprt_CFB925D0", "B", FixedToText(libSprt_gv_dEBUGDPSTrackerTotalDamage, 0));
    TextExpressionSetToken("Param/Expression/lib_Sprt_CFB925D0", "C", FixedToText((libSprt_gv_dEBUGDPSTrackerTotalDamage / libSprt_gv_dEBUGDPSTrackerTime), 0));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Sprt_CFB925D0"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGDPSTrackerTimerExpires_Init () {
    libSprt_gt_DEBUGDPSTrackerTimerExpires = TriggerCreate("libSprt_gt_DEBUGDPSTrackerTimerExpires_Func");
    TriggerEnable(libSprt_gt_DEBUGDPSTrackerTimerExpires, false);
    TriggerAddEventTimer(libSprt_gt_DEBUGDPSTrackerTimerExpires, libSprt_gv_dEBUGDPSTrackerTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Temp
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGTemp_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, StringExternal("Param/Value/lib_Sprt_36737449"));
    TriggerExecute(libStEx_gt_SE_TrainingModeReferenceCardDisplay, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGTemp_Init () {
    libSprt_gt_DEBUGTemp = TriggerCreate("libSprt_gt_DEBUGTemp_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGTemp, c_playerAny, "DEBUGTEMP", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Enable Building Scaling
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGEnableBuildingScaling_Func (bool testConds, bool runActions) {
    int autoFF997C2D_ae;
    int autoFF997C2D_ai;
    unitgroup auto3B862A54_g;
    int auto3B862A54_u;

    // Variable Declarations
    unit lv_itUnit;
    int lv_itTeam;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoFF997C2D_ae = libCore_gv_bALMaxTeams;
    autoFF997C2D_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (autoFF997C2D_ai >= 0 && lv_itTeam <= autoFF997C2D_ae) || (autoFF997C2D_ai <= 0 && lv_itTeam >= autoFF997C2D_ae) ) ; lv_itTeam += autoFF997C2D_ai ) {
        CatalogFieldValueSet(c_gameCatalogUnit, "TownCannonTowerL2Standalone", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString(3200.0, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownCannonTowerL2Standalone", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString(3200.0, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownCannonTowerL2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString(3200.0, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownCannonTowerL2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString(3200.0, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogEffect, "CannonTowerL2Damage", "Amount", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString(110.0, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownTownHallL2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString(9550.0, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownTownHallL2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString(9550.0, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogEffect, "TownHallL2WeaponDamage", "Amount", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString(160.0, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownMoonwellL2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString(1900.0, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownMoonwellL2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString(1900.0, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownCannonTowerL3Standalone", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString(3800.0, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownCannonTowerL3Standalone", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString(3800.0, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownCannonTowerL3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString(3800.0, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownCannonTowerL3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString(3800.0, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogEffect, "CannonTowerL3Damage", "Amount", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString(133.0, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownTownHallL3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString(11500.0, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownTownHallL3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString(11500.0, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogEffect, "TownHallL3WeaponDamage", "Amount", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString(175.0, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownMoonwellL3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString(2240.0, c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownMoonwellL3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString(2240.0, c_fixedPrecisionAny));
        auto3B862A54_g = UnitGroup(null, libGame_gf_ComputerPlayerInTeam(lv_itTeam), RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto3B862A54_u = 1;
        for ( ; auto3B862A54_u <= UnitGroupCount(auto3B862A54_g, c_unitCountAll) ; auto3B862A54_u += (lv_itUnit == UnitGroupUnit(auto3B862A54_g, auto3B862A54_u)) ) {
            lv_itUnit = UnitGroupUnit(auto3B862A54_g, auto3B862A54_u);
            if (((UnitHasBehavior2(lv_itUnit, "TownGateBehavior") == true) && (UnitHasBehavior2(lv_itUnit, "TownGateL3Behavior") == false))) {
                UnitSetPropertyFixed(lv_itUnit, c_unitPropLifeMax, 3950.0);
                UnitSetPropertyFixed(lv_itUnit, c_unitPropLife, 3950.0);
            }

            if (((UnitHasBehavior2(lv_itUnit, "TownGateBehavior") == true) && (UnitHasBehavior2(lv_itUnit, "TownGateL3Behavior") == true))) {
                UnitSetPropertyFixed(lv_itUnit, c_unitPropLifeMax, 4400.0);
                UnitSetPropertyFixed(lv_itUnit, c_unitPropLife, 4400.0);
            }

            if (((UnitHasBehavior2(lv_itUnit, "TownWallBehavior") == true) && (UnitHasBehavior2(lv_itUnit, "TownWallL3Behavior") == false))) {
                UnitSetPropertyFixed(lv_itUnit, c_unitPropLifeMax, 1500.0);
                UnitSetPropertyFixed(lv_itUnit, c_unitPropLife, 1500.0);
            }

            if (((UnitHasBehavior2(lv_itUnit, "TownWallBehavior") == true) && (UnitHasBehavior2(lv_itUnit, "TownWallL3Behavior") == true))) {
                UnitSetPropertyFixed(lv_itUnit, c_unitPropLifeMax, 1650.0);
                UnitSetPropertyFixed(lv_itUnit, c_unitPropLife, 1650.0);
            }

        }
    }
    if ((libGame_gv_buildingScalingEnabled == true)) {
        libGame_gv_buildingScalingEnabled = false;
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_8AE19A4E"), true);
    }
    else {
        libGame_gv_buildingScalingEnabled = true;
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_18FB7138"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGEnableBuildingScaling_Init () {
    libSprt_gt_DEBUGEnableBuildingScaling = TriggerCreate("libSprt_gt_DEBUGEnableBuildingScaling_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGEnableBuildingScaling, c_playerAny, "BUILDINGSCALING", true);
    TriggerAddEventChatMessage(libSprt_gt_DEBUGEnableBuildingScaling, c_playerAny, "-BUILDINGSCALING", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Enable town hall detection
//--------------------------------------------------------------------------------------------------
bool libSprt_gt_DEBUGEnabletownhalldetection_Func (bool testConds, bool runActions) {
    int autoEF48957F_ae;
    int autoEF48957F_ai;

    // Variable Declarations
    const string lv_detectionBuff_C = "CoreDetection";
    int lv_townIndex;
    unit lv_townHall;
    bool lv_truesightApplied;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoEF48957F_ae = libGame_gv_townTownCount;
    autoEF48957F_ai = 1;
    lv_townIndex = 1;
    for ( ; ( (autoEF48957F_ai >= 0 && lv_townIndex <= autoEF48957F_ae) || (autoEF48957F_ai <= 0 && lv_townIndex >= autoEF48957F_ae) ) ; lv_townIndex += autoEF48957F_ai ) {
        lv_townHall = libGame_gf_TownTownHall(lv_townIndex);
        if ((UnitHasBehavior2(lv_townHall, lv_detectionBuff_C) == true)) {
            UnitBehaviorRemove(lv_townHall, lv_detectionBuff_C, 1);
            lv_truesightApplied = false;
        }
        else {
            UnitBehaviorAdd(lv_townHall, lv_detectionBuff_C, lv_townHall, 1);
            lv_truesightApplied = true;
        }
    }
    if ((lv_truesightApplied == true)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_7E6A20C4"), true);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Sprt_D832791D"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libSprt_gt_DEBUGEnabletownhalldetection_Init () {
    libSprt_gt_DEBUGEnabletownhalldetection = TriggerCreate("libSprt_gt_DEBUGEnabletownhalldetection_Func");
    TriggerAddEventChatMessage(libSprt_gt_DEBUGEnabletownhalldetection, c_playerAny, "truesight", true);
}

void libSprt_InitTriggers () {
    libSprt_gt_IncludeSupport_Init();
    libSprt_gt_AISpawningTest_Init();
    libSprt_gt_AutomatedBuildTest_Init();
    libSprt_gt_PerformanceTestSpawnHeroesForHeroesPerformanceTestMap_Init();
    libSprt_gt_PerformanceTestRunPerformanceTest_Init();
    libSprt_gt_PerformanceTestSetHeroChoices_Init();
    libSprt_gt_PerformanceTestGetFPS_Init();
    libSprt_gt_PerformanceTestOutputFPSToFile_Init();
    libSprt_gt_PerformanceTestMaintainHeroHealth_Init();
    libSprt_gt_StatTrackingStartforPlayer_Init();
    libSprt_gt_StatTrackingLogBreak_Init();
    libSprt_gt_StatTrackingStop_Init();
    libSprt_gt_StatTrackingStartTrackingforAllPlayers_Init();
    libSprt_gt_StatTrackingStopTrackingforAllPlayers_Init();
    libSprt_gt_StatTrackingDamageTracking_Init();
    libSprt_gt_StatTrackingHealingTracking_Init();
    libSprt_gt_StatTrackingGameOver_Init();
    libSprt_gt_DataMiningListenForRegenGlobes_Init();
    libSprt_gt_DataMiningPeriodicDataSendPeriodicEventTrigger_Init();
    libSprt_gt_DEBUGInspectTheBalanceProbebalanceprobe_Init();
    libSprt_gt_DEBUGResetTheBalanceProbebalancereset_Init();
    libSprt_gt_DEBUGTimedBalanceProbebalancetimer_Init();
    libSprt_gt_DEBUGBalanceProbeTimerExpires_Init();
    libSprt_gt_DEBUGHelphelp_Init();
    libSprt_gt_DEBUGPlayerNumberplayernum_Init();
    libSprt_gt_DEBUGToggleSelectiontogselection_Init();
    libSprt_gt_DEBUGToggleMinionDebugtogminiondebug_Init();
    libSprt_gt_DebugToggleShowXPValuestogshowxpvalues_Init();
    libSprt_gt_DEBUGStartGamestartgame_Init();
    libSprt_gt_DEBUGDisablePingLimitfreepings_Init();
    libSprt_gt_DEBUGPauseGameStartTimerpausestart_Init();
    libSprt_gt_DEBUGTurnOnNormalCreepCampscreepcamp_Init();
    libSprt_gt_DEBUGRespawnCreepCampsrespawncamps_Init();
    libSprt_gt_DEBUGDestroyInventoryItemsdeleteitems_Init();
    libSprt_gt_DEBUGSpawnHerospawnhero_Init();
    libSprt_gt_DEBUGRespawnHerodebugrespawn_Init();
    libSprt_gt_DEBUGAIHeroMimicheromimic_Init();
    libSprt_gt_DEBUGAISetHerosethero_Init();
    libSprt_gt_DEBUGAISetAllHerosetallheroes_Init();
    libSprt_gt_DEBUGLogRandomHeroesForPlayer_Init();
    libSprt_gt_DEBUGLevelAIHerosheroxp_Init();
    libSprt_gt_DEBUGChangeAnnouncer_Init();
    libSprt_gt_DEBUGToggleFloatingCombatTexttogcombattext_Init();
    libSprt_gt_DEBUGToggleMinionSpawningtogminionspawn_Init();
    libSprt_gt_DEBUGToggleMinionSystemPausedtogminionpause_Init();
    libSprt_gt_DEBUGToggleMinionSystemOnOfftogminionsystem_Init();
    libSprt_gt_DEBUGToggleMinionBonusXPOnOff_Init();
    libSprt_gt_DEBUGToggleTowerSystemOnOfftogtowersystem_Init();
    libSprt_gt_DEBUGToggleXPTrickletogtrickle_Init();
    libSprt_gt_DEBUGScalecatchupXPBonuscatchupxpbonus_Init();
    libSprt_gt_DEBUGScalecatchupXPPenaltycatchupxppenalty_Init();
    libSprt_gt_DEBUGScaleCampscampscale_Init();
    libSprt_gt_DEBUGHaveAITakeOverAI_Init();
    libSprt_gt_DEBUGAIAvoidPlayersolo_Init();
    libSprt_gt_DEBUGAIFollowPlayershare_Init();
    libSprt_gt_DEBUGAIAllFollowPlayergroup_Init();
    libSprt_gt_DEBUGAIShowTalentBuildaishowtalentbuild_Init();
    libSprt_gt_DEBUGAICycleThroughAllHeroesailoadeveryhero_Init();
    libSprt_gt_DEBUGDisplayHeroAIDebugInfoaidebug_Init();
    libSprt_gt_DEBUGDisplayMinionAIDebugInfominiondebug_Init();
    libSprt_gt_DEBUGDisplayDefenderAIDebugInfodefenderdebug_Init();
    libSprt_gt_DEBUGVictorydebugvictory_Init();
    libSprt_gt_DEBUGStructures1ShotMinionskillerstructures_Init();
    libSprt_gt_DEBUGIncreasedMinionDamagekillerminions_Init();
    libSprt_gt_DEBUGRefreshCooldownscdr_Init();
    libSprt_gt_DEBUGDefeatdebugdefeat_Init();
    libSprt_gt_DEBUGUpvotedebugupvote_Init();
    libSprt_gt_DEBUGTiedebugtie_Init();
    libSprt_gt_DEBUGToggleHeroAItogheroai_Init();
    libSprt_gt_DEBUGStopAIThinkTree_Init();
    libSprt_gt_DEBUGStartAIThinkTree_Init();
    libSprt_gt_DEBUGStopRegenstopregen_Init();
    libSprt_gt_DEBUGStopHealthRegenForAllPlayersnoregen_Init();
    libSprt_gt_DEBUGToggleCoreShieldMechanictogcoreshield_Init();
    libSprt_gt_DEBUGToggleDebugOutputtogdebug_Init();
    libSprt_gt_DEBUGToggleForCinematicstogcine_Init();
    libSprt_gt_DEBUGToggleForMapTexttogmaptext_Init();
    libSprt_gt_DEBUGTurnOffWeather_Init();
    libSprt_gt_DEBUGTurnOnMinionSpellResist_Init();
    libSprt_gt_DEBUGCompleteAllQuests_Init();
    libSprt_gt_DEBUGProgressAllQuests_Init();
    libSprt_gt_DEBUGTeamFightPerfTest_Init();
    libSprt_gt_DEBUGToggleJungleCampDebugtogcampdebug_Init();
    libSprt_gt_DEBUGTargetJungleCreepState_Init();
    libSprt_gt_DEBUGMinionAI_Init();
    libSprt_gt_DEBUGUnlockAllyColorSettings_Init();
    libSprt_gt_DEBUG60SecondPause_Init();
    libSprt_gt_DEBUGTriggerASave_Init();
    libSprt_gt_DEBUGHeroIsAlive_Init();
    libSprt_gt_DEBUGShortHeroDeath_Init();
    libSprt_gt_DEBUGInvulnerableStructures_Init();
    libSprt_gt_DEBUGGameTime_Init();
    libSprt_gt_DEBUGGameTimeTalentStacks_Init();
    libSprt_gt_DEBUGChooseTalent_Init();
    libSprt_gt_DEBUGXPRange_Init();
    libSprt_gt_DEBUGAfkSystem_Init();
    libSprt_gt_DEBUGStartDPSTracker_Init();
    libSprt_gt_DEBUGDPSTracker_Init();
    libSprt_gt_DEBUGClearDPSTrackerStats_Init();
    libSprt_gt_DEBUGDPSTrackerTimerExpires_Init();
    libSprt_gt_DEBUGTemp_Init();
    libSprt_gt_DEBUGEnableBuildingScaling_Init();
    libSprt_gt_DEBUGEnabletownhalldetection_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libSprt_InitLib_completed = false;

void libSprt_InitLib () {
    if (libSprt_InitLib_completed) {
        return;
    }

    libSprt_InitLib_completed = true;

    libSprt_InitLibraries();
    libSprt_InitVariables();
    libSprt_InitTriggers();
}

include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/MapMechanicsLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"
include "TriggerLibs/StartingExperienceLib"
include "TriggerLibs/GameDataHelperLib"

