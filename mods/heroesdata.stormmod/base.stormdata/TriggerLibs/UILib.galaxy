include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib_h"
include "TriggerLibs/GameLib_h"
include "TriggerLibs/MapMechanicsLib_h"
include "TriggerLibs/AILib_h"
include "TriggerLibs/StartingExperienceLib_h"
include "TriggerLibs/SoundLib_h"
include "TriggerLibs/GameDataHelperLib_h"
include "TriggerLibs/SupportLib_h"

include "TriggerLibs/UILib_h"

//--------------------------------------------------------------------------------------------------
// Library: UI
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libUIUI_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libMapM_InitVariables();
    libAIAI_InitVariables();
    libStEx_InitVariables();
    libSond_InitVariables();
    libGDHL_InitVariables();
    libSprt_InitVariables();
}

// Variable Initialization
bool libUIUI_InitVariables_completed = false;

void libUIUI_InitVariables () {
    int init_i;
    int init_j;
    int init_i1;
    int init_j1;

    if (libUIUI_InitVariables_completed) {
        return;
    }

    libUIUI_InitVariables_completed = true;

    libUIUI_gv_uITimeLabelUpdateTimer = TimerCreate();
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
            libUIUI_gv_lostVikingsDebuggingLabels[init_i].lv_botDifficultyLabel[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
            libUIUI_gv_lostVikingsDebuggingLabels[init_i].lv_botStatusLabel[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
            libUIUI_gv_lostVikingsDebuggingLabels[init_i].lv_unitHealthBarResistant[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
            libUIUI_gv_lostVikingsDebuggingLabels[init_i].lv_unitHealthBarVulnerable[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
            libUIUI_gv_lostVikingsDebuggingLabels[init_i].lv_unitHealthBarDimmed[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
            libUIUI_gv_lostVikingsDebuggingLabels[init_i].lv_unitHealthBarInvincible[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
            libUIUI_gv_lostVikingsDebuggingLabels[init_i].lv_invulnerableImage[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
            libUIUI_gv_lostVikingsDebuggingLabels[init_i].lv_resistantImage[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
            libUIUI_gv_lostVikingsDebuggingLabels[init_i].lv_unstoppableImage[init_i1] = c_invalidDialogControlId;
        }
    }
    libUIUI_gv_uIDamageFlashUI.lv_mainDialog = c_invalidDialogControlId;
    libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage = c_invalidDialogControlId;
    libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage = c_invalidDialogControlId;
    libUIUI_gv_uIDamageFlashUI.lv_lowHealthPersistentImage = c_invalidDialogControlId;
    libUIUI_gv_uIDamageFlashLowHPThreshold = 30.0;
    libUIUI_gv_deathRecap_Panel.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_deathRecap_Panel.lv_closeButton = c_invalidDialogControlId;
    libUIUI_gv_deathRecap_Panel.lv_tabScreenButton = c_invalidDialogControlId;
    libUIUI_gv_deathRecap_Panel.lv_toastButton = c_invalidDialogControlId;
    libUIUI_gv_deathRecap_Panel.lv_toastButtonFinishedYouLabel = c_invalidDialogControlId;
    libUIUI_gv_deathRecap_Panel.lv_toastButtonPlayerNameLabel = c_invalidDialogControlId;
    libUIUI_gv_deathRecap_Panel.lv_toastButtonAbilityNameLabel = c_invalidDialogControlId;
    libUIUI_gv_deathRecap_Panel.lv_toastButtonAbilityImage = c_invalidDialogControlId;
    libUIUI_gv_deathRecap_Panel.lv_toastButtonDamageAmountLabel = c_invalidDialogControlId;
    libUIUI_gv_deathRecap_Panel.lv_toastButtonKilledByCutscene = c_invalidDialogControlId;
    libUIUI_gv_deathRecap_Panel.lv_mainGraphLabel = c_invalidDialogControlId;
    libUIUI_gv_deathRecap_Panel.lv_damageTakenPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_damageTakenPanelTimeZone[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_heroImages[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_lineGraphTooltips[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_healthBarTotalLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_healthBarAmountLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_effectAmountLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_healthBarTimeLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_lineGraphHealthChunk[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_healthBarIcons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_healthBarIconBorders[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_eventCountLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_healingBarImages[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_damageBarImages[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_deathRecap_Panel.lv_startingHealthLabels = c_invalidDialogControlId;
    libUIUI_gv_deathRecap_Panel.lv_startingHealthAxis = c_invalidDialogControlId;
    libUIUI_gv_deathRecap_Panel.lv_maxDamagersPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_maxDamagersImages[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_maxDamagersAmountLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_maxDamagersHeroNameLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_maxDamagersPlayerNameLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_maxDamagersProgressBars[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C; init_j1 += 1) {
            libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilityBars[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C; init_j1 += 1) {
            libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilityBarTooltips[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C; init_j1 += 1) {
            libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilityBarProgressBars[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C; init_j1 += 1) {
            libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilityLabels[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxMaxDamagersSort_C; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C; init_j1 += 1) {
            libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilAmountLabels[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libUIUI_gv_deathRecap_Panel.lv_abilitiesPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelTimeZone[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHeroImages[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBars[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealingBars[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelDamageBars[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBarIcons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBarIconBorders[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelEventCountLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelDamageBarAmountLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealingBarAmountLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBarTimeLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBarTimeZone[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelStartingHealthLabels = c_invalidDialogControlId;
    libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelGraphLabel = c_invalidDialogControlId;
    libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelStartingHealthAxis = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelDamageTooltip[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealingTooltip[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_deathRecap_Panel.lv_additionalInfoPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_additionalInfoHealthBar[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_additionalInfoDamageBar[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_additionalInfoTooltip[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_additionalInfoHealthPercentLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_additionalInfoHealthAmountLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= 14; init_i1 += 1) {
        libUIUI_gv_deathRecap_Panel.lv_lineGraphLineFrames[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_deathTimerPanel.lv_mainPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_deathTimerPanel.lv_timerBar[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_deathTimerPanel_MaxFrameCount; init_j1 += 1) {
            libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrame[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_deathTimerPanel_MaxFrameCount; init_j1 += 1) {
            libUIUI_gv_deathTimerPanel.lv_timerBarHeroFramePortraitImage[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_deathTimerPanel_MaxFrameCount; init_j1 += 1) {
            libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrameTimeLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_deathTimerPanel_MaxFrameCount; init_j1 += 1) {
            libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrameHeroNameLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_deathTimerPanel_MaxFrameCount; init_j1 += 1) {
            libUIUI_gv_deathTimerPanel.lv_timerBarDarkBargainBorder[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_deathTimerPanel_MaxFrameCount; init_j1 += 1) {
            libUIUI_gv_deathTimerPanel.lv_timerBarAurielResurrectProgressBar[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_deathTimerPanel_MaxFrameCount; init_j1 += 1) {
            libUIUI_gv_deathTimerPanel.lv_timerBarAurielResurrectLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_deathTimerPanel.lv_announcementPanel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_deathTimerPanel_MaxFrameCount; init_j1 += 1) {
            libUIUI_gv_deathTimerPanel.lv_announcementHeroFrame[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_deathTimerPanel_MaxFrameCount; init_j1 += 1) {
            libUIUI_gv_deathTimerPanel.lv_announcementHeroFrameNameLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_deathTimerPanel_MaxFrameCount; init_j1 += 1) {
            libUIUI_gv_deathTimerPanel.lv_announcementHeroFrameKillersLabel[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_deathTimerPanel_MaxFrameCount; init_j1 += 1) {
            libUIUI_gv_deathTimerPanel.lv_announcementHeroFramePortraitImage[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_deathTimerPanel_MaxFrameCount; init_j1 += 1) {
            libUIUI_gv_deathTimerPanel.lv_announcementHeroFrameBorderImageFaded[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_deathTimerPanel_MaxFrameCount; init_j1 += 1) {
            libUIUI_gv_deathTimerPanel.lv_announcementHeroFrameBorderImageBright[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        for (init_j1 = 0; init_j1 <= libUIUI_gv_deathTimerPanel_MaxFrameCount; init_j1 += 1) {
            libUIUI_gv_deathTimerPanel.lv_announcementHeroFrameCrossImage[init_i1][init_j1] = c_invalidDialogControlId;
        }
    }
    libUIUI_gv_deathTimerPanelIndex = 1;
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libUIUI_gv_deathAnnouncement_AnnouncementVisibleTimers[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libUIUI_gv_deathAnnouncement_TopMostHeroFrame[init_i] = 1;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libUIUI_gv_deathAnnouncement_NextHeroFrameToUse[init_i] = 1;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        for (init_j = 0; init_j <= libUIUI_gv_deathTimerPanel_MaxFrameCount; init_j += 1) {
            libUIUI_gv_deathAnnouncement_HeroesAssignedToFrame[init_i][init_j].lv_deathAnnouncementDeathTimer = TimerCreate();
        }
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        for (init_j = 0; init_j <= libUIUI_gv_deathTimerPanel_MaxFrameCount; init_j += 1) {
            libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[init_i][init_j].lv_deathTimerFrameDeathTimer = TimerCreate();
        }
    }
    libUIUI_gv_deathTimerPane_Enabled = true;
    libUIUI_gv_uIDebugPanelForcedMinionWaveCompIndex = 1;
    libUIUI_gv_uIDebugPanelFloatingCombatTextToggle = true;
    libUIUI_gv_uIDebugPanel.lv_mainDialog = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_closeButton = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_refreshCooldownsButton = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_selectionEnabledCheckbox = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_startGameButton = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_spawnCreepCampsButton = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_forceMinionWaveCompCheckbox = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_forceMinionWaveCompDropdown = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_disableMinionSpawningCheckbox = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_disableTrickleXPCheckbox = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_floatingCombatTextCheckbox = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_enableAllFloatingCombatTextCheckbox = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_respecHeroButton = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_playerLabel = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_playerSlider = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_levelLabel = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_levelSlider = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_useCurrentXPCheckbox = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_spawnHeroButton = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_allHeroesCheckbox = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_spawnAtCameraCheckbox = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_savedHeroCheckbox = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_allTalentsCheckbox = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_heroDropdown = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_skinDropdown = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_mountDropdown = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_mountVariationDropdown = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_metaXPEditBox = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_metaXPSendButton = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_xPLabel = c_invalidDialogControlId;
    libUIUI_gv_uIDebugPanel.lv_playerNumber = c_invalidDialogControlId;
    libUIUI_gv_EndofGameAwardsPanel.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_EndofGameAwardsPanel.lv_skipButton = c_invalidDialogControlId;
    libUIUI_gv_EndofGameAwardsPanel.lv_exitButton = c_invalidDialogControlId;
    libUIUI_gv_EndofGameAwardsPanel.lv_secondaryContainer = c_invalidDialogControlId;
    libUIUI_gv_EndofGameAwardsPanel.lv_secondaryCutscenesContainer = c_invalidDialogControlId;
    libUIUI_gv_EndofGameAwardsPanel.lv_mVPSecondaryPlayerName = c_invalidDialogControlId;
    libUIUI_gv_EndofGameAwardsPanel.lv_mVPSecondaryHeroName = c_invalidDialogControlId;
    libUIUI_gv_EndofGameAwardsPanel.lv_mVPSecondaryHeading = c_invalidDialogControlId;
    libUIUI_gv_EndofGameAwardsPanel.lv_mVPSecondarySeparatorImage_Blue = c_invalidDialogControlId;
    libUIUI_gv_EndofGameAwardsPanel.lv_mVPSecondarySeparatorImage_Red = c_invalidDialogControlId;
    libUIUI_gv_EndofGameAwardsPanel.lv_mVPSecondaryAwardIcon = c_invalidDialogControlId;
    libUIUI_gv_EndofGameAwardsPanel.lv_voterButton = c_invalidDialogControlId;
    libUIUI_gv_EndofGameAwardsPanel.lv_voterButtonLabel = c_invalidDialogControlId;
    libUIUI_gv_uIMVPWinnerPanel.lv_statsPanel = c_invalidDialogControlId;
    libUIUI_gv_uIMVPWinnerPanel.lv_mVPHeading = c_invalidDialogControlId;
    libUIUI_gv_uIMVPWinnerPanel.lv_heroNameLabel = c_invalidDialogControlId;
    libUIUI_gv_uIMVPWinnerPanel.lv_playerNameLabel = c_invalidDialogControlId;
    libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat1ValueLabel = c_invalidDialogControlId;
    libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat1NameLabel = c_invalidDialogControlId;
    libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat2ValueLabel = c_invalidDialogControlId;
    libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat2NameLabel = c_invalidDialogControlId;
    libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat3ValueLabel = c_invalidDialogControlId;
    libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat3NameLabel = c_invalidDialogControlId;
    libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat4ValueLabel = c_invalidDialogControlId;
    libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat4NameLabel = c_invalidDialogControlId;
    libUIUI_gv_uIMVPWinnerPanel.lv_killsLabel = c_invalidDialogControlId;
    libUIUI_gv_uIMVPWinnerPanel.lv_killsValueLabel = c_invalidDialogControlId;
    libUIUI_gv_uIMVPWinnerPanel.lv_assistsLabel = c_invalidDialogControlId;
    libUIUI_gv_uIMVPWinnerPanel.lv_assistsValueLabel = c_invalidDialogControlId;
    libUIUI_gv_uIMVPWinnerPanel.lv_deathsLabel = c_invalidDialogControlId;
    libUIUI_gv_uIMVPWinnerPanel.lv_deathsValueLabel = c_invalidDialogControlId;
    libUIUI_gv_uIMVPWinnerPanel.lv_separatorImage_B = c_invalidDialogControlId;
    libUIUI_gv_uIMVPWinnerPanel.lv_separatorImage_R = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 5; init_i += 1) {
        libUIUI_gv_uIMVPSecondaryPanels[init_i].lv_panelContainer = c_invalidDialogControlId;
        libUIUI_gv_uIMVPSecondaryPanels[init_i].lv_awardTitleLabel = c_invalidDialogControlId;
        libUIUI_gv_uIMVPSecondaryPanels[init_i].lv_awardStatLabel = c_invalidDialogControlId;
        libUIUI_gv_uIMVPSecondaryPanels[init_i].lv_awardTooltipHitbox = c_invalidDialogControlId;
        libUIUI_gv_uIMVPSecondaryPanels[init_i].lv_awardIcon = c_invalidDialogControlId;
        libUIUI_gv_uIMVPSecondaryPanels[init_i].lv_heroNameLabel = c_invalidDialogControlId;
        libUIUI_gv_uIMVPSecondaryPanels[init_i].lv_playerNameLabel = c_invalidDialogControlId;
        libUIUI_gv_uIMVPSecondaryPanels[init_i].lv_separatorImage_Blue = c_invalidDialogControlId;
        libUIUI_gv_uIMVPSecondaryPanels[init_i].lv_separatorImage_Red = c_invalidDialogControlId;
        libUIUI_gv_uIMVPSecondaryPanels[init_i].lv_heroCutscene = c_invalidDialogControlId;
        libUIUI_gv_uIMVPSecondaryPanels[init_i].lv_voterButton = c_invalidDialogControlId;
        libUIUI_gv_uIMVPSecondaryPanels[init_i].lv_voterButtonLabel = c_invalidDialogControlId;
    }
    libUIUI_gv_vignetteOverlayPanel.lv_mainDialog = c_invalidDialogControlId;
    libUIUI_gv_vignetteOverlayPanel.lv_overlayCutscene = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanelRework.lv_mainDialog = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[init_i] = TimerCreate();
    }
    libUIUI_gv_fullscreenOverlaysPanel.lv_mainDialog = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanel.lv_flashBangImage = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanel.lv_abathurSymbioteOverlay = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay = c_invalidDialogControlId;
    libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay = c_invalidDialogControlId;
    libUIUI_gv_gameOverSplash.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_gameOverSplash.lv_victoryFrame = c_invalidDialogControlId;
    libUIUI_gv_gameOverSplash.lv_defeatFrame = c_invalidDialogControlId;
    libUIUI_gv_gameOverSplash.lv_defeatLabel = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_fullscreenUpperContainer = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_consolePanel = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_talentsButton = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_gameMenuButton = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_minimapPanel = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_gameUIContainer = c_invalidDialogControlId;
    libUIUI_gv_uIGameUIHandles.lv_helpButton = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        for (init_j = 0; init_j <= libUIUI_gv_uI_HealingFountainsHelpText_ArraySize_C; init_j += 1) {
            libUIUI_gv_uIHealingFountainsHelpText[init_i][init_j].lv_textTag = c_textTagNone;
        }
    }
    libUIUI_gv_uIHealingFountainsHelpTextEnabled = true;
    for (init_i = 0; init_i <= libUIUI_gv_helpButtonMaxCount_C; init_i += 1) {
        libUIUI_gv_helpButtonFrames[init_i] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libUIUI_gv_helpButtonMaxCount_C; init_i += 1) {
        libUIUI_gv_helpButtonLabels[init_i] = c_invalidDialogControlId;
    }
    libUIUI_gv_uIHeroConsole.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_buffDebuffPanel = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_buffBar = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_debuffBar = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsFrame = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsHealthBar = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsManaBar = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsFuryStatFrame = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsBrewStatFrame = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsEnergyStatFrame = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_gameUIPortrait = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_gameUICommandCardPanelFrame = c_invalidDialogControlId;
    libUIUI_gv_uIHeroConsole.lv_gameUIInventoryPanel = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarLeftBar = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarRightBar = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarIcon = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarDescriptionLabel = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarTimeLabel = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_castChannelBarParentFrame = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrameRight = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarDurationBar = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarDurationBarRight = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabel = c_invalidDialogControlId;
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabelRight = c_invalidDialogControlId;
    libUIUI_gv_fullscreenStatusPanel = c_invalidDialogControlId;
    libUIUI_gv_heroSpecificStatusContainer = c_invalidDialogControlId;
    libUIUI_gv_heroSpecificFullUIModContainer = c_invalidDialogControlId;
    libUIUI_gv_useStatusFrames = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
            libUIUI_gv_uIHeroStatusFrames[init_i].lv_botDifficultyLabel[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
            libUIUI_gv_uIHeroStatusFrames[init_i].lv_botStatusLabel[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
            libUIUI_gv_uIHeroStatusFrames[init_i].lv_unitHealthBarResistant[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
            libUIUI_gv_uIHeroStatusFrames[init_i].lv_unitHealthBarVulnerable[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
            libUIUI_gv_uIHeroStatusFrames[init_i].lv_unitHealthBarDimmed[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
            libUIUI_gv_uIHeroStatusFrames[init_i].lv_unitHealthBarInvincible[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
            libUIUI_gv_uIHeroStatusFrames[init_i].lv_invulnerableImage[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
            libUIUI_gv_uIHeroStatusFrames[init_i].lv_resistantImage[init_i1] = c_invalidDialogControlId;
        }
        for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
            libUIUI_gv_uIHeroStatusFrames[init_i].lv_unstoppableImage[init_i1] = c_invalidDialogControlId;
        }
    }
    libUIUI_gv_uIHeroTrackerArrows.lv_mainPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
        libUIUI_gv_uIHeroTrackerArrows.lv_offscreenUnit[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
        libUIUI_gv_uIHeroTrackerArrows.lv_arrow[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
        libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
        libUIUI_gv_uIHeroTrackerArrows.lv_portraitImageOverride[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libUIUI_gv_uI_MaxHeroGroupStatusFrames; init_i1 += 1) {
        libUIUI_gv_uIHeroTrackerArrows.lv_portraitCutscene[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_killCounter_Panel.lv_mainPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_killCounter_NumberOfSkullPips_C; init_i1 += 1) {
        libUIUI_gv_killCounter_Panel.lv_skullPips[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnTimerLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeCounterLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayChestSpawnFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonModeFrame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonCounterLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayHeldDoubloonCounterLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonRemainingCannonballsLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libUIUI_gv_mapMechanicsBlackheartsBayCannonballCount_C; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonShotCounterLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeRemainingSkullsLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeSkullCounterLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineOpenLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesGolemModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemHealthUnitStatus = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemHealthUnitStatus = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemModeSkullCounterLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemModeSkullCounterLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShirePanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineModeFrame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineDisabledImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineDisabledImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonModeFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthUnitStatus = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrame = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayCountdownLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrame = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicHelpPanel.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicHelpPanel.lv_helpText = c_invalidDialogControlId;
    libUIUI_gv_mapMechanicHelpPanel.lv_closeButton = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_multikillTimerCountdownImage = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_multikillTimerTitleLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_multikillTimerNumberLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_standardNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_standardNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_enemyNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_enemyNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_tutorialNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_tutorialNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_doubleKillNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_doubleKillNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_tripleKillNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_tripleKillNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_quadKillNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_quadKillNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_MegaKillNotificationTitle = c_invalidDialogControlId;
    libUIUI_gv_notificationDisplay.lv_MegaKillNotificationSubLabel = c_invalidDialogControlId;
    libUIUI_gv_uIObserverUI.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_uIObserverUI.lv_topPanel = c_invalidDialogControlId;
    libUIUI_gv_uIObserverUI.lv_observerTimer = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIObserverUI.lv_heroPanels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIObserverUI.lv_heroPortraitImages[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIObserverUI.lv_heroTargetFrames[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIObserverUI.lv_heroStatusBars[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIObserverUI.lv_heroDeathTimeLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
        libUIUI_gv_uIObserverUI.lv_heroTopTalents[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIObserverUI.lv_teamTownsLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIObserverUI.lv_teamLevelLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_uIObserverUI.lv_coreHealthUnitStatusFrames[init_i1] = c_invalidDialogControlId;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libUIUI_gv_pingInputSuppressionTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libUIUI_gv_pingCountResetTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libUIUI_gv_pingLockoutTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libUIUI_gv_hearthPingTextLockoutTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libUIUI_gv_onMyWayPingPathDisplayTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libUIUI_gv_hearthStonePing[init_i] = c_invalidPingId;
    }
    for (init_i = 0; init_i <= libUIUI_gv_uI_PingTargetMaxCount_C; init_i += 1) {
        libUIUI_gv_ping_PingTargets[init_i].lv_heroVOLineAlliedTarget = libCore_ge_HeroVOEvents_Null;
        libUIUI_gv_ping_PingTargets[init_i].lv_heroVOLineEnemyTarget = libCore_ge_HeroVOEvents_Null;
        libUIUI_gv_ping_PingTargets[init_i].lv_heroVOLineHumanPingingPlayer = libCore_ge_HeroVOEvents_Null;
        libUIUI_gv_ping_PingTargets[init_i].lv_heroVOLineAIPingingPlayer = libCore_ge_HeroVOEvents_Null;
    }
    for (init_i = 0; init_i <= 10; init_i += 1) {
        libUIUI_gv_ping_PlayerHearth[init_i] = c_invalidPingId;
    }
    libUIUI_gv_uITabScreenPanel.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_uITabScreenPanel.lv_tabControl = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_unitName = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_playerName = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_level = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_portraitImage = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_unitTargetFrame = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_mapMechanicIcon = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_mapMechanicLabel = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_descriptionLabel = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_cursedBuildingIcon = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_healthAndManaUnitStatusStatusFrame = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_healthOnlyUnitStatusStatusFrame = c_invalidDialogControlId;
    libUIUI_gv_uITargetInfoPanel.lv_towerWithAmmoUnitStatusStatusFrame = c_invalidDialogControlId;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libUIUI_gv_uITargetInfoPanelCurretTargetStatusBarType[init_i] = libUIUI_ge_UITargetInfoPanelStatusBarTypes_Null;
    }
    libUIUI_gv_uITargetingHelperPanel.lv_mainPanel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_uITargetingHelperPanel.lv_heroFrames[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_uITargetingHelperPanel.lv_heroIcons[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_uITargetingHelperPanel.lv_heroBorderImages[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_uITargetingHelperPanel.lv_heroTargetFrames[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayersOnATeam; init_i1 += 1) {
        libUIUI_gv_uITargetingHelperPanel.lv_heroStatusFrames[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_topBarPanel.lv_mainPanel = c_invalidDialogControlId;
    libUIUI_gv_topBarPanel.lv_gameTimerLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_topBarPanel.lv_xPBackgroundBlue[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_topBarPanel.lv_xPBackgroundRed[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_topBarPanel.lv_xPUnitStatusFrame[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_topBarPanel.lv_xPVeterancyBar[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_topBarPanel.lv_levelLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_topBarPanel.lv_levelUpLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_topBarPanel.lv_coreHealthUnitStatusFrames[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_topBarPanel.lv_coreHealthLabel = c_invalidDialogControlId;
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_topBarPanel.lv_coreHealthPercentLabels[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_topBarPanel.lv_xPContributionPopup[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_topBarPanel.lv_heroXPContributionLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_topBarPanel.lv_mercenaryXPContributionLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_topBarPanel.lv_minionXPContributionLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_topBarPanel.lv_passiveXPContributionLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_topBarPanel.lv_structureXPContributionLabel[init_i1] = c_invalidDialogControlId;
    }
    for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
        libUIUI_gv_topBarPanel.lv_totalXPContributionLabel[init_i1] = c_invalidDialogControlId;
    }
    libUIUI_gv_tutorialReferenceShowHelp = c_invalidDialogControlId;
    libUIUI_gv_tutorialReferencePanel = c_invalidDialogControlId;
    libUIUI_gv_tutorialPanelHighlightFrame = c_invalidDialogControlId;
    for (init_i = 0; init_i <= 6; init_i += 1) {
        libUIUI_gv_tutorialReferenceLabels[init_i] = c_invalidDialogControlId;
    }
}

// Presets
// Functions
void libUIUI_gf_UISetDialogItemToSelectedOrObserved (int lp_dialogItem) {
    // Implementation
    DialogControlSetObservedType(lp_dialogItem, c_triggerObservedTypeSelectedOrObservedPlayerId);
    DialogControlSetVisible(lp_dialogItem, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlSetVisible(lp_dialogItem, libCore_gv_nPCPlayers, false);
}

trigger auto_libUIUI_gf_UIUpdateEventPlayerStatsChange_Trigger = null;
int auto_libUIUI_gf_UIUpdateEventPlayerStatsChange_lp_player;

void libUIUI_gf_UIUpdateEventPlayerStatsChange (int lp_player) {
    auto_libUIUI_gf_UIUpdateEventPlayerStatsChange_lp_player = lp_player;

    if (auto_libUIUI_gf_UIUpdateEventPlayerStatsChange_Trigger == null) {
        auto_libUIUI_gf_UIUpdateEventPlayerStatsChange_Trigger = TriggerCreate("auto_libUIUI_gf_UIUpdateEventPlayerStatsChange_TriggerFunc");
    }

    TriggerExecute(auto_libUIUI_gf_UIUpdateEventPlayerStatsChange_Trigger, false, false);
}

bool auto_libUIUI_gf_UIUpdateEventPlayerStatsChange_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libUIUI_gf_UIUpdateEventPlayerStatsChange_lp_player;

    // Variable Declarations
    int lv_itPlayer;
    unit lv_heroUnit;
    int lv_currentLevel;

    // Variable Initialization

    // Implementation
    if (((lp_player < 1) || (lp_player > libCore_gv_bALMaxPlayers))) {
        return true;
    }

    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    Wait(0.1875, c_timeGame);
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    libGame_gf_UpdateHeroWeaponStats(lv_heroUnit);
    return true;
}

void libUIUI_gf_UIUpdateTimeLabels () {
    // Variable Declarations
    text lv_timeLabelText;

    // Variable Initialization

    // Implementation
    if ((TimerGetRemaining(libGame_gv_openTheGatesTimer) > 0.0)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_60CC3C9D", "A", StringToText(StringSub(libCore_gf_GetTimeStamp(TimerGetRemaining(libGame_gv_openTheGatesTimer)), 1, 5)));
        lv_timeLabelText = TextExpressionAssemble("Param/Expression/lib_UIUI_60CC3C9D");
    }
    else {
        lv_timeLabelText = StringToText(StringSub(libCore_gf_GetTimeStamp((TimerGetElapsed(libGame_gv_gameTimer)+libSprt_gf_DebugGameTimeDelta()*60)), 1, 5));
    }
    libNtve_gf_SetDialogItemText(libUIUI_gv_topBarPanel.lv_gameTimerLabel, lv_timeLabelText, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIObserverUI.lv_observerTimer, lv_timeLabelText, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    TimerStart(libUIUI_gv_uITimeLabelUpdateTimer, 1.0, false, c_timeGame);
}

void libUIUI_gf_InitPathingLines (unit lp_unit, int lp_player) {
    // Implementation
    PathCreateForUnit(libCore_gv_playerGroupFromPlayer[lp_player], lp_unit);
    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilEffectInstant, c_abilClassFilterExcluded);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilEffectTarget, c_abilClassFilterExcluded);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilArmMagazine, c_abilClassFilterExcluded);
    PathSetAbilClassFilter(PathLastCreated(), c_classIdCAbilInventory, c_abilClassFilterExcluded);
    PathSetLineTexture(PathLastCreated(), c_pathLocationMinimap, "Assets\\Textures\\storm_waypointline.dds");
    PathSetMinimumStepCount(PathLastCreated(), 0);
    PathSetMinimumTravelDistance(PathLastCreated(), 3.0);
    PathSetMinimumLinearDistance(PathLastCreated(), 3.0);
    PathSetLineTexture(PathLastCreated(), c_pathLocationWorld, "Assets\\Textures\\storm_waypointline_game.dds");
    PathSetLineTileLength(PathLastCreated(), c_pathLocationWorld, 0.8);
    libGame_gv_players[lp_player].lv_pathDisplay = PathLastCreated();
}

void libUIUI_gf_UIDamageFlashStartLowHPSoundAndScreenEffects (int lp_player) {
    // Implementation
    if ((libGame_gv_players[lp_player].lv_lowHPSoundPlaying == false)) {
        DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lowHealthPersistentImage, libCore_gv_playerGroupFromPlayer[EventPlayer()], 0.0, 50.0);
        libGame_gv_players[lp_player].lv_lowHPSoundPlaying = true;
        TriggerEnable(libUIUI_gt_UIDamageFlashLowHPSoundsLooper, true);
        if ((libGame_gv_players[lp_player].lv_lowHPStartSound == null)) {
            SoundPlayForPlayer(SoundLink("UI_LowHealth_Warning_Start", -1), lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
            libGame_gv_players[lp_player].lv_lowHPStartSound = SoundLastPlayed();
        }

        if ((libGame_gv_players[lp_player].lv_lowHPBreathLoop == null)) {
            SoundPlayForPlayer(SoundLink("UI_LowHealthWarning_Breath_Loop", -1), lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
            libGame_gv_players[lp_player].lv_lowHPBreathLoop = SoundLastPlayed();
        }

        if ((libGame_gv_players[lp_player].lv_lowHPHeartBeatLoop == null)) {
            SoundPlayForPlayer(SoundLink("UI_LowHealthWarning_HeartBeat_Loop", -1), lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
            libGame_gv_players[lp_player].lv_lowHPHeartBeatLoop = SoundLastPlayed();
        }

    }

}

void libUIUI_gf_UIDamageFlashStopLowHPSoundAndScreenEffects (int lp_player) {
    // Implementation
    libGame_gv_players[lp_player].lv_lowHPSoundPlaying = false;
    DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lowHealthPersistentImage, libCore_gv_playerGroupFromPlayer[lp_player], 0.625, 100.0);
    if ((libGame_gv_players[lp_player].lv_lowHPStartSound != null)) {
        SoundStop(libGame_gv_players[lp_player].lv_lowHPStartSound, true);
        libGame_gv_players[lp_player].lv_lowHPStartSound = null;
    }

    if ((libGame_gv_players[lp_player].lv_lowHPBreathLoop != null)) {
        SoundStop(libGame_gv_players[lp_player].lv_lowHPBreathLoop, true);
        libGame_gv_players[lp_player].lv_lowHPBreathLoop = null;
    }

    if ((libGame_gv_players[lp_player].lv_lowHPHeartBeatLoop != null)) {
        SoundStop(libGame_gv_players[lp_player].lv_lowHPHeartBeatLoop, true);
        libGame_gv_players[lp_player].lv_lowHPHeartBeatLoop = null;
    }

}

void libUIUI_gf_UILowHPSetSoundChannelsForLowHealth (int lp_player) {
    // Implementation
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryAlert, 0.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryAmbient, 25.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryBuild, 25.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryCombat, 60.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryDeath, 100.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryDialogue, 100.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryDoodad, 25.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryFlames, 25.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryFoley, 100.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryGather, 25.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryME, 100.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryMission, 100.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryMovement, 35.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryMovie, 100.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryMusic, 80.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryOther, 100.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryReady, 25.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategorySAmbient, 70.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategorySEmitters, 100.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategorySPieces, 70.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategorySpell, 60.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryTV, 100.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryUI, 70.0, 2.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryVoice, 100.0, 2.0);
}

void libUIUI_gf_UILowHPSetSoundChannelsForSilence (int lp_player) {
    // Implementation
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryAlert, 30.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryAmbient, 30.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryBuild, 30.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryCombat, 30.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryDeath, 30.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryDialogue, 30.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryDoodad, 30.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryFlames, 30.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryFoley, 30.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryGather, 30.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryME, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryMission, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryMovement, 30.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryMovie, 30.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryMusic, 30.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryOther, 30.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryReady, 30.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategorySAmbient, 30.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategorySEmitters, 30.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategorySPieces, 30.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategorySpell, 30.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryTV, 30.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryUI, 100.0, 1.0);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryVoice, 30.0, 1.0);
}

void libUIUI_gf_UILowHPSetSoundChannelsForNormal (int lp_player) {
    // Implementation
    libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, PlayerGroupSingle(lp_player), 1.5);
    SoundChannelSetVolume(PlayerGroupSingle(lp_player), c_soundCategoryVoice, 100.0, 1.0);
}

void libUIUI_gf_DeathRecapShowHideForPlayer (bool lp_showHide, int lp_player) {
    // Implementation
    if ((libCore_gv_dEBUGDeathRecapEnabled == false)) {
        return ;
    }

    DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
}

void libUIUI_gf_DeathRecapShowHideToastButtonForPlayer (bool lp_showHide, int lp_player) {
    // Implementation
    if ((libCore_gv_dEBUGDeathRecapEnabled == false)) {
        return ;
    }

    if ((libCore_gv_sYSGameMode != libCore_ge_GameModes_Normal) && (libCore_gv_sYSGameMode != libCore_ge_GameModes_Sandbox) && (libCore_gv_sYSGameMode != libCore_ge_GameModes_Test) && (libCore_gv_sYSGameMode != libCore_ge_GameModes_ArenaMode)) {
        return ;
    }

    if ((lp_showHide == true)) {
        DialogControlSendAnimationEvent(libUIUI_gv_deathRecap_Panel.lv_toastButton, libCore_gv_playerGroupFromPlayer[lp_player], "Begin");
        DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_toastButton, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        TimerStart(libGame_gv_players[lp_player].lv_deathToastTimer, libGame_gv_heroDeathToastDisplayTime, false, c_timeGame);
    }
    else {
        DialogControlSendAnimationEvent(libUIUI_gv_deathRecap_Panel.lv_toastButton, libCore_gv_playerGroupFromPlayer[lp_player], "End");
        libNtve_gf_StopTimer(libGame_gv_players[lp_player].lv_deathToastTimer);
    }
}

text libUIUI_gf_DeathRecapCreateTooltipText (int lp_deadPlayer, int lp_effectIndex) {
    // Variable Declarations
    int lv_effectAmount;
    int lv_effectOverkill;
    int lv_effectShielded;
    text lv_effectorText;
    text lv_typeText;
    text lv_targetText;
    text lv_abilityText;
    text lv_abilityTooltipText;
    text lv_shieldAmountText;
    text lv_damageAmountText;
    text lv_finalText;

    // Variable Initialization

    // Implementation
    lv_effectAmount = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_amount;
    lv_effectShielded = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_amountShielded;
    lv_effectOverkill = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_amountOverkill;
    if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_isHeal == true)) {
        lv_typeText = TextExpressionAssemble("Param/Expression/lib_UIUI_03F11D4B");
        TextExpressionSetToken("Param/Expression/lib_UIUI_F25B340E", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_button, "Name", c_playerAny)));
        lv_abilityText = TextExpressionAssemble("Param/Expression/lib_UIUI_F25B340E");
        TextExpressionSetToken("Param/Expression/lib_UIUI_52A85BB5", "A", IntToText(lv_effectAmount));
        lv_damageAmountText = TextExpressionAssemble("Param/Expression/lib_UIUI_52A85BB5");
    }
    else {
        if ((lp_effectIndex == 1)) {
            lv_typeText = TextExpressionAssemble("Param/Expression/lib_UIUI_C4C12B11");
            TextExpressionSetToken("Param/Expression/lib_UIUI_806B89A6", "A", IntToText(lv_effectAmount));
            TextExpressionSetToken("Param/Expression/lib_UIUI_806B89A6", "B", IntToText(lv_effectOverkill));
            lv_damageAmountText = TextExpressionAssemble("Param/Expression/lib_UIUI_806B89A6");
        }
        else {
            lv_typeText = TextExpressionAssemble("Param/Expression/lib_UIUI_1520776E");
            TextExpressionSetToken("Param/Expression/lib_UIUI_5B069609", "A", IntToText(lv_effectAmount));
            lv_damageAmountText = TextExpressionAssemble("Param/Expression/lib_UIUI_5B069609");
        }
        if ((lv_effectShielded > 0)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_2509F0BC", "A", IntToText(lv_effectShielded));
            lv_shieldAmountText = TextExpressionAssemble("Param/Expression/lib_UIUI_2509F0BC");
            TextExpressionSetToken("Param/Expression/lib_UIUI_D308E530", "A", lv_damageAmountText);
            TextExpressionSetToken("Param/Expression/lib_UIUI_D308E530", "B", lv_shieldAmountText);
            lv_damageAmountText = TextExpressionAssemble("Param/Expression/lib_UIUI_D308E530");
        }
        else {
            lv_shieldAmountText = StringToText("");
        }
        TextExpressionSetToken("Param/Expression/lib_UIUI_6AB2C91A", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_button, "Name", c_playerAny)));
        lv_abilityText = TextExpressionAssemble("Param/Expression/lib_UIUI_6AB2C91A");
    }
    if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_nPCSource == true)) {
        if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_structureSource == true)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_99A4161D", "A", StringExternal("Param/Value/lib_UIUI_0D8A82E4"));
            lv_effectorText = TextExpressionAssemble("Param/Expression/lib_UIUI_99A4161D");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_BBF3D3E4", "A", StringExternal("Param/Value/lib_UIUI_2AF37115"));
            lv_effectorText = TextExpressionAssemble("Param/Expression/lib_UIUI_BBF3D3E4");
        }
        lv_abilityText = StringToText("");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_UIUI_2CE4ED13", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_unitType, "Name", c_playerAny)));
        lv_effectorText = TextExpressionAssemble("Param/Expression/lib_UIUI_2CE4ED13");
    }
    if ((lp_deadPlayer == libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_effectPlayer)) {
        lv_effectorText = StringExternal("Param/Value/lib_UIUI_30585659");
        lv_targetText = StringExternal("Param/Value/lib_UIUI_9D586112");
    }
    else {
        lv_targetText = StringExternal("Param/Value/lib_UIUI_559B7974");
    }
    TextExpressionSetToken("Param/Expression/lib_UIUI_36B30952", "A", lv_effectorText);
    TextExpressionSetToken("Param/Expression/lib_UIUI_36B30952", "B", lv_typeText);
    TextExpressionSetToken("Param/Expression/lib_UIUI_36B30952", "C", lv_targetText);
    TextExpressionSetToken("Param/Expression/lib_UIUI_36B30952", "D", lv_abilityText);
    TextExpressionSetToken("Param/Expression/lib_UIUI_36B30952", "E", lv_damageAmountText);
    lv_finalText = TextExpressionAssemble("Param/Expression/lib_UIUI_36B30952");
    return lv_finalText;
}

text libUIUI_gf_DeathRecapCreateTooltipTextNoSentance (int lp_deadPlayer, int lp_effectIndex) {
    // Variable Declarations
    int lv_effectAmount;
    int lv_effectOverkill;
    int lv_effectShielded;
    text lv_effectorText;
    text lv_abilityText;
    text lv_abilityTooltipText;
    text lv_shieldAmountText;
    text lv_damageAmountText;
    text lv_simpleTooltip;
    text lv_finalText;

    // Variable Initialization

    // Implementation
    lv_effectAmount = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_amount;
    lv_effectShielded = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_amountShielded;
    lv_effectOverkill = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_amountOverkill;
    TextExpressionSetToken("Param/Expression/lib_UIUI_140BB2E3", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_button, "SimpleDisplayText", c_playerAny)));
    lv_simpleTooltip = TextExpressionAssemble("Param/Expression/lib_UIUI_140BB2E3");
    if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_isHeal == true)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_9535BBC2", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_button, "Name", c_playerAny)));
        lv_abilityText = TextExpressionAssemble("Param/Expression/lib_UIUI_9535BBC2");
        TextExpressionSetToken("Param/Expression/lib_UIUI_F3D6E61E", "A", IntToText(lv_effectAmount));
        lv_damageAmountText = TextExpressionAssemble("Param/Expression/lib_UIUI_F3D6E61E");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_UIUI_BF8AD33D", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_button, "Name", c_playerAny)));
        lv_abilityText = TextExpressionAssemble("Param/Expression/lib_UIUI_BF8AD33D");
        if ((lp_effectIndex == 1)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_A411DA4A", "A", IntToText(lv_effectAmount));
            TextExpressionSetToken("Param/Expression/lib_UIUI_A411DA4A", "B", IntToText(lv_effectOverkill));
            lv_damageAmountText = TextExpressionAssemble("Param/Expression/lib_UIUI_A411DA4A");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_8B91F9BD", "A", IntToText(lv_effectAmount));
            lv_damageAmountText = TextExpressionAssemble("Param/Expression/lib_UIUI_8B91F9BD");
        }
        if ((lv_effectShielded > 0)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_38359851", "A", IntToText(lv_effectShielded));
            lv_shieldAmountText = TextExpressionAssemble("Param/Expression/lib_UIUI_38359851");
            TextExpressionSetToken("Param/Expression/lib_UIUI_2E90B459", "A", lv_damageAmountText);
            TextExpressionSetToken("Param/Expression/lib_UIUI_2E90B459", "B", lv_shieldAmountText);
            lv_damageAmountText = TextExpressionAssemble("Param/Expression/lib_UIUI_2E90B459");
        }

    }
    TextExpressionSetToken("Param/Expression/lib_UIUI_FC183A9D", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_unitType, "Name", c_playerAny)));
    lv_effectorText = TextExpressionAssemble("Param/Expression/lib_UIUI_FC183A9D");
    if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_nPCSource == true)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_ECCD8936", "A", lv_effectorText);
        TextExpressionSetToken("Param/Expression/lib_UIUI_ECCD8936", "D", lv_abilityText);
        TextExpressionSetToken("Param/Expression/lib_UIUI_ECCD8936", "E", lv_damageAmountText);
        TextExpressionSetToken("Param/Expression/lib_UIUI_ECCD8936", "F", lv_simpleTooltip);
        lv_finalText = TextExpressionAssemble("Param/Expression/lib_UIUI_ECCD8936");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_UIUI_AD066F2B", "A", lv_effectorText);
        TextExpressionSetToken("Param/Expression/lib_UIUI_AD066F2B", "D", lv_abilityText);
        TextExpressionSetToken("Param/Expression/lib_UIUI_AD066F2B", "E", lv_damageAmountText);
        TextExpressionSetToken("Param/Expression/lib_UIUI_AD066F2B", "F", lv_simpleTooltip);
        lv_finalText = TextExpressionAssemble("Param/Expression/lib_UIUI_AD066F2B");
    }
    return lv_finalText;
}

text libUIUI_gf_DeathRecapCreateAmountPercentText (int lp_deadPlayer, int lp_effectIndex) {
    // Variable Declarations
    int lv_effectAmountPercent;
    text lv_finalText;
    text lv_lessThanText;

    // Variable Initialization
    lv_lessThanText = StringToText("");

    // Implementation
    lv_effectAmountPercent = FixedToInt((IntToFixed(libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_amount) / IntToFixed(libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroMaxHealth) * 100));
    if ((lv_effectAmountPercent == 0)) {
        lv_effectAmountPercent = 1;
        lv_lessThanText = StringExternal("Param/Value/lib_UIUI_47492B5D");
    }

    if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_effectIndex].lv_isHeal == true)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_8CA07688", "B", lv_lessThanText);
        TextExpressionSetToken("Param/Expression/lib_UIUI_8CA07688", "A", IntToText(lv_effectAmountPercent));
        lv_finalText = TextExpressionAssemble("Param/Expression/lib_UIUI_8CA07688");
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_UIUI_44A30517", "B", lv_lessThanText);
        TextExpressionSetToken("Param/Expression/lib_UIUI_44A30517", "A", IntToText(lv_effectAmountPercent));
        lv_finalText = TextExpressionAssemble("Param/Expression/lib_UIUI_44A30517");
    }
    return lv_finalText;
}

void libUIUI_gf_DeathRecapHideUIElementsForEffectInstance (int lp_player, int lp_effectInstance) {
    // Implementation
    DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_lineGraphHealthChunk[lp_effectInstance], libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_lineGraphLineFrames[(lp_effectInstance - 1)], libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_damageTakenPanelTimeZone[lp_effectInstance], libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelDamageBars[lp_effectInstance], libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelEventCountLabels[lp_effectInstance], libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealingBars[lp_effectInstance], libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelDamageBarAmountLabels[lp_effectInstance], libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBarIconBorders[lp_effectInstance], libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBarIcons[lp_effectInstance], libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBarTimeLabels[lp_effectInstance], libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHeroImages[lp_effectInstance], libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelTimeZone[lp_effectInstance], libCore_gv_playerGroupFromPlayer[lp_player], false);
}

void libUIUI_gf_DeathRecapPopulateEffectInstancesForAbilitiesPanel (int lp_deadPlayer) {
    int auto991D4F48_ae;
    int auto991D4F48_ai;
    int auto0C063707_ae;
    int auto0C063707_ai;
    int auto5205215B_ae;
    int auto5205215B_ai;
    int auto827F5089_ae;
    int auto827F5089_ai;
    int auto1087E968_ae;
    int auto1087E968_ai;

    // Variable Declarations
    int lv_effectBarSize;
    int lv_healthBarSize;
    int lv_axisBarSize;
    int lv_highestEffectAmount;
    int lv_highestHealthPercent;
    int lv_thirtyPercentHealth;
    int lv_itEffect;
    int lv_totalDamage;
    text lv_effectTooltipText;
    text lv_effectAmountText;

    // Variable Initialization

    // Implementation
    if ((libCore_gv_dEBUGDeathRecapEnabled == false)) {
        return ;
    }

    DialogControlSetEnabled(libUIUI_gv_deathRecap_Panel.lv_tabScreenButton, libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
    if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroHighestHealth <= 0)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_D98CF21D", "A", IntToText(lp_deadPlayer));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_UIUI_D98CF21D"), true);
        return ;
    }

    lv_axisBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C * libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroStartHealth / libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroHighestHealth);
    auto991D4F48_ae = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBarCount;
    auto991D4F48_ai = 1;
    lv_itEffect = 1;
    for ( ; ( (auto991D4F48_ai >= 0 && lv_itEffect <= auto991D4F48_ae) || (auto991D4F48_ai <= 0 && lv_itEffect >= auto991D4F48_ae) ) ; lv_itEffect += auto991D4F48_ai ) {
        if ((lv_highestEffectAmount < libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount)) {
            lv_highestEffectAmount = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount;
        }

        if ((lv_highestEffectAmount < libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount)) {
            lv_highestEffectAmount = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount;
        }

    }
    lv_highestHealthPercent = FixedToInt((IntToFixed(libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroHighestHealth) / IntToFixed(libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroMaxHealth) * 100));
    if ((lv_highestHealthPercent <= libUIUI_gv_deathRecap_MaxPercentLifeReference_C)) {
        lv_thirtyPercentHealth = FixedToInt((IntToFixed(libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroMaxHealth) * .3));
        libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelStartingHealthLabels, IntToText(libUIUI_gv_deathRecap_MaxPercentLifeReference_C), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        auto5205215B_ae = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBarCount;
        auto5205215B_ai = 1;
        lv_itEffect = 1;
        for ( ; ( (auto5205215B_ai >= 0 && lv_itEffect <= auto5205215B_ae) || (auto5205215B_ai <= 0 && lv_itEffect >= auto5205215B_ae) ) ; lv_itEffect += auto5205215B_ai ) {
            lv_effectBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C * libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount / lv_thirtyPercentHealth);
            lv_healthBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C * libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_postEffectHealth / lv_thirtyPercentHealth);
            DialogControlSetSize(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_healthBarSize);
            DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
            if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_isHeal == true)) {
                lv_effectBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C * libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount / lv_thirtyPercentHealth);
                lv_healthBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C * (libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_postEffectHealth - libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount) / lv_thirtyPercentHealth);
                DialogControlSetSize(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealingBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_effectBarSize);
                DialogControlSetSize(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_healthBarSize);
                DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelDamageBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
                DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealingBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
                DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
            }
            else {
                lv_totalDamage = (lv_totalDamage + libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount);
                if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_combinedNumOfEvents > 1)) {
                    lv_effectBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C * libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount / lv_thirtyPercentHealth);
                }

                DialogControlSetSize(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelDamageBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_effectBarSize);
                DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelDamageBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
                DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealingBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
            }
        }
    }
    else {
        libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelStartingHealthLabels, IntToText(lv_highestHealthPercent), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        auto0C063707_ae = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBarCount;
        auto0C063707_ai = 1;
        lv_itEffect = 1;
        for ( ; ( (auto0C063707_ai >= 0 && lv_itEffect <= auto0C063707_ae) || (auto0C063707_ai <= 0 && lv_itEffect >= auto0C063707_ae) ) ; lv_itEffect += auto0C063707_ai ) {
            lv_effectBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C * libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount / libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroHighestHealth);
            if ((lv_effectBarSize <= 1)) {
                lv_effectBarSize = 2;
            }

            lv_healthBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C * libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_postEffectHealth / libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroHighestHealth);
            DialogControlSetSize(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_healthBarSize);
            DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
            if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_isHeal == true)) {
                lv_effectBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C * libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount / libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroHighestHealth);
                lv_healthBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C * (libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_postEffectHealth - libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount) / libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroHighestHealth);
                DialogControlSetSize(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealingBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_effectBarSize);
                DialogControlSetSize(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_healthBarSize);
                DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelDamageBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
                DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealingBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
                DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
            }
            else {
                lv_totalDamage = (lv_totalDamage + libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount);
                if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_combinedNumOfEvents > 1)) {
                    lv_effectBarSize = (libUIUI_gv_deathRecap_TotalEffectBarHeight_C * libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount / libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroHighestHealth);
                }

                DialogControlSetSize(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelDamageBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libUIUI_gv_deathRecap_DamageTakenPanelBarWidth_C, lv_effectBarSize);
                DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelDamageBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
                DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealingBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
            }
        }
    }
    auto827F5089_ae = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBarCount;
    auto827F5089_ai = 1;
    lv_itEffect = 1;
    for ( ; ( (auto827F5089_ai >= 0 && lv_itEffect <= auto827F5089_ae) || (auto827F5089_ai <= 0 && lv_itEffect >= auto827F5089_ae) ) ; lv_itEffect += auto827F5089_ai ) {
        lv_effectTooltipText = libUIUI_gf_DeathRecapCreateTooltipTextNoSentance(lp_deadPlayer, lv_itEffect);
        libNtve_gf_SetDialogItemImage(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBarIcons[lv_itEffect], (CatalogFieldValueGet(c_gameCatalogButton, libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_button, "Icon", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBarIconBorders[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
        DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBarIcons[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
        if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_nPCSource == true)) {
            if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_structureSource == true)) {
                libNtve_gf_SetDialogItemImage(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHeroImages[lv_itEffect], "Assets\\Textures\\storm_ui_icon_deathrecap_npc_structure.dds", libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
            }
            else {
                libNtve_gf_SetDialogItemImage(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHeroImages[lv_itEffect], "Assets\\Textures\\storm_ui_icon_deathrecap_npc_unit.dds", libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
            }
        }
        else {
            libNtve_gf_SetDialogItemImage(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHeroImages[lv_itEffect], (CatalogFieldValueGet(c_gameCatalogHero, libGame_gv_players[libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_effectPlayer].lv_heroData.lv_heroCatalogLink, "Portrait", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        }
        if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_isHeal == true)) {
            libNtve_gf_SetDialogItemTooltip(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealingTooltip[lv_itEffect], lv_effectTooltipText, libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        }
        else {
            libNtve_gf_SetDialogItemTooltip(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelDamageTooltip[lv_itEffect], lv_effectTooltipText, libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        }
        if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_isHeal == true)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_D506FAA1", "A", FixedToText((IntToFixed(libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount) / libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroHighestHealth * 100), 0));
            libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealingBarAmountLabels[lv_itEffect], TextExpressionAssemble("Param/Expression/lib_UIUI_D506FAA1"), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_D1B543B3", "A", FixedToText((IntToFixed(libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amountAttempted) / libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroHighestHealth * 100), 0));
            libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelDamageBarAmountLabels[lv_itEffect], TextExpressionAssemble("Param/Expression/lib_UIUI_D1B543B3"), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        }
        if ((lv_itEffect == 1)) {
            DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBarTimeLabels[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
            DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelDamageBarAmountLabels[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
            DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBars[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_A2B12AB3", "A", FixedToText(libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_time, 1));
            libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBarTimeLabels[lv_itEffect], TextExpressionAssemble("Param/Expression/lib_UIUI_A2B12AB3"), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
            DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBarTimeLabels[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
        }
        if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_combinedNumOfEvents > 1)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_D7C803DA", "A", IntToText(libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_combinedNumOfEvents));
            libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelEventCountLabels[lv_itEffect], TextExpressionAssemble("Param/Expression/lib_UIUI_D7C803DA"), PlayerGroupAll());
            DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelEventCountLabels[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
        }
        else {
            DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelEventCountLabels[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
        }
        DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHeroImages[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
        DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelTimeZone[lv_itEffect], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
    }
    TextExpressionSetToken("Param/Expression/lib_UIUI_C622E95B", "A", IntToText(lv_totalDamage));
    TextExpressionSetToken("Param/Expression/lib_UIUI_C622E95B", "B", FixedToText(libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBarCount].lv_time, 1));
    libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecap_Panel.lv_mainGraphLabel, TextExpressionAssemble("Param/Expression/lib_UIUI_C622E95B"), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
    auto1087E968_ae = libGame_gv_deathRecap_MaxEffectBars_C;
    auto1087E968_ai = 1;
    lv_itEffect = (libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBarCount + 1);
    for ( ; ( (auto1087E968_ai >= 0 && lv_itEffect <= auto1087E968_ae) || (auto1087E968_ai <= 0 && lv_itEffect >= auto1087E968_ae) ) ; lv_itEffect += auto1087E968_ai ) {
        libUIUI_gf_DeathRecapHideUIElementsForEffectInstance(lp_deadPlayer, lv_itEffect);
    }
}

void libUIUI_gf_DeathRecapPopulateMaxDamagersForPlayer (int lp_deadPlayer) {
    int autoD5AC74C9_ae;
    int autoD5AC74C9_ai;
    int auto7386FB46_ae;
    int auto7386FB46_ai;
    int auto152FC40A_ae;
    int auto152FC40A_ai;
    int autoBA56B0FA_ae;
    int autoBA56B0FA_ai;
    int autoBB1264A7_ae;
    int autoBB1264A7_ai;

    // Variable Declarations
    int lv_itMaxDamager;
    int lv_itMaxDamagerAbilities;
    int lv_itEffect;
    int lv_totalDamage;
    int lv_maxDamagerPercent;
    string lv_maxDamagerButton;
    text lv_simpleTooltip;

    // Variable Initialization

    // Implementation
    if ((libCore_gv_dEBUGDeathRecapEnabled == false)) {
        return ;
    }

    autoD5AC74C9_ae = libGame_gv_deathRecap_MaxEffectBars_C;
    autoD5AC74C9_ai = 1;
    lv_itEffect = 1;
    for ( ; ( (autoD5AC74C9_ai >= 0 && lv_itEffect <= autoD5AC74C9_ae) || (autoD5AC74C9_ai <= 0 && lv_itEffect >= autoD5AC74C9_ae) ) ; lv_itEffect += autoD5AC74C9_ai ) {
        if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_isHeal == false)) {
            lv_totalDamage = (lv_totalDamage + libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount);
        }

    }
    lv_maxDamagerPercent = ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_amount / lv_totalDamage) * 100);
    auto7386FB46_ae = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagersCount;
    auto7386FB46_ai = 1;
    lv_itMaxDamager = 1;
    for ( ; ( (auto7386FB46_ai >= 0 && lv_itMaxDamager <= auto7386FB46_ae) || (auto7386FB46_ai <= 0 && lv_itMaxDamager >= auto7386FB46_ae) ) ; lv_itMaxDamager += auto7386FB46_ai ) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecap_Panel.lv_maxDamagersAmountLabels[lv_itMaxDamager], FixedToText((IntToFixed(libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_amount) / IntToFixed(lv_totalDamage) * 100), 0), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        libNtve_gf_SetDialogItemCurrentValue(libUIUI_gv_deathRecap_Panel.lv_maxDamagersProgressBars[lv_itMaxDamager], (IntToFixed(libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_amount) / IntToFixed(lv_totalDamage) * 100), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_player >= 1) && (libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_player <= libCore_gv_bALMaxPlayers)) {
            libNtve_gf_SetDialogItemImage(libUIUI_gv_deathRecap_Panel.lv_maxDamagersImages[lv_itMaxDamager], (CatalogFieldValueGet(c_gameCatalogHero, libGame_gv_players[libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_player].lv_heroData.lv_heroCatalogLink, "SelectScreenButtonImage", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
            if ((PlayerType(libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_player) == c_playerTypeUser)) {
                libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecap_Panel.lv_maxDamagersPlayerNameLabels[lv_itMaxDamager], PlayerName(libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_player), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
                DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_maxDamagersPlayerNameLabels[lv_itMaxDamager], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
                if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_heroIndex == libCore_gf_GetIndexFromHero("LostVikings"))) {
                    libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecap_Panel.lv_maxDamagersHeroNameLabels[lv_itMaxDamager], StringExternal("Hero/Name/LostVikings"), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
                }
                else {
                    libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecap_Panel.lv_maxDamagersHeroNameLabels[lv_itMaxDamager], UnitTypeGetName(UnitGetType(libGame_gv_players[libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_player].lv_heroUnit)), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
                }
            }
            else {
                if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_heroIndex == libCore_gf_GetIndexFromHero("LostVikings"))) {
                    libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecap_Panel.lv_maxDamagersHeroNameLabels[lv_itMaxDamager], StringExternal("Hero/Name/LostVikings"), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
                }
                else {
                    libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecap_Panel.lv_maxDamagersHeroNameLabels[lv_itMaxDamager], UnitTypeGetName(UnitGetType(libGame_gv_players[libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_player].lv_heroUnit)), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
                }
            }
        }
        else {
            libNtve_gf_SetDialogItemImage(libUIUI_gv_deathRecap_Panel.lv_maxDamagersImages[lv_itMaxDamager], "Assets\\Textures\\storm_ui_icon_deathrecap_npc_unit.dds", libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecap_Panel.lv_maxDamagersHeroNameLabels[lv_itMaxDamager], StringExternal("Param/Value/lib_UIUI_86B48C2D"), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
            DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_maxDamagersPlayerNameLabels[lv_itMaxDamager], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
        }
        DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_maxDamagersAmountLabels[lv_itMaxDamager], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
        DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_maxDamagersImages[lv_itMaxDamager], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
        DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_maxDamagersHeroNameLabels[lv_itMaxDamager], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
        DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_maxDamagersProgressBars[lv_itMaxDamager], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
        auto152FC40A_ae = libGame_gv_deathRecap_MaxMaxDamageAbils_C;
        auto152FC40A_ai = 1;
        lv_itMaxDamagerAbilities = 1;
        for ( ; ( (auto152FC40A_ai >= 0 && lv_itMaxDamagerAbilities <= auto152FC40A_ae) || (auto152FC40A_ai <= 0 && lv_itMaxDamagerAbilities >= auto152FC40A_ae) ) ; lv_itMaxDamagerAbilities += auto152FC40A_ai ) {
            if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_maxDamageAbils[lv_itMaxDamagerAbilities].lv_amount > 0)) {
                lv_maxDamagerButton = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_maxDamageAbils[lv_itMaxDamagerAbilities].lv_abil;
                TextExpressionSetToken("Param/Expression/lib_UIUI_DC8BCCF5", "A", StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_maxDamagerButton, "SimpleDisplayText", c_playerAny)));
                lv_simpleTooltip = TextExpressionAssemble("Param/Expression/lib_UIUI_DC8BCCF5");
                libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilityLabels[lv_itMaxDamager][lv_itMaxDamagerAbilities], StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lv_maxDamagerButton, "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
                libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilAmountLabels[lv_itMaxDamager][lv_itMaxDamagerAbilities], IntToText(libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_maxDamageAbils[lv_itMaxDamagerAbilities].lv_amount), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
                DialogControlSetSize(libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilityBarProgressBars[lv_itMaxDamager][lv_itMaxDamagerAbilities], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], FixedToInt((IntToFixed(libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_maxDamageAbils[lv_itMaxDamagerAbilities].lv_amount) / IntToFixed(libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_amount) * 248)), 24);
                libNtve_gf_SetDialogItemTooltip(libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilityBarTooltips[lv_itMaxDamager][lv_itMaxDamagerAbilities], lv_simpleTooltip, libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
                DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilityLabels[lv_itMaxDamager][lv_itMaxDamagerAbilities], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
                DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilAmountLabels[lv_itMaxDamager][lv_itMaxDamagerAbilities], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
                DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilityBars[lv_itMaxDamager][lv_itMaxDamagerAbilities], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
                DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilityBarTooltips[lv_itMaxDamager][lv_itMaxDamagerAbilities], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
            }
            else {
                DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilityLabels[lv_itMaxDamager][lv_itMaxDamagerAbilities], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
                DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilAmountLabels[lv_itMaxDamager][lv_itMaxDamagerAbilities], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
                DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilityBars[lv_itMaxDamager][lv_itMaxDamagerAbilities], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
                DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilityBarTooltips[lv_itMaxDamager][lv_itMaxDamagerAbilities], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
            }
        }
    }
    autoBA56B0FA_ae = libGame_gv_deathRecap_MaxMaxDamagers_C;
    autoBA56B0FA_ai = 1;
    lv_itMaxDamager = (libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagersCount + 1);
    for ( ; ( (autoBA56B0FA_ai >= 0 && lv_itMaxDamager <= autoBA56B0FA_ae) || (autoBA56B0FA_ai <= 0 && lv_itMaxDamager >= autoBA56B0FA_ae) ) ; lv_itMaxDamager += autoBA56B0FA_ai ) {
        DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_maxDamagersAmountLabels[lv_itMaxDamager], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
        DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_maxDamagersImages[lv_itMaxDamager], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
        DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_maxDamagersHeroNameLabels[lv_itMaxDamager], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
        DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_maxDamagersPlayerNameLabels[lv_itMaxDamager], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
        autoBB1264A7_ae = libGame_gv_deathRecap_MaxMaxDamageAbils_C;
        autoBB1264A7_ai = 1;
        lv_itMaxDamagerAbilities = 1;
        for ( ; ( (autoBB1264A7_ai >= 0 && lv_itMaxDamagerAbilities <= autoBB1264A7_ae) || (autoBB1264A7_ai <= 0 && lv_itMaxDamagerAbilities >= autoBB1264A7_ae) ) ; lv_itMaxDamagerAbilities += autoBB1264A7_ai ) {
            DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilityLabels[lv_itMaxDamager][lv_itMaxDamagerAbilities], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
            DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilAmountLabels[lv_itMaxDamager][lv_itMaxDamagerAbilities], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
            DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilityBars[lv_itMaxDamager][lv_itMaxDamagerAbilities], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
            DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilityBarTooltips[lv_itMaxDamager][lv_itMaxDamagerAbilities], libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
        }
    }
}

void libUIUI_gf_DeathRecapPopulateToastButton (unit lp_killingUnit, string lp_killingUnitType, int lp_deadPlayer, int lp_killingPlayer, int lp_killingDamageAmount, int lp_killingDamageAttempted, string lp_buttonSource) {
    // Variable Declarations
    string lv_killingHero;
    string lv_killingHeroSkin;
    int lv_killingPlayer;
    int lv_killingUnitHealthRemaining;
    string lv_deathRecapButtonPlayerImage;
    string lv_deathRecapButtonSourceImage;

    // Variable Initialization

    // Implementation
    lv_killingPlayer = lp_killingPlayer;
    if ((lv_killingPlayer >= 1) && (lv_killingPlayer <= libCore_gv_bALMaxPlayers)) {
        lv_killingHero = libGame_gv_players[lv_killingPlayer].lv_heroData.lv_heroCatalogLink;
        lv_killingHeroSkin = PlayerSkin(lp_killingPlayer);
    }
    else {
        lv_killingHero = "_Empty";
        lv_deathRecapButtonPlayerImage = "Assets\\Textures\\storm_ui_glues_store_bundle_heroes.dds";
    }
    lv_deathRecapButtonSourceImage = (CatalogFieldValueGet(c_gameCatalogButton, lp_buttonSource, "Icon", c_playerAny));
    if ((UnitIsValid(lp_killingUnit) == true) && (UnitIsAlive(lp_killingUnit) == true)) {
        lv_killingUnitHealthRemaining = RoundI(((UnitGetPropertyFixed(lp_killingUnit, c_unitPropLife, c_unitPropCurrent) / UnitGetPropertyFixed(lp_killingUnit, c_unitPropLifeMax, c_unitPropCurrent)) * 100.0));
    }
    else {
        lv_killingUnitHealthRemaining = 0;
    }
    if ((PlayerType(lv_killingPlayer) == c_playerTypeUser)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecap_Panel.lv_toastButtonPlayerNameLabel, PlayerName(lp_killingPlayer), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_toastButtonPlayerNameLabel, libCore_gv_playerGroupFromPlayer[lp_deadPlayer], true);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_deathRecap_Panel.lv_toastButtonPlayerNameLabel, libCore_gv_playerGroupFromPlayer[lp_deadPlayer], false);
    }
    if ((lv_killingPlayer >= 1) && (lv_killingPlayer <= libCore_gv_bALMaxPlayers)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_46B1E43C", "A", UnitTypeGetName(UnitGetType(lp_killingUnit)));
        libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecap_Panel.lv_toastButtonFinishedYouLabel, TextExpressionAssemble("Param/Expression/lib_UIUI_46B1E43C"), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        libNtve_gf_SetDialogItemPlayerId(libUIUI_gv_deathRecap_Panel.lv_toastButtonKilledByCutscene, lp_killingPlayer, libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
    }
    else {
        libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecap_Panel.lv_toastButtonFinishedYouLabel, StringExternal("Param/Value/lib_UIUI_FFDA949F"), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        libNtve_gf_SetDialogItemPlayerId(libUIUI_gv_deathRecap_Panel.lv_toastButtonKilledByCutscene, lp_killingPlayer, libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
        libNtve_gf_SetDialogItemCutscene(libUIUI_gv_deathRecap_Panel.lv_toastButtonKilledByCutscene, "Cutscenes\\FrameRandom.StormCutscene", libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
    }
    libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecap_Panel.lv_toastButtonAbilityNameLabel, StringExternal(CatalogFieldValueGet(c_gameCatalogButton, lp_buttonSource, "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_deathRecap_Panel.lv_toastButtonAbilityImage, lv_deathRecapButtonSourceImage, libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
    TextExpressionSetToken("Param/Expression/lib_UIUI_2DA5C898", "A", IntToText(lp_killingDamageAmount));
    TextExpressionSetToken("Param/Expression/lib_UIUI_2DA5C898", "B", FixedToText((IntToFixed(lp_killingDamageAmount) / IntToFixed(libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroMaxHealth) * 100), 0));
    libNtve_gf_SetDialogItemText(libUIUI_gv_deathRecap_Panel.lv_toastButtonDamageAmountLabel, TextExpressionAssemble("Param/Expression/lib_UIUI_2DA5C898"), libCore_gv_playerGroupFromPlayer[lp_deadPlayer]);
    if ((PlayerType(lp_killingPlayer) == c_playerTypeUser)) {
    }
    else {
        if ((lv_killingPlayer >= 1) && (lv_killingPlayer <= libCore_gv_bALMaxPlayers)) {
        }

    }
}

void libUIUI_gf_DeathTimerPanelShowHideTeamsPanelForPlayer (bool lp_showHide, int lp_team, int lp_player) {
    // Implementation
    DialogControlSetVisible(libUIUI_gv_deathTimerPanel.lv_mainPanel[lp_team], libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
}

trigger auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_Trigger = null;
int auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_lp_player;
int auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_lp_killingPlayer;
string auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_lp_portraitImage;
unit auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_lp_deadUnit;
text auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_lp_deadUnitName;
timer auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_lp_deathTimer;

void libUIUI_gf_DeathAnnouncementPanelRegisterDeath (int lp_player, int lp_killingPlayer, string lp_portraitImage, unit lp_deadUnit, text lp_deadUnitName, timer lp_deathTimer) {
    auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_lp_player = lp_player;
    auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_lp_killingPlayer = lp_killingPlayer;
    auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_lp_portraitImage = lp_portraitImage;
    auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_lp_deadUnit = lp_deadUnit;
    auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_lp_deadUnitName = lp_deadUnitName;
    auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_lp_deathTimer = lp_deathTimer;

    if (auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_Trigger == null) {
        auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_Trigger = TriggerCreate("auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_TriggerFunc");
    }

    TriggerExecute(auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_Trigger, false, false);
}

bool auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_lp_player;
    int lp_killingPlayer = auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_lp_killingPlayer;
    string lp_portraitImage = auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_lp_portraitImage;
    unit lp_deadUnit = auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_lp_deadUnit;
    text lp_deadUnitName = auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_lp_deadUnitName;
    timer lp_deathTimer = auto_libUIUI_gf_DeathAnnouncementPanelRegisterDeath_lp_deathTimer;

    // Variable Declarations
    int lv_team;
    int lv_frameIndex;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    if (((lp_player < 1) || (lp_player > libCore_gv_bALMaxPlayers))) {
        return true;
    }

    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);
    if ((lv_team > libCore_gv_bALMaxTeams)) {
        return true;
    }

    if ((libGame_gv_players[lp_player].lv_suppressHeroAnnouncements == true)) {
        return true;
    }

    lv_frameIndex = libUIUI_gv_deathAnnouncement_NextHeroFrameToUse[lv_team];
    while ((libUIUI_gv_deathAnnouncement_HeroesAssignedToFrame[lv_team][lv_frameIndex].lv_deathAnnouncementHeroFrameInUse == true)) {
        Wait(0.0625, c_timeGame);
        lv_frameIndex = libUIUI_gv_deathAnnouncement_NextHeroFrameToUse[lv_team];
    }
    libUIUI_gv_deathAnnouncement_HeroesAssignedToFrame[lv_team][lv_frameIndex].lv_deathAnnouncementHeroFrameInUse = true;
    libUIUI_gv_deathAnnouncement_HeroesAssignedToFrame[lv_team][lv_frameIndex].lv_deathAnnouncementPlayer = lp_player;
    if ((libGame_gv_players[lp_player].lv_heroUsesAnnouncementAlias == true) && (libGame_gv_players[lp_player].lv_heroAnnouncementAliasIcon != null)) {
        libUIUI_gv_deathAnnouncement_HeroesAssignedToFrame[lv_team][lv_frameIndex].lv_deathAnnouncementPortrait = libGame_gv_players[lp_player].lv_heroAnnouncementAliasIcon;
    }
    else {
        libUIUI_gv_deathAnnouncement_HeroesAssignedToFrame[lv_team][lv_frameIndex].lv_deathAnnouncementPortrait = lp_portraitImage;
    }
    libUIUI_gv_deathAnnouncement_HeroesAssignedToFrame[lv_team][lv_frameIndex].lv_deathAnnouncementUnit = lp_deadUnit;
    libUIUI_gv_deathAnnouncement_HeroesAssignedToFrame[lv_team][lv_frameIndex].lv_deathAnnouncementUnitName = lp_deadUnitName;
    libUIUI_gv_deathAnnouncement_HeroesAssignedToFrame[lv_team][lv_frameIndex].lv_deathAnnouncementDeathTimer = lp_deathTimer;
    libNtve_gf_SetDialogItemImage(libUIUI_gv_deathTimerPanel.lv_announcementHeroFramePortraitImage[lv_team][lv_frameIndex], lp_portraitImage, PlayerGroupAll());
    if ((libGame_gv_players[lp_player].lv_heroUsesAnnouncementAlias == true)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_deathTimerPanel.lv_announcementHeroFrameNameLabel[lv_team][lv_frameIndex], libGame_gv_players[lp_player].lv_heroAnnouncementAliasText, PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemText(libUIUI_gv_deathTimerPanel.lv_announcementHeroFrameNameLabel[lv_team][lv_frameIndex], lp_deadUnitName, PlayerGroupAll());
    }
    if (((lp_killingPlayer <= 0) || (lp_killingPlayer > libCore_gv_bALMaxEnginePlayerCount))) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_deathTimerPanel.lv_announcementHeroFrameKillersLabel[lv_team][lv_frameIndex], StringToText(""), PlayerGroupAll());
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_UIUI_BCECDC14", "A", libGame_gv_players[lp_killingPlayer].lv_name);
        libNtve_gf_SetDialogItemText(libUIUI_gv_deathTimerPanel.lv_announcementHeroFrameKillersLabel[lv_team][lv_frameIndex], TextExpressionAssemble("Param/Expression/lib_UIUI_BCECDC14"), PlayerGroupAll());
    }
    if ((lv_frameIndex == libUIUI_gv_deathAnnouncement_TopMostHeroFrame[lv_team])) {
        DialogControlSendAnimationEvent(libUIUI_gv_deathTimerPanel.lv_announcementHeroFrame[lv_team][lv_frameIndex], PlayerGroupAll(), "TransitionInTopmost");
    }
    else {
        DialogControlSendAnimationEvent(libUIUI_gv_deathTimerPanel.lv_announcementHeroFrame[lv_team][lv_frameIndex], PlayerGroupAll(), "TransitionIn");
    }
    if ((TimerGetRemaining(libUIUI_gv_deathAnnouncement_AnnouncementVisibleTimers[lv_team]) <= 0.0)) {
        TimerStart(libUIUI_gv_deathAnnouncement_AnnouncementVisibleTimers[lv_team], libUIUI_gv_deathTimerPanel_AnnouncementVisibleDuration_C, false, c_timeGame);
    }

    libUIUI_gv_deathAnnouncement_NextHeroFrameToUse[lv_team] += 1;
    if ((libUIUI_gv_deathAnnouncement_NextHeroFrameToUse[lv_team] > libUIUI_gv_deathTimerPanel_MaxFrameCount)) {
        libUIUI_gv_deathAnnouncement_NextHeroFrameToUse[lv_team] = 1;
    }

    libUIUI_gv_deathAnnouncement_VisibleHeroFrameCount[lv_team] += 1;
    return true;
}

void libUIUI_gf_DeathAnnouncementPanelTransitionFrameOut (int lp_team) {
    int autoAF27DFF2_ae;
    int autoAF27DFF2_ai;
    int autoB2D74342_ae;
    int autoB2D74342_ai;

    // Variable Declarations
    int lv_itUpdateOrder;
    int lv_topmostFrame;
    int lv_topmostFramePlayer;
    string lv_topmostFramePortrait;
    timer lv_topmostFrameDeathTimer;
    unit lv_topmostFrameUnit;
    text lv_topmostFrameUnitName;
    int lv_frameIndex;

    // Variable Initialization
    lv_topmostFrameDeathTimer = TimerCreate();

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return ;
    }

    libUIUI_gv_deathAnnouncement_VisibleHeroFrameCount[lp_team] -= 1;
    lv_topmostFrame = libUIUI_gv_deathAnnouncement_TopMostHeroFrame[lp_team];
    lv_topmostFramePlayer = libUIUI_gv_deathAnnouncement_HeroesAssignedToFrame[lp_team][lv_topmostFrame].lv_deathAnnouncementPlayer;
    lv_topmostFramePortrait = libUIUI_gv_deathAnnouncement_HeroesAssignedToFrame[lp_team][lv_topmostFrame].lv_deathAnnouncementPortrait;
    lv_topmostFrameUnit = libUIUI_gv_deathAnnouncement_HeroesAssignedToFrame[lp_team][lv_topmostFrame].lv_deathAnnouncementUnit;
    lv_topmostFrameUnitName = libUIUI_gv_deathAnnouncement_HeroesAssignedToFrame[lp_team][lv_topmostFrame].lv_deathAnnouncementUnitName;
    lv_topmostFrameDeathTimer = libUIUI_gv_deathAnnouncement_HeroesAssignedToFrame[lp_team][lv_topmostFrame].lv_deathAnnouncementDeathTimer;
    DialogControlSendAnimationEvent(libUIUI_gv_deathTimerPanel.lv_announcementHeroFrame[lp_team][lv_topmostFrame], PlayerGroupAll(), "TransitionOut");
    autoAF27DFF2_ae = (libUIUI_gv_deathTimerPanel_MaxFrameCount - 1);
    autoAF27DFF2_ai = 1;
    lv_itUpdateOrder = 1;
    for ( ; ( (autoAF27DFF2_ai >= 0 && lv_itUpdateOrder <= autoAF27DFF2_ae) || (autoAF27DFF2_ai <= 0 && lv_itUpdateOrder >= autoAF27DFF2_ae) ) ; lv_itUpdateOrder += autoAF27DFF2_ai ) {
        lv_frameIndex = (lv_itUpdateOrder + libUIUI_gv_deathAnnouncement_TopMostHeroFrame[lp_team]);
        if ((lv_frameIndex > libUIUI_gv_deathTimerPanel_MaxFrameCount)) {
            lv_frameIndex = (lv_frameIndex - libUIUI_gv_deathTimerPanel_MaxFrameCount);
        }

        DialogControlSendAnimationEvent(libUIUI_gv_deathTimerPanel.lv_announcementHeroFrame[lp_team][lv_frameIndex], PlayerGroupAll(), "ShiftUp");
        if ((lv_itUpdateOrder == 1)) {
            DialogControlSendAnimationEvent(libUIUI_gv_deathTimerPanel.lv_announcementHeroFrame[lp_team][lv_frameIndex], PlayerGroupAll(), "TransitionToTop");
        }

    }
    libUIUI_gv_deathAnnouncement_TopMostHeroFrame[lp_team] += 1;
    if ((libUIUI_gv_deathAnnouncement_TopMostHeroFrame[lp_team] > libUIUI_gv_deathTimerPanel_MaxFrameCount)) {
        libUIUI_gv_deathAnnouncement_TopMostHeroFrame[lp_team] = 1;
    }

    autoB2D74342_ae = libUIUI_gv_deathTimerPanel_MaxFrameCount;
    autoB2D74342_ai = 1;
    lv_itUpdateOrder = 1;
    for ( ; ( (autoB2D74342_ai >= 0 && lv_itUpdateOrder <= autoB2D74342_ae) || (autoB2D74342_ai <= 0 && lv_itUpdateOrder >= autoB2D74342_ae) ) ; lv_itUpdateOrder += autoB2D74342_ai ) {
        lv_frameIndex = (lv_itUpdateOrder + libUIUI_gv_deathAnnouncement_TopMostHeroFrame[lp_team] - 1);
        if ((lv_frameIndex > libUIUI_gv_deathTimerPanel_MaxFrameCount)) {
            lv_frameIndex = (lv_frameIndex - libUIUI_gv_deathTimerPanel_MaxFrameCount);
        }

        libNtve_gf_SetDialogItemRenderPriority(libUIUI_gv_deathTimerPanel.lv_announcementHeroFrame[lp_team][lv_frameIndex], (libUIUI_gv_deathAnnouncement_TopFrameRenderPriority_C - (lv_itUpdateOrder - 1) * libUIUI_gv_deathAnnouncement_RenderPriorityDecrement_C), PlayerGroupAll());
    }
    if ((UnitGetType(libGame_gv_players[lv_topmostFramePlayer].lv_heroUnit) == "HeroMurky")) {
        if (((UnitIsValid(lv_topmostFrameUnit) == true) || (UnitIsAlive(libGame_gv_players[lv_topmostFramePlayer].lv_heroUnit) == true))) {
            libUIUI_gf_DeathTimerPanelRegisterDeath(lv_topmostFramePlayer, lv_topmostFramePortrait, lv_topmostFrameUnit, lv_topmostFrameUnitName, lv_topmostFrameDeathTimer);
        }

    }
    else {
        if ((UnitIsValid(lv_topmostFrameUnit) == false) && (UnitGetType(libGame_gv_players[lv_topmostFramePlayer].lv_heroUnit) == "HeroRexxar")) {
            if ((UnitIsAlive(libGame_gv_players[lv_topmostFramePlayer].lv_heroUnit) == true)) {
                libUIUI_gf_DeathTimerPanelRegisterDeath(lv_topmostFramePlayer, lv_topmostFramePortrait, lv_topmostFrameUnit, lv_topmostFrameUnitName, lv_topmostFrameDeathTimer);
            }

        }
        else {
            if ((UnitHasBehavior2(lv_topmostFrameUnit, "Dead") == true)) {
                libUIUI_gf_DeathTimerPanelRegisterDeath(lv_topmostFramePlayer, lv_topmostFramePortrait, lv_topmostFrameUnit, lv_topmostFrameUnitName, lv_topmostFrameDeathTimer);
            }

        }
    }
    Wait(libUIUI_gv_deathTimerPanel_AnnouncementTransitionOutDuration_C, c_timeGame);
    libUIUI_gv_deathAnnouncement_HeroesAssignedToFrame[lp_team][lv_topmostFrame].lv_deathAnnouncementHeroFrameInUse = false;
}

int libUIUI_gf_DeathTimerPanelGetFreeFrameIndexForTeam (int lp_team) {
    int init_i;

    int auto2AF2B84D_ae;
    int auto2AF2B84D_ai;

    // Variable Declarations
    int lv_itFrameIndex;
    bool[libCore_gv_bALMaxPlayersOnATeam + 1] lv_frameIndexAvailable;

    // Variable Initialization
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayersOnATeam; init_i += 1) {
        lv_frameIndexAvailable[init_i] = true;
    }

    // Implementation
    auto2AF2B84D_ae = libUIUI_gv_deathTimerPanel_MaxFrameCount;
    auto2AF2B84D_ai = 1;
    lv_itFrameIndex = 1;
    for ( ; ( (auto2AF2B84D_ai >= 0 && lv_itFrameIndex <= auto2AF2B84D_ae) || (auto2AF2B84D_ai <= 0 && lv_itFrameIndex >= auto2AF2B84D_ae) ) ; lv_itFrameIndex += auto2AF2B84D_ai ) {
        if ((libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][lv_itFrameIndex].lv_deathTimerFramePlayer == 0)) {
            return lv_itFrameIndex;
        }

    }
    return 0;
}

int libUIUI_gf_DeathTimerPanelGetFreeGroupForTeam (int lp_team) {
    int autoF4FA6DC8_ae;
    int autoF4FA6DC8_ai;

    // Variable Declarations
    int lv_itGroup;

    // Variable Initialization

    // Implementation
    autoF4FA6DC8_ae = libUIUI_gv_deathTimerPanel_MaxFrameCount;
    autoF4FA6DC8_ai = 1;
    lv_itGroup = 1;
    for ( ; ( (autoF4FA6DC8_ai >= 0 && lv_itGroup <= autoF4FA6DC8_ae) || (autoF4FA6DC8_ai <= 0 && lv_itGroup >= autoF4FA6DC8_ae) ) ; lv_itGroup += autoF4FA6DC8_ai ) {
        if ((libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lv_itGroup].lv_frameCount == 0)) {
            return lv_itGroup;
        }

    }
    return 0;
}

int libUIUI_gf_DeathTimerPanelFindAppropriateGroupForFrame (int lp_team, int lp_frameIndex, fixed lp_deathTimeRemaining) {
    int auto7EFA9973_ae;
    int auto7EFA9973_ai;

    // Variable Declarations
    int lv_itGroup;
    int lv_framePlayer;
    fixed lv_groupDeathTimeRemaining;
    fixed lv_groupTimeDifferential;

    // Variable Initialization

    // Implementation
    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_ArenaMode)) {
        lv_groupTimeDifferential = libUIUI_gv_deathTimerPanel_GroupTimeDifferentialArena_C;
    }
    else {
        lv_groupTimeDifferential = libUIUI_gv_deathTimerPanel_GroupTimeDifferentialNormal_C;
    }
    lv_framePlayer = libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][lp_frameIndex].lv_deathTimerFramePlayer;
    auto7EFA9973_ae = libUIUI_gv_deathTimerPanel_MaxFrameCount;
    auto7EFA9973_ai = 1;
    lv_itGroup = 1;
    for ( ; ( (auto7EFA9973_ai >= 0 && lv_itGroup <= auto7EFA9973_ae) || (auto7EFA9973_ai <= 0 && lv_itGroup >= auto7EFA9973_ae) ) ; lv_itGroup += auto7EFA9973_ai ) {
        if ((libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lv_itGroup].lv_frameCount > 0)) {
            lv_groupDeathTimeRemaining = TimerGetRemaining(libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lv_itGroup].lv_frames[1]].lv_deathTimerFrameDeathTimer);
            if ((lp_deathTimeRemaining >= (lv_groupDeathTimeRemaining - lv_groupTimeDifferential)) && (lp_deathTimeRemaining <= (lv_groupDeathTimeRemaining + lv_groupTimeDifferential))) {
                return lv_itGroup;
            }

        }

    }
    return libUIUI_gf_DeathTimerPanelGetFreeGroupForTeam(lp_team);
}

int libUIUI_gf_DeathTimerPanelGetGroupOfFrame (int lp_team, int lp_frameIndex) {
    int auto65E5AFBC_ae;
    int auto65E5AFBC_ai;
    int auto5A012574_ae;
    int auto5A012574_ai;

    // Variable Declarations
    int lv_itGroup;
    int lv_itLayer;

    // Variable Initialization

    // Implementation
    auto65E5AFBC_ae = libUIUI_gv_deathTimerPanel_MaxFrameCount;
    auto65E5AFBC_ai = 1;
    lv_itGroup = 1;
    for ( ; ( (auto65E5AFBC_ai >= 0 && lv_itGroup <= auto65E5AFBC_ae) || (auto65E5AFBC_ai <= 0 && lv_itGroup >= auto65E5AFBC_ae) ) ; lv_itGroup += auto65E5AFBC_ai ) {
        auto5A012574_ae = libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lv_itGroup].lv_frameCount;
        auto5A012574_ai = 1;
        lv_itLayer = 1;
        for ( ; ( (auto5A012574_ai >= 0 && lv_itLayer <= auto5A012574_ae) || (auto5A012574_ai <= 0 && lv_itLayer >= auto5A012574_ae) ) ; lv_itLayer += auto5A012574_ai ) {
            if ((libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lv_itGroup].lv_frames[lv_itLayer] == lp_frameIndex)) {
                return lv_itGroup;
            }

        }
    }
    return 0;
}

int libUIUI_gf_DeathTimerPanelGetLayerOfFrameInGroup (int lp_team, int lp_group, int lp_frameIndex) {
    int auto232AC876_ae;

    // Variable Declarations
    int lv_itLayer;

    // Variable Initialization

    // Implementation
    auto232AC876_ae = libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lp_group].lv_frameCount;
    lv_itLayer = 1;
    for ( ; lv_itLayer <= auto232AC876_ae ; lv_itLayer += 1 ) {
        if ((libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lp_group].lv_frames[lv_itLayer] == lp_frameIndex)) {
            return lv_itLayer;
        }

    }
    return 0;
}

void libUIUI_gf_DeathTimerPanelShowDeathTimeLabelForGroup (int lp_team, int lp_group) {
    int auto9A6E9E02_ae;
    int auto9A6E9E02_ai;

    // Variable Declarations
    int lv_itLayer;
    int lv_frameCount;
    int lv_frameIndex;

    // Variable Initialization

    // Implementation
    lv_frameCount = libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lp_group].lv_frameCount;
    auto9A6E9E02_ae = lv_frameCount;
    auto9A6E9E02_ai = 1;
    lv_itLayer = 1;
    for ( ; ( (auto9A6E9E02_ai >= 0 && lv_itLayer <= auto9A6E9E02_ae) || (auto9A6E9E02_ai <= 0 && lv_itLayer >= auto9A6E9E02_ae) ) ; lv_itLayer += auto9A6E9E02_ai ) {
        lv_frameIndex = libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lp_group].lv_frames[lv_itLayer];
        if ((lv_itLayer == lv_frameCount)) {
            DialogControlSetVisible(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrameTimeLabel[lp_team][lv_frameIndex], PlayerGroupAll(), true);
        }
        else {
            DialogControlSetVisible(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrameTimeLabel[lp_team][lv_frameIndex], PlayerGroupAll(), false);
        }
    }
}

void libUIUI_gf_DeathTimerPanelSetRenderPrioritiesForGroups (int lp_team) {
    int auto183644CC_ae;
    int auto183644CC_ai;
    int autoF6C73D5D_ae;
    int autoF6C73D5D_ai;
    int autoE3BADCC2_ae;
    int autoE3BADCC2_ai;
    int autoAB777A2C_ae;
    int autoAB777A2C_ai;
    int auto0C5B01C3_ae;
    int auto0C5B01C3_ai;
    int auto74166B33_ae;
    int auto74166B33_ai;

    // Variable Declarations
    int lv_itGroupSortOrder;
    int lv_itLayer;
    int lv_itSortA;
    int lv_itSortB;
    fixed[libUIUI_gv_deathTimerPanel_MaxFrameCount + 1] lv_deathTimeRemainingForGroup;
    int[libUIUI_gv_deathTimerPanel_MaxFrameCount + 1] lv_groupSortOrder;
    int lv_group;
    int lv_frameIndex;
    int lv_renderPriority;

    // Variable Initialization

    // Implementation
    auto183644CC_ae = libUIUI_gv_deathTimerPanel_MaxFrameCount;
    auto183644CC_ai = 1;
    lv_itGroupSortOrder = 1;
    for ( ; ( (auto183644CC_ai >= 0 && lv_itGroupSortOrder <= auto183644CC_ae) || (auto183644CC_ai <= 0 && lv_itGroupSortOrder >= auto183644CC_ae) ) ; lv_itGroupSortOrder += auto183644CC_ai ) {
        if ((libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lv_itGroupSortOrder].lv_frameCount > 0)) {
            lv_deathTimeRemainingForGroup[lv_itGroupSortOrder] = TimerGetRemaining(libUIUI_gv_deathAnnouncement_HeroesAssignedToFrame[lp_team][libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lv_itGroupSortOrder].lv_frames[1]].lv_deathAnnouncementDeathTimer);
        }

    }
    autoF6C73D5D_ae = libUIUI_gv_deathTimerPanel_MaxFrameCount;
    autoF6C73D5D_ai = 1;
    lv_itGroupSortOrder = 1;
    for ( ; ( (autoF6C73D5D_ai >= 0 && lv_itGroupSortOrder <= autoF6C73D5D_ae) || (autoF6C73D5D_ai <= 0 && lv_itGroupSortOrder >= autoF6C73D5D_ae) ) ; lv_itGroupSortOrder += autoF6C73D5D_ai ) {
        lv_groupSortOrder[lv_itGroupSortOrder] = lv_itGroupSortOrder;
    }
    autoE3BADCC2_ae = 1;
    autoE3BADCC2_ai = -1;
    lv_itSortA = (libUIUI_gv_deathTimerPanel_MaxFrameCount - 1);
    for ( ; ( (autoE3BADCC2_ai >= 0 && lv_itSortA <= autoE3BADCC2_ae) || (autoE3BADCC2_ai <= 0 && lv_itSortA >= autoE3BADCC2_ae) ) ; lv_itSortA += autoE3BADCC2_ai ) {
        autoAB777A2C_ae = lv_itSortA;
        autoAB777A2C_ai = 1;
        lv_itSortB = 1;
        for ( ; ( (autoAB777A2C_ai >= 0 && lv_itSortB <= autoAB777A2C_ae) || (autoAB777A2C_ai <= 0 && lv_itSortB >= autoAB777A2C_ae) ) ; lv_itSortB += autoAB777A2C_ai ) {
            if ((lv_deathTimeRemainingForGroup[lv_itSortB] > lv_deathTimeRemainingForGroup[(lv_itSortB + 1)])) {
                lv_deathTimeRemainingForGroup[0] = lv_deathTimeRemainingForGroup[lv_itSortB];
                lv_deathTimeRemainingForGroup[lv_itSortB] = lv_deathTimeRemainingForGroup[(lv_itSortB + 1)];
                lv_deathTimeRemainingForGroup[(lv_itSortB + 1)] = lv_deathTimeRemainingForGroup[0];
                lv_groupSortOrder[0] = lv_groupSortOrder[lv_itSortB];
                lv_groupSortOrder[lv_itSortB] = lv_groupSortOrder[(lv_itSortB + 1)];
                lv_groupSortOrder[(lv_itSortB + 1)] = lv_groupSortOrder[0];
            }

        }
    }
    auto0C5B01C3_ae = libUIUI_gv_deathTimerPanel_MaxFrameCount;
    auto0C5B01C3_ai = 1;
    lv_itGroupSortOrder = 1;
    for ( ; ( (auto0C5B01C3_ai >= 0 && lv_itGroupSortOrder <= auto0C5B01C3_ae) || (auto0C5B01C3_ai <= 0 && lv_itGroupSortOrder >= auto0C5B01C3_ae) ) ; lv_itGroupSortOrder += auto0C5B01C3_ai ) {
        lv_group = lv_groupSortOrder[lv_itGroupSortOrder];
        auto74166B33_ae = libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lv_group].lv_frameCount;
        auto74166B33_ai = 1;
        lv_itLayer = 1;
        for ( ; ( (auto74166B33_ai >= 0 && lv_itLayer <= auto74166B33_ae) || (auto74166B33_ai <= 0 && lv_itLayer >= auto74166B33_ae) ) ; lv_itLayer += auto74166B33_ai ) {
            lv_frameIndex = libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lv_group].lv_frames[lv_itLayer];
            lv_renderPriority = (libUIUI_gv_defaultRenderPriority_C - lv_itLayer + 1 + (libUIUI_gv_deathTimerPanel_MaxFrameCount - lv_itGroupSortOrder) * 10);
            libNtve_gf_SetDialogItemRenderPriority(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrame[lp_team][lv_frameIndex], lv_renderPriority, PlayerGroupAll());
        }
    }
}

void libUIUI_gf_DeathTimerPanelAddFrameToGroup (int lp_team, int lp_group, int lp_frameIndex) {
    int autoD312A942_ae;
    int autoD312A942_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_layer;
    int lv_primaryFrameForGroup;
    fixed lv_deathTimeRemaining;
    fixed lv_deathTimeInitial;
    string lv_transitionAnimationName;
    string lv_transitionAnimationEvent;

    // Variable Initialization
    lv_transitionAnimationName = "";
    lv_transitionAnimationEvent = "";

    // Implementation
    if (((libCore_gv_sYSGameMode == libCore_ge_GameModes_ArenaMode) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_AttackDefend))) {
        lv_deathTimeInitial = 15.0;
    }
    else {
        lv_deathTimeInitial = libCore_gv_bALMaxDeathTime;
    }
    if (((lp_team > libCore_gv_bALMaxTeams) || (lp_team < 1) || (lp_group < 1) || (lp_group > libUIUI_gv_deathTimerPanel_MaxFrameCount))) {
        if ((libCore_gv_dEBUGDebuggingEnabled == true)) {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_091132DB"), true);
        }

        return ;
    }

    libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lp_group].lv_frameCount += 1;
    lv_layer = libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lp_group].lv_frameCount;
    if (((lv_layer > libUIUI_gv_deathTimerPanel_MaxFrameCount) || (lv_layer < 0))) {
        if ((libCore_gv_dEBUGDebuggingEnabled == true)) {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_8465BA7A"), true);
        }

        return ;
    }

    libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lp_group].lv_frames[lv_layer] = lp_frameIndex;
    DialogControlSendAnimationEvent(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrame[lp_team][lp_frameIndex], PlayerGroupAll(), "Reset");
    libUIUI_gf_DeathTimerPanelSetRenderPrioritiesForGroups(lp_team);
    autoD312A942_ae = libCore_gv_bALMaxPlayers;
    autoD312A942_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoD312A942_ai >= 0 && lv_itPlayer <= autoD312A942_ae) || (autoD312A942_ai <= 0 && lv_itPlayer >= autoD312A942_ae) ) ; lv_itPlayer += autoD312A942_ai ) {
        if ((libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lp_group].lv_slideOut[lv_itPlayer] == true)) {
            DialogControlSendAnimationEvent(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrame[lp_team][lp_frameIndex], libCore_gv_playerGroupFromPlayer[lv_itPlayer], ("SetLayerSlideOut" + IntToString(lv_layer)));
            DialogControlSetVisible(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrameHeroNameLabel[lp_team][lp_frameIndex], libCore_gv_playerGroupFromPlayer[lv_itPlayer], true);
        }
        else {
            DialogControlSendAnimationEvent(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrame[lp_team][lp_frameIndex], libCore_gv_playerGroupFromPlayer[lv_itPlayer], ("SetLayer" + IntToString(lv_layer)));
        }
    }
    libUIUI_gf_DeathTimerPanelShowDeathTimeLabelForGroup(lp_team, lp_group);
    lv_primaryFrameForGroup = libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lp_group].lv_frames[1];
    lv_deathTimeRemaining = TimerGetRemaining(libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][lv_primaryFrameForGroup].lv_deathTimerFrameDeathTimer);
    if ((lp_team == libGame_gv_teamOrderIndex_C)) {
        lv_transitionAnimationEvent = "BeginLeft";
        lv_transitionAnimationName = "DeadTimerLeft";
    }
    else {
        lv_transitionAnimationEvent = "BeginRight";
        lv_transitionAnimationName = "DeadTimerRight";
    }
    if (((libCore_gv_sYSGameMode == libCore_ge_GameModes_ArenaMode) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_AttackDefend))) {
        lv_transitionAnimationEvent = (lv_transitionAnimationEvent + "Rapid");
        lv_transitionAnimationName = (lv_transitionAnimationName + "Rapid");
    }

    DialogControlSendAnimationEvent(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrame[lp_team][lp_frameIndex], PlayerGroupAll(), lv_transitionAnimationEvent);
    if ((UnitHasBehavior2(libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][lp_frameIndex].lv_deathTimerFrameUnit, "GuldanDarkBargainDuration") == true)) {
        DialogControlSetAnimationTime(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrame[lp_team][lp_frameIndex], PlayerGroupAll(), lv_transitionAnimationName, (lv_deathTimeInitial - (lv_deathTimeRemaining - UnitBehaviorDuration(libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][lp_frameIndex].lv_deathTimerFrameUnit, "GuldanDarkBargainDuration"))));
    }
    else {
        DialogControlSetAnimationTime(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrame[lp_team][lp_frameIndex], PlayerGroupAll(), lv_transitionAnimationName, (lv_deathTimeInitial - lv_deathTimeRemaining));
    }
    DialogControlSetAnimationTime(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrameTimeLabel[lp_team][lp_frameIndex], PlayerGroupAll(), "DeadTimerText", (lv_deathTimeInitial - lv_deathTimeRemaining));
}

void libUIUI_gf_DeathTimerPanelRemoveFrameFromGroup (int lp_team, int lp_group, int lp_frameIndex) {
    int auto4F537120_ae;
    int auto4F537120_ai;
    int auto28A8FEAC_ae;
    int auto28A8FEAC_ai;
    int autoB7D4148C_ae;
    int autoB7D4148C_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itLayer;
    int lv_itFrame;
    int lv_frameLayer;
    int lv_currentFrameCount;
    int lv_framesToBeAddedCount;
    int[libUIUI_gv_deathTimerPanel_MaxFrameCount + 1] lv_framesToBeAdded;

    // Variable Initialization

    // Implementation
    auto4F537120_ae = libCore_gv_bALMaxPlayers;
    auto4F537120_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto4F537120_ai >= 0 && lv_itPlayer <= auto4F537120_ae) || (auto4F537120_ai <= 0 && lv_itPlayer >= auto4F537120_ae) ) ; lv_itPlayer += auto4F537120_ai ) {
        libUIUI_gf_DeathTimerPanelCollapseGroupForPlayer(lp_team, lp_group, lv_itPlayer);
    }
    lv_frameLayer = libUIUI_gf_DeathTimerPanelGetLayerOfFrameInGroup(lp_team, lp_group, lp_frameIndex);
    lv_currentFrameCount = libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lp_group].lv_frameCount;
    auto28A8FEAC_ae = lv_currentFrameCount;
    auto28A8FEAC_ai = 1;
    lv_itLayer = (lv_frameLayer + 1);
    for ( ; ( (auto28A8FEAC_ai >= 0 && lv_itLayer <= auto28A8FEAC_ae) || (auto28A8FEAC_ai <= 0 && lv_itLayer >= auto28A8FEAC_ae) ) ; lv_itLayer += auto28A8FEAC_ai ) {
        lv_framesToBeAddedCount += 1;
        lv_framesToBeAdded[lv_framesToBeAddedCount] = libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lp_group].lv_frames[lv_itLayer];
    }
    libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lp_group].lv_frameCount = (lv_frameLayer - 1);
    libUIUI_gf_DeathTimerPanelShowDeathTimeLabelForGroup(lp_team, lp_group);
    autoB7D4148C_ae = lv_framesToBeAddedCount;
    autoB7D4148C_ai = 1;
    lv_itFrame = 1;
    for ( ; ( (autoB7D4148C_ai >= 0 && lv_itFrame <= autoB7D4148C_ae) || (autoB7D4148C_ai <= 0 && lv_itFrame >= autoB7D4148C_ae) ) ; lv_itFrame += autoB7D4148C_ai ) {
        libUIUI_gf_DeathTimerPanelAddFrameToGroup(lp_team, lp_group, lv_framesToBeAdded[lv_itFrame]);
    }
}

void libUIUI_gf_DeathTimerPanelRegisterDeath (int lp_player, string lp_portraitImage, unit lp_deadUnit, text lp_deadUnitName, timer lp_deathTimer) {
    // Variable Declarations
    fixed lv_deathTimeRemaining;
    int lv_team;
    int lv_frameIndex;
    int lv_group;
    text lv_heroName;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return ;
    }

    lv_deathTimeRemaining = TimerGetRemaining(lp_deathTimer);
    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);
    lv_frameIndex = libUIUI_gf_DeathTimerPanelGetFreeFrameIndexForTeam(lv_team);
    libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lv_team][lv_frameIndex].lv_deathTimerFramePlayer = lp_player;
    if ((libGame_gv_players[lp_player].lv_heroAnnouncementAliasIcon != null) && (libGame_gv_players[lp_player].lv_heroUsesAnnouncementAlias == true)) {
        libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lv_team][lv_frameIndex].lv_deathTimerFramePortrait = libGame_gv_players[lp_player].lv_heroAnnouncementAliasIcon;
    }
    else {
        libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lv_team][lv_frameIndex].lv_deathTimerFramePortrait = lp_portraitImage;
    }
    libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lv_team][lv_frameIndex].lv_deathTimerFrameUnit = lp_deadUnit;
    if ((libGame_gv_players[lp_player].lv_heroUsesAnnouncementAlias == true)) {
        libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lv_team][lv_frameIndex].lv_deathTimerFrameUnitName = libGame_gv_players[lp_player].lv_heroAnnouncementAliasText;
    }
    else {
        libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lv_team][lv_frameIndex].lv_deathTimerFrameUnitName = lp_deadUnitName;
    }
    libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lv_team][lv_frameIndex].lv_deathTimerFrameDeathTimer = lp_deathTimer;
    lv_heroName = lp_deadUnitName;
    lv_group = libUIUI_gf_DeathTimerPanelFindAppropriateGroupForFrame(lv_team, lv_frameIndex, lv_deathTimeRemaining);
    if ((libGame_gv_players[lp_player].lv_heroAnnouncementAliasIcon != null) && (libGame_gv_players[lp_player].lv_heroUsesAnnouncementAlias == true)) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFramePortraitImage[lv_team][lv_frameIndex], libGame_gv_players[lp_player].lv_heroAnnouncementAliasIcon, PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFramePortraitImage[lv_team][lv_frameIndex], lp_portraitImage, PlayerGroupAll());
    }
    libNtve_gf_SetDialogItemText(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrameHeroNameLabel[lv_team][lv_frameIndex], lv_heroName, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrameTimeLabel[lv_team][lv_frameIndex], FixedToText(lv_deathTimeRemaining, 0), PlayerGroupAll());
    libUIUI_gf_DeathTimerPanelAddFrameToGroup(lv_team, lv_group, lv_frameIndex);
    DialogControlSendAnimationEvent(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrame[lv_team][lv_frameIndex], PlayerGroupAll(), "TransitionIn");
    if ((UnitHasBehavior2(lp_deadUnit, "GuldanDarkBargainDuration") == true)) {
        libGDHL_gf_HeroGuldanDarkBargainDeathTimerHoldandSwap(lv_team, lv_frameIndex, UnitBehaviorDuration(lp_deadUnit, "GuldanDarkBargainDuration"));
    }

}

void libUIUI_gf_DeathTimerPanelUnregisterDeath (int lp_team, int lp_frameIndex) {
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return ;
    }

    libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][lp_frameIndex].lv_deathTimerFramePlayer = 0;
    libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][lp_frameIndex].lv_deathTimerFramePortrait = null;
    libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][lp_frameIndex].lv_deathTimerFrameUnit = null;
    libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][lp_frameIndex].lv_deathTimerFrameUnitName = null;
    libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][lp_frameIndex].lv_deathTimerFrameDeathTimer = null;
    DialogControlSendAnimationEvent(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrame[lp_team][lp_frameIndex], PlayerGroupAll(), "TransitionOut");
    libUIUI_gf_DeathTimerPanelRemoveFrameFromGroup(lp_team, libUIUI_gf_DeathTimerPanelGetGroupOfFrame(lp_team, lp_frameIndex), lp_frameIndex);
}

void libUIUI_gf_DeathTimerPanelUnregisterTimer (int lp_team, timer lp_timer) {
    int autoB92FD74A_ae;
    int autoB92FD74A_ai;

    // Variable Declarations
    int lv_itFrame;
    int lv_frameIndex;

    // Variable Initialization
    lv_frameIndex = -1;

    // Implementation
    autoB92FD74A_ae = libUIUI_gv_deathTimerPanel_MaxFrameCount;
    autoB92FD74A_ai = 1;
    lv_itFrame = 1;
    for ( ; ( (autoB92FD74A_ai >= 0 && lv_itFrame <= autoB92FD74A_ae) || (autoB92FD74A_ai <= 0 && lv_itFrame >= autoB92FD74A_ae) ) ; lv_itFrame += autoB92FD74A_ai ) {
        if ((libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][lv_itFrame].lv_deathTimerFrameDeathTimer == lp_timer)) {
            lv_frameIndex = lv_itFrame;
        }

    }
    if ((lv_frameIndex == -1)) {
        return ;
    }

    if ((libGame_gv_gameOver == true)) {
        return ;
    }

    libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][lv_frameIndex].lv_deathTimerFramePlayer = 0;
    libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][lv_frameIndex].lv_deathTimerFramePortrait = null;
    libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][lv_frameIndex].lv_deathTimerFrameUnit = null;
    libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][lv_frameIndex].lv_deathTimerFrameUnitName = null;
    libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][lv_frameIndex].lv_deathTimerFrameDeathTimer = null;
    DialogControlSendAnimationEvent(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrame[lp_team][lv_frameIndex], PlayerGroupAll(), "TransitionOut");
    libUIUI_gf_DeathTimerPanelRemoveFrameFromGroup(lp_team, libUIUI_gf_DeathTimerPanelGetGroupOfFrame(lp_team, lv_frameIndex), lv_frameIndex);
}

void libUIUI_gf_DeathTimerPanelPlayerDeathTimerChanges (int lp_player, unit lp_unit) {
    int autoD6E5649C_ae;
    int autoD6E5649C_ai;

    // Variable Declarations
    int lv_itFrame;
    int lv_team;
    int lv_frameIndex;
    int lv_group;

    // Variable Initialization

    // Implementation
    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);
    autoD6E5649C_ae = libUIUI_gv_deathTimerPanel_MaxFrameCount;
    autoD6E5649C_ai = 1;
    lv_itFrame = 1;
    for ( ; ( (autoD6E5649C_ai >= 0 && lv_itFrame <= autoD6E5649C_ae) || (autoD6E5649C_ai <= 0 && lv_itFrame >= autoD6E5649C_ae) ) ; lv_itFrame += autoD6E5649C_ai ) {
        if ((libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lv_team][lv_itFrame].lv_deathTimerFrameUnit == lp_unit)) {
            lv_frameIndex = lv_itFrame;
        }

    }
    if ((lv_frameIndex == 0)) {
        return ;
    }

    lv_group = libUIUI_gf_DeathTimerPanelGetGroupOfFrame(lv_team, lv_frameIndex);
    libUIUI_gf_DeathTimerPanelRemoveFrameFromGroup(lv_team, lv_group, lv_frameIndex);
    libUIUI_gf_DeathTimerPanelAddFrameToGroup(lv_team, libUIUI_gf_DeathTimerPanelFindAppropriateGroupForFrame(lv_team, lv_frameIndex, TimerGetRemaining(libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lv_team][lv_frameIndex].lv_deathTimerFrameDeathTimer)), lv_frameIndex);
}

void libUIUI_gf_DeathTimerPanelSlideGroupOutForPlayer (int lp_team, int lp_group, int lp_player) {
    int auto2FE8919C_ae;
    int auto2FE8919C_ai;

    // Variable Declarations
    int lv_itLayer;
    int lv_framesInGroup;
    int lv_frameIndex;

    // Variable Initialization

    // Implementation
    if ((libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lp_group].lv_slideOut[lp_player] == true)) {
        return ;
    }

    lv_framesInGroup = libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lp_group].lv_frameCount;
    if ((lv_framesInGroup <= 0)) {
        return ;
    }

    libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lp_group].lv_slideOut[lp_player] = true;
    auto2FE8919C_ae = lv_framesInGroup;
    auto2FE8919C_ai = 1;
    lv_itLayer = 1;
    for ( ; ( (auto2FE8919C_ai >= 0 && lv_itLayer <= auto2FE8919C_ae) || (auto2FE8919C_ai <= 0 && lv_itLayer >= auto2FE8919C_ae) ) ; lv_itLayer += auto2FE8919C_ai ) {
        lv_frameIndex = libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lp_group].lv_frames[lv_itLayer];
        DialogControlSetVisible(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrameHeroNameLabel[lp_team][lv_frameIndex], libCore_gv_playerGroupFromPlayer[lp_player], true);
        DialogControlSendAnimationEvent(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrame[lp_team][lv_frameIndex], libCore_gv_playerGroupFromPlayer[lp_player], ("SlideOut" + IntToString(lv_itLayer)));
    }
}

void libUIUI_gf_DeathTimerPanelCollapseGroupForPlayer (int lp_team, int lp_group, int lp_player) {
    int auto220ED1CE_ae;
    int auto220ED1CE_ai;

    // Variable Declarations
    int lv_itLayer;
    int lv_framesInGroup;
    int lv_frameIndex;

    // Variable Initialization

    // Implementation
    if ((libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lp_group].lv_slideOut[lp_player] == false)) {
        return ;
    }

    libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lp_group].lv_slideOut[lp_player] = false;
    lv_framesInGroup = libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lp_group].lv_frameCount;
    if ((lv_framesInGroup <= 0)) {
        return ;
    }

    auto220ED1CE_ae = lv_framesInGroup;
    auto220ED1CE_ai = 1;
    lv_itLayer = 1;
    for ( ; ( (auto220ED1CE_ai >= 0 && lv_itLayer <= auto220ED1CE_ae) || (auto220ED1CE_ai <= 0 && lv_itLayer >= auto220ED1CE_ae) ) ; lv_itLayer += auto220ED1CE_ai ) {
        lv_frameIndex = libUIUI_gv_deathTimerPanel_TimerGroups[lp_team][lp_group].lv_frames[lv_itLayer];
        DialogControlSetVisible(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrameHeroNameLabel[lp_team][lv_frameIndex], libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSendAnimationEvent(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrame[lp_team][lv_frameIndex], libCore_gv_playerGroupFromPlayer[lp_player], ("Collapse" + IntToString(lv_itLayer)));
    }
}

void libUIUI_gf_DeathTimerPanelUpdatePortraitsForTeam (int lp_team) {
    int autoEAA3A032_ae;
    int autoEAA3A032_ai;
    int auto44F88160_ae;
    int auto44F88160_ai;

    // Variable Declarations
    int lv_itFrameIndex;
    int lv_player;
    fixed lv_deathTimeRemaining;
    bool lv_firstTooltipText;
    text lv_tooltipText;
    int lv_framePosition;
    text lv_heroName;
    int lv_otherTeam;
    bool[libUIUI_gv_deathTimerPanel_MaxFrameCount + 1] lv_unregisterFrame;

    // Variable Initialization
    lv_firstTooltipText = true;

    // Implementation
    autoEAA3A032_ae = libUIUI_gv_deathTimerPanel_MaxFrameCount;
    autoEAA3A032_ai = 1;
    lv_itFrameIndex = 1;
    for ( ; ( (autoEAA3A032_ai >= 0 && lv_itFrameIndex <= autoEAA3A032_ae) || (autoEAA3A032_ai <= 0 && lv_itFrameIndex >= autoEAA3A032_ae) ) ; lv_itFrameIndex += autoEAA3A032_ai ) {
        if ((libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][lv_itFrameIndex].lv_deathTimerFramePlayer == 0)) {
            continue;
        }

        lv_player = libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][lv_itFrameIndex].lv_deathTimerFramePlayer;
        lv_deathTimeRemaining = TimerGetRemaining(libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][lv_itFrameIndex].lv_deathTimerFrameDeathTimer);
        if ((lv_firstTooltipText == true)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_6039A51E", "A", libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][lv_itFrameIndex].lv_deathTimerFrameUnitName);
            TextExpressionSetToken("Param/Expression/lib_UIUI_6039A51E", "B", FixedToText(lv_deathTimeRemaining, 0));
            lv_tooltipText = (lv_tooltipText + TextExpressionAssemble("Param/Expression/lib_UIUI_6039A51E"));
            lv_firstTooltipText = false;
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_283F4499", "A", libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][lv_itFrameIndex].lv_deathTimerFrameUnitName);
            TextExpressionSetToken("Param/Expression/lib_UIUI_283F4499", "B", FixedToText(lv_deathTimeRemaining, 0));
            lv_tooltipText = (lv_tooltipText + TextExpressionAssemble("Param/Expression/lib_UIUI_283F4499"));
        }
        if ((lv_deathTimeRemaining > 0.0)) {
            lv_framePosition = FixedToInt((libUIUI_gv_deathTimerPanel_MaxBarWidth_C * (lv_deathTimeRemaining / libCore_gv_bALMaxDeathTime)));
            libNtve_gf_SetDialogItemText(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrameTimeLabel[lp_team][lv_itFrameIndex], FixedToText(lv_deathTimeRemaining, 0), PlayerGroupAll());
            lv_heroName = libUIUI_gv_deathTimerPanel_HeroesAssignedToFrame[lp_team][lv_itFrameIndex].lv_deathTimerFrameUnitName;
            TextExpressionSetToken("Param/Expression/lib_UIUI_F4A8E524", "A", lv_heroName);
            TextExpressionSetToken("Param/Expression/lib_UIUI_F4A8E524", "B", FixedToText(lv_deathTimeRemaining, 0));
            libNtve_gf_SetDialogItemText(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrameHeroNameLabel[lp_team][lv_itFrameIndex], TextExpressionAssemble("Param/Expression/lib_UIUI_F4A8E524"), PlayerGroupAll());
            if ((lv_deathTimeRemaining == libUIUI_gv_deathTimerPanel_NearRezTime_C)) {
                lv_otherTeam = (3 - lp_team);
                DialogControlSendAnimationEvent(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrame[lp_team][lv_itFrameIndex], libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers, "NearRezAlly");
                DialogControlSendAnimationEvent(libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrame[lp_team][lv_itFrameIndex], libGame_gv_teams[lv_otherTeam].lv_teamPlayerGroupNoNPCPlayers, "NearRezEnemy");
            }

            if ((UnitBehaviorDuration(libGame_gv_players[lv_player].lv_heroUnit, "GuldanDarkBargainDuration") == libUIUI_gv_deathTimerPanel_NearRezTime_C)) {
                DialogControlSendAnimationEvent(libUIUI_gv_deathTimerPanel.lv_timerBarDarkBargainBorder[lp_team][lv_itFrameIndex], PlayerGroupAll(), "Flash");
            }

        }
        else {
            lv_unregisterFrame[lv_itFrameIndex] = true;
        }
    }
    auto44F88160_ae = libUIUI_gv_deathTimerPanel_MaxFrameCount;
    auto44F88160_ai = 1;
    lv_itFrameIndex = 1;
    for ( ; ( (auto44F88160_ai >= 0 && lv_itFrameIndex <= auto44F88160_ae) || (auto44F88160_ai <= 0 && lv_itFrameIndex >= auto44F88160_ae) ) ; lv_itFrameIndex += auto44F88160_ai ) {
        if ((lv_unregisterFrame[lv_itFrameIndex] == true)) {
            libUIUI_gf_DeathTimerPanelUnregisterDeath(lp_team, lv_itFrameIndex);
        }

    }
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_deathTimerPanel.lv_timerBar[lp_team], lv_tooltipText, PlayerGroupAll());
}

void libUIUI_gf_DeathTimerPanelUpdateTeamDeathTimeIndicatorForTeam (int lp_team) {
    int autoDF2B5C53_ae;
    int autoDF2B5C53_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_level;
    fixed lv_deathTime;
    int lv_timerBarWidth;

    // Variable Initialization

    // Implementation
    lv_level = libGame_gv_teams[lp_team].lv_teamLevel;
    if ((lv_level == 1) && (libCore_gv_sYSGameMode != libCore_ge_GameModes_Tutorial1Deprecated) && (libUIUI_gv_deathTimerPane_Enabled == true)) {
        autoDF2B5C53_ae = libCore_gv_bALMaxPlayers;
        autoDF2B5C53_ai = 1;
        lv_itPlayer = 1;
        for ( ; ( (autoDF2B5C53_ai >= 0 && lv_itPlayer <= autoDF2B5C53_ae) || (autoDF2B5C53_ai <= 0 && lv_itPlayer >= autoDF2B5C53_ae) ) ; lv_itPlayer += autoDF2B5C53_ai ) {
            libUIUI_gf_DeathTimerPanelShowHideTeamsPanelForPlayer(true, lp_team, lv_itPlayer);
        }
    }

    lv_deathTime = libCore_gf_HeroDeathTime(libCore_gv_cOMPUTER_Neutral, lv_level);
    if (((libCore_gv_sYSGameMode == libCore_ge_GameModes_ArenaMode) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_AttackDefend))) {
        lv_timerBarWidth = libUIUI_gv_deathTimerPanel_MaxBarWidth_C;
    }
    else {
        lv_timerBarWidth = FixedToInt(((lv_deathTime/libCore_gv_bALMaxDeathTime)*libUIUI_gv_deathTimerPanel_MaxBarWidth_C));
    }
    DialogControlSetSize(libUIUI_gv_deathTimerPanel.lv_timerBar[lp_team], PlayerGroupAll(), lv_timerBarWidth, libUIUI_gv_deathTimerPanel_BarHeight_C);
}

void libUIUI_gf_DeathTimerPanelPauseTimerAnimations () {
    int autoA53B2852_ae;
    int autoA53B2852_ai;

    // Variable Declarations
    int lv_itTeam;

    // Variable Initialization

    // Implementation
    autoA53B2852_ae = libCore_gv_bALMaxTeams;
    autoA53B2852_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (autoA53B2852_ai >= 0 && lv_itTeam <= autoA53B2852_ae) || (autoA53B2852_ai <= 0 && lv_itTeam >= autoA53B2852_ae) ) ; lv_itTeam += autoA53B2852_ai ) {
        DialogControlSendAnimationEvent(libUIUI_gv_deathTimerPanel.lv_mainPanel[lv_itTeam], PlayerGroupAll(), "AnimPause");
    }
}

void libUIUI_gf_UIDebugPanelShowHideDebugPanelForPlayer (bool lp_showHide, int lp_player) {
    playergroup auto1FE062EF_g;
    int auto1FE062EF_p;

    // Variable Declarations
    int lv_p;
    bool lv_playerIsUsingDebugPanel;

    // Variable Initialization

    // Implementation
    if ((libCore_gv_dEBUGDebuggingEnabled == false)) {
        return ;
    }

    if ((lp_showHide == true)) {
        DialogControlSetVisible(libUIUI_gv_uIDebugPanel.lv_mainDialog, libCore_gv_playerGroupFromPlayer[lp_player], true);
        TriggerEnable(libUIUI_gt_UIDebugPanelUpdate, true);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_uIDebugPanel.lv_mainDialog, libCore_gv_playerGroupFromPlayer[lp_player], false);
        auto1FE062EF_g = libCore_gv_activeHumanPlayers; 
        auto1FE062EF_p = 1;
        for ( ; auto1FE062EF_p <= PlayerGroupCount(auto1FE062EF_g) ; auto1FE062EF_p += (lv_p == PlayerGroupPlayer(auto1FE062EF_g, auto1FE062EF_p)) ) {
            lv_p = PlayerGroupPlayer(auto1FE062EF_g, auto1FE062EF_p);
            if ((DialogControlIsVisible(libUIUI_gv_uIDebugPanel.lv_mainDialog, lv_p) == true)) {
                lv_playerIsUsingDebugPanel = true;
                break;
            }

        }
        if ((lv_playerIsUsingDebugPanel == false)) {
            TriggerEnable(libUIUI_gt_UIDebugPanelUpdate, false);
        }

    }
}

void libUIUI_gf_UIDebugPanelSetUpMinionCompDropdown () {
    int auto85DDCEC0_ae;
    int auto85DDCEC0_ai;

    // Variable Declarations
    int lv_itMinionComp;

    // Variable Initialization

    // Implementation
    auto85DDCEC0_ae = libCore_gv_dataMinionWaveCompositionMaxCount;
    auto85DDCEC0_ai = 1;
    lv_itMinionComp = 1;
    for ( ; ( (auto85DDCEC0_ai >= 0 && lv_itMinionComp <= auto85DDCEC0_ae) || (auto85DDCEC0_ai <= 0 && lv_itMinionComp >= auto85DDCEC0_ae) ) ; lv_itMinionComp += auto85DDCEC0_ai ) {
        DialogControlAddItem(libUIUI_gv_uIDebugPanel.lv_forceMinionWaveCompDropdown, PlayerGroupAll(), libCore_gv_dataMinionWaveCompositions[lv_itMinionComp].lv_name);
    }
    DialogControlSelectItem(libUIUI_gv_uIDebugPanel.lv_forceMinionWaveCompDropdown, PlayerGroupAll(), 1);
}

trigger auto_libUIUI_gf_UIDebugPanelApplyOptionsfromBank_Trigger = null;

void libUIUI_gf_UIDebugPanelApplyOptionsfromBank () {
    if (auto_libUIUI_gf_UIDebugPanelApplyOptionsfromBank_Trigger == null) {
        auto_libUIUI_gf_UIDebugPanelApplyOptionsfromBank_Trigger = TriggerCreate("auto_libUIUI_gf_UIDebugPanelApplyOptionsfromBank_TriggerFunc");
    }

    TriggerExecute(auto_libUIUI_gf_UIDebugPanelApplyOptionsfromBank_Trigger, false, false);
}

bool auto_libUIUI_gf_UIDebugPanelApplyOptionsfromBank_TriggerFunc (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_skinIndex;
    int lv_mountIndex;
    int lv_variationIndex;
    fixed lv_xPValue;

    // Variable Initialization

    // Implementation
    if ((BankSectionExists(libGame_gv_players[1].lv_bankData.lv_bank, "Debug Menu Options") == true)) {
        if ((libCore_gf_LoadBankValueIfExistsAsBoolean(libUIUI_gv_uIDebugPanelShowAllCombatText, libGame_gv_players[1].lv_bankData.lv_bank, "ShowAllTextBoolean", "Debug Menu Options") == true)) {
            libNtve_gf_SetDialogItemChecked(libUIUI_gv_uIDebugPanel.lv_enableAllFloatingCombatTextCheckbox, true, PlayerGroupAll());
        }

        if ((libCore_gf_LoadBankValueIfExistsAsBoolean(libUIUI_gv_uIDebugPanelDisableTrickleXPToggle, libGame_gv_players[1].lv_bankData.lv_bank, "DisableTrickleXPBoolean", "Debug Menu Options") == true)) {
            libNtve_gf_SetDialogItemChecked(libUIUI_gv_uIDebugPanel.lv_disableTrickleXPCheckbox, true, PlayerGroupAll());
        }

        if ((libCore_gf_LoadBankValueIfExistsAsBoolean(libUIUI_gv_uIDebugPanelSpawnAtCamera, libGame_gv_players[1].lv_bankData.lv_bank, "SpawnAtCamera", "Debug Menu Options") == true)) {
            libNtve_gf_SetDialogItemChecked(libUIUI_gv_uIDebugPanel.lv_spawnAtCameraCheckbox, true, PlayerGroupAll());
        }

        if ((libCore_gf_LoadBankValueIfExistsAsBoolean(libUIUI_gv_uIDebugPanelDisableMinionSpawningToggle, libGame_gv_players[1].lv_bankData.lv_bank, "MinionSpawnsBoolean", "Debug Menu Options") == true)) {
            libNtve_gf_SetDialogItemChecked(libUIUI_gv_uIDebugPanel.lv_disableMinionSpawningCheckbox, true, PlayerGroupAll());
        }

        if ((libCore_gf_LoadBankValueIfExistsAsBoolean(libUIUI_gv_uIDebugPanelSavedHero, libGame_gv_players[1].lv_bankData.lv_bank, "SavedHero", "Debug Menu Options") == true)) {
            libNtve_gf_SetDialogItemChecked(libUIUI_gv_uIDebugPanel.lv_savedHeroCheckbox, true, PlayerGroupAll());
        }

        lv_heroIndex = libCore_gf_LoadBankValueIfExistsAsInteger(lv_heroIndex, libGame_gv_players[1].lv_bankData.lv_bank, "HeroIndex", "Debug Menu Options");
        if ((lv_heroIndex != 0)) {
            DialogControlSelectItem(libUIUI_gv_uIDebugPanel.lv_heroDropdown, PlayerGroupSingle(1), lv_heroIndex);
            TriggerWaitForTrigger(libUIUI_gt_UIDebugPanelHeroDropdownSelectionChange, true);
        }

        lv_skinIndex = libCore_gf_LoadBankValueIfExistsAsInteger(lv_skinIndex, libGame_gv_players[1].lv_bankData.lv_bank, "SkinIndex", "Debug Menu Options");
        if ((lv_skinIndex != 0)) {
            DialogControlSelectItem(libUIUI_gv_uIDebugPanel.lv_skinDropdown, PlayerGroupSingle(1), lv_skinIndex);
            TriggerWaitForTrigger(libUIUI_gt_UIDebugPanelSkinDropdownSelectionChange, true);
        }

        lv_mountIndex = libCore_gf_LoadBankValueIfExistsAsInteger(lv_mountIndex, libGame_gv_players[1].lv_bankData.lv_bank, "MountIndex", "Debug Menu Options");
        if ((lv_mountIndex != 0)) {
            DialogControlSelectItem(libUIUI_gv_uIDebugPanel.lv_mountDropdown, PlayerGroupSingle(1), lv_mountIndex);
            TriggerWaitForTrigger(libUIUI_gt_UIDebugPanelMountDropdownSelectionChange, true);
        }

        lv_variationIndex = libCore_gf_LoadBankValueIfExistsAsInteger(lv_variationIndex, libGame_gv_players[1].lv_bankData.lv_bank, "MountVariation", "Debug Menu Options");
        if ((lv_mountIndex != 0)) {
            DialogControlSelectItem(libUIUI_gv_uIDebugPanel.lv_mountVariationDropdown, PlayerGroupSingle(1), lv_variationIndex);
        }

    }

    return true;
}

void libUIUI_gf_UIDebugPanelSaveOptions (int lp_localPlayer) {
    // Variable Declarations
    bank lv_localBank;

    // Variable Initialization

    // Implementation
    lv_localBank = libGame_gv_players[lp_localPlayer].lv_bankData.lv_bank;
    BankLoad("PlayerSettings", lp_localPlayer);
    BankValueSetFromFlag(lv_localBank, "Debug Menu Options", "DisableTrickleXPBoolean", libUIUI_gv_uIDebugPanelDisableTrickleXPToggle);
    BankValueSetFromFlag(lv_localBank, "Debug Menu Options", "MinionSpawnsBoolean", libUIUI_gv_uIDebugPanelDisableMinionSpawningToggle);
    BankValueSetFromFlag(lv_localBank, "Debug Menu Options", "CombatTextBoolean", libUIUI_gv_uIDebugPanelFloatingCombatTextToggle);
    BankValueSetFromFlag(lv_localBank, "Debug Menu Options", "ShowAllTextBoolean", libUIUI_gv_uIDebugPanelShowAllCombatText);
    BankValueSetFromFlag(lv_localBank, "Debug Menu Options", "SpawnAtCamera", libUIUI_gv_uIDebugPanelSpawnAtCamera);
    BankValueSetFromFlag(lv_localBank, "Debug Menu Options", "SavedHero", libUIUI_gv_uIDebugPanelSavedHero);
    BankValueSetFromFixed(lv_localBank, "Debug Menu Options", "HeroLevelXP", libCore_gf_GetTotalXPForLevel(FixedToInt(libNtve_gf_DialogItemValue(libUIUI_gv_uIDebugPanel.lv_levelSlider, lp_localPlayer))));
    BankValueSetFromInt(lv_localBank, "Debug Menu Options", "HeroIndex", DialogControlGetSelectedItem(libUIUI_gv_uIDebugPanel.lv_heroDropdown, 1));
    BankValueSetFromInt(lv_localBank, "Debug Menu Options", "SkinIndex", DialogControlGetSelectedItem(libUIUI_gv_uIDebugPanel.lv_skinDropdown, 1));
    BankValueSetFromInt(lv_localBank, "Debug Menu Options", "MountIndex", DialogControlGetSelectedItem(libUIUI_gv_uIDebugPanel.lv_mountDropdown, 1));
    BankValueSetFromInt(lv_localBank, "Debug Menu Options", "MountVariation", DialogControlGetSelectedItem(libUIUI_gv_uIDebugPanel.lv_mountVariationDropdown, 1));
    BankValueSetFromInt(lv_localBank, "Debug Menu Options", "TrueHeroIndex", DialogControlGetSelectedItem(libUIUI_gv_uIDebugPanel.lv_heroDropdown, 1));
    BankValueSetFromInt(lv_localBank, "Debug Menu Options", "TrueSkinIndex", libCore_gf_DataSkinsGetSkinIndexFromSkinLink((DataTableGetString(true, ("HeroIndex_" + IntToString(DialogControlGetSelectedItem(libUIUI_gv_uIDebugPanel.lv_heroDropdown, 1)) + "_SkinIndex_" + IntToString(DialogControlGetSelectedItem(libUIUI_gv_uIDebugPanel.lv_skinDropdown, 1)))))));
    BankValueSetFromInt(lv_localBank, "Debug Menu Options", "TrueMountIndex", libCore_gf_DataMountGetMountConfigIndexFromMountLink((DataTableGetString(true, ("DEBUG_MountVariationList_Player_" + IntToString(lp_localPlayer) + "_ListIndex_" + IntToString(DialogControlGetSelectedItem(libUIUI_gv_uIDebugPanel.lv_mountVariationDropdown, 1)) + "_Index")))));
    BankSave(lv_localBank);
}

void libUIUI_gf_UIDebugPanelPopulateHeroDropdownForPlayer (int lp_player, bool lp_allHeroes) {
    int auto5870041B_ae;
    int auto5870041B_ai;

    // Variable Declarations
    int lv_itHeroIndex;
    int lv_itSortA;
    int lv_itSortB;
    int lv_itDropdownIndex;
    int lv_maxDropdownIndex;
    int lv_heroIndex;

    // Variable Initialization

    // Implementation
    DialogControlRemoveAllItems(libUIUI_gv_uIDebugPanel.lv_heroDropdown, libCore_gv_playerGroupFromPlayer[lp_player]);
    auto5870041B_ae = libCore_gv_dataHeroesNumberOfHeroes;
    auto5870041B_ai = 1;
    lv_itHeroIndex = 1;
    for ( ; ( (auto5870041B_ai >= 0 && lv_itHeroIndex <= auto5870041B_ae) || (auto5870041B_ai <= 0 && lv_itHeroIndex >= auto5870041B_ae) ) ; lv_itHeroIndex += auto5870041B_ai ) {
        DialogControlAddItem(libUIUI_gv_uIDebugPanel.lv_heroDropdown, libCore_gv_playerGroupFromPlayer[lp_player], StringExternal(("Hero/Name/" + DataTableGetString(true, ("HeroIndex_" + IntToString(lv_itHeroIndex))))));
    }
    DialogControlSelectItem(libUIUI_gv_uIDebugPanel.lv_heroDropdown, libCore_gv_playerGroupFromPlayer[lp_player], 1);
}

void libUIUI_gf_UIDebugPanelPopulateSkinDropdownForPlayer (int lp_player, int lp_heroIndex) {
    int autoAB36DC2D_ae;
    int autoAB36DC2D_ai;

    // Variable Declarations
    int lv_itSkin;
    int lv_skinIndex;
    int lv_dropdownIndex;
    string lv_skinID;
    string lv_skinLink;

    // Variable Initialization
    lv_skinID = "";

    // Implementation
    DialogControlRemoveAllItems(libUIUI_gv_uIDebugPanel.lv_skinDropdown, libCore_gv_playerGroupFromPlayer[lp_player]);
    autoAB36DC2D_ae = DataTableGetInt(true, ("HeroIndex_" + IntToString(lp_heroIndex) + "_SkinCount"));
    autoAB36DC2D_ai = 1;
    lv_itSkin = 1;
    for ( ; ( (autoAB36DC2D_ai >= 0 && lv_itSkin <= autoAB36DC2D_ae) || (autoAB36DC2D_ai <= 0 && lv_itSkin >= autoAB36DC2D_ae) ) ; lv_itSkin += autoAB36DC2D_ai ) {
        lv_skinID = DataTableGetString(true, ("HeroIndex_" + IntToString(lp_heroIndex) + "_SkinIndex_" + IntToString(lv_itSkin)));
        lv_skinLink = (lv_skinID);
        if ((lv_skinLink != null)) {
            DialogControlAddItem(libUIUI_gv_uIDebugPanel.lv_skinDropdown, libCore_gv_playerGroupFromPlayer[lp_player], StringExternal(("Skin/Name/" + lv_skinID)));
        }

    }
    DialogControlSelectItem(libUIUI_gv_uIDebugPanel.lv_skinDropdown, libCore_gv_playerGroupFromPlayer[lp_player], 1);
}

void libUIUI_gf_UIDebugPanelPopulateMountDropdownForPlayer (int lp_player, int lp_heroIndex) {
    int auto8FC14C0D_ae;
    int auto8FC14C0D_ai;
    int auto543A1363_ae;
    int auto543A1363_ai;

    // Variable Declarations
    int lv_itSortA;
    int lv_itSortB;
    int lv_itMount;
    int lv_skinIndex;
    int lv_mountIndex;
    int lv_itDropdownIndex;
    int lv_dropdownIndex;
    int lv_maxDropdownIndex;
    int lv_itMountCategory;
    string lv_mountCategoryStr;
    string lv_mountStr;
    string lv_heroIndexStr;
    int lv_mountCategoryCount;
    int lv_mountCount;

    // Variable Initialization
    lv_mountCategoryStr = "";
    lv_mountStr = "";
    lv_heroIndexStr = "";

    // Implementation
    DialogControlRemoveAllItems(libUIUI_gv_uIDebugPanel.lv_mountDropdown, libCore_gv_playerGroupFromPlayer[lp_player]);
    lv_heroIndexStr = IntToString(lp_heroIndex);
    lv_skinIndex = libCore_gf_DataSkinsGetSkinIndexFromSkinLink((DataTableGetString(true, ("HeroIndex_" + lv_heroIndexStr + "_SkinIndex_" + IntToString(DialogControlGetSelectedItem(libUIUI_gv_uIDebugPanel.lv_skinDropdown, lp_player))))));
    lv_mountCategoryCount = DataTableGetInt(true, ("HeroIndex_" + lv_heroIndexStr + "_MountCategoryCount"));
    auto8FC14C0D_ae = lv_mountCategoryCount;
    auto8FC14C0D_ai = 1;
    lv_itMountCategory = 1;
    for ( ; ( (auto8FC14C0D_ai >= 0 && lv_itMountCategory <= auto8FC14C0D_ae) || (auto8FC14C0D_ai <= 0 && lv_itMountCategory >= auto8FC14C0D_ae) ) ; lv_itMountCategory += auto8FC14C0D_ai ) {
        lv_mountCategoryStr = DataTableGetString(true, ("HeroIndex_" + lv_heroIndexStr + "_MountCategoryIndex_" + IntToString(lv_itMountCategory)));
        lv_mountCount = DataTableGetInt(true, ("Mounts_MountCategory_" + lv_mountCategoryStr + "_MountCount"));
        auto543A1363_ae = lv_mountCount;
        auto543A1363_ai = 1;
        lv_itMount = 1;
        for ( ; ( (auto543A1363_ai >= 0 && lv_itMount <= auto543A1363_ae) || (auto543A1363_ai <= 0 && lv_itMount >= auto543A1363_ae) ) ; lv_itMount += auto543A1363_ai ) {
            lv_mountStr = DataTableGetString(true, ("Mounts_MountCategory_" + lv_mountCategoryStr + "_Index_" + IntToString(lv_itMount) + "_ID"));
            lv_mountIndex = DataTableGetInt(true, ("Mounts_MountCategory_" + lv_mountCategoryStr + "_Index_" + IntToString(lv_itMount) + "_Index"));
            if ((libCore_gf_DataMountMountIsValidForHeroSkin(lp_heroIndex, lv_skinIndex, lv_mountIndex) == true) && (CatalogFieldValueGetAsInt(c_gameCatalogMount, lv_mountStr, "Flags[" + IntToString(1) + "]", c_playerAny) == 0)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_250AC2BD", "Category", StringToText(lv_mountCategoryStr));
                TextExpressionSetToken("Param/Expression/lib_UIUI_250AC2BD", "MountName", StringExternal(("Mount/Name/" + lv_mountStr)));
                DialogControlAddItem(libUIUI_gv_uIDebugPanel.lv_mountDropdown, libCore_gv_playerGroupFromPlayer[lp_player], TextExpressionAssemble("Param/Expression/lib_UIUI_250AC2BD"));
                lv_maxDropdownIndex += 1;
                DataTableSetInt(true, ("DEBUG_MountList_Player_" + IntToString(lp_player) + "_ListIndex_" + IntToString(lv_maxDropdownIndex) + "_Index"), lv_mountIndex);
            }

        }
    }
    DialogControlSelectItem(libUIUI_gv_uIDebugPanel.lv_mountDropdown, libCore_gv_playerGroupFromPlayer[lp_player], 1);
}

void libUIUI_gf_UIDebugPanelPopulateMountVariationDropdownForPlayer (int lp_player, int lp_mountIndex) {
    int auto3114FEC1_ae;
    int auto3114FEC1_ai;

    // Variable Declarations
    int lv_itMount;
    int lv_dropdownIndex;
    int lv_variationIndex;
    string lv_variationID;
    string lv_mountLink;

    // Variable Initialization
    lv_variationID = "";

    // Implementation
    DialogControlRemoveAllItems(libUIUI_gv_uIDebugPanel.lv_mountVariationDropdown, libCore_gv_playerGroupFromPlayer[lp_player]);
    if ((DialogControlGetItemCount(libUIUI_gv_uIDebugPanel.lv_mountDropdown, lp_player) <= 0)) {
        return ;
    }

    lv_mountLink = libCore_gf_DataSkinsGetMountLinkFromMountIndex(lp_mountIndex);
    DialogControlAddItem(libUIUI_gv_uIDebugPanel.lv_mountVariationDropdown, libCore_gv_playerGroupFromPlayer[lp_player], StringExternal(("Mount/Name/" + (lv_mountLink))));
    lv_dropdownIndex += 1;
    DataTableSetInt(true, ("DEBUG_MountVariationList_Player_" + IntToString(lp_player) + "_ListIndex_" + IntToString(lv_dropdownIndex) + "_Index"), lp_mountIndex);
    auto3114FEC1_ae = (CatalogFieldValueCount(c_gameCatalogMount, lv_mountLink, "VariationArray", c_playerAny) - 1);
    auto3114FEC1_ai = 1;
    lv_itMount = 0;
    for ( ; ( (auto3114FEC1_ai >= 0 && lv_itMount <= auto3114FEC1_ae) || (auto3114FEC1_ai <= 0 && lv_itMount >= auto3114FEC1_ae) ) ; lv_itMount += auto3114FEC1_ai ) {
        lv_variationID = CatalogFieldValueGet(c_gameCatalogMount, lv_mountLink, "VariationArray[" + IntToString(lv_itMount) + "]", c_playerAny);
        lv_variationIndex = libCore_gf_DataMountGetMountIndexFromMountLink((lv_variationID));
        DialogControlAddItem(libUIUI_gv_uIDebugPanel.lv_mountVariationDropdown, libCore_gv_playerGroupFromPlayer[lp_player], StringExternal(("Mount/Name/" + lv_variationID)));
        lv_dropdownIndex += 1;
        DataTableSetInt(true, ("DEBUG_MountVariationList_Player_" + IntToString(lp_player) + "_ListIndex_" + IntToString(lv_dropdownIndex) + "_Index"), lv_variationIndex);
    }
    DialogControlSelectItem(libUIUI_gv_uIDebugPanel.lv_mountVariationDropdown, libCore_gv_playerGroupFromPlayer[lp_player], 1);
}

trigger auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_Trigger = null;
int auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_lp_heroIndex;
int auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_lp_skinIndex;
int auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_lp_mountIndex;
fixed auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_lp_xP;
int auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_lp_player;
int auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_lp_debugMenuTriggeringPlayer;

void libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer (int lp_heroIndex, int lp_skinIndex, int lp_mountIndex, fixed lp_xP, int lp_player, int lp_debugMenuTriggeringPlayer) {
    auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_lp_heroIndex = lp_heroIndex;
    auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_lp_skinIndex = lp_skinIndex;
    auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_lp_mountIndex = lp_mountIndex;
    auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_lp_xP = lp_xP;
    auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_lp_player = lp_player;
    auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_lp_debugMenuTriggeringPlayer = lp_debugMenuTriggeringPlayer;

    if (auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_Trigger == null) {
        auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_Trigger = TriggerCreate("auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_TriggerFunc");
    }

    TriggerExecute(auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_Trigger, false, false);
}

bool auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_TriggerFunc (bool testConds, bool runActions) {
    int lp_heroIndex = auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_lp_heroIndex;
    int lp_skinIndex = auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_lp_skinIndex;
    int lp_mountIndex = auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_lp_mountIndex;
    fixed lp_xP = auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_lp_xP;
    int lp_player = auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_lp_player;
    int lp_debugMenuTriggeringPlayer = auto_libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer_lp_debugMenuTriggeringPlayer;

    int autoD550C213_ae;
    int autoD550C213_ai;
    unitgroup auto37A1631F_g;
    int auto37A1631F_u;
    unitgroup auto7BDA85F4_g;
    int auto7BDA85F4_u;
    int auto9208DEE2_ae;
    int auto9208DEE2_ai;
    int auto847DABC5_ae;
    int auto847DABC5_ai;

    // Variable Declarations
    unitgroup lv_cameraGroup;
    point lv_cameraCenter;
    int lv_itPlayer;
    unit lv_itUnit;
    bool lv_wasAI;
    int lv_itManualSpawnHero;
    bool lv_isManualSpawn;
    int lv_isManualSpawnIndex;
    int lv_index;
    int lv_itTier;

    // Variable Initialization
    lv_cameraGroup = UnitGroupEmpty();

    // Implementation
    libUIUI_gf_TemporarilyDisableSpawnHeroButton();
    if ((lp_debugMenuTriggeringPlayer > 0) && (lp_debugMenuTriggeringPlayer <= libCore_gv_bALMaxPlayers)) {
        lv_cameraCenter = CameraGetTarget(lp_debugMenuTriggeringPlayer);
    }

    libGame_gv_players[lp_player].lv_selectedSkin = lp_skinIndex;
    libGame_gv_players[lp_player].lv_selectedMount = lp_mountIndex;
    libCore_gf_DataMountsClearMountDataAtIndex(lp_player);
    if ((lp_mountIndex >= 1)) {
        libCore_gf_DataMountsLoadMountDataIntoIndex(libCore_gf_DataSkinsGetMountLinkFromMountIndex(lp_mountIndex), libCore_gf_DataMountGetMountModelScaleAtConfigIndex(libCore_gf_DataMountGetMountConfigIndexFromMountLink(libCore_gf_DataSkinsGetMountLinkFromMountIndex(lp_mountIndex))), libCore_gf_DataMountGetMountWalkAnimSpeedAtConfigIndex(libCore_gf_DataMountGetMountConfigIndexFromMountLink(libCore_gf_DataSkinsGetMountLinkFromMountIndex(lp_mountIndex))), libCore_gf_DataMountGetMountPoseAnimGroupAtConfigIndex(libCore_gf_DataMountGetMountConfigIndexFromMountLink(libCore_gf_DataSkinsGetMountLinkFromMountIndex(lp_mountIndex))), lp_player);
    }
    else {
        libCore_gf_DataMountsLoadMountDataIntoIndex(libCore_gf_DataSkinsGetMountLinkFromMountIndex(1), libCore_gf_DataMountGetMountModelScaleAtConfigIndex(libCore_gf_DataMountGetMountConfigIndexFromMountLink(libCore_gf_DataSkinsGetMountLinkFromMountIndex(1))), libCore_gf_DataMountGetMountWalkAnimSpeedAtConfigIndex(libCore_gf_DataMountGetMountConfigIndexFromMountLink(libCore_gf_DataSkinsGetMountLinkFromMountIndex(1))), libCore_gf_DataMountGetMountPoseAnimGroupAtConfigIndex(libCore_gf_DataMountGetMountConfigIndexFromMountLink(libCore_gf_DataSkinsGetMountLinkFromMountIndex(1))), lp_player);
    }
    libGame_gv_players[lp_player].lv_suppressLevelUpFXAndTeamXPTracking = true;
    if ((libGame_gv_players[lp_player].lv_heroIndex == 0)) {
        if ((libGame_gv_players[lp_player].lv_faction == libGame_ge_Faction_Order)) {
            PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, lp_player);
            PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_player);
        }
        else {
            PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, lp_player);
            PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_player);
        }
        autoD550C213_ae = libCore_gv_dataHeroesManualSpawnHeroesCount;
        autoD550C213_ai = 1;
        lv_itManualSpawnHero = 1;
        for ( ; ( (autoD550C213_ai >= 0 && lv_itManualSpawnHero <= autoD550C213_ae) || (autoD550C213_ai <= 0 && lv_itManualSpawnHero >= autoD550C213_ae) ) ; lv_itManualSpawnHero += autoD550C213_ai ) {
            if ((lp_heroIndex == libCore_gv_dataHeroesManualSpawnHeroIDs[lv_itManualSpawnHero].lv_heroIndex)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_D5E6D6D9", "A", IntToText(libCore_gf_GetHeroIndexForUnitType(UnitGetType(libGame_gv_players[lp_player].lv_heroUnit))));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_UIUI_D5E6D6D9"), true);
                lv_isManualSpawn = true;
                lv_isManualSpawnIndex = lv_itManualSpawnHero;
                break;
            }

        }
        libCore_gf_DataClearHeroDataAtIndex(lp_player);
        libCore_gf_DataClearSkinDataAtIndex(lp_player);
        libCore_gf_DataLoadHeroDataIntoIndex(libCore_gf_GetHeroFromIndex(lp_heroIndex), lp_player);
        libCore_gf_DataLoadSkinDataIntoIndex(libCore_gf_DataSkinsGetSkinLinkFromSkinCatalogIndex(lp_skinIndex), lp_player);
        if ((lv_isManualSpawn == true)) {
            libGame_gf_SendEventManualHeroSpawn(lp_player, libCore_gv_dataHeroesManualSpawnHeroIDs[lv_isManualSpawnIndex].lv_heroIndex, lp_xP);
        }
        else {
            lv_index = lp_player;
            libGame_gf_SpawnHero(lp_player, lv_index, libGame_gv_players[lp_player].lv_spawnPoint);
            libGame_gf_GrantXPToPlayer(lp_xP, lp_player, libGame_ge_XPSources_Debug);
        }
        if (((libCore_gv_sYSGameMode == libCore_ge_GameModes_Tutorial1) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_TutorialVeteran) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_Debug) || (TimerGetRemaining(libGame_gv_openTheGatesTimer) == 0.0))) {
            UnitBehaviorRemove(libGame_gv_players[lp_player].lv_heroUnit, "HeroGenericPregameAbilitySuppression", 1);
        }

        return true;
    }

    if ((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lp_player) == true)) {
        libAIAI_gf_HeroAIDisableAIForPlayer(lp_player);
        lv_wasAI = true;
    }

    libGame_gv_players[lp_player].lv_heroRequiresCustomRespawn = false;
    libGame_gf_TalentsRespecHeroForPlayer(lp_player);
    libGame_gf_RemoveLevelUpHeroStatsForPlayer(UnitGetType(libGame_gv_players[lp_player].lv_heroUnit), lp_player);
    libUIUI_gf_UIUnitStatusFramesResetUnitStatusFramesForPlayer(lp_player);
    libUIUI_gf_DeathTimerPanelUnregisterTimer(libGame_gf_TeamNumberOfPlayer(lp_player), libGame_gv_players[lp_player].lv_respawnTimer);
    libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay(false, lp_player);
    if ((TimerGetRemaining(libGame_gv_players[lp_player].lv_respawnTimer) > 0.0)) {
        TimerPause(libGame_gv_players[lp_player].lv_respawnTimer, true);
        TimerPause(libGame_gv_players[lp_player].lv_respawnSoundCueTimer, true);
    }

    UnitClearSelection(lp_player);
    PathDestroy(libGame_gv_players[lp_player].lv_pathDisplay);
    UnitSetCustomValue(libGame_gv_players[lp_player].lv_heroUnit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_HeroIsSwappingIndex), 1.0);
    UnitGroupRemove(libGame_gv_heroes, libGame_gv_players[lp_player].lv_heroUnit);
    UnitRemove(libGame_gv_players[lp_player].lv_heroUnit);
    auto37A1631F_g = libGame_gv_players[lp_player].lv_heroUnitGroup;
    auto37A1631F_u = 1;
    for ( ; auto37A1631F_u <= UnitGroupCount(auto37A1631F_g, c_unitCountAll) ; auto37A1631F_u += (lv_itUnit == UnitGroupUnit(auto37A1631F_g, auto37A1631F_u)) ) {
        lv_itUnit = UnitGroupUnit(auto37A1631F_g, auto37A1631F_u);
        AIRemovePlayerUnit(lv_itUnit);
        UnitRemove(lv_itUnit);
    }
    auto7BDA85F4_g = UnitGroup(null, lp_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7BDA85F4_u = 1;
    for ( ; auto7BDA85F4_u <= UnitGroupCount(auto7BDA85F4_g, c_unitCountAll) ; auto7BDA85F4_u += (lv_itUnit == UnitGroupUnit(auto7BDA85F4_g, auto7BDA85F4_u)) ) {
        lv_itUnit = UnitGroupUnit(auto7BDA85F4_g, auto7BDA85F4_u);
        UnitKill(lv_itUnit);
    }
    libGame_gv_players[lp_player].lv_heroUnit = null;
    UnitGroupClear(libGame_gv_players[lp_player].lv_heroUnitGroup);
    UISetCommandAllowed(PlayerGroupSingle(lp_player), c_uiCommandAllowQueue, true);
    auto9208DEE2_ae = libCore_gv_dataHeroesManualSpawnHeroesCount;
    auto9208DEE2_ai = 1;
    lv_itManualSpawnHero = 1;
    for ( ; ( (auto9208DEE2_ai >= 0 && lv_itManualSpawnHero <= auto9208DEE2_ae) || (auto9208DEE2_ai <= 0 && lv_itManualSpawnHero >= auto9208DEE2_ae) ) ; lv_itManualSpawnHero += auto9208DEE2_ai ) {
        if ((lp_heroIndex == libCore_gv_dataHeroesManualSpawnHeroIDs[lv_itManualSpawnHero].lv_heroIndex)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_9ACCB7DC", "A", IntToText(lp_heroIndex));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_UIUI_9ACCB7DC"), true);
            lv_isManualSpawn = true;
            lv_isManualSpawnIndex = lv_itManualSpawnHero;
            break;
        }

    }
    libCore_gf_DataClearHeroDataAtIndex(lp_player);
    libCore_gf_DataClearSkinDataAtIndex(lp_player);
    libCore_gf_DataLoadHeroDataIntoIndex(libCore_gf_GetHeroFromIndex(lp_heroIndex), lp_player);
    libCore_gf_DataLoadSkinDataIntoIndex(libCore_gf_DataSkinsGetSkinLinkFromSkinCatalogIndex(lp_skinIndex), lp_player);
    auto847DABC5_ae = libCore_gv_talents_MaxTiers_C;
    auto847DABC5_ai = 1;
    lv_itTier = 1;
    for ( ; ( (auto847DABC5_ai >= 0 && lv_itTier <= auto847DABC5_ae) || (auto847DABC5_ai <= 0 && lv_itTier >= auto847DABC5_ae) ) ; lv_itTier += auto847DABC5_ai ) {
        libGame_gv_talents_TalentChoices[lp_player][lv_itTier].lv_numberOfTalentsForThisTier = 0;
    }
    if ((lv_isManualSpawn == true)) {
        libGame_gf_SendEventManualHeroSpawn(lp_player, libCore_gv_dataHeroesManualSpawnHeroIDs[lv_isManualSpawnIndex].lv_heroIndex, lp_xP);
    }
    else {
        lv_index = lp_player;
        if (((libUIUI_gv_uIDebugPanelSpawnAtCamera == false) || ((lp_debugMenuTriggeringPlayer > 0) && (lp_debugMenuTriggeringPlayer <= libCore_gv_bALMaxPlayers)))) {
            libGame_gf_SpawnHero(lp_player, lv_index, libGame_gv_players[lp_player].lv_spawnPoint);
        }
        else {
            libGame_gv_players[lp_player].lv_CameraCenterPoint = lv_cameraCenter;
            libGame_gf_SpawnHero(lp_player, lv_index, libGame_gv_players[lp_player].lv_CameraCenterPoint);
        }
        libGame_gf_GrantXPToPlayer(lp_xP, lp_player, libGame_ge_XPSources_Debug);
    }
    libGame_gf_SendEventDebugHeroSwapped(lp_player);
    Wait(0.125, c_timeGame);
    libGame_gv_players[lp_player].lv_suppressLevelUpFXAndTeamXPTracking = false;
    if ((lv_wasAI == true)) {
        libAIAI_gf_HeroAIEnableAIForPlayer(lp_player);
    }

    if (((libCore_gv_sYSGameMode == libCore_ge_GameModes_Tutorial1) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_TutorialVeteran) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_Debug) || (TimerGetRemaining(libGame_gv_openTheGatesTimer) == 0.0))) {
        UnitBehaviorRemove(libGame_gv_players[lp_player].lv_heroUnit, "HeroGenericPregameAbilitySuppression", 1);
    }

    return true;
}

trigger auto_libUIUI_gf_TemporarilyDisableSpawnHeroButton_Trigger = null;

void libUIUI_gf_TemporarilyDisableSpawnHeroButton () {
    if (auto_libUIUI_gf_TemporarilyDisableSpawnHeroButton_Trigger == null) {
        auto_libUIUI_gf_TemporarilyDisableSpawnHeroButton_Trigger = TriggerCreate("auto_libUIUI_gf_TemporarilyDisableSpawnHeroButton_TriggerFunc");
    }

    TriggerExecute(auto_libUIUI_gf_TemporarilyDisableSpawnHeroButton_Trigger, false, false);
}

bool auto_libUIUI_gf_TemporarilyDisableSpawnHeroButton_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_spawnHeroButton, PlayerGroupAll(), false);
    Wait(0.25, c_timeGame);
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_spawnHeroButton, PlayerGroupAll(), true);
    return true;
}

void libUIUI_gf_AssignMVPStattoNextUISlot (text lp_statLabel, text lp_statAmount, text lp_bestLabel) {
    int autoFC5C42FC_val;

    // Variable Declarations
    int lv_bestInGameFrame;
    int lv_bestInGameLabel;

    // Variable Initialization
    lv_bestInGameFrame = c_invalidDialogControlId;
    lv_bestInGameLabel = c_invalidDialogControlId;

    // Implementation
    libGame_gv_currentMVPStatSlot += 1;
    autoFC5C42FC_val = libGame_gv_currentMVPStatSlot;
    if (autoFC5C42FC_val == 1) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat1NameLabel, lp_statLabel, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat1ValueLabel, lp_statAmount, PlayerGroupAll());
        DialogControlHookup(libUIUI_gv_uIMVPWinnerPanel.lv_statsPanel, c_triggerControlTypePanel, "BestInGame1");
        lv_bestInGameFrame = DialogControlLastCreated();
    }
    else if (autoFC5C42FC_val == 2) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat2NameLabel, lp_statLabel, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat2ValueLabel, lp_statAmount, PlayerGroupAll());
        DialogControlHookup(libUIUI_gv_uIMVPWinnerPanel.lv_statsPanel, c_triggerControlTypePanel, "BestInGame2");
        lv_bestInGameFrame = DialogControlLastCreated();
    }
    else if (autoFC5C42FC_val == 3) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat3NameLabel, lp_statLabel, PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat3ValueLabel, lp_statAmount, PlayerGroupAll());
        DialogControlHookup(libUIUI_gv_uIMVPWinnerPanel.lv_statsPanel, c_triggerControlTypePanel, "BestInGame3");
        lv_bestInGameFrame = DialogControlLastCreated();
    }
    else {
    }
    if ((lp_bestLabel != null)) {
        DialogControlHookup(lv_bestInGameFrame, c_triggerControlTypeLabel, "Label");
        lv_bestInGameLabel = DialogControlLastCreated();
        DialogControlSetVisible(lv_bestInGameFrame, PlayerGroupAll(), true);
        libNtve_gf_SetDialogItemText(lv_bestInGameLabel, lp_bestLabel, PlayerGroupAll());
    }

}

void libUIUI_gf_UIEndofMatchAwardsSetMVPColor (int lp_teamId) {
    playergroup auto263DF57D_g;
    int auto263DF57D_p;
    playergroup auto6D84BA56_g;
    int auto6D84BA56_p;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itPlayerBlueTeam;

    // Variable Initialization

    // Implementation
    auto263DF57D_g = libGame_gf_EnemyPlayerGroupOfPlayer(libGame_gv_mVPPlayer); 
    auto263DF57D_p = 1;
    for ( ; auto263DF57D_p <= PlayerGroupCount(auto263DF57D_g) ; auto263DF57D_p += (lv_itPlayer == PlayerGroupPlayer(auto263DF57D_g, auto263DF57D_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto263DF57D_g, auto263DF57D_p);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_mVPHeading, "MVP_Heading_Red", libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_playerNameLabel, "MVP_PlayerNameHeading_Red", libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat3ValueLabel, "MVP_StatValue_Red", libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat3NameLabel, "MVP_StatHeading_Left_Red", libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat2ValueLabel, "MVP_StatValue_Red", libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat2NameLabel, "MVP_StatHeading_Left_Red", libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat1ValueLabel, "MVP_StatValue_Red", libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat1NameLabel, "MVP_StatHeading_Left_Red", libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_heroNameLabel, "MVP_HeroNameHeading_Red", libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_killsLabel, "MVP_StatHeading_Red", libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_killsValueLabel, "MVP_KDAValue_Red", libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_deathsLabel, "MVP_StatHeading_Red", libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_deathsValueLabel, "MVP_KDAValue_Red", libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_assistsLabel, "MVP_StatHeading_Red", libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_assistsValueLabel, "MVP_KDAValue_Red", libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        DialogControlSetVisible(libUIUI_gv_uIMVPWinnerPanel.lv_separatorImage_R, libCore_gv_playerGroupFromPlayer[lv_itPlayer], true);
        DialogControlSetVisible(libUIUI_gv_uIMVPWinnerPanel.lv_separatorImage_B, libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[0].lv_heroCutscene, libCore_gv_playerGroupFromPlayer[lv_itPlayer], "TeamColor", "Red");
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[0].lv_panelContainer, libCore_gv_playerGroupFromPlayer[lv_itPlayer], "ColorState", "Red");
    }
    if ((lp_teamId == libGame_gv_teamChaosIndex_C)) {
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_mVPHeading, "MVP_Heading_Red", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_playerNameLabel, "MVP_PlayerNameHeading_Red", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat3ValueLabel, "MVP_StatValue_Red", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat3NameLabel, "MVP_StatHeading_Red", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat2ValueLabel, "MVP_StatValue_Red", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat2NameLabel, "MVP_StatHeading_Red", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat1ValueLabel, "MVP_StatValue_Red", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat1NameLabel, "MVP_StatHeading_Red", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_heroNameLabel, "MVP_HeroNameHeading_Red", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_killsLabel, "MVP_StatHeading_Red", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_killsValueLabel, "MVP_StatValue_Red", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_deathsLabel, "MVP_StatHeading_Red", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_deathsValueLabel, "MVP_StatValue_Red", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_assistsLabel, "MVP_StatHeading_Red", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_uIMVPWinnerPanel.lv_assistsValueLabel, "MVP_StatValue_Red", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        DialogControlSetVisible(libUIUI_gv_uIMVPWinnerPanel.lv_separatorImage_R, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        DialogControlSetVisible(libUIUI_gv_uIMVPWinnerPanel.lv_separatorImage_B, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[0].lv_heroCutscene, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "TeamColor", "Red");
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[0].lv_panelContainer, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "ColorState", "Red");
    }
    else {
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[0].lv_heroCutscene, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "TeamColor", "Blue");
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[0].lv_panelContainer, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "ColorState", "Blue");
    }
    auto6D84BA56_g = libGame_gf_AlliedPlayerGroupOfPlayer(libGame_gv_mVPPlayer); 
    auto6D84BA56_p = 1;
    for ( ; auto6D84BA56_p <= PlayerGroupCount(auto6D84BA56_g) ; auto6D84BA56_p += (lv_itPlayerBlueTeam == PlayerGroupPlayer(auto6D84BA56_g, auto6D84BA56_p)) ) {
        lv_itPlayerBlueTeam = PlayerGroupPlayer(auto6D84BA56_g, auto6D84BA56_p);
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[0].lv_heroCutscene, libCore_gv_playerGroupFromPlayer[lv_itPlayerBlueTeam], "TeamColor", "Blue");
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[0].lv_panelContainer, libCore_gv_playerGroupFromPlayer[lv_itPlayerBlueTeam], "ColorState", "Blue");
    }
}

void libUIUI_gf_UIEndofMatchAwardsSetSecondaryAwardColor (int lp_awardSlot, int lp_opposingTeamId) {
    playergroup autoDA051515_g;
    int autoDA051515_p;
    playergroup auto20460FF4_g;
    int auto20460FF4_p;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itPlayerBlue;

    // Variable Initialization

    // Implementation
    autoDA051515_g = GameAttributePlayersForTeam(lp_opposingTeamId); 
    autoDA051515_p = 1;
    for ( ; autoDA051515_p <= PlayerGroupCount(autoDA051515_g) ; autoDA051515_p += (lv_itPlayer == PlayerGroupPlayer(autoDA051515_g, autoDA051515_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoDA051515_g, autoDA051515_p);
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lp_awardSlot].lv_heroCutscene, libCore_gv_playerGroupFromPlayer[lv_itPlayer], "TeamColor", "Red");
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lp_awardSlot].lv_panelContainer, libCore_gv_playerGroupFromPlayer[lv_itPlayer], "ColorState", "Red");
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lp_awardSlot].lv_panelContainer, libCore_gv_playerGroupFromPlayer[lv_itPlayer], "AwardLabelsColor", "Red");
    }
    if ((lp_opposingTeamId == libGame_gv_teamOrderIndex_C)) {
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lp_awardSlot].lv_heroCutscene, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "TeamColor", "Red");
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lp_awardSlot].lv_panelContainer, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "ColorState", "Red");
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lp_awardSlot].lv_panelContainer, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "AwardLabelsColor", "Red");
    }
    else {
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lp_awardSlot].lv_heroCutscene, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "TeamColor", "Blue");
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lp_awardSlot].lv_panelContainer, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "ColorState", "Blue");
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lp_awardSlot].lv_panelContainer, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "AwardLabelsColor", "Blue");
    }
    auto20460FF4_g = PlayerGroupAlliance(c_playerGroupEnemy, lv_itPlayer); 
    auto20460FF4_p = 1;
    for ( ; auto20460FF4_p <= PlayerGroupCount(auto20460FF4_g) ; auto20460FF4_p += (lv_itPlayerBlue == PlayerGroupPlayer(auto20460FF4_g, auto20460FF4_p)) ) {
        lv_itPlayerBlue = PlayerGroupPlayer(auto20460FF4_g, auto20460FF4_p);
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lp_awardSlot].lv_heroCutscene, libCore_gv_playerGroupFromPlayer[lv_itPlayerBlue], "TeamColor", "Blue");
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lp_awardSlot].lv_panelContainer, libCore_gv_playerGroupFromPlayer[lv_itPlayerBlue], "ColorState", "Blue");
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lp_awardSlot].lv_panelContainer, libCore_gv_playerGroupFromPlayer[lv_itPlayerBlue], "AwardLabelsColor", "Blue");
    }
}

void libUIUI_gf_UIEndofMatchAwardsSetSecondaryAwardBadge (int lp_awardSlot, int lp_playerID) {
    // Variable Declarations
    string lv_iconStateBlue;
    string lv_iconStateRed;

    // Variable Initialization
    lv_iconStateBlue = "";
    lv_iconStateRed = "";

    // Implementation
    lv_iconStateBlue = (libGame_gv_finalSecondaryAwardsList[lp_awardSlot].lv_awardBadgeIndex + "0");
    lv_iconStateRed = (libGame_gv_finalSecondaryAwardsList[lp_awardSlot].lv_awardBadgeIndex + "1");
    DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lp_awardSlot].lv_awardIcon, libCore_gv_playerGroupFromPlayer[lp_playerID], "IconState", lv_iconStateBlue);
    DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lp_awardSlot].lv_awardIcon, GameAttributePlayersForTeam(libGame_gf_TeamNumberOfPlayer(lp_playerID)), "IconState", lv_iconStateBlue);
    DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lp_awardSlot].lv_awardIcon, GameAttributePlayersForTeam(libGame_gf_EnemyTeamNumberOfPlayer(lp_playerID)), "IconState", lv_iconStateRed);
    if ((libGame_gf_TeamNumberOfPlayer(lp_playerID) == libGame_gv_teamOrderIndex_C)) {
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lp_awardSlot].lv_awardIcon, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "IconState", lv_iconStateBlue);
    }
    else {
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lp_awardSlot].lv_awardIcon, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "IconState", lv_iconStateRed);
    }
}

void libUIUI_gf_UIEndofMatchAwardsMVPReveal () {
    int auto20787B14_ae;
    int auto20787B14_ai;
    int auto1013F341_ae;
    int auto1013F341_ai;

    // Variable Declarations
    int lv_mvpTeamId;
    int lv_itPlayer;
    int lv_iterator;
    int lv_winnerPlayerId;

    // Variable Initialization

    // Implementation
    Wait(5.0, c_timeGame);
    PlayerGroupLoopBegin(PlayerGroupAll());
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        if (((PlayerStatus(PlayerGroupLoopCurrent()) != c_playerStatusUnused) && (PlayerSkin(PlayerGroupLoopCurrent()) != libGame_gv_players[PlayerGroupLoopCurrent()].lv_skinData.lv_skinID))) {
            PlayerSetSkin(PlayerGroupLoopCurrent(), libGame_gv_players[PlayerGroupLoopCurrent()].lv_skinData.lv_skinID);
        }

    }
    PlayerGroupLoopEnd();
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMVPWinnerPanel.lv_heroNameLabel, libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_heroName, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_EndofGameAwardsPanel.lv_mVPSecondaryHeroName, libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_heroName, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMVPWinnerPanel.lv_playerNameLabel, libGame_gv_players[libGame_gv_mVPPlayer].lv_name, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_EndofGameAwardsPanel.lv_mVPSecondaryPlayerName, libGame_gv_players[libGame_gv_mVPPlayer].lv_name, PlayerGroupAll());
    libNtve_gf_SetDialogItemPlayerId(libUIUI_gv_uIMVPSecondaryPanels[0].lv_heroCutscene, libGame_gv_mVPPlayer, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMVPWinnerPanel.lv_killsValueLabel, FixedToText(libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_kills, c_fixedPrecisionAny), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMVPWinnerPanel.lv_assistsValueLabel, FixedToText(libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_assists, c_fixedPrecisionAny), PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMVPWinnerPanel.lv_deathsValueLabel, FixedToText(libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_deaths, c_fixedPrecisionAny), PlayerGroupAll());
    lv_mvpTeamId = libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer);
    libUIUI_gf_UIEndofMatchAwardsSetMVPColor(lv_mvpTeamId);
    DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[0].lv_heroCutscene, PlayerGroupAll(), "AwardTier", "Tier0");
    SoundPlayForPlayer(SoundLink("UI_Game_MVP_Screen_Transition_To_MVP", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    DialogControlSetVisible(libUIUI_gv_EndofGameAwardsPanel.lv_skipButton, PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_EndofGameAwardsPanel.lv_mainPanel, PlayerGroupAll(), true);
    UISetWorldVisible(PlayerGroupAll(), false);
    Wait(1.717, c_timeGame);
    SoundPlayForPlayer(SoundLink("MVP_MVP", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    auto20787B14_ae = 4;
    auto20787B14_ai = 1;
    lv_iterator = 1;
    for ( ; ( (auto20787B14_ai >= 0 && lv_iterator <= auto20787B14_ae) || (auto20787B14_ai <= 0 && lv_iterator >= auto20787B14_ae) ) ; lv_iterator += auto20787B14_ai ) {
        if ((libGame_gv_finalSecondaryAwardsList[lv_iterator].lv_winner != 0)) {
            lv_winnerPlayerId = libGame_gv_finalSecondaryAwardsList[lv_iterator].lv_winner;
            libNtve_gf_SetDialogItemPlayerId(libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_heroCutscene, lv_winnerPlayerId, PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_awardTitleLabel, libGame_gv_finalSecondaryAwardsList[lv_iterator].lv_name, PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_awardStatLabel, libGame_gf_GetFinalAwardValueInfo(lv_winnerPlayerId, lv_iterator), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_heroNameLabel, UnitTypeGetName(UnitGetType(libGame_gv_players[lv_winnerPlayerId].lv_heroUnit)), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_playerNameLabel, libGame_gv_players[lv_winnerPlayerId].lv_name, PlayerGroupAll());
            DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_heroCutscene, PlayerGroupAll(), "AwardTier", "Tier0");
            libUIUI_gf_UIEndofMatchAwardsSetSecondaryAwardColor(lv_iterator, libGame_gf_EnemyTeamNumberOfPlayer(lv_winnerPlayerId));
            libUIUI_gf_UIEndofMatchAwardsSetSecondaryAwardBadge(lv_iterator, lv_winnerPlayerId);
            libNtve_gf_SetDialogItemTooltip(libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_awardTooltipHitbox, libGame_gf_GetAwardTooltipInfo(lv_winnerPlayerId, (libGame_gv_finalSecondaryAwardsList[lv_iterator].lv_awardIndex)), PlayerGroupAll());
        }

    }
    DialogControlSetVisible(libUIUI_gv_EndofGameAwardsPanel.lv_skipButton, PlayerGroupAll(), true);
    Wait(8.0, c_timeGame);
    auto1013F341_ae = libCore_gv_bALMaxPlayers;
    auto1013F341_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto1013F341_ai >= 0 && lv_itPlayer <= auto1013F341_ae) || (auto1013F341_ai <= 0 && lv_itPlayer >= auto1013F341_ae) ) ; lv_itPlayer += auto1013F341_ai ) {
        if ((libUIUI_gv_uIEndOfMatchAwardsPlayerHasSkipped[lv_itPlayer] == false)) {
            libUIUI_gf_UIEndofMatchAwardsSecondaryAwardsReveal(lv_itPlayer);
        }

    }
    if ((libUIUI_gv_uIEndOfMatchAwardsObserverHasSkipped == false)) {
        libUIUI_gf_UIEndofMatchAwardsSecondaryAwardsReveal(libCore_gv_oBSERVER_ObserverUIPlayer);
    }

    Wait(2.5, c_timeGame);
    libUIUI_gv_uIEndOfMatchAwardsMVPSequenceEnded = true;
    Wait(37.5, c_timeGame);
    DialogControlSendAnimationEvent(libUIUI_gv_EndofGameAwardsPanel.lv_mainPanel, PlayerGroupAll(), "CountDownToClosure");
    Wait(10.0, c_timeGame);
}

void libUIUI_gf_UIEndofMatchAwardsSecondaryAwardsReveal (int lp_playerID) {
    // Variable Declarations
    int lv_iterator;
    int lv_winnerPlayerId;
    playergroup lv_thisPlayerGroup;

    // Variable Initialization
    lv_thisPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_thisPlayerGroup = libCore_gv_playerGroupFromPlayer[lp_playerID];
    SoundPlayForPlayer(SoundLink("UI_Game_MVP_Screen_Transition_To_Vote", -1), c_maxPlayers, lv_thisPlayerGroup, 100.0, 0.0);
    DialogControlSendAnimationEvent(libUIUI_gv_EndofGameAwardsPanel.lv_mainPanel, lv_thisPlayerGroup, "WaitForSound");
    DialogControlSetVisible(libUIUI_gv_EndofGameAwardsPanel.lv_secondaryContainer, lv_thisPlayerGroup, true);
    libUIUI_gf_UIEndOfMatchAwardsSyncUpvoteStatus(lv_thisPlayerGroup);
    TriggerExecute(libUIUI_gt_UIEndofMatchAwardsForceSync, true, false);
}

void libUIUI_gf_UIEndOfMatchAwardsSyncUpvoteStatus (playergroup lp_thisPlayerGroup) {
    int auto4DACAD02_ae;
    int auto4DACAD02_ai;

    // Variable Declarations
    int lv_iterator;

    // Variable Initialization

    // Implementation
    if ((libUIUI_gv_uIEndOfMatchAwardsAnyVoteCast == true)) {
        auto4DACAD02_ae = 4;
        auto4DACAD02_ai = 1;
        lv_iterator = 0;
        for ( ; ( (auto4DACAD02_ai >= 0 && lv_iterator <= auto4DACAD02_ae) || (auto4DACAD02_ai <= 0 && lv_iterator >= auto4DACAD02_ae) ) ; lv_iterator += auto4DACAD02_ai ) {
            if ((libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_voteCount >= 1) && ((libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_voteCount < 4))) {
                DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_heroCutscene, lp_thisPlayerGroup, "SkipStatusFlags", "Tier0");
                libNtve_gf_SetDialogItemText(libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_voterButtonLabel, IntToText(libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_voteCount), lp_thisPlayerGroup);
            }
            else if ((libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_voteCount >= 4) && ((libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_voteCount < 8))) {
                libNtve_gf_SetDialogItemText(libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_voterButtonLabel, IntToText(libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_voteCount), lp_thisPlayerGroup);
                DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_heroCutscene, lp_thisPlayerGroup, "SkipStatusFlags", "Tier1");
            }
            else if ((libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_voteCount >= 8)) {
                libNtve_gf_SetDialogItemText(libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_voterButtonLabel, IntToText(libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_voteCount), lp_thisPlayerGroup);
                DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_heroCutscene, lp_thisPlayerGroup, "SkipStatusFlags", "Tier2");
                DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_panelContainer, lp_thisPlayerGroup, "ColorState", "Yellow");
                DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_panelContainer, lp_thisPlayerGroup, "AwardLabelsColor", "Yellow");
                DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lv_iterator].lv_awardIcon, lp_thisPlayerGroup, "IconState", (libGame_gv_finalSecondaryAwardsList[lv_iterator].lv_awardBadgeIndex + "2"));
            }
        }
    }

}

void libUIUI_gf_UIFloatingCombatTextCreateTextTag (int lp_displayPlayer, fixed lp_duration, text lp_text, unit lp_targetUnit, fixed lp_heightOffset, fixed lp_horizontalOffset, int lp_numberType, bool lp_obeyFogRules) {
    int autoFFE582C5_ae;
    int autoFFE582C5_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    if (((libUIUI_gv_uIDebugPanelShowAllCombatText == true) && (libCore_gv_dEBUGDebuggingEnabled == true))) {
        autoFFE582C5_ae = libCore_gv_bALMaxPlayers;
        autoFFE582C5_ai = 1;
        lv_itPlayer = 1;
        for ( ; ( (autoFFE582C5_ai >= 0 && lv_itPlayer <= autoFFE582C5_ae) || (autoFFE582C5_ai <= 0 && lv_itPlayer >= autoFFE582C5_ae) ) ; lv_itPlayer += autoFFE582C5_ai ) {
            libUIUI_gf_UIFloatingCombatTextCreateTextTagAtPosition(lv_itPlayer, lp_duration, lp_text, UnitGetPosition(lp_targetUnit), lp_heightOffset, lp_horizontalOffset, lp_numberType, lp_obeyFogRules);
        }
    }
    else {
        libUIUI_gf_UIFloatingCombatTextCreateTextTagAtPosition(lp_displayPlayer, lp_duration, lp_text, UnitGetPosition(lp_targetUnit), lp_heightOffset, lp_horizontalOffset, lp_numberType, lp_obeyFogRules);
    }
}

void libUIUI_gf_UIFloatingCombatTextCreateTextTagAtPosition (int lp_displayPlayer, fixed lp_duration, text lp_text, point lp_targetPosition, fixed lp_heightOffset, fixed lp_horizontalOffset, int lp_numberType, bool lp_obeyFogRules) {
    int autoA5E48E13_val;
    int auto8848A8C8_val;

    // Variable Declarations
    int lv_intensity;
    string lv_numberTypeString;
    string lv_fontStyleString;
    text lv_stormFontStyle;

    // Variable Initialization
    lv_intensity = 1;
    lv_numberTypeString = "";
    lv_fontStyleString = "";

    // Implementation
    if (((lp_displayPlayer < 0) || (lp_displayPlayer > libCore_gv_bALMaxEnginePlayerCount))) {
        return ;
    }

    autoA5E48E13_val = lp_numberType;
    if (autoA5E48E13_val == libCore_ge_FloatingTextType_NormalDamage) {
        lv_numberTypeString = "Damage";
        lv_intensity = 1;
    }
    else if (autoA5E48E13_val == libCore_ge_FloatingTextType_MediumDamage) {
        lv_numberTypeString = "Damage";
        lv_intensity = 2;
    }
    else if (autoA5E48E13_val == libCore_ge_FloatingTextType_HighDamage) {
        lv_numberTypeString = "Damage";
        lv_intensity = 3;
    }
    else if (autoA5E48E13_val == libCore_ge_FloatingTextType_InsaneDamage) {
        lv_numberTypeString = "Damage";
        lv_intensity = 4;
    }
    else if (autoA5E48E13_val == libCore_ge_FloatingTextType_BonusDamage) {
        lv_numberTypeString = "Damage";
        lv_intensity = 5;
    }
    else if (autoA5E48E13_val == libCore_ge_FloatingTextType_Healing) {
        lv_numberTypeString = "Health";
    }
    else if (autoA5E48E13_val == libCore_ge_FloatingTextType_Mana) {
        lv_numberTypeString = "Mana";
    }
    else if (autoA5E48E13_val == libCore_ge_FloatingTextType_NegativeStatus) {
        lv_numberTypeString = "Negative";
    }
    else if (autoA5E48E13_val == libCore_ge_FloatingTextType_PositiveStatus) {
        lv_numberTypeString = "Positive";
    }
    else if (autoA5E48E13_val == libCore_ge_FloatingTextType_XPSmall) {
        lv_numberTypeString = "XPSmall";
    }
    else if (autoA5E48E13_val == libCore_ge_FloatingTextType_XPMedium) {
        lv_numberTypeString = "XPMedium";
    }
    else if (autoA5E48E13_val == libCore_ge_FloatingTextType_XPLarge) {
        lv_numberTypeString = "XPLarge";
    }
    else if (autoA5E48E13_val == libCore_ge_FloatingTextType_Leashing) {
        lv_numberTypeString = "Negative";
    }
    else if (autoA5E48E13_val == libCore_ge_FloatingTextType_Countdown) {
        lv_numberTypeString = "Damage";
        lv_intensity = 5;
    }
    else if (autoA5E48E13_val == libCore_ge_FloatingTextType_Shield) {
        lv_numberTypeString = "Shield";
    }
    else {
    }
    lv_stormFontStyle = StringToText(("<s val=\"Storm_" + lv_numberTypeString + "_Kicker_" + IntToString(lv_intensity) + "\">"));
    auto8848A8C8_val = lp_numberType;
    if (auto8848A8C8_val == libCore_ge_FloatingTextType_Countdown) {
        if ((lp_displayPlayer == 0)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_A461D55C", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_A461D55C", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_A461D55C"), 30, lp_targetPosition, lp_heightOffset, true, lp_obeyFogRules, PlayerGroupAll());
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_40951B33", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_40951B33", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_40951B33"), 30, lp_targetPosition, lp_heightOffset, true, lp_obeyFogRules, libCore_gv_playerGroupFromPlayer[lp_displayPlayer]);
        }
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, libUIUI_gv_floatingCombatTextFadeDuration);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_duration);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    }
    else if (auto8848A8C8_val == libCore_ge_FloatingTextType_NormalDamage) {
        if ((lp_displayPlayer == 0)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_3640E111", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_3640E111", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_3640E111"), 15, lp_targetPosition, lp_heightOffset, true, lp_obeyFogRules, PlayerGroupAll());
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_42CACAFD", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_42CACAFD", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_42CACAFD"), 15, lp_targetPosition, lp_heightOffset, true, lp_obeyFogRules, libCore_gv_playerGroupFromPlayer[lp_displayPlayer]);
        }
        TextTagSetVelocity(TextTagLastCreated(), 0.75, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, libUIUI_gv_floatingCombatTextFadeDuration);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_duration);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    }
    else if (auto8848A8C8_val == libCore_ge_FloatingTextType_BonusDamage) {
        if ((lp_displayPlayer == 0)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_3CF247C9", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_3CF247C9", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_3CF247C9"), 7, lp_targetPosition, lp_heightOffset, true, lp_obeyFogRules, PlayerGroupAll());
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_B9E44C77", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_B9E44C77", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_B9E44C77"), 7, PointWithOffset(lp_targetPosition, 0.35, 0.0), lp_heightOffset, true, lp_obeyFogRules, libCore_gv_playerGroupFromPlayer[lp_displayPlayer]);
        }
        TextTagSetVelocity(TextTagLastCreated(), 0.75, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, libUIUI_gv_floatingCombatTextFadeDuration);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_duration);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    }
    else if (auto8848A8C8_val == libCore_ge_FloatingTextType_MediumDamage) {
        if ((lp_displayPlayer == 0)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_DD1C12C8", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_DD1C12C8", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_DD1C12C8"), 15, lp_targetPosition, lp_heightOffset, true, lp_obeyFogRules, PlayerGroupAll());
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_6F4CE946", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_6F4CE946", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_6F4CE946"), 15, lp_targetPosition, lp_heightOffset, true, lp_obeyFogRules, libCore_gv_playerGroupFromPlayer[lp_displayPlayer]);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 100.00, 0.00));
        }
        TextTagSetVelocity(TextTagLastCreated(), 1.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, libUIUI_gv_floatingCombatTextFadeDuration);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_duration);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    }
    else if (auto8848A8C8_val == libCore_ge_FloatingTextType_HighDamage) {
        if ((lp_displayPlayer == 0)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_FB354536", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_FB354536", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_FB354536"), 15, lp_targetPosition, lp_heightOffset, true, lp_obeyFogRules, PlayerGroupAll());
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 50.20, 25.10));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_4687922E", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_4687922E", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_4687922E"), 15, lp_targetPosition, lp_heightOffset, true, lp_obeyFogRules, libCore_gv_playerGroupFromPlayer[lp_displayPlayer]);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 50.20, 25.10));
        }
        TextTagSetVelocity(TextTagLastCreated(), 2.5, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, libUIUI_gv_floatingCombatTextFadeDuration);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_duration);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    }
    else if (auto8848A8C8_val == libCore_ge_FloatingTextType_InsaneDamage) {
        if ((lp_displayPlayer == 0)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_BA735566", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_BA735566", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_BA735566"), 15, lp_targetPosition, lp_heightOffset, true, lp_obeyFogRules, PlayerGroupAll());
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_7FCA20F9", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_7FCA20F9", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_7FCA20F9"), 15, lp_targetPosition, lp_heightOffset, true, lp_obeyFogRules, libCore_gv_playerGroupFromPlayer[lp_displayPlayer]);
            TextTagSetColor(TextTagLastCreated(), c_textTagColorText, Color(100.00, 0.00, 0.00));
        }
        TextTagSetVelocity(TextTagLastCreated(), 3.0, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, libUIUI_gv_floatingCombatTextFadeDuration);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_duration);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    }
    else {
        if ((lp_displayPlayer == 0)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_759AEE88", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_759AEE88", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_759AEE88"), 15, lp_targetPosition, lp_heightOffset, true, lp_obeyFogRules, PlayerGroupAll());
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_UIUI_A3D951DD", "A", lv_stormFontStyle);
            TextExpressionSetToken("Param/Expression/lib_UIUI_A3D951DD", "B", lp_text);
            TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_A3D951DD"), 15, lp_targetPosition, lp_heightOffset, true, lp_obeyFogRules, libCore_gv_playerGroupFromPlayer[lp_displayPlayer]);
        }
        TextTagSetVelocity(TextTagLastCreated(), 1.0, 90.0);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeFadeOut, libUIUI_gv_floatingCombatTextFadeDuration);
        TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, lp_duration);
        TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    }
}

void libUIUI_gf_UIFloatingCombatTextXP (int lp_displayPlayer, unit lp_target, text lp_amount, int lp_textTagType) {
    // Variable Declarations
    fixed lv_duration;
    fixed lv_vertOffset;
    fixed lv_horizOffset;

    // Variable Initialization

    // Implementation
    if ((libSprt_gv_dEBUGCombatTextEnabled == true)) {
        if ((libGame_gv_players[lp_displayPlayer].lv_heroUnit == null)) {
            return ;
        }

        lv_duration = 1.25;
        lv_vertOffset = 1.5;
        lv_horizOffset = RandomFixed(0.4, 0.6);
        if (((PointGetX(UnitGetPosition(libGame_gv_players[lp_displayPlayer].lv_heroUnit)) - PointGetX(UnitGetPosition(lp_target))) > 0)) {
            lv_horizOffset *= -1.0;
        }

        libUIUI_gf_UIFloatingCombatTextCreateTextTag(lp_displayPlayer, lv_duration, lp_amount, lp_target, lv_vertOffset, lv_horizOffset, lp_textTagType, false);
    }

}

void libUIUI_gf_UIFloatingCombatTextHealText (int lp_impactPlayer, unit lp_impactUnit, int lp_launchPlayer, unit lp_launchUnit, unit lp_casterUnit, unit lp_targetUnit, fixed lp_amount, string lp_triggeringEffect) {
    // Variable Declarations
    int lv_impactPlayer;
    unit lv_impactUnit;
    int lv_launchPlayer;
    unit lv_launchUnit;
    unit lv_casterUnit;
    unit lv_targetUnit;
    fixed lv_amount;
    fixed lv_vertOffset;
    fixed lv_horizOffset;
    playergroup lv_vOGroup;
    string lv_triggeringEffect;

    // Variable Initialization
    lv_impactPlayer = lp_impactPlayer;
    lv_impactUnit = lp_impactUnit;
    lv_launchPlayer = lp_launchPlayer;
    lv_launchUnit = lp_launchUnit;
    lv_casterUnit = lp_casterUnit;
    lv_targetUnit = lp_targetUnit;
    lv_amount = lp_amount;
    lv_vOGroup = PlayerGroupEmpty();
    lv_triggeringEffect = lp_triggeringEffect;

    // Implementation
    lv_vertOffset = 2.0;
    lv_horizOffset = RandomFixed(-0.4, -0.6);
    if ((lv_triggeringEffect != "LiLiCloudSerpentMendingSerpentCreateHealer") && ((lv_amount > 0.0) || (lv_triggeringEffect == "BlinkHealInitialHeal") || (lv_triggeringEffect == "BlinkHealPeriodicHeal"))) {
        if ((lv_impactPlayer != libCore_gv_cOMPUTER_TeamOrder) && (lv_impactPlayer != libCore_gv_cOMPUTER_TeamChaos)) {
            libUIUI_gf_UIFloatingCombatTextCreateTextTag(lv_launchPlayer, libUIUI_gv_floatingCombatTextHighDuration, FixedToText(lv_amount, 0), lv_impactUnit, lv_vertOffset, lv_horizOffset, libCore_ge_FloatingTextType_Healing, false);
        }

        if ((lv_impactPlayer != lv_launchPlayer) && (lv_launchPlayer != libCore_gv_cOMPUTER_TeamOrder) && (lv_launchPlayer != libCore_gv_cOMPUTER_TeamChaos)) {
            libUIUI_gf_UIFloatingCombatTextCreateTextTag(lv_impactPlayer, libUIUI_gv_floatingCombatTextHighDuration, FixedToText(lv_amount, 0), lv_impactUnit, lv_vertOffset, lv_horizOffset, libCore_ge_FloatingTextType_Healing, false);
            if ((lv_triggeringEffect != "SoothingMistCreateHealer") && ((UnitHasBehavior2(lv_casterUnit, "HeroSharesCutsceneOverlaysDestination") == false) || (UnitHasBehavior2(lv_targetUnit, "HeroSharesCutsceneOverlaysSource") == false))) {
                PlayerGroupAdd(lv_vOGroup, UnitGetOwner(lv_casterUnit));
                PlayerGroupAdd(lv_vOGroup, UnitGetOwner(lv_targetUnit));
                libSond_gf_HeroVOPlayHealThankYouLine(UnitGetOwner(lv_targetUnit), lv_vOGroup);
            }

        }

    }

}

void libUIUI_gf_UIFloatingCombatTextLeashing (unit lp_Unit) {
    // Variable Declarations
    fixed lv_vertOffset;
    fixed lv_horizOffset;

    // Variable Initialization

    // Implementation
    if ((libUIUI_gv_floatingCombatText_SuppressLeashingText == false)) {
        FloatingCombatElementCreateTextAtUnit(PlayerGroupAll(), "FloatingCombatElements/FloatingCombatElementTemplate", "", lp_Unit, StringExternal("Param/Value/lib_UIUI_3BE6264C"), libNtve_gv_FloatingCombatTextAutoRandomSeed);
    }

}

void libUIUI_gf_UIFloatingCombatTextH16MidXP (int lp_displayPlayer, unit lp_target, int lp_type, int lp_Unit) {
    int autoA62876A2_val;

    // Variable Declarations
    fixed lv_vertOffset;
    fixed lv_horizOffset;
    text lv_xPText;

    // Variable Initialization
    lv_xPText = StringExternal("Param/Value/lib_UIUI_54136D08");

    // Implementation
    autoA62876A2_val = lp_type;
    if (autoA62876A2_val == libCore_ge_FloatingTextType_XPSmall) {
        FloatingCombatElementCreateNumberTextAtPoint(PlayerGroupSingle(lp_displayPlayer), "FloatingCombatElements/FloatingCombatNormalAmountReceived", "XPState", UnitGetPosition(lp_target), lp_Unit, lv_xPText, libNtve_gv_FloatingCombatTextAutoRandomSeed);
    }
    else if (autoA62876A2_val == libCore_ge_FloatingTextType_XPMedium) {
        FloatingCombatElementCreateNumberTextAtPoint(PlayerGroupSingle(lp_displayPlayer), "FloatingCombatElements/FloatingCombatGreaterAmountReceived", "XPState", UnitGetPosition(lp_target), lp_Unit, lv_xPText, libNtve_gv_FloatingCombatTextAutoRandomSeed);
    }
    else if (autoA62876A2_val == libCore_ge_FloatingTextType_XPLarge) {
        FloatingCombatElementCreateNumberTextAtPoint(PlayerGroupSingle(lp_displayPlayer), "FloatingCombatElements/FloatingCombatGreaterAmountReceived", "XPState", UnitGetPosition(lp_target), lp_Unit, lv_xPText, libNtve_gv_FloatingCombatTextAutoRandomSeed);
    }
    else {
    }
}

void libUIUI_gf_VignetteOverlayPlayForPlayer (int lp_player, string lp_cutscene) {
    // Implementation
    libNtve_gf_SetDialogItemCutscene(libUIUI_gv_vignetteOverlayPanel.lv_overlayCutscene, lp_cutscene, libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlSetVisible(libUIUI_gv_vignetteOverlayPanel.lv_overlayCutscene, libCore_gv_playerGroupFromPlayer[lp_player], true);
    DialogControlSendAnimationEvent(libUIUI_gv_vignetteOverlayPanel.lv_overlayCutscene, libCore_gv_playerGroupFromPlayer[lp_player], "Start");
}

void libUIUI_gf_VignetteOverlayStopPlayingForPlayer (int lp_player) {
    // Implementation
    DialogControlSendAnimationEvent(libUIUI_gv_vignetteOverlayPanel.lv_overlayCutscene, libCore_gv_playerGroupFromPlayer[lp_player], "Stop");
}

void libUIUI_gf_VignetteOverlayPlayForAllPlayersExcludingSpecifiedPlayerGroup (playergroup lp_playerGroupToExclude, string lp_cutscene) {
    int auto11E990B2_ae;
    int auto11E990B2_ai;
    playergroup auto33C0A2D0_g;
    int auto33C0A2D0_p;

    // Variable Declarations
    int lv_itPlayer;
    playergroup lv_playerGroup;

    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Implementation
    auto11E990B2_ae = libCore_gv_bALMaxPlayers;
    auto11E990B2_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto11E990B2_ai >= 0 && lv_itPlayer <= auto11E990B2_ae) || (auto11E990B2_ai <= 0 && lv_itPlayer >= auto11E990B2_ae) ) ; lv_itPlayer += auto11E990B2_ai ) {
        PlayerGroupAdd(lv_playerGroup, lv_itPlayer);
    }
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_playerGroupToExclude, lv_playerGroup);
    auto33C0A2D0_g = lv_playerGroup; 
    auto33C0A2D0_p = 1;
    for ( ; auto33C0A2D0_p <= PlayerGroupCount(auto33C0A2D0_g) ; auto33C0A2D0_p += (lv_itPlayer == PlayerGroupPlayer(auto33C0A2D0_g, auto33C0A2D0_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto33C0A2D0_g, auto33C0A2D0_p);
        libUIUI_gf_VignetteOverlayPlayForPlayer(lv_itPlayer, lp_cutscene);
    }
}

void libUIUI_gf_VignetteOverlayStopForAllPlayersExcludingSpecifiedPlayerGroup (playergroup lp_playerGroupToExclude) {
    int autoCFF459E9_ae;
    int autoCFF459E9_ai;
    playergroup autoBA916C8E_g;
    int autoBA916C8E_p;

    // Variable Declarations
    int lv_itPlayer;
    playergroup lv_playerGroup;

    // Variable Initialization
    lv_playerGroup = PlayerGroupEmpty();

    // Implementation
    autoCFF459E9_ae = libCore_gv_bALMaxPlayers;
    autoCFF459E9_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoCFF459E9_ai >= 0 && lv_itPlayer <= autoCFF459E9_ae) || (autoCFF459E9_ai <= 0 && lv_itPlayer >= autoCFF459E9_ae) ) ; lv_itPlayer += autoCFF459E9_ai ) {
        PlayerGroupAdd(lv_playerGroup, lv_itPlayer);
    }
    libNtve_gf_RemovePlayerGroupFromPlayerGroup(lp_playerGroupToExclude, lv_playerGroup);
    autoBA916C8E_g = lv_playerGroup; 
    autoBA916C8E_p = 1;
    for ( ; autoBA916C8E_p <= PlayerGroupCount(autoBA916C8E_g) ; autoBA916C8E_p += (lv_itPlayer == PlayerGroupPlayer(autoBA916C8E_g, autoBA916C8E_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoBA916C8E_g, autoBA916C8E_p);
        libUIUI_gf_VignetteOverlayStopPlayingForPlayer(lv_itPlayer);
    }
}

void libUIUI_gf_FullscreenOverlayAddItemForPlayer (int lp_player, int lp_priority, string lp_cutscene, string lp_behavior) {
    int auto428A475E_ae;
    int auto428A475E_ai;
    int autoE999B1CE_ae;
    int autoE999B1CE_ai;

    // Variable Declarations
    int lv_itQueuePosition;
    int lv_priorityInt;
    int lv_desiredPosition;

    // Variable Initialization

    // Implementation
    if ((lp_player > libCore_gv_bALMaxPlayers)) {
        return ;
    }

    if ((UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "HeroSharesCutsceneOverlaysSource") == true)) {
        PlayerGroupLoopBegin(PlayerGroupAlliance(c_playerGroupAlly, lp_player));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((UnitHasBehavior2(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, "HeroSharesCutsceneOverlaysDestination") == true)) {
                libUIUI_gf_FullscreenOverlayAddItemForPlayer(PlayerGroupLoopCurrent(), lp_priority, lp_cutscene, lp_behavior);
            }

        }
        PlayerGroupLoopEnd();
    }

    if ((libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue >= libUIUI_gv_fullscreenOverlayMaxQueueSize_C)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_524823FB", "A", IntToText(lp_player));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_UIUI_524823FB"), true);
        return ;
    }

    auto428A475E_ae = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue;
    auto428A475E_ai = 1;
    lv_itQueuePosition = 1;
    for ( ; ( (auto428A475E_ai >= 0 && lv_itQueuePosition <= auto428A475E_ae) || (auto428A475E_ai <= 0 && lv_itQueuePosition >= auto428A475E_ae) ) ; lv_itQueuePosition += auto428A475E_ai ) {
        if ((lp_behavior == libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[lv_itQueuePosition])) {
            return ;
        }

    }
    lv_priorityInt = (lp_priority);
    lv_desiredPosition = 0;
    if ((libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue == 0)) {
        lv_desiredPosition = 1;
    }
    else {
        autoE999B1CE_ae = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue;
        autoE999B1CE_ai = 1;
        lv_itQueuePosition = 1;
        for ( ; ( (autoE999B1CE_ai >= 0 && lv_itQueuePosition <= autoE999B1CE_ae) || (autoE999B1CE_ai <= 0 && lv_itQueuePosition >= autoE999B1CE_ae) ) ; lv_itQueuePosition += autoE999B1CE_ai ) {
            if ((libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[lv_itQueuePosition] > lv_priorityInt)) {
                lv_desiredPosition = lv_itQueuePosition;
                break;
            }

        }
        if ((lv_desiredPosition == 0)) {
            lv_desiredPosition = (libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue + 1);
        }

    }
    libUIUI_gf_FullscreenOverlayInsertItemIntoQueueForPlayer(lp_player, lp_priority, lv_desiredPosition, lp_cutscene, lp_behavior);
    if ((lp_behavior == libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[1])) {
        libUIUI_gf_FullscreenOverlayPlayCutscene(lp_player, lp_cutscene);
    }

}

void libUIUI_gf_FullscreenOverlayInsertItemIntoQueueForPlayer (int lp_player, int lp_priority, int lp_desiredInsertPosition, string lp_cutscene, string lp_behavior) {
    int auto96355AA4_ae;
    int auto96355AA4_ai;

    // Variable Declarations
    int lv_itQueuePosition;
    int lv_insertPosition;

    // Variable Initialization

    // Implementation
    if ((lp_desiredInsertPosition > libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue)) {
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue += 1;
        lv_insertPosition = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue;
    }
    else {
        auto96355AA4_ae = lp_desiredInsertPosition;
        auto96355AA4_ai = -1;
        lv_itQueuePosition = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue;
        for ( ; ( (auto96355AA4_ai >= 0 && lv_itQueuePosition <= auto96355AA4_ae) || (auto96355AA4_ai <= 0 && lv_itQueuePosition >= auto96355AA4_ae) ) ; lv_itQueuePosition += auto96355AA4_ai ) {
            libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[(lv_itQueuePosition + 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[lv_itQueuePosition];
            libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[(lv_itQueuePosition + 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[lv_itQueuePosition];
            libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[(lv_itQueuePosition + 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[lv_itQueuePosition];
        }
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue += 1;
        lv_insertPosition = lp_desiredInsertPosition;
    }
    libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[lv_insertPosition] = (lp_priority);
    libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[lv_insertPosition] = lp_cutscene;
    libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[lv_insertPosition] = lp_behavior;
}

void libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer (int lp_player, string lp_cutscene, string lp_behavior) {
    int autoF9B0A9D9_ae;
    int autoF9B0A9D9_ai;
    int auto7F89AB12_ae;
    int auto7F89AB12_ai;

    // Variable Declarations
    int lv_numberOfItemsInQueue;
    int lv_positionInQueue;
    int lv_itQueuePosition;

    // Variable Initialization

    // Implementation
    if ((lp_player > libCore_gv_bALMaxPlayers)) {
        return ;
    }

    if ((UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "HeroSharesCutsceneOverlaysSource") == true)) {
        PlayerGroupLoopBegin(PlayerGroupAlliance(c_playerGroupAlly, lp_player));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((UnitHasBehavior2(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit, "HeroSharesCutsceneOverlaysDestination") == true)) {
                libUIUI_gf_FullscreenOverlayRemoveItemFromQueueForPlayer(PlayerGroupLoopCurrent(), lp_cutscene, lp_behavior);
            }

        }
        PlayerGroupLoopEnd();
    }

    lv_numberOfItemsInQueue = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue;
    autoF9B0A9D9_ae = lv_numberOfItemsInQueue;
    autoF9B0A9D9_ai = 1;
    lv_itQueuePosition = 1;
    for ( ; ( (autoF9B0A9D9_ai >= 0 && lv_itQueuePosition <= autoF9B0A9D9_ae) || (autoF9B0A9D9_ai <= 0 && lv_itQueuePosition >= autoF9B0A9D9_ae) ) ; lv_itQueuePosition += autoF9B0A9D9_ai ) {
        if ((libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[lv_itQueuePosition] == lp_behavior)) {
            lv_positionInQueue = lv_itQueuePosition;
            break;
        }

    }
    if ((lv_positionInQueue == 0)) {
        return ;
    }

    if ((lv_numberOfItemsInQueue == 1)) {
        DialogControlSendAnimationEvent(libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene, libCore_gv_playerGroupFromPlayer[lp_player], "Stop");
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue -= 1;
        return ;
    }

    auto7F89AB12_ae = lv_numberOfItemsInQueue;
    auto7F89AB12_ai = 1;
    lv_itQueuePosition = (lv_positionInQueue+1);
    for ( ; ( (auto7F89AB12_ai >= 0 && lv_itQueuePosition <= auto7F89AB12_ae) || (auto7F89AB12_ai <= 0 && lv_itQueuePosition >= auto7F89AB12_ae) ) ; lv_itQueuePosition += auto7F89AB12_ai ) {
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[(lv_itQueuePosition - 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_priority[lv_itQueuePosition];
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[(lv_itQueuePosition - 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[lv_itQueuePosition];
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[(lv_itQueuePosition - 1)] = libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_behavior[lv_itQueuePosition];
    }
    libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue -= 1;
    if ((lv_positionInQueue == 1)) {
        libUIUI_gf_FullscreenOverlayPlayCutscene(lp_player, libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_cutscene[1]);
        return ;
    }

}

void libUIUI_gf_FullscreenOverlayStopandClearCutsceneQueueForPlayer (int lp_player) {
    // Variable Declarations
    int lv_numberOfItemsInQueue;

    // Variable Initialization

    // Implementation
    if ((libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue > 0)) {
        DialogControlSendAnimationEvent(libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene, libCore_gv_playerGroupFromPlayer[lp_player], "Stop");
        libUIUI_gv_fullscreenOverlayQueue[lp_player].lv_numberOfItemsInQueue = 0;
    }

}

void libUIUI_gf_FullscreenOverlayPlayCutscene (int lp_player, string lp_cutscene) {
    // Implementation
    libNtve_gf_SetDialogItemCutscene(libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene, lp_cutscene, libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlSendAnimationEvent(libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene, libCore_gv_playerGroupFromPlayer[lp_player], "Start");
}

void libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay (bool lp_showHide, int lp_player) {
    // Implementation
    if ((UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "HeroHasCustomDeathDisableDeathCutscene") == true)) {
        return ;
    }
    else {
        if ((lp_showHide == true)) {
            DialogControlSetVisible(libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay, libCore_gv_playerGroupFromPlayer[lp_player], true);
            TimerPause(libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[lp_player], true);
        }
        else {
            DialogControlSendAnimationEvent(libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay, libCore_gv_playerGroupFromPlayer[lp_player], "Stop");
            TimerStart(libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[lp_player], libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimerDuration_C, false, c_timeGame);
        }
    }
}

void libUIUI_gf_FullscreenOverlaysStopSpecialOverlay (int lp_player) {
    // Implementation
    if (((lp_player < 1) || (lp_player > libCore_gv_bALMaxPlayers))) {
        return ;
    }

    DialogControlSendAnimationEvent(libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay, libCore_gv_playerGroupFromPlayer[lp_player], "Stop");
    TimerStart(libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[lp_player], libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimerDuration_C, false, c_timeGame);
}

void libUIUI_gf_FullscreenOverlaysShowSpecialOverlay (string lp_cutscene, int lp_player) {
    // Implementation
    if (((lp_player < 1) || (lp_player > libCore_gv_bALMaxPlayers))) {
        return ;
    }

    libNtve_gf_SetDialogItemCutscene(libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay, lp_cutscene, libCore_gv_playerGroupFromPlayer[lp_player]);
    DialogControlSetVisible(libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay, libCore_gv_playerGroupFromPlayer[lp_player], true);
    TimerPause(libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[lp_player], true);
}

void libUIUI_gf_FullscreenOverlaysCreateCCEffectFlashForPlayer (int lp_player, fixed lp_cCDuration) {
    // Variable Declarations
    fixed lv_fadeTime;

    // Variable Initialization
    lv_fadeTime = 0.25;

    // Implementation
    libNtve_gf_SetDialogItemColor(libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage, Color(0.00, 0.00, 100.00), PlayerGroupAll());
    DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage, PlayerGroupSingle(lp_player), 0.0, 0.0);
    if ((lp_cCDuration > lv_fadeTime) && (lp_cCDuration < 32765.0)) {
        if ((libGame_gv_players[lp_player].lv_activeVehicle == null)) {
            while (((UnitFilterMatch(libGame_gv_players[lp_player].lv_heroUnit, 1, UnitFilter(0, (1 << (c_targetFilterStunned - 32)), 0, 0)) == true) || (UnitFilterMatch(libGame_gv_players[lp_player].lv_heroUnit, 1, UnitFilter(0, (1 << (c_targetFilterStasis - 32)), 0, 0)) == true) || (UnitFilterMatch(libGame_gv_players[lp_player].lv_heroUnit, 1, UnitFilter(0, (1 << (c_targetFilterSilenced - 32)), 0, 0)) == true))) {
                Wait(0.0625, c_timeGame);
            }
        }
        else {
            while ((UnitIsAlive(libGame_gv_players[lp_player].lv_activeVehicle) == true) && ((UnitFilterMatch(libGame_gv_players[lp_player].lv_activeVehicle, 1, UnitFilter(0, (1 << (c_targetFilterStunned - 32)), 0, 0)) == true) || (UnitFilterMatch(libGame_gv_players[lp_player].lv_activeVehicle, 1, UnitFilter(0, (1 << (c_targetFilterStasis - 32)), 0, 0)) == true) || (UnitFilterMatch(libGame_gv_players[lp_player].lv_activeVehicle, 1, UnitFilter(0, (1 << (c_targetFilterSilenced - 32)), 0, 0)) == true))) {
                Wait(0.0625, c_timeGame);
            }
        }
        DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage, PlayerGroupSingle(lp_player), lv_fadeTime, 100.0);
    }
    else {
        while (((UnitBehaviorCount(libGame_gv_players[lp_player].lv_heroUnit, "Hooked") > 0) || (UnitBehaviorCount(libGame_gv_players[lp_player].lv_heroUnit, "VoidPrisonDisplay") > 0))) {
            Wait(0.0625, c_timeGame);
        }
        DialogControlFadeTransparency(libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage, PlayerGroupSingle(lp_player), (lv_fadeTime / 2.0), 100.0);
    }
}

void libUIUI_gf_GameOverSplashDisplayForAllPlayers (int lp_winningTeam) {
    // Implementation
    libUIUI_gf_GameOverSplashShowHideForAllPlayers(true, lp_winningTeam);
}

void libUIUI_gf_GameOverSplashShowHideForAllPlayers (bool lp_showHide, int lp_winningTeam) {
    int auto715961E6_ae;
    int auto715961E6_ai;
    int autoDFBE4811_val;
    int autoCCD02957_val;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    auto715961E6_ae = libCore_gv_bALMaxPlayers;
    auto715961E6_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto715961E6_ai >= 0 && lv_itPlayer <= auto715961E6_ae) || (auto715961E6_ai <= 0 && lv_itPlayer >= auto715961E6_ae) ) ; lv_itPlayer += auto715961E6_ai ) {
        autoDFBE4811_val = libGame_gv_players[lv_itPlayer].lv_victoryDefeat;
        if (autoDFBE4811_val == c_gameOverVictory) {
            DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_victoryFrame, libCore_gv_playerGroupFromPlayer[lv_itPlayer], lp_showHide);
        }
        else if (autoDFBE4811_val == c_gameOverDefeat) {
            DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_defeatFrame, libCore_gv_playerGroupFromPlayer[lv_itPlayer], lp_showHide);
        }
        else {
        }
        DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lv_itPlayer], lp_showHide);
        if ((lp_showHide == true)) {
            UnitStatusBarOverride(libGame_gv_players[lv_itPlayer].lv_heroUnit, -1);
        }
        else {
            UnitStatusBarOverride(libGame_gv_players[lv_itPlayer].lv_heroUnit, c_unitStatusGroupAll);
        }
    }
    DialogControlSetVisible(libUIUI_gv_uIGameUIHandles.lv_gameMenuButton, PlayerGroupAll(), lp_showHide);
    autoCCD02957_val = lp_winningTeam;
    if (autoCCD02957_val == libGame_gv_teamOrderIndex_C) {
        DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_victoryFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
    }
    else if (autoCCD02957_val == libGame_gv_teamChaosIndex_C) {
        DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_defeatFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
    }
    else if (autoCCD02957_val == 0) {
        if ((lp_showHide == true)) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_gameOverSplash.lv_defeatLabel, StringExternal("Param/Value/lib_UIUI_2F6F064B"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        }

        DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_defeatFrame, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
    }
    else {
    }
    DialogControlSetVisible(libUIUI_gv_gameOverSplash.lv_mainPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
}

void libUIUI_gf_UIGameUIShowHideConsolePanelForPlayer (bool lp_showHide, int lp_player) {
    // Implementation
    DialogControlSetVisible(libUIUI_gv_uIGameUIHandles.lv_consolePanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
}

void libUIUI_gf_UIHealingFountainsHelpTextCreateTextTagsForTeam (int lp_team) {
    unitgroup autoD6CBEC40_g;
    int autoD6CBEC40_u;

    // Variable Declarations
    unitgroup lv_healingFountainsGroup;
    int lv_itTextTag;
    unit lv_itU;
    text lv_helpLabel;

    // Variable Initialization
    lv_healingFountainsGroup = UnitGroupEmpty();

    // Implementation
    UnitGroupAddUnitGroup(lv_healingFountainsGroup, UnitGroup("TownMoonwellL2", libGame_gv_teams[lp_team].lv_nPCPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    UnitGroupAddUnitGroup(lv_healingFountainsGroup, UnitGroup("TownMoonwellL3", libGame_gv_teams[lp_team].lv_nPCPlayer, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    if ((UnitGroupCount(lv_healingFountainsGroup, c_unitCountAlive) > libGame_gv_moonwellMaxMoonwellCount)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_DE134FE2", "A", IntToText(libGame_gv_moonwellMaxMoonwellCount));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_UIUI_DE134FE2"), true);
    }

    if (((libCore_gv_sYSGameMode == libCore_ge_GameModes_Normal) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_Sandbox) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_AttackDefend) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_ArenaMode) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_Test))) {
        lv_helpLabel = StringExternal("Param/Value/lib_UIUI_28EB608E");
    }
    else {
        lv_helpLabel = StringExternal("Param/Value/lib_UIUI_70B25B17");
    }
    autoD6CBEC40_g = lv_healingFountainsGroup;
    autoD6CBEC40_u = 1;
    for ( ; autoD6CBEC40_u <= UnitGroupCount(autoD6CBEC40_g, c_unitCountAll) ; autoD6CBEC40_u += (lv_itU == UnitGroupUnit(autoD6CBEC40_g, autoD6CBEC40_u)) ) {
        lv_itU = UnitGroupUnit(autoD6CBEC40_g, autoD6CBEC40_u);
        lv_itTextTag += 1;
        TextTagCreate(lv_helpLabel, 24, UnitGetPosition(lv_itU), libUIUI_gv_uI_HealingFountainsHelpText_HeightOffset_C, false, false, PlayerGroupAll());
        libUIUI_gv_uIHealingFountainsHelpText[lp_team][lv_itTextTag].lv_textTag = TextTagLastCreated();
        libUIUI_gv_uIHealingFountainsHelpText[lp_team][lv_itTextTag].lv_healingFountain = lv_itU;
    }
}

void libUIUI_gf_UIHealingFountainsHelpTextShowHideForPlayer (int lp_player, bool lp_showHide) {
    int auto2CCEED65_ae;
    int auto2CCEED65_ai;

    // Variable Declarations
    int lv_itTextTag;
    int lv_arrayToUse;

    // Variable Initialization
    lv_arrayToUse = libGame_gf_TeamNumberOfPlayer(lp_player);

    // Implementation
    if ((lp_showHide == true)) {
        libUIUI_gv_uIHealingFountainsHelpTextTextShowing[lp_player] = true;
    }
    else {
        libUIUI_gv_uIHealingFountainsHelpTextTextShowing[lp_player] = false;
    }
    auto2CCEED65_ae = libUIUI_gv_uI_HealingFountainsHelpText_ArraySize_C;
    auto2CCEED65_ai = 1;
    lv_itTextTag = 1;
    for ( ; ( (auto2CCEED65_ai >= 0 && lv_itTextTag <= auto2CCEED65_ae) || (auto2CCEED65_ai <= 0 && lv_itTextTag >= auto2CCEED65_ae) ) ; lv_itTextTag += auto2CCEED65_ai ) {
        if ((libUIUI_gv_uIHealingFountainsHelpText[lv_arrayToUse][lv_itTextTag].lv_textTag == c_textTagNone)) {
            break;
        }
        else {
            if (((lp_showHide == false) || (UnitIsAlive(libUIUI_gv_uIHealingFountainsHelpText[lv_arrayToUse][lv_itTextTag].lv_healingFountain) == true))) {
                TextTagShow(libUIUI_gv_uIHealingFountainsHelpText[lv_arrayToUse][lv_itTextTag].lv_textTag, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
            }

        }
    }
}

void libUIUI_gf_AttachHelpButtonToUnit (unit lp_attachedUnit, trigger lp_callback, text lp_helpText, int lp_xOffset, int lp_yOffset) {
    // Implementation
    if ((libUIUI_gv_helpButtonCount >= libUIUI_gv_helpButtonMaxCount_C)) {
        return ;
    }

    libUIUI_gv_helpButtonCount += 1;
    DialogControlHookupUnitStatus(c_triggerControlTypePanel, "AttachPointFrame", lp_attachedUnit);
    libUIUI_gv_helpButtonFrames[libUIUI_gv_helpButtonCount] = DialogControlLastCreated();
    DialogControlSetPosition(DialogControlLastCreated(), PlayerGroupAll(), c_anchorTopLeft, lp_xOffset, lp_yOffset);
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HelpText", lp_attachedUnit);
    libUIUI_gv_helpButtonLabels[libUIUI_gv_helpButtonCount] = DialogControlLastCreated();
    TextExpressionSetToken("Param/Expression/lib_UIUI_C420E9AE", "A", StringExternal("Param/Value/lib_UIUI_ECEBD1AC"));
    TextExpressionSetToken("Param/Expression/lib_UIUI_C420E9AE", "B", lp_helpText);
    libNtve_gf_SetDialogItemText(libUIUI_gv_helpButtonLabels[libUIUI_gv_helpButtonCount], TextExpressionAssemble("Param/Expression/lib_UIUI_C420E9AE"), PlayerGroupAll());
    UnitStatusBarOverride(lp_attachedUnit, c_unitStatusGroupAll);
    libUIUI_gv_helpButtonCallbacks[libUIUI_gv_helpButtonCount] = lp_callback;
    libUIUI_gv_helpButtonUnits[libUIUI_gv_helpButtonCount] = lp_attachedUnit;
}

void libUIUI_gf_ShowHideHelpButtonOnUnitForPlayer (int lp_player, bool lp_showHide, unit lp_unit) {
    // Implementation
    DialogControlSetVisible(libUIUI_gv_helpButtonLabels[libUIUI_gf_HelpButtonFromUnit(lp_unit)], libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
}

int libUIUI_gf_HelpButtonClickedPlayer () {
    // Implementation
    return DataTableGetInt(true, libUIUI_gv_helpButtonDataTableKey_C);
}

void libUIUI_gf_SetHelpButtonText (unit lp_unit, text lp_text, playergroup lp_players) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    lv_index = libUIUI_gf_HelpButtonFromUnit(lp_unit);
    if ((lv_index <= 0)) {
        return ;
    }

    libNtve_gf_SetDialogItemText(libUIUI_gv_helpButtonLabels[lv_index], lp_text, lp_players);
}

int libUIUI_gf_HelpButtonFromUnit (unit lp_unit) {
    int auto32E447F9_ae;
    int auto32E447F9_ai;

    // Variable Declarations
    int lv_itIndex;

    // Variable Initialization

    // Implementation
    auto32E447F9_ae = libUIUI_gv_helpButtonCount;
    auto32E447F9_ai = 1;
    lv_itIndex = 1;
    for ( ; ( (auto32E447F9_ai >= 0 && lv_itIndex <= auto32E447F9_ae) || (auto32E447F9_ai <= 0 && lv_itIndex >= auto32E447F9_ae) ) ; lv_itIndex += auto32E447F9_ai ) {
        if ((libUIUI_gv_helpButtonUnits[lv_itIndex] == lp_unit)) {
            return lv_itIndex;
        }

    }
    return 0;
}

void libUIUI_gf_UIHeroConsoleShowHideForPlayer (bool lp_showHide, int lp_player) {
    // Implementation
    DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_buffDebuffPanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_gameUIInventoryPanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_gameUIPortrait, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    UISetFrameVisible(libCore_gv_playerGroupFromPlayer[lp_player], c_syncFrameTypeCommandPanel, lp_showHide);
}

void libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer (bool lp_showHide, int lp_player) {
    string auto9C2A8589_val;

    // Implementation
    if ((lp_showHide == true)) {
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsFuryStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsBrewStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsEnergyStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }

    auto9C2A8589_val = UnitGetType(libGame_gv_players[lp_player].lv_heroUnit);
    if (auto9C2A8589_val == "HeroBarbarian") {
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsFuryStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    }
    else if (auto9C2A8589_val == "HeroChen") {
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsBrewStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    }
    else if (auto9C2A8589_val == "HeroIllidan") {
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    }
    else if (auto9C2A8589_val == "HeroMurky") {
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    }
    else if (auto9C2A8589_val == "HeroCho") {
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    }
    else if (auto9C2A8589_val == "HeroGall") {
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    }
    else if (auto9C2A8589_val == "HeroTracer") {
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    }
    else if (auto9C2A8589_val == "HeroAuriel") {
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsBrewStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    }
    else if (auto9C2A8589_val == "HeroZarya") {
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsEnergyStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    }
    else if (auto9C2A8589_val == "HeroSamuro") {
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    }
    else if (auto9C2A8589_val == "HeroValeera") {
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsBrewStatFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
    }
}

void libUIUI_gf_UIHeroConsoleSetUpForPlayer (unit lp_unit, int lp_player) {
    string autoAFEECCF3_val;

    // Variable Declarations
    text lv_healthText;

    // Variable Initialization

    // Implementation
    lv_healthText = StringExternal("Param/Value/lib_UIUI_6796A88E");
    libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer(true, lp_player);
    autoAFEECCF3_val = UnitGetType(libGame_gv_players[lp_player].lv_heroUnit);
    if (autoAFEECCF3_val == "HeroValeera") {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsBrewStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlHookup(libUIUI_gv_uIHeroConsole.lv_heroStatsBrewStatFrame, c_triggerControlTypeUnitStatusBar, "EnergyBar");
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_D82231CF"), libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlHookup(libUIUI_gv_uIHeroConsole.lv_heroStatsBrewStatFrame, c_triggerControlTypeUnitStatusBar, "HealthBar");
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_healthText, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAFEECCF3_val == "HeroBarbarian") {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsFuryStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlHookup(libUIUI_gv_uIHeroConsole.lv_heroStatsFuryStatFrame, c_triggerControlTypeUnitStatusBar, "EnergyBar");
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_54736515"), libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlHookup(libUIUI_gv_uIHeroConsole.lv_heroStatsFuryStatFrame, c_triggerControlTypeUnitStatusBar, "HealthBar");
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_healthText, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAFEECCF3_val == "HeroChen") {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsBrewStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlHookup(libUIUI_gv_uIHeroConsole.lv_heroStatsBrewStatFrame, c_triggerControlTypeUnitStatusBar, "EnergyBar");
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_4051986D"), libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlHookup(libUIUI_gv_uIHeroConsole.lv_heroStatsBrewStatFrame, c_triggerControlTypeUnitStatusBar, "HealthBar");
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_healthText, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAFEECCF3_val == "HeroIllidan") {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlHookup(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, c_triggerControlTypeUnitStatusBar, "HealthBar");
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_healthText, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAFEECCF3_val == "HeroSamuro") {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlHookup(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, c_triggerControlTypeUnitStatusBar, "HealthBar");
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_healthText, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAFEECCF3_val == "HeroMurky") {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlHookup(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, c_triggerControlTypeUnitStatusBar, "HealthBar");
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_healthText, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAFEECCF3_val == "HeroCho") {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlHookup(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, c_triggerControlTypeUnitStatusBar, "HealthBar");
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_healthText, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAFEECCF3_val == "HeroGall") {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlHookup(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, c_triggerControlTypeUnitStatusBar, "HealthBar");
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_healthText, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAFEECCF3_val == "HeroTracer") {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlHookup(libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame, c_triggerControlTypeUnitStatusBar, "HealthBar");
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_healthText, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAFEECCF3_val == "HeroAuriel") {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsBrewStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlHookup(libUIUI_gv_uIHeroConsole.lv_heroStatsBrewStatFrame, c_triggerControlTypeUnitStatusBar, "EnergyBar");
        DialogControlHookup(libUIUI_gv_uIHeroConsole.lv_heroStatsBrewStatFrame, c_triggerControlTypeUnitStatusBar, "HealthBar");
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_healthText, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (autoAFEECCF3_val == "HeroZarya") {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsEnergyStatFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlHookup(libUIUI_gv_uIHeroConsole.lv_heroStatsEnergyStatFrame, c_triggerControlTypeUnitStatusBar, "EnergyBar");
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_64406079"), libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlHookup(libUIUI_gv_uIHeroConsole.lv_heroStatsEnergyStatFrame, c_triggerControlTypeUnitStatusBar, "HealthBar");
        libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), lv_healthText, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemTooltip(libUIUI_gv_uIHeroConsole.lv_heroStatsHealthBar, lv_healthText, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemTooltip(libUIUI_gv_uIHeroConsole.lv_heroStatsManaBar, StringExternal("Param/Value/lib_UIUI_E784A9A4"), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
}

void libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar (string lp_newBehavior, int lp_player) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Implementation
    lv_player = lp_player;
    if ((lv_player > libCore_gv_bALMaxEnginePlayerCount)) {
        return ;
    }

    if ((lp_newBehavior == "Dead")) {
        libUIUI_gv_heroConsoleUnitStatusBars_StunDeathBarCurrentBehaviorForPlayer[lv_player] = lp_newBehavior;
        libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarLeftBar, lp_newBehavior, libCore_gv_playerGroupFromPlayer[lv_player]);
        libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarRightBar, lp_newBehavior, libCore_gv_playerGroupFromPlayer[lv_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarDescriptionLabel, StringExternal("Param/Value/lib_UIUI_5CE53894"), libCore_gv_playerGroupFromPlayer[lv_player]);
        libNtve_gf_SetDialogItemImage(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarIcon, "@UI/HUD_Bar_DeathStun_Icon_Stun", libCore_gv_playerGroupFromPlayer[lv_player]);
    }
    else {
        if ((lp_newBehavior == "GuldanDarkBargainDuration")) {
            libUIUI_gv_heroConsoleUnitStatusBars_StunDeathBarCurrentBehaviorForPlayer[lv_player] = lp_newBehavior;
            libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarLeftBar, lp_newBehavior, libCore_gv_playerGroupFromPlayer[lv_player]);
            libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarRightBar, lp_newBehavior, libCore_gv_playerGroupFromPlayer[lv_player]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarDescriptionLabel, StringExternal("Param/Value/lib_UIUI_A7D5AC14"), libCore_gv_playerGroupFromPlayer[lv_player]);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarIcon, "@UI/HUD_Bar_DeathStun_Icon_Stun", libCore_gv_playerGroupFromPlayer[lv_player]);
        }
        else {
            if ((UnitBehaviorDuration(libGame_gv_players[lv_player].lv_unitStatusBarsMonitorUnit_StunDeath, lp_newBehavior) >= UnitBehaviorDuration(libGame_gv_players[lv_player].lv_unitStatusBarsMonitorUnit_StunDeath, libUIUI_gv_heroConsoleUnitStatusBars_StunDeathBarCurrentBehaviorForPlayer[lv_player]))) {
                libUIUI_gv_heroConsoleUnitStatusBars_StunDeathBarCurrentBehaviorForPlayer[lv_player] = lp_newBehavior;
                libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarLeftBar, lp_newBehavior, libCore_gv_playerGroupFromPlayer[lv_player]);
                libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarRightBar, lp_newBehavior, libCore_gv_playerGroupFromPlayer[lv_player]);
                libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarDescriptionLabel, StringExternal("Param/Value/lib_UIUI_33824A8F"), libCore_gv_playerGroupFromPlayer[lv_player]);
                libNtve_gf_SetDialogItemImage(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarIcon, (CatalogFieldValueGet(c_gameCatalogBehavior, lp_newBehavior, "InfoIcon", c_playerAny)), libCore_gv_playerGroupFromPlayer[lv_player]);
            }

        }
    }
    DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame, libCore_gv_playerGroupFromPlayer[lv_player], true);
}

void libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars (unit lp_unit, int lp_player) {
    // Implementation
    libGame_gv_players[lp_player].lv_unitStatusBarsMonitorUnit_StunDeath = lp_unit;
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
    libGame_gv_players[lp_player].lv_unitStatusBarsMonitorUnit_Channel = lp_unit;
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_heroConsoleUnitStatusBars.lv_castChannelBarParentFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
    libGame_gv_players[lp_player].lv_unitStatusBarsMonitorUnit_Behavior = lp_unit;
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrameRight, lp_unit, libCore_gv_playerGroupFromPlayer[lp_player]);
}

void libUIUI_gf_HeroConsoleUnitStatusBarsUpdateForPlayer (int lp_player) {
    // Variable Declarations
    fixed lv_behaviorDurationRemaining;

    // Variable Initialization

    // Implementation
    lv_behaviorDurationRemaining = UnitBehaviorDuration(libGame_gv_players[lp_player].lv_unitStatusBarsMonitorUnit_StunDeath, libUIUI_gv_heroConsoleUnitStatusBars_StunDeathBarCurrentBehaviorForPlayer[lp_player]);
    if ((lv_behaviorDurationRemaining > 0.0)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarTimeLabel, FixedToText(lv_behaviorDurationRemaining, 1), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    lv_behaviorDurationRemaining = UnitBehaviorDuration(libGame_gv_players[lp_player].lv_unitStatusBarsMonitorUnit_Behavior, libUIUI_gv_heroConsoleUnitStatusBars_BehaviorChannelBarCurrentBehaviorForPlayer[lp_player]);
    if ((lv_behaviorDurationRemaining <= 0.0)) {
        DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }

    lv_behaviorDurationRemaining = UnitBehaviorDuration(libGame_gv_players[lp_player].lv_unitStatusBarsMonitorUnit_Behavior, libUIUI_gv_heroConsoleUnitStatusBars_BehaviorChannelBarCurrentBehaviorForPlayerRight[lp_player]);
    if ((lv_behaviorDurationRemaining <= 0.0)) {
        DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrameRight, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }

}

void libUIUI_gf_HeroConsoleUnitStatusBarsSetChannelBehaviorForBehaviorChannelBar (int lp_player, string lp_behavior) {
    // Variable Declarations
    unit lv_heroUnit;

    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_unitStatusBarsMonitorUnit_Channel;
    if (((UnitBehaviorDuration(lv_heroUnit, lp_behavior) >= UnitBehaviorDuration(lv_heroUnit, libUIUI_gv_heroConsoleUnitStatusBars_BehaviorChannelBarCurrentBehaviorForPlayer[lp_player])) || (StringToInt(CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "DisplayPriority", c_playerAny)) > StringToInt(CatalogFieldValueGet(c_gameCatalogBehavior, libUIUI_gv_heroConsoleUnitStatusBars_BehaviorChannelBarCurrentBehaviorForPlayer[lp_player], "DisplayPriority", c_playerAny))))) {
        if ((libUIUI_gv_heroConsoleUnitStatusBars_BehaviorChannelBarCurrentBehaviorForPlayer[lp_player] != "") && (UnitBehaviorDurationTotal(lv_heroUnit, libUIUI_gv_heroConsoleUnitStatusBars_BehaviorChannelBarCurrentBehaviorForPlayer[lp_player]) > 0.0) && (StringToInt(CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "DisplayPriority", c_playerAny)) < StringToInt(CatalogFieldValueGet(c_gameCatalogBehavior, libUIUI_gv_heroConsoleUnitStatusBars_BehaviorChannelBarCurrentBehaviorForPlayer[lp_player], "DisplayPriority", c_playerAny)))) {
            return ;
        }

        libUIUI_gv_heroConsoleUnitStatusBars_BehaviorChannelBarCurrentBehaviorForPlayer[lp_player] = lp_behavior;
        libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarDurationBar, lp_behavior, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabel, StringExternal(CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_player]);
    }

    DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame, libCore_gv_playerGroupFromPlayer[lp_player], true);
}

void libUIUI_gf_HeroConsoleUnitStatusBarsSetChannelBehaviorForBehaviorChannelBarRight (int lp_player, string lp_behavior) {
    // Variable Declarations
    unit lv_heroUnit;

    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_unitStatusBarsMonitorUnit_Channel;
    if (((UnitBehaviorDuration(lv_heroUnit, lp_behavior) >= UnitBehaviorDuration(lv_heroUnit, libUIUI_gv_heroConsoleUnitStatusBars_BehaviorChannelBarCurrentBehaviorForPlayerRight[lp_player])) || (StringToInt(CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "DisplayPriority", c_playerAny)) > StringToInt(CatalogFieldValueGet(c_gameCatalogBehavior, libUIUI_gv_heroConsoleUnitStatusBars_BehaviorChannelBarCurrentBehaviorForPlayerRight[lp_player], "DisplayPriority", c_playerAny))))) {
        if ((libUIUI_gv_heroConsoleUnitStatusBars_BehaviorChannelBarCurrentBehaviorForPlayerRight[lp_player] != "") && (UnitBehaviorDurationTotal(lv_heroUnit, libUIUI_gv_heroConsoleUnitStatusBars_BehaviorChannelBarCurrentBehaviorForPlayerRight[lp_player]) > 0.0) && (StringToInt(CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "DisplayPriority", c_playerAny)) < StringToInt(CatalogFieldValueGet(c_gameCatalogBehavior, libUIUI_gv_heroConsoleUnitStatusBars_BehaviorChannelBarCurrentBehaviorForPlayerRight[lp_player], "DisplayPriority", c_playerAny)))) {
            return ;
        }

        libUIUI_gv_heroConsoleUnitStatusBars_BehaviorChannelBarCurrentBehaviorForPlayerRight[lp_player] = lp_behavior;
        libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarDurationBarRight, lp_behavior, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabelRight, StringExternal(CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_player]);
    }

    DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrameRight, libCore_gv_playerGroupFromPlayer[lp_player], true);
}

void libUIUI_gf_HeroConsoleUnitStatusBarsSetChannelBehaviorForBehaviorChannelBarFromUnit (int lp_player, string lp_behavior, unit lp_unit) {
    // Variable Declarations
    unit lv_heroUnit;

    // Variable Initialization

    // Implementation
    lv_heroUnit = lp_unit;
    if ((UnitBehaviorDuration(lv_heroUnit, lp_behavior) >= UnitBehaviorDuration(lv_heroUnit, libUIUI_gv_heroConsoleUnitStatusBars_BehaviorChannelBarCurrentBehaviorForPlayer[lp_player]))) {
        libUIUI_gv_heroConsoleUnitStatusBars_BehaviorChannelBarCurrentBehaviorForPlayer[lp_player] = lp_behavior;
        libNtve_gf_SetDialogItemBehavior(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarDurationBar, lp_behavior, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabel, StringExternal(CatalogFieldValueGet(c_gameCatalogBehavior, lp_behavior, "Name", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_player]);
    }

    DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame, libCore_gv_playerGroupFromPlayer[lp_player], true);
}

void libUIUI_gf_UIUpdateUnitFrameToShowBehaviorState (int lp_player, int lp_index) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    if ((libUIUI_gv_uIHeroBehaviorStates[lp_player].lv_invulnerableActive[lp_index] == true)) {
        DialogControlSetVisible(libUIUI_gv_uIHeroStatusFrames[lp_player].lv_invulnerableImage[lp_index], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unstoppableImage[lp_index], PlayerGroupAll(), false);
        return ;
    }

    if ((libUIUI_gv_uIHeroBehaviorStates[lp_player].lv_unstoppableActive[lp_index] == true)) {
        DialogControlSetVisible(libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unstoppableImage[lp_index], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_uIHeroStatusFrames[lp_player].lv_invulnerableImage[lp_index], PlayerGroupAll(), false);
        return ;
    }

    DialogControlSetVisible(libUIUI_gv_uIHeroStatusFrames[lp_player].lv_invulnerableImage[lp_index], PlayerGroupAll(), false);
    DialogControlSetVisible(libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unstoppableImage[lp_index], PlayerGroupAll(), false);
}

void libUIUI_gf_UIUnitStatusFramesHookupUnitStatusFramesForPlayer (int lp_player) {
    unitgroup auto77C03741_g;
    int auto77C03741_u;

    // Variable Declarations
    unit lv_itHero;
    int lv_heroCount;

    // Variable Initialization

    // Implementation
    if (((lp_player > libCore_gv_bALMaxPlayers) || (lp_player < 1) || (libUIUI_gv_useStatusFrames == false))) {
        return ;
    }

    auto77C03741_g = libGame_gv_players[lp_player].lv_heroUnitGroup;
    auto77C03741_u = 1;
    for ( ; auto77C03741_u <= UnitGroupCount(auto77C03741_g, c_unitCountAll) ; auto77C03741_u += (lv_itHero == UnitGroupUnit(auto77C03741_g, auto77C03741_u)) ) {
        lv_itHero = UnitGroupUnit(auto77C03741_g, auto77C03741_u);
        libUIUI_gf_UIUnitStatusFramesUpdateUnitStatusFramesForUnit(lp_player, lv_itHero);
    }
}

void libUIUI_gf_UIUnitStatusFramesUpdateUnitStatusFramesForUnit (int lp_player, unit lp_unit) {
    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    if (((lp_player < 1) || (lp_player > libCore_gv_bALMaxPlayers))) {
        return ;
    }

    if ((libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unitCount == libUIUI_gv_uI_MaxHeroGroupStatusFrames)) {
        return ;
    }

    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unitCount += 1;
    lv_index = libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unitCount;
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unit[lv_index] = lp_unit;
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/BotDifficultyLabel", lp_unit);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_botDifficultyLabel[lv_index] = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/BotStatusLabel", lp_unit);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_botStatusLabel[lv_index] = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HeroUnitStatusParentFrame/HealthBarResistant", lp_unit);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unitHealthBarResistant[lv_index] = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "HeroUnitStatusParentFrame/HealthBarVulnerable", lp_unit);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unitHealthBarVulnerable[lv_index] = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypePanel, "HeroUnitStatusParentFrame/InvincibleHealthBarFrame", lp_unit);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unitHealthBarInvincible[lv_index] = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "HeroUnitStatusParentFrame/DimmingFrame", lp_unit);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unitHealthBarDimmed[lv_index] = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "HeroUnitStatusParentFrame/HeroInvulnerableFrameBackground", lp_unit);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_invulnerableImage[lv_index] = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "HeroUnitStatusParentFrame/HeroUnstoppableFrameBackground", lp_unit);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unstoppableImage[lv_index] = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "HeroUnitStatusParentFrame/HeroResistantFrameBackground", lp_unit);
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_resistantImage[lv_index] = DialogControlLastCreated();
}

void libUIUI_gf_UIUnitStatusFramesRemoveUnitfromUnitStatusFrameHookup (int lp_player, unit lp_unit) {
    int auto72BD5671_ae;
    int auto72BD5671_ai;

    // Variable Declarations
    int lv_maxIndexCount;
    int lv_itIndex;
    int lv_currentUnitIndex;
    unit lv_unit;

    // Variable Initialization

    // Implementation
    lv_maxIndexCount = libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unitCount;
    lv_currentUnitIndex = libUIUI_gf_UIUnitStatusFramesGetUnitIndex(lp_player, lp_unit);
    if ((lv_currentUnitIndex == 0)) {
        return ;
    }

    if ((libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unit[lv_maxIndexCount] == lp_unit)) {
        libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unitCount -= 1;
        return ;
    }

    auto72BD5671_ae = (lv_maxIndexCount - 1
);
    auto72BD5671_ai = 1;
    lv_itIndex = lv_currentUnitIndex;
    for ( ; ( (auto72BD5671_ai >= 0 && lv_itIndex <= auto72BD5671_ae) || (auto72BD5671_ai <= 0 && lv_itIndex >= auto72BD5671_ae) ) ; lv_itIndex += auto72BD5671_ai ) {
        libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unit[lv_itIndex] = libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unit[(lv_itIndex + 1)];
        libUIUI_gv_uIHeroStatusFrames[lp_player].lv_botDifficultyLabel[lv_itIndex] = libUIUI_gv_uIHeroStatusFrames[lp_player].lv_botDifficultyLabel[(lv_itIndex + 1)];
        libUIUI_gv_uIHeroStatusFrames[lp_player].lv_botStatusLabel[lv_itIndex] = libUIUI_gv_uIHeroStatusFrames[lp_player].lv_botStatusLabel[(lv_itIndex + 1)];
        libUIUI_gv_uIHeroStatusFrames[lp_player].lv_invulnerableImage[lv_itIndex] = libUIUI_gv_uIHeroStatusFrames[lp_player].lv_invulnerableImage[(lv_itIndex + 1)];
        libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unstoppableImage[lv_itIndex] = libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unstoppableImage[(lv_itIndex + 1)];
        libUIUI_gv_uIHeroStatusFrames[lp_player].lv_resistantImage[lv_itIndex] = libUIUI_gv_uIHeroStatusFrames[lp_player].lv_resistantImage[(lv_itIndex + 1)];
        libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unitHealthBarInvincible[lv_itIndex] = libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unitHealthBarInvincible[(lv_itIndex + 1)];
    }
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unitCount -= 1;
}

void libUIUI_gf_UIUnitStatusFramesResetUnitStatusFramesForPlayer (int lp_player) {
    // Implementation
    libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unitCount = 0;
}

int libUIUI_gf_UIUnitStatusFramesGetUnitIndex (int lp_player, unit lp_unit) {
    int autoB41525CD_ae;
    int autoB41525CD_ai;

    // Variable Declarations
    int lv_itUnit;

    // Variable Initialization

    // Implementation
    autoB41525CD_ae = libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unitCount;
    autoB41525CD_ai = 1;
    lv_itUnit = 1;
    for ( ; ( (autoB41525CD_ai >= 0 && lv_itUnit <= autoB41525CD_ae) || (autoB41525CD_ai <= 0 && lv_itUnit >= autoB41525CD_ae) ) ; lv_itUnit += autoB41525CD_ai ) {
        if ((lp_unit == libUIUI_gv_uIHeroStatusFrames[lp_player].lv_unit[lv_itUnit])) {
            return lv_itUnit;
        }

    }
    return 0;
}

void libUIUI_gf_UIHeroTrackerArrowShowHideForPlayer (bool lp_showHide, int lp_player) {
    // Variable Declarations
    unit lv_itHero;
    int lv_index;

    // Variable Initialization

    // Implementation
    DialogControlSetVisible(libUIUI_gv_uIHeroTrackerArrows.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
}

void libUIUI_gf_UIHeroTrackerArrowShowHideHeroUnitForPlayer (bool lp_showHide, int lp_player, unit lp_unit) {
    int autoC005CB17_ae;
    int autoC005CB17_ai;

    // Variable Declarations
    unit lv_itHero;
    int lv_index;

    // Variable Initialization

    // Implementation
    autoC005CB17_ae = libUIUI_gv_uI_MaxHeroGroupStatusFrames;
    autoC005CB17_ai = 1;
    lv_index = 1;
    for ( ; ( (autoC005CB17_ai >= 0 && lv_index <= autoC005CB17_ae) || (autoC005CB17_ai <= 0 && lv_index >= autoC005CB17_ae) ) ; lv_index += autoC005CB17_ai ) {
        if ((libUIUI_gv_uIHeroTrackerArrows.lv_unit[lv_index] == lp_unit)) {
            DialogControlSetVisible(libUIUI_gv_uIHeroTrackerArrows.lv_arrow[lv_index], libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
            DialogControlSetVisible(libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[lv_index], libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
            return ;
        }

    }
}

void libUIUI_gf_UIHeroTrackerArrowHookupTrackerArrowsForPlayer (int lp_player) {
    unitgroup autoA921AE06_g;
    int autoA921AE06_u;

    // Variable Declarations
    unit lv_itHero;
    int lv_heroCount;
    int lv_index;

    // Variable Initialization

    // Implementation
    if (((lp_player > libCore_gv_bALMaxPlayers) || (lp_player < 1))) {
        return ;
    }

    libUIUI_gv_uIHeroTrackerArrows.lv_unitCount = 0;
    autoA921AE06_g = libGame_gv_players[lp_player].lv_heroUnitGroup;
    autoA921AE06_u = 1;
    for ( ; autoA921AE06_u <= UnitGroupCount(autoA921AE06_g, c_unitCountAll) ; autoA921AE06_u += (lv_itHero == UnitGroupUnit(autoA921AE06_g, autoA921AE06_u)) ) {
        lv_itHero = UnitGroupUnit(autoA921AE06_g, autoA921AE06_u);
        if ((lv_itHero == libGame_gv_players[lp_player].lv_heroUnit)) {
            continue;
        }

        libUIUI_gv_uIHeroTrackerArrows.lv_unitCount += 1;
        lv_index = libUIUI_gv_uIHeroTrackerArrows.lv_unitCount;
        if ((lv_index > libUIUI_gv_uI_MaxHeroGroupStatusFrames)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_C22535C8", "A", UnitGetName(lv_itHero));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_UIUI_C22535C8"), true);
            lv_index = libUIUI_gv_uI_MaxHeroGroupStatusFrames;
        }
        else {
            libUIUI_gv_uIHeroTrackerArrows.lv_unit[lv_index] = lv_itHero;
        }
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIHeroTrackerArrows.lv_arrow[lv_index], lv_itHero, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[lv_index], (CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(lv_itHero), "HeroIcon", lp_player)), libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    libUIUI_gf_UIHeroTrackerArrowShowHideForPlayer(true, lp_player);
}

void libUIUI_gf_MapMechanicsRavenCourtShowHidePanel (bool lp_showHide) {
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtPanel, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtPanel, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
}

void libUIUI_gf_MapMechanicsRavenCourtSetModeForTeam (int lp_mode, int lp_teamThatWonTheCurse) {
    int auto3B208D3F_val;
    int auto2092A327_val;

    // Variable Declarations
    int lv_cursedTeam;

    // Variable Initialization

    // Implementation
    auto3B208D3F_val = lp_mode;
    if (auto3B208D3F_val == libUIUI_ge_MapMechanicsRavenCourtModes_NoActivity) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeFrame[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeFrame[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), true);
    }
    else if (auto3B208D3F_val == libUIUI_ge_MapMechanicsRavenCourtModes_TributeSpawning) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnInfoLabel, StringExternal("Param/Value/lib_UIUI_EA41E137"), PlayerGroupAll());
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnTimerLabel, PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnFrame, PlayerGroupAll(), true);
    }
    else if (auto3B208D3F_val == libUIUI_ge_MapMechanicsRavenCourtModes_TributeSpawned) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnInfoLabel, StringExternal("Param/Value/lib_UIUI_6A9FCB78"), PlayerGroupAll());
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnTimerLabel, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnFrame, PlayerGroupAll(), true);
    }
    else if (auto3B208D3F_val == libUIUI_ge_MapMechanicsRavenCourtModes_Curse) {
        lv_cursedTeam = (3 - lp_teamThatWonTheCurse);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel, "Storm_MapMechanic_MechanicTimerCentered_Blue", libGame_gv_teams[lp_teamThatWonTheCurse].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel, "Storm_MapMechanic_MechanicTimerCentered_Red", libGame_gv_teams[lv_cursedTeam].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel, StringExternal("UI/MapMechanics/CursedHollow/TeamCursed"), libGame_gv_teams[lv_cursedTeam].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel, StringExternal("UI/MapMechanics/CursedHollow/EnemyTeamCursed"), libGame_gv_teams[lp_teamThatWonTheCurse].lv_teamPlayerGroupNoNPCPlayers);
        auto2092A327_val = lv_cursedTeam;
        if (auto2092A327_val == libGame_gv_teamOrderIndex_C) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel, StringExternal("Param/Value/lib_UIUI_51946936"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        }
        else if (auto2092A327_val == libGame_gv_teamChaosIndex_C) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel, StringExternal("Param/Value/lib_UIUI_9C28BA95"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        }
        else {
        }
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseFrame, PlayerGroupAll(), true);
    }
    else {
    }
}

void libUIUI_gf_MapMechanicsRavenCourtSetTributeCountForTeam (int lp_count, int lp_team) {
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_UIUI_2C0A5180", "A", IntToText(lp_count));
    TextExpressionSetToken("Param/Expression/lib_UIUI_2C0A5180", "B", IntToText(libMapM_gv_mMRavenTributeThreshold_C));
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeCounterLabel[lp_team], TextExpressionAssemble("Param/Expression/lib_UIUI_2C0A5180"), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsRavenCourtSetRemainingCurseTimeForTeam (int lp_remainingSeconds, int lp_team) {
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsRavenCourtSetRemainingTributeSpawnTime (int lp_remainingSeconds) {
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsHauntedMinesShowHidePanel (bool lp_showHide) {
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesPanel, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesPanel, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
}

void libUIUI_gf_MapMechanicsHauntedMinesSetMode (int lp_mode) {
    int autoCBAA65F0_val;

    // Implementation
    autoCBAA65F0_val = lp_mode;
    if (autoCBAA65F0_val == libUIUI_ge_MapMechanicsHauntedMinesModes_MinesTimer) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesGolemModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerModeFrame, PlayerGroupAll(), true);
    }
    else if (autoCBAA65F0_val == libUIUI_ge_MapMechanicsHauntedMinesModes_Skulls) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesGolemModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeFrame, PlayerGroupAll(), true);
    }
    else if (autoCBAA65F0_val == libUIUI_ge_MapMechanicsHauntedMinesModes_Golem) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesGolemModeFrame, PlayerGroupAll(), true);
    }
    else {
    }
}

void libUIUI_gf_MapMechanicsHauntedMinesSetRemainingMinesWarningTime (int lp_remainingSeconds) {
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsHauntedMinesSetSkullCountForTeam (int lp_count, int lp_team) {
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeSkullCounterLabel[lp_team], IntToText(lp_count), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsHauntedMinesSetSkullsRemaining (int lp_count) {
    // Implementation
    TextExpressionSetToken("Param/Expression/lib_UIUI_265167E5", "A", IntToText(lp_count));
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeRemainingSkullsLabel, TextExpressionAssemble("Param/Expression/lib_UIUI_265167E5"), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsHauntedMinesSetUpGolemForTeam (unit lp_golemUnit, int lp_skullCount, int lp_team) {
    // Variable Declarations
    int lv_enemyTeam;

    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemHealthUnitStatus, lp_golemUnit, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemHealthUnitStatus, lp_golemUnit, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemModeSkullCounterLabel, IntToText(lp_skullCount), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemModeSkullCounterLabel, IntToText(lp_skullCount), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
}

void libUIUI_gf_MapMechanicsHauntedMinesSetUpGolemForObserver (unit lp_golemUnitTeamBlue, unit lp_golemUnitTeamRed, int lp_skullCountTeamBlue, int lp_skullCountTeamRed) {
    // Variable Declarations
    int lv_enemyTeam;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemHealthUnitStatus, lp_golemUnitTeamBlue, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemHealthUnitStatus, lp_golemUnitTeamRed, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemModeSkullCounterLabel, IntToText(lp_skullCountTeamBlue), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemModeSkullCounterLabel, IntToText(lp_skullCountTeamRed), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
}

void libUIUI_gf_MapMechanicsDragonShireShowHidePanel (bool lp_showHide) {
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShirePanel, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShirePanel, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, lp_showHide);
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShirePanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_showHide);
}

void libUIUI_gf_MapMechanicsDragonShireSetMode (int lp_mode) {
    int auto1CD42420_val;

    // Implementation
    auto1CD42420_val = lp_mode;
    if (auto1CD42420_val == libUIUI_ge_MapMechanicsDragonShireModes_ShrineTimer) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerModeFrame, PlayerGroupAll(), true);
    }
    else if (auto1CD42420_val == libUIUI_ge_MapMechanicsDragonShireModes_Shrines) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineModeFrame, PlayerGroupAll(), true);
    }
    else if (auto1CD42420_val == libUIUI_ge_MapMechanicsDragonShireModes_Dragon) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerModeFrame, PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonModeFrame, PlayerGroupAll(), true);
    }
    else {
    }
}

void libUIUI_gf_MapMechanicsDragonShireSetRemainingShrineWarningTime (int lp_remainingSeconds) {
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsDragonShireSetStarShrineOwner (int lp_team) {
    // Variable Declarations
    int lv_enemyTeam;

    // Variable Initialization

    // Implementation
    if ((lp_team == 0)) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), false);
    }
    else {
        lv_enemyTeam = (3 - lp_team);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[lv_enemyTeam], PlayerGroupAll(), false);
    }
}

void libUIUI_gf_MapMechanicsDragonShireSetMoonShrineOwner (int lp_team) {
    // Variable Declarations
    int lv_enemyTeam;

    // Variable Initialization

    // Implementation
    if ((lp_team == 0)) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), false);
    }
    else {
        lv_enemyTeam = (3 - lp_team);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[lv_enemyTeam], PlayerGroupAll(), false);
    }
}

void libUIUI_gf_MapMechanicsDragonShireSetRemainingDragonTime (int lp_remainingSeconds) {
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsDragonShireSetUpDragonForTeam (unit lp_dragonUnit, int lp_team) {
    // Variable Declarations
    int lv_enemyTeam;

    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthUnitStatus, lp_dragonUnit, PlayerGroupAll());
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthLabel, "Storm_MapMechanic_MechanicCounterSmallRight_Blue", libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthLabel, "Storm_MapMechanic_MechanicCounterSmallRight_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel, "Storm_MapMechanic_MechanicCounterSmallLeft_Blue", libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel, "Storm_MapMechanic_MechanicCounterSmallLeft_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel, StringExternal("UI/MapMechanics/Dragonshire/DragonKnight"), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel, StringExternal("UI/MapMechanics/Dragonshire/EnemyDragonKnight"), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
}

void libUIUI_gf_MapMechanicsGardenOfTerrorInit (int lp_parentPanel) {
    int init_i;

    int auto84B64AD9_ae;
    int auto84B64AD9_ai;

    // Variable Declarations
    int lv_itTeam;
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_enemyTeam;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Implementation
    DialogControlHookup(lp_parentPanel, c_triggerControlTypePanel, "GardenOfTerrorPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "SeedsFrame");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrame = DialogControlLastCreated();
    auto84B64AD9_ae = libCore_gv_bALMaxTeams;
    auto84B64AD9_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (auto84B64AD9_ai >= 0 && lv_itTeam <= auto84B64AD9_ae) || (auto84B64AD9_ai <= 0 && lv_itTeam >= auto84B64AD9_ae) ) ; lv_itTeam += auto84B64AD9_ai ) {
        lv_enemyTeam = (3 - lv_itTeam);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "SeedBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "SeedRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "SeedCounter");
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "StatusLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "StatusLabelFlashGold");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "StatusLabelFlashRed");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "CountdownLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "CountdownLabelFlashGold");
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "CountdownLabelFlashRed");
        DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
        libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lv_itTeam] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[libGame_gv_teamOrderIndex_C], "Storm_MapMechanic_MechanicCounterLeft_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[libGame_gv_teamChaosIndex_C], "Storm_MapMechanic_MechanicCounterRight_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[libGame_gv_teamOrderIndex_C], "Storm_MapMechanic_MechanicCounterMediumLeft_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[libGame_gv_teamChaosIndex_C], "Storm_MapMechanic_MechanicCounterMediumRight_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[libGame_gv_teamOrderIndex_C], "Storm_MapMechanic_MechanicCounterSmallLeft_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[libGame_gv_teamChaosIndex_C], "Storm_MapMechanic_MechanicCounterSmallRight_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TimeOfDayFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CountdownLabel");
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayCountdownLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "GolemFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "AllyGolemHealthBar");
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "EnemyGolemHealthBar");
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AllyGolemStatusLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_5CE5C89B"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemyGolemStatusLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_497DCACF"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AllyGolemTimerLabel");
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemyGolemTimerLabel");
    libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
}

void libUIUI_gf_MapMechanicsGardenOfTerrorShowHidePanel (bool lp_showHide) {
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorPanel, PlayerGroupAll(), lp_showHide);
}

void libUIUI_gf_MapMechanicsGardenOfTerrorShowHideNightWarning (bool lp_showHide) {
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayFrame, PlayerGroupAll(), lp_showHide);
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetNightWarningTime (int lp_remainingSeconds) {
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorTimeOfDayCountdownLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingSeconds), PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetGolemSummonPossibleForTeam (int lp_team, bool lp_summonPossible) {
    // Implementation
    libUIUI_gv_mapMechanicsGardenOfTerrorGolemSummonPossible[lp_team] = lp_summonPossible;
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedCountForTeam (text lp_countText, int lp_team, bool lp_golemSummonPossible) {
    // Variable Declarations
    int lv_enemyTeam;

    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    if ((lp_golemSummonPossible == true)) {
        if ((lp_team == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterLeft_Blue", libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterLeft_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        }
        else {
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterRight_Blue", libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterRight_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        }
    }
    else {
        if ((lp_team == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterLeft_Disabled", PlayerGroupAll());
        }
        else {
            libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], "Storm_MapMechanic_MechanicCounterRight_Disabled", PlayerGroupAll());
        }
    }
    libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedFrameImageForTeam(lp_team, lp_golemSummonPossible);
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], lp_countText, PlayerGroupAll());
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedFrameImageForTeam (int lp_team, bool lp_golemSummonPossible) {
    int autoC45B1EE1_val;

    // Implementation
    autoC45B1EE1_val = libUIUI_gv_mapMechanicsGardenOfTerrorLastSeedFrameStatus[lp_team];
    if (autoC45B1EE1_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Growing) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[lp_team], "@UI/hud_minimap_garden_Team1_Golem_Growing", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[lp_team], "@UI/hud_minimap_garden_Team2_Golem_Growing", PlayerGroupAll());
        return ;
    }
    else if (autoC45B1EE1_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_ReadyToSummon) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[lp_team], "@UI/hud_minimap_garden_Team1_Golem_Ready", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[lp_team], "@UI/hud_minimap_garden_Team2_Golem_Ready", PlayerGroupAll());
        return ;
    }
    else {
    }
    if ((lp_golemSummonPossible == true)) {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[lp_team], "@UI/hud_minimap_garden_Team1_Seed_Open", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[lp_team], "@UI/hud_minimap_garden_Team2_Seed_Open", PlayerGroupAll());
    }
    else {
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameBlueSeedImage[lp_team], "@UI/hud_minimap_garden_Team1_Seed_Closed", PlayerGroupAll());
        libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameRedSeedImage[lp_team], "@UI/hud_minimap_garden_Team2_Seed_Closed", PlayerGroupAll());
    }
}

void libUIUI_gf_MapMechanicsGardenOfTerrorShowHideGolemFrame (bool lp_showHide) {
    // Implementation
    DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrame, PlayerGroupAll(), lp_showHide);
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetUpGolemStatusBarForTeam (unit lp_golemUnit, int lp_team) {
    int autoE5B9E0EA_val;
    int autoD500ACC5_val;

    // Variable Declarations
    int lv_enemyTeam;

    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    if ((UnitIsAlive(lp_golemUnit) == true)) {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, lp_golemUnit, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, lp_golemUnit, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers, true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, true);
        autoD500ACC5_val = lp_team;
        if (autoD500ACC5_val == libGame_gv_teamOrderIndex_C) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, lp_golemUnit, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        }
        else if (autoD500ACC5_val == libGame_gv_teamChaosIndex_C) {
            libNtve_gf_SetDialogItemUnit(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, lp_golemUnit, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        }
        else {
        }
    }
    else {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers, false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        autoE5B9E0EA_val = lp_team;
        if (autoE5B9E0EA_val == libGame_gv_teamOrderIndex_C) {
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemHealthUnitStatus, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }
        else if (autoE5B9E0EA_val == libGame_gv_teamChaosIndex_C) {
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemHealthUnitStatus, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }
        else {
        }
    }
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetGolemRemainingTimeForTeam (int lp_team, int lp_remainingTime) {
    int auto6FE397AA_val;
    int autoAF37D237_val;

    // Variable Declarations
    int lv_enemyTeam;

    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    if ((lp_remainingTime > 0)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers, true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, true);
        autoAF37D237_val = lp_team;
        if (autoAF37D237_val == libGame_gv_teamOrderIndex_C) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        }
        else if (autoAF37D237_val == libGame_gv_teamChaosIndex_C) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        }
        else {
        }
    }
    else {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers, false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        auto6FE397AA_val = lp_team;
        if (auto6FE397AA_val == libGame_gv_teamOrderIndex_C) {
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemTimerLabel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }
        else if (auto6FE397AA_val == libGame_gv_teamChaosIndex_C) {
            DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemTimerLabel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }
        else {
        }
    }
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetGolemGrowTimeForTeam (int lp_team, int lp_remainingTime) {
    // Variable Declarations
    int lv_enemyTeam;

    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    if ((lp_remainingTime > 0)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lp_team], TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), lp_remainingTime), PlayerGroupAll());
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], PlayerGroupAll(), true);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], PlayerGroupAll(), false);
    }
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetGolemStatusTextForTeam (int lp_team, int lp_status) {
    int auto7D3A6A92_val;

    // Variable Declarations
    int lv_enemyTeam;

    // Variable Initialization

    // Implementation
    lv_enemyTeam = (3 - lp_team);
    auto7D3A6A92_val = lp_status;
    if (auto7D3A6A92_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Null) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel, StringToText(""), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel, StringToText(""), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    }
    else if (auto7D3A6A92_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Growing) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_0E651D6C"), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_1682864F"), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    }
    else if (auto7D3A6A92_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Active) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_93643624"), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_9268A46E"), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    }
    else if (auto7D3A6A92_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_ReadyToSummon) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_5C82ADC7"), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_E4FDFC2B"), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    }
    else if (auto7D3A6A92_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_WaitToSummon) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameAllyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_6CA2033C"), libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorGolemFrameEnemyGolemStatusLabel, StringExternal("Param/Value/lib_UIUI_40BA8E02"), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
    }
    else {
    }
}

void libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedFrameStatusTextForTeam (int lp_team, int lp_status) {
    int auto3D4555AE_val;

    // Implementation
    libUIUI_gv_mapMechanicsGardenOfTerrorLastSeedFrameStatus[lp_team] = lp_status;
    auto3D4555AE_val = lp_status;
    if (auto3D4555AE_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Null) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], PlayerGroupAll(), false);
    }
    else if (auto3D4555AE_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Growing) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], StringExternal("Param/Value/lib_UIUI_7580B745"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], StringExternal("Param/Value/lib_UIUI_736DA5E9"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], StringExternal("Param/Value/lib_UIUI_739718CD"), PlayerGroupAll());
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], PlayerGroupAll(), true);
    }
    else if (auto3D4555AE_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_Active) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], PlayerGroupAll(), false);
    }
    else if (auto3D4555AE_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_ReadyToSummon) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], StringExternal("Param/Value/lib_UIUI_8B7100B9"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], StringExternal("Param/Value/lib_UIUI_8ED8BB41"), PlayerGroupAll());
        libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], StringExternal("Param/Value/lib_UIUI_5308A28B"), PlayerGroupAll());
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], PlayerGroupAll(), true);
    }
    else if (auto3D4555AE_val == libUIUI_ge_MapMechanicsGardenOfTerrorGolemStatusText_WaitToSummon) {
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameSeedCounterLabel[lp_team], PlayerGroupAll(), true);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], PlayerGroupAll(), false);
        DialogControlSetVisible(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], PlayerGroupAll(), false);
    }
    else {
    }
    libUIUI_gf_MapMechanicsGardenOfTerrorSetSeedFrameImageForTeam(lp_team, libUIUI_gv_mapMechanicsGardenOfTerrorGolemSummonPossible[lp_team]);
}

trigger auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_Trigger = null;
int auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_team;
bool auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_flash;
int auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_level;

void libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText (int lp_team, bool lp_flash, int lp_level) {
    auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_team = lp_team;
    auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_flash = lp_flash;
    auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_level = lp_level;

    if (auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_Trigger == null) {
        auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_Trigger = TriggerCreate("auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_TriggerFunc");
    }

    TriggerExecute(auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_Trigger, false, false);
}

bool auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_team;
    bool lp_flash = auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_flash;
    int lp_level = auto_libUIUI_gf_MapMechanicsGardenOfTerrorFlashSeedFrameStatusText_lp_level;

    int auto70B7A999_val;
    int auto36FA8889_val;

    // Variable Declarations
    int lv_localFlashLevel;

    // Variable Initialization

    // Implementation
    if ((lp_flash == false)) {
        if ((libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] == 0)) {
            return true;
        }

        libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] = 0;
    }
    else {
        if ((libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] == lp_level)) {
            return true;
        }

        libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] = lp_level;
    }
    if ((libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] > 0)) {
        lv_localFlashLevel = libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team];
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
        auto70B7A999_val = lv_localFlashLevel;
        if (auto70B7A999_val == 1) {
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
        }
        else if (auto70B7A999_val == 2) {
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
        }
        else {
        }
        while (true) {
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
            auto36FA8889_val = lv_localFlashLevel;
            if (auto36FA8889_val == 1) {
                DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
                DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
            }
            else if (auto36FA8889_val == 2) {
                DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
                DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
            }
            else {
            }
            Wait(0.5, c_timeGame);
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
            DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
            Wait(0.6, c_timeGame);
            if ((libUIUI_gv_mapMechanicsGardenOfTerrorSeedStatusTextFlashLevel[lp_team] != lv_localFlashLevel)) {
                return true;
            }

        }
    }
    else {
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabel[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameStatusLabelFlashRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabel[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 0.0);
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelGold[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
        DialogControlFadeTransparency(libUIUI_gv_mapMechanicsPanel.lv_gardenOfTerrorSeedsFrameCountdownLabelRed[lp_team], libGame_gf_PlayersOnTeamHeroes(lp_team, false), 0.0, 100.0);
    }
    return true;
}

void libUIUI_gf_MapMechanicHelpPanelShowHide (bool lp_showHide, playergroup lp_players) {
    // Implementation
    if ((lp_showHide == true)) {
        TriggerEnable(libUIUI_gt_MapMechanicHelpPanelOKButtonClicked, true);
    }

    DialogControlSetVisible(libUIUI_gv_mapMechanicHelpPanel.lv_mainPanel, lp_players, lp_showHide);
}

void libUIUI_gf_MapMechanicHelpPanelSetText (text lp_text) {
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_mapMechanicHelpPanel.lv_helpText, lp_text, PlayerGroupAll());
}

void libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer (int lp_player, text lp_titleText, text lp_numberText) {
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_multikillTimerTitleLabel, lp_titleText, libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_multikillTimerNumberLabel, lp_numberText, libCore_gv_playerGroupFromPlayer[lp_player]);
}

void libUIUI_gf_UIObserverUIAddPlayerToObserverUI (int lp_player) {
    // Variable Declarations
    int lv_slot;
    int lv_heroIndex;
    string lv_heroName;

    // Variable Initialization
    lv_heroName = "";

    // Implementation
    lv_slot = libGame_gv_players[lp_player].lv_rosterSlot;
    DialogControlSetVisible(libUIUI_gv_uIObserverUI.lv_heroPanels[lv_slot], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    DialogControlFadeTransparency(libUIUI_gv_uIObserverUI.lv_heroTopTalents[lv_slot], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], 0.01, 0.0);
    lv_heroIndex = lp_player;
    lv_heroName = (libGame_gv_players[lv_heroIndex].lv_heroData.lv_heroCatalogLink);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uIObserverUI.lv_heroPortraitImages[lv_slot], libGame_gv_players[lv_heroIndex].lv_heroData.lv_portrait, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIObserverUI.lv_heroTargetFrames[lv_slot], libGame_gv_players[lp_player].lv_heroUnit, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_uIObserverUI.lv_heroStatusBars[lv_slot], libGame_gv_players[lp_player].lv_heroUnit, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
}

void libUIUI_gf_UIObserverUIUpdateForPlayer (int lp_player) {
    int autoB0E7DA55_ae;
    int autoB0E7DA55_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_rosterSlot;
    fixed[libCore_gv_bALMaxTeams + 1] lv_teamDeaths;
    int lv_team;

    // Variable Initialization

    // Implementation
    autoB0E7DA55_ae = libCore_gv_bALMaxPlayers;
    autoB0E7DA55_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoB0E7DA55_ai >= 0 && lv_itPlayer <= autoB0E7DA55_ae) || (autoB0E7DA55_ai <= 0 && lv_itPlayer >= autoB0E7DA55_ae) ) ; lv_itPlayer += autoB0E7DA55_ai ) {
        if ((libGame_gv_players[lv_itPlayer].lv_playerStatus == libGame_ge_PlayerStatusStorm_Playing)) {
            lv_rosterSlot = libGame_gv_players[lv_itPlayer].lv_rosterSlot;
            if ((libGame_gv_players[lv_itPlayer].lv_faction == libGame_ge_Faction_Order)) {
                lv_team = 1;
            }
            else {
                lv_team = 2;
            }
            if ((libGame_gv_players[lv_itPlayer].lv_isDead == true)) {
                libNtve_gf_SetDialogItemText(libUIUI_gv_uIObserverUI.lv_heroDeathTimeLabels[lv_rosterSlot], FixedToText(TimerGetRemaining(libGame_gv_players[lv_itPlayer].lv_respawnTimer), 0), libCore_gv_playerGroupFromPlayer[lp_player]);
            }

            lv_teamDeaths[lv_team] += libGame_gv_scoreValues[lv_itPlayer].lv_deaths;
        }

    }
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIObserverUI.lv_teamTownsLabel[1], IntToText(libGame_gv_teams[1].lv_townsRemaining), libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIObserverUI.lv_teamTownsLabel[2], IntToText(libGame_gv_teams[2].lv_townsRemaining), libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIObserverUI.lv_teamLevelLabel[1], IntToText(libGame_gv_teams[1].lv_teamLevel), libCore_gv_playerGroupFromPlayer[lp_player]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIObserverUI.lv_teamLevelLabel[2], IntToText(libGame_gv_teams[2].lv_teamLevel), libCore_gv_playerGroupFromPlayer[lp_player]);
}

int libUIUI_gf_PingDeterminePingTargetType (unit lp_unit) {
    int auto73F0F178_ae;
    int auto73F0F178_ai;

    // Variable Declarations
    int lv_itPingTarget;
    string lv_unitTypeOfUnit;
    bool lv_unitHasOccupiedVehicleBehavior;

    // Variable Initialization

    // Implementation
    lv_unitTypeOfUnit = UnitGetType(lp_unit);
    lv_unitHasOccupiedVehicleBehavior = UnitHasBehavior2(lp_unit, "GenericVehicleBehaviorOccupied");
    auto73F0F178_ae = libUIUI_gv_ping_PingTargetCount;
    auto73F0F178_ai = 1;
    lv_itPingTarget = 1;
    for ( ; ( (auto73F0F178_ai >= 0 && lv_itPingTarget <= auto73F0F178_ae) || (auto73F0F178_ai <= 0 && lv_itPingTarget >= auto73F0F178_ae) ) ; lv_itPingTarget += auto73F0F178_ai ) {
        if ((libUIUI_gv_ping_PingTargets[lv_itPingTarget].lv_pingIsForOccupiedVehicle == lv_unitHasOccupiedVehicleBehavior) && (lv_unitTypeOfUnit == libUIUI_gv_ping_PingTargets[lv_itPingTarget].lv_unitType)) {
            return lv_itPingTarget;
        }

    }
    return 0;
}

unit libUIUI_gf_PingGetSpecialPingTargetInRangeOfPoint (point lp_point, bool lp_pingFromMinimap, int lp_pingingPlayer) {
    unitgroup auto65EB7870_g;
    int auto65EB7870_u;
    unitgroup autoBAC9C38F_g;
    int autoBAC9C38F_u;
    unitgroup auto5D8D7022_g;
    int auto5D8D7022_u;

    // Variable Declarations
    const fixed lv_worldSearchRange_C = 3.0;
    const fixed lv_minimapSearchRange_C = 4.0;
    unit lv_itUnit;
    fixed lv_searchRange;
    unitgroup lv_scanUnitGroup;

    // Variable Initialization
    lv_scanUnitGroup = UnitGroupEmpty();

    // Implementation
    if ((lp_pingFromMinimap == true)) {
        lv_searchRange = lv_minimapSearchRange_C;
    }
    else {
        lv_searchRange = lv_worldSearchRange_C;
    }
    lv_scanUnitGroup = UnitGroup(null, c_playerAny, RegionCircle(lp_point, lv_searchRange), UnitFilter(0, 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto65EB7870_g = lv_scanUnitGroup;
    auto65EB7870_u = 1;
    for ( ; auto65EB7870_u <= UnitGroupCount(auto65EB7870_g, c_unitCountAll) ; auto65EB7870_u += (lv_itUnit == UnitGroupUnit(auto65EB7870_g, auto65EB7870_u)) ) {
        lv_itUnit = UnitGroupUnit(auto65EB7870_g, auto65EB7870_u);
        if ((UnitHasBehavior2(lv_itUnit, "UnitCannotBePinged") == true)) {
            UnitGroupRemove(lv_scanUnitGroup, lv_itUnit);
        }

    }
    autoBAC9C38F_g = lv_scanUnitGroup;
    autoBAC9C38F_u = 1;
    for ( ; autoBAC9C38F_u <= UnitGroupCount(autoBAC9C38F_g, c_unitCountAll) ; autoBAC9C38F_u += (lv_itUnit == UnitGroupUnit(autoBAC9C38F_g, autoBAC9C38F_u)) ) {
        lv_itUnit = UnitGroupUnit(autoBAC9C38F_g, autoBAC9C38F_u);
        if ((UnitTypeTestAttribute(UnitGetType(lv_itUnit), c_unitAttributeHeroic) == true) && (libNtve_gf_UnitIsVisibleToPlayer(lv_itUnit, lp_pingingPlayer) == true)) {
            return lv_itUnit;
        }

    }
    auto5D8D7022_g = lv_scanUnitGroup;
    auto5D8D7022_u = 1;
    for ( ; auto5D8D7022_u <= UnitGroupCount(auto5D8D7022_g, c_unitCountAll) ; auto5D8D7022_u += (lv_itUnit == UnitGroupUnit(auto5D8D7022_g, auto5D8D7022_u)) ) {
        lv_itUnit = UnitGroupUnit(auto5D8D7022_g, auto5D8D7022_u);
        if (((libUIUI_gf_PingDeterminePingTargetType(lv_itUnit) != 0) || (libGame_gf_TownGetTownStructurePresetFromUnit(lv_itUnit) != libGame_ge_TownStructureTypes_None))) {
            return lv_itUnit;
        }

    }
    return null;
}

void libUIUI_gf_PingIncrementPingCountAndManageTimersForPlayer (int lp_player) {
    // Implementation
    if ((libCore_gv_dEBUGPingLimitEnabled == false)) {
        return ;
    }

    libUIUI_gv_pingCount[lp_player] += 1;
    TimerStart(libUIUI_gv_pingInputSuppressionTimer[lp_player], libUIUI_gv_uI_PingInputSuppressionTime_C, false, c_timeGame);
    TimerStart(libUIUI_gv_pingCountResetTimer[lp_player], libUIUI_gv_uI_PingCountResetTime_C, false, c_timeGame);
    if ((libUIUI_gv_pingCount[lp_player] >= libUIUI_gv_uI_PingMaxCount_C)) {
        TimerStart(libUIUI_gv_pingLockoutTimer[lp_player], libUIUI_gv_uI_PingLockoutTime_C, false, c_timeGame);
    }

}

void libUIUI_gf_PingResetPingLockoutTimeandPingCount (int lp_player) {
    // Implementation
    libUIUI_gv_pingCount[lp_player] = 0;
    libNtve_gf_StopTimer(libUIUI_gv_pingInputSuppressionTimer[lp_player]);
    libNtve_gf_StopTimer(libUIUI_gv_pingCountResetTimer[lp_player]);
    libNtve_gf_StopTimer(libUIUI_gv_pingLockoutTimer[lp_player]);
}

void libUIUI_gf_PingPlayerPingsUnit (int lp_pingingPlayer, unit lp_targetUnit, playergroup lp_pingPlayerGroup) {
    point autoD49C0A03_val;
    int auto8657C484_val;

    // Variable Declarations
    bool lv_targetIsAllied;
    text lv_colorForTarget;
    text lv_colorForPingingHero;
    text lv_nameOfPingingHero;
    int lv_targetType;
    bool lv_targetFound;
    text lv_nameOfTarget;
    text lv_textExpression;
    text lv_pingMessage;
    string lv_pingModel;
    soundlink lv_pingSound;
    int lv_townStructureTypeForUnit;

    // Variable Initialization
    lv_pingModel = "StormGeneralPing";
    lv_pingSound = SoundLink("UI_Game_Ping_General", -1);

    // Implementation
    lv_targetIsAllied = PlayerGetAlliance(lp_pingingPlayer, c_allianceIdChat, UnitGetOwner(lp_targetUnit));
    if ((lv_targetIsAllied == true)) {
        lv_colorForTarget = StringExternal("Param/Value/lib_UIUI_1C2DFD0A");
    }
    else {
        if ((UnitGetOwner(lp_targetUnit) == libCore_gv_cOMPUTER_Neutral)) {
            lv_colorForTarget = StringExternal("Param/Value/lib_UIUI_1E1DF5DF");
        }
        else {
            lv_colorForTarget = StringExternal("Param/Value/lib_UIUI_4EAC3090");
        }
    }
    lv_colorForPingingHero = StringExternal("Param/Value/lib_UIUI_4F4CCEA9");
    lv_nameOfPingingHero = UnitTypeGetName(UnitGetType(libGame_gv_players[lp_pingingPlayer].lv_heroUnit));
    if ((libGame_gv_players[UnitGetOwner(lp_targetUnit)].lv_heroUsesAnnouncementAlias == true)) {
        lv_nameOfTarget = libGame_gv_players[UnitGetOwner(lp_targetUnit)].lv_heroAnnouncementAliasText;
    }
    else {
        lv_nameOfTarget = UnitTypeGetName(UnitGetType(lp_targetUnit));
    }
    lv_targetType = libUIUI_gf_PingDeterminePingTargetType(lp_targetUnit);
    if ((lv_targetType != 0)) {
        lv_targetFound = true;
        if ((libUIUI_gv_ping_PingTargets[lv_targetType].lv_targetNameOverride != null)) {
            lv_nameOfTarget = libUIUI_gv_ping_PingTargets[lv_targetType].lv_targetNameOverride;
        }

        if ((lv_targetType == libUIUI_gv_ping_PingTargetCount) && (libCore_gv_mAPMapStringID == "ControlPoints")) {
            autoD49C0A03_val = UnitGetPosition(lp_targetUnit);
            if (autoD49C0A03_val == Point(124.0, 184.0)) {
                lv_nameOfTarget = StringExternal("Param/Value/lib_UIUI_3E1DF626");
            }
            else if (autoD49C0A03_val == Point(124.0, 127.0)) {
                lv_nameOfTarget = StringExternal("Param/Value/lib_UIUI_5799501A");
            }
            else if (autoD49C0A03_val == Point(124.0, 42.0)) {
                lv_nameOfTarget = StringExternal("Param/Value/lib_UIUI_696AB2FD");
            }
            else {
                if ((libSprt_gv_dEBUGDebugMessagesEnabled == true)) {
                    TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_D81DE3F3"), true);
                }

            }
        }

        if ((lv_targetIsAllied == true)) {
            UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "HelpPing", lp_targetUnit);
            lv_textExpression = libUIUI_gv_ping_PingTargets[lv_targetType].lv_textMessageAlliedTarget;
            TextExpressionSetToken("CustomExpression", c_textExpressionTokenMain, lv_textExpression);
            TextExpressionSetToken("CustomExpression", "C", lv_colorForPingingHero);
            TextExpressionSetToken("CustomExpression", "A", lv_nameOfPingingHero);
            TextExpressionSetToken("CustomExpression", "D", lv_colorForTarget);
            TextExpressionSetToken("CustomExpression", "B", lv_nameOfTarget);
            lv_pingMessage = TextExpressionAssemble("CustomExpression");
            lv_pingSound = libUIUI_gv_ping_PingTargets[lv_targetType].lv_pingSoundAlliedTarget;
            if ((libUIUI_gv_ping_PingTargets[lv_targetType].lv_heroVOLineAlliedTarget != libCore_ge_HeroVOEvents_Null)) {
                libSond_gf_HeroVOPlayHeroLine(libUIUI_gv_ping_PingTargets[lv_targetType].lv_heroVOLineAlliedTarget, lp_pingingPlayer, lp_pingPlayerGroup);
            }

        }
        else {
            UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "AttackPing", lp_targetUnit);
            lv_textExpression = libUIUI_gv_ping_PingTargets[lv_targetType].lv_textMessageEnemyTarget;
            TextExpressionSetToken("CustomExpression", c_textExpressionTokenMain, lv_textExpression);
            TextExpressionSetToken("CustomExpression", "C", lv_colorForPingingHero);
            TextExpressionSetToken("CustomExpression", "A", lv_nameOfPingingHero);
            TextExpressionSetToken("CustomExpression", "D", lv_colorForTarget);
            TextExpressionSetToken("CustomExpression", "B", lv_nameOfTarget);
            lv_pingMessage = TextExpressionAssemble("CustomExpression");
            lv_pingSound = libUIUI_gv_ping_PingTargets[lv_targetType].lv_pingSoundEnemyTarget;
            if ((libUIUI_gv_ping_PingTargets[lv_targetType].lv_heroVOLineEnemyTarget != libCore_ge_HeroVOEvents_Null)) {
                libSond_gf_HeroVOPlayHeroLine(libUIUI_gv_ping_PingTargets[lv_targetType].lv_heroVOLineEnemyTarget, lp_pingingPlayer, lp_pingPlayerGroup);
            }

        }
        if ((libAIAI_gf_HeroAIIsPlayerActive(lp_pingingPlayer, 1) == true)) {
            if ((libUIUI_gv_ping_PingTargets[lv_targetType].lv_heroVOLineHumanPingingPlayer != libCore_ge_HeroVOEvents_Null)) {
                libSond_gf_HeroVOPlayHeroLine(libUIUI_gv_ping_PingTargets[lv_targetType].lv_heroVOLineHumanPingingPlayer, lp_pingingPlayer, lp_pingPlayerGroup);
            }

        }
        else {
            if ((libUIUI_gv_ping_PingTargets[lv_targetType].lv_heroVOLineAIPingingPlayer != libCore_ge_HeroVOEvents_Null)) {
                libSond_gf_HeroVOPlayHeroLine(libUIUI_gv_ping_PingTargets[lv_targetType].lv_heroVOLineAIPingingPlayer, lp_pingingPlayer, lp_pingPlayerGroup);
            }

        }
    }

    if ((lv_targetFound == false) && (UnitTypeTestAttribute(UnitGetType(lp_targetUnit), c_unitAttributeHeroic) == true)) {
        lv_targetFound = true;
        if ((lp_targetUnit == libGame_gv_players[lp_pingingPlayer].lv_heroUnit)) {
            UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "HelpPing", lp_targetUnit);
            TextExpressionSetToken("Param/Expression/lib_UIUI_A17166FA", "C", lv_colorForPingingHero);
            TextExpressionSetToken("Param/Expression/lib_UIUI_A17166FA", "A", lv_nameOfPingingHero);
            lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_A17166FA");
            lv_pingSound = SoundLink("UI_Game_Ping_Help", -1);
            libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_PingAssistMe, lp_pingingPlayer, lp_pingPlayerGroup);
        }
        else {
            if ((lv_targetIsAllied == true)) {
                UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "HelpPing", lp_targetUnit);
                if ((libAIAI_gf_HeroAIIsPlayerActive(UnitGetOwner(lp_targetUnit), 2) == true) && (libAIAI_gf_HeroAICanPlayerPingPlayerForHelp(lp_pingingPlayer, UnitGetOwner(lp_targetUnit)) == true)) {
                    libNtve_gf_CreatePingFacingAngleWithType(lp_pingPlayerGroup, lv_pingModel, UnitGetPosition(lp_targetUnit), Color(100.00, 100.00, 100.00), 3.0, 270.0, -1, lp_pingingPlayer);
                    SoundPlayForPlayer(SoundLink("UI_Game_Ping_Help", -1), lp_pingingPlayer, lp_pingPlayerGroup, 100.0, 0.0);
                    return ;
                }

                TextExpressionSetToken("Param/Expression/lib_UIUI_0E193F9C", "C", lv_colorForPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_0E193F9C", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_0E193F9C", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_0E193F9C", "D", lv_colorForTarget);
                TextExpressionSetToken("Param/Expression/lib_UIUI_0E193F9C", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_0E193F9C");
                lv_pingSound = SoundLink("UI_Game_Ping_Help", -1);
                libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_PingAssistHero, lp_pingingPlayer, lp_pingPlayerGroup);
            }
            else {
                UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "AttackPing", lp_targetUnit);
                TextExpressionSetToken("Param/Expression/lib_UIUI_5F178A58", "C", lv_colorForPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_5F178A58", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_5F178A58", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_5F178A58", "D", lv_colorForTarget);
                TextExpressionSetToken("Param/Expression/lib_UIUI_5F178A58", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_5F178A58");
                lv_pingSound = SoundLink("UI_Game_Ping_Attack", -1);
                libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_PingKillHero, lp_pingingPlayer, lp_pingPlayerGroup);
            }
        }
    }

    lv_townStructureTypeForUnit = libGame_gf_TownGetTownStructurePresetFromUnit(lp_targetUnit);
    if ((lv_targetFound == false) && (lv_townStructureTypeForUnit != libGame_ge_TownStructureTypes_None)) {
        lv_targetFound = true;
        auto8657C484_val = lv_townStructureTypeForUnit;
        if (auto8657C484_val == libGame_ge_TownStructureTypes_Moonwell) {
            if ((lv_targetIsAllied == true)) {
                UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "HelpPing", lp_targetUnit);
                TextExpressionSetToken("Param/Expression/lib_UIUI_D5F24432", "C", lv_colorForPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_D5F24432", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_D5F24432", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_D5F24432", "D", lv_colorForTarget);
                TextExpressionSetToken("Param/Expression/lib_UIUI_D5F24432", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_D5F24432");
                lv_pingSound = SoundLink("UI_Game_Ping_General", -1);
            }
            else {
                UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "AttackPing", lp_targetUnit);
                TextExpressionSetToken("Param/Expression/lib_UIUI_43F90C78", "C", lv_colorForPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_43F90C78", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_43F90C78", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_43F90C78", "D", lv_colorForTarget);
                TextExpressionSetToken("Param/Expression/lib_UIUI_43F90C78", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_43F90C78");
                lv_pingSound = SoundLink("UI_Game_Ping_Attack", -1);
                libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_PingAttackTown, lp_pingingPlayer, lp_pingPlayerGroup);
            }
        }
        else if (auto8657C484_val == libGame_ge_TownStructureTypes_Core) {
            if ((lv_targetIsAllied == true)) {
                UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "DefendPing", lp_targetUnit);
                TextExpressionSetToken("Param/Expression/lib_UIUI_AD297C75", "C", lv_colorForPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_AD297C75", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_AD297C75", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_AD297C75", "D", lv_colorForTarget);
                TextExpressionSetToken("Param/Expression/lib_UIUI_AD297C75", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_AD297C75");
                lv_pingSound = SoundLink("UI_Game_Ping_Defend", -1);
                lv_pingModel = "DefendPingMinimap";
                libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_PingDefendCore, lp_pingingPlayer, lp_pingPlayerGroup);
            }
            else {
                UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "AttackPing", lp_targetUnit);
                TextExpressionSetToken("Param/Expression/lib_UIUI_2C958F1A", "C", lv_colorForPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_2C958F1A", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_2C958F1A", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_2C958F1A", "D", lv_colorForTarget);
                TextExpressionSetToken("Param/Expression/lib_UIUI_2C958F1A", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_2C958F1A");
                lv_pingSound = SoundLink("UI_Game_Ping_Attack", -1);
                libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_PingAttackCore, lp_pingingPlayer, lp_pingPlayerGroup);
            }
        }
        else {
            if ((lv_targetIsAllied == true)) {
                UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "DefendPing", lp_targetUnit);
                TextExpressionSetToken("Param/Expression/lib_UIUI_DCDF8D55", "C", lv_colorForPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_DCDF8D55", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_DCDF8D55", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_DCDF8D55", "D", lv_colorForTarget);
                TextExpressionSetToken("Param/Expression/lib_UIUI_DCDF8D55", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_DCDF8D55");
                lv_pingSound = SoundLink("UI_Game_Ping_Defend", -1);
                lv_pingModel = "DefendPingMinimap";
                libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_PingDefendTown, lp_pingingPlayer, lp_pingPlayerGroup);
            }
            else {
                UnitCreateEffectUnit(libGame_gv_players[lp_pingingPlayer].lv_heroUnit, "AttackPing", lp_targetUnit);
                TextExpressionSetToken("Param/Expression/lib_UIUI_E37D78F1", "C", lv_colorForPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_E37D78F1", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_E37D78F1", "A", lv_nameOfPingingHero);
                TextExpressionSetToken("Param/Expression/lib_UIUI_E37D78F1", "D", lv_colorForTarget);
                TextExpressionSetToken("Param/Expression/lib_UIUI_E37D78F1", "B", lv_nameOfTarget);
                lv_pingMessage = TextExpressionAssemble("Param/Expression/lib_UIUI_E37D78F1");
                lv_pingSound = SoundLink("UI_Game_Ping_Attack", -1);
                libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_PingAttackTown, lp_pingingPlayer, lp_pingPlayerGroup);
            }
        }
    }

    if ((lv_targetFound == true)) {
        UIDisplayMessage(lp_pingPlayerGroup, c_messageAreaChat, lv_pingMessage);
        libNtve_gf_CreatePingFacingAngleWithType(lp_pingPlayerGroup, lv_pingModel, UnitGetPosition(lp_targetUnit), Color(100.00, 100.00, 100.00), 3.0, 270.0, -1, lp_pingingPlayer);
        SoundPlayForPlayer(lv_pingSound, lp_pingingPlayer, lp_pingPlayerGroup, 100.0, 0.0);
    }
    else {
        libNtve_gf_CreatePingFacingAngleWithType(lp_pingPlayerGroup, lv_pingModel, EventPingPoint(), Color(100.00, 100.00, 100.00), 3.0, 270.0, -1, lp_pingingPlayer);
        SoundPlayForPlayer(lv_pingSound, lp_pingingPlayer, lp_pingPlayerGroup, 100.0, 0.0);
    }
}

void libUIUI_gf_PingAIResponse (int lp_pingingPlayer, unit lp_targetUnit, playergroup lp_pingPlayerGroup) {
    // Variable Declarations
    bool lv_targetIsAllied;
    int lv_targetType;
    int lv_townStructureTypeForUnit;

    // Variable Initialization

    // Implementation
    lv_targetType = libUIUI_gf_PingDeterminePingTargetType(lp_targetUnit);
    if ((lv_targetType != 0)) {
        if ((libUIUI_gv_ping_PingTargets[lv_targetType].lv_customPingResponseTrigger != null)) {
            libUIUI_gv_ping_PingCallbackPingingPlayer = lp_pingingPlayer;
            libUIUI_gv_ping_PingCallbackTargetUnit = lp_targetUnit;
            TriggerExecute(libUIUI_gv_ping_PingTargets[lv_targetType].lv_customPingResponseTrigger, true, false);
        }

        return ;
    }

    if ((UnitTypeTestAttribute(UnitGetType(lp_targetUnit), c_unitAttributeHeroic) == true)) {
        libAIAI_gf_HeroAIPlayerPingsHero(lp_pingingPlayer, lp_targetUnit);
        return ;
    }

    lv_townStructureTypeForUnit = libGame_gf_TownGetTownStructurePresetFromUnit(lp_targetUnit);
    if ((lv_townStructureTypeForUnit != libGame_ge_TownStructureTypes_None)) {
        if ((lv_townStructureTypeForUnit == libGame_ge_TownStructureTypes_Core)) {
            libAIAI_gf_HeroAIPlayerPingsCore(lp_pingingPlayer, lp_targetUnit);
        }
        else {
            lv_targetIsAllied = PlayerGetAlliance(lp_pingingPlayer, c_allianceIdChat, UnitGetOwner(lp_targetUnit));
            if ((lv_targetIsAllied == true)) {
                libAIAI_gf_HeroAIPlayerPingsDefendTownStructure(lp_pingingPlayer, lp_targetUnit);
            }
            else {
                libAIAI_gf_HeroAIPlayerPingsPushTownStructure(lp_pingingPlayer, lp_targetUnit);
            }
        }
    }

}

void libUIUI_gf_PingPlayerUsesAssistMePing (int lp_player, unit lp_targetUnit, point lp_location) {
    string autoC3C26EF1_val;

    // Variable Declarations
    int lv_pingType;
    text lv_targetName;
    int lv_targetType;
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;

    // Variable Initialization
    lv_pingType = c_pingTypeAssistMe;
    lv_pingPlayerGroup = PlayerGroupEmpty();
    lv_pingModel = "StormGeneralPing";
    lv_pingSound = SoundLink("UI_Game_Ping_General", -1);

    // Implementation
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    lv_pingPlayerGroup = PlayerGroupMath(libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false), PlayerGroupMuting(libNtve_ge_MuteType_Pings, lp_player, true), libNtve_ge_PlayerGroupOperation_Subtract);
    lv_pingSound = SoundLink("UI_Game_Ping_Help", -1);
    lv_pingModel = "AssistMePingMinimap";
    lv_targetType = libUIUI_gf_PingDeterminePingTargetType(lp_targetUnit);
    libNtve_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(100.00, 100.00, 100.00), 3.0, 270.0, lv_pingType, lp_player);
    PingSetScale(PingLastCreated(), 0.6);
    SoundPlayForPlayer(lv_pingSound, lp_player, lv_pingPlayerGroup, 100.0, 0.0);
    UnitCreateEffectPoint(libGame_gv_players[lp_player].lv_heroUnit, "AssistMePing", lp_location);
    if (((lp_targetUnit == null) || (UnitFilterMatch(lp_targetUnit, UnitGetOwner(lv_pingingPlayerHero), UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_289FB7DC", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
        TextExpressionSetToken("Param/Expression/lib_UIUI_289FB7DC", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
        UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_289FB7DC"));
    }
    else {
        if ((lv_targetType != 0) && (libUIUI_gv_ping_PingTargets[lv_targetType].lv_targetNameOverride != null)) {
            lv_targetName = libUIUI_gv_ping_PingTargets[lv_targetType].lv_targetNameOverride;
        }
        else if ((libGame_gv_players[UnitGetOwner(lp_targetUnit)].lv_heroUsesAnnouncementAlias == true)) {
            lv_targetName = libGame_gv_players[UnitGetOwner(lp_targetUnit)].lv_heroAnnouncementAliasText;
        }
        else if (true) {
            lv_targetName = UnitGetName(lp_targetUnit);
        }
        if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_targetUnit)) == libGame_gf_EnemyTeamNumberOfPlayer(lp_player))) {
            if ((UnitFilterMatch(lp_targetUnit, lp_player, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_3FD0895A", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_3FD0895A", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_3FD0895A", "B", lv_targetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_3FD0895A"));
            }
            else if ((UnitFilterMatch(lp_targetUnit, lp_player, libCore_gv_filtersHeroicEnemyorNeutral) == true)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_50B64FB9", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_50B64FB9", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_50B64FB9", "B", lv_targetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_50B64FB9"));
            }
            else if ((UnitGetType(lp_targetUnit) == "JungleGraveGolemLaner")) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_A45642C7", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_A45642C7", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_A45642C7", "B", lv_targetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_A45642C7"));
            }
            else if (true) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_962A8AA1", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_962A8AA1", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_962A8AA1"));
            }
        }
        else {
            if ((UnitFilterMatch(lp_targetUnit, lp_player, libCore_gv_filtersHeroicAlly) == true)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_D8A53C54", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_D8A53C54", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_D8A53C54", "B", lv_targetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_D8A53C54"));
            }
            else if ((UnitFilterMatch(lp_targetUnit, lp_player, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_0A460F80", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_0A460F80", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_0A460F80", "B", lv_targetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_0A460F80"));
            }
            else if ((UnitFilterMatch(lp_targetUnit, lp_player, UnitFilter(0, 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)))) == true)) {
                autoC3C26EF1_val = UnitGetType(lp_targetUnit);
                if (autoC3C26EF1_val == "DragonShireShrineMoon") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_57F2E174", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_57F2E174", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_57F2E174", "B", lv_targetName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_57F2E174"));
                }
                else if (autoC3C26EF1_val == "DragonShireShrineSun") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_80F26FF2", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_80F26FF2", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_80F26FF2", "B", lv_targetName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_80F26FF2"));
                }
                else if (autoC3C26EF1_val == "XelNagaWatchTower") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_6310C497", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_6310C497", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_6310C497"));
                }
                else if (autoC3C26EF1_val == "DocksPirateCaptain") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C93B900C", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C93B900C", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_C93B900C"));
                }
                else if (autoC3C26EF1_val == "DocksTreasureChest") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_B587146C", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_B587146C", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_B587146C"));
                }
                else if (autoC3C26EF1_val == "RavenLordTribute") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_A7E3E303", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_A7E3E303", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_A7E3E303"));
                }
                else {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_42A13BF7", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_42A13BF7", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_42A13BF7"));
                }
            }
            else if ((UnitGetType(lp_targetUnit) == "JungleGraveGolemLaner")) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_B52607BC", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_B52607BC", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_B52607BC", "B", lv_targetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_B52607BC"));
            }
            else if (true) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_80F8E278", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_80F8E278", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_80F8E278"));
            }
        }
    }
}

void libUIUI_gf_PingPlayerUsesDangerPing (int lp_player, point lp_location, unit lp_targetUnit) {
    // Variable Declarations
    int lv_pingType;
    text lv_targetName;
    int lv_targetType;
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;

    // Variable Initialization
    lv_pingType = c_pingTypeDanger;
    lv_pingPlayerGroup = PlayerGroupEmpty();
    lv_pingModel = "StormGeneralPing";
    lv_pingSound = SoundLink("UI_Game_Ping_General", -1);

    // Implementation
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    lv_pingPlayerGroup = PlayerGroupMath(libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false), PlayerGroupMuting(libNtve_ge_MuteType_Pings, lp_player, true), libNtve_ge_PlayerGroupOperation_Subtract);
    lv_pingSound = SoundLink("UI_Game_Ping_Careful", -1);
    lv_pingModel = "DangerPingMinimap";
    lv_targetType = libUIUI_gf_PingDeterminePingTargetType(lp_targetUnit);
    libNtve_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(100.00, 100.00, 100.00), 3.0, 270.0, lv_pingType, lp_player);
    PingSetScale(PingLastCreated(), 0.6);
    SoundPlayForPlayer(lv_pingSound, lp_player, lv_pingPlayerGroup, 100.0, 0.0);
    if (((lp_targetUnit == null) || (UnitFilterMatch(lp_targetUnit, UnitGetOwner(lv_pingingPlayerHero), UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
        UnitCreateEffectPoint(libGame_gv_players[lp_player].lv_heroUnit, "DangerPingPoint", lp_location);
        TextExpressionSetToken("Param/Expression/lib_UIUI_B79FD716", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
        TextExpressionSetToken("Param/Expression/lib_UIUI_B79FD716", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
        UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_B79FD716"));
    }
    else {
        if ((lv_targetType != 0) && (libUIUI_gv_ping_PingTargets[lv_targetType].lv_targetNameOverride != null)) {
            lv_targetName = libUIUI_gv_ping_PingTargets[lv_targetType].lv_targetNameOverride;
        }
        else if ((libGame_gv_players[UnitGetOwner(lp_targetUnit)].lv_heroUsesAnnouncementAlias == true)) {
            lv_targetName = libGame_gv_players[UnitGetOwner(lp_targetUnit)].lv_heroAnnouncementAliasText;
        }
        else if (true) {
            lv_targetName = UnitGetName(lp_targetUnit);
        }
        if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_targetUnit)) != libGame_gf_TeamNumberOfPlayer(lp_player))) {
            if (((UnitFilterMatch(lp_targetUnit, lp_player, libCore_gv_filtersHeroicEnemyorNeutral) == true) || (UnitFilterMatch(lp_targetUnit, lp_player, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) || (UnitGetType(lp_targetUnit) == "JungleGraveGolemLaner"))) {
                UnitCreateEffectUnit(lv_pingingPlayerHero, "DangerPingUnit", lp_targetUnit);
                if ((UnitGetOwner(lp_targetUnit) == libCore_gv_cOMPUTER_Neutral)) {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_D85365F0", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_D85365F0", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_D85365F0", "B", lv_targetName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_D85365F0"));
                }
                else {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_5D96DEC5", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_5D96DEC5", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_5D96DEC5", "B", lv_targetName);
                    TextExpressionSetToken("Param/Expression/lib_UIUI_5D96DEC5", "B", lv_targetName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_5D96DEC5"));
                }
            }
            else {
                UnitCreateEffectPoint(libGame_gv_players[lp_player].lv_heroUnit, "DangerPingPoint", lp_location);
                TextExpressionSetToken("Param/Expression/lib_UIUI_6A9CA732", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_6A9CA732", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_6A9CA732"));
            }
        }
        else {
            if (((UnitFilterMatch(lp_targetUnit, lp_player, libCore_gv_filtersHeroicAlly) == true) || (UnitFilterMatch(lp_targetUnit, lp_player, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) || (UnitGetType(lp_targetUnit) == "JungleGraveGolemLaner"))) {
                UnitCreateEffectUnit(lv_pingingPlayerHero, "DangerPingUnit", lp_targetUnit);
                if ((lv_targetType != 0) && (libUIUI_gv_ping_PingTargets[lv_targetType].lv_targetNameOverride != null)) {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_472BAA00", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_472BAA00", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_472BAA00", "B", libUIUI_gv_ping_PingTargets[lv_targetType].lv_targetNameOverride);
                    TextExpressionSetToken("Param/Expression/lib_UIUI_472BAA00", "B", libUIUI_gv_ping_PingTargets[lv_targetType].lv_targetNameOverride);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_472BAA00"));
                }
                else {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C5EC5EEF", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C5EC5EEF", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C5EC5EEF", "B", lv_targetName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_C5EC5EEF"));
                }
            }
            else {
                UnitCreateEffectPoint(libGame_gv_players[lp_player].lv_heroUnit, "DangerPingPoint", lp_location);
                TextExpressionSetToken("Param/Expression/lib_UIUI_E4B1CDA8", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_E4B1CDA8", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_E4B1CDA8"));
            }
        }
    }
}

void libUIUI_gf_PingPlayerUsesOnMyWayPing (unit lp_pingedUnit, int lp_player, point lp_location) {
    // Variable Declarations
    int lv_pingType;
    text lv_targetName;
    int lv_targetType;
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;

    // Variable Initialization
    lv_pingType = c_pingTypeOnMyWay;
    lv_pingPlayerGroup = PlayerGroupEmpty();
    lv_pingModel = "StormGeneralPing";
    lv_pingSound = SoundLink("UI_Game_Ping_General", -1);

    // Implementation
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    lv_pingPlayerGroup = PlayerGroupMath(libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false), PlayerGroupMuting(libNtve_ge_MuteType_Pings, lp_player, true), libNtve_ge_PlayerGroupOperation_Subtract);
    lv_pingSound = SoundLink("UI_Game_Ping_OMW", -1);
    lv_pingModel = "OnMyWayPingMinimap";
    lv_targetType = libUIUI_gf_PingDeterminePingTargetType(lp_pingedUnit);
    libNtve_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(100.00, 100.00, 100.00), 3.0, 270.0, lv_pingType, lp_player);
    PingSetScale(PingLastCreated(), 0.6);
    SoundPlayForPlayer(lv_pingSound, lp_player, lv_pingPlayerGroup, 100.0, 0.0);
    if ((libGame_gv_players[lp_player].lv_activeVehicle != null)) {
        UnitCreateEffectPoint(libGame_gv_players[lp_player].lv_activeVehicle, "OnMyWayPing", lp_location);
    }
    else {
        UnitCreateEffectPoint(libGame_gv_players[lp_player].lv_heroUnit, "OnMyWayPing", lp_location);
    }
    TextExpressionSetToken("Param/Expression/lib_UIUI_D1E3E15A", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
    TextTagCreate(TextExpressionAssemble("Param/Expression/lib_UIUI_D1E3E15A"), 24, lp_location, 2.0, true, false, lv_pingPlayerGroup);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.5);
    if (((lp_pingedUnit == null) || (UnitFilterMatch(lp_pingedUnit, UnitGetOwner(lv_pingingPlayerHero), UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_FBCFA2A1", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
        TextExpressionSetToken("Param/Expression/lib_UIUI_FBCFA2A1", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
        UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_FBCFA2A1"));
    }
    else {
        if ((lv_targetType != 0) && (libUIUI_gv_ping_PingTargets[lv_targetType].lv_targetNameOverride != null)) {
            lv_targetName = libUIUI_gv_ping_PingTargets[lv_targetType].lv_targetNameOverride;
        }
        else if ((libGame_gv_players[UnitGetOwner(lp_pingedUnit)].lv_heroUsesAnnouncementAlias == true)) {
            lv_targetName = libGame_gv_players[UnitGetOwner(lp_pingedUnit)].lv_heroAnnouncementAliasText;
        }
        else if (true) {
            lv_targetName = UnitGetName(lp_pingedUnit);
        }
        if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_pingedUnit)) == libGame_gf_TeamNumberOfPlayer(lp_player))) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_2E6959AD", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
            TextExpressionSetToken("Param/Expression/lib_UIUI_2E6959AD", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
            TextExpressionSetToken("Param/Expression/lib_UIUI_2E6959AD", "B", lv_targetName);
            UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_2E6959AD"));
        }
        else {
            if ((UnitGetOwner(lp_pingedUnit) == libCore_gv_cOMPUTER_Neutral)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_0C972BDC", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_0C972BDC", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_0C972BDC", "B", lv_targetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_0C972BDC"));
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_UIUI_E5B936AA", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_E5B936AA", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_E5B936AA", "B", lv_targetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_E5B936AA"));
            }
        }
    }
    PathDestroy(libGame_gv_players[lp_player].lv_onMyWayPathDisplay);
    if (((UnitGetType(libGame_gv_players[lp_player].lv_heroUnit) == "HeroLostVikingsController"))) {
        PathCreateForUnit(lv_pingPlayerGroup, UnitGroupUnit(UnitGroupSelected(lp_player), 1));
    }
    else {
        if ((libGame_gv_players[lp_player].lv_activeVehicle != null)) {
            PathCreateForUnit(lv_pingPlayerGroup, libGame_gv_players[lp_player].lv_activeVehicle);
        }
        else {
            PathCreateForUnit(lv_pingPlayerGroup, libGame_gv_players[lp_player].lv_heroUnit);
        }
    }
    PathSetDestinationPoint(PathLastCreated(), lp_location);
    PathSetVisible(PathLastCreated(), c_pathLocationWorld, false);
    PathSetLineTexture(PathLastCreated(), c_pathLocationMinimap, "Assets\\Textures\\storm_waypointline.dds");
    PathSetMinimumStepCount(PathLastCreated(), 0);
    PathSetMinimumTravelDistance(PathLastCreated(), 0.0);
    PathSetMinimumLinearDistance(PathLastCreated(), 3.0);
    PathSetLineTexture(PathLastCreated(), c_pathLocationWorld, "Assets\\Textures\\storm_waypointline_game.dds");
    PathSetColor(PathLastCreated(), c_pathLocationAll, Color(80.39, 98.04, 68.63));
    PathSetLineTileLength(PathLastCreated(), c_pathLocationWorld, 0.8);
    libGame_gv_players[lp_player].lv_onMyWayPathDisplay = PathLastCreated();
    TimerStart(libUIUI_gv_onMyWayPingPathDisplayTimer[lp_player], libUIUI_gv_uI_OnMyWayPing_PathDisplayDuration, false, c_timeGame);
}

void libUIUI_gf_PingPlayerUsesDefendPing (unit lp_pingedUnit, int lp_player, point lp_location) {
    string auto73D17142_val;

    // Variable Declarations
    int lv_pingType;
    unit lv_pingingPlayerHero;
    text lv_pingingHeroName;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;
    text lv_pingedTargetName;
    int lv_targetType;

    // Variable Initialization
    lv_pingType = c_pingTypeDefend;
    lv_pingPlayerGroup = PlayerGroupEmpty();
    lv_pingModel = "StormGeneralPing";
    lv_pingSound = SoundLink("UI_Game_Ping_General", -1);

    // Implementation
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    lv_pingingHeroName = UnitTypeGetName(UnitGetType(lv_pingingPlayerHero));
    lv_pingPlayerGroup = PlayerGroupMath(libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false), PlayerGroupMuting(libNtve_ge_MuteType_Pings, lp_player, true), libNtve_ge_PlayerGroupOperation_Subtract);
    lv_pingSound = SoundLink("UI_Game_Ping_Defend", -1);
    lv_pingModel = "DefendPingMinimap";
    lv_targetType = libUIUI_gf_PingDeterminePingTargetType(lp_pingedUnit);
    libNtve_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(100.00, 100.00, 100.00), 3.0, 270.0, lv_pingType, lp_player);
    PingSetScale(PingLastCreated(), 0.6);
    SoundPlayForPlayer(lv_pingSound, lp_player, lv_pingPlayerGroup, 100.0, 0.0);
    UnitCreateEffectPoint(libGame_gv_players[lp_player].lv_heroUnit, "DefendPing", lp_location);
    if (((lp_pingedUnit == null) || (UnitFilterMatch(lp_pingedUnit, UnitGetOwner(lv_pingingPlayerHero), UnitFilter((1 << c_targetFilterUser1), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_E60F1356", "A", lv_pingingHeroName);
        TextExpressionSetToken("Param/Expression/lib_UIUI_E60F1356", "A", lv_pingingHeroName);
        UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_E60F1356"));
    }
    else {
        if ((lv_targetType != 0) && (libUIUI_gv_ping_PingTargets[lv_targetType].lv_targetNameOverride != null)) {
            lv_pingedTargetName = libUIUI_gv_ping_PingTargets[lv_targetType].lv_targetNameOverride;
        }
        else if ((libGame_gv_players[UnitGetOwner(lp_pingedUnit)].lv_heroUsesAnnouncementAlias == true)) {
            lv_pingedTargetName = libGame_gv_players[UnitGetOwner(lp_pingedUnit)].lv_heroAnnouncementAliasText;
        }
        else if (true) {
            lv_pingedTargetName = UnitGetName(lp_pingedUnit);
        }
        if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_pingedUnit)) == libGame_gf_EnemyTeamNumberOfPlayer(lp_player))) {
            if ((UnitGetType(lp_pingedUnit) == "JungleGraveGolemLaner")) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_D187F76F", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_D187F76F", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_D187F76F", "B", lv_pingedTargetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_D187F76F"));
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_UIUI_6B25B463", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_6B25B463", "A", lv_pingingHeroName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_6B25B463"));
            }
        }
        else {
            if ((UnitFilterMatch(lp_pingedUnit, lp_player, libCore_gv_filtersHeroicAlly) == true)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_39A25168", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_39A25168", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_39A25168", "B", lv_pingedTargetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_39A25168"));
            }
            else if ((UnitFilterMatch(lp_pingedUnit, lp_player, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true)) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_1C1EB2B0", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_1C1EB2B0", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_1C1EB2B0", "B", UnitGetName(lp_pingedUnit));
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_1C1EB2B0"));
            }
            else if ((UnitFilterMatch(lp_pingedUnit, lp_player, UnitFilter(0, 0, (1 << c_targetFilterBiological) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)))) == true)) {
                auto73D17142_val = UnitGetType(lp_pingedUnit);
                if (auto73D17142_val == "DragonShireShrineMoon") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C6222373", "A", lv_pingingHeroName);
                    TextExpressionSetToken("Param/Expression/lib_UIUI_C6222373", "A", lv_pingingHeroName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_C6222373"));
                }
                else if (auto73D17142_val == "DragonShireShrineSun") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_9FFEB691", "A", lv_pingingHeroName);
                    TextExpressionSetToken("Param/Expression/lib_UIUI_9FFEB691", "A", lv_pingingHeroName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_9FFEB691"));
                }
                else if (auto73D17142_val == "XelNagaWatchTower") {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_D5BF280C", "A", lv_pingingHeroName);
                    TextExpressionSetToken("Param/Expression/lib_UIUI_D5BF280C", "A", lv_pingingHeroName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_D5BF280C"));
                }
                else {
                    TextExpressionSetToken("Param/Expression/lib_UIUI_8875BB2E", "A", lv_pingingHeroName);
                    TextExpressionSetToken("Param/Expression/lib_UIUI_8875BB2E", "A", lv_pingingHeroName);
                    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_8875BB2E"));
                }
            }
            else if ((UnitGetType(lp_pingedUnit) == "JungleGraveGolemLaner")) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_D2CBB294", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_D2CBB294", "A", lv_pingingHeroName);
                TextExpressionSetToken("Param/Expression/lib_UIUI_D2CBB294", "B", lv_pingedTargetName);
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_D2CBB294"));
            }
            else if (true) {
                TextExpressionSetToken("Param/Expression/lib_UIUI_6DB941D1", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                TextExpressionSetToken("Param/Expression/lib_UIUI_6DB941D1", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
                UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_6DB941D1"));
            }
        }
    }
}

void libUIUI_gf_PingPlayerUsesRetreatPing (int lp_player, point lp_location) {
    // Variable Declarations
    int lv_pingType;
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;

    // Variable Initialization
    lv_pingType = c_pingTypeRetreat;
    lv_pingPlayerGroup = PlayerGroupEmpty();
    lv_pingModel = "StormGeneralPing";
    lv_pingSound = SoundLink("UI_Game_Ping_General", -1);

    // Implementation
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    lv_pingPlayerGroup = PlayerGroupMath(libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false), PlayerGroupMuting(libNtve_ge_MuteType_Pings, lp_player, true), libNtve_ge_PlayerGroupOperation_Subtract);
    lv_pingSound = SoundLink("UI_Game_Ping_Retreat", -1);
    lv_pingModel = "RetreatPingMinimap";
    libNtve_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(100.00, 100.00, 100.00), 3.0, 270.0, lv_pingType, lp_player);
    PingSetScale(PingLastCreated(), 0.6);
    SoundPlayForPlayer(lv_pingSound, lp_player, lv_pingPlayerGroup, 100.0, 0.0);
    UnitCreateEffectPoint(libGame_gv_players[lp_player].lv_heroUnit, "RetreatPing", lp_location);
    TextExpressionSetToken("Param/Expression/lib_UIUI_4F67313D", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
    TextExpressionSetToken("Param/Expression/lib_UIUI_4F67313D", "A", UnitTypeGetName(UnitGetType(lv_pingingPlayerHero)));
    UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_4F67313D"));
}

void libUIUI_gf_PingPlayerStartsHearthStonePing (int lp_player, point lp_location) {
    // Variable Declarations
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    text lv_pingingUnitName;
    int lv_pingTargetType;

    // Variable Initialization
    lv_pingPlayerGroup = PlayerGroupEmpty();
    lv_pingModel = "StormGeneralPing";

    // Implementation
    if ((TimerGetRemaining(libUIUI_gv_pingInputSuppressionTimer[lp_player]) > 0.0)) {
        return ;
    }

    if ((TimerGetRemaining(libUIUI_gv_pingLockoutTimer[lp_player]) > 0.0)) {
        return ;
    }

    libUIUI_gf_PingIncrementPingCountAndManageTimersForPlayer(lp_player);
    lv_pingingPlayerHero = libGame_gv_players[lp_player].lv_heroUnit;
    lv_pingTargetType = libUIUI_gf_PingDeterminePingTargetType(lv_pingingPlayerHero);
    if ((UnitGetType(lv_pingingPlayerHero) != "HeroLostVikingsController")) {
        if ((libGame_gv_players[UnitGetOwner(lv_pingingPlayerHero)].lv_heroUsesAnnouncementAlias == true)) {
            lv_pingingUnitName = libGame_gv_players[UnitGetOwner(lv_pingingPlayerHero)].lv_heroAnnouncementAliasText;
        }
        else {
            lv_pingingUnitName = UnitGetName(lv_pingingPlayerHero);
        }
    }
    else {
        if ((UnitGroupCount(UnitGroupSelected(lp_player), c_unitCountAlive) == 1)) {
            lv_pingingUnitName = UnitGetName(UnitGroupUnit(UnitGroupSelected(lp_player), 1));
        }
        else {
            lv_pingingUnitName = UnitGetName(lv_pingingPlayerHero);
        }
    }
    lv_pingPlayerGroup = PlayerGroupMath(libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_player), false), PlayerGroupMuting(libNtve_ge_MuteType_Pings, lp_player, true), libNtve_ge_PlayerGroupOperation_Subtract);
    lv_pingModel = "HearthstonePingMinimap";
    libNtve_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, lv_pingModel, lp_location, Color(0.00, 5.49, 73.33), 6.0, 270.0, -1, lp_player);
    libUIUI_gv_ping_PlayerHearth[lp_player] = PingLastCreated();
    PingSetScale(PingLastCreated(), 0.6);
    libUIUI_gv_hearthStonePing[lp_player] = PingLastCreated();
    if ((TimerGetRemaining(libUIUI_gv_hearthPingTextLockoutTimer[lp_player]) > 0.0)) {
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_UIUI_4EC55313", "A", lv_pingingUnitName);
        TextExpressionSetToken("Param/Expression/lib_UIUI_4EC55313", "A", lv_pingingUnitName);
        UIDisplayMessage(lv_pingPlayerGroup, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_UIUI_4EC55313"));
        TimerStart(libUIUI_gv_hearthPingTextLockoutTimer[lp_player], 10.0, false, c_timeGame);
    }
}

void libUIUI_gf_PingCancelPlayersHearthStonePing (int lp_player) {
    // Implementation
    if ((libUIUI_gv_hearthStonePing[lp_player] != c_invalidPingId)) {
        PingDestroy(libUIUI_gv_hearthStonePing[lp_player]);
        libUIUI_gv_hearthStonePing[lp_player] = c_invalidPingId;
    }

}

int libUIUI_gf_PingLastCreatedPingTarget () {
    // Implementation
    return libUIUI_gv_ping_PingTargetCount;
}

void libUIUI_gf_PingCreateNewPingTarget (string lp_unitType, bool lp_pingIsForOccupiedVehicle, text lp_pingTargetNameOverride, text lp_alliedTargetMessageText, text lp_enemyTargetMessageText, soundlink lp_alliedTargetPingSound, soundlink lp_enemyTargetPingSound) {
    // Implementation
    libUIUI_gv_ping_PingTargetCount += 1;
    if ((libUIUI_gv_ping_PingTargetCount > libUIUI_gv_uI_PingTargetMaxCount_C)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_FF965B94", "A", IntToText(libUIUI_gv_uI_PingTargetMaxCount_C));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_UIUI_FF965B94"), true);
        libUIUI_gv_ping_PingTargetCount = libUIUI_gv_uI_PingTargetMaxCount_C;
        return ;
    }

    libUIUI_gv_ping_PingTargets[libUIUI_gv_ping_PingTargetCount].lv_unitType = lp_unitType;
    libUIUI_gv_ping_PingTargets[libUIUI_gv_ping_PingTargetCount].lv_pingIsForOccupiedVehicle = lp_pingIsForOccupiedVehicle;
    libUIUI_gv_ping_PingTargets[libUIUI_gv_ping_PingTargetCount].lv_targetNameOverride = lp_pingTargetNameOverride;
    libUIUI_gv_ping_PingTargets[libUIUI_gv_ping_PingTargetCount].lv_textMessageAlliedTarget = lp_alliedTargetMessageText;
    libUIUI_gv_ping_PingTargets[libUIUI_gv_ping_PingTargetCount].lv_textMessageEnemyTarget = lp_enemyTargetMessageText;
    libUIUI_gv_ping_PingTargets[libUIUI_gv_ping_PingTargetCount].lv_pingSoundAlliedTarget = lp_alliedTargetPingSound;
    libUIUI_gv_ping_PingTargets[libUIUI_gv_ping_PingTargetCount].lv_pingSoundEnemyTarget = lp_enemyTargetPingSound;
}

void libUIUI_gf_PingCreateNewPingTargetNameOverrideOnly (string lp_unitType, text lp_pingTargetNameOverride) {
    // Implementation
    libUIUI_gv_ping_PingTargetCount += 1;
    if ((libUIUI_gv_ping_PingTargetCount > libUIUI_gv_uI_PingTargetMaxCount_C)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_5749E44B", "A", IntToText(libUIUI_gv_uI_PingTargetMaxCount_C));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_UIUI_5749E44B"), true);
        libUIUI_gv_ping_PingTargetCount = libUIUI_gv_uI_PingTargetMaxCount_C;
        return ;
    }

    libUIUI_gv_ping_PingTargets[libUIUI_gv_ping_PingTargetCount].lv_unitType = lp_unitType;
    libUIUI_gv_ping_PingTargets[libUIUI_gv_ping_PingTargetCount].lv_targetNameOverride = lp_pingTargetNameOverride;
}

void libUIUI_gf_PingSetAllyEnemyTargetHeroVOForPingTarget (int lp_pingTarget, int lp_allyTargetHeroVO, int lp_enemyTargetHeroVO) {
    // Implementation
    libUIUI_gv_ping_PingTargets[lp_pingTarget].lv_heroVOLineAlliedTarget = lp_allyTargetHeroVO;
    libUIUI_gv_ping_PingTargets[lp_pingTarget].lv_heroVOLineEnemyTarget = lp_enemyTargetHeroVO;
}

void libUIUI_gf_PingSetHumanAISourceHeroVOForPingTarget (int lp_pingTarget, int lp_humanSourceHeroVO, int lp_aISourceHeroVO) {
    // Implementation
    libUIUI_gv_ping_PingTargets[lp_pingTarget].lv_heroVOLineHumanPingingPlayer = lp_humanSourceHeroVO;
    libUIUI_gv_ping_PingTargets[lp_pingTarget].lv_heroVOLineAIPingingPlayer = lp_aISourceHeroVO;
}

void libUIUI_gf_PingSetCustomResponseTriggerForPingTarget (int lp_pingTarget, trigger lp_trigger) {
    // Implementation
    libUIUI_gv_ping_PingTargets[lp_pingTarget].lv_customPingResponseTrigger = lp_trigger;
}

void libUIUI_gf_PingSetCustomResponseTriggerForPingbyUnitType (string lp_pingedUnitType, trigger lp_responseTrigger) {
    int autoF2735158_ae;
    int autoF2735158_ai;

    // Variable Declarations
    int lv_pingIndex;

    // Variable Initialization

    // Implementation
    autoF2735158_ae = libUIUI_gv_ping_PingTargetCount;
    autoF2735158_ai = 1;
    lv_pingIndex = 1;
    for ( ; ( (autoF2735158_ai >= 0 && lv_pingIndex <= autoF2735158_ae) || (autoF2735158_ai <= 0 && lv_pingIndex >= autoF2735158_ae) ) ; lv_pingIndex += autoF2735158_ai ) {
        if ((libUIUI_gv_ping_PingTargets[lv_pingIndex].lv_unitType == lp_pingedUnitType)) {
            libUIUI_gv_ping_PingTargets[lv_pingIndex].lv_customPingResponseTrigger = lp_responseTrigger;
            return ;
        }

    }
}

void libUIUI_gf_UITargetInfoPanelSetUpMapMechanicInfo (string lp_icon, text lp_tooltip) {
    // Implementation
    libNtve_gf_SetDialogItemImage(libUIUI_gv_uITargetInfoPanel.lv_mapMechanicIcon, lp_icon, PlayerGroupAll());
    libNtve_gf_SetDialogItemTooltip(libUIUI_gv_uITargetInfoPanel.lv_mapMechanicIcon, lp_tooltip, PlayerGroupAll());
    libNtve_gf_SetDialogItemText(libUIUI_gv_uITargetInfoPanel.lv_mapMechanicLabel, StringToText(""), PlayerGroupAll());
}

void libUIUI_gf_UITargetInfoPanelUpdateMapMechanicTextForPlayer (text lp_text, int lp_player) {
    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_uITargetInfoPanel.lv_mapMechanicLabel, lp_text, libCore_gv_playerGroupFromPlayer[lp_player]);
}

void libUIUI_gf_UITargetInfoPanelSetTargetForPlayer (unit lp_target, int lp_player) {
    // Variable Declarations
    string lv_groupOrWireframe;
    int lv_numberofIndexes;
    string lv_imagePath;
    fixed lv_weaponDamage;

    // Variable Initialization
    lv_groupOrWireframe = "";
    lv_imagePath = "";

    // Implementation
    if ((libUIUI_gv_uITargetInfoPanelEnabled == false)) {
        return ;
    }

    if ((libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lp_player] != null)) {
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_healthAndManaUnitStatusStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_healthOnlyUnitStatusStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_towerWithAmmoUnitStatusStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }

    libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lp_player] = lp_target;
    libNtve_gf_SetDialogItemText(libUIUI_gv_uITargetInfoPanel.lv_unitName, UnitTypeGetName(UnitGetType(lp_target)), libCore_gv_playerGroupFromPlayer[lp_player]);
    if ((UnitTypeTestAttribute(UnitGetType(lp_target), c_unitAttributeHeroic) == true)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_uITargetInfoPanel.lv_level, IntToText(UnitLevel(lp_target)), libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_level, libCore_gv_playerGroupFromPlayer[lp_player], true);
        libNtve_gf_SetDialogItemText(libUIUI_gv_uITargetInfoPanel.lv_playerName, libGame_gv_players[UnitGetOwner(lp_target)].lv_name, libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_playerName, libCore_gv_playerGroupFromPlayer[lp_player], true);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_level, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_playerName, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_mapMechanicIcon, libCore_gv_playerGroupFromPlayer[lp_player], false);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_mapMechanicLabel, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    if ((UnitHasBehavior2(lp_target, "ShowDescriptionTextInTargetPanel") == true)) {
        libNtve_gf_SetDialogItemText(libUIUI_gv_uITargetInfoPanel.lv_descriptionLabel, StringExternal(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_target), "Description", c_playerAny)), libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_descriptionLabel, libCore_gv_playerGroupFromPlayer[lp_player], true);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_descriptionLabel, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    if ((CatalogEntryIsValid(c_gameCatalogActor, (UnitGetType(lp_target))) == true)) {
        if ((libNtve_gf_PlayerIsEnemy(lp_player, UnitGetOwner(lp_target), libNtve_ge_PlayerRelation_Ally) == true)) {
            lv_groupOrWireframe = "GroupIcon";
        }
        else {
            lv_groupOrWireframe = "Wireframe";
        }
        lv_numberofIndexes = CatalogFieldValueCount(c_gameCatalogActor, ((UnitGetType(lp_target))), ((lv_groupOrWireframe + ".Image")), lp_player);
        if ((lv_numberofIndexes > 0)) {
            lv_imagePath = CatalogFieldValueGet(c_gameCatalogActor, ((UnitGetType(lp_target))), ((lv_groupOrWireframe + ".Image[0]")), lp_player);
            libNtve_gf_SetDialogItemImage(libUIUI_gv_uITargetInfoPanel.lv_portraitImage, lv_imagePath, libCore_gv_playerGroupFromPlayer[lp_player]);
            DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_portraitImage, libCore_gv_playerGroupFromPlayer[lp_player], true);
        }
        else {
            DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_portraitImage, libCore_gv_playerGroupFromPlayer[lp_player], false);
        }
    }
    else {
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_portraitImage, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_uITargetInfoPanel.lv_unitTargetFrame, lp_target, libCore_gv_playerGroupFromPlayer[lp_player]);
    if (((UnitTypeTestFlag(UnitGetType(lp_target), c_unitFlagTownStructureCannonTower) == true) || (UnitTypeTestFlag(UnitGetType(lp_target), c_unitFlagTownStructureTownHall) == true))) {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uITargetInfoPanel.lv_towerWithAmmoUnitStatusStatusFrame, lp_target, libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_towerWithAmmoUnitStatusStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], true);
        libUIUI_gv_uITargetInfoPanelCurretTargetStatusBarType[lp_player] = libUIUI_ge_UITargetInfoPanelStatusBarTypes_TowerWithAmmo;
    }
    else if ((UnitGetPropertyFixed(lp_target, c_unitPropEnergyMax, c_unitPropCurrent) > 0.0) && (UnitTypeTestFlag(UnitGetType(lp_target), c_unitFlagTownStructureTownHall) == false)) {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uITargetInfoPanel.lv_healthAndManaUnitStatusStatusFrame, lp_target, libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_healthAndManaUnitStatusStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], true);
        libUIUI_gv_uITargetInfoPanelCurretTargetStatusBarType[lp_player] = libUIUI_ge_UITargetInfoPanelStatusBarTypes_HealthAndMana;
    }
    else if ((UnitGetPropertyFixed(lp_target, c_unitPropLifeMax, c_unitPropCurrent) > 1.0)) {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uITargetInfoPanel.lv_healthOnlyUnitStatusStatusFrame, lp_target, libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_healthOnlyUnitStatusStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], true);
        libUIUI_gv_uITargetInfoPanelCurretTargetStatusBarType[lp_player] = libUIUI_ge_UITargetInfoPanelStatusBarTypes_HealthOnly;
    }
    DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], true);
}

void libUIUI_gf_UITargetInfoPanelClearTargetForPlayer (int lp_player) {
    // Implementation
    DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_healthAndManaUnitStatusStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_healthOnlyUnitStatusStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
    DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_towerWithAmmoUnitStatusStatusFrame, libCore_gv_playerGroupFromPlayer[lp_player], false);
    libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lp_player] = null;
}

void libUIUI_gf_UITargetInfoPanelUpdateForPlayer (int lp_player) {
    // Variable Declarations
    int lv_buff;
    int lv_numberOfBuffs;

    // Variable Initialization

    // Implementation
    if ((libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lp_player] != null)) {
        if ((UnitIsAlive(libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lp_player]) == false)) {
            libUIUI_gf_UITargetInfoPanelClearTargetForPlayer(lp_player);
            return ;
        }

        if ((UnitTypeTestAttribute(UnitGetType(libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lp_player]), c_unitAttributeStructure) == false) && (libNtve_gf_UnitIsVisibleToPlayer(libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lp_player], lp_player) == false)) {
            libUIUI_gf_UITargetInfoPanelClearTargetForPlayer(lp_player);
            return ;
        }

        if (((UnitHasBehavior2(libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lp_player], "RavenLordsCurseStructures") == true) || (UnitHasBehavior2(libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lp_player], "RavenLordsCurseUnits") == true))) {
            DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_cursedBuildingIcon, libCore_gv_playerGroupFromPlayer[lp_player], true);
        }
        else {
            DialogControlSetVisible(libUIUI_gv_uITargetInfoPanel.lv_cursedBuildingIcon, libCore_gv_playerGroupFromPlayer[lp_player], false);
        }
    }

}

void libUIUI_gf_UITargetInfoPanelEnableDisable (bool lp_enableDisable) {
    // Implementation
    if ((lp_enableDisable == true)) {
        libUIUI_gv_uITargetInfoPanelEnabled = true;
        TriggerEnable(libUIUI_gt_UITargetInfoPanelUpdate, true);
    }
    else {
        libUIUI_gv_uITargetInfoPanelEnabled = false;
        TriggerEnable(libUIUI_gt_UITargetInfoPanelUpdate, false);
    }
}

void libUIUI_gf_UITargetingHelperPanelHandleAbilityTargetModeChange (int lp_player, int lp_targetModeState, string lp_ability, bool lp_abilityIsOffensive) {
    int autoEE6B7FB0_ae;
    int autoEE6B7FB0_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    if ((lp_targetModeState == c_targetModeStateOn)) {
        libUIUI_gv_uITargetingHelperPanelNumberOfPlayersUsingPanel += 1;
        TriggerEnable(libUIUI_gt_UITargetingHelperPanelUnitFrameMouseEnter, true);
        TriggerEnable(libUIUI_gt_UITargetingHelperPanelUnitFrameMouseExit, true);
        if ((lp_ability == "attack")) {
            libUIUI_gf_UITargetingHelperPanelUpdateForPlayer(lp_player, libAIAI_gf_AIGetActiveWeaponRange(libGame_gv_players[lp_player].lv_heroUnit), lp_abilityIsOffensive);
        }
        else {
            libUIUI_gf_UITargetingHelperPanelUpdateForPlayer(lp_player, StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, lp_ability, "Range[" + IntToString(0) + "]", lp_player)), lp_abilityIsOffensive);
        }
        if ((lp_abilityIsOffensive == true)) {
            libUIUI_gv_uITargetingHelperPanelPlayerIsTargetingOffensiveAbility[lp_player] = true;
            TriggerEnable(libUIUI_gt_UITargetingHelperPanelUpdateVisibilityForOffensiveAbilities, true);
        }

        libUIUI_gf_UITargetingHelperPanelShowHideForPlayer(true, lp_player);
    }
    else {
        libUIUI_gf_UITargetingHelperPanelShowHideForPlayer(false, lp_player);
        autoEE6B7FB0_ae = libUIUI_gv_uITargetingHelperPanelNumberOfTargetUnitsForPlayer[lp_player];
        autoEE6B7FB0_ai = 1;
        lv_i = 1;
        for ( ; ( (autoEE6B7FB0_ai >= 0 && lv_i <= autoEE6B7FB0_ae) || (autoEE6B7FB0_ai <= 0 && lv_i >= autoEE6B7FB0_ae) ) ; lv_i += autoEE6B7FB0_ai ) {
            ActorSend(ActorFromActor(libNtve_gf_MainActorofUnit(libUIUI_gv_uITargetingHelperPanelTargetUnitsForPlayer[lp_player][lv_i]), ("FriendlyTargetHelperBeamPlayer" + IntToString(lp_player))), "Destroy");
        }
        libUIUI_gv_uITargetingHelperPanelPlayerIsTargetingOffensiveAbility[lp_player] = false;
        libUIUI_gv_uITargetingHelperPanelNumberOfPlayersUsingPanel -= 1;
        if ((libUIUI_gv_uITargetingHelperPanelNumberOfPlayersUsingPanel <= 0)) {
            TriggerEnable(libUIUI_gt_UITargetingHelperPanelUnitFrameMouseEnter, false);
            TriggerEnable(libUIUI_gt_UITargetingHelperPanelUnitFrameMouseExit, false);
            TriggerEnable(libUIUI_gt_UITargetingHelperPanelUpdateVisibilityForOffensiveAbilities, false);
        }

    }
}

void libUIUI_gf_UITargetingHelperPanelUpdateForPlayer (int lp_player, fixed lp_abilityRange, bool lp_abilityIsOffensive) {
    playergroup autoF57B81EF_g;
    int autoF57B81EF_p;
    int auto845BD2BE_ae;
    int auto845BD2BE_ai;
    int auto03723F66_ae;
    int auto03723F66_ai;
    int auto70455873_ae;
    int auto70455873_ai;
    int auto1CD3BFA1_ae;
    int auto1CD3BFA1_ai;

    // Variable Declarations
    int lv_i;
    int lv_k;
    int lv_p;
    int lv_frame;
    unit lv_hero;
    playergroup lv_targetPlayerGroup;
    unit lv_targetHero;
    int lv_numberOfHeroesToDisplay;
    int[libCore_gv_bALMaxPlayersOnATeam + 1] lv_heroPlayersToDisplay;
    fixed[libCore_gv_bALMaxPlayersOnATeam + 1] lv_heroPlayerHPValues;
    fixed lv_tempVal;

    // Variable Initialization
    lv_targetPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_hero = libGame_gv_players[lp_player].lv_heroUnit;
    if ((lp_abilityIsOffensive == true)) {
        lv_targetPlayerGroup = libGame_gf_EnemyPlayerGroupOfPlayer(lp_player);
    }
    else {
        lv_targetPlayerGroup = libGame_gf_AlliedPlayerGroupOfPlayer(lp_player);
    }
    autoF57B81EF_g = lv_targetPlayerGroup; 
    autoF57B81EF_p = 1;
    for ( ; autoF57B81EF_p <= PlayerGroupCount(autoF57B81EF_g) ; autoF57B81EF_p += (lv_p == PlayerGroupPlayer(autoF57B81EF_g, autoF57B81EF_p)) ) {
        lv_p = PlayerGroupPlayer(autoF57B81EF_g, autoF57B81EF_p);
        if ((lv_p != libCore_gv_cOMPUTER_TeamOrder) && (lv_p != libCore_gv_cOMPUTER_TeamChaos) && (lv_p != lp_player)) {
            lv_targetHero = libGame_gv_players[lv_p].lv_heroUnit;
            if (((lp_abilityIsOffensive == false) || (libNtve_gf_UnitIsVisibleToPlayer(lv_targetHero, lp_player) == true)) && (DistanceBetweenPoints(UnitGetPosition(lv_hero), UnitGetPosition(lv_targetHero)) <= (lp_abilityRange + libUIUI_gv_uITargetingHelperPanelRangeSlop))) {
                lv_numberOfHeroesToDisplay += 1;
                lv_heroPlayersToDisplay[lv_numberOfHeroesToDisplay] = lv_p;
                lv_heroPlayerHPValues[lv_numberOfHeroesToDisplay] = UnitGetPropertyFixed(libGame_gv_players[lv_p].lv_heroUnit, c_unitPropLife, c_unitPropCurrent);
            }

        }

    }
    if ((lp_abilityIsOffensive == false)) {
        lv_numberOfHeroesToDisplay += 1;
        lv_heroPlayersToDisplay[lv_numberOfHeroesToDisplay] = lp_player;
        lv_heroPlayerHPValues[lv_numberOfHeroesToDisplay] = UnitGetPropertyFixed(lv_hero, c_unitPropLife, c_unitPropCurrent);
    }

    auto845BD2BE_ae = 1;
    auto845BD2BE_ai = -1;
    lv_i = (lv_numberOfHeroesToDisplay - 1);
    for ( ; ( (auto845BD2BE_ai >= 0 && lv_i <= auto845BD2BE_ae) || (auto845BD2BE_ai <= 0 && lv_i >= auto845BD2BE_ae) ) ; lv_i += auto845BD2BE_ai ) {
        auto03723F66_ae = lv_i;
        auto03723F66_ai = 1;
        lv_k = 1;
        for ( ; ( (auto03723F66_ai >= 0 && lv_k <= auto03723F66_ae) || (auto03723F66_ai <= 0 && lv_k >= auto03723F66_ae) ) ; lv_k += auto03723F66_ai ) {
            if ((lv_heroPlayerHPValues[lv_k] > lv_heroPlayerHPValues[(lv_k + 1)])) {
                lv_tempVal = lv_heroPlayerHPValues[lv_k];
                lv_heroPlayerHPValues[lv_k] = lv_heroPlayerHPValues[(lv_k + 1)];
                lv_heroPlayerHPValues[(lv_k + 1)] = lv_tempVal;
                lv_tempVal = lv_heroPlayersToDisplay[lv_k];
                lv_heroPlayersToDisplay[lv_k] = lv_heroPlayersToDisplay[(lv_k + 1)];
                lv_heroPlayersToDisplay[(lv_k + 1)] = FixedToInt(lv_tempVal);
            }

        }
    }
    libUIUI_gv_uITargetingHelperPanelNumberOfTargetUnitsForPlayer[lp_player] = lv_numberOfHeroesToDisplay;
    auto70455873_ae = lv_numberOfHeroesToDisplay;
    auto70455873_ai = 1;
    lv_frame = 1;
    for ( ; ( (auto70455873_ai >= 0 && lv_frame <= auto70455873_ae) || (auto70455873_ai <= 0 && lv_frame >= auto70455873_ae) ) ; lv_frame += auto70455873_ai ) {
        lv_p = lv_heroPlayersToDisplay[lv_frame];
        if ((lv_p == lp_player)) {
            libNtve_gf_SetDialogItemColor(libUIUI_gv_uITargetingHelperPanel.lv_heroBorderImages[lv_frame], libCore_gv_cOLORPlayerColor, libCore_gv_playerGroupFromPlayer[lp_player]);
        }
        else {
            if ((lp_abilityIsOffensive == true)) {
                libNtve_gf_SetDialogItemColor(libUIUI_gv_uITargetingHelperPanel.lv_heroBorderImages[lv_frame], libCore_gv_cOLOREnemyColor, libCore_gv_playerGroupFromPlayer[lp_player]);
            }
            else {
                libNtve_gf_SetDialogItemColor(libUIUI_gv_uITargetingHelperPanel.lv_heroBorderImages[lv_frame], libCore_gv_cOLORAllyColor, libCore_gv_playerGroupFromPlayer[lp_player]);
            }
        }
        libNtve_gf_SetDialogItemImage(libUIUI_gv_uITargetingHelperPanel.lv_heroIcons[lv_frame], libGame_gv_players[lv_p].lv_portraitIcon, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uITargetingHelperPanel.lv_heroTargetFrames[lv_frame], libGame_gv_players[lv_p].lv_heroUnit, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_uITargetingHelperPanel.lv_heroStatusFrames[lv_frame], libGame_gv_players[lv_p].lv_heroUnit, libCore_gv_playerGroupFromPlayer[lp_player]);
        DialogControlSetVisible(libUIUI_gv_uITargetingHelperPanel.lv_heroFrames[lv_frame], libCore_gv_playerGroupFromPlayer[lp_player], true);
        libUIUI_gv_uITargetingHelperPanelTargetUnitsForPlayer[lp_player][lv_frame] = libGame_gv_players[lv_p].lv_heroUnit;
    }
    auto1CD3BFA1_ae = libCore_gv_bALMaxPlayersOnATeam;
    auto1CD3BFA1_ai = 1;
    lv_frame = (lv_numberOfHeroesToDisplay + 1);
    for ( ; ( (auto1CD3BFA1_ai >= 0 && lv_frame <= auto1CD3BFA1_ae) || (auto1CD3BFA1_ai <= 0 && lv_frame >= auto1CD3BFA1_ae) ) ; lv_frame += auto1CD3BFA1_ai ) {
        DialogControlSetVisible(libUIUI_gv_uITargetingHelperPanel.lv_heroFrames[lv_frame], libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
}

void libUIUI_gf_UITargetingHelperPanelShowHideForPlayer (bool lp_showHide, int lp_player) {
    // Implementation
    if ((lp_showHide == true)) {
        DialogControlSetVisible(libUIUI_gv_uITargetingHelperPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], true);
    }
    else {
        DialogControlSetVisible(libUIUI_gv_uITargetingHelperPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], false);
    }
}

void libUIUI_gf_TopBarPanelShowHideForPlayer (bool lp_showHide, int lp_player) {
    // Implementation
    DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], lp_showHide);
}

void libUIUI_gf_TopBarTeamLevelHookUpXPBarUnitForTeamAndShowTeamLevelLabel (int lp_team, unit lp_unit) {
    // Implementation
    libNtve_gf_SetDialogItemUnit(libUIUI_gv_topBarPanel.lv_xPUnitStatusFrame[lp_team], lp_unit, PlayerGroupAll());
    DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_levelLabel[lp_team], PlayerGroupAll(), true);
}

void libUIUI_gf_TopBarTeamLevelUpdateTeamsLevelLabel (int lp_team, int lp_level) {
    playergroup auto82743FE3_g;
    int auto82743FE3_p;

    // Variable Declarations
    int lv_enemyTeam;
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    libNtve_gf_SetDialogItemText(libUIUI_gv_topBarPanel.lv_levelLabel[lp_team], IntToText(lp_level), PlayerGroupAll());
    if ((lp_level > 1)) {
        lv_enemyTeam = (3 - lp_team);
        auto82743FE3_g = PlayerGroupAll(); 
        auto82743FE3_p = 1;
        for ( ; auto82743FE3_p <= PlayerGroupCount(auto82743FE3_g) ; auto82743FE3_p += (lv_itPlayer == PlayerGroupPlayer(auto82743FE3_g, auto82743FE3_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto82743FE3_g, auto82743FE3_p);
            if ((libGame_gv_players[lv_itPlayer].lv_suppressLevelUpFXAndTeamXPTracking == true)) {
                return ;
            }

        }
        DialogControlSendAnimationEvent(libUIUI_gv_topBarPanel.lv_mainPanel, libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers, ("Team" + IntToString(lp_team) + "LevelUpBlue"));
        if ((lv_enemyTeam <= libCore_gv_bALMaxTeams)) {
            DialogControlSendAnimationEvent(libUIUI_gv_topBarPanel.lv_mainPanel, libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, ("Team" + IntToString(lp_team) + "LevelUpRed"));
        }

    }

}

void libUIUI_gf_TopBarSetUpCoreHealthBarforTeam (int lp_team) {
    // Implementation
    if ((libGame_gv_teams[lp_team].lv_core != null)) {
        libNtve_gf_SetDialogItemUnit(libUIUI_gv_topBarPanel.lv_coreHealthUnitStatusFrames[lp_team], libGame_gv_teams[lp_team].lv_core, PlayerGroupAll());
    }

}

void libUIUI_gf_AddTutorialReferenceItem (text lp_item) {
    int auto4DAC34C7_ae;
    int auto4DAC34C7_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Implementation
    if ((libUIUI_gv_tutorialReferenceCount >= libUIUI_gv_tutorialReferenceCount_Max_C)) {
        return ;
    }

    libUIUI_gv_tutorialReferenceCount += 1;
    if ((libUIUI_gv_tutorialReferencePanel == c_invalidDialogControlId)) {
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/TutorialCardButton");
        libUIUI_gv_tutorialReferenceShowHelp = DialogControlLastCreated();
        DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/TutorialReferenceCard");
        libUIUI_gv_tutorialReferencePanel = DialogControlLastCreated();
        DialogControlHookup(libUIUI_gv_tutorialReferencePanel, c_triggerControlTypePanel, "ReferenceCardHighlight");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_tutorialPanelHighlightFrame = DialogControlLastCreated();
        auto4DAC34C7_ae = libUIUI_gv_tutorialReferenceCount_Max_C;
        auto4DAC34C7_ai = 1;
        lv_index = 1;
        for ( ; ( (auto4DAC34C7_ai >= 0 && lv_index <= auto4DAC34C7_ae) || (auto4DAC34C7_ai <= 0 && lv_index >= auto4DAC34C7_ae) ) ; lv_index += auto4DAC34C7_ai ) {
            DialogControlHookupStandard(c_triggerControlTypeLabel, ("UIContainer/ConsoleUIContainer/TutorialReferenceCard/Item" + IntToString(lv_index)));
            libUIUI_gv_tutorialReferenceLabels[lv_index] = DialogControlLastCreated();
        }
    }

    DialogControlSetVisible(libUIUI_gv_tutorialReferencePanel, PlayerGroupAll(), true);
    libNtve_gf_SetDialogItemText(libUIUI_gv_tutorialReferenceLabels[libUIUI_gv_tutorialReferenceCount], lp_item, PlayerGroupAll());
    DialogControlSetVisible(libUIUI_gv_tutorialReferenceLabels[libUIUI_gv_tutorialReferenceCount], PlayerGroupAll(), true);
}

void libUIUI_gf_AddTutorialReferenceItemPreset (int lp_item) {
    int auto9DB8A3C3_val;

    // Variable Declarations
    int lv_mouseImgWidth_C;
    int lv_mouseImgHeight_C;

    // Variable Initialization
    lv_mouseImgWidth_C = 26;
    lv_mouseImgHeight_C = 31;

    // Implementation
    auto9DB8A3C3_val = lp_item;
    if (auto9DB8A3C3_val == libUIUI_ge_TutorialReferenceItem_Move) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_7E1E7B39", "A", libStEx_gf_HotkeyProfile_MouseButtonImageStringTag(libStEx_gf_HotkeyProfile_SmartCommandMouseButton(1), lv_mouseImgWidth_C, lv_mouseImgHeight_C));
        libUIUI_gf_AddTutorialReferenceItem(TextExpressionAssemble("Param/Expression/lib_UIUI_7E1E7B39"));
    }
    else if (auto9DB8A3C3_val == libUIUI_ge_TutorialReferenceItem_Attack) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_7CD6357C", "A", StringExternal("Param/Value/lib_UIUI_2356944A"));
        TextExpressionSetToken("Param/Expression/lib_UIUI_7CD6357C", "B", libStEx_gf_HotkeyProfile_MouseButtonImageStringTag(libStEx_ge_MouseButton_LeftButton, lv_mouseImgWidth_C, lv_mouseImgHeight_C));
        libUIUI_gf_AddTutorialReferenceItem(TextExpressionAssemble("Param/Expression/lib_UIUI_7CD6357C"));
    }
    else if (auto9DB8A3C3_val == libUIUI_ge_TutorialReferenceItem_PenetratingRound) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_6560E05F", "A", StringExternal("Param/Value/lib_UIUI_52CD2B75"));
        libUIUI_gf_AddTutorialReferenceItem(TextExpressionAssemble("Param/Expression/lib_UIUI_6560E05F"));
    }
    else if (auto9DB8A3C3_val == libUIUI_ge_TutorialReferenceItem_Inspire) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_8571BA1A", "A", StringExternal("Param/Value/lib_UIUI_F0F020D7"));
        libUIUI_gf_AddTutorialReferenceItem(TextExpressionAssemble("Param/Expression/lib_UIUI_8571BA1A"));
    }
    else if (auto9DB8A3C3_val == libUIUI_ge_TutorialReferenceItem_Camera) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_C184B84B", "A", libStEx_gf_CameraLockHotkeyText());
        libUIUI_gf_AddTutorialReferenceItem(TextExpressionAssemble("Param/Expression/lib_UIUI_C184B84B"));
    }
    else if (auto9DB8A3C3_val == libUIUI_ge_TutorialReferenceItem_Heroic) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_D712BEEB", "A", StringExternal("Param/Value/lib_UIUI_7B4F3BB8"));
        libUIUI_gf_AddTutorialReferenceItem(TextExpressionAssemble("Param/Expression/lib_UIUI_D712BEEB"));
    }
    else if (auto9DB8A3C3_val == libUIUI_ge_TutorialReferenceItem_Mount) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_23046111", "A", StringExternal("Param/Value/lib_UIUI_64032958"));
        libUIUI_gf_AddTutorialReferenceItem(TextExpressionAssemble("Param/Expression/lib_UIUI_23046111"));
    }
    else if (auto9DB8A3C3_val == libUIUI_ge_TutorialReferenceItem_Abilities) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_AE9352C9", "A", StringExternal("Param/Value/lib_UIUI_ABA1EB82"));
        TextExpressionSetToken("Param/Expression/lib_UIUI_AE9352C9", "B", StringExternal("Param/Value/lib_UIUI_28162153"));
        TextExpressionSetToken("Param/Expression/lib_UIUI_AE9352C9", "C", StringExternal("Param/Value/lib_UIUI_07F9491B"));
        TextExpressionSetToken("Param/Expression/lib_UIUI_AE9352C9", "D", StringExternal("Param/Value/lib_UIUI_58C6B4C7"));
        libUIUI_gf_AddTutorialReferenceItem(TextExpressionAssemble("Param/Expression/lib_UIUI_AE9352C9"));
    }
    else if (auto9DB8A3C3_val == libUIUI_ge_TutorialReferenceItem_Hearthstone) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_AF21C256", "A", StringExternal("Param/Value/lib_UIUI_0DA49855"));
        libUIUI_gf_AddTutorialReferenceItem(TextExpressionAssemble("Param/Expression/lib_UIUI_AF21C256"));
    }
    else if (auto9DB8A3C3_val == libUIUI_ge_TutorialReferenceItem_Talents) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_421E2A05", "A", StringExternal("Param/Value/lib_UIUI_BE02DEE1"));
        libUIUI_gf_AddTutorialReferenceItem(TextExpressionAssemble("Param/Expression/lib_UIUI_421E2A05"));
    }
    else {
    }
}

void libUIUI_gf_RemoveTutorialReferenceItem (int lp_index) {
    int autoC91B969B_ae;
    int autoC91B969B_ai;

    // Variable Declarations
    int lv_itIndex;

    // Variable Initialization

    // Implementation
    if (((lp_index == 0) || (lp_index > libUIUI_gv_tutorialReferenceCount) || (libUIUI_gv_tutorialReferencePanel == c_invalidDialogControlId))) {
        return ;
    }

    if ((lp_index < libUIUI_gv_tutorialReferenceCount)) {
        autoC91B969B_ae = (libUIUI_gv_tutorialReferenceCount - 1);
        autoC91B969B_ai = 1;
        lv_itIndex = lp_index;
        for ( ; ( (autoC91B969B_ai >= 0 && lv_itIndex <= autoC91B969B_ae) || (autoC91B969B_ai <= 0 && lv_itIndex >= autoC91B969B_ae) ) ; lv_itIndex += autoC91B969B_ai ) {
            libNtve_gf_SetDialogItemText(libUIUI_gv_tutorialReferenceLabels[lv_itIndex], libNtve_gf_DialogItemText(libUIUI_gv_tutorialReferenceLabels[(lv_itIndex + 1)], 1), PlayerGroupAll());
        }
    }

    libNtve_gf_SetDialogItemText(libUIUI_gv_tutorialReferenceLabels[libUIUI_gv_tutorialReferenceCount], StringToText(""), PlayerGroupAll());
    DialogControlSetVisible(libUIUI_gv_tutorialReferenceLabels[libUIUI_gv_tutorialReferenceCount], PlayerGroupAll(), false);
    libUIUI_gv_tutorialReferenceCount -= 1;
}

void libUIUI_gf_SetTutorialReferenceItemText (int lp_index, text lp_text) {
    // Implementation
    if ((lp_index > libUIUI_gv_tutorialReferenceCount)) {
        return ;
    }

    libNtve_gf_SetDialogItemText(libUIUI_gv_tutorialReferenceLabels[lp_index], lp_text, PlayerGroupAll());
    DialogControlSetVisible(libUIUI_gv_tutorialReferenceLabels[lp_index], PlayerGroupAll(), true);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include UI
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_IncludeUI_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_IncludeUI_Init () {
    libUIUI_gt_IncludeUI = TriggerCreate("libUIUI_gt_IncludeUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize UI
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_InitializeUI_Func (bool testConds, bool runActions) {
    int autoB26F30E4_ae;
    int autoB26F30E4_ai;
    playergroup autoF5CB0BEB_g;
    int autoF5CB0BEB_p;
    playergroup autoE37598EE_g;
    int autoE37598EE_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeSupply, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeAllianceButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeResourcePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeControlGroupPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeIdleWorkerButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeArmyButton, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeHeroPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeInfoPanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeMissionTimePanel, false);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeLeaderPanel, false);
    UIUnitColorStyleOverride(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, c_unitColorStyleOverrideWorld);
    UIUnitColorStyleOverride(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, c_unitColorStyleOverrideWorld);
    UIUnitColorStyleOverride(PlayerGroupSingle(libCore_gv_cOMPUTER_NoVision_TeamOrder), c_unitColorStyleOverrideWorld);
    UIUnitColorStyleOverride(PlayerGroupSingle(libCore_gv_cOMPUTER_NoVision_TeamChaos), c_unitColorStyleOverrideWorld);
    UISetBattleNetButtonOffset(PlayerGroupAll(), 280, 0);
    UISetDragSelectEnabled(PlayerGroupAll(), false);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeUnknown, false);
    UISetSelectionTypeEnabled(PlayerGroupAll(), c_localSelectionTypeWorldPanelHero, true);
    PingSetPlayerPingsShown(libCore_gv_activeHumanPlayers, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogRestartButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogSaveButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogLoadButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogReturnToGameplayButton, true);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogMessageLogButton, false);
    UISetGameMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAchievementsButton, false);
    libNtve_gf_AddRemoveUIFrameTypeForGlobalFilterList(true, c_syncFrameTypeCommandPanel);
    UIClearCustomMenuItemList(PlayerGroupAll());
    UISetCustomMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogOptionsButton, true);
    if ((PlayerGroupCount(libCore_gv_activeHumanPlayers) > 1)) {
        UISetCustomMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogExitButton, true);
    }
    else {
        UISetCustomMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogQuitButton, true);
    }
    UISetCustomMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogReturnToGameplayButton, true);
    UISetCustomMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogMessageLogButton, false);
    UISetCustomMenuItemVisible(PlayerGroupAll(), c_gameMenuDialogAchievementsButton, false);
    TriggerExecute(libUIUI_gt_UIInitializeGameUIHandles, true, true);
    TriggerExecute(libUIUI_gt_NotificationDisplayInitialize, true, true);
    TriggerExecute(libUIUI_gt_UIInitializeHeroConsole, true, true);
    TriggerExecute(libUIUI_gt_UIInitializeDamageFlashUI, true, true);
    TriggerExecute(libUIUI_gt_FullscreenOverlaysInitialize, true, true);
    TriggerExecute(libUIUI_gt_FullscreenOverlaysInitializeRework, true, true);
    TriggerExecute(libUIUI_gt_VignetteOverlayInitialize, true, true);
    TriggerExecute(libUIUI_gt_UIInitializeTargetInfoPanel, true, true);
    TriggerExecute(libUIUI_gt_HeroConsoleUnitStatusBarsInitialize, true, true);
    TriggerExecute(libUIUI_gt_UIInitializeTargetingHelperPanel, true, true);
    TriggerExecute(libUIUI_gt_DeathRecapPanelInitialize, true, true);
    TriggerExecute(libUIUI_gt_UIEndofMatchAwardsPanelInitialize, true, true);
    TriggerExecute(libUIUI_gt_UIInitializeObserverUI, true, true);
    TriggerExecute(libUIUI_gt_UIInitializeHeroTrackerArrow, true, true);
    TriggerExecute(libUIUI_gt_UIInitializeDebugPanel, true, true);
    TriggerExecute(libUIUI_gt_UIInitializeHealingFountainsHelpText, true, true);
    TriggerExecute(libUIUI_gt_GameOverSplashInitialize, true, true);
    TriggerExecute(libUIUI_gt_TopBarPanelInitialize, true, true);
    TriggerExecute(libUIUI_gt_DeathTimerPanelInitialize, true, true);
    TriggerExecute(libUIUI_gt_MapMechanicsPanelInitialize, true, true);
    TriggerExecute(libUIUI_gt_MapMechanicHelpPanelInitialize, true, true);
    TriggerExecute(libUIUI_gt_HeroSpecificStatusContainerInitialize, true, true);
    TriggerExecute(libUIUI_gt_FullscreenStatusPanelInitialize, true, true);
    TriggerExecute(libUIUI_gt_UIInitializeTabScreenPanel, true, true);
    TriggerExecute(libGDHL_gt_LeoricUIInitialize, true, true);
    TriggerExecute(libGDHL_gt_MedicUIInitialize, true, true);
    TriggerExecute(libUIUI_gt_InitializeBaseModPingData, true, true);
    autoB26F30E4_ae = 15;
    autoB26F30E4_ai = 1;
    lv_itPlayer = 0;
    for ( ; ( (autoB26F30E4_ai >= 0 && lv_itPlayer <= autoB26F30E4_ae) || (autoB26F30E4_ai <= 0 && lv_itPlayer >= autoB26F30E4_ae) ) ; lv_itPlayer += autoB26F30E4_ai ) {
        PlayerSetState(lv_itPlayer, c_playerStateShowWorldTip, false);
    }
    libUIUI_gf_UIHeroConsoleShowHideForPlayer(false, libCore_gv_oBSERVER_ObserverUIPlayer);
    autoF5CB0BEB_g = libCore_gv_nPCPlayers; 
    autoF5CB0BEB_p = 1;
    for ( ; autoF5CB0BEB_p <= PlayerGroupCount(autoF5CB0BEB_g) ; autoF5CB0BEB_p += (lv_itPlayer == PlayerGroupPlayer(autoF5CB0BEB_g, autoF5CB0BEB_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoF5CB0BEB_g, autoF5CB0BEB_p);
        libUIUI_gf_UIHeroConsoleShowHideForPlayer(false, lv_itPlayer);
    }
    autoE37598EE_g = PlayerGroupAll(); 
    autoE37598EE_p = 1;
    for ( ; autoE37598EE_p <= PlayerGroupCount(autoE37598EE_g) ; autoE37598EE_p += (lv_itPlayer == PlayerGroupPlayer(autoE37598EE_g, autoE37598EE_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoE37598EE_g, autoE37598EE_p);
        libUIUI_gf_TopBarPanelShowHideForPlayer(false, lv_itPlayer);
        libUIUI_gf_UIGameUIShowHideConsolePanelForPlayer(false, lv_itPlayer);
    }
    libUIUI_gf_TopBarPanelShowHideForPlayer(false, libCore_gv_oBSERVER_ObserverUIPlayer);
    TriggerExecute(libUIUI_gt_UIDebugInitandHideErrorWarning, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_InitializeUI_Init () {
    libUIUI_gt_InitializeUI = TriggerCreate("libUIUI_gt_InitializeUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Update Event - Behavior Change That Affects Stats
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIUpdateEventBehaviorChangeThatAffectsStats_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }

        if (!(((EventUnitBehaviorChange() == c_unitBehaviorChangeIncrease) || (EventUnitBehaviorChange() == c_unitBehaviorChangeDecrease)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UIUpdateEventPlayerStatsChange(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIUpdateEventBehaviorChangeThatAffectsStats_Init () {
    libUIUI_gt_UIUpdateEventBehaviorChangeThatAffectsStats = TriggerCreate("libUIUI_gt_UIUpdateEventBehaviorChangeThatAffectsStats_Func");
    TriggerAddEventUnitBehaviorChange(libUIUI_gt_UIUpdateEventBehaviorChangeThatAffectsStats, null, "TalentBucketShrinkRayDamageReduction", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libUIUI_gt_UIUpdateEventBehaviorChangeThatAffectsStats, null, "IllidanMetamorphosis", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libUIUI_gt_UIUpdateEventBehaviorChangeThatAffectsStats, null, "TychusStim", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libUIUI_gt_UIUpdateEventBehaviorChangeThatAffectsStats, null, "Overclock", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libUIUI_gt_UIUpdateEventBehaviorChangeThatAffectsStats, null, "MuradinAvatar", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libUIUI_gt_UIUpdateEventBehaviorChangeThatAffectsStats, null, "ElectromagneticPulseGeneratorReadyBehavior", c_unitBehaviorChangeAny);
    TriggerAddEventUnitBehaviorChange(libUIUI_gt_UIUpdateEventBehaviorChangeThatAffectsStats, null, "TrueshotBowAura", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Update Time Labels Timer Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIUpdateTimeLabelsTimerExpires_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UIUpdateTimeLabels();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIUpdateTimeLabelsTimerExpires_Init () {
    libUIUI_gt_UIUpdateTimeLabelsTimerExpires = TriggerCreate("libUIUI_gt_UIUpdateTimeLabelsTimerExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_UIUpdateTimeLabelsTimerExpires, libUIUI_gv_uITimeLabelUpdateTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug - Init and Hide Error Warning
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugInitandHideErrorWarning_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypeImage, "UIContainer/FullscreenUpperContainer/DebugDataErrorMessage");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugInitandHideErrorWarning_Init () {
    libUIUI_gt_UIDebugInitandHideErrorWarning = TriggerCreate("libUIUI_gt_UIDebugInitandHideErrorWarning_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Damage Flash UI
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeDamageFlashUI_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/DamageOverlayImagesPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_cOMPUTER_TeamOrder], false);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_cOMPUTER_TeamChaos], false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIDamageFlashUI.lv_mainDialog = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LightDamageSplash");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "IntenseSplash");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "PersistentLowHealthSplash");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_uIDamageFlashUI.lv_lowHealthPersistentImage = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeDamageFlashUI_Init () {
    libUIUI_gt_UIInitializeDamageFlashUI = TriggerCreate("libUIUI_gt_UIInitializeDamageFlashUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Damage Flash - Trigger Damage Flash
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDamageFlashTriggerDamageFlash_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_currentHP;
    fixed lv_damagePercentage;
    fixed lv_flashOpacity;
    fixed lv_fadeTime;

    // Variable Initialization
    lv_flashOpacity = 100.0;
    lv_fadeTime = 0.625;

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((EventPlayer() > 0))) {
            return false;
        }

        if (!((EventUnitDamageAttempted() > 0))) {
            return false;
        }

        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((EventUnit() == libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit))) {
            return false;
        }

        if (!((libGame_gv_players[EventPlayer()].lv_activeVehicle == null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentHP = (UnitGetPropertyFixed(EventUnit(), c_unitPropLife, c_unitPropCurrent) + UnitGetPropertyFixed(EventUnit(), c_unitPropShields, c_unitPropCurrent));
    lv_currentHP += 1.0;
    lv_damagePercentage = (EventUnitDamageAmount() / lv_currentHP);
    if ((UnitHasBehavior2(EventUnit(), "SymbioteCasterDummyBehavior") == true)) {
        lv_flashOpacity -= 100.0;
        DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage, PlayerGroupSingle(EventPlayer()), 0.0, lv_flashOpacity);
        DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage, PlayerGroupSingle(EventPlayer()), lv_fadeTime, 100.0);
    }
    else {
        if ((UnitGetPropertyFixed(EventUnit(), c_unitPropLifePercent, c_unitPropCurrent) > libUIUI_gv_uIDamageFlashLowHPThreshold)) {
            if ((lv_damagePercentage >= 0.1)) {
                lv_flashOpacity -= 30.0;
            }

            if ((lv_damagePercentage >= 0.25)) {
                lv_flashOpacity -= 40.0;
                lv_fadeTime += 0.125;
            }

            if ((lv_damagePercentage >= 0.35)) {
                lv_flashOpacity -= 30.0;
                lv_fadeTime += 0.25;
            }

            DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage, PlayerGroupSingle(EventPlayer()), 0.0, lv_flashOpacity);
            DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage, PlayerGroupSingle(EventPlayer()), lv_fadeTime, 100.0);
        }
        else {
            libUIUI_gf_UIDamageFlashStartLowHPSoundAndScreenEffects(EventPlayer());
            if ((lv_damagePercentage >= 0.05)) {
                lv_flashOpacity -= 30.0;
                if ((lv_damagePercentage >= 0.1)) {
                    lv_flashOpacity -= 40.0;
                    lv_fadeTime += 0.125;
                }

                if ((lv_damagePercentage >= 0.2)) {
                    lv_flashOpacity -= 30.0;
                    lv_fadeTime += 0.25;
                }

                DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage, PlayerGroupSingle(EventPlayer()), 0.0, lv_flashOpacity);
                DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_intenseSplashImage, PlayerGroupSingle(EventPlayer()), lv_fadeTime, 100.0);
            }
            else {
                lv_flashOpacity -= 60.0;
                DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage, libCore_gv_playerGroupFromPlayer[EventPlayer()], 0.0, lv_flashOpacity);
                DialogControlFadeTransparency(libUIUI_gv_uIDamageFlashUI.lv_lightSplashImage, libCore_gv_playerGroupFromPlayer[EventPlayer()], lv_fadeTime, 100.0);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDamageFlashTriggerDamageFlash_Init () {
    libUIUI_gt_UIDamageFlashTriggerDamageFlash = TriggerCreate("libUIUI_gt_UIDamageFlashTriggerDamageFlash_Func");
    TriggerAddEventUnitDamaged(libUIUI_gt_UIDamageFlashTriggerDamageFlash, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Damage Flash - Low HP Sounds Looper
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDamageFlashLowHPSoundsLooper_Func (bool testConds, bool runActions) {
    int auto1DC59C8C_ae;
    int auto1DC59C8C_ai;

    // Variable Declarations
    int lv_i;
    bool lv_triggerInUse;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto1DC59C8C_ae = libCore_gv_bALMaxPlayers;
    auto1DC59C8C_ai = 1;
    lv_i = 1;
    for ( ; ( (auto1DC59C8C_ai >= 0 && lv_i <= auto1DC59C8C_ae) || (auto1DC59C8C_ai <= 0 && lv_i >= auto1DC59C8C_ae) ) ; lv_i += auto1DC59C8C_ai ) {
        if ((libGame_gv_players[lv_i].lv_lowHPSoundPlaying == true)) {
            if (((libGame_gv_gameOver == true) || (UnitGetPropertyFixed(libGame_gv_players[lv_i].lv_heroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libUIUI_gv_uIDamageFlashLowHPThreshold))) {
                libUIUI_gf_UIDamageFlashStopLowHPSoundAndScreenEffects(lv_i);
            }
            else {
                lv_triggerInUse = true;
            }
        }

    }
    if ((lv_triggerInUse == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDamageFlashLowHPSoundsLooper_Init () {
    libUIUI_gt_UIDamageFlashLowHPSoundsLooper = TriggerCreate("libUIUI_gt_UIDamageFlashLowHPSoundsLooper_Func");
    TriggerEnable(libUIUI_gt_UIDamageFlashLowHPSoundsLooper, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UIDamageFlashLowHPSoundsLooper, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Recap Panel Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_DeathRecapPanelInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    int auto5356343C_ae;
    int auto5356343C_ai;
    int autoD0D7BEB7_ae;
    int autoD0D7BEB7_ai;
    int auto304F310B_ae;
    int auto304F310B_ai;
    int auto38E84607_ae;
    int auto38E84607_ai;
    int autoBF397E47_ae;
    int autoBF397E47_ai;

    // Variable Declarations
    int lv_itCategoryLabel;
    int lv_itDamageChunk;
    int lv_itTimeZone;
    int lv_itAbilityZone;
    int lv_itMaxDamager;
    int lv_itMaxDamagerAbilities;
    int lv_itLines;
    int lv_timeZoneOrderCorrection;
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/DeathRecapButton");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_deathRecap_Panel.lv_toastButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "FinishedYouLabel");
    libUIUI_gv_deathRecap_Panel.lv_toastButtonFinishedYouLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PlayerNameLabel");
    libUIUI_gv_deathRecap_Panel.lv_toastButtonPlayerNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AbilityNameLabel");
    libUIUI_gv_deathRecap_Panel.lv_toastButtonAbilityNameLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "AbilityIcon");
    libUIUI_gv_deathRecap_Panel.lv_toastButtonAbilityImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DamageAmountLabel");
    libUIUI_gv_deathRecap_Panel.lv_toastButtonDamageAmountLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeHeroCutscene, "ToastCutsceneFrame/KilledByCutscene");
    libUIUI_gv_deathRecap_Panel.lv_toastButtonKilledByCutscene = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer\\FullscreenUpperContainer\\HeroLeaderPanel\\HeroLeaderPanelContainer\\TabControl\\ShowDeathRecapButton");
    libUIUI_gv_deathRecap_Panel.lv_tabScreenButton = DialogControlLastCreated();
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    if ((libCore_gv_dEBUGDeathRecapEnabled == false)) {
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer/TabControl/DeathRecapContainerFrame/DeathRecapPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_deathRecap_Panel.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "GraphLabel");
    libUIUI_gv_deathRecap_Panel.lv_mainGraphLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HighestDamagersPanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_deathRecap_Panel.lv_maxDamagersPanel = DialogControlLastCreated();
    auto5356343C_ae = libGame_gv_deathRecap_MaxMaxDamagers_C;
    auto5356343C_ai = 1;
    lv_itMaxDamager = 1;
    for ( ; ( (auto5356343C_ai >= 0 && lv_itMaxDamager <= auto5356343C_ae) || (auto5356343C_ai <= 0 && lv_itMaxDamager >= auto5356343C_ae) ) ; lv_itMaxDamager += auto5356343C_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HighestDamage" + IntToString(lv_itMaxDamager) + "/HighestDamagerPortraitBackgroundImage/MaxDamagerPortrait");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_deathRecap_Panel.lv_maxDamagersImages[lv_itMaxDamager] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HighestDamage" + IntToString(lv_itMaxDamager) + "/MaxDamagerHeroNameLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_deathRecap_Panel.lv_maxDamagersHeroNameLabels[lv_itMaxDamager] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HighestDamage" + IntToString(lv_itMaxDamager) + "/MaxDamagerNameLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_deathRecap_Panel.lv_maxDamagersPlayerNameLabels[lv_itMaxDamager] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HighestDamage" + IntToString(lv_itMaxDamager) + "/MaxDamagerAmountLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_deathRecap_Panel.lv_maxDamagersAmountLabels[lv_itMaxDamager] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeProgressBar, "HighestDamage" + IntToString(lv_itMaxDamager) + "/HighestDamagerPortraitBackgroundImage/HighestDamagerPercentProgressBar");
        libUIUI_gv_deathRecap_Panel.lv_maxDamagersProgressBars[lv_itMaxDamager] = DialogControlLastCreated();
        autoD0D7BEB7_ae = libGame_gv_deathRecap_MaxMaxDamageAbils_C;
        autoD0D7BEB7_ai = 1;
        lv_itMaxDamagerAbilities = 1;
        for ( ; ( (autoD0D7BEB7_ai >= 0 && lv_itMaxDamagerAbilities <= autoD0D7BEB7_ae) || (autoD0D7BEB7_ai <= 0 && lv_itMaxDamagerAbilities >= autoD0D7BEB7_ae) ) ; lv_itMaxDamagerAbilities += autoD0D7BEB7_ai ) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HighestDamage" + IntToString(lv_itMaxDamager) + "/HighestDamagerAbilityImage" + IntToString(lv_itMaxDamagerAbilities));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilityBars[lv_itMaxDamager][lv_itMaxDamagerAbilities] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HighestDamage" + IntToString(lv_itMaxDamager) + "/HighestDamagerAbilityImage" + IntToString(lv_itMaxDamagerAbilities) + "/AbilityProgressBar");
            libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilityBarProgressBars[lv_itMaxDamager][lv_itMaxDamagerAbilities] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HighestDamage" + IntToString(lv_itMaxDamager) + "/HighestDamagerAbilityLabel" + IntToString(lv_itMaxDamagerAbilities));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilityLabels[lv_itMaxDamager][lv_itMaxDamagerAbilities] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HighestDamage" + IntToString(lv_itMaxDamager) + "/HighestDamagerAbilityAmount" + IntToString(lv_itMaxDamagerAbilities));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilAmountLabels[lv_itMaxDamager][lv_itMaxDamagerAbilities] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HighestDamage" + IntToString(lv_itMaxDamager) + "/HighestDamagerAbilityTooltip" + IntToString(lv_itMaxDamagerAbilities));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
            libUIUI_gv_deathRecap_Panel.lv_maxDamagersAbilityBarTooltips[lv_itMaxDamager][lv_itMaxDamagerAbilities] = DialogControlLastCreated();
        }
    }
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DamageTakenContainerFrame/DamageTakenPanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_deathRecap_Panel.lv_damageTakenPanel = DialogControlLastCreated();
    auto304F310B_ae = libGame_gv_deathRecap_MaxEffectBars_C;
    auto304F310B_ai = 1;
    lv_itTimeZone = 1;
    for ( ; ( (auto304F310B_ai >= 0 && lv_itTimeZone <= auto304F310B_ae) || (auto304F310B_ai <= 0 && lv_itTimeZone >= auto304F310B_ae) ) ; lv_itTimeZone += auto304F310B_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "EffectTimeZone" + IntToString(lv_itTimeZone));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_deathRecap_Panel.lv_damageTakenPanelTimeZone[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "EffectTimeZone" + IntToString(lv_itTimeZone) + "/HealthChunk");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_deathRecap_Panel.lv_lineGraphHealthChunk[lv_itTimeZone] = DialogControlLastCreated();
    }
    auto38E84607_ae = 11;
    auto38E84607_ai = 1;
    lv_itLines = 1;
    for ( ; ( (auto38E84607_ai >= 0 && lv_itLines <= auto38E84607_ae) || (auto38E84607_ai <= 0 && lv_itLines >= auto38E84607_ae) ) ; lv_itLines += auto38E84607_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "LineFrame" + IntToString(lv_itLines));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_deathRecap_Panel.lv_lineGraphLineFrames[lv_itLines] = DialogControlLastCreated();
    }
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AbilitiesPanel");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_deathRecap_Panel.lv_abilitiesPanel = DialogControlLastCreated();
    lv_itTimeZone = 0;
    autoBF397E47_ae = libGame_gv_deathRecap_MaxEffectBars_C;
    autoBF397E47_ai = 1;
    lv_itTimeZone = 1;
    for ( ; ( (autoBF397E47_ai >= 0 && lv_itTimeZone <= autoBF397E47_ae) || (autoBF397E47_ai <= 0 && lv_itTimeZone >= autoBF397E47_ae) ) ; lv_itTimeZone += autoBF397E47_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AbilityTimeZone" + IntToString(lv_itTimeZone));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelTimeZone[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/DamageChunk");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelDamageBars[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/HealingChunk");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealingBars[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/HealthChunk");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBars[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/AbilityIcon");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBarIcons[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/AbilityIconBorder");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBarIconBorders[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/EventCountLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelEventCountLabels[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/DamageHealthAmountLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelDamageBarAmountLabels[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/HealingHealthAmountLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealingBarAmountLabels[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/TimeLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealthBarTimeLabels[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/HeroImageChunkContainer/HeroImageChunk");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHeroImages[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/DamageBarTooltipFrame/BarGraphTooltipFrame");
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelDamageTooltip[lv_itTimeZone] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "AbilityTimeZone" + IntToString(lv_itTimeZone) + "/HealingBarTooltipFrame/BarGraphTooltipFrame");
        libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelHealingTooltip[lv_itTimeZone] = DialogControlLastCreated();
    }
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "GraphTopLabel");
    libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelStartingHealthLabels = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HealthAxisLabel");
    libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelGraphLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HealthAxisLineVertical");
    libUIUI_gv_deathRecap_Panel.lv_abilitiesPanelStartingHealthAxis = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_DeathRecapPanelInitialize_Init () {
    libUIUI_gt_DeathRecapPanelInitialize = TriggerCreate("libUIUI_gt_DeathRecapPanelInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Recap Open Button Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_DeathRecapOpenButtonClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libUIUI_gv_deathRecap_Panel.lv_toastButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_DeathRecapShowHideToastButtonForPlayer(false, EventPlayer());
    DialogControlSendAnimationEvent(libUIUI_gv_uITabScreenPanel.lv_tabControl, libCore_gv_playerGroupFromPlayer[EventPlayer()], "SetSelectedIndex_2");
    DialogControlSendAnimationEvent(libUIUI_gv_uITabScreenPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[EventPlayer()], "Show");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_DeathRecapOpenButtonClicked_Init () {
    libUIUI_gt_DeathRecapOpenButtonClicked = TriggerCreate("libUIUI_gt_DeathRecapOpenButtonClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_DeathRecapOpenButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Effect History Test
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_EffectHistoryTest_Func (bool testConds, bool runActions) {
    int autoAAD5E102_ae;
    int autoAAD5E102_ai;

    // Variable Declarations
    int lv_itEntry;
    unit lv_unit;
    effecthistory lv_history;
    int lv_count;
    string lv_dataAbility;
    string lv_dataBehavior;
    fixed lv_dataAmount;
    fixed lv_dataAmountAttempted;
    fixed lv_dataAmountShielded;
    int lv_dataAmountInt;
    string lv_dataEffectRoot;
    string lv_dataEffectCurrent;
    fixed lv_dataTime;
    int lv_dataType;
    unit lv_dataUnit;
    string lv_dataWeapon;

    // Variable Initialization
    lv_dataType = c_effectHistoryDamage;

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = UnitGroupUnit(UnitGroupSelected(1), 1);
    lv_history = UnitEffectHistory(lv_unit, 0);
    lv_count = EffectHistoryCount(lv_history);
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_983E27A4"), true);
    TriggerDebugOutput(1, UnitTypeGetName(UnitGetType(lv_unit)), true);
    autoAAD5E102_ae = lv_count;
    autoAAD5E102_ai = 1;
    lv_itEntry = 1;
    for ( ; ( (autoAAD5E102_ai >= 0 && lv_itEntry <= autoAAD5E102_ae) || (autoAAD5E102_ai <= 0 && lv_itEntry >= autoAAD5E102_ae) ) ; lv_itEntry += autoAAD5E102_ai ) {
        lv_dataAbility = EffectHistoryGetAbil(lv_history, lv_itEntry);
        lv_dataBehavior = EffectHistoryGetSourceBehavior(lv_history, lv_itEntry);
        lv_dataAmount = EffectHistoryGetAmountFixed(lv_history, lv_itEntry, c_effectAmountDamaged, false);
        lv_dataAmountAttempted = EffectHistoryGetAmountFixed(lv_history, lv_itEntry, c_effectAmountDamageAttempted, false);
        lv_dataAmountShielded = EffectHistoryGetAmountFixed(lv_history, lv_itEntry, c_effectAmountBehaviorShield, false);
        lv_dataAmountInt = EffectHistoryGetAmountInt(lv_history, lv_itEntry, c_effectAmountDamaged, true);
        lv_dataEffectRoot = EffectHistoryGetEffect(lv_history, lv_itEntry, c_effectHistoryEffectRoot);
        lv_dataEffectCurrent = EffectHistoryGetEffect(lv_history, lv_itEntry, c_effectHistoryEffectCurrent);
        lv_dataTime = EffectHistoryGetTime(lv_history, lv_itEntry);
        lv_dataType = EffectHistoryGetType(lv_history, lv_itEntry);
        lv_dataUnit = EffectHistoryGetUnitByLocation(lv_history, lv_itEntry, c_effectUnitCaster);
        lv_dataWeapon = EffectHistoryGetWeapon(lv_history, lv_itEntry);
        TextExpressionSetToken("Param/Expression/lib_UIUI_199067E4", "A", IntToText(lv_itEntry));
        TextExpressionSetToken("Param/Expression/lib_UIUI_199067E4", "D", StringToText((lv_dataEffectCurrent)));
        TextExpressionSetToken("Param/Expression/lib_UIUI_199067E4", "C", FixedToText(lv_dataAmount, 2));
        TextExpressionSetToken("Param/Expression/lib_UIUI_199067E4", "G", FixedToText(lv_dataAmountAttempted, 2));
        TextExpressionSetToken("Param/Expression/lib_UIUI_199067E4", "I", FixedToText(lv_dataAmountShielded, c_fixedPrecisionAny));
        TextExpressionSetToken("Param/Expression/lib_UIUI_199067E4", "E", FixedToText(lv_dataTime, 2));
        TextExpressionSetToken("Param/Expression/lib_UIUI_199067E4", "B", StringToText((lv_dataAbility)));
        TextExpressionSetToken("Param/Expression/lib_UIUI_199067E4", "F", StringToText((lv_dataWeapon)));
        TextExpressionSetToken("Param/Expression/lib_UIUI_199067E4", "H", StringToText((lv_dataBehavior)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_UIUI_199067E4"), true);
    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_UIUI_88DA049B"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_EffectHistoryTest_Init () {
    libUIUI_gt_EffectHistoryTest = TriggerCreate("libUIUI_gt_EffectHistoryTest_Func");
    TriggerAddEventChatMessage(libUIUI_gt_EffectHistoryTest, c_playerAny, "test", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Recap Populate Test
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_DeathRecapPopulateTest_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer(UnitGroupUnit(UnitGroupSelected(EventPlayer()), 1), EventPlayer());
    libUIUI_gf_DeathRecapShowHideForPlayer(true, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_DeathRecapPopulateTest_Init () {
    libUIUI_gt_DeathRecapPopulateTest = TriggerCreate("libUIUI_gt_DeathRecapPopulateTest_Func");
    TriggerAddEventChatMessage(libUIUI_gt_DeathRecapPopulateTest, c_playerAny, "recapnow", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Timer Panel Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_DeathTimerPanelInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    int autoC5CEEC7C_ae;
    int autoC5CEEC7C_ai;
    int auto2CFA4C61_val;
    int autoC6FB5086_ae;
    int autoC6FB5086_ai;
    int autoA9F7EA3B_ae;
    int autoA9F7EA3B_ai;
    int autoD0E687C3_ae;
    int autoD0E687C3_ai;
    int autoD916CFB6_ae;
    int autoD916CFB6_ai;
    int auto3FA9DD2A_ae;
    int auto3FA9DD2A_ai;

    // Variable Declarations
    int lv_itTeam;
    int lv_itPlayer;
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_enemyTeam;
    int lv_eventFrame;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }
    lv_eventFrame = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    autoC5CEEC7C_ae = libCore_gv_bALMaxTeams;
    autoC5CEEC7C_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (autoC5CEEC7C_ai >= 0 && lv_itTeam <= autoC5CEEC7C_ae) || (autoC5CEEC7C_ai <= 0 && lv_itTeam >= autoC5CEEC7C_ae) ) ; lv_itTeam += autoC5CEEC7C_ai ) {
        lv_enemyTeam = (3 - lv_itTeam);
        auto2CFA4C61_val = libUIUI_gv_deathTimerPanelIndex;
        if (auto2CFA4C61_val == 1) {
            DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/Team" + IntToString(lv_itTeam) + "DeathTimerBar"));
        }
        else if (auto2CFA4C61_val == 2) {
            DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/Team" + IntToString(lv_itTeam) + "DeathTimerBar2"));
        }
        else if (auto2CFA4C61_val == 3) {
            DialogControlHookupStandard(c_triggerControlTypePanel, ("UIContainer/ConsoleUIContainer/Team" + IntToString(lv_itTeam) + "DeathTimerBar3"));
        }
        else {
        }
        DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        libUIUI_gv_deathTimerPanel.lv_mainPanel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "TimerStartBlue");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, true);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "TimerStartRed");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, true);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "TimerBar");
        libUIUI_gv_deathTimerPanel.lv_timerBar[lv_itTeam] = DialogControlLastCreated();
        autoC6FB5086_ae = libUIUI_gv_deathTimerPanel_MaxFrameCount;
        autoC6FB5086_ai = 1;
        lv_itPlayer = 1;
        for ( ; ( (autoC6FB5086_ai >= 0 && lv_itPlayer <= autoC6FB5086_ae) || (autoC6FB5086_ai <= 0 && lv_itPlayer >= autoC6FB5086_ae) ) ; lv_itPlayer += autoC6FB5086_ai ) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroFrame" + IntToString(lv_itPlayer));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrame[lv_itTeam][lv_itPlayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "PortraitImage");
            libUIUI_gv_deathTimerPanel.lv_timerBarHeroFramePortraitImage[lv_itTeam][lv_itPlayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "BorderImage");
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/HUD_DeathTimer_PortraitBlue", libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers);
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/HUD_DeathTimer_PortraitRed", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "DarkBargainBorder");
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            libUIUI_gv_deathTimerPanel.lv_timerBarDarkBargainBorder[lv_itTeam][lv_itPlayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeProgressBar, "AurielResurrectionProgressBar");
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            libUIUI_gv_deathTimerPanel.lv_timerBarAurielResurrectProgressBar[lv_itTeam][lv_itPlayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AurielResurrectionLabel");
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            libUIUI_gv_deathTimerPanel.lv_timerBarAurielResurrectLabel[lv_itTeam][lv_itPlayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DeathTimerLabel");
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_DeathTimer_TimerLabelRed", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
            libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrameTimeLabel[lv_itTeam][lv_itPlayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroNameLabel");
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_DeathTimer_TeamDeathTimerHeroNameLeftRed", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
            }
            else {
                libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_DeathTimer_TeamDeathTimerHeroNameRightRed", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
            }
            libUIUI_gv_deathTimerPanel.lv_timerBarHeroFrameHeroNameLabel[lv_itTeam][lv_itPlayer] = DialogControlLastCreated();
            lv_currentPanelLayer -= 1;
        }
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DeathAnnouncementFrame");
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        libUIUI_gv_deathTimerPanel.lv_announcementPanel[lv_itTeam] = DialogControlLastCreated();
        autoA9F7EA3B_ae = libUIUI_gv_deathTimerPanel_MaxFrameCount;
        autoA9F7EA3B_ai = 1;
        lv_itPlayer = 1;
        for ( ; ( (autoA9F7EA3B_ai >= 0 && lv_itPlayer <= autoA9F7EA3B_ae) || (autoA9F7EA3B_ai <= 0 && lv_itPlayer >= autoA9F7EA3B_ae) ) ; lv_itPlayer += autoA9F7EA3B_ai ) {
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DeadPlayer" + IntToString(lv_itPlayer));
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            libUIUI_gv_deathTimerPanel.lv_announcementHeroFrame[lv_itTeam][lv_itPlayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroNameLabel");
            libUIUI_gv_deathTimerPanel.lv_announcementHeroFrameNameLabel[lv_itTeam][lv_itPlayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "KillersLabel");
            libUIUI_gv_deathTimerPanel.lv_announcementHeroFrameKillersLabel[lv_itTeam][lv_itPlayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "DeadPlayerFrame/PortraitImage");
            libUIUI_gv_deathTimerPanel.lv_announcementHeroFramePortraitImage[lv_itTeam][lv_itPlayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "DeadPlayerFrame/BorderImage");
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/HUD_DeathAnnouncement_Portrait_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
            libUIUI_gv_deathTimerPanel.lv_announcementHeroFrameBorderImageBright[lv_itTeam][lv_itPlayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "DeadPlayerFrame/BorderImageFaded");
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/HUD_DeathAnnouncement_Portrait_RedFaded", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
            libUIUI_gv_deathTimerPanel.lv_announcementHeroFrameBorderImageFaded[lv_itTeam][lv_itPlayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "DeadPlayerFrame/CrossImage");
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/HUD_DeathTimer_CrossBlue", libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers);
            libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/HUD_DeathTimer_CrossRed", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
            libUIUI_gv_deathTimerPanel.lv_announcementHeroFrameCrossImage[lv_itTeam][lv_itPlayer] = DialogControlLastCreated();
            lv_currentPanelLayer -= 1;
        }
        lv_currentPanelLayer -= 1;
        lv_currentPanelLayer -= 1;
    }
    libNtve_gf_SetDialogItemImage(libUIUI_gv_deathTimerPanel.lv_timerBar[libGame_gv_teamOrderIndex_C], "@UI/HUD_DeathTimer_TimerBarBackRed", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_deathTimerPanel.lv_timerBar[libGame_gv_teamChaosIndex_C], "@UI/HUD_DeathTimer_TimerBarBackBlue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    autoD0E687C3_ae = libUIUI_gv_deathTimerPanel_MaxFrameCount;
    autoD0E687C3_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoD0E687C3_ai >= 0 && lv_itPlayer <= autoD0E687C3_ae) || (autoD0E687C3_ai <= 0 && lv_itPlayer >= autoD0E687C3_ae) ) ; lv_itPlayer += autoD0E687C3_ai ) {
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_deathTimerPanel.lv_announcementHeroFrameNameLabel[libGame_gv_teamOrderIndex_C][lv_itPlayer], "Storm_DeathTimer_DeathAnnouncementHeroNameLeftRed", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_deathTimerPanel.lv_announcementHeroFrameNameLabel[libGame_gv_teamChaosIndex_C][lv_itPlayer], "Storm_DeathTimer_DeathAnnouncementHeroNameRightBlue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_deathTimerPanel.lv_announcementHeroFrameKillersLabel[libGame_gv_teamOrderIndex_C][lv_itPlayer], "Storm_DeathTimer_DeathAnnouncementKilledByLeftRed", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
        libNtve_gf_SetDialogItemStyle(libUIUI_gv_deathTimerPanel.lv_announcementHeroFrameKillersLabel[libGame_gv_teamChaosIndex_C][lv_itPlayer], "Storm_DeathTimer_DeathAnnouncementKilledByRightBlue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    }
    autoD916CFB6_ae = libCore_gv_bALMaxTeams;
    autoD916CFB6_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (autoD916CFB6_ai >= 0 && lv_itTeam <= autoD916CFB6_ae) || (autoD916CFB6_ai <= 0 && lv_itTeam >= autoD916CFB6_ae) ) ; lv_itTeam += autoD916CFB6_ai ) {
        auto3FA9DD2A_ae = libCore_gv_bALMaxPlayersOnATeam;
        auto3FA9DD2A_ai = 1;
        lv_itPlayer = 1;
        for ( ; ( (auto3FA9DD2A_ai >= 0 && lv_itPlayer <= auto3FA9DD2A_ae) || (auto3FA9DD2A_ai <= 0 && lv_itPlayer >= auto3FA9DD2A_ae) ) ; lv_itPlayer += auto3FA9DD2A_ai ) {
            lv_eventFrame = libUIUI_gv_deathTimerPanel.lv_timerBarHeroFramePortraitImage[lv_itTeam][lv_itPlayer];
            TriggerAddEventDialogControl(libUIUI_gt_DeathTimerPanelDeathTimerFrameMouseEnter, c_playerAny, lv_eventFrame, c_triggerControlEventTypeMouseEnter);
            TriggerAddEventDialogControl(libUIUI_gt_DeathTimerPanelDeathTimerFrameMouseExit, c_playerAny, lv_eventFrame, c_triggerControlEventTypeMouseExit);
        }
    }
    TriggerEnable(libUIUI_gt_DeathTimerPanelUpdate, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_DeathTimerPanelInitialize_Init () {
    libUIUI_gt_DeathTimerPanelInitialize = TriggerCreate("libUIUI_gt_DeathTimerPanelInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Announcement Panel Visible Timer Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_DeathAnnouncementPanelVisibleTimerExpires_Func (bool testConds, bool runActions) {
    int auto049B4FCD_ae;
    int auto049B4FCD_ai;

    // Variable Declarations
    int lv_itTeam;
    int lv_itSlot;
    int lv_triggeringTimerTeam;
    int lv_triggeringTimerSlot;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto049B4FCD_ae = libCore_gv_bALMaxTeams;
    auto049B4FCD_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (auto049B4FCD_ai >= 0 && lv_itTeam <= auto049B4FCD_ae) || (auto049B4FCD_ai <= 0 && lv_itTeam >= auto049B4FCD_ae) ) ; lv_itTeam += auto049B4FCD_ai ) {
        if ((EventTimer() == libUIUI_gv_deathAnnouncement_AnnouncementVisibleTimers[lv_itTeam])) {
            lv_triggeringTimerTeam = lv_itTeam;
            break;
        }

    }
    if ((libUIUI_gv_deathAnnouncement_VisibleHeroFrameCount[lv_triggeringTimerTeam] > 1)) {
        TimerStart(libUIUI_gv_deathAnnouncement_AnnouncementVisibleTimers[lv_triggeringTimerTeam], libUIUI_gv_deathTimerPanel_AnnouncementVisibleDuration_C, false, c_timeGame);
    }

    libUIUI_gf_DeathAnnouncementPanelTransitionFrameOut(lv_triggeringTimerTeam);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_DeathAnnouncementPanelVisibleTimerExpires_Init () {
    libUIUI_gt_DeathAnnouncementPanelVisibleTimerExpires = TriggerCreate("libUIUI_gt_DeathAnnouncementPanelVisibleTimerExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_DeathAnnouncementPanelVisibleTimerExpires, libUIUI_gv_deathAnnouncement_AnnouncementVisibleTimers[1]);
    TriggerAddEventTimer(libUIUI_gt_DeathAnnouncementPanelVisibleTimerExpires, libUIUI_gv_deathAnnouncement_AnnouncementVisibleTimers[2]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Timer Panel Death Timer Frame Mouse Enter
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_DeathTimerPanelDeathTimerFrameMouseEnter_Func (bool testConds, bool runActions) {
    int auto34E2B27A_ae;
    int auto34E2B27A_ai;
    int auto97512660_ae;
    int auto97512660_ai;

    // Variable Declarations
    int lv_itTeam;
    int lv_itFrameIndex;
    int lv_team;
    int lv_frameIndex;
    int lv_group;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto34E2B27A_ae = libCore_gv_bALMaxTeams;
    auto34E2B27A_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (auto34E2B27A_ai >= 0 && lv_itTeam <= auto34E2B27A_ae) || (auto34E2B27A_ai <= 0 && lv_itTeam >= auto34E2B27A_ae) ) ; lv_itTeam += auto34E2B27A_ai ) {
        auto97512660_ae = libCore_gv_bALMaxPlayersOnATeam;
        auto97512660_ai = 1;
        lv_itFrameIndex = 1;
        for ( ; ( (auto97512660_ai >= 0 && lv_itFrameIndex <= auto97512660_ae) || (auto97512660_ai <= 0 && lv_itFrameIndex >= auto97512660_ae) ) ; lv_itFrameIndex += auto97512660_ai ) {
            if ((EventDialogControl() == libUIUI_gv_deathTimerPanel.lv_timerBarHeroFramePortraitImage[lv_itTeam][lv_itFrameIndex])) {
                lv_team = lv_itTeam;
                lv_frameIndex = lv_itFrameIndex;
                break;
            }

        }
    }
    if (((lv_team == 0) || (lv_frameIndex == 0))) {
        return true;
    }

    lv_group = libUIUI_gf_DeathTimerPanelGetGroupOfFrame(lv_team, lv_frameIndex);
    if ((libUIUI_gf_DeathTimerPanelGetLayerOfFrameInGroup(lv_team, lv_group, lv_frameIndex) != 1)) {
        return true;
    }

    libUIUI_gf_DeathTimerPanelSlideGroupOutForPlayer(lv_team, lv_group, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_DeathTimerPanelDeathTimerFrameMouseEnter_Init () {
    libUIUI_gt_DeathTimerPanelDeathTimerFrameMouseEnter = TriggerCreate("libUIUI_gt_DeathTimerPanelDeathTimerFrameMouseEnter_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Timer Panel Death Timer Frame Mouse Exit
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_DeathTimerPanelDeathTimerFrameMouseExit_Func (bool testConds, bool runActions) {
    int autoDDD95D03_ae;
    int autoDDD95D03_ai;
    int auto711894D5_ae;
    int auto711894D5_ai;

    // Variable Declarations
    int lv_itTeam;
    int lv_itFrameIndex;
    int lv_team;
    int lv_frameIndex;
    int lv_group;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDDD95D03_ae = libCore_gv_bALMaxTeams;
    autoDDD95D03_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (autoDDD95D03_ai >= 0 && lv_itTeam <= autoDDD95D03_ae) || (autoDDD95D03_ai <= 0 && lv_itTeam >= autoDDD95D03_ae) ) ; lv_itTeam += autoDDD95D03_ai ) {
        auto711894D5_ae = libCore_gv_bALMaxPlayersOnATeam;
        auto711894D5_ai = 1;
        lv_itFrameIndex = 1;
        for ( ; ( (auto711894D5_ai >= 0 && lv_itFrameIndex <= auto711894D5_ae) || (auto711894D5_ai <= 0 && lv_itFrameIndex >= auto711894D5_ae) ) ; lv_itFrameIndex += auto711894D5_ai ) {
            if ((EventDialogControl() == libUIUI_gv_deathTimerPanel.lv_timerBarHeroFramePortraitImage[lv_itTeam][lv_itFrameIndex])) {
                lv_team = lv_itTeam;
                lv_frameIndex = lv_itFrameIndex;
                break;
            }

        }
    }
    if (((lv_team == 0) || (lv_frameIndex == 0))) {
        return true;
    }

    lv_group = libUIUI_gf_DeathTimerPanelGetGroupOfFrame(lv_team, lv_frameIndex);
    if ((libUIUI_gf_DeathTimerPanelGetLayerOfFrameInGroup(lv_team, lv_group, lv_frameIndex) != 1)) {
        return true;
    }

    libUIUI_gf_DeathTimerPanelCollapseGroupForPlayer(lv_team, lv_group, EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_DeathTimerPanelDeathTimerFrameMouseExit_Init () {
    libUIUI_gt_DeathTimerPanelDeathTimerFrameMouseExit = TriggerCreate("libUIUI_gt_DeathTimerPanelDeathTimerFrameMouseExit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Timer Panel Update
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_DeathTimerPanelUpdate_Func (bool testConds, bool runActions) {
    int auto40047F1D_ae;
    int auto40047F1D_ai;

    // Variable Declarations
    int lv_itTeam;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_gameOver == true)) {
        TriggerEnable(TriggerGetCurrent(), false);
        libNtve_gf_SetDialogItemTooltip(libUIUI_gv_deathTimerPanel.lv_timerBar[libGame_gv_teamOrderIndex_C], null, PlayerGroupAll());
        libNtve_gf_SetDialogItemTooltip(libUIUI_gv_deathTimerPanel.lv_timerBar[libGame_gv_teamChaosIndex_C], null, PlayerGroupAll());
        return true;
    }

    auto40047F1D_ae = libCore_gv_bALMaxTeams;
    auto40047F1D_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (auto40047F1D_ai >= 0 && lv_itTeam <= auto40047F1D_ae) || (auto40047F1D_ai <= 0 && lv_itTeam >= auto40047F1D_ae) ) ; lv_itTeam += auto40047F1D_ai ) {
        libUIUI_gf_DeathTimerPanelUpdatePortraitsForTeam(lv_itTeam);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_DeathTimerPanelUpdate_Init () {
    libUIUI_gt_DeathTimerPanelUpdate = TriggerCreate("libUIUI_gt_DeathTimerPanelUpdate_Func");
    TriggerEnable(libUIUI_gt_DeathTimerPanelUpdate, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_DeathTimerPanelUpdate, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Debug Panel
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeDebugPanel_Func (bool testConds, bool runActions) {
    int init_i;

    int autoE0F0FF91_ae;
    int autoE0F0FF91_ai;

    // Variable Declarations
    int lv_itPlayer;
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/DebugPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIDebugPanel.lv_mainDialog = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "CloseButton");
    libUIUI_gv_uIDebugPanel.lv_closeButton = DialogControlLastCreated();
    if ((libCore_gv_dEBUGDebuggingEnabled == false)) {
        return true;
    }

    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "GeneralControlsFrame");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "RefreshCooldownsButton");
    libUIUI_gv_uIDebugPanel.lv_refreshCooldownsButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCheckBox, "SelectionEnabledCheckBox");
    libUIUI_gv_uIDebugPanel.lv_selectionEnabledCheckbox = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "StartGameButton");
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uIDebugPanel.lv_startGameButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "SpawnCreepCampsButton");
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uIDebugPanel.lv_spawnCreepCampsButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCheckBox, "ToggleMinionSpawningCheckBox");
    libUIUI_gv_uIDebugPanel.lv_disableMinionSpawningCheckbox = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCheckBox, "ToggleTrickleXPCheckBox");
    libUIUI_gv_uIDebugPanel.lv_disableTrickleXPCheckbox = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCheckBox, "FloatingCombatTextCheckBox");
    libUIUI_gv_uIDebugPanel.lv_floatingCombatTextCheckbox = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCheckBox, "AllCombatTextCheckBox");
    libUIUI_gv_uIDebugPanel.lv_enableAllFloatingCombatTextCheckbox = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroControlsFrame");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "RespecHeroButton");
    libUIUI_gv_uIDebugPanel.lv_respecHeroButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PlayerLabel");
    libUIUI_gv_uIDebugPanel.lv_playerLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeSlider, "PlayerSlider");
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 1.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), libCore_gv_bALMaxPlayers, PlayerGroupAll());
    libUIUI_gv_uIDebugPanel.lv_playerSlider = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "LevelLabel");
    libUIUI_gv_uIDebugPanel.lv_levelLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeSlider, "LevelSlider");
    libNtve_gf_SetDialogItemMinimumValue(DialogControlLastCreated(), 1.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), libCore_gv_bALMaxLevel, PlayerGroupAll());
    libUIUI_gv_uIDebugPanel.lv_levelSlider = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCheckBox, "SameXPCheckBox");
    libNtve_gf_SetDialogItemChecked(DialogControlLastCreated(), false, PlayerGroupAll());
    libUIUI_gv_uIDebugPanel.lv_useCurrentXPCheckbox = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "SpawnHeroButton");
    libUIUI_gv_uIDebugPanel.lv_spawnHeroButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCheckBox, "AllHeroesCheckBox");
    libUIUI_gv_uIDebugPanel.lv_allHeroesCheckbox = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePulldown, "HeroPulldown");
    libUIUI_gv_uIDebugPanel.lv_heroDropdown = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePulldown, "SkinPulldown");
    libUIUI_gv_uIDebugPanel.lv_skinDropdown = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePulldown, "MountPulldown");
    libUIUI_gv_uIDebugPanel.lv_mountDropdown = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePulldown, "MountVariationPulldown");
    libUIUI_gv_uIDebugPanel.lv_mountVariationDropdown = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCheckBox, "AllTalentsCheckBox");
    libUIUI_gv_uIDebugPanel.lv_allTalentsCheckbox = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeEditBox, "MetaExperienceEditBox");
    libUIUI_gv_uIDebugPanel.lv_metaXPEditBox = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeButton, "SendMetaExperienceButton");
    libUIUI_gv_uIDebugPanel.lv_metaXPSendButton = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCheckBox, "SpawnAtCameraCheckBox");
    libUIUI_gv_uIDebugPanel.lv_spawnAtCameraCheckbox = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCheckBox, "SaveHeroCheckbox");
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupSingle(1), true);
    libUIUI_gv_uIDebugPanel.lv_savedHeroCheckbox = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "XPLabel");
    libUIUI_gv_uIDebugPanel.lv_xPLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PlayerNumber");
    libUIUI_gv_uIDebugPanel.lv_playerNumber = DialogControlLastCreated();
    autoE0F0FF91_ae = libCore_gv_bALMaxPlayers;
    autoE0F0FF91_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoE0F0FF91_ai >= 0 && lv_itPlayer <= autoE0F0FF91_ae) || (autoE0F0FF91_ai <= 0 && lv_itPlayer >= autoE0F0FF91_ae) ) ; lv_itPlayer += autoE0F0FF91_ai ) {
        libUIUI_gf_UIDebugPanelPopulateHeroDropdownForPlayer(lv_itPlayer, false);
    }
    TriggerEnable(libUIUI_gt_UIDebugPanelUseCurrentXPCheckboxClicked, true);
    if ((libCore_gv_dEBUGDebuggingEnabled == true)) {
        libSprt_gf_DEBUGToggleAllTalentSelection();
    }

    libUIUI_gf_UIDebugPanelApplyOptionsfromBank();
    TriggerExecute(libUIUI_gt_UIDebugPanelPlayerNumber, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeDebugPanel_Init () {
    libUIUI_gt_UIInitializeDebugPanel = TriggerCreate("libUIUI_gt_UIInitializeDebugPanel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Close Button Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelCloseButtonClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_closeButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UIDebugPanelShowHideDebugPanelForPlayer(false, EventPlayer());
    libUIUI_gf_UIDebugPanelSaveOptions(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelCloseButtonClicked_Init () {
    libUIUI_gt_UIDebugPanelCloseButtonClicked = TriggerCreate("libUIUI_gt_UIDebugPanelCloseButtonClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelCloseButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Refresh Cooldowns Button Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelRefreshCooldownsButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_i;
    unit lv_unit;
    int lv_heroIndex;
    string lv_abilLink;
    string lv_cooldownLink;
    string lv_chargeLink;
    string lv_itemUnitType;
    int lv_itemIndex;
    int lv_currentRank;

    // Variable Initialization
    lv_cooldownLink = "";
    lv_chargeLink = "";

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_refreshCooldownsButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_HeroRefreshCooldowns(EventPlayer(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelRefreshCooldownsButtonClicked_Init () {
    libUIUI_gt_UIDebugPanelRefreshCooldownsButtonClicked = TriggerCreate("libUIUI_gt_UIDebugPanelRefreshCooldownsButtonClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelRefreshCooldownsButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Selection Enabled Checkbox Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelSelectionEnabledCheckboxClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_selectionEnabledCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gf_DEBUGToggleSelection();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelSelectionEnabledCheckboxClicked_Init () {
    libUIUI_gt_UIDebugPanelSelectionEnabledCheckboxClicked = TriggerCreate("libUIUI_gt_UIDebugPanelSelectionEnabledCheckboxClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelSelectionEnabledCheckboxClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Start Game Button Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelStartGameButtonClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_startGameButton))) {
            return false;
        }

        if (!((DialogControlIsEnabled(libUIUI_gv_uIDebugPanel.lv_startGameButton, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gf_DEBUGStartGame();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelStartGameButtonClicked_Init () {
    libUIUI_gt_UIDebugPanelStartGameButtonClicked = TriggerCreate("libUIUI_gt_UIDebugPanelStartGameButtonClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelStartGameButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Spawn Creep Camps Button Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelSpawnCreepCampsButtonClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_spawnCreepCampsButton))) {
            return false;
        }

        if (!((DialogControlIsEnabled(libUIUI_gv_uIDebugPanel.lv_spawnCreepCampsButton, EventPlayer()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gf_DEBUGSpawnCreepCamps();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelSpawnCreepCampsButtonClicked_Init () {
    libUIUI_gt_UIDebugPanelSpawnCreepCampsButtonClicked = TriggerCreate("libUIUI_gt_UIDebugPanelSpawnCreepCampsButtonClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelSpawnCreepCampsButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Disable Minion Spawning Checkbox Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelDisableMinionSpawningCheckboxClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_disableMinionSpawningCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gf_DEBUGToggleMinionSpawning();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelDisableMinionSpawningCheckboxClicked_Init () {
    libUIUI_gt_UIDebugPanelDisableMinionSpawningCheckboxClicked = TriggerCreate("libUIUI_gt_UIDebugPanelDisableMinionSpawningCheckboxClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelDisableMinionSpawningCheckboxClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Disable Trickle XP Checkbox Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelDisableTrickleXPCheckboxClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_disableTrickleXPCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gf_DEBUGToggleTrickleXP();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelDisableTrickleXPCheckboxClicked_Init () {
    libUIUI_gt_UIDebugPanelDisableTrickleXPCheckboxClicked = TriggerCreate("libUIUI_gt_UIDebugPanelDisableTrickleXPCheckboxClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelDisableTrickleXPCheckboxClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Combat Text Checkbox Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelCombatTextCheckboxClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_floatingCombatTextCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gf_DEBUGToggleCombatText();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelCombatTextCheckboxClicked_Init () {
    libUIUI_gt_UIDebugPanelCombatTextCheckboxClicked = TriggerCreate("libUIUI_gt_UIDebugPanelCombatTextCheckboxClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelCombatTextCheckboxClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Enable All Combat Text Checkbox Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelEnableAllCombatTextCheckboxClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_enableAllFloatingCombatTextCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gf_DEBUGToggleAllCombatText();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelEnableAllCombatTextCheckboxClicked_Init () {
    libUIUI_gt_UIDebugPanelEnableAllCombatTextCheckboxClicked = TriggerCreate("libUIUI_gt_UIDebugPanelEnableAllCombatTextCheckboxClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelEnableAllCombatTextCheckboxClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Saved Hero Checkbox Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelSavedHeroCheckboxClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_savedHeroCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gf_DEBUGToggleSavedHeroCheckbox();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelSavedHeroCheckboxClicked_Init () {
    libUIUI_gt_UIDebugPanelSavedHeroCheckboxClicked = TriggerCreate("libUIUI_gt_UIDebugPanelSavedHeroCheckboxClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelSavedHeroCheckboxClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Respec Button Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelRespecButtonClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_respecHeroButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_TalentsRespecHeroForPlayer(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelRespecButtonClicked_Init () {
    libUIUI_gt_UIDebugPanelRespecButtonClicked = TriggerCreate("libUIUI_gt_UIDebugPanelRespecButtonClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelRespecButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Player Slider Value Change
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelPlayerSliderValueChange_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_playerSlider))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_UIUI_7777446E", "A", FixedToText(libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer()), 0));
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIDebugPanel.lv_playerLabel, TextExpressionAssemble("Param/Expression/lib_UIUI_7777446E"), libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelPlayerSliderValueChange_Init () {
    libUIUI_gt_UIDebugPanelPlayerSliderValueChange = TriggerCreate("libUIUI_gt_UIDebugPanelPlayerSliderValueChange_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelPlayerSliderValueChange, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeValueChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Level Slider Value Change
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelLevelSliderValueChange_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_levelSlider))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TextExpressionSetToken("Param/Expression/lib_UIUI_FA37F92E", "A", FixedToText(libNtve_gf_DialogItemValue(EventDialogControl(), EventPlayer()), 0));
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIDebugPanel.lv_levelLabel, TextExpressionAssemble("Param/Expression/lib_UIUI_FA37F92E"), libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelLevelSliderValueChange_Init () {
    libUIUI_gt_UIDebugPanelLevelSliderValueChange = TriggerCreate("libUIUI_gt_UIDebugPanelLevelSliderValueChange_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelLevelSliderValueChange, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeValueChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Use Current XP Checkbox Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelUseCurrentXPCheckboxClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_useCurrentXPCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()) == true)) {
        DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_levelSlider, libCore_gv_playerGroupFromPlayer[EventPlayer()], false);
    }
    else {
        DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_levelSlider, libCore_gv_playerGroupFromPlayer[EventPlayer()], true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelUseCurrentXPCheckboxClicked_Init () {
    libUIUI_gt_UIDebugPanelUseCurrentXPCheckboxClicked = TriggerCreate("libUIUI_gt_UIDebugPanelUseCurrentXPCheckboxClicked_Func");
    TriggerEnable(libUIUI_gt_UIDebugPanelUseCurrentXPCheckboxClicked, false);
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelUseCurrentXPCheckboxClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - All Heroes Checkbox Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelAllHeroesCheckboxClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_allHeroesCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UIDebugPanelPopulateHeroDropdownForPlayer(EventPlayer(), libNtve_gf_DialogItemIsChecked(EventDialogControl(), EventPlayer()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelAllHeroesCheckboxClicked_Init () {
    libUIUI_gt_UIDebugPanelAllHeroesCheckboxClicked = TriggerCreate("libUIUI_gt_UIDebugPanelAllHeroesCheckboxClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelAllHeroesCheckboxClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - All Talents Checkbox Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelAllTalentsCheckboxClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_allTalentsCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gf_DEBUGToggleAllTalentSelection();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelAllTalentsCheckboxClicked_Init () {
    libUIUI_gt_UIDebugPanelAllTalentsCheckboxClicked = TriggerCreate("libUIUI_gt_UIDebugPanelAllTalentsCheckboxClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelAllTalentsCheckboxClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Spawn At Base Checkbox Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelSpawnAtBaseCheckboxClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_spawnAtCameraCheckbox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libSprt_gf_DEBUGToggleSpawnatCameraorBaseSelection();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelSpawnAtBaseCheckboxClicked_Init () {
    libUIUI_gt_UIDebugPanelSpawnAtBaseCheckboxClicked = TriggerCreate("libUIUI_gt_UIDebugPanelSpawnAtBaseCheckboxClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelSpawnAtBaseCheckboxClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeChecked);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Hero Dropdown Selection Change
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelHeroDropdownSelectionChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_triggeringPlayer;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_heroDropdown))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroIndex = DialogControlGetSelectedItem(EventDialogControl(), lv_triggeringPlayer);
    libUIUI_gf_UIDebugPanelPopulateSkinDropdownForPlayer(lv_triggeringPlayer, lv_heroIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelHeroDropdownSelectionChange_Init () {
    libUIUI_gt_UIDebugPanelHeroDropdownSelectionChange = TriggerCreate("libUIUI_gt_UIDebugPanelHeroDropdownSelectionChange_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelHeroDropdownSelectionChange, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Skin Dropdown Selection Change
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelSkinDropdownSelectionChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_triggeringPlayer;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_skinDropdown))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroIndex = DialogControlGetSelectedItem(libUIUI_gv_uIDebugPanel.lv_heroDropdown, lv_triggeringPlayer);
    libUIUI_gf_UIDebugPanelPopulateMountDropdownForPlayer(lv_triggeringPlayer, lv_heroIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelSkinDropdownSelectionChange_Init () {
    libUIUI_gt_UIDebugPanelSkinDropdownSelectionChange = TriggerCreate("libUIUI_gt_UIDebugPanelSkinDropdownSelectionChange_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelSkinDropdownSelectionChange, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Mount Dropdown Selection Change
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelMountDropdownSelectionChange_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_mountIndex;
    int lv_triggeringPlayer;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_mountDropdown))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mountIndex = DataTableGetInt(true, ("DEBUG_MountList_Player_" + IntToString(lv_triggeringPlayer) + "_ListIndex_" + IntToString(DialogControlGetSelectedItem(libUIUI_gv_uIDebugPanel.lv_mountDropdown, lv_triggeringPlayer)) + "_Index"));
    libUIUI_gf_UIDebugPanelPopulateMountVariationDropdownForPlayer(lv_triggeringPlayer, lv_mountIndex);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelMountDropdownSelectionChange_Init () {
    libUIUI_gt_UIDebugPanelMountDropdownSelectionChange = TriggerCreate("libUIUI_gt_UIDebugPanelMountDropdownSelectionChange_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelMountDropdownSelectionChange, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeSelectionChanged);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Spawn Hero Button Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelSpawnHeroButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_skinIndex;
    int lv_mountIndex;
    fixed lv_xP;
    int lv_triggeringPlayer;
    int lv_player;

    // Variable Initialization
    lv_triggeringPlayer = EventPlayer();

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_spawnHeroButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_heroIndex = DialogControlGetSelectedItem(libUIUI_gv_uIDebugPanel.lv_heroDropdown, lv_triggeringPlayer);
    lv_skinIndex = libCore_gf_DataSkinsGetSkinIndexFromSkinLink((DataTableGetString(true, ("HeroIndex_" + IntToString(lv_heroIndex) + "_SkinIndex_" + IntToString(DialogControlGetSelectedItem(libUIUI_gv_uIDebugPanel.lv_skinDropdown, lv_triggeringPlayer))))));
    lv_mountIndex = DataTableGetInt(true, ("DEBUG_MountVariationList_Player_" + IntToString(lv_triggeringPlayer) + "_ListIndex_" + IntToString(DialogControlGetSelectedItem(libUIUI_gv_uIDebugPanel.lv_mountVariationDropdown, lv_triggeringPlayer)) + "_Index"));
    lv_player = FixedToInt(libNtve_gf_DialogItemValue(libUIUI_gv_uIDebugPanel.lv_playerSlider, lv_triggeringPlayer));
    if ((libNtve_gf_DialogItemIsChecked(libUIUI_gv_uIDebugPanel.lv_useCurrentXPCheckbox, lv_triggeringPlayer) == true)) {
        lv_xP = UnitGetPropertyFixed(libGame_gv_players[lv_player].lv_heroUnit, c_unitPropXP, c_unitPropCurrent);
    }
    else {
        lv_xP = libCore_gf_GetTotalXPForLevel(FixedToInt(libNtve_gf_DialogItemValue(libUIUI_gv_uIDebugPanel.lv_levelSlider, lv_triggeringPlayer)));
    }
    libUIUI_gf_UIDebugPanelSpawnOrSwapHeroForPlayer(lv_heroIndex, lv_skinIndex, lv_mountIndex, lv_xP, lv_player, lv_triggeringPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelSpawnHeroButtonClicked_Init () {
    libUIUI_gt_UIDebugPanelSpawnHeroButtonClicked = TriggerCreate("libUIUI_gt_UIDebugPanelSpawnHeroButtonClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelSpawnHeroButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Meta XP Edit Box Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelMetaXPEditBoxClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_metaXPEditBox))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlRequestFocus(libUIUI_gv_uIDebugPanel.lv_metaXPEditBox, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelMetaXPEditBoxClicked_Init () {
    libUIUI_gt_UIDebugPanelMetaXPEditBoxClicked = TriggerCreate("libUIUI_gt_UIDebugPanelMetaXPEditBoxClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelMetaXPEditBoxClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Send Meta XP Button Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelSendMetaXPButtonClicked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((EventDialogControl() == libUIUI_gv_uIDebugPanel.lv_metaXPSendButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    libUIUI_gv_uIDebugPanelDebugMetaXPValue = StringToInt(libNtve_gf_DialogItemEditValue(libUIUI_gv_uIDebugPanel.lv_metaXPEditBox, lv_player));
    if ((libUIUI_gv_uIDebugPanelDebugMetaXPValue <= 0)) {
        TextExpressionSetToken("Param/Expression/lib_UIUI_8002416C", "A", IntToText(libUIUI_gv_uIDebugPanelDebugMetaXPValue));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_UIUI_8002416C"), true);
        return true;
    }

    ConsoleCommand("speed 5", true, true);
    while ((TimerGetElapsed(libGame_gv_totalTime) < (3.5 * 60))) {
        Wait(0.0625, c_timeGame);
    }
    ConsoleCommand("speed", true, true);
    Wait(1.0, c_timeGame);
    UnitKill(libGame_gv_teams[2].lv_core);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelSendMetaXPButtonClicked_Init () {
    libUIUI_gt_UIDebugPanelSendMetaXPButtonClicked = TriggerCreate("libUIUI_gt_UIDebugPanelSendMetaXPButtonClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIDebugPanelSendMetaXPButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Update
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelUpdate_Func (bool testConds, bool runActions) {
    playergroup auto45BE7191_g;
    int auto45BE7191_p;

    // Variable Declarations
    int lv_p;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto45BE7191_g = libCore_gv_activeHumanPlayers; 
    auto45BE7191_p = 1;
    for ( ; auto45BE7191_p <= PlayerGroupCount(auto45BE7191_g) ; auto45BE7191_p += (lv_p == PlayerGroupPlayer(auto45BE7191_g, auto45BE7191_p)) ) {
        lv_p = PlayerGroupPlayer(auto45BE7191_g, auto45BE7191_p);
        if ((DialogControlIsVisible(libUIUI_gv_uIDebugPanel.lv_mainDialog, lv_p) == true)) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_5C4FEBA6", "A", FixedToText(UnitGetPropertyFixed(UnitGroupUnit(UnitGroupSelected(lv_p), 1), c_unitPropXP, c_unitPropCurrent), 0));
            libNtve_gf_SetDialogItemText(libUIUI_gv_uIDebugPanel.lv_xPLabel, TextExpressionAssemble("Param/Expression/lib_UIUI_5C4FEBA6"), libCore_gv_playerGroupFromPlayer[lv_p]);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelUpdate_Init () {
    libUIUI_gt_UIDebugPanelUpdate = TriggerCreate("libUIUI_gt_UIDebugPanelUpdate_Func");
    TriggerEnable(libUIUI_gt_UIDebugPanelUpdate, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UIDebugPanelUpdate, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Spawn Button
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelSpawnButton_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libUIUI_gt_UIDebugPanelSpawnHeroButtonClicked, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelSpawnButton_Init () {
    libUIUI_gt_UIDebugPanelSpawnButton = TriggerCreate("libUIUI_gt_UIDebugPanelSpawnButton_Func");
    TriggerAddEventChatMessage(libUIUI_gt_UIDebugPanelSpawnButton, c_playerAny, "spawnbutton", false);
    TriggerAddEventChatMessage(libUIUI_gt_UIDebugPanelSpawnButton, c_playerAny, "sb", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Debug Panel - Player Number
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIDebugPanelPlayerNumber_Func (bool testConds, bool runActions) {
    playergroup auto35FFDD5A_g;
    int auto35FFDD5A_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto35FFDD5A_g = libCore_gv_activeHumanPlayers; 
    auto35FFDD5A_p = 1;
    for ( ; auto35FFDD5A_p <= PlayerGroupCount(auto35FFDD5A_g) ; auto35FFDD5A_p += (lv_itPlayer == PlayerGroupPlayer(auto35FFDD5A_g, auto35FFDD5A_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto35FFDD5A_g, auto35FFDD5A_p);
        TextExpressionSetToken("Param/Expression/lib_UIUI_F5312A72", "A", IntToText(lv_itPlayer));
        libNtve_gf_SetDialogItemText(libUIUI_gv_uIDebugPanel.lv_playerNumber, TextExpressionAssemble("Param/Expression/lib_UIUI_F5312A72"), libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIDebugPanelPlayerNumber_Init () {
    libUIUI_gt_UIDebugPanelPlayerNumber = TriggerCreate("libUIUI_gt_UIDebugPanelPlayerNumber_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - End of Match Awards Panel Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIEndofMatchAwardsPanelInitialize_Func (bool testConds, bool runActions) {
    int auto1A5B0C20_ae;
    int auto1A5B0C20_ai;

    // Variable Declarations
    int lv_itAwardWinners;
    int lv_currAwardPanel;

    // Variable Initialization
    lv_currAwardPanel = c_invalidDialogControlId;

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/EndOfGameAwardsPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_EndofGameAwardsPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libUIUI_gv_EndofGameAwardsPanel.lv_mainPanel, c_triggerControlTypeButton, "SkipButton");
    libUIUI_gv_EndofGameAwardsPanel.lv_skipButton = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_EndofGameAwardsPanel.lv_mainPanel, c_triggerControlTypeButton, "LeaveButton");
    libUIUI_gv_EndofGameAwardsPanel.lv_exitButton = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_EndofGameAwardsPanel.lv_mainPanel, c_triggerControlTypePanel, "AwardWinnerContainerMVP");
    libUIUI_gv_uIMVPSecondaryPanels[0].lv_panelContainer = DialogControlLastCreated();
    lv_currAwardPanel = DialogControlLastCreated();
    DialogControlHookup(lv_currAwardPanel, c_triggerControlTypeLabel, "PlayerNameLabel");
    libUIUI_gv_EndofGameAwardsPanel.lv_mVPSecondaryPlayerName = DialogControlLastCreated();
    DialogControlHookup(lv_currAwardPanel, c_triggerControlTypeLabel, "HeroNameLabel");
    libUIUI_gv_EndofGameAwardsPanel.lv_mVPSecondaryHeroName = DialogControlLastCreated();
    DialogControlHookup(lv_currAwardPanel, c_triggerControlTypeLabel, "MVPTitleLabel");
    libUIUI_gv_EndofGameAwardsPanel.lv_mVPSecondaryHeading = DialogControlLastCreated();
    DialogControlHookup(lv_currAwardPanel, c_triggerControlTypeImage, "SeparatorImage_Blue");
    libUIUI_gv_EndofGameAwardsPanel.lv_mVPSecondarySeparatorImage_Blue = DialogControlLastCreated();
    DialogControlHookup(lv_currAwardPanel, c_triggerControlTypeImage, "SeparatorImage_Red");
    libUIUI_gv_EndofGameAwardsPanel.lv_mVPSecondarySeparatorImage_Red = DialogControlLastCreated();
    DialogControlHookup(lv_currAwardPanel, c_triggerControlTypeImage, "AwardIcon");
    libUIUI_gv_uIMVPSecondaryPanels[0].lv_awardIcon = DialogControlLastCreated();
    DialogControlHookup(lv_currAwardPanel, c_triggerControlTypeButton, "VoterButton");
    libUIUI_gv_uIMVPSecondaryPanels[0].lv_voterButton = DialogControlLastCreated();
    DialogControlHookup(lv_currAwardPanel, c_triggerControlTypeLabel, "VoterButton/VoteCounter");
    libUIUI_gv_uIMVPSecondaryPanels[0].lv_voterButtonLabel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_EndofGameAwardsPanel.lv_mainPanel, c_triggerControlTypePanel, "MVPStats");
    libUIUI_gv_uIMVPWinnerPanel.lv_statsPanel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIMVPWinnerPanel.lv_statsPanel, c_triggerControlTypeLabel, "MVPLabel");
    libUIUI_gv_uIMVPWinnerPanel.lv_mVPHeading = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIMVPWinnerPanel.lv_statsPanel, c_triggerControlTypeLabel, "MVPPlayerName");
    libUIUI_gv_uIMVPWinnerPanel.lv_playerNameLabel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIMVPWinnerPanel.lv_statsPanel, c_triggerControlTypeLabel, "MVPHeroName");
    libUIUI_gv_uIMVPWinnerPanel.lv_heroNameLabel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIMVPWinnerPanel.lv_statsPanel, c_triggerControlTypeLabel, "MVPStat1ValueLabel");
    libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat1ValueLabel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIMVPWinnerPanel.lv_statsPanel, c_triggerControlTypeLabel, "MVPStat2ValueLabel");
    libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat2ValueLabel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIMVPWinnerPanel.lv_statsPanel, c_triggerControlTypeLabel, "MVPStat3ValueLabel");
    libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat3ValueLabel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIMVPWinnerPanel.lv_statsPanel, c_triggerControlTypeLabel, "MVPStat1Label");
    libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat1NameLabel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIMVPWinnerPanel.lv_statsPanel, c_triggerControlTypeLabel, "MVPStat2Label");
    libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat2NameLabel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIMVPWinnerPanel.lv_statsPanel, c_triggerControlTypeLabel, "MVPStat3Label");
    libUIUI_gv_uIMVPWinnerPanel.lv_mVPStat3NameLabel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIMVPWinnerPanel.lv_statsPanel, c_triggerControlTypeLabel, "KillsValueLabel");
    libUIUI_gv_uIMVPWinnerPanel.lv_killsValueLabel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIMVPWinnerPanel.lv_statsPanel, c_triggerControlTypeLabel, "AssistsValueLabel");
    libUIUI_gv_uIMVPWinnerPanel.lv_assistsValueLabel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIMVPWinnerPanel.lv_statsPanel, c_triggerControlTypeLabel, "DeathsValueLabel");
    libUIUI_gv_uIMVPWinnerPanel.lv_deathsValueLabel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIMVPWinnerPanel.lv_statsPanel, c_triggerControlTypeLabel, "KillsLabel");
    libUIUI_gv_uIMVPWinnerPanel.lv_killsLabel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIMVPWinnerPanel.lv_statsPanel, c_triggerControlTypeLabel, "AssistsLabel");
    libUIUI_gv_uIMVPWinnerPanel.lv_assistsLabel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIMVPWinnerPanel.lv_statsPanel, c_triggerControlTypeLabel, "DeathsLabel");
    libUIUI_gv_uIMVPWinnerPanel.lv_deathsLabel = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIMVPWinnerPanel.lv_statsPanel, c_triggerControlTypeImage, "SeparatorImage_Blue");
    libUIUI_gv_uIMVPWinnerPanel.lv_separatorImage_B = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIMVPWinnerPanel.lv_statsPanel, c_triggerControlTypeImage, "SeparatorImage_Red");
    libUIUI_gv_uIMVPWinnerPanel.lv_separatorImage_R = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_EndofGameAwardsPanel.lv_mainPanel, c_triggerControlTypeHeroCutscene, "MVPCutsceneFrame/HeroCutscene");
    libUIUI_gv_uIMVPSecondaryPanels[0].lv_heroCutscene = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_EndofGameAwardsPanel.lv_mainPanel, c_triggerControlTypePanel, "SecondaryAwardStats");
    libUIUI_gv_EndofGameAwardsPanel.lv_secondaryContainer = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libUIUI_gv_EndofGameAwardsPanel.lv_mainPanel, c_triggerControlTypePanel, "SecondaryAwardCutscenes");
    libUIUI_gv_EndofGameAwardsPanel.lv_secondaryCutscenesContainer = DialogControlLastCreated();
    auto1A5B0C20_ae = 4;
    auto1A5B0C20_ai = 1;
    lv_itAwardWinners = 1;
    for ( ; ( (auto1A5B0C20_ai >= 0 && lv_itAwardWinners <= auto1A5B0C20_ae) || (auto1A5B0C20_ai <= 0 && lv_itAwardWinners >= auto1A5B0C20_ae) ) ; lv_itAwardWinners += auto1A5B0C20_ai ) {
        DialogControlHookup(libUIUI_gv_EndofGameAwardsPanel.lv_secondaryContainer, c_triggerControlTypePanel, "AwardWinnerContainer" + IntToString(lv_itAwardWinners));
        lv_currAwardPanel = DialogControlLastCreated();
        libUIUI_gv_uIMVPSecondaryPanels[lv_itAwardWinners].lv_panelContainer = DialogControlLastCreated();
        DialogControlHookup(libUIUI_gv_EndofGameAwardsPanel.lv_secondaryCutscenesContainer, c_triggerControlTypeHeroCutscene, "HeroCutsceneContainer" + IntToString(lv_itAwardWinners) + "/HeroCutscene");
        libUIUI_gv_uIMVPSecondaryPanels[lv_itAwardWinners].lv_heroCutscene = DialogControlLastCreated();
        DialogControlHookup(lv_currAwardPanel, c_triggerControlTypeLabel, "AwardTitleLabel");
        libUIUI_gv_uIMVPSecondaryPanels[lv_itAwardWinners].lv_awardTitleLabel = DialogControlLastCreated();
        DialogControlHookup(lv_currAwardPanel, c_triggerControlTypeLabel, "HeroNameLabel");
        libUIUI_gv_uIMVPSecondaryPanels[lv_itAwardWinners].lv_heroNameLabel = DialogControlLastCreated();
        DialogControlHookup(lv_currAwardPanel, c_triggerControlTypeLabel, "PlayerNameLabel");
        libUIUI_gv_uIMVPSecondaryPanels[lv_itAwardWinners].lv_playerNameLabel = DialogControlLastCreated();
        DialogControlHookup(lv_currAwardPanel, c_triggerControlTypeLabel, "AwardStatValueLabel");
        libUIUI_gv_uIMVPSecondaryPanels[lv_itAwardWinners].lv_awardStatLabel = DialogControlLastCreated();
        DialogControlHookup(lv_currAwardPanel, c_triggerControlTypePanel, "AwardTooltipHitBox");
        libUIUI_gv_uIMVPSecondaryPanels[lv_itAwardWinners].lv_awardTooltipHitbox = DialogControlLastCreated();
        DialogControlHookup(lv_currAwardPanel, c_triggerControlTypeImage, "SeparatorImage_Blue");
        libUIUI_gv_uIMVPSecondaryPanels[lv_itAwardWinners].lv_separatorImage_Blue = DialogControlLastCreated();
        DialogControlHookup(lv_currAwardPanel, c_triggerControlTypeImage, "SeparatorImage_Red");
        libUIUI_gv_uIMVPSecondaryPanels[lv_itAwardWinners].lv_separatorImage_Red = DialogControlLastCreated();
        DialogControlHookup(lv_currAwardPanel, c_triggerControlTypeImage, "AwardIcon");
        libUIUI_gv_uIMVPSecondaryPanels[lv_itAwardWinners].lv_awardIcon = DialogControlLastCreated();
        DialogControlHookup(lv_currAwardPanel, c_triggerControlTypeButton, "VoterButton");
        libUIUI_gv_uIMVPSecondaryPanels[lv_itAwardWinners].lv_voterButton = DialogControlLastCreated();
        DialogControlHookup(lv_currAwardPanel, c_triggerControlTypeLabel, "VoterButton/VoteCounter");
        libUIUI_gv_uIMVPSecondaryPanels[lv_itAwardWinners].lv_voterButtonLabel = DialogControlLastCreated();
    }
    DialogControlSetAnimationState(libUIUI_gv_EndofGameAwardsPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "VotingState", "Disabled");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIEndofMatchAwardsPanelInitialize_Init () {
    libUIUI_gt_UIEndofMatchAwardsPanelInitialize = TriggerCreate("libUIUI_gt_UIEndofMatchAwardsPanelInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - End of Match Awards Disabled
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIEndofMatchAwardsDisabled_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetEnabled(libUIUI_gv_EndofGameAwardsPanel.lv_mainPanel, PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIEndofMatchAwardsDisabled_Init () {
    libUIUI_gt_UIEndofMatchAwardsDisabled = TriggerCreate("libUIUI_gt_UIEndofMatchAwardsDisabled_Func");
    libGame_gf_EndofMatchAwardsDisabled(libUIUI_gt_UIEndofMatchAwardsDisabled);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - End of Match Awards - Force Sync
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIEndofMatchAwardsForceSync_Func (bool testConds, bool runActions) {
    int auto160A0EA3_ae;
    int auto160A0EA3_ai;

    // Variable Declarations
    playergroup lv_forceSyncGroup;
    int lv_iterator;

    // Variable Initialization
    lv_forceSyncGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(2.6, c_timeGame);
    if ((libUIUI_gv_uIEndOfMatchAwardsMVPSequenceEnded == true)) {
        lv_forceSyncGroup = PlayerGroupAll();
    }
    else {
        auto160A0EA3_ae = libCore_gv_bALMaxPlayers;
        auto160A0EA3_ai = 1;
        lv_iterator = 1;
        for ( ; ( (auto160A0EA3_ai >= 0 && lv_iterator <= auto160A0EA3_ae) || (auto160A0EA3_ai <= 0 && lv_iterator >= auto160A0EA3_ae) ) ; lv_iterator += auto160A0EA3_ai ) {
            if ((libUIUI_gv_uIEndOfMatchAwardsPlayerHasSkipped[lv_iterator] == true)) {
                PlayerGroupAdd(lv_forceSyncGroup, lv_iterator);
            }

        }
        if ((libUIUI_gv_uIEndOfMatchAwardsObserverHasSkipped == true)) {
            PlayerGroupAdd(lv_forceSyncGroup, libCore_gv_oBSERVER_ObserverUIPlayer);
        }

    }
    libUIUI_gf_UIEndOfMatchAwardsSyncUpvoteStatus(lv_forceSyncGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIEndofMatchAwardsForceSync_Init () {
    libUIUI_gt_UIEndofMatchAwardsForceSync = TriggerCreate("libUIUI_gt_UIEndofMatchAwardsForceSync_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - End ofMatch Awards - UpVoteButtonClicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIEndofMatchAwardsUpVoteButtonClicked_Func (bool testConds, bool runActions) {
    int auto37F9178D_val;
    int autoACDF2062_ae;
    int autoACDF2062_ai;
    int auto922465EA_val;

    // Variable Declarations
    int lv_idButtonUsed;
    int lv_boolEpicHit;
    int lv_boolLegendHit;
    int lv_receivingPlayerID;
    playergroup lv_currentViewingPlayerGroup;
    int lv_itSkippedPlayerCheck;

    // Variable Initialization
    lv_currentViewingPlayerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libUIUI_gv_uIMVPSecondaryPanels[0].lv_voterButton) || (EventDialogControl() == libUIUI_gv_uIMVPSecondaryPanels[1].lv_voterButton) || (EventDialogControl() == libUIUI_gv_uIMVPSecondaryPanels[2].lv_voterButton) || (EventDialogControl() == libUIUI_gv_uIMVPSecondaryPanels[3].lv_voterButton) || (EventDialogControl() == libUIUI_gv_uIMVPSecondaryPanels[4].lv_voterButton)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libUIUI_gv_uIEndOfMatchAwardsPlayerHasVoted[EventPlayer()] == true)) {
        return true;
    }

    if ((libCore_gv_dEBUGDebuggingEnabled == false)) {
        libUIUI_gv_uIEndOfMatchAwardsPlayerHasVoted[EventPlayer()] = true;
        DialogControlSetAnimationState(libUIUI_gv_EndofGameAwardsPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[EventPlayer()], "VotingState", "Disabled");
    }

    auto37F9178D_val = EventDialogControl();
    if (auto37F9178D_val == libUIUI_gv_uIMVPSecondaryPanels[0].lv_voterButton) {
        lv_idButtonUsed = 0;
        lv_receivingPlayerID = libGame_gv_mVPPlayer;
    }
    else if (auto37F9178D_val == libUIUI_gv_uIMVPSecondaryPanels[1].lv_voterButton) {
        lv_idButtonUsed = 1;
        lv_receivingPlayerID = libGame_gv_finalSecondaryAwardsList[1].lv_winner;
    }
    else if (auto37F9178D_val == libUIUI_gv_uIMVPSecondaryPanels[2].lv_voterButton) {
        lv_idButtonUsed = 2;
        lv_receivingPlayerID = libGame_gv_finalSecondaryAwardsList[2].lv_winner;
    }
    else if (auto37F9178D_val == libUIUI_gv_uIMVPSecondaryPanels[3].lv_voterButton) {
        lv_idButtonUsed = 3;
        lv_receivingPlayerID = libGame_gv_finalSecondaryAwardsList[3].lv_winner;
    }
    else if (auto37F9178D_val == libUIUI_gv_uIMVPSecondaryPanels[4].lv_voterButton) {
        lv_idButtonUsed = 4;
        lv_receivingPlayerID = libGame_gv_finalSecondaryAwardsList[4].lv_winner;
    }
    else {
        if ((libCore_gv_dEBUGDebuggingEnabled == true)) {
            lv_idButtonUsed = 0;
            lv_receivingPlayerID = libGame_gv_mVPPlayer;
        }

    }
    if ((libUIUI_gv_uIEndOfMatchAwardsMVPSequenceEnded == true)) {
        lv_currentViewingPlayerGroup = PlayerGroupAll();
    }
    else {
        autoACDF2062_ae = libCore_gv_bALMaxPlayers;
        autoACDF2062_ai = 1;
        lv_itSkippedPlayerCheck = 1;
        for ( ; ( (autoACDF2062_ai >= 0 && lv_itSkippedPlayerCheck <= autoACDF2062_ae) || (autoACDF2062_ai <= 0 && lv_itSkippedPlayerCheck >= autoACDF2062_ae) ) ; lv_itSkippedPlayerCheck += autoACDF2062_ai ) {
            if ((libUIUI_gv_uIEndOfMatchAwardsPlayerHasSkipped[lv_itSkippedPlayerCheck] == true)) {
                PlayerGroupAdd(lv_currentViewingPlayerGroup, lv_itSkippedPlayerCheck);
            }

        }
        if ((libUIUI_gv_uIEndOfMatchAwardsObserverHasSkipped == true)) {
            PlayerGroupAdd(lv_currentViewingPlayerGroup, libCore_gv_oBSERVER_ObserverUIPlayer);
        }

    }
    libUIUI_gv_uIEndOfMatchAwardsAnyVoteCast = true;
    libUIUI_gv_uIMVPSecondaryPanels[lv_idButtonUsed].lv_voteCount = (1 + libUIUI_gv_uIMVPSecondaryPanels[lv_idButtonUsed].lv_voteCount);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIMVPSecondaryPanels[lv_idButtonUsed].lv_voterButtonLabel, IntToText(libUIUI_gv_uIMVPSecondaryPanels[lv_idButtonUsed].lv_voteCount), lv_currentViewingPlayerGroup);
    auto922465EA_val = libUIUI_gv_uIMVPSecondaryPanels[lv_idButtonUsed].lv_voteCount;
    if (auto922465EA_val == 1) {
        DialogControlSendAnimationEvent(libUIUI_gv_uIMVPSecondaryPanels[lv_idButtonUsed].lv_voterButton, lv_currentViewingPlayerGroup, "TurnOnVoteCounters");
        SoundPlayForPlayer(SoundLink("UI_Game_MVP_Vote01", -1), c_maxPlayers, lv_currentViewingPlayerGroup, 100.0, 0.0);
    }
    else if (auto922465EA_val == 2) {
        SoundPlayForPlayer(SoundLink("UI_Game_MVP_Vote02", -1), c_maxPlayers, lv_currentViewingPlayerGroup, 100.0, 0.0);
    }
    else if (auto922465EA_val == 3) {
        SoundPlayForPlayer(SoundLink("UI_Game_MVP_Vote03", -1), c_maxPlayers, lv_currentViewingPlayerGroup, 100.0, 0.0);
    }
    else if (auto922465EA_val == 4) {
        SoundPlayForPlayer(SoundLink("UI_Game_MVP_Vote04", -1), c_maxPlayers, lv_currentViewingPlayerGroup, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("UI_Game_MVP_Vote_Epic", -1), c_maxPlayers, lv_currentViewingPlayerGroup, 100.0, 0.0);
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lv_idButtonUsed].lv_heroCutscene, lv_currentViewingPlayerGroup, "AwardTier", "Tier1");
        DialogControlSendAnimationEvent(libUIUI_gv_uIMVPSecondaryPanels[lv_idButtonUsed].lv_voterButton, lv_currentViewingPlayerGroup, "Tier1EpicTransition");
        lv_boolEpicHit = 1;
    }
    else if (auto922465EA_val == 5) {
        SoundPlayForPlayer(SoundLink("UI_Game_MVP_Vote05", -1), c_maxPlayers, lv_currentViewingPlayerGroup, 100.0, 0.0);
    }
    else if (auto922465EA_val == 6) {
        SoundPlayForPlayer(SoundLink("UI_Game_MVP_Vote06", -1), c_maxPlayers, lv_currentViewingPlayerGroup, 100.0, 0.0);
    }
    else if (auto922465EA_val == 7) {
        SoundPlayForPlayer(SoundLink("UI_Game_MVP_Vote07", -1), c_maxPlayers, lv_currentViewingPlayerGroup, 100.0, 0.0);
    }
    else if (auto922465EA_val == 8) {
        SoundPlayForPlayer(SoundLink("UI_Game_MVP_Vote08", -1), c_maxPlayers, lv_currentViewingPlayerGroup, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("UI_Game_MVP_Vote_Legendary", -1), c_maxPlayers, lv_currentViewingPlayerGroup, 100.0, 0.0);
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lv_idButtonUsed].lv_heroCutscene, lv_currentViewingPlayerGroup, "AwardTier", "Tier2");
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lv_idButtonUsed].lv_panelContainer, lv_currentViewingPlayerGroup, "ColorState", "Yellow");
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lv_idButtonUsed].lv_panelContainer, lv_currentViewingPlayerGroup, "AwardLabelsColor", "Yellow");
        DialogControlSetAnimationState(libUIUI_gv_uIMVPSecondaryPanels[lv_idButtonUsed].lv_awardIcon, lv_currentViewingPlayerGroup, "IconState", (libGame_gv_finalSecondaryAwardsList[lv_idButtonUsed].lv_awardBadgeIndex + "2"));
        lv_boolLegendHit = 1;
    }
    else if (auto922465EA_val == 9) {
        SoundPlayForPlayer(SoundLink("UI_Game_MVP_Vote09", -1), c_maxPlayers, lv_currentViewingPlayerGroup, 100.0, 0.0);
    }
    else if (auto922465EA_val == 10) {
        SoundPlayForPlayer(SoundLink("UI_Game_MVP_Vote10", -1), c_maxPlayers, lv_currentViewingPlayerGroup, 100.0, 0.0);
    }
    else {
    }
    if ((lv_boolEpicHit == 1)) {
        Wait(0.55, c_timeGame);
        SoundPlayForPlayer(SoundLink("MVP_Epic", -1), c_maxPlayers, lv_currentViewingPlayerGroup, 100.0, 0.0);
    }

    if ((lv_boolLegendHit == 1)) {
        Wait(0.706, c_timeGame);
        SoundPlayForPlayer(SoundLink("MVP_Legendary", -1), c_maxPlayers, lv_currentViewingPlayerGroup, 100.0, 0.0);
    }

    StatEventCreate("EndOfGameUpVotesCollected");
    StatEventAddDataInt(StatEventLastCreated(), "Player", lv_receivingPlayerID);
    StatEventAddDataInt(StatEventLastCreated(), "Voter", EventPlayer());
    StatEventAddDataInt(StatEventLastCreated(), "UpVotesReceived", libUIUI_gv_uIMVPSecondaryPanels[lv_idButtonUsed].lv_voteCount);
    StatEventSend(StatEventLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIEndofMatchAwardsUpVoteButtonClicked_Init () {
    libUIUI_gt_UIEndofMatchAwardsUpVoteButtonClicked = TriggerCreate("libUIUI_gt_UIEndofMatchAwardsUpVoteButtonClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIEndofMatchAwardsUpVoteButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - End of Match Awards - SkipButtonClicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIEndofMatchAwardsSkipButtonClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((EventDialogControl() == libUIUI_gv_EndofGameAwardsPanel.lv_skipButton)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventPlayer() == libCore_gv_oBSERVER_ObserverUIPlayer)) {
        libUIUI_gv_uIEndOfMatchAwardsObserverHasSkipped = true;
    }
    else {
        libUIUI_gv_uIEndOfMatchAwardsPlayerHasSkipped[EventPlayer()] = true;
    }
    DialogControlSendAnimationEvent(libUIUI_gv_EndofGameAwardsPanel.lv_mainPanel, libCore_gv_playerGroupFromPlayer[EventPlayer()], "SkipMVP");
    libUIUI_gf_UIEndofMatchAwardsSecondaryAwardsReveal(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIEndofMatchAwardsSkipButtonClicked_Init () {
    libUIUI_gt_UIEndofMatchAwardsSkipButtonClicked = TriggerCreate("libUIUI_gt_UIEndofMatchAwardsSkipButtonClicked_Func");
    TriggerAddEventDialogControl(libUIUI_gt_UIEndofMatchAwardsSkipButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Floating Combat Text - Shield
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIFloatingCombatTextShield_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_impactPlayer;
    unit lv_impactUnit;
    int lv_launchPlayer;
    unit lv_launchUnit;
    unit lv_casterUnit;
    unit lv_targetUnit;
    fixed lv_amount;
    playergroup lv_vOGroup;
    string lv_shieldBehavior;

    // Variable Initialization
    lv_vOGroup = PlayerGroupEmpty();
    lv_shieldBehavior = EventUnitBehavior();

    // Conditions
    if (testConds) {
        if (!((libSprt_gv_dEBUGCombatTextEnabled == true))) {
            return false;
        }

        if (!((UnitIsAlive(UnitBehaviorEffectUnit(EventUnit(), lv_shieldBehavior, c_effectUnitTarget, 0)) == true))) {
            return false;
        }

        if (!((UnitHasBehavior2(UnitBehaviorEffectUnit(EventUnit(), lv_shieldBehavior, c_effectUnitTarget, 0), "UsingVehicle") == false))) {
            return false;
        }

        if (!((CatalogFieldValueGetAsInt(c_gameCatalogBehavior, lv_shieldBehavior, "DamageResponse.SuppressFloatersCausedByBehavior", c_playerAny) != 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_impactUnit = UnitBehaviorEffectUnit(EventUnit(), lv_shieldBehavior, c_effectUnitTarget, 0);
    lv_impactPlayer = UnitGetOwner(lv_impactUnit);
    lv_launchUnit = UnitBehaviorEffectUnit(EventUnit(), lv_shieldBehavior, c_effectUnitCaster, 0);
    lv_launchPlayer = UnitGetOwner(lv_launchUnit);
    lv_targetUnit = lv_impactUnit;
    lv_casterUnit = lv_casterUnit;
    if ((Round(StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, lv_shieldBehavior, "DamageResponse.ModifyLimit", lv_launchPlayer))) <= 0.0)) {
        if ((Round(StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, lv_shieldBehavior, "DamageResponse.ModifyLimitVitalMaxFractionArray[" + IntToString(2) + "]", lv_launchPlayer))) <= 0.0)) {
            lv_amount = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, lv_shieldBehavior, "DamageResponse.ModifyLimitVitalMaxFractionArray[" + IntToString(0) + "]", lv_launchPlayer));
            lv_amount = Round((lv_amount * UnitGetPropertyFixed(lv_targetUnit, c_unitPropLifeMax, c_unitPropCurrent)));
        }
        else {
            lv_amount = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, lv_shieldBehavior, "DamageResponse.ModifyLimitVitalMaxFractionArray[" + IntToString(2) + "]", lv_launchPlayer));
            lv_amount = Round((lv_amount * UnitGetPropertyFixed(lv_targetUnit, c_unitPropEnergyMax, c_unitPropCurrent)));
        }
    }
    else {
        lv_amount = Round(StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, lv_shieldBehavior, "DamageResponse.ModifyLimit", lv_launchPlayer)));
    }
    if ((lv_amount <= 0.0)) {
        return true;
    }

    if ((lv_launchPlayer != libCore_gv_cOMPUTER_TeamOrder) && (lv_launchPlayer != libCore_gv_cOMPUTER_TeamChaos)) {
        PlayerGroupAdd(lv_vOGroup, lv_impactPlayer);
        PlayerGroupAdd(lv_vOGroup, lv_launchPlayer);
        if ((CatalogFieldValueGet(c_gameCatalogBehavior, lv_shieldBehavior, "DamageResponse.SuppressFloatersCausedByBehavior", lv_launchPlayer) == IntToString(1))) {
            FloatingCombatElementCreateTextAtUnit(lv_vOGroup, "FloatingCombatElements/FloatingCombatNormalAmountReceived", "ShieldState", lv_impactUnit, FixedToText(lv_amount, 0), libNtve_gv_FloatingCombatTextAutoRandomSeed);
        }

        if ((lv_impactPlayer != lv_launchPlayer)) {
            libSond_gf_HeroVOPlayHealThankYouLine(UnitGetOwner(lv_targetUnit), lv_vOGroup);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIFloatingCombatTextShield_Init () {
    libUIUI_gt_UIFloatingCombatTextShield = TriggerCreate("libUIUI_gt_UIFloatingCombatTextShield_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libUIUI_gt_UIFloatingCombatTextShield, null, c_behaviorCategoryUser11, c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Floating Combat Text - Missed
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIFloatingCombatTextMissed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libSprt_gv_dEBUGCombatTextEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitSource)), c_unitAttributeHeroic) == true) || (UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_unitAttributeHeroic) == true))) {
        if (((EventPlayerEffectUsed() == "BlindMissedDummy"))) {
            PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
            PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
            FloatingCombatElementCreateTextAtUnit(lv_players, "FloatingCombatElements/FloatingCombatElementTemplate", "", EventPlayerEffectUsedUnit(c_effectUnitTarget), StringExternal("Param/Value/lib_UIUI_23A2E25C"), libNtve_gv_FloatingCombatTextAutoRandomSeed);
        }
        else {
            PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget));
            PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
            FloatingCombatElementCreateTextAtUnit(lv_players, "FloatingCombatElements/FloatingCombatElementTemplate", "", EventPlayerEffectUsedUnit(c_effectUnitSource), StringExternal("Param/Value/lib_UIUI_525777A6"), libNtve_gv_FloatingCombatTextAutoRandomSeed);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIFloatingCombatTextMissed_Init () {
    libUIUI_gt_UIFloatingCombatTextMissed = TriggerCreate("libUIUI_gt_UIFloatingCombatTextMissed_Func");
    TriggerAddEventPlayerEffectUsed(libUIUI_gt_UIFloatingCombatTextMissed, c_playerAny, "IllidanEvasionDummyEffectSet");
    TriggerAddEventPlayerEffectUsed(libUIUI_gt_UIFloatingCombatTextMissed, c_playerAny, "BlindMissedDummy");
    TriggerAddEventPlayerEffectUsed(libUIUI_gt_UIFloatingCombatTextMissed, c_playerAny, "BlindMissedDummyCaster");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Floating Combat Text - Blocked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIFloatingCombatTextBlocked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libSprt_gv_dEBUGCombatTextEnabled == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_unitAttributeStructure) == false))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitTarget)), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget));
    PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
    FloatingCombatElementCreateTextAtUnit(lv_players, "FloatingCombatElements/FloatingCombatElementTemplate", "", EventPlayerEffectUsedUnit(c_effectUnitSource), StringExternal("Param/Value/lib_UIUI_AC5EFAA0"), libNtve_gv_FloatingCombatTextAutoRandomSeed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIFloatingCombatTextBlocked_Init () {
    libUIUI_gt_UIFloatingCombatTextBlocked = TriggerCreate("libUIUI_gt_UIFloatingCombatTextBlocked_Func");
    TriggerAddEventPlayerEffectUsed(libUIUI_gt_UIFloatingCombatTextBlocked, c_playerAny, "BlockDummyDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Floating Combat Text - Unrevealable
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIFloatingCombatTextUnrevealable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_players;

    // Variable Initialization
    lv_players = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libSprt_gv_dEBUGCombatTextEnabled == true))) {
            return false;
        }

        if (!((UnitIsAlive(EventPlayerEffectUsedUnit(c_effectUnitSource)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget));
    PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster));
    PlayerGroupAdd(lv_players, EventPlayerEffectUsedUnitOwner(c_effectPlayerSource));
    FloatingCombatElementCreateTextAtUnit(lv_players, "FloatingCombatElements/FloatingCombatElementTemplate", "", EventPlayerEffectUsedUnit(c_effectUnitSource), StringExternal("Param/Value/lib_UIUI_80508741"), libNtve_gv_FloatingCombatTextAutoRandomSeed);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIFloatingCombatTextUnrevealable_Init () {
    libUIUI_gt_UIFloatingCombatTextUnrevealable = TriggerCreate("libUIUI_gt_UIFloatingCombatTextUnrevealable_Func");
    TriggerAddEventPlayerEffectUsed(libUIUI_gt_UIFloatingCombatTextUnrevealable, c_playerAny, "HeroGenericUnrevealableDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Floating Combat Text - Quest Progress
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIFloatingCombatTextQuestProgress_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_impactUnit;
    unit lv_launchUnit;
    int lv_launchPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_impactUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_launchUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_launchPlayer = UnitGetOwner(lv_launchUnit);
    if ((lv_launchPlayer <= libCore_gv_bALMaxPlayers) && (lv_launchPlayer > 0)) {
        if ((UnitIsAlive(lv_impactUnit) == true)) {
            FloatingCombatElementCreateTextAtUnit(libCore_gv_playerGroupFromPlayer[lv_launchPlayer], "FloatingCombatElements/FloatingCombatQuestProgress", "QuestState", lv_impactUnit, null, libNtve_gv_FloatingCombatTextAutoRandomSeed);
        }
        else {
            FloatingCombatElementCreateTextAtPoint(libCore_gv_playerGroupFromPlayer[lv_launchPlayer], "FloatingCombatElements/FloatingCombatQuestProgress", "QuestState", UnitGetPosition(lv_impactUnit), null, libNtve_gv_FloatingCombatTextAutoRandomSeed);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIFloatingCombatTextQuestProgress_Init () {
    libUIUI_gt_UIFloatingCombatTextQuestProgress = TriggerCreate("libUIUI_gt_UIFloatingCombatTextQuestProgress_Func");
    TriggerAddEventPlayerEffectUsed(libUIUI_gt_UIFloatingCombatTextQuestProgress, c_playerAny, "TalentQuestProgressDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Floating Combat Text - Quest Progress Via Tokens
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIFloatingCombatTextQuestProgressViaTokens_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_impactUnit;
    unit lv_launchUnit;
    int lv_launchPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((CatalogFieldValueGetAsInt(c_gameCatalogEffect, EventPlayerEffectUsed(), "EffectCategory[" + IntToString(0) + "]", c_playerAny) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_impactUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_launchUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_launchPlayer = UnitGetOwner(lv_launchUnit);
    if ((lv_launchPlayer <= libCore_gv_bALMaxPlayers) && (lv_launchPlayer > 0)) {
        if ((UnitIsValid(lv_impactUnit) == true) && (UnitIsAlive(lv_impactUnit) == true)) {
            FloatingCombatElementCreateTextAtUnit(libCore_gv_playerGroupFromPlayer[lv_launchPlayer], "FloatingCombatElements/FloatingCombatQuestProgress", "QuestState", lv_impactUnit, null, libNtve_gv_FloatingCombatTextAutoRandomSeed);
        }
        else {
            FloatingCombatElementCreateTextAtPoint(libCore_gv_playerGroupFromPlayer[lv_launchPlayer], "FloatingCombatElements/FloatingCombatQuestProgress", "QuestState", UnitGetPosition(lv_impactUnit), null, libNtve_gv_FloatingCombatTextAutoRandomSeed);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIFloatingCombatTextQuestProgressViaTokens_Init () {
    libUIUI_gt_UIFloatingCombatTextQuestProgressViaTokens = TriggerCreate("libUIUI_gt_UIFloatingCombatTextQuestProgressViaTokens_Func");
    TriggerAddEventPlayerEffectUsedFromScope(libUIUI_gt_UIFloatingCombatTextQuestProgressViaTokens, c_playerAny, "CEffectModifyTokenCount");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vignette Overlay Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_VignetteOverlayInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer/FullscreenVignettePanelOverlay");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_vignetteOverlayPanel.lv_mainDialog = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCutscene, "VignetteCutscene");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_vignetteOverlayPanel.lv_overlayCutscene = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_VignetteOverlayInitialize_Init () {
    libUIUI_gt_VignetteOverlayInitialize = TriggerCreate("libUIUI_gt_VignetteOverlayInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fullscreen Overlays Initialize Rework
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_FullscreenOverlaysInitializeRework_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer/FullscreenOverlayImagesPanelRework");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_fullscreenOverlaysPanelRework.lv_mainDialog = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCutscene, "SpecialOverlayCutscene");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_fullscreenOverlaysPanelRework.lv_overlayCutscene = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_FullscreenOverlaysInitializeRework_Init () {
    libUIUI_gt_FullscreenOverlaysInitializeRework = TriggerCreate("libUIUI_gt_FullscreenOverlaysInitializeRework_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fullscreen Overlays Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_FullscreenOverlaysInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenLowerContainer/FullscreenOverlayImagesPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_cOMPUTER_TeamOrder], false);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_cOMPUTER_TeamChaos], false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_fullscreenOverlaysPanel.lv_mainDialog = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "AbathurSymbioteOverlay");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_fullscreenOverlaysPanel.lv_abathurSymbioteOverlay = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "CCOverlay");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_fullscreenOverlaysPanel.lv_cCSplashImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "FlashBangOverlay");
    DialogControlFadeTransparency(DialogControlLastCreated(), PlayerGroupAll(), 0.0, 100.0);
    libUIUI_gv_fullscreenOverlaysPanel.lv_flashBangImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCutscene, "SpecialOverlayCutscene");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeCutscene, "DeathOverlayCutscene");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_FullscreenOverlaysInitialize_Init () {
    libUIUI_gt_FullscreenOverlaysInitialize = TriggerCreate("libUIUI_gt_FullscreenOverlaysInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fullscreen Overlays Death Overlay Hide Time Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires_Func (bool testConds, bool runActions) {
    int auto3C504770_ae;
    int auto3C504770_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto3C504770_ae = libCore_gv_bALMaxPlayers;
    auto3C504770_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto3C504770_ai >= 0 && lv_itPlayer <= auto3C504770_ae) || (auto3C504770_ai <= 0 && lv_itPlayer >= auto3C504770_ae) ) ; lv_itPlayer += auto3C504770_ai ) {
        if ((EventTimer() == libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[lv_itPlayer])) {
            DialogControlSetVisible(libUIUI_gv_fullscreenOverlaysPanel.lv_deathOverlay, libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires_Init () {
    libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires = TriggerCreate("libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[1]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[2]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[3]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[4]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[5]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[6]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[7]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[8]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[9]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysDeathOverlayHideTimer[10]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fullscreen Overlays Special Overlay Hide Time Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires_Func (bool testConds, bool runActions) {
    int auto3BBEA73E_ae;
    int auto3BBEA73E_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto3BBEA73E_ae = libCore_gv_bALMaxPlayers;
    auto3BBEA73E_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto3BBEA73E_ai >= 0 && lv_itPlayer <= auto3BBEA73E_ae) || (auto3BBEA73E_ai <= 0 && lv_itPlayer >= auto3BBEA73E_ae) ) ; lv_itPlayer += auto3BBEA73E_ai ) {
        if ((EventTimer() == libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[lv_itPlayer])) {
            DialogControlSetVisible(libUIUI_gv_fullscreenOverlaysPanel.lv_specialOverlay, libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires_Init () {
    libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires = TriggerCreate("libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[1]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[2]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[3]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[4]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[5]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[6]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[7]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[8]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[9]);
    TriggerAddEventTimer(libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires, libUIUI_gv_fullscreenOverlaysSpecialOverlayHideTimer[10]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game Over Splash Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_GameOverSplashInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/GameOverSplash");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_gameOverSplash.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "VictoryBackground");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_gameOverSplash.lv_victoryFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "VictoryBackground/VictoryLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_33023126"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_VictoryLabel_Observer", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DefeatBackground");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_gameOverSplash.lv_defeatFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DefeatBackground/DefeatLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_E8B2497B"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_DefeatLabel_Observer", libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libUIUI_gv_gameOverSplash.lv_defeatLabel = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_GameOverSplashInitialize_Init () {
    libUIUI_gt_GameOverSplashInitialize = TriggerCreate("libUIUI_gt_GameOverSplashInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Game UI Handles
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeGameUIHandles_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer");
    libUIUI_gv_uIGameUIHandles.lv_gameUIContainer = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer");
    libUIUI_gv_uIGameUIHandles.lv_fullscreenUpperContainer = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsolePanel");
    libUIUI_gv_uIGameUIHandles.lv_consolePanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MinimapPanel");
    libUIUI_gv_uIGameUIHandles.lv_minimapPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/MenuBar/TalentsButton");
    libUIUI_gv_uIGameUIHandles.lv_talentsButton = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/FullscreenUpperContainer/MenuBar/MenuButton");
    libUIUI_gv_uIGameUIHandles.lv_gameMenuButton = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeGameUIHandles_Init () {
    libUIUI_gt_UIInitializeGameUIHandles = TriggerCreate("libUIUI_gt_UIInitializeGameUIHandles_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Healing Fountains Help Text
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeHealingFountainsHelpText_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libUIUI_gv_uIHealingFountainsHelpTextEnabled == true)) {
        libUIUI_gf_UIHealingFountainsHelpTextCreateTextTagsForTeam(libGame_gv_teamOrderIndex_C);
    }

    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain, true);
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController, true);
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeHealingFountainsHelpText_Init () {
    libUIUI_gt_UIInitializeHealingFountainsHelpText = TriggerCreate("libUIUI_gt_UIInitializeHealingFountainsHelpText_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Reset Moonwell Text Tag and Animation For Players
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIResetMoonwellTextTagandAnimationForPlayers_Func (bool testConds, bool runActions) {
    int autoA3D95D9F_ae;
    int autoA3D95D9F_ai;
    int auto538C2D83_ae;
    int auto538C2D83_ai;

    // Variable Declarations
    int lv_textTag;
    int lv_itPlayer;
    int lv_team;

    // Variable Initialization
    lv_textTag = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    autoA3D95D9F_ae = libCore_gv_bALMaxPlayers;
    autoA3D95D9F_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoA3D95D9F_ai >= 0 && lv_itPlayer <= autoA3D95D9F_ae) || (autoA3D95D9F_ai <= 0 && lv_itPlayer >= autoA3D95D9F_ae) ) ; lv_itPlayer += autoA3D95D9F_ai ) {
        libGame_gv_moonwellMoonwellonCooldown[lv_itPlayer] = false;
        lv_team = libGame_gf_TeamNumberOfPlayer(lv_itPlayer);
        IntLoopBegin(1, libGame_gv_moonwellMaxMoonwellCount);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            lv_textTag = libGame_gv_moonwellTextTags[lv_itPlayer][IntLoopCurrent()];
            if ((lv_textTag != c_textTagNone)) {
                TextTagDestroy(lv_textTag);
                libGame_gv_moonwellTextTags[lv_itPlayer][IntLoopCurrent()] = c_textTagNone;
            }
        }
        IntLoopEnd();
    }
    UIFlyerHelperOverride(PlayerGroupAll(), libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
    UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("TownMoonwell", "TownMoonwellL2", "TownMoonwellL3", UnitGetOwner(EventUnit()), c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "Signal MoonwellReset");
    }
    UnitGroupLoopEnd();
    UIFlyerHelperClearOverride(PlayerGroupAll());
    libUIUI_gf_UIHealingFountainsHelpTextCreateTextTagsForTeam(libGame_gv_teamOrderIndex_C);
    libUIUI_gf_UIHealingFountainsHelpTextCreateTextTagsForTeam(libGame_gv_teamChaosIndex_C);
    auto538C2D83_ae = libCore_gv_bALMaxPlayers;
    auto538C2D83_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto538C2D83_ai >= 0 && lv_itPlayer <= auto538C2D83_ae) || (auto538C2D83_ai <= 0 && lv_itPlayer >= auto538C2D83_ae) ) ; lv_itPlayer += auto538C2D83_ai ) {
        libUIUI_gf_UIHealingFountainsHelpTextShowHideForPlayer(lv_itPlayer, false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIResetMoonwellTextTagandAnimationForPlayers_Init () {
    libUIUI_gt_UIResetMoonwellTextTagandAnimationForPlayers = TriggerCreate("libUIUI_gt_UIResetMoonwellTextTagandAnimationForPlayers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Healing Fountains Help Text - Player Uses Healing Fountain
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gv_uIHealingFountainsHelpTextHasFountainBeenUsed[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)] = true;
    libUIUI_gf_UIHealingFountainsHelpTextShowHideForPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain_Init () {
    libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain = TriggerCreate("libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain_Func");
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain, false);
    TriggerAddEventPlayerEffectUsed(libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain, c_playerAny, "MoonwellDrinkStartingSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Healing Fountains Help Text - Text Display Controller
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController_Func (bool testConds, bool runActions) {
    int autoE686765A_ae;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE686765A_ae = libCore_gv_bALMaxPlayers;
    lv_player = 1;
    for ( ; lv_player <= autoE686765A_ae ; lv_player += 1 ) {
        if ((libCore_gv_sYSGameMode != libCore_ge_GameModes_Tutorial1) && (libCore_gv_sYSGameMode != libCore_ge_GameModes_TutorialMapMechanics) && ((libUIUI_gv_uIHealingFountainsHelpTextHasFountainBeenUsed[lv_player] == true) || (UnitIsValid(libGame_gv_players[lv_player].lv_heroUnit) == false))) {
            continue;
        }

        if ((libGame_gv_moonwellMoonwellonCooldown[lv_player] == false) && ((libUIUI_gv_uIHealingFountainsHelpTextShowTextTagforTutorial == true) || ((UnitIsValid(libGame_gv_players[lv_player].lv_activeVehicle) == false) && (UnitGetPropertyFixed(libGame_gv_players[lv_player].lv_heroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= 50.0)))) {
            if ((libUIUI_gv_uIHealingFountainsHelpTextTextShowing[lv_player] == false)) {
                libUIUI_gf_UIHealingFountainsHelpTextShowHideForPlayer(lv_player, true);
            }

        }
        else {
            if ((libUIUI_gv_uIHealingFountainsHelpTextTextShowing[lv_player] == true)) {
                libUIUI_gf_UIHealingFountainsHelpTextShowHideForPlayer(lv_player, false);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController_Init () {
    libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController = TriggerCreate("libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController_Func");
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Healing Fountains Help Text - Healing Fountain Dies
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies_Func (bool testConds, bool runActions) {
    int autoC6505DAD_ae;

    // Variable Declarations
    int lv_iter;
    int lv_arrayToUse;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((((UnitGetType(EventUnit()) == "TownMoonwellL2") || (UnitGetType(EventUnit()) == "TownMoonwellL3")) && ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamOrder) || (UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamChaos))))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_arrayToUse = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()));
    autoC6505DAD_ae = libUIUI_gv_uI_HealingFountainsHelpText_ArraySize_C;
    lv_iter = 1;
    for ( ; lv_iter <= autoC6505DAD_ae ; lv_iter += 1 ) {
        if ((libUIUI_gv_uIHealingFountainsHelpText[lv_arrayToUse][lv_iter].lv_healingFountain == EventUnit())) {
            TextTagShow(libUIUI_gv_uIHealingFountainsHelpText[lv_arrayToUse][lv_iter].lv_textTag, PlayerGroupAll(), false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies_Init () {
    libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies = TriggerCreate("libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies_Func");
    TriggerEnable(libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies, false);
    TriggerAddEventUnitDied(libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Help Button Debug Position
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HelpButtonDebugPosition_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetPosition(libUIUI_gv_helpButtonFrames[1], PlayerGroupAll(), c_anchorTopLeft, StringToInt(StringWord(EventChatMessage(false), 2)), StringToInt(StringWord(EventChatMessage(false), 3)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HelpButtonDebugPosition_Init () {
    libUIUI_gt_HelpButtonDebugPosition = TriggerCreate("libUIUI_gt_HelpButtonDebugPosition_Func");
    TriggerAddEventChatMessage(libUIUI_gt_HelpButtonDebugPosition, c_playerAny, "-sss", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Hero Console
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeHeroConsole_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_itInventoryButton;
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/HeroConsolePanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIHeroConsole.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroStatsFrame");
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIHeroConsole.lv_heroStatsFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrame");
    libUIUI_gv_uIHeroConsole.lv_heroStatsUnitStatusFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameOrange");
    libUIUI_gv_uIHeroConsole.lv_heroStatsFuryStatFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameYellow");
    libUIUI_gv_uIHeroConsole.lv_heroStatsBrewStatFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFramePink");
    libUIUI_gv_uIHeroConsole.lv_heroStatsEnergyStatFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroUnitStatusFrameNoEnergy");
    libUIUI_gv_uIHeroConsole.lv_heroStatsNoEnergyStatFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusBar, "HeroUnitStatusFrame/HealthBar");
    libUIUI_gv_uIHeroConsole.lv_heroStatsHealthBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusBar, "HeroUnitStatusFrame/EnergyBar");
    libUIUI_gv_uIHeroConsole.lv_heroStatsManaBar = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsolePanel/PortraitPanel");
    libUIUI_gv_uIHeroConsole.lv_gameUIPortrait = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/HeroCommandCardPanelFrame");
    libUIUI_gv_uIHeroConsole.lv_gameUICommandCardPanelFrame = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/InventoryPanel");
    libUIUI_gv_uIHeroConsole.lv_gameUIInventoryPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/HeroBuffDebuffPanel");
    libUIUI_gv_uIHeroConsole.lv_buffDebuffPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroBuffBar");
    libUIUI_gv_uIHeroConsole.lv_buffBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroDebuffBar");
    libUIUI_gv_uIHeroConsole.lv_debuffBar = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeHeroConsole_Init () {
    libUIUI_gt_UIInitializeHeroConsole = TriggerCreate("libUIUI_gt_UIInitializeHeroConsole_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Console Unit Status Bars Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HeroConsoleUnitStatusBarsInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer, c_triggerControlTypeUnitStatus, "HeroDeathStunFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusDurationBar, "UnitStatusDurationBarLeft");
    libNtve_gf_SetDialogItemBehavior(DialogControlLastCreated(), "Dead", PlayerGroupAll());
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarLeftBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusDurationBar, "UnitStatusDurationBarRight");
    libNtve_gf_SetDialogItemBehavior(DialogControlLastCreated(), "Dead", PlayerGroupAll());
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarRightBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "DeathStunIcon");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarIcon = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DeathStunLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarDescriptionLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DeathStunTimeLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarTimeLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer, c_triggerControlTypeUnitStatus, "HeroCastChannelBarFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_heroConsoleUnitStatusBars.lv_castChannelBarParentFrame = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer, c_triggerControlTypeUnitStatus, "HeroBehaviorChannelBarFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusDurationBar, "HeroBehaviorChannelBar");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarDurationBar = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroBehaviorChannelBar/ChannelNameLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(libUIUI_gv_uIGameUIHandles.lv_consoleUIContainer, c_triggerControlTypeUnitStatus, "HeroBehaviorChannelBarFrameRight");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarParentFrameRight = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusDurationBar, "HeroBehaviorChannelBar");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarDurationBarRight = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroBehaviorChannelBar/ChannelNameLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeObservedPlayerId);
    libUIUI_gv_heroConsoleUnitStatusBars.lv_behaviorChannelBarBehaviorLabelRight = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    TriggerEnable(libUIUI_gt_HeroConsoleUnitStatusBarsUpdate, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HeroConsoleUnitStatusBarsInitialize_Init () {
    libUIUI_gt_HeroConsoleUnitStatusBarsInitialize = TriggerCreate("libUIUI_gt_HeroConsoleUnitStatusBarsInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Console Unit Status Bars Channel Behavior Added
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    unit lv_heroUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventPlayer() >= 1))) {
            return false;
        }

        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((CatalogFieldValueGetAsInt(c_gameCatalogBehavior, EventUnitBehavior(), "BehaviorCategories[Restorable]", c_playerAny) == 1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    lv_heroUnit = libGame_gv_players[lv_player].lv_unitStatusBarsMonitorUnit_Behavior;
    if ((lv_heroUnit != EventUnit())) {
        return true;
    }

    if ((StringToInt(CatalogFieldValueGet(c_gameCatalogBehavior, EventUnitBehavior(), "DisplayPriority", c_playerAny)) >= 1000)) {
        libUIUI_gf_HeroConsoleUnitStatusBarsSetChannelBehaviorForBehaviorChannelBarRight(lv_player, EventUnitBehavior());
    }
    else {
        libUIUI_gf_HeroConsoleUnitStatusBarsSetChannelBehaviorForBehaviorChannelBar(lv_player, EventUnitBehavior());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded_Init () {
    libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded = TriggerCreate("libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded_Func");
    TriggerAddEventUnitBehaviorChange(libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded, null, null, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Console Unit Status Bars Update
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HeroConsoleUnitStatusBarsUpdate_Func (bool testConds, bool runActions) {
    int auto50FBA062_ae;
    int auto50FBA062_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto50FBA062_ae = libCore_gv_bALMaxPlayers;
    auto50FBA062_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto50FBA062_ai >= 0 && lv_itPlayer <= auto50FBA062_ae) || (auto50FBA062_ai <= 0 && lv_itPlayer >= auto50FBA062_ae) ) ; lv_itPlayer += auto50FBA062_ai ) {
        libUIUI_gf_HeroConsoleUnitStatusBarsUpdateForPlayer(lv_itPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HeroConsoleUnitStatusBarsUpdate_Init () {
    libUIUI_gt_HeroConsoleUnitStatusBarsUpdate = TriggerCreate("libUIUI_gt_HeroConsoleUnitStatusBarsUpdate_Func");
    TriggerEnable(libUIUI_gt_HeroConsoleUnitStatusBarsUpdate, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_HeroConsoleUnitStatusBarsUpdate, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Gate Timer Starts - HideHeroCastChannelBarFrameForObserver
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_GateTimerStartsHideHeroCastChannelBarFrameForObserver_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_castChannelBarParentFrame, PlayerGroupSingle(libCore_gv_oBSERVER_ObserverUIPlayer), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_GateTimerStartsHideHeroCastChannelBarFrameForObserver_Init () {
    libUIUI_gt_GateTimerStartsHideHeroCastChannelBarFrameForObserver = TriggerCreate("libUIUI_gt_GateTimerStartsHideHeroCastChannelBarFrameForObserver_Func");
    libGame_gf_GameOpenTimerStarted(libUIUI_gt_GateTimerStartsHideHeroCastChannelBarFrameForObserver);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Spawns - ShowHeroCastChannelBarFrame
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HeroSpawnsShowHeroCastChannelBarFrame_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_castChannelBarParentFrame, PlayerGroupSingle(libGame_gf_HeroSpawnPlayer()), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HeroSpawnsShowHeroCastChannelBarFrame_Init () {
    libUIUI_gt_HeroSpawnsShowHeroCastChannelBarFrame = TriggerCreate("libUIUI_gt_HeroSpawnsShowHeroCastChannelBarFrame_Func");
    libGame_gf_HeroSpawn(libUIUI_gt_HeroSpawnsShowHeroCastChannelBarFrame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Fullscreen Status Panel Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_FullscreenStatusPanelInitialize_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/FullscreenStatusPanel");
    libUIUI_gf_UISetDialogItemToSelectedOrObserved(DialogControlLastCreated());
    libUIUI_gv_fullscreenStatusPanel = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_FullscreenStatusPanelInitialize_Init () {
    libUIUI_gt_FullscreenStatusPanelInitialize = TriggerCreate("libUIUI_gt_FullscreenStatusPanelInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Specific Status Container Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_HeroSpecificStatusContainerInitialize_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/HeroSpecificFullUIModContainer");
    libUIUI_gf_UISetDialogItemToSelectedOrObserved(DialogControlLastCreated());
    libUIUI_gv_heroSpecificFullUIModContainer = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/HeroSpecificStatusContainer");
    libUIUI_gf_UISetDialogItemToSelectedOrObserved(DialogControlLastCreated());
    libUIUI_gv_heroSpecificStatusContainer = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_HeroSpecificStatusContainerInitialize_Init () {
    libUIUI_gt_HeroSpecificStatusContainerInitialize = TriggerCreate("libUIUI_gt_HeroSpecificStatusContainerInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Behavior State Activates - Invulnerable
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UnitBehaviorStateActivatesInvulnerable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_index;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= 10))) {
            return false;
        }

        if (!(((EventUnit() == libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit) || (EventUnit() == libGame_gv_players[UnitGetOwner(EventUnit())].lv_activeVehicle)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    lv_index = libUIUI_gf_UIUnitStatusFramesGetUnitIndex(lv_player, EventUnit());
    libUIUI_gf_UIUpdateUnitFrameToShowBehaviorState(lv_player, lv_index);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UnitBehaviorStateActivatesInvulnerable_Init () {
    libUIUI_gt_UnitBehaviorStateActivatesInvulnerable = TriggerCreate("libUIUI_gt_UnitBehaviorStateActivatesInvulnerable_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libUIUI_gt_UnitBehaviorStateActivatesInvulnerable, null, c_behaviorCategoryInvulnerable, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Behavior State Activates - Unstoppable
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UnitBehaviorStateActivatesUnstoppable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_index;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= 10))) {
            return false;
        }

        if (!(((EventUnit() == libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit) || (EventUnit() == libGame_gv_players[UnitGetOwner(EventUnit())].lv_activeVehicle)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    lv_index = libUIUI_gf_UIUnitStatusFramesGetUnitIndex(lv_player, EventUnit());
    libUIUI_gf_UIUpdateUnitFrameToShowBehaviorState(lv_player, lv_index);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UnitBehaviorStateActivatesUnstoppable_Init () {
    libUIUI_gt_UnitBehaviorStateActivatesUnstoppable = TriggerCreate("libUIUI_gt_UnitBehaviorStateActivatesUnstoppable_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libUIUI_gt_UnitBehaviorStateActivatesUnstoppable, null, c_behaviorCategoryUser1, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Behavior State Activates - Resistant
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UnitBehaviorStateActivatesResistant_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_index;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    lv_index = libUIUI_gf_UIUnitStatusFramesGetUnitIndex(lv_player, EventUnit());
    libUIUI_gv_uIHeroBehaviorStates[lv_player].lv_resistantActive[lv_index] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UnitBehaviorStateActivatesResistant_Init () {
    libUIUI_gt_UnitBehaviorStateActivatesResistant = TriggerCreate("libUIUI_gt_UnitBehaviorStateActivatesResistant_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libUIUI_gt_UnitBehaviorStateActivatesResistant, null, c_behaviorCategoryUser2, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Behavior State Activates - Vulnerable
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UnitBehaviorStateActivatesVulnerable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_index;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    lv_index = libUIUI_gf_UIUnitStatusFramesGetUnitIndex(lv_player, EventUnit());
    libUIUI_gv_uIHeroBehaviorStates[lv_player].lv_vulnerableActive[lv_index] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UnitBehaviorStateActivatesVulnerable_Init () {
    libUIUI_gt_UnitBehaviorStateActivatesVulnerable = TriggerCreate("libUIUI_gt_UnitBehaviorStateActivatesVulnerable_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libUIUI_gt_UnitBehaviorStateActivatesVulnerable, null, c_behaviorCategoryUser9, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Behavior State Activates - Dimmed
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UnitBehaviorStateActivatesDimmed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_index;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= 10))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "HeroGenericHasNoStatusBar") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    lv_index = libUIUI_gf_UIUnitStatusFramesGetUnitIndex(lv_player, EventUnit());
    libUIUI_gv_uIHeroBehaviorStates[lv_player].lv_dimmedActive[lv_index] = true;
    DialogControlSendAnimationEvent(libUIUI_gv_uIHeroStatusFrames[lv_player].lv_unitHealthBarDimmed[lv_index], PlayerGroupAll(), "DimmedOn");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UnitBehaviorStateActivatesDimmed_Init () {
    libUIUI_gt_UnitBehaviorStateActivatesDimmed = TriggerCreate("libUIUI_gt_UnitBehaviorStateActivatesDimmed_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libUIUI_gt_UnitBehaviorStateActivatesDimmed, null, c_behaviorCategoryUser6, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Behavior State Activates - Invincible
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UnitBehaviorStateActivatesInvincible_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_index;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= 10))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }

        if (!((UnitIsAlive(EventUnit()) == true))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "HeroGenericHasNoStatusBar") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    lv_index = libUIUI_gf_UIUnitStatusFramesGetUnitIndex(lv_player, EventUnit());
    libUIUI_gv_uIHeroBehaviorStates[lv_player].lv_invincibleActive[lv_index] = true;
    DialogControlSendAnimationEvent(libUIUI_gv_uIHeroStatusFrames[lv_player].lv_unitHealthBarInvincible[lv_index], PlayerGroupAll(), "InvincibleOn");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UnitBehaviorStateActivatesInvincible_Init () {
    libUIUI_gt_UnitBehaviorStateActivatesInvincible = TriggerCreate("libUIUI_gt_UnitBehaviorStateActivatesInvincible_Func");
    TriggerAddEventUnitBehaviorChange(libUIUI_gt_UnitBehaviorStateActivatesInvincible, null, "MedivhForceOfWill", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Behavior State Deactivates - Invulnerable
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UnitBehaviorStateDeactivatesInvulnerable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_index;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= 10))) {
            return false;
        }

        if (!(((EventUnit() == libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit) || (EventUnit() == libGame_gv_players[UnitGetOwner(EventUnit())].lv_activeVehicle)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    lv_index = libUIUI_gf_UIUnitStatusFramesGetUnitIndex(lv_player, EventUnit());
    libUIUI_gf_UIUpdateUnitFrameToShowBehaviorState(lv_player, lv_index);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UnitBehaviorStateDeactivatesInvulnerable_Init () {
    libUIUI_gt_UnitBehaviorStateDeactivatesInvulnerable = TriggerCreate("libUIUI_gt_UnitBehaviorStateDeactivatesInvulnerable_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libUIUI_gt_UnitBehaviorStateDeactivatesInvulnerable, null, c_behaviorCategoryInvulnerable, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Behavior State Deactivates - Unstoppable
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UnitBehaviorStateDeactivatesUnstoppable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_index;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= 10))) {
            return false;
        }

        if (!(((EventUnit() == libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit) || (EventUnit() == libGame_gv_players[UnitGetOwner(EventUnit())].lv_activeVehicle)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    lv_index = libUIUI_gf_UIUnitStatusFramesGetUnitIndex(lv_player, EventUnit());
    libUIUI_gf_UIUpdateUnitFrameToShowBehaviorState(lv_player, lv_index);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UnitBehaviorStateDeactivatesUnstoppable_Init () {
    libUIUI_gt_UnitBehaviorStateDeactivatesUnstoppable = TriggerCreate("libUIUI_gt_UnitBehaviorStateDeactivatesUnstoppable_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libUIUI_gt_UnitBehaviorStateDeactivatesUnstoppable, null, c_behaviorCategoryUser1, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Behavior State Deactivates - Resistant
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UnitBehaviorStateDeactivatesResistant_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_index;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    lv_index = libUIUI_gf_UIUnitStatusFramesGetUnitIndex(lv_player, EventUnit());
    libUIUI_gv_uIHeroBehaviorStates[lv_player].lv_resistantActive[lv_index] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UnitBehaviorStateDeactivatesResistant_Init () {
    libUIUI_gt_UnitBehaviorStateDeactivatesResistant = TriggerCreate("libUIUI_gt_UnitBehaviorStateDeactivatesResistant_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libUIUI_gt_UnitBehaviorStateDeactivatesResistant, null, c_behaviorCategoryUser2, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Behavior State Deactivates - Vulnerable
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UnitBehaviorStateDeactivatesVulnerable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_index;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= 10))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    lv_index = libUIUI_gf_UIUnitStatusFramesGetUnitIndex(lv_player, EventUnit());
    libUIUI_gv_uIHeroBehaviorStates[lv_player].lv_vulnerableActive[lv_index] = false;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UnitBehaviorStateDeactivatesVulnerable_Init () {
    libUIUI_gt_UnitBehaviorStateDeactivatesVulnerable = TriggerCreate("libUIUI_gt_UnitBehaviorStateDeactivatesVulnerable_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libUIUI_gt_UnitBehaviorStateDeactivatesVulnerable, null, c_behaviorCategoryUser9, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Behavior State Deactivates - Dimmed
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UnitBehaviorStateDeactivatesDimmed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_index;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= 10))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "HeroGenericHasNoStatusBar") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    lv_index = libUIUI_gf_UIUnitStatusFramesGetUnitIndex(lv_player, EventUnit());
    libUIUI_gv_uIHeroBehaviorStates[lv_player].lv_dimmedActive[lv_index] = false;
    DialogControlSendAnimationEvent(libUIUI_gv_uIHeroStatusFrames[lv_player].lv_unitHealthBarDimmed[lv_index], PlayerGroupAll(), "DimmedOff");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UnitBehaviorStateDeactivatesDimmed_Init () {
    libUIUI_gt_UnitBehaviorStateDeactivatesDimmed = TriggerCreate("libUIUI_gt_UnitBehaviorStateDeactivatesDimmed_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libUIUI_gt_UnitBehaviorStateDeactivatesDimmed, null, c_behaviorCategoryUser6, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Unit Behavior State Deactivates - Invincible
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UnitBehaviorStateDeactivatesInvincible_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_index;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= 10))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "HeroGenericHasNoStatusBar") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = UnitGetOwner(EventUnit());
    lv_index = libUIUI_gf_UIUnitStatusFramesGetUnitIndex(lv_player, EventUnit());
    libUIUI_gv_uIHeroBehaviorStates[lv_player].lv_invincibleActive[lv_index] = false;
    DialogControlSendAnimationEvent(libUIUI_gv_uIHeroStatusFrames[lv_player].lv_unitHealthBarInvincible[lv_index], PlayerGroupAll(), "InvincibleOff");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UnitBehaviorStateDeactivatesInvincible_Init () {
    libUIUI_gt_UnitBehaviorStateDeactivatesInvincible = TriggerCreate("libUIUI_gt_UnitBehaviorStateDeactivatesInvincible_Func");
    TriggerAddEventUnitBehaviorChange(libUIUI_gt_UnitBehaviorStateDeactivatesInvincible, null, "MedivhForceOfWill", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Hero Tracker Arrow
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeHeroTrackerArrow_Func (bool testConds, bool runActions) {
    int auto5828B1AD_ae;
    int auto5828B1AD_ai;

    // Variable Declarations
    int lv_index;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/OffscreenUnitContainer");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_uIHeroTrackerArrows.lv_mainPanel = DialogControlLastCreated();
    auto5828B1AD_ae = libUIUI_gv_uI_MaxHeroGroupStatusFrames;
    auto5828B1AD_ai = 1;
    lv_index = 1;
    for ( ; ( (auto5828B1AD_ai >= 0 && lv_index <= auto5828B1AD_ae) || (auto5828B1AD_ai <= 0 && lv_index >= auto5828B1AD_ae) ) ; lv_index += auto5828B1AD_ai ) {
        DialogControlHookup(libUIUI_gv_uIHeroTrackerArrows.lv_mainPanel, c_triggerControlTypeOffscreenUnit, "OffscreenUnitFrame" + IntToString(lv_index));
        libUIUI_gv_uIHeroTrackerArrows.lv_arrow[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libUIUI_gv_uIHeroTrackerArrows.lv_arrow[lv_index], c_triggerControlTypeImage, "HeroIcon");
        libUIUI_gv_uIHeroTrackerArrows.lv_portraitImage[lv_index] = DialogControlLastCreated();
        DialogControlHookup(libUIUI_gv_uIHeroTrackerArrows.lv_arrow[lv_index], c_triggerControlTypeImage, "HeroOverrideIcon");
        libUIUI_gv_uIHeroTrackerArrows.lv_portraitImageOverride[lv_index] = DialogControlLastCreated();
    }
    DialogControlHookup(libUIUI_gv_uIHeroTrackerArrows.lv_arrow[9], c_triggerControlTypeCutscene, "OffscreenUnitCutscene");
    libUIUI_gv_uIHeroTrackerArrows.lv_portraitCutscene[9] = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_uIHeroTrackerArrows.lv_arrow[10], c_triggerControlTypeCutscene, "OffscreenUnitCutscene");
    libUIUI_gv_uIHeroTrackerArrows.lv_portraitCutscene[10] = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeHeroTrackerArrow_Init () {
    libUIUI_gt_UIInitializeHeroTrackerArrow = TriggerCreate("libUIUI_gt_UIInitializeHeroTrackerArrow_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Input - Backslash Key Down
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_InputBackslashKeyDown_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libGame_gv_players[EventPlayer()].lv_playerStatus == libGame_ge_PlayerStatusStorm_Playing))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((DialogControlIsVisible(libUIUI_gv_uIDebugPanel.lv_mainDialog, EventPlayer()) == false)) {
        libUIUI_gf_UIDebugPanelShowHideDebugPanelForPlayer(true, EventPlayer());
    }
    else {
        libUIUI_gf_UIDebugPanelShowHideDebugPanelForPlayer(false, EventPlayer());
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_InputBackslashKeyDown_Init () {
    libUIUI_gt_InputBackslashKeyDown = TriggerCreate("libUIUI_gt_InputBackslashKeyDown_Func");
    TriggerAddEventKeyPressed(libUIUI_gt_InputBackslashKeyDown, c_playerAny, c_keyBackSlash, true, c_keyModifierStateIgnore, c_keyModifierStateIgnore, c_keyModifierStateIgnore);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Mechanics Panel Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_MapMechanicsPanelInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    int autoA85338A7_ae;
    int autoA85338A7_ai;
    int autoA70BE915_ae;
    int autoA70BE915_ai;
    int autoD9406E61_ae;
    int autoD9406E61_ai;
    int autoECCAEF98_ae;
    int autoECCAEF98_ai;
    int auto49841FC3_ae;
    int auto49841FC3_ai;
    int autoE09329D4_ae;
    int autoE09329D4_ai;

    // Variable Declarations
    int lv_itTeam;
    int lv_itCannonball;
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_enemyTeam;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/MapMechanicPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "RavenCourtPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "TributeSpawnFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TributeInfoLabel");
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnInfoLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TributeTimerLabel");
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTributeSpawnTimerLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "CurseFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CurseInfoLabel");
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseInfoLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CurseTimerLabel");
    libUIUI_gv_mapMechanicsPanel.lv_ravenCourtCurseTimerLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    autoA85338A7_ae = libCore_gv_bALMaxTeams;
    autoA85338A7_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (autoA85338A7_ai >= 0 && lv_itTeam <= autoA85338A7_ae) || (autoA85338A7_ai <= 0 && lv_itTeam >= autoA85338A7_ae) ) ; lv_itTeam += autoA85338A7_ai ) {
        lv_enemyTeam = (3 - lv_itTeam);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Team" + IntToString(lv_itTeam) + "TributeFrame");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeFrame[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "BackgroundBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "RavenIconBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "BackgroundRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "RavenIconRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TributeCounter");
        libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeCounterLabel[lv_itTeam] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
    }
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeCounterLabel[libGame_gv_teamOrderIndex_C], "Storm_MapMechanic_MechanicCounterLeft_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_ravenCourtTeamTributeCounterLabel[libGame_gv_teamChaosIndex_C], "Storm_MapMechanic_MechanicCounterRight_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "BlackheartsBayPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ChestSpawnFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayChestSpawnFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DoubloonModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonModeFrame = DialogControlLastCreated();
    autoA70BE915_ae = libCore_gv_bALMaxTeams;
    autoA70BE915_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (autoA70BE915_ai >= 0 && lv_itTeam <= autoA70BE915_ae) || (autoA70BE915_ai <= 0 && lv_itTeam >= autoA70BE915_ae) ) ; lv_itTeam += autoA70BE915_ai ) {
        lv_enemyTeam = (3 - lv_itTeam);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "DoubloonBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "DoubloonRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "DoubloonCounter");
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonCounterLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "CountValue");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayHeldDoubloonCounterLabel[lv_itTeam] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonCounterLabel[libGame_gv_teamOrderIndex_C], "Storm_MapMechanic_MechanicCounterLeft_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayDoubloonCounterLabel[libGame_gv_teamChaosIndex_C], "Storm_MapMechanic_MechanicCounterRight_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayHeldDoubloonCounterLabel[libGame_gv_teamOrderIndex_C], "Storm_ObserverMMCountLabel_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayHeldDoubloonCounterLabel[libGame_gv_teamChaosIndex_C], "Storm_ObserverMMCountLabel_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "CannonModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "CannonballsLeftLabel");
    libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonRemainingCannonballsLabel = DialogControlLastCreated();
    autoD9406E61_ae = libUIUI_gv_mapMechanicsBlackheartsBayCannonballCount_C;
    autoD9406E61_ai = 1;
    lv_itCannonball = 1;
    for ( ; ( (autoD9406E61_ai >= 0 && lv_itCannonball <= autoD9406E61_ae) || (autoD9406E61_ai <= 0 && lv_itCannonball >= autoD9406E61_ae) ) ; lv_itCannonball += autoD9406E61_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "CannonShotFrame" + IntToString(lv_itCannonball) + "/ActiveCannonBall");
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonCannonballImages[lv_itCannonball] = DialogControlLastCreated();
    }
    autoECCAEF98_ae = libCore_gv_bALMaxTeams;
    autoECCAEF98_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (autoECCAEF98_ai >= 0 && lv_itTeam <= autoECCAEF98_ae) || (autoECCAEF98_ai <= 0 && lv_itTeam >= autoECCAEF98_ae) ) ; lv_itTeam += autoECCAEF98_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "ShotCounter");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonShotCounterLabel[lv_itTeam] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonShotCounterLabel[libGame_gv_teamOrderIndex_C], "Storm_MapMechanic_MechanicCounterSmallLeft_Red", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_mapMechanicsPanel.lv_blackheartsBayCannonShotCounterLabel[libGame_gv_teamChaosIndex_C], "Storm_MapMechanic_MechanicCounterSmallLeft_Blue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    lv_currentPanelLayer -= 1;
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HauntedMinesPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "SkullModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "SkullsRemainingLabel");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeRemainingSkullsLabel = DialogControlLastCreated();
    auto49841FC3_ae = libCore_gv_bALMaxTeams;
    auto49841FC3_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (auto49841FC3_ai >= 0 && lv_itTeam <= auto49841FC3_ae) || (auto49841FC3_ai <= 0 && lv_itTeam >= auto49841FC3_ae) ) ; lv_itTeam += auto49841FC3_ai ) {
        lv_enemyTeam = (3 - lv_itTeam);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_itTeam) + "SkullCounter");
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_MapMechanic_MechanicCounterLeft_Blue", libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_MapMechanic_MechanicCounterLeft_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        }
        else {
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_MapMechanic_MechanicCounterRight_Blue", libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers);
            libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_MapMechanic_MechanicCounterRight_Red", libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers);
        }
        libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesSkullModeSkullCounterLabel[lv_itTeam] = DialogControlLastCreated();
    }
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "MineTimerModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "MineOpenLabel");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineOpenLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "MineOpenTimer");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesMineTimerLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "GolemModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesGolemModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "AllyGolemHealthBar");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemHealthUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "EnemyGolemHealthBar");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemHealthUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AllySkullCounter");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesAllyGolemModeSkullCounterLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemySkullCounter");
    libUIUI_gv_mapMechanicsPanel.lv_hauntedMinesEnemyGolemModeSkullCounterLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "AllyGolemLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_57C6D82D"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "EnemyGolemLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_114C2761"), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    lv_currentPanelLayer -= 1;
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DragonShirePanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_dragonShirePanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ShrineTimerModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "ShrineActivateTimer");
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineTimerLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ShrineModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireShrineModeFrame = DialogControlLastCreated();
    autoE09329D4_ae = libCore_gv_bALMaxTeams;
    autoE09329D4_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (autoE09329D4_ai >= 0 && lv_itTeam <= autoE09329D4_ae) || (autoE09329D4_ai <= 0 && lv_itTeam >= autoE09329D4_ae) ) ; lv_itTeam += autoE09329D4_ai ) {
        lv_enemyTeam = (3 - lv_itTeam);
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundBlue");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamChaosIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "BackgroundRed");
        DialogControlSetVisible(DialogControlLastCreated(), libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, false);
        if ((lv_itTeam == libGame_gv_teamOrderIndex_C)) {
            DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "MoonShrineDisabled");
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineDisabledImage[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "StarShrineDisabled");
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineDisabledImage[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "MoonShrineEnabled");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "StarShrineEnabled");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[lv_itTeam] = DialogControlLastCreated();
    }
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineDisabledImage[libGame_gv_teamOrderIndex_C], "@UI/HUD_MapMechanic_DragonShire_MoonDisabledRed", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineDisabledImage[libGame_gv_teamChaosIndex_C], "@UI/HUD_MapMechanic_DragonShire_MoonDisabledBlue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineDisabledImage[libGame_gv_teamOrderIndex_C], "@UI/HUD_MapMechanic_DragonShire_StarDisabledRed", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineDisabledImage[libGame_gv_teamChaosIndex_C], "@UI/HUD_MapMechanic_DragonShire_StarDisabledBlue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[libGame_gv_teamOrderIndex_C], "@UI/HUD_MapMechanic_DragonShire_MoonEnabledRed", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireMoonShrineEnabledImage[libGame_gv_teamChaosIndex_C], "@UI/HUD_MapMechanic_DragonShire_MoonEnabledBlue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[libGame_gv_teamOrderIndex_C], "@UI/HUD_MapMechanic_DragonShire_StarEnabledRed", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemImage(libUIUI_gv_mapMechanicsPanel.lv_dragonShireStarShrineEnabledImage[libGame_gv_teamChaosIndex_C], "@UI/HUD_MapMechanic_DragonShire_StarEnabledBlue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    lv_currentPanelLayer -= 1;
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "DragonModeFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonModeFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DragonInfoLabel");
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonInfoLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DragonTimer");
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonTimerLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "DragonHealthBar");
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthUnitStatus = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DragonHealthBar/HealthLabel/StatusLabel");
    libUIUI_gv_mapMechanicsPanel.lv_dragonShireDragonHealthLabel = DialogControlLastCreated();
    lv_currentPanelLayer -= 1;
    lv_currentPanelLayer -= 1;
    libUIUI_gf_MapMechanicsGardenOfTerrorInit(lv_panels[lv_currentPanelLayer]);
    TriggerEnable(libUIUI_gt_MapMechanicsPanelUpdate, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_MapMechanicsPanelInitialize_Init () {
    libUIUI_gt_MapMechanicsPanelInitialize = TriggerCreate("libUIUI_gt_MapMechanicsPanelInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Mechanics Panel Update
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_MapMechanicsPanelUpdate_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_MapMechanicsPanelUpdate_Init () {
    libUIUI_gt_MapMechanicsPanelUpdate = TriggerCreate("libUIUI_gt_MapMechanicsPanelUpdate_Func");
    TriggerEnable(libUIUI_gt_MapMechanicsPanelUpdate, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_MapMechanicsPanelUpdate, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Mechanic Help Panel Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_MapMechanicHelpPanelInitialize_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/MapMechanicHelpPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_mapMechanicHelpPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlHookup(libUIUI_gv_mapMechanicHelpPanel.lv_mainPanel, c_triggerControlTypeLabel, "HelpText");
    libUIUI_gv_mapMechanicHelpPanel.lv_helpText = DialogControlLastCreated();
    DialogControlHookup(libUIUI_gv_mapMechanicHelpPanel.lv_mainPanel, c_triggerControlTypeButton, "OKButton");
    libUIUI_gv_mapMechanicHelpPanel.lv_closeButton = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_MapMechanicHelpPanelInitialize_Init () {
    libUIUI_gt_MapMechanicHelpPanelInitialize = TriggerCreate("libUIUI_gt_MapMechanicHelpPanelInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map Mechanic Help Panel OK Button Clicked
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_MapMechanicHelpPanelOKButtonClicked_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((EventDialogControl() == libUIUI_gv_mapMechanicHelpPanel.lv_closeButton))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_MapMechanicHelpPanelShowHide(false, libCore_gv_playerGroupFromPlayer[EventPlayer()]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_MapMechanicHelpPanelOKButtonClicked_Init () {
    libUIUI_gt_MapMechanicHelpPanelOKButtonClicked = TriggerCreate("libUIUI_gt_MapMechanicHelpPanelOKButtonClicked_Func");
    TriggerEnable(libUIUI_gt_MapMechanicHelpPanelOKButtonClicked, false);
    TriggerAddEventDialogControl(libUIUI_gt_MapMechanicHelpPanelOKButtonClicked, c_playerAny, c_invalidDialogControlId, c_triggerControlEventTypeClick);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Notification Display Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_NotificationDisplayInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/GameNotificationsPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_notificationDisplay.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "KillCounterTemplate/TimerCountdown");
    libNtve_gf_SetDialogItemAnimationDuration(DialogControlLastCreated(), libGame_gv_heroDeathMultikillTimeoutDuration, PlayerGroupAll());
    libUIUI_gv_notificationDisplay.lv_multikillTimerCountdownImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "KillCounterTemplate/KillCountLabel");
    libUIUI_gv_notificationDisplay.lv_multikillTimerTitleLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "KillCounterTemplate/KillCountAmount");
    libUIUI_gv_notificationDisplay.lv_multikillTimerNumberLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "StandardNotificationTemplate/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_standardNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "StandardNotificationTemplate/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_standardNotificationSubLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "StandardEnemyNotificationTemplate/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_enemyNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "StandardEnemyNotificationTemplate/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_enemyNotificationSubLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TutorialNotificationTemplate/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_tutorialNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TutorialNotificationTemplate/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_tutorialNotificationSubLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier1/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_doubleKillNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier1/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_doubleKillNotificationSubLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier2/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_tripleKillNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier2/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_tripleKillNotificationSubLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier3/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_quadKillNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier3/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_quadKillNotificationSubLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier4/NotificationTitle");
    libUIUI_gv_notificationDisplay.lv_MegaKillNotificationTitle = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TimedKillNotificationTemplate/TimedKillNotification_Tier4/NotificationLabel");
    libUIUI_gv_notificationDisplay.lv_MegaKillNotificationSubLabel = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_NotificationDisplayInitialize_Init () {
    libUIUI_gt_NotificationDisplayInitialize = TriggerCreate("libUIUI_gt_NotificationDisplayInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG Notification Display Anim Cheat
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_DEBUGNotificationDisplayAnimCheat_Func (bool testConds, bool runActions) {
    // Variable Declarations
    string lv_animName;

    // Variable Initialization
    lv_animName = "";

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_animName = StringWord(EventChatMessage(false), 2);
    DialogControlSendAnimationEvent(libUIUI_gv_notificationDisplay.lv_mainPanel, PlayerGroupAll(), lv_animName);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_DEBUGNotificationDisplayAnimCheat_Init () {
    libUIUI_gt_DEBUGNotificationDisplayAnimCheat = TriggerCreate("libUIUI_gt_DEBUGNotificationDisplayAnimCheat_Func");
    TriggerAddEventChatMessage(libUIUI_gt_DEBUGNotificationDisplayAnimCheat, c_playerAny, "notification", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Observer UI
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeObserverUI_Func (bool testConds, bool runActions) {
    int init_i;

    int autoBAB376C6_ae;
    int autoBAB376C6_ai;
    int autoBCB352F9_ae;
    int autoBCB352F9_ai;
    int auto54143569_ae;
    int auto54143569_ai;

    // Variable Declarations
    int lv_team;
    int lv_hero;
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_leaderboardIndex;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/HeroSpecificCommandCardPanel");
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ObserverHeroOverviewPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uIObserverUI.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypeButton, "UIContainer/ConsoleUIContainer/MinimapPanel/PingButton");
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlHookupStandard(c_triggerControlTypeLabel, "UIContainer/FullscreenUpperContainer/ChatHelpLabel");
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ObserverHeroOverviewPanel/BottomPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetEnabled(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/ObserverToggleControls");
    DialogControlSetEnabled(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetEnabled(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    autoBAB376C6_ae = libCore_gv_bALMaxTeams;
    autoBAB376C6_ai = 1;
    lv_team = 1;
    for ( ; ( (autoBAB376C6_ai >= 0 && lv_team <= autoBAB376C6_ae) || (autoBAB376C6_ai <= 0 && lv_team >= autoBAB376C6_ae) ) ; lv_team += autoBAB376C6_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "Team" + IntToString(lv_team) + "HeroOverview");
        DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TownsRemainingValueLabel");
        libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
        DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
        libUIUI_gv_uIObserverUI.lv_teamTownsLabel[lv_team] = DialogControlLastCreated();
        autoBCB352F9_ae = libCore_gv_bALMaxPlayersOnATeam;
        autoBCB352F9_ai = 1;
        lv_hero = 1;
        for ( ; ( (autoBCB352F9_ai >= 0 && lv_hero <= autoBCB352F9_ae) || (autoBCB352F9_ai <= 0 && lv_hero >= autoBCB352F9_ae) ) ; lv_hero += autoBCB352F9_ai ) {
            lv_leaderboardIndex = ((lv_team - 1) * libCore_gv_bALMaxPlayersOnATeam + lv_hero);
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroOverview" + IntToString(lv_hero));
            DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            libUIUI_gv_uIObserverUI.lv_heroPanels[lv_leaderboardIndex] = DialogControlLastCreated();
            lv_currentPanelLayer += 1;
            lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroPortraitImage");
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            libUIUI_gv_uIObserverUI.lv_heroPortraitImages[lv_leaderboardIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitTarget, "TargetHeroUnitFrame");
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            libUIUI_gv_uIObserverUI.lv_heroTargetFrames[lv_leaderboardIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "HeroDeathTimeLabel");
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            libUIUI_gv_uIObserverUI.lv_heroDeathTimeLabels[lv_leaderboardIndex] = DialogControlLastCreated();
            DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroStatus");
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            libUIUI_gv_uIObserverUI.lv_heroStatusBars[lv_leaderboardIndex] = DialogControlLastCreated();
            DialogControlHookup(libUIUI_gv_uIObserverUI.lv_mainPanel, c_triggerControlTypePanel, "TalentsOverview/TalentOverview/HeroLeaderPanelContainer/TabControl/PlayerFrame" + IntToString(lv_leaderboardIndex - 1) + "/StatsContainerFrame");
            DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
            DialogControlFadeTransparency(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], 0.01, 100.0);
            libUIUI_gv_uIObserverUI.lv_heroTopTalents[lv_leaderboardIndex] = DialogControlLastCreated();
            lv_currentPanelLayer -= 1;
        }
        lv_currentPanelLayer -= 1;
    }
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "ObserverTopPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libUIUI_gv_uIObserverUI.lv_topPanel = DialogControlLastCreated();
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "GameTimerLabel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libUIUI_gv_uIObserverUI.lv_observerTimer = DialogControlLastCreated();
    auto54143569_ae = libCore_gv_bALMaxTeams;
    auto54143569_ai = 1;
    lv_team = 1;
    for ( ; ( (auto54143569_ai >= 0 && lv_team <= auto54143569_ae) || (auto54143569_ai <= 0 && lv_team >= auto54143569_ae) ) ; lv_team += auto54143569_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "Team" + IntToString(lv_team) + "LevelLabel");
        DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
        libUIUI_gv_uIObserverUI.lv_teamLevelLabel[lv_team] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "Team" + IntToString(lv_team) + "CoreUnitStatus");
        DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
        if ((libGame_gv_teams[lv_team].lv_core != null)) {
            libNtve_gf_SetDialogItemUnit(DialogControlLastCreated(), libGame_gv_teams[lv_team].lv_core, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
        }

        libUIUI_gv_uIObserverUI.lv_coreHealthUnitStatusFrames[lv_team] = DialogControlLastCreated();
    }
    TriggerEnable(libUIUI_gt_UIObserverUIUpdate, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeObserverUI_Init () {
    libUIUI_gt_UIInitializeObserverUI = TriggerCreate("libUIUI_gt_UIInitializeObserverUI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Observer UI - Hero Dies
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIObserverUIHeroDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rosterSlot;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rosterSlot = libGame_gv_players[libGame_gf_HeroKilledPlayer()].lv_rosterSlot;
    libNtve_gf_SetDialogItemColor(libUIUI_gv_uIObserverUI.lv_heroPortraitImages[lv_rosterSlot], Color(29.41, 29.41, 29.41), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    libNtve_gf_SetDialogItemText(libUIUI_gv_uIObserverUI.lv_heroDeathTimeLabels[lv_rosterSlot], StringToText(""), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    DialogControlSetVisible(libUIUI_gv_uIObserverUI.lv_heroDeathTimeLabels[lv_rosterSlot], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    DialogControlSetVisible(libUIUI_gv_uIObserverUI.lv_heroStatusBars[lv_rosterSlot], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIObserverUIHeroDies_Init () {
    libUIUI_gt_UIObserverUIHeroDies = TriggerCreate("libUIUI_gt_UIObserverUIHeroDies_Func");
    libGame_gf_HeroKilled(libUIUI_gt_UIObserverUIHeroDies);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Observer UI - Hero Respawn
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIObserverUIHeroRespawn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_rosterSlot;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gf_HeroRespawnPlayer() <= libCore_gv_bALMaxEnginePlayerCount))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_rosterSlot = libGame_gv_players[libGame_gf_HeroRespawnPlayer()].lv_rosterSlot;
    libNtve_gf_SetDialogItemColor(libUIUI_gv_uIObserverUI.lv_heroPortraitImages[lv_rosterSlot], Color(100.00, 100.00, 100.00), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    DialogControlSetVisible(libUIUI_gv_uIObserverUI.lv_heroDeathTimeLabels[lv_rosterSlot], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlSetVisible(libUIUI_gv_uIObserverUI.lv_heroStatusBars[lv_rosterSlot], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIObserverUIHeroRespawn_Init () {
    libUIUI_gt_UIObserverUIHeroRespawn = TriggerCreate("libUIUI_gt_UIObserverUIHeroRespawn_Func");
    libGame_gf_HeroRespawn(libUIUI_gt_UIObserverUIHeroRespawn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Observer UI - Update
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIObserverUIUpdate_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_UIObserverUIUpdateForPlayer(libCore_gv_oBSERVER_ObserverUIPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIObserverUIUpdate_Init () {
    libUIUI_gt_UIObserverUIUpdate = TriggerCreate("libUIUI_gt_UIObserverUIUpdate_Func");
    TriggerEnable(libUIUI_gt_UIObserverUIUpdate, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UIObserverUIUpdate, 0.125, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Count Reset Timer Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PingCountResetTimerExpires_Func (bool testConds, bool runActions) {
    int autoABC6A461_ae;
    int autoABC6A461_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoABC6A461_ae = libCore_gv_bALMaxPlayers;
    autoABC6A461_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoABC6A461_ai >= 0 && lv_itPlayer <= autoABC6A461_ae) || (autoABC6A461_ai <= 0 && lv_itPlayer >= autoABC6A461_ae) ) ; lv_itPlayer += autoABC6A461_ai ) {
        if ((EventTimer() == libUIUI_gv_pingCountResetTimer[lv_itPlayer])) {
            libUIUI_gv_pingCount[lv_itPlayer] = 0;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PingCountResetTimerExpires_Init () {
    libUIUI_gt_PingCountResetTimerExpires = TriggerCreate("libUIUI_gt_PingCountResetTimerExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTimer[1]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTimer[2]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTimer[3]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTimer[4]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTimer[5]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTimer[6]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTimer[7]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTimer[8]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTimer[9]);
    TriggerAddEventTimer(libUIUI_gt_PingCountResetTimerExpires, libUIUI_gv_pingCountResetTimer[10]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping On My Way Ping Path Display Timer Expires
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PingOnMyWayPingPathDisplayTimerExpires_Func (bool testConds, bool runActions) {
    int autoB660A991_ae;
    int autoB660A991_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB660A991_ae = libCore_gv_bALMaxPlayers;
    autoB660A991_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoB660A991_ai >= 0 && lv_itPlayer <= autoB660A991_ae) || (autoB660A991_ai <= 0 && lv_itPlayer >= autoB660A991_ae) ) ; lv_itPlayer += autoB660A991_ai ) {
        if ((EventTimer() == libUIUI_gv_onMyWayPingPathDisplayTimer[lv_itPlayer])) {
            PathDestroy(libGame_gv_players[lv_itPlayer].lv_onMyWayPathDisplay);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PingOnMyWayPingPathDisplayTimerExpires_Init () {
    libUIUI_gt_PingOnMyWayPingPathDisplayTimerExpires = TriggerCreate("libUIUI_gt_PingOnMyWayPingPathDisplayTimerExpires_Func");
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPingPathDisplayTimerExpires, libUIUI_gv_onMyWayPingPathDisplayTimer[1]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPingPathDisplayTimerExpires, libUIUI_gv_onMyWayPingPathDisplayTimer[2]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPingPathDisplayTimerExpires, libUIUI_gv_onMyWayPingPathDisplayTimer[3]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPingPathDisplayTimerExpires, libUIUI_gv_onMyWayPingPathDisplayTimer[4]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPingPathDisplayTimerExpires, libUIUI_gv_onMyWayPingPathDisplayTimer[5]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPingPathDisplayTimerExpires, libUIUI_gv_onMyWayPingPathDisplayTimer[6]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPingPathDisplayTimerExpires, libUIUI_gv_onMyWayPingPathDisplayTimer[7]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPingPathDisplayTimerExpires, libUIUI_gv_onMyWayPingPathDisplayTimer[8]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPingPathDisplayTimerExpires, libUIUI_gv_onMyWayPingPathDisplayTimer[9]);
    TriggerAddEventTimer(libUIUI_gt_PingOnMyWayPingPathDisplayTimerExpires, libUIUI_gv_onMyWayPingPathDisplayTimer[10]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Listen For Player Ping
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PingListenForPlayerPing_Func (bool testConds, bool runActions) {
    int autoFCAAB407_val;

    // Variable Declarations
    int lv_pingType;
    unit lv_targetUnit;
    int lv_pingingPlayer;
    unit lv_pingingPlayerHero;
    playergroup lv_pingPlayerGroup;
    string lv_pingModel;
    soundlink lv_pingSound;

    // Variable Initialization
    lv_pingPlayerGroup = PlayerGroupEmpty();
    lv_pingModel = "StormGeneralPing";
    lv_pingSound = SoundLink("UI_Game_Ping_General", -1);

    // Actions
    if (!runActions) {
        return true;
    }

    lv_pingType = EventPingOption();
    if ((!(((lv_pingType == c_pingTypeAssistMe) || (lv_pingType == c_pingTypeDanger) || (lv_pingType == c_pingTypeDefend) || (lv_pingType == c_pingTypeNormal) || (lv_pingType == c_pingTypeOnMyWay) || (lv_pingType == c_pingTypeRetreat))))) {
        return true;
    }

    lv_pingingPlayer = EventPlayer();
    if ((TimerGetRemaining(libUIUI_gv_pingInputSuppressionTimer[lv_pingingPlayer]) > 0.0)) {
        return true;
    }

    if ((TimerGetRemaining(libUIUI_gv_pingLockoutTimer[lv_pingingPlayer]) > 0.0)) {
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[lv_pingingPlayer], c_messageAreaChat, StringExternal("Param/Value/lib_UIUI_639B6AEA"));
        return true;
    }

    lv_pingingPlayerHero = libGame_gv_players[lv_pingingPlayer].lv_heroUnit;
    if ((lv_pingingPlayerHero == null)) {
        return true;
    }

    lv_targetUnit = EventPingUnit();
    lv_pingPlayerGroup = PlayerGroupMath(libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_pingingPlayer)].lv_teamPlayerGroup, PlayerGroupMuting(libNtve_ge_MuteType_Pings, lv_pingingPlayer, true), libNtve_ge_PlayerGroupOperation_Subtract);
    if ((UnitIsValid(lv_targetUnit) == false)) {
        lv_targetUnit = libUIUI_gf_PingGetSpecialPingTargetInRangeOfPoint(EventPingPoint(), EventPingedMinimap(), lv_pingingPlayer);
    }

    if ((UnitTypeTestAttribute(UnitGetType(lv_targetUnit), c_unitAttributeSummoned) == true) && (UnitHasBehavior2(lv_targetUnit, "HeroicSummon") == false)) {
        lv_targetUnit = null;
    }

    if ((UnitHasBehavior2(lv_targetUnit, "UnitCannotBePinged") == true)) {
        lv_targetUnit = null;
    }

    libUIUI_gf_PingIncrementPingCountAndManageTimersForPlayer(lv_pingingPlayer);
    autoFCAAB407_val = lv_pingType;
    if (autoFCAAB407_val == c_pingTypeAssistMe) {
        libUIUI_gf_PingPlayerUsesAssistMePing(lv_pingingPlayer, lv_targetUnit, EventPingPoint());
    }
    else if (autoFCAAB407_val == c_pingTypeDanger) {
        libUIUI_gf_PingPlayerUsesDangerPing(lv_pingingPlayer, EventPingPoint(), lv_targetUnit);
    }
    else if (autoFCAAB407_val == c_pingTypeOnMyWay) {
        libUIUI_gf_PingPlayerUsesOnMyWayPing(lv_targetUnit, lv_pingingPlayer, EventPingPoint());
    }
    else if (autoFCAAB407_val == c_pingTypeDefend) {
        libUIUI_gf_PingPlayerUsesDefendPing(lv_targetUnit, lv_pingingPlayer, EventPingPoint());
    }
    else if (autoFCAAB407_val == c_pingTypeRetreat) {
        libUIUI_gf_PingPlayerUsesRetreatPing(lv_pingingPlayer, EventPingPoint());
    }
    else if (autoFCAAB407_val == c_pingTypeNormal) {
        if ((UnitIsValid(lv_targetUnit) == true)) {
            libUIUI_gf_PingPlayerPingsUnit(lv_pingingPlayer, lv_targetUnit, lv_pingPlayerGroup);
        }
        else {
            libNtve_gf_CreatePingFacingAngleWithType(lv_pingPlayerGroup, lv_pingModel, EventPingPoint(), Color(100.00, 100.00, 100.00), 3.0, 270.0, -1, lv_pingingPlayer);
            SoundPlayForPlayer(lv_pingSound, lv_pingingPlayer, lv_pingPlayerGroup, 100.0, 0.0);
        }
    }
    else {
    }
    libUIUI_gf_PingAIResponse(lv_pingingPlayer, lv_targetUnit, lv_pingPlayerGroup);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PingListenForPlayerPing_Init () {
    libUIUI_gt_PingListenForPlayerPing = TriggerCreate("libUIUI_gt_PingListenForPlayerPing_Func");
    TriggerAddEventPing(libUIUI_gt_PingListenForPlayerPing, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Base Mod Ping Data
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_InitializeBaseModPingData_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_PingCreateNewPingTarget("XelNagaWatchTower", false, StringExternal("Param/Value/lib_UIUI_BB9FB19A"), StringExternal("Param/Value/lib_UIUI_8B771608"), StringExternal("Param/Value/lib_UIUI_648E981A"), SoundLink("UI_Game_Ping_General", -1), SoundLink("UI_Game_Ping_General", -1));
    libUIUI_gf_PingSetAllyEnemyTargetHeroVOForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libCore_ge_HeroVOEvents_PingDefendWatchTower, libCore_ge_HeroVOEvents_PingAttackWatchTower);
    libUIUI_gf_PingSetCustomResponseTriggerForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libUIUI_gt_PingCallbackPlayerPingsWatchTower);
    libUIUI_gf_PingCreateNewPingTarget("RegenGlobeGenerator", false, null, StringExternal("Param/Value/lib_UIUI_0418FE6D"), StringExternal("Param/Value/lib_UIUI_DBC3763E"), SoundLink("UI_Game_Ping_Help", -1), SoundLink("UI_Game_Ping_Help", -1));
    libUIUI_gf_PingCreateNewPingTarget("MercDefenderSiegeGiant", false, StringExternal("Param/Value/lib_UIUI_F3AD68B5"), StringExternal("Param/Value/lib_UIUI_34C3922F"), StringExternal("Param/Value/lib_UIUI_E92A724E"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetHumanAISourceHeroVOForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libCore_ge_HeroVOEvents_PingAttackMercCamp, libCore_ge_HeroVOEvents_AIMercCapture);
    libUIUI_gf_PingSetCustomResponseTriggerForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libUIUI_gt_PingCallbackPlayerPingsMercCamp);
    libUIUI_gf_PingCreateNewPingTarget("MercLanerSiegeGiant", false, null, StringExternal("Param/Value/lib_UIUI_3CBD35F4"), StringExternal("Param/Value/lib_UIUI_AC742509"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetAllyEnemyTargetHeroVOForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libCore_ge_HeroVOEvents_PingAttackHere, libCore_ge_HeroVOEvents_PingAttackHere);
    libUIUI_gf_PingSetCustomResponseTriggerForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libUIUI_gt_PingCallbackPlayerPingsLanerMercs);
    libUIUI_gf_PingCreateNewPingTarget("MercDefenderMeleeKnight", false, StringExternal("Param/Value/lib_UIUI_E3D74DB2"), StringExternal("Param/Value/lib_UIUI_18B59E22"), StringExternal("Param/Value/lib_UIUI_BC88A1F6"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetHumanAISourceHeroVOForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libCore_ge_HeroVOEvents_PingAttackMercCamp, libCore_ge_HeroVOEvents_AIMercCapture);
    libUIUI_gf_PingSetCustomResponseTriggerForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libUIUI_gt_PingCallbackPlayerPingsMercCamp);
    libUIUI_gf_PingCreateNewPingTarget("MercDefenderRangedMage", false, StringExternal("Param/Value/lib_UIUI_1B9EAA4B"), StringExternal("Param/Value/lib_UIUI_7F73BE4B"), StringExternal("Param/Value/lib_UIUI_5EB33761"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetHumanAISourceHeroVOForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libCore_ge_HeroVOEvents_PingAttackMercCamp, libCore_ge_HeroVOEvents_AIMercCapture);
    libUIUI_gf_PingSetCustomResponseTriggerForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libUIUI_gt_PingCallbackPlayerPingsMercCamp);
    libUIUI_gf_PingCreateNewPingTarget("MercLanerMeleeKnight", false, null, StringExternal("Param/Value/lib_UIUI_16B3C4A5"), StringExternal("Param/Value/lib_UIUI_F54FF2F1"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetAllyEnemyTargetHeroVOForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libCore_ge_HeroVOEvents_PingAttackHere, libCore_ge_HeroVOEvents_PingAttackHere);
    libUIUI_gf_PingSetCustomResponseTriggerForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libUIUI_gt_PingCallbackPlayerPingsLanerMercs);
    libUIUI_gf_PingCreateNewPingTarget("MercLanerRangedMage", false, null, StringExternal("Param/Value/lib_UIUI_D7DB6851"), StringExternal("Param/Value/lib_UIUI_092DF955"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetAllyEnemyTargetHeroVOForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libCore_ge_HeroVOEvents_PingAttackHere, libCore_ge_HeroVOEvents_PingAttackHere);
    libUIUI_gf_PingSetCustomResponseTriggerForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libUIUI_gt_PingCallbackPlayerPingsLanerMercs);
    libUIUI_gf_PingCreateNewPingTarget("JungleGraveGolemDefender", false, StringExternal("Param/Value/lib_UIUI_E8CBF858"), StringExternal("Param/Value/lib_UIUI_33B91B76"), StringExternal("Param/Value/lib_UIUI_69553610"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetHumanAISourceHeroVOForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libCore_ge_HeroVOEvents_PingAttackMercCamp, libCore_ge_HeroVOEvents_AIMercCapture);
    libUIUI_gf_PingSetCustomResponseTriggerForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libUIUI_gt_PingCallbackPlayerPingsMercCamp);
    libUIUI_gf_PingCreateNewPingTarget("JungleGraveGolemLaner", false, null, StringExternal("Param/Value/lib_UIUI_DE6A12AF"), StringExternal("Param/Value/lib_UIUI_8B9827B8"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetAllyEnemyTargetHeroVOForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libCore_ge_HeroVOEvents_PingAttackHere, libCore_ge_HeroVOEvents_PingAttackHere);
    libUIUI_gf_PingSetCustomResponseTriggerForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libUIUI_gt_PingCallbackPlayerPingsLanerBossMinion);
    libUIUI_gf_PingCreateNewPingTarget("RavenLordTribute", false, null, StringExternal("Param/Value/lib_UIUI_5953402D"), StringExternal("Param/Value/lib_UIUI_8AE29806"), SoundLink("UI_Game_Ping_General", -1), SoundLink("UI_Game_Ping_General", -1));
    libUIUI_gf_PingSetCustomResponseTriggerForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libUIUI_gt_PingCallbackPlayerPingsTribute);
    libUIUI_gf_PingCreateNewPingTarget("RavenLordTributeWarning", false, null, StringExternal("Param/Value/lib_UIUI_2ED174B4"), StringExternal("Param/Value/lib_UIUI_BE09D2A0"), SoundLink("UI_Game_Ping_General", -1), SoundLink("UI_Game_Ping_General", -1));
    libUIUI_gf_PingSetCustomResponseTriggerForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libUIUI_gt_PingCallbackPlayerPingsTribute);
    libUIUI_gf_PingCreateNewPingTarget("DragonShireShrineMoon", false, null, StringExternal("Param/Value/lib_UIUI_1040DC1F"), StringExternal("Param/Value/lib_UIUI_C436C94B"), SoundLink("UI_Game_Ping_Defend", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetCustomResponseTriggerForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libUIUI_gt_PingCallbackPlayerPingsDragonShrine);
    libUIUI_gf_PingCreateNewPingTarget("DragonShireShrineSun", false, null, StringExternal("Param/Value/lib_UIUI_1EA7E487"), StringExternal("Param/Value/lib_UIUI_2CD1B470"), SoundLink("UI_Game_Ping_Defend", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetCustomResponseTriggerForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libUIUI_gt_PingCallbackPlayerPingsDragonShrine);
    libUIUI_gf_PingCreateNewPingTarget("VehicleDragon", false, null, StringExternal("Param/Value/lib_UIUI_07F511D0"), StringExternal("Param/Value/lib_UIUI_9F44136E"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetCustomResponseTriggerForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libUIUI_gt_PingCallbackPlayerPingsDragonStatue);
    libUIUI_gf_PingCreateNewPingTarget("VehicleDragon", true, null, StringExternal("Param/Value/lib_UIUI_DD86FABD"), StringExternal("Param/Value/lib_UIUI_D6F214F6"), SoundLink("UI_Game_Ping_Defend", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetAllyEnemyTargetHeroVOForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libCore_ge_HeroVOEvents_PingAssistHero, libCore_ge_HeroVOEvents_PingKillHero);
    libUIUI_gf_PingSetCustomResponseTriggerForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libUIUI_gt_PingCallbackPlayerPingsLanerBossControlled);
    libUIUI_gf_PingCreateNewPingTarget("HoleLadderDown", false, null, StringExternal("Param/Value/lib_UIUI_D2A4075C"), StringExternal("Param/Value/lib_UIUI_9F89A9DC"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetCustomResponseTriggerForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libUIUI_gt_PingCallbackPlayerPingsUnderworldEnter);
    libUIUI_gf_PingCreateNewPingTarget("GroundHole", false, null, StringExternal("Param/Value/lib_UIUI_4474E55E"), StringExternal("Param/Value/lib_UIUI_9A53F98A"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetCustomResponseTriggerForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libUIUI_gt_PingCallbackPlayerPingsUnderworldEnter);
    libUIUI_gf_PingCreateNewPingTarget("HoleLadderUp", false, null, StringExternal("Param/Value/lib_UIUI_B068F5DD"), StringExternal("Param/Value/lib_UIUI_C344D623"), SoundLink("UI_Game_Ping_General", -1), SoundLink("UI_Game_Ping_General", -1));
    libUIUI_gf_PingSetCustomResponseTriggerForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libUIUI_gt_PingCallbackPlayerPingsUnderworldExit);
    libUIUI_gf_PingCreateNewPingTarget("UnderworldBoss", false, null, StringExternal("Param/Value/lib_UIUI_0DF05FD5"), StringExternal("Param/Value/lib_UIUI_3994CFA3"), SoundLink("UI_Game_Ping_Attack", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetCustomResponseTriggerForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libUIUI_gt_PingCallbackPlayerPingsUnderworldBoss);
    libUIUI_gf_PingCreateNewPingTarget("UnderworldSummonedBoss", false, null, StringExternal("Param/Value/lib_UIUI_23B1DE63"), StringExternal("Param/Value/lib_UIUI_6E74A67B"), SoundLink("UI_Game_Ping_Help", -1), SoundLink("UI_Game_Ping_Attack", -1));
    libUIUI_gf_PingSetCustomResponseTriggerForPingTarget(libUIUI_gf_PingLastCreatedPingTarget(), libUIUI_gt_PingCallbackPlayerPingsLanerBossMinion);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_InitializeBaseModPingData_Init () {
    libUIUI_gt_InitializeBaseModPingData = TriggerCreate("libUIUI_gt_InitializeBaseModPingData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Callback Player Pings Merc Camp
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PingCallbackPlayerPingsMercCamp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_HeroAIMinionCampPinged(libUIUI_gv_ping_PingCallbackPingingPlayer, libUIUI_gv_ping_PingCallbackTargetUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PingCallbackPlayerPingsMercCamp_Init () {
    libUIUI_gt_PingCallbackPlayerPingsMercCamp = TriggerCreate("libUIUI_gt_PingCallbackPlayerPingsMercCamp_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Callback Player Pings Laner Mercs
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PingCallbackPlayerPingsLanerMercs_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_HeroAIPlayerPingsLanerMerc(libUIUI_gv_ping_PingCallbackPingingPlayer, libUIUI_gv_ping_PingCallbackTargetUnit, false, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PingCallbackPlayerPingsLanerMercs_Init () {
    libUIUI_gt_PingCallbackPlayerPingsLanerMercs = TriggerCreate("libUIUI_gt_PingCallbackPlayerPingsLanerMercs_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Callback Player Pings Laner Boss Minion
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PingCallbackPlayerPingsLanerBossMinion_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_HeroAIPlayerPingsLanerMerc(libUIUI_gv_ping_PingCallbackPingingPlayer, libUIUI_gv_ping_PingCallbackTargetUnit, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PingCallbackPlayerPingsLanerBossMinion_Init () {
    libUIUI_gt_PingCallbackPlayerPingsLanerBossMinion = TriggerCreate("libUIUI_gt_PingCallbackPlayerPingsLanerBossMinion_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Callback Player Pings Laner Boss Controlled
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PingCallbackPlayerPingsLanerBossControlled_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_HeroAIPlayerPingsLanerMerc(libUIUI_gv_ping_PingCallbackPingingPlayer, libUIUI_gv_ping_PingCallbackTargetUnit, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PingCallbackPlayerPingsLanerBossControlled_Init () {
    libUIUI_gt_PingCallbackPlayerPingsLanerBossControlled = TriggerCreate("libUIUI_gt_PingCallbackPlayerPingsLanerBossControlled_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Callback Player Pings Watch Tower
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PingCallbackPlayerPingsWatchTower_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_HeroAIWatchTowerPinged(libUIUI_gv_ping_PingCallbackPingingPlayer, libUIUI_gv_ping_PingCallbackTargetUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PingCallbackPlayerPingsWatchTower_Init () {
    libUIUI_gt_PingCallbackPlayerPingsWatchTower = TriggerCreate("libUIUI_gt_PingCallbackPlayerPingsWatchTower_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Callback Player Pings Tribute
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PingCallbackPlayerPingsTribute_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_HeroAITearOfElunePinged(libUIUI_gv_ping_PingCallbackPingingPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PingCallbackPlayerPingsTribute_Init () {
    libUIUI_gt_PingCallbackPlayerPingsTribute = TriggerCreate("libUIUI_gt_PingCallbackPlayerPingsTribute_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Callback Player Pings Dragon Shrine
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PingCallbackPlayerPingsDragonShrine_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_HeroAIObeliskPinged(libUIUI_gv_ping_PingCallbackPingingPlayer, libUIUI_gv_ping_PingCallbackTargetUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PingCallbackPlayerPingsDragonShrine_Init () {
    libUIUI_gt_PingCallbackPlayerPingsDragonShrine = TriggerCreate("libUIUI_gt_PingCallbackPlayerPingsDragonShrine_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Callback Player Pings Dragon Statue
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PingCallbackPlayerPingsDragonStatue_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_HeroAIDragonStatuePinged(libUIUI_gv_ping_PingCallbackPingingPlayer, libUIUI_gv_ping_PingCallbackTargetUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PingCallbackPlayerPingsDragonStatue_Init () {
    libUIUI_gt_PingCallbackPlayerPingsDragonStatue = TriggerCreate("libUIUI_gt_PingCallbackPlayerPingsDragonStatue_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Callback Player Pings Underworld Boss
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PingCallbackPlayerPingsUnderworldBoss_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_HeroAIUnderworldBossPinged(libUIUI_gv_ping_PingCallbackPingingPlayer, libUIUI_gv_ping_PingCallbackTargetUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PingCallbackPlayerPingsUnderworldBoss_Init () {
    libUIUI_gt_PingCallbackPlayerPingsUnderworldBoss = TriggerCreate("libUIUI_gt_PingCallbackPlayerPingsUnderworldBoss_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Callback Player Pings Underworld Enter
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PingCallbackPlayerPingsUnderworldEnter_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_HeroAIUnderworldEntrancePinged(libUIUI_gv_ping_PingCallbackPingingPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PingCallbackPlayerPingsUnderworldEnter_Init () {
    libUIUI_gt_PingCallbackPlayerPingsUnderworldEnter = TriggerCreate("libUIUI_gt_PingCallbackPlayerPingsUnderworldEnter_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Ping Callback Player Pings Underworld Exit
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_PingCallbackPlayerPingsUnderworldExit_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_PingCallbackPlayerPingsUnderworldExit_Init () {
    libUIUI_gt_PingCallbackPlayerPingsUnderworldExit = TriggerCreate("libUIUI_gt_PingCallbackPlayerPingsUnderworldExit_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Tab Screen Panel
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeTabScreenPanel_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_i;
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_statBoostIndex;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uITabScreenPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/HeroLeaderPanel/HeroLeaderPanelContainer/TabControl");
    libUIUI_gv_uITabScreenPanel.lv_tabControl = DialogControlLastCreated();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeTabScreenPanel_Init () {
    libUIUI_gt_UIInitializeTabScreenPanel = TriggerCreate("libUIUI_gt_UIInitializeTabScreenPanel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Target Info Panel
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeTargetInfoPanel_Func (bool testConds, bool runActions) {
    int init_i;

    // Variable Declarations
    int lv_i;
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_statBoostIndex;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/TargetInfoPanel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uITargetInfoPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TargetNameLabel");
    libUIUI_gv_uITargetInfoPanel.lv_unitName = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TargetPlayerNameLabel");
    libUIUI_gv_uITargetInfoPanel.lv_playerName = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TargetLevelLabel");
    libUIUI_gv_uITargetInfoPanel.lv_level = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "TargetHeroImage");
    libUIUI_gv_uITargetInfoPanel.lv_portraitImage = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitTarget, "TargetHeroUnitFrame");
    libUIUI_gv_uITargetInfoPanel.lv_unitTargetFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "TargetMechanicLabelIcon");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uITargetInfoPanel.lv_mapMechanicIcon = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "TargetMechanicLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uITargetInfoPanel.lv_mapMechanicLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "CursedBuildingIcon");
    libNtve_gf_SetDialogItemTooltip(DialogControlLastCreated(), StringExternal("Param/Value/lib_UIUI_9EB66CFD"), PlayerGroupAll());
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uITargetInfoPanel.lv_cursedBuildingIcon = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "DescriptionLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uITargetInfoPanel.lv_descriptionLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HealthAndManaUnitStatusFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uITargetInfoPanel.lv_healthAndManaUnitStatusStatusFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HealthOnlyUnitStatusFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uITargetInfoPanel.lv_healthOnlyUnitStatusStatusFrame = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "TowerWithAmmoUnitStatusFrame");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_uITargetInfoPanel.lv_towerWithAmmoUnitStatusStatusFrame = DialogControlLastCreated();
    libUIUI_gf_UITargetInfoPanelEnableDisable(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeTargetInfoPanel_Init () {
    libUIUI_gt_UIInitializeTargetInfoPanel = TriggerCreate("libUIUI_gt_UIInitializeTargetInfoPanel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Target Info Panel - Update
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UITargetInfoPanelUpdate_Func (bool testConds, bool runActions) {
    int auto665DC756_ae;
    int auto665DC756_ai;

    // Variable Declarations
    int lv_player;
    int lv_firstPlayer;
    const int lv_playerStep = 2;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_firstPlayer = ModI(FixedToInt((GameGetMissionTime() / 0.0625)), lv_playerStep);
    auto665DC756_ae = libCore_gv_bALMaxPlayers;
    auto665DC756_ai = lv_playerStep;
    lv_player = lv_firstPlayer;
    for ( ; ( (auto665DC756_ai >= 0 && lv_player <= auto665DC756_ae) || (auto665DC756_ai <= 0 && lv_player >= auto665DC756_ae) ) ; lv_player += auto665DC756_ai ) {
        if ((libGame_gv_players[lv_player].lv_playerStatus == libGame_ge_PlayerStatusStorm_Playing)) {
            libUIUI_gf_UITargetInfoPanelUpdateForPlayer(lv_player);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UITargetInfoPanelUpdate_Init () {
    libUIUI_gt_UITargetInfoPanelUpdate = TriggerCreate("libUIUI_gt_UITargetInfoPanelUpdate_Func");
    TriggerEnable(libUIUI_gt_UITargetInfoPanelUpdate, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UITargetInfoPanelUpdate, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Initialize Targeting Helper Panel
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UIInitializeTargetingHelperPanel_Func (bool testConds, bool runActions) {
    int init_i;

    int auto56AF556C_ae;
    int auto56AF556C_ai;

    // Variable Declarations
    int lv_i;
    int[6] lv_panels;
    int lv_currentPanelLayer;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/FullscreenUpperContainer/FriendlyAbilityTargetHelper");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_uITargetingHelperPanel.lv_mainPanel = DialogControlLastCreated();
    auto56AF556C_ae = libCore_gv_bALMaxPlayersOnATeam;
    auto56AF556C_ai = 1;
    lv_i = 1;
    for ( ; ( (auto56AF556C_ai >= 0 && lv_i <= auto56AF556C_ae) || (auto56AF556C_ai <= 0 && lv_i >= auto56AF556C_ae) ) ; lv_i += auto56AF556C_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "HeroFrame" + IntToString(lv_i));
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        libUIUI_gv_uITargetingHelperPanel.lv_heroFrames[lv_i] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroIcon");
        libUIUI_gv_uITargetingHelperPanel.lv_heroIcons[lv_i] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "HeroIconBorder");
        libNtve_gf_SetDialogItemColor(DialogControlLastCreated(), libCore_gv_cOLORAllyColor, PlayerGroupAll());
        libUIUI_gv_uITargetingHelperPanel.lv_heroBorderImages[lv_i] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitTarget, "TargetHeroUnitFrame");
        libUIUI_gv_uITargetingHelperPanel.lv_heroTargetFrames[lv_i] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "HeroStatus");
        libUIUI_gv_uITargetingHelperPanel.lv_heroStatusFrames[lv_i] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
    }
    TriggerAddEventDialogControl(libUIUI_gt_UITargetingHelperPanelUnitFrameMouseExit, c_playerAny, libUIUI_gv_uITargetingHelperPanel.lv_heroTargetFrames[1], c_triggerControlEventTypeMouseExit);
    TriggerAddEventDialogControl(libUIUI_gt_UITargetingHelperPanelUnitFrameMouseExit, c_playerAny, libUIUI_gv_uITargetingHelperPanel.lv_heroTargetFrames[2], c_triggerControlEventTypeMouseExit);
    TriggerAddEventDialogControl(libUIUI_gt_UITargetingHelperPanelUnitFrameMouseExit, c_playerAny, libUIUI_gv_uITargetingHelperPanel.lv_heroTargetFrames[3], c_triggerControlEventTypeMouseExit);
    TriggerAddEventDialogControl(libUIUI_gt_UITargetingHelperPanelUnitFrameMouseExit, c_playerAny, libUIUI_gv_uITargetingHelperPanel.lv_heroTargetFrames[4], c_triggerControlEventTypeMouseExit);
    TriggerAddEventDialogControl(libUIUI_gt_UITargetingHelperPanelUnitFrameMouseExit, c_playerAny, libUIUI_gv_uITargetingHelperPanel.lv_heroTargetFrames[5], c_triggerControlEventTypeMouseExit);
    TriggerAddEventDialogControl(libUIUI_gt_UITargetingHelperPanelUnitFrameMouseEnter, c_playerAny, libUIUI_gv_uITargetingHelperPanel.lv_heroTargetFrames[1], c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(libUIUI_gt_UITargetingHelperPanelUnitFrameMouseEnter, c_playerAny, libUIUI_gv_uITargetingHelperPanel.lv_heroTargetFrames[2], c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(libUIUI_gt_UITargetingHelperPanelUnitFrameMouseEnter, c_playerAny, libUIUI_gv_uITargetingHelperPanel.lv_heroTargetFrames[3], c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(libUIUI_gt_UITargetingHelperPanelUnitFrameMouseEnter, c_playerAny, libUIUI_gv_uITargetingHelperPanel.lv_heroTargetFrames[4], c_triggerControlEventTypeMouseEnter);
    TriggerAddEventDialogControl(libUIUI_gt_UITargetingHelperPanelUnitFrameMouseEnter, c_playerAny, libUIUI_gv_uITargetingHelperPanel.lv_heroTargetFrames[5], c_triggerControlEventTypeMouseEnter);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UIInitializeTargetingHelperPanel_Init () {
    libUIUI_gt_UIInitializeTargetingHelperPanel = TriggerCreate("libUIUI_gt_UIInitializeTargetingHelperPanel_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Targeting Helper Panel - Unit Frame Mouse Enter
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UITargetingHelperPanelUnitFrameMouseEnter_Func (bool testConds, bool runActions) {
    int auto4E0DCE1A_ae;
    int auto4E0DCE1A_ai;
    int auto1D8443F8_ae;
    int auto1D8443F8_ai;

    // Variable Declarations
    int lv_i;
    int lv_frameIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto4E0DCE1A_ae = libCore_gv_bALMaxPlayersOnATeam;
    auto4E0DCE1A_ai = 1;
    lv_i = 1;
    for ( ; ( (auto4E0DCE1A_ai >= 0 && lv_i <= auto4E0DCE1A_ae) || (auto4E0DCE1A_ai <= 0 && lv_i >= auto4E0DCE1A_ae) ) ; lv_i += auto4E0DCE1A_ai ) {
        if ((EventDialogControl() == libUIUI_gv_uITargetingHelperPanel.lv_heroTargetFrames[lv_i])) {
            lv_frameIndex = lv_i;
            break;
        }

    }
    TextExpressionSetToken("Param/Expression/lib_UIUI_CFF72C0A", "A", IntToText(EventPlayer()));
    ActorSendAsText(libNtve_gf_MainActorofUnit(libUIUI_gv_uITargetingHelperPanelTargetUnitsForPlayer[EventPlayer()][lv_frameIndex]), TextExpressionAssemble("Param/Expression/lib_UIUI_CFF72C0A"));
    auto1D8443F8_ae = libCore_gv_bALMaxPlayers;
    auto1D8443F8_ai = 1;
    lv_i = 1;
    for ( ; ( (auto1D8443F8_ai >= 0 && lv_i <= auto1D8443F8_ae) || (auto1D8443F8_ai <= 0 && lv_i >= auto1D8443F8_ae) ) ; lv_i += auto1D8443F8_ai ) {
        if ((lv_i != EventPlayer())) {
            TextExpressionSetToken("Param/Expression/lib_UIUI_99C703B2", "A", IntToText(lv_i));
            ActorSendAsText(ActorFromActor(libNtve_gf_MainActorofUnit(libUIUI_gv_uITargetingHelperPanelTargetUnitsForPlayer[EventPlayer()][lv_frameIndex]), ("FriendlyTargetHelperBeamPlayer" + IntToString(EventPlayer()))), TextExpressionAssemble("Param/Expression/lib_UIUI_99C703B2"));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UITargetingHelperPanelUnitFrameMouseEnter_Init () {
    libUIUI_gt_UITargetingHelperPanelUnitFrameMouseEnter = TriggerCreate("libUIUI_gt_UITargetingHelperPanelUnitFrameMouseEnter_Func");
    TriggerEnable(libUIUI_gt_UITargetingHelperPanelUnitFrameMouseEnter, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Targeting Helper Panel - Unit Frame Mouse Exit
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UITargetingHelperPanelUnitFrameMouseExit_Func (bool testConds, bool runActions) {
    int auto9AF623AC_ae;
    int auto9AF623AC_ai;

    // Variable Declarations
    int lv_i;
    int lv_frameIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto9AF623AC_ae = libCore_gv_bALMaxPlayersOnATeam;
    auto9AF623AC_ai = 1;
    lv_i = 1;
    for ( ; ( (auto9AF623AC_ai >= 0 && lv_i <= auto9AF623AC_ae) || (auto9AF623AC_ai <= 0 && lv_i >= auto9AF623AC_ae) ) ; lv_i += auto9AF623AC_ai ) {
        if ((EventDialogControl() == libUIUI_gv_uITargetingHelperPanel.lv_heroTargetFrames[lv_i])) {
            lv_frameIndex = lv_i;
            break;
        }

    }
    ActorSend(ActorFromActor(libNtve_gf_MainActorofUnit(libUIUI_gv_uITargetingHelperPanelTargetUnitsForPlayer[EventPlayer()][lv_frameIndex]), ("FriendlyTargetHelperBeamPlayer" + IntToString(EventPlayer()))), "Destroy");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UITargetingHelperPanelUnitFrameMouseExit_Init () {
    libUIUI_gt_UITargetingHelperPanelUnitFrameMouseExit = TriggerCreate("libUIUI_gt_UITargetingHelperPanelUnitFrameMouseExit_Func");
    TriggerEnable(libUIUI_gt_UITargetingHelperPanelUnitFrameMouseExit, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UI - Targeting Helper Panel - Update Visibility For Offensive Abilities
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_UITargetingHelperPanelUpdateVisibilityForOffensiveAbilities_Func (bool testConds, bool runActions) {
    int auto1CF92869_ae;
    int auto1CF92869_ai;
    int auto9982399D_ae;
    int auto9982399D_ai;

    // Variable Declarations
    int lv_i;
    int lv_p;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto1CF92869_ae = libCore_gv_bALMaxPlayers;
    auto1CF92869_ai = 1;
    lv_p = 1;
    for ( ; ( (auto1CF92869_ai >= 0 && lv_p <= auto1CF92869_ae) || (auto1CF92869_ai <= 0 && lv_p >= auto1CF92869_ae) ) ; lv_p += auto1CF92869_ai ) {
        if ((libUIUI_gv_uITargetingHelperPanelPlayerIsTargetingOffensiveAbility[lv_p] == true)) {
            auto9982399D_ae = libUIUI_gv_uITargetingHelperPanelNumberOfTargetUnitsForPlayer[lv_p];
            auto9982399D_ai = 1;
            lv_i = 1;
            for ( ; ( (auto9982399D_ai >= 0 && lv_i <= auto9982399D_ae) || (auto9982399D_ai <= 0 && lv_i >= auto9982399D_ae) ) ; lv_i += auto9982399D_ai ) {
                if ((libNtve_gf_UnitIsVisibleToPlayer(libUIUI_gv_uITargetingHelperPanelTargetUnitsForPlayer[lv_p][lv_i], lv_p) == false)) {
                    DialogControlSetVisible(libUIUI_gv_uITargetingHelperPanel.lv_heroFrames[lv_i], libCore_gv_playerGroupFromPlayer[lv_p], false);
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_UITargetingHelperPanelUpdateVisibilityForOffensiveAbilities_Init () {
    libUIUI_gt_UITargetingHelperPanelUpdateVisibilityForOffensiveAbilities = TriggerCreate("libUIUI_gt_UITargetingHelperPanelUpdateVisibilityForOffensiveAbilities_Func");
    TriggerEnable(libUIUI_gt_UITargetingHelperPanelUpdateVisibilityForOffensiveAbilities, false);
    TriggerAddEventTimePeriodic(libUIUI_gt_UITargetingHelperPanelUpdateVisibilityForOffensiveAbilities, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Top Bar Panel Initialize
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_TopBarPanelInitialize_Func (bool testConds, bool runActions) {
    int init_i;

    int auto4D936E5E_ae;
    int auto4D936E5E_ai;
    int auto507A4472_ae;
    int auto507A4472_ai;

    // Variable Declarations
    int lv_itTeam;
    int[6] lv_panels;
    int lv_currentPanelLayer;
    int lv_enemyTeam;

    // Variable Initialization
    for (init_i = 0; init_i <= 5; init_i += 1) {
        lv_panels[init_i] = c_invalidDialogControlId;
    }

    // Actions
    if (!runActions) {
        return true;
    }

    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer/TopPanel");
    DialogControlSetObservedType(DialogControlLastCreated(), c_triggerObservedTypeDefaultObservedPlayerId);
    lv_currentPanelLayer += 1;
    lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
    libUIUI_gv_topBarPanel.lv_mainPanel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "GameTimerLabel");
    libNtve_gf_SetDialogItemText(DialogControlLastCreated(), StringToText(""), PlayerGroupAll());
    libUIUI_gv_topBarPanel.lv_gameTimerLabel = DialogControlLastCreated();
    DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "NormalModeContainer/CoreHealthLabel");
    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
    libUIUI_gv_topBarPanel.lv_coreHealthLabel = DialogControlLastCreated();
    auto4D936E5E_ae = libCore_gv_bALMaxTeams;
    auto4D936E5E_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (auto4D936E5E_ai >= 0 && lv_itTeam <= auto4D936E5E_ae) || (auto4D936E5E_ai <= 0 && lv_itTeam >= auto4D936E5E_ae) ) ; lv_itTeam += auto4D936E5E_ai ) {
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "XPBackgroundBlue");
        libUIUI_gv_topBarPanel.lv_xPBackgroundBlue[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeImage, "Team" + IntToString(lv_itTeam) + "XPBackgroundRed");
        libUIUI_gv_topBarPanel.lv_xPBackgroundRed[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "NormalModeContainer/Team" + IntToString(lv_itTeam) + "XPUnitStatusFrame");
        libUIUI_gv_topBarPanel.lv_xPUnitStatusFrame[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatusBar, "NormalModeContainer/Team" + IntToString(lv_itTeam) + "XPUnitStatusFrame/XPBar");
        libUIUI_gv_topBarPanel.lv_xPVeterancyBar[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "NormalModeContainer/Team" + IntToString(lv_itTeam) + "LevelLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_topBarPanel.lv_levelLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "NormalModeContainer/Team" + IntToString(lv_itTeam) + "LevelUpLabel");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_topBarPanel.lv_levelUpLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeUnitStatus, "NormalModeContainer/Team" + IntToString(lv_itTeam) + "CoreUnitStatus");
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), false);
        libUIUI_gv_topBarPanel.lv_coreHealthUnitStatusFrames[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "NormalModeContainer/Team" + IntToString(lv_itTeam) + "CoreUnitStatus/HealthLabel/StatusLabel");
        libUIUI_gv_topBarPanel.lv_coreHealthPercentLabels[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypePanel, "NormalModeContainer/Team" + IntToString(lv_itTeam) + "XPInfoFrame");
        lv_currentPanelLayer += 1;
        lv_panels[lv_currentPanelLayer] = DialogControlLastCreated();
        libUIUI_gv_topBarPanel.lv_xPContributionPopup[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PropertyBindLabels/HeroAmountLabel");
        libUIUI_gv_topBarPanel.lv_heroXPContributionLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PropertyBindLabels/MercenaryAmountLabel");
        libUIUI_gv_topBarPanel.lv_mercenaryXPContributionLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PropertyBindLabels/MinionAmountLabel");
        libUIUI_gv_topBarPanel.lv_minionXPContributionLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PropertyBindLabels/PassiveAmountLabel");
        libUIUI_gv_topBarPanel.lv_passiveXPContributionLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PropertyBindLabels/StructureAmountLabel");
        libUIUI_gv_topBarPanel.lv_structureXPContributionLabel[lv_itTeam] = DialogControlLastCreated();
        DialogControlHookup(lv_panels[lv_currentPanelLayer], c_triggerControlTypeLabel, "PropertyBindLabels/TotalAmountLabel");
        libUIUI_gv_topBarPanel.lv_totalXPContributionLabel[lv_itTeam] = DialogControlLastCreated();
        lv_currentPanelLayer -= 1;
    }
    auto507A4472_ae = libCore_gv_bALMaxTeams;
    auto507A4472_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (auto507A4472_ai >= 0 && lv_itTeam <= auto507A4472_ae) || (auto507A4472_ai <= 0 && lv_itTeam >= auto507A4472_ae) ) ; lv_itTeam += auto507A4472_ai ) {
        lv_enemyTeam = (3 - lv_itTeam);
        DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_xPBackgroundBlue[lv_itTeam], libGame_gv_teams[lv_itTeam].lv_teamPlayerGroupNoNPCPlayers, true);
        DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_xPBackgroundRed[lv_itTeam], libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, true);
    }
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_topBarPanel.lv_levelUpLabel[libGame_gv_teamOrderIndex_C], "Storm_TopBar_TeamLevelUpLeftRed", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_topBarPanel.lv_levelUpLabel[libGame_gv_teamChaosIndex_C], "Storm_TopBar_TeamLevelUpRightBlue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_topBarPanel.lv_coreHealthPercentLabels[libGame_gv_teamOrderIndex_C], "Storm_TopBar_CoreHealthPercentLeftRed", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    libNtve_gf_SetDialogItemStyle(libUIUI_gv_topBarPanel.lv_coreHealthPercentLabels[libGame_gv_teamChaosIndex_C], "Storm_TopBar_CoreHealthPercentRightBlue", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers);
    DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_xPBackgroundBlue[libGame_gv_teamOrderIndex_C], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_xPBackgroundRed[libGame_gv_teamChaosIndex_C], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    DialogControlSendAnimationEvent(libUIUI_gv_topBarPanel.lv_xPContributionPopup[libGame_gv_teamOrderIndex_C], libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, "AllyColorSwap");
    DialogControlSendAnimationEvent(libUIUI_gv_topBarPanel.lv_xPContributionPopup[libGame_gv_teamChaosIndex_C], libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, "EnemyColorSwap");
    DialogControlSendAnimationEvent(libUIUI_gv_topBarPanel.lv_xPContributionPopup[libGame_gv_teamChaosIndex_C], libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, "AllyColorSwap");
    DialogControlSendAnimationEvent(libUIUI_gv_topBarPanel.lv_xPContributionPopup[libGame_gv_teamOrderIndex_C], libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, "EnemyColorSwap");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_TopBarPanelInitialize_Init () {
    libUIUI_gt_TopBarPanelInitialize = TriggerCreate("libUIUI_gt_TopBarPanelInitialize_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Top Bar Panel Show Per Player Loop
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_TopBarPanelShowPerPlayerLoop_Func (bool testConds, bool runActions) {
    playergroup autoF3CE8345_g;
    int autoF3CE8345_p;
    unitgroup auto27013AE1_g;
    int auto27013AE1_u;
    playergroup auto8F5BF950_g;
    int auto8F5BF950_p;
    unitgroup auto28BD9D16_g;
    int auto28BD9D16_u;

    // Variable Declarations
    int lv_itPlayer;
    unit lv_itHeroUnit;
    bool lv_showBar;
    playergroup lv_topBarVisiblePlayerGroup;
    playergroup lv_topBarNotVisiblePlayerGroup;

    // Variable Initialization
    lv_topBarVisiblePlayerGroup = PlayerGroupEmpty();
    lv_topBarNotVisiblePlayerGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core != null))) {
            return false;
        }

        if (!((libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core != null))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF3CE8345_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers; 
    autoF3CE8345_p = 1;
    for ( ; autoF3CE8345_p <= PlayerGroupCount(autoF3CE8345_g) ; autoF3CE8345_p += (lv_itPlayer == PlayerGroupPlayer(autoF3CE8345_g, autoF3CE8345_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoF3CE8345_g, autoF3CE8345_p);
        lv_showBar = false;
        auto27013AE1_g = libGame_gv_players[lv_itPlayer].lv_heroUnitGroup;
        auto27013AE1_u = 1;
        for ( ; auto27013AE1_u <= UnitGroupCount(auto27013AE1_g, c_unitCountAll) ; auto27013AE1_u += (lv_itHeroUnit == UnitGroupUnit(auto27013AE1_g, auto27013AE1_u)) ) {
            lv_itHeroUnit = UnitGroupUnit(auto27013AE1_g, auto27013AE1_u);
            if ((libNtve_gf_UnitInRegion(lv_itHeroUnit, libCore_gv_mAPChaosBaseRegion) == true)) {
                lv_showBar = true;
                break;
            }

        }
        if ((lv_showBar == true)) {
            PlayerGroupAdd(lv_topBarVisiblePlayerGroup, lv_itPlayer);
        }
        else {
            PlayerGroupAdd(lv_topBarNotVisiblePlayerGroup, lv_itPlayer);
        }
    }
    auto8F5BF950_g = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers; 
    auto8F5BF950_p = 1;
    for ( ; auto8F5BF950_p <= PlayerGroupCount(auto8F5BF950_g) ; auto8F5BF950_p += (lv_itPlayer == PlayerGroupPlayer(auto8F5BF950_g, auto8F5BF950_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto8F5BF950_g, auto8F5BF950_p);
        lv_showBar = false;
        auto28BD9D16_g = libGame_gv_players[lv_itPlayer].lv_heroUnitGroup;
        auto28BD9D16_u = 1;
        for ( ; auto28BD9D16_u <= UnitGroupCount(auto28BD9D16_g, c_unitCountAll) ; auto28BD9D16_u += (lv_itHeroUnit == UnitGroupUnit(auto28BD9D16_g, auto28BD9D16_u)) ) {
            lv_itHeroUnit = UnitGroupUnit(auto28BD9D16_g, auto28BD9D16_u);
            if ((libNtve_gf_UnitInRegion(lv_itHeroUnit, libCore_gv_mAPOrderBaseRegion) == true)) {
                lv_showBar = true;
                break;
            }

        }
        if ((lv_showBar == true)) {
            PlayerGroupAdd(lv_topBarVisiblePlayerGroup, lv_itPlayer);
        }
        else {
            PlayerGroupAdd(lv_topBarNotVisiblePlayerGroup, lv_itPlayer);
        }
    }
    DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_coreHealthUnitStatusFrames[libGame_gv_teamOrderIndex_C], lv_topBarVisiblePlayerGroup, true);
    DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_coreHealthUnitStatusFrames[libGame_gv_teamChaosIndex_C], lv_topBarVisiblePlayerGroup, true);
    DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_coreHealthLabel, lv_topBarVisiblePlayerGroup, true);
    DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_coreHealthUnitStatusFrames[libGame_gv_teamOrderIndex_C], lv_topBarNotVisiblePlayerGroup, false);
    DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_coreHealthUnitStatusFrames[libGame_gv_teamChaosIndex_C], lv_topBarNotVisiblePlayerGroup, false);
    DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_coreHealthLabel, lv_topBarNotVisiblePlayerGroup, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_TopBarPanelShowPerPlayerLoop_Init () {
    libUIUI_gt_TopBarPanelShowPerPlayerLoop = TriggerCreate("libUIUI_gt_TopBarPanelShowPerPlayerLoop_Func");
    TriggerAddEventTimePeriodic(libUIUI_gt_TopBarPanelShowPerPlayerLoop, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: XP Contribution Perecentage
//--------------------------------------------------------------------------------------------------
bool libUIUI_gt_XPContributionPerecentage_Func (bool testConds, bool runActions) {
    playergroup auto731D71F4_g;
    int auto731D71F4_p;
    playergroup auto0ECE2AF3_g;
    int auto0ECE2AF3_p;

    // Variable Declarations
    int lv_Player;
    fixed lv_currentXPForPlayerINT;
    unit lv_heroUnit;
    fixed[6] lv_prioritizedXPVauleList;
    fixed lv_totalXPContribution;
    int lv_tryMeMode_EnemyPlayer;

    // Variable Initialization
    lv_tryMeMode_EnemyPlayer = 6;

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto731D71F4_g = GameAttributePlayersForTeam(1); 
    auto731D71F4_p = 1;
    for ( ; auto731D71F4_p <= PlayerGroupCount(auto731D71F4_g) ; auto731D71F4_p += (lv_Player == PlayerGroupPlayer(auto731D71F4_g, auto731D71F4_p)) ) {
        lv_Player = PlayerGroupPlayer(auto731D71F4_g, auto731D71F4_p);
        lv_heroUnit = libGame_gv_players[lv_Player].lv_heroUnit;
        if ((lv_heroUnit == null)) {
            continue;
        }

        lv_currentXPForPlayerINT = UnitGetPropertyFixed(lv_heroUnit, c_unitPropXP, c_unitPropCurrent);
        if ((lv_currentXPForPlayerINT >= 100.0)) {
            lv_prioritizedXPVauleList[0] = libGame_gv_players[lv_Player].lv_xPRecievedFromHeroes;
            lv_prioritizedXPVauleList[1] = libGame_gv_players[lv_Player].lv_xPRecievedFromCreeps;
            lv_prioritizedXPVauleList[2] = libGame_gv_players[lv_Player].lv_xPRecievedFromMinions;
            lv_prioritizedXPVauleList[3] = libGame_gv_players[lv_Player].lv_xPRecievedFromTrickle;
            lv_prioritizedXPVauleList[4] = libGame_gv_players[lv_Player].lv_xPRecievedFromStructures;
            lv_totalXPContribution = (lv_prioritizedXPVauleList[0] + lv_prioritizedXPVauleList[1] + lv_prioritizedXPVauleList[2] + lv_prioritizedXPVauleList[3] + lv_prioritizedXPVauleList[4]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_topBarPanel.lv_heroXPContributionLabel[libGame_gf_TeamNumberOfPlayer(lv_Player)], FormatNumber(FixedToInt(lv_prioritizedXPVauleList[0])), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libUIUI_gv_topBarPanel.lv_mercenaryXPContributionLabel[libGame_gf_TeamNumberOfPlayer(lv_Player)], FormatNumber(FixedToInt(lv_prioritizedXPVauleList[1])), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libUIUI_gv_topBarPanel.lv_minionXPContributionLabel[libGame_gf_TeamNumberOfPlayer(lv_Player)], FormatNumber(FixedToInt(lv_prioritizedXPVauleList[2])), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libUIUI_gv_topBarPanel.lv_passiveXPContributionLabel[libGame_gf_TeamNumberOfPlayer(lv_Player)], FormatNumber(FixedToInt(lv_prioritizedXPVauleList[3])), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libUIUI_gv_topBarPanel.lv_structureXPContributionLabel[libGame_gf_TeamNumberOfPlayer(lv_Player)], FormatNumber(FixedToInt(lv_prioritizedXPVauleList[4])), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libUIUI_gv_topBarPanel.lv_totalXPContributionLabel[libGame_gf_TeamNumberOfPlayer(lv_Player)], FormatNumber(FixedToInt(lv_totalXPContribution)), PlayerGroupAll());
        }

        break;
    }
    auto0ECE2AF3_g = GameAttributePlayersForTeam(2); 
    auto0ECE2AF3_p = 1;
    for ( ; auto0ECE2AF3_p <= PlayerGroupCount(auto0ECE2AF3_g) ; auto0ECE2AF3_p += (lv_Player == PlayerGroupPlayer(auto0ECE2AF3_g, auto0ECE2AF3_p)) ) {
        lv_Player = PlayerGroupPlayer(auto0ECE2AF3_g, auto0ECE2AF3_p);
        lv_heroUnit = libGame_gv_players[lv_Player].lv_heroUnit;
        if ((lv_heroUnit == null)) {
            continue;
        }

        lv_currentXPForPlayerINT = UnitGetPropertyFixed(lv_heroUnit, c_unitPropXP, c_unitPropCurrent);
        if ((lv_currentXPForPlayerINT >= 100.0)) {
            lv_prioritizedXPVauleList[0] = libGame_gv_players[lv_Player].lv_xPRecievedFromHeroes;
            lv_prioritizedXPVauleList[1] = libGame_gv_players[lv_Player].lv_xPRecievedFromCreeps;
            lv_prioritizedXPVauleList[2] = libGame_gv_players[lv_Player].lv_xPRecievedFromMinions;
            lv_prioritizedXPVauleList[3] = libGame_gv_players[lv_Player].lv_xPRecievedFromTrickle;
            lv_prioritizedXPVauleList[4] = libGame_gv_players[lv_Player].lv_xPRecievedFromStructures;
            lv_totalXPContribution = (lv_prioritizedXPVauleList[0] + lv_prioritizedXPVauleList[1] + lv_prioritizedXPVauleList[2] + lv_prioritizedXPVauleList[3] + lv_prioritizedXPVauleList[4]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_topBarPanel.lv_heroXPContributionLabel[libGame_gf_TeamNumberOfPlayer(lv_Player)], FormatNumber(FixedToInt(lv_prioritizedXPVauleList[0])), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libUIUI_gv_topBarPanel.lv_mercenaryXPContributionLabel[libGame_gf_TeamNumberOfPlayer(lv_Player)], FormatNumber(FixedToInt(lv_prioritizedXPVauleList[1])), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libUIUI_gv_topBarPanel.lv_minionXPContributionLabel[libGame_gf_TeamNumberOfPlayer(lv_Player)], FormatNumber(FixedToInt(lv_prioritizedXPVauleList[2])), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libUIUI_gv_topBarPanel.lv_passiveXPContributionLabel[libGame_gf_TeamNumberOfPlayer(lv_Player)], FormatNumber(FixedToInt(lv_prioritizedXPVauleList[3])), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libUIUI_gv_topBarPanel.lv_structureXPContributionLabel[libGame_gf_TeamNumberOfPlayer(lv_Player)], FormatNumber(FixedToInt(lv_prioritizedXPVauleList[4])), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libUIUI_gv_topBarPanel.lv_totalXPContributionLabel[libGame_gf_TeamNumberOfPlayer(lv_Player)], FormatNumber(FixedToInt(lv_totalXPContribution)), PlayerGroupAll());
        }

        break;
    }
    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_TryMe)) {
        lv_heroUnit = libGame_gv_players[lv_tryMeMode_EnemyPlayer].lv_heroUnit;
        if ((lv_heroUnit == null)) {

        }

        lv_currentXPForPlayerINT = UnitGetPropertyFixed(lv_heroUnit, c_unitPropXP, c_unitPropCurrent);
        if ((lv_currentXPForPlayerINT >= 100.0)) {
            lv_prioritizedXPVauleList[0] = libGame_gv_players[lv_tryMeMode_EnemyPlayer].lv_xPRecievedFromHeroes;
            lv_prioritizedXPVauleList[1] = libGame_gv_players[lv_tryMeMode_EnemyPlayer].lv_xPRecievedFromCreeps;
            lv_prioritizedXPVauleList[2] = libGame_gv_players[lv_tryMeMode_EnemyPlayer].lv_xPRecievedFromMinions;
            lv_prioritizedXPVauleList[3] = libGame_gv_players[lv_tryMeMode_EnemyPlayer].lv_xPRecievedFromTrickle;
            lv_prioritizedXPVauleList[4] = libGame_gv_players[lv_tryMeMode_EnemyPlayer].lv_xPRecievedFromStructures;
            lv_totalXPContribution = (lv_prioritizedXPVauleList[0] + lv_prioritizedXPVauleList[1] + lv_prioritizedXPVauleList[2] + lv_prioritizedXPVauleList[3] + lv_prioritizedXPVauleList[4]);
            libNtve_gf_SetDialogItemText(libUIUI_gv_topBarPanel.lv_heroXPContributionLabel[libGame_gf_TeamNumberOfPlayer(lv_tryMeMode_EnemyPlayer)], FormatNumber(FixedToInt(lv_prioritizedXPVauleList[0])), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libUIUI_gv_topBarPanel.lv_mercenaryXPContributionLabel[libGame_gf_TeamNumberOfPlayer(lv_tryMeMode_EnemyPlayer)], FormatNumber(FixedToInt(lv_prioritizedXPVauleList[1])), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libUIUI_gv_topBarPanel.lv_minionXPContributionLabel[libGame_gf_TeamNumberOfPlayer(lv_tryMeMode_EnemyPlayer)], FormatNumber(FixedToInt(lv_prioritizedXPVauleList[2])), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libUIUI_gv_topBarPanel.lv_passiveXPContributionLabel[libGame_gf_TeamNumberOfPlayer(lv_tryMeMode_EnemyPlayer)], FormatNumber(FixedToInt(lv_prioritizedXPVauleList[3])), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libUIUI_gv_topBarPanel.lv_structureXPContributionLabel[libGame_gf_TeamNumberOfPlayer(lv_tryMeMode_EnemyPlayer)], FormatNumber(FixedToInt(lv_prioritizedXPVauleList[4])), PlayerGroupAll());
            libNtve_gf_SetDialogItemText(libUIUI_gv_topBarPanel.lv_totalXPContributionLabel[libGame_gf_TeamNumberOfPlayer(lv_tryMeMode_EnemyPlayer)], FormatNumber(FixedToInt(lv_totalXPContribution)), PlayerGroupAll());
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libUIUI_gt_XPContributionPerecentage_Init () {
    libUIUI_gt_XPContributionPerecentage = TriggerCreate("libUIUI_gt_XPContributionPerecentage_Func");
    TriggerAddEventTimePeriodic(libUIUI_gt_XPContributionPerecentage, libUIUI_gv_data_XPPercentage_UpdatePeriod_C, c_timeGame);
}

void libUIUI_InitTriggers () {
    libUIUI_gt_IncludeUI_Init();
    libUIUI_gt_InitializeUI_Init();
    libUIUI_gt_UIUpdateEventBehaviorChangeThatAffectsStats_Init();
    libUIUI_gt_UIUpdateTimeLabelsTimerExpires_Init();
    libUIUI_gt_UIDebugInitandHideErrorWarning_Init();
    libUIUI_gt_UIInitializeDamageFlashUI_Init();
    libUIUI_gt_UIDamageFlashTriggerDamageFlash_Init();
    libUIUI_gt_UIDamageFlashLowHPSoundsLooper_Init();
    libUIUI_gt_DeathRecapPanelInitialize_Init();
    libUIUI_gt_DeathRecapOpenButtonClicked_Init();
    libUIUI_gt_EffectHistoryTest_Init();
    libUIUI_gt_DeathRecapPopulateTest_Init();
    libUIUI_gt_DeathTimerPanelInitialize_Init();
    libUIUI_gt_DeathAnnouncementPanelVisibleTimerExpires_Init();
    libUIUI_gt_DeathTimerPanelDeathTimerFrameMouseEnter_Init();
    libUIUI_gt_DeathTimerPanelDeathTimerFrameMouseExit_Init();
    libUIUI_gt_DeathTimerPanelUpdate_Init();
    libUIUI_gt_UIInitializeDebugPanel_Init();
    libUIUI_gt_UIDebugPanelCloseButtonClicked_Init();
    libUIUI_gt_UIDebugPanelRefreshCooldownsButtonClicked_Init();
    libUIUI_gt_UIDebugPanelSelectionEnabledCheckboxClicked_Init();
    libUIUI_gt_UIDebugPanelStartGameButtonClicked_Init();
    libUIUI_gt_UIDebugPanelSpawnCreepCampsButtonClicked_Init();
    libUIUI_gt_UIDebugPanelDisableMinionSpawningCheckboxClicked_Init();
    libUIUI_gt_UIDebugPanelDisableTrickleXPCheckboxClicked_Init();
    libUIUI_gt_UIDebugPanelCombatTextCheckboxClicked_Init();
    libUIUI_gt_UIDebugPanelEnableAllCombatTextCheckboxClicked_Init();
    libUIUI_gt_UIDebugPanelSavedHeroCheckboxClicked_Init();
    libUIUI_gt_UIDebugPanelRespecButtonClicked_Init();
    libUIUI_gt_UIDebugPanelPlayerSliderValueChange_Init();
    libUIUI_gt_UIDebugPanelLevelSliderValueChange_Init();
    libUIUI_gt_UIDebugPanelUseCurrentXPCheckboxClicked_Init();
    libUIUI_gt_UIDebugPanelAllHeroesCheckboxClicked_Init();
    libUIUI_gt_UIDebugPanelAllTalentsCheckboxClicked_Init();
    libUIUI_gt_UIDebugPanelSpawnAtBaseCheckboxClicked_Init();
    libUIUI_gt_UIDebugPanelHeroDropdownSelectionChange_Init();
    libUIUI_gt_UIDebugPanelSkinDropdownSelectionChange_Init();
    libUIUI_gt_UIDebugPanelMountDropdownSelectionChange_Init();
    libUIUI_gt_UIDebugPanelSpawnHeroButtonClicked_Init();
    libUIUI_gt_UIDebugPanelMetaXPEditBoxClicked_Init();
    libUIUI_gt_UIDebugPanelSendMetaXPButtonClicked_Init();
    libUIUI_gt_UIDebugPanelUpdate_Init();
    libUIUI_gt_UIDebugPanelSpawnButton_Init();
    libUIUI_gt_UIDebugPanelPlayerNumber_Init();
    libUIUI_gt_UIEndofMatchAwardsPanelInitialize_Init();
    libUIUI_gt_UIEndofMatchAwardsDisabled_Init();
    libUIUI_gt_UIEndofMatchAwardsForceSync_Init();
    libUIUI_gt_UIEndofMatchAwardsUpVoteButtonClicked_Init();
    libUIUI_gt_UIEndofMatchAwardsSkipButtonClicked_Init();
    libUIUI_gt_UIFloatingCombatTextShield_Init();
    libUIUI_gt_UIFloatingCombatTextMissed_Init();
    libUIUI_gt_UIFloatingCombatTextBlocked_Init();
    libUIUI_gt_UIFloatingCombatTextUnrevealable_Init();
    libUIUI_gt_UIFloatingCombatTextQuestProgress_Init();
    libUIUI_gt_UIFloatingCombatTextQuestProgressViaTokens_Init();
    libUIUI_gt_VignetteOverlayInitialize_Init();
    libUIUI_gt_FullscreenOverlaysInitializeRework_Init();
    libUIUI_gt_FullscreenOverlaysInitialize_Init();
    libUIUI_gt_FullscreenOverlaysDeathOverlayHideTimeExpires_Init();
    libUIUI_gt_FullscreenOverlaysSpecialOverlayHideTimeExpires_Init();
    libUIUI_gt_GameOverSplashInitialize_Init();
    libUIUI_gt_UIInitializeGameUIHandles_Init();
    libUIUI_gt_UIInitializeHealingFountainsHelpText_Init();
    libUIUI_gt_UIResetMoonwellTextTagandAnimationForPlayers_Init();
    libUIUI_gt_UIHealingFountainsHelpTextPlayerUsesHealingFountain_Init();
    libUIUI_gt_UIHealingFountainsHelpTextTextDisplayController_Init();
    libUIUI_gt_UIHealingFountainsHelpTextHealingFountainDies_Init();
    libUIUI_gt_HelpButtonDebugPosition_Init();
    libUIUI_gt_UIInitializeHeroConsole_Init();
    libUIUI_gt_HeroConsoleUnitStatusBarsInitialize_Init();
    libUIUI_gt_HeroConsoleUnitStatusBarsChannelBehaviorAdded_Init();
    libUIUI_gt_HeroConsoleUnitStatusBarsUpdate_Init();
    libUIUI_gt_GateTimerStartsHideHeroCastChannelBarFrameForObserver_Init();
    libUIUI_gt_HeroSpawnsShowHeroCastChannelBarFrame_Init();
    libUIUI_gt_FullscreenStatusPanelInitialize_Init();
    libUIUI_gt_HeroSpecificStatusContainerInitialize_Init();
    libUIUI_gt_UnitBehaviorStateActivatesInvulnerable_Init();
    libUIUI_gt_UnitBehaviorStateActivatesUnstoppable_Init();
    libUIUI_gt_UnitBehaviorStateActivatesResistant_Init();
    libUIUI_gt_UnitBehaviorStateActivatesVulnerable_Init();
    libUIUI_gt_UnitBehaviorStateActivatesDimmed_Init();
    libUIUI_gt_UnitBehaviorStateActivatesInvincible_Init();
    libUIUI_gt_UnitBehaviorStateDeactivatesInvulnerable_Init();
    libUIUI_gt_UnitBehaviorStateDeactivatesUnstoppable_Init();
    libUIUI_gt_UnitBehaviorStateDeactivatesResistant_Init();
    libUIUI_gt_UnitBehaviorStateDeactivatesVulnerable_Init();
    libUIUI_gt_UnitBehaviorStateDeactivatesDimmed_Init();
    libUIUI_gt_UnitBehaviorStateDeactivatesInvincible_Init();
    libUIUI_gt_UIInitializeHeroTrackerArrow_Init();
    libUIUI_gt_InputBackslashKeyDown_Init();
    libUIUI_gt_MapMechanicsPanelInitialize_Init();
    libUIUI_gt_MapMechanicsPanelUpdate_Init();
    libUIUI_gt_MapMechanicHelpPanelInitialize_Init();
    libUIUI_gt_MapMechanicHelpPanelOKButtonClicked_Init();
    libUIUI_gt_NotificationDisplayInitialize_Init();
    libUIUI_gt_DEBUGNotificationDisplayAnimCheat_Init();
    libUIUI_gt_UIInitializeObserverUI_Init();
    libUIUI_gt_UIObserverUIHeroDies_Init();
    libUIUI_gt_UIObserverUIHeroRespawn_Init();
    libUIUI_gt_UIObserverUIUpdate_Init();
    libUIUI_gt_PingCountResetTimerExpires_Init();
    libUIUI_gt_PingOnMyWayPingPathDisplayTimerExpires_Init();
    libUIUI_gt_PingListenForPlayerPing_Init();
    libUIUI_gt_InitializeBaseModPingData_Init();
    libUIUI_gt_PingCallbackPlayerPingsMercCamp_Init();
    libUIUI_gt_PingCallbackPlayerPingsLanerMercs_Init();
    libUIUI_gt_PingCallbackPlayerPingsLanerBossMinion_Init();
    libUIUI_gt_PingCallbackPlayerPingsLanerBossControlled_Init();
    libUIUI_gt_PingCallbackPlayerPingsWatchTower_Init();
    libUIUI_gt_PingCallbackPlayerPingsTribute_Init();
    libUIUI_gt_PingCallbackPlayerPingsDragonShrine_Init();
    libUIUI_gt_PingCallbackPlayerPingsDragonStatue_Init();
    libUIUI_gt_PingCallbackPlayerPingsUnderworldBoss_Init();
    libUIUI_gt_PingCallbackPlayerPingsUnderworldEnter_Init();
    libUIUI_gt_PingCallbackPlayerPingsUnderworldExit_Init();
    libUIUI_gt_UIInitializeTabScreenPanel_Init();
    libUIUI_gt_UIInitializeTargetInfoPanel_Init();
    libUIUI_gt_UITargetInfoPanelUpdate_Init();
    libUIUI_gt_UIInitializeTargetingHelperPanel_Init();
    libUIUI_gt_UITargetingHelperPanelUnitFrameMouseEnter_Init();
    libUIUI_gt_UITargetingHelperPanelUnitFrameMouseExit_Init();
    libUIUI_gt_UITargetingHelperPanelUpdateVisibilityForOffensiveAbilities_Init();
    libUIUI_gt_TopBarPanelInitialize_Init();
    libUIUI_gt_TopBarPanelShowPerPlayerLoop_Init();
    libUIUI_gt_XPContributionPerecentage_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libUIUI_InitLib_completed = false;

void libUIUI_InitLib () {
    if (libUIUI_InitLib_completed) {
        return;
    }

    libUIUI_InitLib_completed = true;

    libUIUI_InitLibraries();
    libUIUI_InitVariables();
    libUIUI_InitTriggers();
}

include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/MapMechanicsLib"
include "TriggerLibs/AILib"
include "TriggerLibs/StartingExperienceLib"
include "TriggerLibs/SoundLib"
include "TriggerLibs/GameDataHelperLib"
include "TriggerLibs/SupportLib"

