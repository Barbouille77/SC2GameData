include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib_h"
include "TriggerLibs/MapMechanicsLib_h"
include "TriggerLibs/AILib_h"
include "TriggerLibs/UILib_h"
include "TriggerLibs/StartingExperienceLib_h"
include "TriggerLibs/SoundLib_h"
include "TriggerLibs/GameDataHelperLib_h"
include "TriggerLibs/SupportLib_h"

include "TriggerLibs/GameLib_h"

//--------------------------------------------------------------------------------------------------
// Library: Game
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libGame_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libMapM_InitVariables();
    libAIAI_InitVariables();
    libUIUI_InitVariables();
    libStEx_InitVariables();
    libSond_InitVariables();
    libGDHL_InitVariables();
    libSprt_InitVariables();
}

// Variable Initialization
bool libGame_InitVariables_completed = false;

void libGame_InitVariables () {
    int init_i;
    int init_j;
    int init_i1;
    int init_j1;
    int init_i2;
    int init_i3;
    int init_j3;

    if (libGame_InitVariables_completed) {
        return;
    }

    libGame_InitVariables_completed = true;

    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libGame_gv_teams[init_i].lv_teamLevel = 1;
        libGame_gv_teams[init_i].lv_teamPlayerGroup = PlayerGroupEmpty();
        libGame_gv_teams[init_i].lv_teamPlayerGroupNoNPCPlayers = PlayerGroupEmpty();
        libGame_gv_teams[init_i].lv_multikillTimer = TimerCreate();
        libGame_gv_teams[init_i].lv_abandonedTheGameTimer = TimerCreate();
    }
    libGame_gv_firstBloodAvailable = true;
    libGame_gv_teamOrderCoreAlive = true;
    libGame_gv_xPTrickleEnabled = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libGame_gv_xPTrickleModifier[init_i] = 1.0;
    }
    libGame_gv_totalTime = TimerCreate();
    libGame_gv_gameTimer = TimerCreate();
    libGame_gv_matchGameplayTimer = TimerCreate();
    libGame_gv_gobalTimer = TimerCreate();
    libGame_gv_xPTrickleStartTimer = TimerCreate();
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGame_gv_afk_PlayerAfkWarningTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGame_gv_afk_PlayerAfkAltarWarningTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGame_gv_afk_PlayerAfkKickTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGame_gv_afk_PlayerStartingIdle[init_i] = true;
    }
    libGame_gv_afk_UseAFKSystem = true;
    libGame_gv_announcement_SystemEnabled = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_announcementQueue[init_i].lv_messageTimer = TimerCreate();
        for (init_i1 = 0; init_i1 <= libGame_gv_announcement_QueueMaxCount_C; init_i1 += 1) {
            libGame_gv_announcementQueue[init_i].lv_announcerVOEvent[init_i1] = libCore_ge_AnnouncerVOEvents_Null;
        }
        for (init_i1 = 0; init_i1 <= libGame_gv_announcement_QueueMaxCount_C; init_i1 += 1) {
            libGame_gv_announcementQueue[init_i].lv_animName[init_i1] = "";
        }
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_cameraFollowForced[init_i] = true;
    }
    for (init_i = 0; init_i <= libGame_gv_capturePointMaxCount_C; init_i += 1) {
        libGame_gv_capturePoints[init_i].lv_captureProgressBar = c_invalidDialogControlId;
        libGame_gv_capturePoints[init_i].lv_progressBarDimmingFrame = c_invalidDialogControlId;
        libGame_gv_capturePoints[init_i].lv_emptyPointDecay = libGame_ge_CapturePointDecay_Owner;
        libGame_gv_capturePoints[init_i].lv_contestedPointDecay = libGame_ge_CapturePointDecay_DoNotDecay;
    }
    libGame_gv_capturePointLastCreatedCapturePointIndex_C = "CapturePointLastCreatedCapturePointIndex";
    libGame_gv_towerMapPlaysCoreWarning = true;
    libGame_gv_towerMainCoreAlertTimer = TimerCreate();
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        libGame_gv_towerTeamCoreAlertTimer[init_i] = TimerCreate();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libGame_gv_deathRecap_MaxEffectBars_C; init_i1 += 1) {
            libGame_gv_deathRecap_DeathData[init_i].lv_effectBars[init_i1].lv_debugString = "";
        }
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGame_gv_mVPStats[init_i].lv_role = c_heroRoleWarrior;
        libGame_gv_mVPStats[init_i].lv_mvpRoles = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        for (init_j = 0; init_j <= libGame_gv_secondaryAwardCount; init_j += 1) {
            libGame_gv_playerAwardEligibility[init_i][init_j].lv_awardBadgeIndex = "";
            libGame_gv_playerAwardEligibility[init_i][init_j].lv_presentasRatio = true;
            libGame_gv_playerAwardEligibility[init_i][init_j].lv_weightModifier = 1.0;
        }
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        for (init_j = 0; init_j <= libGame_gv_secondaryAwardCount; init_j += 1) {
            libGame_gv_teamAwardTotalValues[init_i][init_j] = 0.01;
        }
    }
    for (init_i = 0; init_i <= libGame_gv_secondaryAwardCount; init_i += 1) {
        libGame_gv_initialSecondaryAwardsList[init_i].lv_awardBadgeIndex = "";
        libGame_gv_initialSecondaryAwardsList[init_i].lv_presentasRatio = true;
        libGame_gv_initialSecondaryAwardsList[init_i].lv_weightModifier = 1.0;
    }
    for (init_i = 0; init_i <= libGame_gv_secondaryAwardSlotCount; init_i += 1) {
        libGame_gv_finalSecondaryAwardsList[init_i].lv_awardBadgeIndex = "";
        libGame_gv_finalSecondaryAwardsList[init_i].lv_presentasRatio = true;
        libGame_gv_finalSecondaryAwardsList[init_i].lv_weightModifier = 1.0;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGame_gv_escapeTrackingHeroReducedtoLowHealthUnitGroup[init_i] = UnitGroupEmpty();
    }
    libGame_gv_minionSpawnStartTimer = TimerCreate();
    libGame_gv_openTheGatesTimer = TimerCreate();
    libGame_gv_jungleWatchTowerStartTimer = TimerCreate();
    libGame_gv_heroSpawnReady = true;
    libGame_gv_gateTimerReady = true;
    libGame_gv_randomizeMountsAndSkins = true;
    libGame_gv_gameOver_CameraPanTime_C = 2.0;
    libGame_gv_dEBUG_PercentScalingEnabled = true;
    libGame_gv_heroDeath_UpdateStats = true;
    libGame_gv_heroDeath_RespawnMounted = true;
    libGame_gv_heroDeath_RunDeathUIUpdates = true;
    libGame_gv_heroDeathMultikillTimerEnabled = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
            libGame_gv_heroDeathKillStingerQueue[init_i].lv_killStingerTimer[init_i1] = TimerCreate();
        }
        for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
            libGame_gv_heroDeathKillStingerQueue[init_i].lv_nextPlayIndex[init_i1] = 1;
        }
        for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
            for (init_j1 = 0; init_j1 <= libCore_gv_bALMaxPlayersOnATeam; init_j1 += 1) {
                libGame_gv_heroDeathKillStingerQueue[init_i].lv_soundQueue[init_i1][init_j1] = SoundLink("EditorDefaultSound", -1);
            }
        }
    }
    for (init_i = 0; init_i <= libGame_gv_laneMaxCount_C; init_i += 1) {
        for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
            libGame_gv_laneData[init_i].lv_minionCompositions[init_i1] = libCore_ge_MinionWaveCompositionsTypes_Standard;
        }
        for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
            libGame_gv_laneData[init_i].lv_bruiserMinionLevel[init_i1] = 1;
        }
        libGame_gv_laneData[init_i].lv_minionSpawningEnabled = true;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_stormMapHeroDeathOverlay[init_i] = c_invalidDialogControlId;
    }
    libGame_gv_minionSpawningEnabled = true;
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libGame_gv_minion_CatapultGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxTeams; init_i += 1) {
        for (init_j = 0; init_j <= 3; init_j += 1) {
            libGame_gv_minion_SpawnStaggeredCatapult[init_i][init_j] = true;
        }
    }
    libGame_gv_minionScalingEnabled = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        for (init_j = 0; init_j <= libGame_gv_moonwellMaxMoonwellCount; init_j += 1) {
            libGame_gv_moonwellTextTags[init_i][init_j] = c_textTagNone;
        }
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libGame_gv_moonwellTextTagsUnitGroup[init_i] = UnitGroupEmpty();
    }
    libGame_gv_townDestructionRemovesCoreInvulnerable = true;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libGame_gv_players[init_i].lv_playerStatus = libGame_ge_PlayerStatusStorm_Unused;
        libGame_gv_players[init_i].lv_victoryDefeat = c_gameOverTie;
        libGame_gv_players[init_i].lv_heroUnitGroup = UnitGroupEmpty();
        libGame_gv_players[init_i].lv_summonedUnitGroup = UnitGroupEmpty();
        libGame_gv_players[init_i].lv_gravestoneTextTag = c_textTagNone;
        libGame_gv_players[init_i].lv_cameraPlayerUnitGroupToFocusOn = UnitGroupEmpty();
        libGame_gv_players[init_i].lv_cameraCurrentTargetGroup = UnitGroupEmpty();
        libGame_gv_players[init_i].lv_cameraPlayerHasControl = true;
        libGame_gv_players[init_i].lv_vOSoundSuffix = "";
        libGame_gv_players[init_i].lv_soundDeathAlertPrefix = "UI_HeroDeath_Gen_";
        libGame_gv_players[init_i].lv_selectedMount = 1;
        libGame_gv_players[init_i].lv_selectedSkin = 1;
        libGame_gv_players[init_i].lv_respawnTimer = TimerCreate();
        libGame_gv_players[init_i].lv_respawnSoundCueTimer = TimerCreate();
        libGame_gv_players[init_i].lv_deathToastTimer = TimerCreate();
        libGame_gv_players[init_i].lv_recentDamageResetTimer = TimerCreate();
        libGame_gv_players[init_i].lv_multikillTimer = TimerCreate();
        libGame_gv_players[init_i].lv_bribeChargeStackRequirement = 20;
        libGame_gv_players[init_i].lv_bribeTokenLink = "TalentBribeTokenCounter";
        libGame_gv_players[init_i].lv_heroSpawnReady = true;
        libGame_gv_players[init_i].lv_playerLeftAnnouncementTimer = TimerCreate();
        libGame_gv_players[init_i].lv_heroData.lv_class = c_heroRoleWarrior;
        libGame_gv_players[init_i].lv_heroData.lv_heroRoles = PlayerGroupEmpty();
        libGame_gv_players[init_i].lv_heroData.lv_universe = c_heroUniverseWarcraft;
        libGame_gv_players[init_i].lv_heroData.lv_gender = c_heroGenderMale;
        for (init_i2 = 0; init_i2 <= libCore_gv_dataHeroesMaxAbilitiesPerHero; init_i2 += 1) {
            libGame_gv_players[init_i].lv_heroData.lv_abilities[init_i2].lv_isAffectedByOverdrive = true;
        }
        libGame_gv_players[init_i].lv_heroData.lv_introCutsceneSize = c_heroCutsceneSizeSmall;
        for (init_i3 = 0; init_i3 <= libCore_gv_dataHeroesMaxAbilitiesPerHero; init_i3 += 1) {
            for (init_j3 = 0; init_j3 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j3 += 1) {
                libGame_gv_players[init_i].lv_heroData.lv_levelUpModificationData.lv_catalog[init_i3][init_j3] = c_gameCatalogUnit;
            }
        }
        for (init_i3 = 0; init_i3 <= libCore_gv_dataHeroesMaxAbilitiesPerHero; init_i3 += 1) {
            for (init_j3 = 0; init_j3 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j3 += 1) {
                libGame_gv_players[init_i].lv_heroData.lv_levelUpModificationData.lv_entry[init_i3][init_j3] = "";
            }
        }
        for (init_i3 = 0; init_i3 <= libCore_gv_dataHeroesMaxAbilitiesPerHero; init_i3 += 1) {
            for (init_j3 = 0; init_j3 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j3 += 1) {
                libGame_gv_players[init_i].lv_heroData.lv_levelUpModificationData.lv_field[init_i3][init_j3] = "";
            }
        }
        for (init_i3 = 0; init_i3 <= libCore_gv_dataHeroesMaxAbilitiesPerHero; init_i3 += 1) {
            for (init_j3 = 0; init_j3 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j3 += 1) {
                libGame_gv_players[init_i].lv_heroData.lv_levelUpModificationData.lv_affectedByAbilityPower[init_i3][init_j3] = true;
            }
        }
        for (init_i3 = 0; init_i3 <= libCore_gv_dataHeroesMaxAbilitiesPerHero; init_i3 += 1) {
            for (init_j3 = 0; init_j3 <= libCore_gv_dataMaxCatalogChangesPerAbility; init_j3 += 1) {
                libGame_gv_players[init_i].lv_heroData.lv_levelUpModificationData.lv_percentScaled[init_i3][init_j3] = true;
            }
        }
        for (init_i2 = 0; init_i2 <= libCore_gv_data_MaxHeroAllowedMountCategories_C; init_i2 += 1) {
            libGame_gv_players[init_i].lv_heroData.lv_allowedMountCategories[init_i2] = "";
        }
        libGame_gv_players[init_i].lv_heroData.lv_dEBUGPlayable = true;
        for (init_i2 = 0; init_i2 <= libCore_gv_dataSkinsMaxActorMessageCount; init_i2 += 1) {
            libGame_gv_players[init_i].lv_skinData.lv_actorMessageArray[init_i2] = "";
        }
        for (init_i2 = 0; init_i2 <= libCore_gv_data_MaxSkinAllowedMountCategories_C; init_i2 += 1) {
            libGame_gv_players[init_i].lv_skinData.lv_allowedMountCategories[init_i2] = "";
        }
        libGame_gv_players[init_i].lv_mountData.lv_mountModel = "HorseMount";
        libGame_gv_players[init_i].lv_mountData.lv_mountModelScale = 1.0;
        libGame_gv_players[init_i].lv_mountData.lv_mountModelWalkAnimMoveSpeed = 4.5;
        libGame_gv_players[init_i].lv_mountData.lv_mountPoseAnimGroup = "Ride";
        libGame_gv_players[init_i].lv_mountData.lv_mountPoseAnimGroupStatus = "Ride";
        for (init_i2 = 0; init_i2 <= libCore_gv_dataMountsMaxActorMessageCount; init_i2 += 1) {
            libGame_gv_players[init_i].lv_mountData.lv_actorMessageArray[init_i2] = "";
        }
        libGame_gv_players[init_i].lv_mountData.lv_category = "";
    }
    libGame_gv_heroes = UnitGroupEmpty();
    libGame_gv_scalingTimer = TimerCreate();
    libGame_gv_buildingScaling.lv_l2_Tower_Health = 110.0;
    libGame_gv_buildingScaling.lv_l2_Tower_Damage = 4.0;
    libGame_gv_buildingScaling.lv_l2_TownHall_Health = 330.0;
    libGame_gv_buildingScaling.lv_l2_TownHall_Damage = 6.0;
    libGame_gv_buildingScaling.lv_l2_Gate_Health = 135.0;
    libGame_gv_buildingScaling.lv_l2_Wall_Health = 52.0;
    libGame_gv_buildingScaling.lv_l2_HealingFountain_Health = 48.75;
    libGame_gv_buildingScaling.lv_l2_HealingFountain_Shields = 16.25;
    libGame_gv_buildingScaling.lv_l3_Tower_Health = 220.0;
    libGame_gv_buildingScaling.lv_l3_Tower_Damage = 7.5;
    libGame_gv_buildingScaling.lv_l3_TownHall_Health = 665.0;
    libGame_gv_buildingScaling.lv_l3_TownHall_Damage = 10.0;
    libGame_gv_buildingScaling.lv_l3_Gate_Health = 254.0;
    libGame_gv_buildingScaling.lv_l3_Wall_Health = 100.0;
    libGame_gv_buildingScaling.lv_l3_HealingFountain_Health = 97.5;
    libGame_gv_buildingScaling.lv_l3_HealingFountain_Shields = 32.5;
    libGame_gv_bALScalingTimerDuration = 60.0;
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        for (init_j = 0; init_j <= libCore_gv_talents_MaxTiers_C; init_j += 1) {
            for (init_i1 = 0; init_i1 <= libCore_gv_talents_MaxTalentsPerTier_C; init_i1 += 1) {
                for (init_i2 = 0; init_i2 <= libCore_gv_talents_MaxModificationsPerTalent_C; init_i2 += 1) {
                    libGame_gv_talents_TalentChoices[init_i][init_j].lv_talentData[init_i1].lv_abilityModificationData[init_i2].lv_changeType = c_talentModificationNone;
                    libGame_gv_talents_TalentChoices[init_i][init_j].lv_talentData[init_i1].lv_abilityModificationData[init_i2].lv_catalog = c_gameCatalogUnit;
                    libGame_gv_talents_TalentChoices[init_i][init_j].lv_talentData[init_i1].lv_abilityModificationData[init_i2].lv_entry = "";
                    libGame_gv_talents_TalentChoices[init_i][init_j].lv_talentData[init_i1].lv_abilityModificationData[init_i2].lv_field = "";
                    libGame_gv_talents_TalentChoices[init_i][init_j].lv_talentData[init_i1].lv_abilityModificationData[init_i2].lv_stringReplacementValue = "";
                    libGame_gv_talents_TalentChoices[init_i][init_j].lv_talentData[init_i1].lv_abilityModificationData[init_i2].lv_catalogReplaceFrom = "";
                    libGame_gv_talents_TalentChoices[init_i][init_j].lv_talentData[init_i1].lv_abilityModificationData[init_i2].lv_catalogChangeTo = "";
                }
            }
        }
    }
    libGame_gv_talents_PlayChooseATalentSound = true;
    for (init_i = 0; init_i <= libGame_gv_townMaxTownCount; init_i += 1) {
        libGame_gv_townTownData[init_i].lv_townHallIndex = -1;
    }
    libGame_gv_baseRepulserFieldLaunchDistance = 12.0;
    libGame_gv_baseRepulserFieldLaunchCutoffDistance = -1.0;
    libGame_gv_townBasicMinimapHealthMontior = true;
    libGame_gv_vehicleDragonKnightBullRushLaunchDistance = -30.0;
    libGame_gv_vehicleDragonKnightBullRushCutoffDistance = -1.0;
    for (init_i = 0; init_i <= libGame_gv_watchTowersMaxCount; init_i += 1) {
        libGame_gv_watchTowers[init_i].lv_enabled = true;
    }
}

// Presets
string libGame_ge_BehaviorCategoriesStorm_Ident (int lp_val) {
         if (lp_val == c_behaviorCategoryQuest) { return "Quest"; }
    else if (lp_val == c_behaviorCategoryFear) { return "DebuffFear"; }
    else if (lp_val == c_behaviorCategoryPermanent) { return "CategoryPermanent"; }
    else if (lp_val == c_behaviorCategoryRestorable) { return "CategoryRestorable"; }
    else if (lp_val == c_behaviorCategoryTemporary) { return "CategoryTemporary"; }
    else if (lp_val == c_behaviorCategoryCloak) { return "BuffCloak"; }
    else if (lp_val == c_behaviorCategoryInvulnerable) { return "BuffInvulnerable"; }
    else if (lp_val == c_behaviorCategorySlow) { return "DebuffMovementSpeed"; }
    else if (lp_val == c_behaviorCategoryFast) { return "BuffMovementSpeed"; }
    else if (lp_val == c_behaviorCategoryStun) { return "DebuffStun"; }
    else if (lp_val == c_behaviorCategoryReveal) { return "DebuffRevealed"; }
    else if (lp_val == c_behaviorCategoryCleansable) { return "Cleansable"; }
    else if (lp_val == c_behaviorCategoryTimeStop) { return "TimeStop"; }
    else if (lp_val == c_behaviorCategoryProtected) { return "BuffProtected"; }
    else if (lp_val == c_behaviorCategoryUser1) { return "BuffUnstoppable"; }
    else if (lp_val == c_behaviorCategoryUser2) { return "BuffResistant"; }
    else if (lp_val == c_behaviorCategoryUser3) { return "BuffAutoattackDPS"; }
    else if (lp_val == c_behaviorCategoryUser4) { return "BuffAbilityPower"; }
    else if (lp_val == c_behaviorCategoryUser5) { return "DebuffRoot"; }
    else if (lp_val == c_behaviorCategoryUser6) { return "DebuffStasis"; }
    else if (lp_val == c_behaviorCategoryUser7) { return "DebuffSilence"; }
    else if (lp_val == c_behaviorCategoryUser8) { return "DebuffBlind"; }
    else if (lp_val == c_behaviorCategoryUser9) { return "DebuffVulnerable"; }
    else if (lp_val == c_behaviorCategoryUser10) { return "DebuffAutoattackDPS"; }
    else if (lp_val == c_behaviorCategoryUser11) { return "BuffTemporaryMaxHealthIncrease"; }
    else if (lp_val == c_behaviorCategoryUser12) { return "BuffPermanentMaxHealthIncrease"; }
    else if (lp_val == c_behaviorCategoryUser13) { return "SpecialDeathState"; }
    else if (lp_val == c_behaviorCategoryUser14) { return "DebuffDamageOverTime"; }
    else if (lp_val == c_behaviorCategoryUser15) { return "PushorPullEffect"; }
    else if (lp_val == c_behaviorCategoryUser15+1) { return "Any"; }
    return null;
}

// Functions
playergroup libGame_gf_PlayersOnTeamHeroes (int lp_team, bool lp_nPCOption) {
    // Implementation
    if (((lp_team < 1) || (lp_team > 2))) {
        TextExpressionSetToken("Param/Expression/lib_Game_5BFD415E", "A", IntToText(lp_team));
        UIDisplayMessage(PlayerGroupAll(), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Game_5BFD415E"));
        return PlayerGroupEmpty();
    }

    if ((lp_nPCOption == true)) {
        return PlayerGroupCopy(libGame_gv_teams[lp_team].lv_teamPlayerGroup);
    }
    else {
        return PlayerGroupCopy(libGame_gv_teams[lp_team].lv_teamPlayerGroupNoNPCPlayers);
    }
}

void libGame_gf_SetXPTrickleModifier (fixed lp_modifier) {
    int auto3747A5AE_ae;
    int auto3747A5AE_ai;

    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Implementation
    auto3747A5AE_ae = libCore_gv_bALMaxTeams;
    auto3747A5AE_ai = 1;
    lv_team = 1;
    for ( ; ( (auto3747A5AE_ai >= 0 && lv_team <= auto3747A5AE_ae) || (auto3747A5AE_ai <= 0 && lv_team >= auto3747A5AE_ae) ) ; lv_team += auto3747A5AE_ai ) {
        libGame_gv_xPTrickleModifier[lv_team] = lp_modifier;
    }
}

trigger auto_libGame_gf_AfkStartAfkWarningSystem_Trigger = null;
bool auto_libGame_gf_AfkStartAfkWarningSystem_lp_instantly;

void libGame_gf_AfkStartAfkWarningSystem (bool lp_instantly) {
    auto_libGame_gf_AfkStartAfkWarningSystem_lp_instantly = lp_instantly;

    if (auto_libGame_gf_AfkStartAfkWarningSystem_Trigger == null) {
        auto_libGame_gf_AfkStartAfkWarningSystem_Trigger = TriggerCreate("auto_libGame_gf_AfkStartAfkWarningSystem_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_AfkStartAfkWarningSystem_Trigger, false, false);
}

bool auto_libGame_gf_AfkStartAfkWarningSystem_TriggerFunc (bool testConds, bool runActions) {
    bool lp_instantly = auto_libGame_gf_AfkStartAfkWarningSystem_lp_instantly;

    int autoD4DF3A59_ae;
    int autoD4DF3A59_ai;
    int auto4A9D701E_ae;
    int auto4A9D701E_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_afk_DebugOn == false) && (GameIsMatchmade() == false)) {
        libGame_gv_afk_AfkDetectionSystemSkipped = true;
        return true;
    }

    if ((libGame_gv_afk_AfkDetectionSystemEnabled == true)) {
        return true;
    }

    libGame_gv_afk_AfkDetectionSystemEnabled = true;
    TriggerEnable(libGame_gt_AfkInAltarDetection, true);
    autoD4DF3A59_ae = libCore_gv_bALMaxPlayers;
    autoD4DF3A59_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoD4DF3A59_ai >= 0 && lv_itPlayer <= autoD4DF3A59_ae) || (autoD4DF3A59_ai <= 0 && lv_itPlayer >= autoD4DF3A59_ae) ) ; lv_itPlayer += autoD4DF3A59_ai ) {
        libGame_gf_AfkResetAltarTimerForPlayer(lv_itPlayer);
    }
    if ((lp_instantly == false)) {
        Wait(libGame_gv_afk_AfkInitialTimerStartDelay_C, c_timeGame);
    }

    TriggerEnable(libGame_gt_AfkCheckPlayerScoreValuesForActivity, true);
    TriggerEnable(libGame_gt_AfkCheckPlayerCloseToMapMechanic, true);
    TriggerEnable(libGame_gt_AFKCheckPlayerEnteredVehicle, true);
    auto4A9D701E_ae = libCore_gv_bALMaxPlayers;
    auto4A9D701E_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto4A9D701E_ai >= 0 && lv_itPlayer <= auto4A9D701E_ae) || (auto4A9D701E_ai <= 0 && lv_itPlayer >= auto4A9D701E_ae) ) ; lv_itPlayer += auto4A9D701E_ai ) {
        if ((PlayerStatus(lv_itPlayer) == c_playerStatusActive) && (PlayerType(lv_itPlayer) == c_playerTypeUser)) {
            TimerStart(libGame_gv_afk_PlayerAfkWarningTimer[lv_itPlayer], libGame_gv_afk_AfkWarningTimerDuration_C, false, c_timeGame);
        }

    }
    return true;
}

void libGame_gf_AfkResetAltarTimerForPlayer (int lp_player) {
    // Implementation
    if (((libGame_gv_players[lp_player].lv_isDead == true) || (libGame_gv_afk_AfkDetectionSystemEnabled == false) || (UnitGetType(libGame_gv_players[lp_player].lv_heroUnit) == "HeroGall") || (UnitGetType(libGame_gv_players[lp_player].lv_heroUnit) == "HeroAbathur"))) {
        return ;
    }

    TimerStart(libGame_gv_afk_PlayerAfkAltarWarningTimer[lp_player], libGame_gv_afk_AfkInAltarTimerDuration_C, false, c_timeGame);
}

void libGame_gf_AfkResetWarningTimerForPlayer (int lp_player) {
    // Implementation
    if (((libGame_gv_players[lp_player].lv_isDead == true) || (libGame_gv_afk_AfkDetectionSystemEnabled == false) || (libGame_gv_players[lp_player].lv_heroData.lv_heroCatalogLink == "Gall"))) {
        return ;
    }

    libGame_gv_afk_PlayerAfkWarning[lp_player] = false;
    libGame_gf_AfkResetAltarTimerForPlayer(lp_player);
    TimerStart(libGame_gv_afk_PlayerAfkWarningTimer[lp_player], libGame_gv_afk_AfkWarningTimerDuration_C, false, c_timeGame);
    TimerPause(libGame_gv_afk_PlayerAfkKickTimer[lp_player], true);
}

void libGame_gf_AfkPauseWarningTimerForPlayer (int lp_player, bool lp_pauseOption) {
    // Implementation
    if ((lp_player <= libCore_gv_bALMaxPlayers) && (lp_player > 0)) {
        TimerPause(libGame_gv_afk_PlayerAfkWarningTimer[lp_player], lp_pauseOption);
        TimerPause(libGame_gv_afk_PlayerAfkAltarWarningTimer[lp_player], lp_pauseOption);
        TimerPause(libGame_gv_afk_PlayerAfkKickTimer[lp_player], lp_pauseOption);
    }

}

void libGame_gf_AfkResumeWarningTimerForPlayer (int lp_player) {
    // Implementation
    if ((libGame_gv_afk_UseBrawlAFKSystem == false)) {
        libGame_gf_AfkResetWarningTimerForPlayer(lp_player);
    }
    else {
        libGame_gf_AFKBrawlResetWarningTimerForPlayer(lp_player);
    }
}

void libGame_gf_AfkKickPlayer (int lp_player) {
    // Implementation
    if (((libGame_gv_afk_DebugOn == true) || (libCore_gv_dEBUGDebuggingEnabled == false))) {
        if ((PlayerStatus(lp_player) == c_playerStatusActive) && (PlayerType(lp_player) == c_playerTypeUser)) {
            TextExpressionSetToken("Param/Expression/lib_Game_9D7B4265", "A", PlayerName(lp_player));
            UIDisplayMessage(PlayerGroupAlliance(c_playerGroupAlly, lp_player), c_messageAreaSubtitle, TextExpressionAssemble("Param/Expression/lib_Game_9D7B4265"));
        }

        KickFromGame(libCore_gv_playerGroupFromPlayer[lp_player]);
    }

}

void libGame_gf_AfkResetMapMechanicLocations () {
    // Implementation
    libGame_gv_afk_PlayerAfkMapMechanicLocationCount = 0;
}

void libGame_gf_AfkAddMapMechanicLocation (point lp_point) {
    // Implementation
    libGame_gv_afk_PlayerAfkMapMechanicLocationCount += 1;
    libGame_gv_afk_PlayerAfkMapMechanicLocations[libGame_gv_afk_PlayerAfkMapMechanicLocationCount] = lp_point;
}

trigger auto_libGame_gf_AFKBrawlStartAfkWarningSystem_Trigger = null;
bool auto_libGame_gf_AFKBrawlStartAfkWarningSystem_lp_instantly;

void libGame_gf_AFKBrawlStartAfkWarningSystem (bool lp_instantly) {
    auto_libGame_gf_AFKBrawlStartAfkWarningSystem_lp_instantly = lp_instantly;

    if (auto_libGame_gf_AFKBrawlStartAfkWarningSystem_Trigger == null) {
        auto_libGame_gf_AFKBrawlStartAfkWarningSystem_Trigger = TriggerCreate("auto_libGame_gf_AFKBrawlStartAfkWarningSystem_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_AFKBrawlStartAfkWarningSystem_Trigger, false, false);
}

bool auto_libGame_gf_AFKBrawlStartAfkWarningSystem_TriggerFunc (bool testConds, bool runActions) {
    bool lp_instantly = auto_libGame_gf_AFKBrawlStartAfkWarningSystem_lp_instantly;

    int autoE9241D6A_ae;
    int autoE9241D6A_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    libGame_gv_afk_AfkDetectionSystemEnabled = true;
    if ((lp_instantly == false)) {
        Wait(libGame_gv_afk_AfkInitialTimerStartDelay_C, c_timeGame);
    }

    libGame_gf_AFKBrawlTurnDetectionTriggersOnOff(true);
    autoE9241D6A_ae = libCore_gv_bALMaxPlayers;
    autoE9241D6A_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoE9241D6A_ai >= 0 && lv_itPlayer <= autoE9241D6A_ae) || (autoE9241D6A_ai <= 0 && lv_itPlayer >= autoE9241D6A_ae) ) ; lv_itPlayer += autoE9241D6A_ai ) {
        if ((PlayerStatus(lv_itPlayer) == c_playerStatusActive) && (PlayerType(lv_itPlayer) == c_playerTypeUser)) {
            TimerStart(libGame_gv_afk_PlayerAfkWarningTimer[lv_itPlayer], libGame_gv_afkBrawl_AfkWarningTimerDuration_C, false, c_timeGame);
        }

    }
    return true;
}

void libGame_gf_AFKBrawlResetWarningTimerForPlayer (int lp_player) {
    // Implementation
    if (((libGame_gv_players[lp_player].lv_isDead == true) || (libGame_gv_afk_AfkDetectionSystemEnabled == false) || (libGame_gv_players[lp_player].lv_heroData.lv_heroCatalogLink == "Gall") || (PlayerType(lp_player) != c_playerTypeUser))) {
        return ;
    }

    libGame_gv_afk_PlayerAfkWarning[lp_player] = false;
    TimerStart(libGame_gv_afk_PlayerAfkWarningTimer[lp_player], libGame_gv_afkBrawl_AfkWarningTimerDuration_C, false, c_timeGame);
    TimerPause(libGame_gv_afk_PlayerAfkKickTimer[lp_player], true);
}

void libGame_gf_AFKBrawlPauseWarningTimerForPlayer (int lp_player, bool lp_pauseOption) {
    // Implementation
    if ((lp_player <= libCore_gv_bALMaxPlayers) && (lp_player > 0)) {
        TimerPause(libGame_gv_afk_PlayerAfkWarningTimer[lp_player], lp_pauseOption);
        TimerPause(libGame_gv_afk_PlayerAfkKickTimer[lp_player], lp_pauseOption);
    }

}

void libGame_gf_AFKBrawlTurnDetectionTriggersOnOff (bool lp_onOff) {
    // Implementation
    TriggerEnable(libGame_gt_AFKBrawlCheckPlayerDamagedUnit, lp_onOff);
    TriggerEnable(libGame_gt_AFKBrawlCheckPlayerHealedUnit, lp_onOff);
    TriggerEnable(libGame_gt_AfkCheckPlayerCloseToMapMechanic, lp_onOff);
    if ((libGame_gv_afk_BrawlAfkAccountsForAbilities == true)) {
        TriggerEnable(libGame_gt_AFKBrawlCheckPlayerUsedAbility, lp_onOff);
    }

}

void libGame_gf_AnnouncementAddItemForPlayerGroup (playergroup lp_playerGroup, int lp_priority, int lp_vOEvent, string lp_animName, text lp_textParam1, text lp_textParam2, text lp_textParam3, text lp_textParam4, fixed lp_duration, bool lp_isKillAnnouncement) {
    playergroup autoE0D6CA2B_g;
    int autoE0D6CA2B_p;
    int auto52665968_ae;
    int auto52665968_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itQueuePosition;
    int lv_priorityInt;
    int lv_desiredPosition;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_announcement_SystemEnabled == false)) {
        return ;
    }

    autoE0D6CA2B_g = lp_playerGroup; 
    autoE0D6CA2B_p = 1;
    for ( ; autoE0D6CA2B_p <= PlayerGroupCount(autoE0D6CA2B_g) ; autoE0D6CA2B_p += (lv_itPlayer == PlayerGroupPlayer(autoE0D6CA2B_g, autoE0D6CA2B_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoE0D6CA2B_g, autoE0D6CA2B_p);
        if (((lv_itPlayer <= libCore_gv_bALMaxPlayers) || (lv_itPlayer == libCore_gv_oBSERVER_ObserverUIPlayer))) {
            if ((libGame_gv_announcementQueue[lv_itPlayer].lv_numberOfItemsInQueue >= libGame_gv_announcement_QueueMaxCount_C)) {
                TextExpressionSetToken("Param/Expression/lib_Game_23567997", "A", IntToText(lv_itPlayer));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_23567997"), true);
                continue;
            }

            if ((libMapM_gf_MapMechanicIntroFinished(lv_itPlayer) == false)) {
                return ;
            }

            lv_priorityInt = (lp_priority);
            lv_desiredPosition = 0;
            if ((libGame_gv_announcementQueue[lv_itPlayer].lv_numberOfItemsInQueue == 0)) {
                lv_desiredPosition = 1;
            }
            else {
                auto52665968_ae = libGame_gv_announcementQueue[lv_itPlayer].lv_numberOfItemsInQueue;
                auto52665968_ai = 1;
                lv_itQueuePosition = 1;
                for ( ; ( (auto52665968_ai >= 0 && lv_itQueuePosition <= auto52665968_ae) || (auto52665968_ai <= 0 && lv_itQueuePosition >= auto52665968_ae) ) ; lv_itQueuePosition += auto52665968_ai ) {
                    if ((libGame_gv_announcementQueue[lv_itPlayer].lv_priority[lv_itQueuePosition] > lv_priorityInt)) {
                        lv_desiredPosition = lv_itQueuePosition;
                        break;
                    }

                }
                if ((lv_desiredPosition == 0)) {
                    lv_desiredPosition = (libGame_gv_announcementQueue[lv_itPlayer].lv_numberOfItemsInQueue + 1);
                }

            }
            libGame_gf_AnnouncementInsertItemIntoQueueForPlayer(lv_itPlayer, lp_priority, lp_vOEvent, lp_animName, lp_textParam1, lp_textParam2, lp_textParam3, lp_textParam4, lp_duration, lv_desiredPosition, lp_isKillAnnouncement);
            if ((TimerGetRemaining(libGame_gv_announcementQueue[lv_itPlayer].lv_messageTimer) <= 0.0)) {
                libGame_gf_AnnouncementPlayNextItemForPlayer(lv_itPlayer);
            }
            else {
                if ((lp_isKillAnnouncement == true) && (TimerGetRemaining(libGame_gv_announcementQueue[lv_itPlayer].lv_messageTimer) > libGame_gv_announcement_KillAnnouncementTimerThreshold_C)) {
                    TimerStart(libGame_gv_announcementQueue[lv_itPlayer].lv_messageTimer, libGame_gv_announcement_KillAnnouncementTimerThreshold_C, false, c_timeGame);
                }

            }
        }

    }
}

void libGame_gf_AnnouncementClearQueueForPlayer (int lp_player) {
    // Variable Declarations
    int lv_itAnnouncement;
    fixed lv_duration;

    // Variable Initialization

    // Implementation
    libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue = 0;
}

void libGame_gf_AnnouncementInsertItemIntoQueueForPlayer (int lp_player, int lp_priority, int lp_vOEvent, string lp_animName, text lp_textParam1, text lp_textParam2, text lp_textParam3, text lp_textParam4, fixed lp_duration, int lp_desiredInsertPosition, bool lp_isKillAnnouncement) {
    int autoE8F74CBA_ae;
    int autoE8F74CBA_ai;

    // Variable Declarations
    int lv_itQueuePosition;
    int lv_insertPosition;

    // Variable Initialization

    // Implementation
    if (((lp_player < 0) || (lp_player > libCore_gv_bALMaxEnginePlayerCount))) {
        TextExpressionSetToken("Param/Expression/lib_Game_7F7F0A0F", "A", IntToText(lv_insertPosition));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_7F7F0A0F"), true);
        return ;
    }

    if ((lp_desiredInsertPosition > libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue)) {
        if (((libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue + 1) >= 0)) {
            libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue += 1;
            lv_insertPosition = libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue;
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_Game_903C6722", "A", IntToText(lv_insertPosition));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_903C6722"), true);
            return ;
        }
    }
    else {
        autoE8F74CBA_ae = lp_desiredInsertPosition;
        autoE8F74CBA_ai = -1;
        lv_itQueuePosition = libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue;
        for ( ; ( (autoE8F74CBA_ai >= 0 && lv_itQueuePosition <= autoE8F74CBA_ae) || (autoE8F74CBA_ai <= 0 && lv_itQueuePosition >= autoE8F74CBA_ae) ) ; lv_itQueuePosition += autoE8F74CBA_ai ) {
            libGame_gv_announcementQueue[lp_player].lv_priority[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_priority[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_animName[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_animName[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_textParam1[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_textParam1[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_textParam2[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_textParam2[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_textParam3[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_textParam3[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_textParam4[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_textParam4[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_duration[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_duration[lv_itQueuePosition];
            libGame_gv_announcementQueue[lp_player].lv_isKillAnnouncement[(lv_itQueuePosition + 1)] = libGame_gv_announcementQueue[lp_player].lv_isKillAnnouncement[lv_itQueuePosition];
        }
        libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue += 1;
        lv_insertPosition = lp_desiredInsertPosition;
    }
    libGame_gv_announcementQueue[lp_player].lv_priority[lv_insertPosition] = (lp_priority);
    libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[lv_insertPosition] = lp_vOEvent;
    libGame_gv_announcementQueue[lp_player].lv_animName[lv_insertPosition] = lp_animName;
    libGame_gv_announcementQueue[lp_player].lv_textParam1[lv_insertPosition] = lp_textParam1;
    libGame_gv_announcementQueue[lp_player].lv_textParam2[lv_insertPosition] = lp_textParam2;
    libGame_gv_announcementQueue[lp_player].lv_textParam3[lv_insertPosition] = lp_textParam3;
    libGame_gv_announcementQueue[lp_player].lv_textParam4[lv_insertPosition] = lp_textParam4;
    libGame_gv_announcementQueue[lp_player].lv_duration[lv_insertPosition] = lp_duration;
    libGame_gv_announcementQueue[lp_player].lv_isKillAnnouncement[lv_insertPosition] = lp_isKillAnnouncement;
}

void libGame_gf_AnnouncementSetTextOnAnnouncementFrameLabelsForPlayer (int lp_player, string lp_animName, text lp_textParam1, text lp_textParam2, text lp_textParam3, text lp_textParam4) {
    string auto8A8FE4F2_val;

    // Implementation
    auto8A8FE4F2_val = lp_animName;
    if (auto8A8FE4F2_val == "ShowStandardNotification") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_standardNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_standardNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (auto8A8FE4F2_val == "ShowEnemyNotification") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_enemyNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_enemyNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (auto8A8FE4F2_val == "ShowTutorialNotification") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_tutorialNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_tutorialNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (auto8A8FE4F2_val == "ShowTimedNotification_Tier1") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_doubleKillNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_doubleKillNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (auto8A8FE4F2_val == "ShowTimedNotification_Tier2") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_tripleKillNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_tripleKillNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (auto8A8FE4F2_val == "ShowTimedNotification_Tier3") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_quadKillNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_quadKillNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else if (auto8A8FE4F2_val == "ShowTimedNotification_Tier4") {
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_MegaKillNotificationTitle, lp_textParam1, libCore_gv_playerGroupFromPlayer[lp_player]);
        libNtve_gf_SetDialogItemText(libUIUI_gv_notificationDisplay.lv_MegaKillNotificationSubLabel, lp_textParam2, libCore_gv_playerGroupFromPlayer[lp_player]);
    }
    else {
    }
}

void libGame_gf_AnnouncementPlayNextItemForPlayer (int lp_player) {
    int auto50705A80_ae;
    int auto50705A80_ai;

    // Variable Declarations
    int lv_itAnnouncement;
    fixed lv_duration;
    string lv_animName;

    // Variable Initialization
    lv_animName = "";

    // Implementation
    if ((libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue > 0)) {
        lv_duration = libGame_gv_announcementQueue[lp_player].lv_duration[1];
        if ((libGame_gv_announcementQueue[lp_player].lv_isKillAnnouncement[1] == true)) {
            libSond_gf_HeroVOStartHeroTakedownVOTimerForPlayer(lp_player, (lv_duration + libGame_gv_announcement_HeroTakedownVODelay_C));
        }

        lv_animName = libGame_gv_announcementQueue[lp_player].lv_animName[1];
        if ((lv_animName != "")) {
            libGame_gf_AnnouncementSetTextOnAnnouncementFrameLabelsForPlayer(lp_player, lv_animName, libGame_gv_announcementQueue[lp_player].lv_textParam1[1], libGame_gv_announcementQueue[lp_player].lv_textParam2[1], libGame_gv_announcementQueue[lp_player].lv_textParam3[1], libGame_gv_announcementQueue[lp_player].lv_textParam4[1]);
            DialogControlSendAnimationEvent(libUIUI_gv_notificationDisplay.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lp_player], lv_animName);
        }

        if ((libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[1] != libCore_ge_AnnouncerVOEvents_Null)) {
            libSond_gf_SoundAnnouncerVOPlayAnnouncerVOForPlayer(libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[1], lp_player);
            if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_ArenaMode) && (libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[1] == libCore_ge_AnnouncerVOEvents_KillingSpreeStart)) {
                libGame_gf_SendEventArenaModeCrowdKillingSpree(lp_player);
            }
            else {
                if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_ArenaMode) && (libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[1] == libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade1Mayhem)) {
                    libGame_gf_SendEventArenaModeCrowdMayhem(lp_player);
                }
                else {
                    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_ArenaMode) && (libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[1] == libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade3HeroOfTheStorm)) {
                        libGame_gf_SendEventArenaModeCrowdHotS(lp_player);
                    }

                }
            }
        }

        if ((libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue > 1)) {
            auto50705A80_ae = (libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue - 1);
            auto50705A80_ai = 1;
            lv_itAnnouncement = 1;
            for ( ; ( (auto50705A80_ai >= 0 && lv_itAnnouncement <= auto50705A80_ae) || (auto50705A80_ai <= 0 && lv_itAnnouncement >= auto50705A80_ae) ) ; lv_itAnnouncement += auto50705A80_ai ) {
                libGame_gv_announcementQueue[lp_player].lv_priority[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_priority[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_announcerVOEvent[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_animName[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_animName[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_textParam1[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_textParam1[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_textParam2[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_textParam2[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_textParam3[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_textParam3[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_textParam4[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_textParam4[(lv_itAnnouncement + 1)];
                libGame_gv_announcementQueue[lp_player].lv_duration[lv_itAnnouncement] = libGame_gv_announcementQueue[lp_player].lv_duration[(lv_itAnnouncement + 1)];
            }
        }

        libGame_gv_announcementQueue[lp_player].lv_numberOfItemsInQueue -= 1;
        TimerStart(libGame_gv_announcementQueue[lp_player].lv_messageTimer, lv_duration, false, c_timeGame);
    }

}

void libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary (int lp_player, point lp_point, fixed lp_duration, fixed lp_initialVelocity, fixed lp_decelerate, bool lp_smart) {
    int autoC1BCE068_ae;
    int autoC1BCE068_ai;

    // Variable Declarations
    int lv_itBound;
    fixed lv_actualDuration;

    // Variable Initialization

    // Implementation
    lv_actualDuration = lp_duration;
    autoC1BCE068_ae = libGame_gv_cameraBound_Count;
    autoC1BCE068_ai = 1;
    lv_itBound = 1;
    for ( ; ( (autoC1BCE068_ai >= 0 && lv_itBound <= autoC1BCE068_ae) || (autoC1BCE068_ai <= 0 && lv_itBound >= autoC1BCE068_ae) ) ; lv_itBound += autoC1BCE068_ai ) {
        if ((RegionContainsPoint(libGame_gv_cameraBound_Regions[lv_itBound], lp_point) == true)) {
            if ((libGame_gv_cameraBound_CurrentCameraBoundForPlayer[lp_player] != lv_itBound)) {
                libGame_gf_SetCameraBoundStormIndexForPlayer(lp_player, lv_itBound);
                lv_actualDuration = 0.0;
            }

            break;
        }

    }
    CameraPan(lp_player, lp_point, lv_actualDuration, lp_initialVelocity, lp_decelerate, lp_smart);
    libGame_gf_SendEventCameraPannedFromScript(lp_player, lp_point);
}

void libGame_gf_CameraTrackNextAliveAllyForPlayer (int lp_player) {
    int autoC0514DC3_ae;
    int autoC0514DC3_ai;
    int auto52B09AF4_ae;
    int auto52B09AF4_ai;

    // Variable Declarations
    int lv_i;
    int lv_playerFaction;
    bool lv_valueSet;

    // Variable Initialization

    // Implementation
    lv_playerFaction = libGame_gv_players[lp_player].lv_faction;
    if ((libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack < libCore_gv_bALMaxPlayers)) {
        autoC0514DC3_ae = libCore_gv_bALMaxPlayers;
        autoC0514DC3_ai = 1;
        lv_i = (libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack + 1);
        for ( ; ( (autoC0514DC3_ai >= 0 && lv_i <= autoC0514DC3_ae) || (autoC0514DC3_ai <= 0 && lv_i >= autoC0514DC3_ae) ) ; lv_i += autoC0514DC3_ai ) {
            if ((libGame_gv_players[lv_i].lv_faction == lv_playerFaction) && (libGame_gv_players[lv_i].lv_isDead == false)) {
                libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = lv_i;
                lv_valueSet = true;
                break;
            }

        }
    }

    if ((lv_valueSet == false)) {
        auto52B09AF4_ae = libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack;
        auto52B09AF4_ai = 1;
        lv_i = 1;
        for ( ; ( (auto52B09AF4_ai >= 0 && lv_i <= auto52B09AF4_ae) || (auto52B09AF4_ai <= 0 && lv_i >= auto52B09AF4_ae) ) ; lv_i += auto52B09AF4_ai ) {
            if ((libGame_gv_players[lv_i].lv_faction == lv_playerFaction) && (libGame_gv_players[lv_i].lv_isDead == false)) {
                libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = lv_i;
                lv_valueSet = true;
                break;
            }

        }
    }

    if ((lv_valueSet == false)) {
        libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = 0;
    }

}

void libGame_gf_CameraTrackPreviousAliveAllyForPlayer (int lp_player) {
    int autoB8719CED_ae;
    int autoB8719CED_ai;
    int auto24F24019_ae;
    int auto24F24019_ai;

    // Variable Declarations
    int lv_i;
    int lv_playerFaction;
    bool lv_valueSet;

    // Variable Initialization

    // Implementation
    lv_playerFaction = libGame_gv_players[lp_player].lv_faction;
    if ((libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack > 1)) {
        autoB8719CED_ae = 1;
        autoB8719CED_ai = -1;
        lv_i = (libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack - 1);
        for ( ; ( (autoB8719CED_ai >= 0 && lv_i <= autoB8719CED_ae) || (autoB8719CED_ai <= 0 && lv_i >= autoB8719CED_ae) ) ; lv_i += autoB8719CED_ai ) {
            if ((libGame_gv_players[lv_i].lv_faction == lv_playerFaction) && (libGame_gv_players[lv_i].lv_isDead == false)) {
                libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = lv_i;
                lv_valueSet = true;
                break;
            }

        }
    }

    if ((lv_valueSet == false)) {
        auto24F24019_ae = libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack;
        auto24F24019_ai = -1;
        lv_i = libCore_gv_bALMaxPlayers;
        for ( ; ( (auto24F24019_ai >= 0 && lv_i <= auto24F24019_ae) || (auto24F24019_ai <= 0 && lv_i >= auto24F24019_ae) ) ; lv_i += auto24F24019_ai ) {
            if ((libGame_gv_players[lv_i].lv_faction == lv_playerFaction) && (libGame_gv_players[lv_i].lv_isDead == false)) {
                libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = lv_i;
                lv_valueSet = true;
                break;
            }

        }
    }

    if ((lv_valueSet == false)) {
        libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack = 0;
    }

}

trigger auto_libGame_gf_CameraUpdateCameraForPlayer_Trigger = null;
int auto_libGame_gf_CameraUpdateCameraForPlayer_lp_player;

void libGame_gf_CameraUpdateCameraForPlayer (int lp_player) {
    auto_libGame_gf_CameraUpdateCameraForPlayer_lp_player = lp_player;

    if (auto_libGame_gf_CameraUpdateCameraForPlayer_Trigger == null) {
        auto_libGame_gf_CameraUpdateCameraForPlayer_Trigger = TriggerCreate("auto_libGame_gf_CameraUpdateCameraForPlayer_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_CameraUpdateCameraForPlayer_Trigger, false, false);
}

bool auto_libGame_gf_CameraUpdateCameraForPlayer_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libGame_gf_CameraUpdateCameraForPlayer_lp_player;

    // Variable Declarations
    int lv_playerBeingTracked;

    // Variable Initialization

    // Implementation
    lv_playerBeingTracked = libGame_gv_players[lp_player].lv_cameraAllyPlayerToTrack;
    if ((libGame_gv_cameraFollowForced[lp_player] == true)) {
        libGame_gv_cameraFollowForced[lp_player] = false;
        CameraForceFollowUnitGroup(lp_player, false);
    }

    if ((lp_player == 1) && (libCore_gv_sYSGameMode == libCore_ge_GameModes_Tutorial1Deprecated)) {
        libStEx_gf_RestoreTutorialCameraLockSetting();
    }
    else {
        PlayerOptionOverride(lp_player, "camerafollow", null);
    }
    if ((libGame_gv_players[lp_player].lv_cameraForcedLock == true) && (libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn != null)) {
        libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn;
        CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
        CameraFollowUnitGroup(lp_player, libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup, true, false);
        if (((lp_player != 1) || (libCore_gv_sYSGameMode != libCore_ge_GameModes_Tutorial1Deprecated))) {
            PlayerOptionOverride(lp_player, "camerafollow", "1");
        }

    }
    else {
        if ((lv_playerBeingTracked != 0) && (libGame_gv_players[lv_playerBeingTracked].lv_cameraPlayerUnitGroupToFocusOn != null)) {
            libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = libGame_gv_players[lv_playerBeingTracked].lv_cameraPlayerUnitGroupToFocusOn;
            libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lp_player, UnitGroupCenterOfGroup(libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup), 0.0, -1, 0.0, false);
            CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
            CameraFollowUnitGroup(lp_player, libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup, true, false);
            PlayerOptionOverride(lp_player, "camerafollow", "1");
        }
        else {
            if ((libGame_gv_players[lp_player].lv_isDead == false) && (libGame_gv_players[lp_player].lv_cameraPlayerHasControl == false) && (libGame_gv_players[lp_player].lv_cameraCameraLockInterrupt == false) && (libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn != null)) {
                libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn;
                libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lp_player, UnitGroupCenterOfGroup(libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup), 0.0, -1, 0.0, false);
                CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
                CameraFollowUnitGroup(lp_player, libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup, true, false);
                PlayerOptionOverride(lp_player, "camerafollow", "1");
            }
            else {
                if ((libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn == null)) {
                    libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = null;
                    PlayerOptionOverride(lp_player, "camerafollow", "0");
                    CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
                }
                else {
                    if ((UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "LeoricUndying") == false) && (libGame_gv_players[lp_player].lv_isDead == true)) {
                        libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn;
                        CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
                        CameraFollowUnitGroup(lp_player, libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup, true, false);
                    }
                    else {
                        if ((UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "LeoricUndying") == true)) {
                            libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[lp_player].lv_heroUnitGroup;
                        }
                        else {
                            libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup = libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn;
                            CameraFollowUnitGroup(lp_player, CameraFollowUnitGroupGet(lp_player), false, false);
                            CameraFollowUnitGroup(lp_player, libGame_gv_players[lp_player].lv_cameraCurrentTargetGroup, true, false);
                        }
                    }
                }
            }
        }
    }
    if ((libGame_gv_players[lp_player].lv_cameraPlayerHasControl == true)) {
        CameraLockInput(lp_player, false);
    }
    else {
        CameraLockInput(lp_player, true);
    }
    return true;
}

int libGame_gf_CameraBoundStormIndex (region lp_bound) {
    int autoF3AAFE09_ae;
    int autoF3AAFE09_ai;

    // Variable Declarations
    int lv_itIndex;

    // Variable Initialization

    // Implementation
    autoF3AAFE09_ae = libGame_gv_cameraBound_Count;
    autoF3AAFE09_ai = 1;
    lv_itIndex = 1;
    for ( ; ( (autoF3AAFE09_ai >= 0 && lv_itIndex <= autoF3AAFE09_ae) || (autoF3AAFE09_ai <= 0 && lv_itIndex >= autoF3AAFE09_ae) ) ; lv_itIndex += autoF3AAFE09_ai ) {
        if ((PointGetX(RegionGetBoundsMax(lp_bound)) == PointGetX(RegionGetBoundsMax(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetY(RegionGetBoundsMax(lp_bound)) == PointGetY(RegionGetBoundsMax(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetX(RegionGetBoundsMin(lp_bound)) == PointGetX(RegionGetBoundsMin(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetY(RegionGetBoundsMin(lp_bound)) == PointGetY(RegionGetBoundsMin(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetX(RegionGetCenter(lp_bound)) == PointGetX(RegionGetCenter(libGame_gv_cameraBound_Regions[lv_itIndex]))) && (PointGetY(RegionGetCenter(lp_bound)) == PointGetY(RegionGetCenter(libGame_gv_cameraBound_Regions[lv_itIndex])))) {
            return lv_itIndex;
        }

    }
    return -1;
}

void libGame_gf_AddCameraBoundsStorm (region lp_bounds) {
    // Implementation
    if ((libGame_gv_cameraBound_Count >= libGame_gv_cameraBound_MaxCount_C)) {
        TextExpressionSetToken("Param/Expression/lib_Game_3078A309", "A", IntToText(libGame_gv_cameraBound_MaxCount_C));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_3078A309"), true);
        return ;
    }

    libGame_gv_cameraBound_Count += 1;
    libGame_gv_cameraBound_Regions[libGame_gv_cameraBound_Count] = lp_bounds;
}

void libGame_gf_SetCameraBoundsStorm (int lp_index, region lp_bounds) {
    // Implementation
    if ((lp_index > libGame_gv_cameraBound_Count) && (lp_index < 1)) {
        return ;
    }

    libGame_gv_cameraBound_Regions[lp_index] = lp_bounds;
}

void libGame_gf_SetCameraBoundStormIndexForPlayer (int lp_player, int lp_boundsIndex) {
    // Implementation
    libGame_gv_cameraBound_CurrentCameraBoundForPlayer[lp_player] = lp_boundsIndex;
    CameraSetBounds(libCore_gv_playerGroupFromPlayer[lp_player], libGame_gv_cameraBound_Regions[lp_boundsIndex], true);
}

void libGame_gf_SetCameraBoundStormForPlayer (int lp_player, region lp_bound) {
    // Variable Declarations
    int lv_boundsIndex;

    // Variable Initialization

    // Implementation
    lv_boundsIndex = libGame_gf_CameraBoundStormIndex(lp_bound);
    if ((lv_boundsIndex <= 0)) {
        libGame_gf_AddCameraBoundsStorm(lp_bound);
        lv_boundsIndex = libGame_gv_cameraBound_Count;
    }

    libGame_gv_cameraBound_CurrentCameraBoundForPlayer[lp_player] = lv_boundsIndex;
    CameraSetBounds(libCore_gv_playerGroupFromPlayer[lp_player], lp_bound, true);
}

void libGame_gf_SetCameraBoundStormForObservers (region lp_bound) {
    // Variable Declarations
    int lv_boundsIndex;

    // Variable Initialization

    // Implementation
    lv_boundsIndex = libGame_gf_CameraBoundStormIndex(lp_bound);
    if ((lv_boundsIndex <= 0)) {
        libGame_gf_AddCameraBoundsStorm(lp_bound);
        lv_boundsIndex = libGame_gv_cameraBound_Count;
    }

    libGame_gv_cameraBound_CurrentCameraBoundForPlayer[0] = lv_boundsIndex;
    CameraSetBoundsForObservers(lp_bound, true);
}

void libGame_gf_CapturePointChangeOwnership (int lp_capturePointIndex, int lp_newOwner, playergroup lp_capturingPlayers, bool lp_hasMercLordTalent) {
    // Variable Declarations
    int lv_currentOwner;

    // Variable Initialization

    // Implementation
    lv_currentOwner = UnitGetOwner(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit);
    if ((lp_newOwner == lv_currentOwner)) {
        return ;
    }

    UnitSetOwner(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit, lp_newOwner, true);
    libGame_gf_SendEventCapturePointChangesOwner(lp_capturePointIndex, lp_newOwner, lp_capturingPlayers, lp_hasMercLordTalent);
}

void libGame_gf_UpdateTimers (int lp_capturePointIndex, playergroup lp_capturingPlayers) {
    playergroup autoDAA194AC_g;
    int autoDAA194AC_p;

    // Variable Declarations
    int lv_itPlayerID;
    int lv_itCapturingPlayer;

    // Variable Initialization
    lv_itCapturingPlayer = 1;

    // Implementation
    autoDAA194AC_g = lp_capturingPlayers; 
    autoDAA194AC_p = 1;
    for ( ; autoDAA194AC_p <= PlayerGroupCount(autoDAA194AC_g) ; autoDAA194AC_p += (lv_itCapturingPlayer == PlayerGroupPlayer(autoDAA194AC_g, autoDAA194AC_p)) ) {
        lv_itCapturingPlayer = PlayerGroupPlayer(autoDAA194AC_g, autoDAA194AC_p);
        if ((lv_itCapturingPlayer > libCore_gv_bALMaxPlayers)) {
            continue;
        }

        libGame_gv_capturePoints[lp_capturePointIndex].lv_timeOnCapturePointForPlayers[lv_itCapturingPlayer] += 0.0625;
    }
}

void libGame_gf_CapturePointCreate (unit lp_beaconUnit, fixed lp_captureRadius, fixed lp_captureTime, fixed lp_overCaptureTime, int lp_contestedPointDecay, int lp_emptyPointDecay, bool lp_rememberLastOwner) {
    // Implementation
    if ((libGame_gv_capturePointCurrentCount == libGame_gv_capturePointMaxCount_C)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_29EF6B64"), true);
        return ;
    }

    libGame_gv_capturePointCurrentCount += 1;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_enabled = false;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureBeaconUnit = lp_beaconUnit;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureRegion = RegionCircle(UnitGetPosition(lp_beaconUnit), lp_captureRadius);
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureCounter = 0;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_pointsNeededToCapture = FixedToInt((lp_captureTime * 16.0));
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_maximumPoints = FixedToInt(((lp_captureTime + lp_overCaptureTime) * 16.0));
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_contestedPointDecay = lp_contestedPointDecay;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_emptyPointDecay = lp_emptyPointDecay;
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_rememberLastOwner = lp_rememberLastOwner;
    DialogControlHookupUnitStatus(c_triggerControlTypeUnitStatusBar, "CaptureProgressBar", lp_beaconUnit);
    libNtve_gf_SetDialogItemMaximumValue(DialogControlLastCreated(), (libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_maximumPoints * 2.0), PlayerGroupAll());
    libNtve_gf_SetDialogItemCurrentValue(DialogControlLastCreated(), 0.0, PlayerGroupAll());
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/CaptureBar_Fill", libGame_gv_teams[1].lv_teamPlayerGroup);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/CaptureBar_Fill_Red", libGame_gv_teams[2].lv_teamPlayerGroup);
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_captureProgressBar = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "DimmingFrame", lp_beaconUnit);
    libGame_gv_capturePoints[libGame_gv_capturePointCurrentCount].lv_progressBarDimmingFrame = DialogControlLastCreated();
    DialogControlHookupUnitStatus(c_triggerControlTypeImage, "CaptureProgressBGImage", lp_beaconUnit);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/CaptureBar_Fill_Red", libGame_gv_teams[1].lv_teamPlayerGroup);
    libNtve_gf_SetDialogItemImage(DialogControlLastCreated(), "@UI/CaptureBar_Fill", libGame_gv_teams[2].lv_teamPlayerGroup);
    UnitStatusBarOverride(lp_beaconUnit, c_unitStatusGroupAll);
    libGame_gf_CapturePointEnable(libGame_gv_capturePointCurrentCount);
    if ((TriggerIsEnabled(libGame_gt_CapturePointLogic) == false)) {
        TriggerEnable(libGame_gt_CapturePointLogic, true);
    }

    DataTableSetInt(false, libGame_gv_capturePointLastCreatedCapturePointIndex_C, libGame_gv_capturePointCurrentCount);
}

void libGame_gf_CapturePointEnable (int lp_capturePointIndex) {
    // Implementation
    if (((lp_capturePointIndex > libGame_gv_capturePointCurrentCount) || (libGame_gv_capturePoints[lp_capturePointIndex].lv_enabled == true))) {
        return ;
    }

    libGame_gv_capturePoints[lp_capturePointIndex].lv_enabled = true;
    UnitSetOwner(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit, libCore_gv_cOMPUTER_Neutral, true);
    ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit), "Signal Show");
    ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit), "Signal BeaconCreated");
    libGame_gv_capturePoints[lp_capturePointIndex].lv_captureCounter = 0;
    libGame_gv_capturePoints[lp_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_Neutral;
}

trigger auto_libGame_gf_CapturePointDisable_Trigger = null;
int auto_libGame_gf_CapturePointDisable_lp_capturePointIndex;

void libGame_gf_CapturePointDisable (int lp_capturePointIndex) {
    auto_libGame_gf_CapturePointDisable_lp_capturePointIndex = lp_capturePointIndex;

    if (auto_libGame_gf_CapturePointDisable_Trigger == null) {
        auto_libGame_gf_CapturePointDisable_Trigger = TriggerCreate("auto_libGame_gf_CapturePointDisable_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_CapturePointDisable_Trigger, false, false);
}

bool auto_libGame_gf_CapturePointDisable_TriggerFunc (bool testConds, bool runActions) {
    int lp_capturePointIndex = auto_libGame_gf_CapturePointDisable_lp_capturePointIndex;

    // Implementation
    if (((lp_capturePointIndex > libGame_gv_capturePointCurrentCount) || (libGame_gv_capturePoints[lp_capturePointIndex].lv_enabled == false))) {
        return true;
    }

    libGame_gv_capturePoints[lp_capturePointIndex].lv_enabled = false;
    ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit), "Signal Hide");
    Wait(3.0, c_timeGame);
    UnitSetOwner(libGame_gv_capturePoints[lp_capturePointIndex].lv_captureBeaconUnit, libCore_gv_cOMPUTER_Neutral, true);
    return true;
}

void libGame_gf_CapturePointSetAlwaysDecay (int lp_index, bool lp_always) {
    // Implementation
    libGame_gv_capturePoints[lp_index].lv_alwaysDecay = lp_always;
}

fixed libGame_gf_CapturePointGetCaptureTimeForPlayer (int lp_capturePointIndex, int lp_player) {
    // Implementation
    return libGame_gv_capturePoints[lp_capturePointIndex].lv_timeOnCapturePointForPlayers[lp_player];
}

int libGame_gf_LastCreatedCapturePoint () {
    // Implementation
    return DataTableGetInt(false, libGame_gv_capturePointLastCreatedCapturePointIndex_C);
}

bool libGame_gf_CapturePointFullyCaptured (int lp_capturePointIndex) {
    // Implementation
    if ((lp_capturePointIndex > libGame_gv_capturePointCurrentCount)) {
        return false;
    }

    if (((libGame_gv_capturePoints[lp_capturePointIndex].lv_captureCounter == libGame_gv_capturePoints[lp_capturePointIndex].lv_maximumPoints) || (libGame_gv_capturePoints[lp_capturePointIndex].lv_captureCounter == (libGame_gv_capturePoints[lp_capturePointIndex].lv_maximumPoints * -1)))) {
        return true;
    }
    else {
        return false;
    }
}

int libGame_gf_CapturePointCounter (int lp_capturePointIndex) {
    // Implementation
    if ((lp_capturePointIndex > libGame_gv_capturePointCurrentCount)) {
        return 0;
    }

    return libGame_gv_capturePoints[lp_capturePointIndex].lv_captureCounter;
}

int libGame_gf_CapturePointCounterMax (int lp_capturePointIndex) {
    // Implementation
    if ((lp_capturePointIndex > libGame_gv_capturePointCurrentCount)) {
        return 0;
    }

    return libGame_gv_capturePoints[lp_capturePointIndex].lv_pointsNeededToCapture;
}

bool libGame_gf_CapturePointContested (int lp_capturePointIndex) {
    // Implementation
    if ((lp_capturePointIndex > libGame_gv_capturePointCurrentCount)) {
        return false;
    }

    if ((libGame_gv_capturePoints[lp_capturePointIndex].lv_capturePointState == libGame_ge_CapturePointState_Contested)) {
        return true;
    }

    return false;
}

void libGame_gf_TowerTurnOnOffCoreWarning (bool lp_onOff) {
    bool auto5AB7CCE4_val;

    // Implementation
    auto5AB7CCE4_val = lp_onOff;
    if (auto5AB7CCE4_val == true) {
        libGame_gv_towerMapPlaysCoreWarning = true;
    }
    else if (auto5AB7CCE4_val == false) {
        libGame_gv_towerMapPlaysCoreWarning = false;
    }
    else {
    }
}

void libGame_gf_TowerCreateCoreUnderAttackPing (playergroup lp_teamUnderAttack, unit lp_coreUnit) {
    // Implementation
    libNtve_gf_CreatePingFacingAngleWithType(lp_teamUnderAttack, "StormPingCoreAttack", UnitGetPosition(lp_coreUnit), Color(100.00, 0.00, 0.00), 5.0, 270.0, -1, -1);
    libGame_gf_AnnouncementAddItemForPlayerGroup(lp_teamUnderAttack, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedCoreUnderAttack, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
    if ((lp_teamUnderAttack == libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup)) {
        libNtve_gf_CreatePingFacingAngleWithType(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "StormPingCoreAttack", UnitGetPosition(lp_coreUnit), libCore_gv_cOLORAllyColor, 5.0, 270.0, -1, -1);
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_BlueTeamCoreUnderAttack, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
    }
    else {
        libNtve_gf_CreatePingFacingAngleWithType(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "StormPingCoreAttack", UnitGetPosition(lp_coreUnit), libCore_gv_cOLOREnemyColor, 5.0, 270.0, -1, -1);
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_RedTeamCoreUnderAttack, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
    }
    UIAlert("CoreUnderAttack", UnitGetOwner(lp_coreUnit), StringToText(""), null);
}

void libGame_gf_CCRecognitionCCReduction (unit lp_unit, string lp_cCBehavior) {
    // Variable Declarations
    fixed lv_behaviorDuration;
    fixed lv_reducedDuration;
    fixed lv_percentReduction;

    // Variable Initialization

    // Implementation
    lv_behaviorDuration = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, lp_cCBehavior, "Duration", UnitBehaviorEffectPlayer(lp_unit, lp_cCBehavior, c_effectPlayerCaster, 0)));
    if (((UnitBehaviorCount(lp_unit, "75PercentCCReduction") >= 1) || ((UnitBehaviorCount(lp_unit, "SiegeMode") == 1) && (UnitBehaviorCount(lp_unit, "SgtHammerResistantCarryBehavior") == 1)) || ((UnitBehaviorCount(lp_unit, "MuradinAvatarHealthBuff") == 1) && (UnitBehaviorCount(lp_unit, "AvatarUnstoppableForceCarryBehavior") == 1)))) {
        lv_percentReduction = libCore_gv_talents_RelentlessCCReduction75_C;
    }
    else {
        if ((UnitBehaviorCount(lp_unit, "RelentlessCCReduction60") >= 1)) {
            lv_percentReduction = libCore_gv_talents_RelentlessCCReduction60_C;
        }
        else {
            if (((UnitBehaviorCount(lp_unit, "50PercentCCReduction") >= 1) || (UnitBehaviorCount(lp_unit, "BarbarianWrathoftheBerserkerBase") == 1) || ((UnitBehaviorCount(lp_unit, "IllidanMetamorphosis") == 1) && (UnitBehaviorCount(lp_unit, "IllidanMetamorphosisDemonicFormCarryBehavior") == 1)))) {
                lv_percentReduction = libCore_gv_talents_RelentlessCCReduction50_C;
            }
            else {
                if ((UnitBehaviorCount(lp_unit, "RelentlessCCReduction40") >= 1)) {
                    lv_percentReduction = libCore_gv_talents_RelentlessCCReduction40_C;
                }
                else {
                    if ((UnitBehaviorCount(lp_unit, "33PercentCCReduction") >= 1)) {
                        lv_percentReduction = libCore_gv_talents_RelentlessCCReduction33_C;
                    }
                    else {
                        if (((UnitBehaviorCount(lp_unit, "RelentlessCCReduction20") >= 1) || (UnitBehaviorCount(lp_unit, "RelentlessCCReduction20Temporary") == 1))) {
                            lv_percentReduction = libCore_gv_talents_RelentlessCCReduction20_C;
                        }
                        else {
                            return ;
                        }
                    }
                }
            }
        }
    }
    lv_reducedDuration = (lv_behaviorDuration * (1.0 - MinF(lv_percentReduction, 0.9)));
    UnitBehaviorSetDurationRemaining(lp_unit, lp_cCBehavior, lv_reducedDuration);
}

bool libGame_gf_CCReductionStunReduceable (string lp_behavior) {
    // Implementation
    if ((lp_behavior != "L90ETCMoshPitStun") && (lp_behavior != "L90ETCMoshPitDisplayBehavior") && (lp_behavior != "StitchesGorgeTargetTimer") && (lp_behavior != "StitchesGorgeInitialTargetBehavior") && (lp_behavior != "OctoGrabStun") && (lp_behavior != "HaymakerTargetBehaviorMicroStun") && (lp_behavior != "HaymakerTargetBehaviorStun") && (lp_behavior != "DevouringMawTargetBehavior")) {
        return true;
    }

    return false;
}

bool libGame_gf_CCReductionSilencedReduceable (string lp_behavior) {
    // Implementation
    if ((lp_behavior != "SylvanasMindControlTarget")) {
        return true;
    }

    return false;
}

void libGame_gf_DeathRecapSpecialCaseEvent (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_DeathRecapSpecialCaseEvent_C);
}

void libGame_gf_SendEventDeathRecapSpecialCaseEvent (int lp_player) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_DeathRecapSpecialCaseEvent_C, libGame_gv_eventParam_DeathRecapSpecialCaseEvent_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_DeathRecapSpecialCaseEvent_C);
}

int libGame_gf_DeathRecapSpecialCasePlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_DeathRecapSpecialCaseEvent_C, libGame_gv_eventParam_DeathRecapSpecialCaseEvent_Player_C));
}

bool libGame_gf_DeathRecapCheckforCombineEvent (int lp_deadPlayer, int lp_currentEffectBarIndex, fixed lp_currentEffectInstanceTime, int lp_effectingPlayer, string lp_effectingUnitType, string lp_effectingSourceButton, bool lp_nPCSource, bool lp_structureSource) {
    // Variable Declarations
    int lv_priorEffectInstance;

    // Variable Initialization

    // Implementation
    if (((lp_currentEffectInstanceTime - libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_time) < libGame_gv_deathRecap_MaxEffectCombineTimeElapsed) && (libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_combinedNumOfEvents < libGame_gv_deathRecap_MaxEffectCombinePerSlot)) {
        if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_effectPlayer == lp_effectingPlayer) && (((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_effectPlayer > libCore_gv_bALMaxPlayers) && (libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_nPCSource == lp_nPCSource) && (libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_structureSource == lp_structureSource)) || ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_effectPlayer <= libCore_gv_bALMaxPlayers) && (libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_unitType == lp_effectingUnitType) && (libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lp_currentEffectBarIndex].lv_button == lp_effectingSourceButton)))) {
            return true;
        }

    }

    return false;
}

void libGame_gf_DeathRecapAddSpecialDamageEffect (string lp_effectLink) {
    int auto6F0BD316_ae;
    int auto6F0BD316_ai;

    // Variable Declarations
    int lv_itSpecialDamageEffect;

    // Variable Initialization

    // Implementation
    auto6F0BD316_ae = libGame_gv_deathRecap_SpecialDamageEffectsCount_C;
    auto6F0BD316_ai = 1;
    lv_itSpecialDamageEffect = 1;
    for ( ; ( (auto6F0BD316_ai >= 0 && lv_itSpecialDamageEffect <= auto6F0BD316_ae) || (auto6F0BD316_ai <= 0 && lv_itSpecialDamageEffect >= auto6F0BD316_ae) ) ; lv_itSpecialDamageEffect += auto6F0BD316_ai ) {
        if ((libGame_gv_deathRecap_SpecialDamageEffects[lv_itSpecialDamageEffect].lv_effect == null)) {
            libGame_gv_deathRecap_SpecialDamageEffects[lv_itSpecialDamageEffect].lv_effect = lp_effectLink;
            return ;
        }

    }
    TextExpressionSetToken("Param/Expression/lib_Game_3AC92B97", "A", StringToText((lp_effectLink)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_3AC92B97"), true);
}

void libGame_gf_DeathRecapSortMaxDamageAbils (int lp_deadPlayer, int lp_maxDamagerIndex, int lp_currentMaxDamagerAbilIndex) {
    // Variable Declarations
    int lv_swapIndex;
    string lv_swapAbil;
    int lv_swapAmount;

    // Variable Initialization

    // Implementation
    if ((lp_currentMaxDamagerAbilIndex <= 1)) {
        return ;
    }

    lv_swapIndex = (lp_currentMaxDamagerAbilIndex - 1);
    if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_swapIndex].lv_amount < libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lp_currentMaxDamagerAbilIndex].lv_amount)) {
        lv_swapAbil = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_swapIndex].lv_abil;
        lv_swapAmount = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_swapIndex].lv_amount;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_swapIndex].lv_abil = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lp_currentMaxDamagerAbilIndex].lv_abil;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_swapIndex].lv_amount = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lp_currentMaxDamagerAbilIndex].lv_amount;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lp_currentMaxDamagerAbilIndex].lv_abil = lv_swapAbil;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lp_currentMaxDamagerAbilIndex].lv_amount = lv_swapAmount;
    }

    if ((lv_swapIndex > 1)) {
        libGame_gf_DeathRecapSortMaxDamageAbils(lp_deadPlayer, lp_maxDamagerIndex, lv_swapIndex);
    }

}

void libGame_gf_DeathRecapSortMaxDamagers (int lp_deadPlayer) {
    int auto41E0A047_ae;
    int auto41E0A047_ai;
    int autoFE660728_ae;
    int autoFE660728_ai;

    // Variable Declarations
    int lv_swapIndex;
    int lv_swapHeroIndex;
    int lv_swapAmount;
    int lv_swapPlayer;
    int lv_swapAbilCount;
    string lv_swapAbil;
    int lv_swapAbilAmount;
    int lv_itAbil;
    int lv_itMaxDamagers;
    bool lv_sortingComplete;

    // Variable Initialization
    lv_sortingComplete = true;

    // Implementation
    auto41E0A047_ae = (libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagersCount - 1);
    auto41E0A047_ai = 1;
    lv_itMaxDamagers = 1;
    for ( ; ( (auto41E0A047_ai >= 0 && lv_itMaxDamagers <= auto41E0A047_ae) || (auto41E0A047_ai <= 0 && lv_itMaxDamagers >= auto41E0A047_ae) ) ; lv_itMaxDamagers += auto41E0A047_ai ) {
        lv_swapIndex = (lv_itMaxDamagers + 1);
        if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamagers].lv_amount < libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[(lv_itMaxDamagers + 1)].lv_amount)) {
            lv_sortingComplete = false;
            lv_swapHeroIndex = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_swapIndex].lv_heroIndex;
            lv_swapAmount = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_swapIndex].lv_amount;
            lv_swapPlayer = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_swapIndex].lv_player;
            lv_swapAbilCount = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_swapIndex].lv_maxDamageAbilCount;
            libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_swapIndex].lv_heroIndex = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamagers].lv_heroIndex;
            libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_swapIndex].lv_amount = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamagers].lv_amount;
            libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_swapIndex].lv_player = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamagers].lv_player;
            libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_swapIndex].lv_maxDamageAbilCount = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamagers].lv_maxDamageAbilCount;
            libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamagers].lv_heroIndex = lv_swapHeroIndex;
            libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamagers].lv_amount = lv_swapAmount;
            libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamagers].lv_player = lv_swapPlayer;
            libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamagers].lv_maxDamageAbilCount = lv_swapAbilCount;
            autoFE660728_ae = libGame_gv_deathRecap_MaxMaxDamageAbils_C;
            autoFE660728_ai = 1;
            lv_itAbil = 1;
            for ( ; ( (autoFE660728_ai >= 0 && lv_itAbil <= autoFE660728_ae) || (autoFE660728_ai <= 0 && lv_itAbil >= autoFE660728_ae) ) ; lv_itAbil += autoFE660728_ai ) {
                lv_swapAbil = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_swapIndex].lv_maxDamageAbils[lv_itAbil].lv_abil;
                lv_swapAbilAmount = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_swapIndex].lv_maxDamageAbils[lv_itAbil].lv_amount;
                libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_swapIndex].lv_maxDamageAbils[lv_itAbil].lv_amount = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamagers].lv_maxDamageAbils[lv_itAbil].lv_amount;
                libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_swapIndex].lv_maxDamageAbils[lv_itAbil].lv_abil = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamagers].lv_maxDamageAbils[lv_itAbil].lv_abil;
                libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamagers].lv_maxDamageAbils[lv_itAbil].lv_amount = lv_swapAbilAmount;
                libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamagers].lv_maxDamageAbils[lv_itAbil].lv_abil = lv_swapAbil;
            }
        }

    }
    if ((lv_sortingComplete == false)) {
        libGame_gf_DeathRecapSortMaxDamagers(lp_deadPlayer);
    }
    else {
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagersCount = MinI(libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagersCount, libGame_gv_deathRecap_MaxMaxDamagers_C);
    }
}

void libGame_gf_DeathRecapAddMaxDamageAbilForPlayer (int lp_deadPlayer, int lp_maxDamagerIndex, string lp_effectingAbility, int lp_effectAmount) {
    int auto1C70E655_ae;
    int auto1C70E655_ai;

    // Variable Declarations
    int lv_effectingPlayer;
    int lv_itMaxDamagerAbilndex;

    // Variable Initialization

    // Implementation
    auto1C70E655_ae = libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C;
    auto1C70E655_ai = 1;
    lv_itMaxDamagerAbilndex = 1;
    for ( ; ( (auto1C70E655_ai >= 0 && lv_itMaxDamagerAbilndex <= auto1C70E655_ae) || (auto1C70E655_ai <= 0 && lv_itMaxDamagerAbilndex >= auto1C70E655_ae) ) ; lv_itMaxDamagerAbilndex += auto1C70E655_ai ) {
        if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_itMaxDamagerAbilndex].lv_abil != null)) {
            if ((lp_effectingAbility == libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_itMaxDamagerAbilndex].lv_abil)) {
                libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_itMaxDamagerAbilndex].lv_amount += lp_effectAmount;
                break;
            }

        }
        else {
            libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_itMaxDamagerAbilndex].lv_abil = lp_effectingAbility;
            libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lp_maxDamagerIndex].lv_maxDamageAbils[lv_itMaxDamagerAbilndex].lv_amount += lp_effectAmount;
            libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lp_maxDamagerIndex].lv_maxDamageAbilCount += 1;
            libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lp_maxDamagerIndex].lv_maxDamageAbilCount = MinI(libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lp_maxDamagerIndex].lv_maxDamageAbilCount, libGame_gv_deathRecap_MaxMaxDamageAbils_C);
            break;
        }
    }
    libGame_gf_DeathRecapSortMaxDamageAbils(lp_deadPlayer, lp_maxDamagerIndex, lv_itMaxDamagerAbilndex);
}

void libGame_gf_DeathRecapAddEffectInstanceForPlayer (int lp_deadPlayer, string lp_effect, int lp_effectingPlayer, string lp_effectingAbility, string lp_effectingUnitType, int lp_effectAmount, int lp_effectAmountAttempted, int lp_effectAmountShielded, bool lp_effectIsHeal, fixed lp_effectTime, string lp_debugString, string lp_sourceButton) {
    int auto11913262_ae;
    int auto11913262_ai;
    int auto8D5FBFE5_ae;
    int auto8D5FBFE5_ai;

    // Variable Declarations
    int lv_effectingPlayer;
    int lv_effectHeroIndex;
    int lv_effectEventTimeIndex;
    bool lv_nPCPlayer;
    bool lv_structureSource;
    int lv_itEffect;
    int lv_itMaxDamagerIndex;
    int lv_postEffectHealth;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectEventCount <= 0) && (lp_effectIsHeal == true)) {
        return ;
    }

    lv_effectingPlayer = lp_effectingPlayer;
    if ((lv_effectingPlayer >= 1) && (lv_effectingPlayer <= libCore_gv_bALMaxPlayers)) {
        lv_effectHeroIndex = libGame_gv_players[lv_effectingPlayer].lv_heroIndex;
    }
    else {
        lv_effectHeroIndex = libCore_gf_GetIndexFromHero("_Empty");
        lv_nPCPlayer = true;
        lv_structureSource = UnitTypeTestAttribute(lp_effectingUnitType, c_unitAttributeStructure);
    }
    libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectEventCount += 1;
    if ((libGame_gf_DeathRecapCheckforCombineEvent(lp_deadPlayer, libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBarCount, lp_effectTime, lv_effectingPlayer, lp_effectingUnitType, lp_sourceButton, lv_nPCPlayer, lv_structureSource) == true)) {
        lv_effectEventTimeIndex = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBarCount;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_amount += lp_effectAmount;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_postEffectHealth = 0;
    }
    else {
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBarCount += 1;
        lv_effectEventTimeIndex = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBarCount;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_effect = lp_effect;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_effectPlayer = lv_effectingPlayer;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_heroIndex = lv_effectHeroIndex;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_isHeal = lp_effectIsHeal;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_nPCSource = lv_nPCPlayer;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_structureSource = lv_structureSource;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_amount = lp_effectAmount;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_amountAttempted = lp_effectAmountAttempted;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_amountShielded = lp_effectAmountShielded;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_amountOverkill = (lp_effectAmountAttempted - (lp_effectAmount + lp_effectAmountShielded));
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_abilityLink = lp_effectingAbility;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_button = lp_sourceButton;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_unitType = (CatalogFieldValueGet(c_gameCatalogUnit, lp_effectingUnitType, "LeaderAlias", 0));
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_time = lp_effectTime;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_debugString = lp_debugString;
    }
    auto11913262_ae = (lv_effectEventTimeIndex - 1);
    auto11913262_ai = 1;
    lv_itEffect = 1;
    for ( ; ( (auto11913262_ai >= 0 && lv_itEffect <= auto11913262_ae) || (auto11913262_ai <= 0 && lv_itEffect >= auto11913262_ae) ) ; lv_itEffect += auto11913262_ai ) {
        if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_isHeal == true)) {
            libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_postEffectHealth -= libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount;
        }
        else {
            libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_postEffectHealth += libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itEffect].lv_amount;
        }
    }
    libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_combinedNumOfEvents += 1;
    if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_isHeal == true)) {
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroStartHealth -= lp_effectAmount;
    }
    else {
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroStartHealth += lp_effectAmount;
    }
    libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroHighestHealth = MaxI(libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroStartHealth, libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroHighestHealth);
    if ((lp_effectIsHeal == false)) {
        auto8D5FBFE5_ae = libGame_gv_deathRecap_MaxMaxDamagersSort_C;
        auto8D5FBFE5_ai = 1;
        lv_itMaxDamagerIndex = 1;
        for ( ; ( (auto8D5FBFE5_ai >= 0 && lv_itMaxDamagerIndex <= auto8D5FBFE5_ae) || (auto8D5FBFE5_ai <= 0 && lv_itMaxDamagerIndex >= auto8D5FBFE5_ae) ) ; lv_itMaxDamagerIndex += auto8D5FBFE5_ai ) {
            if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamagerIndex].lv_player != 0)) {
                if ((lv_effectHeroIndex == libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamagerIndex].lv_heroIndex)) {
                    libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamagerIndex].lv_amount += lp_effectAmount;
                    break;
                }

            }
            else {
                libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamagerIndex].lv_player = libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_effectPlayer;
                libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamagerIndex].lv_heroIndex = lv_effectHeroIndex;
                libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamagerIndex].lv_amount += lp_effectAmount;
                libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagersCount += 1;
                libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamagerIndex].lv_heroIndex = lv_effectHeroIndex;
                break;
            }
        }
        libGame_gf_DeathRecapAddMaxDamageAbilForPlayer(lp_deadPlayer, lv_itMaxDamagerIndex, lp_sourceButton, lp_effectAmount);
    }

    TextExpressionSetToken("Param/Expression/lib_Game_85A0B12E", "A", IntToText(lv_effectHeroIndex));
    TextExpressionSetToken("Param/Expression/lib_Game_85A0B12E", "B", libNtve_gf_ConvertBooleanToText(lv_nPCPlayer));
    TextExpressionSetToken("Param/Expression/lib_Game_85A0B12E", "C", libNtve_gf_ConvertBooleanToText(lp_effectIsHeal));
    TextExpressionSetToken("Param/Expression/lib_Game_85A0B12E", "D", IntToText(lp_effectAmount));
    TextExpressionSetToken("Param/Expression/lib_Game_85A0B12E", "E", StringToText((lp_effectingAbility)));
    TextExpressionSetToken("Param/Expression/lib_Game_85A0B12E", "F", StringToText((lp_effectingUnitType)));
    TextExpressionSetToken("Param/Expression/lib_Game_85A0B12E", "G", IntToText(lv_effectEventTimeIndex));
    TextExpressionSetToken("Param/Expression/lib_Game_85A0B12E", "H", IntToText(libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_effectEventTimeIndex].lv_postEffectHealth));
    TextExpressionSetToken("Param/Expression/lib_Game_85A0B12E", "I", FixedToText(lp_effectTime, c_fixedPrecisionAny));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_85A0B12E"), false);
}

void libGame_gf_DeathRecapClearDeathRecapForPlayer (int lp_deadPlayer) {
    int autoA7969482_ae;
    int autoA7969482_ai;
    int auto6B904343_ae;
    int auto6B904343_ai;
    int auto103F126C_ae;
    int auto103F126C_ai;

    // Variable Declarations
    int lv_itTimeIndex;
    int lv_itMaxDamager;
    int lv_itMaxDamagerAbil;

    // Variable Initialization

    // Implementation
    libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBarCount = 0;
    libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroHighestHealth = 0;
    libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroStartHealth = 0;
    libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroMaxHealth = 0;
    libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectEventCount = 0;
    libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagersCount = 0;
    autoA7969482_ae = libGame_gv_deathRecap_MaxEffectBars_C;
    autoA7969482_ai = 1;
    lv_itTimeIndex = 1;
    for ( ; ( (autoA7969482_ai >= 0 && lv_itTimeIndex <= autoA7969482_ae) || (autoA7969482_ai <= 0 && lv_itTimeIndex >= autoA7969482_ae) ) ; lv_itTimeIndex += autoA7969482_ai ) {
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_effect = null;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_effectPlayer = 0;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_heroIndex = 0;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_isHeal = false;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_nPCSource = false;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_structureSource = false;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_amount = 0;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_amountAttempted = 0;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_amountShielded = 0;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_amountOverkill = 0;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_combinedNumOfEvents = 0;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_combinedTimeDelta = 0;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_postEffectHealth = 0;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_abilityLink = null;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_button = null;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_unitType = null;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBars[lv_itTimeIndex].lv_time = 0.0;
    }
    auto6B904343_ae = libGame_gv_deathRecap_MaxMaxDamagersSort_C;
    auto6B904343_ai = 1;
    lv_itMaxDamager = 1;
    for ( ; ( (auto6B904343_ai >= 0 && lv_itMaxDamager <= auto6B904343_ae) || (auto6B904343_ai <= 0 && lv_itMaxDamager >= auto6B904343_ae) ) ; lv_itMaxDamager += auto6B904343_ai ) {
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_player = 0;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_heroIndex = 0;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_amount = 0;
        libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_maxDamageAbilCount = 0;
        auto103F126C_ae = libGame_gv_deathRecap_MaxMaxDamageAbilsSort_C;
        auto103F126C_ai = 1;
        lv_itMaxDamagerAbil = 1;
        for ( ; ( (auto103F126C_ai >= 0 && lv_itMaxDamagerAbil <= auto103F126C_ae) || (auto103F126C_ai <= 0 && lv_itMaxDamagerAbil >= auto103F126C_ae) ) ; lv_itMaxDamagerAbil += auto103F126C_ai ) {
            libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_maxDamageAbils[lv_itMaxDamagerAbil].lv_abil = null;
            libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_maxDamagers[lv_itMaxDamager].lv_maxDamageAbils[lv_itMaxDamagerAbil].lv_amount = 0;
        }
    }
}

void libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer (unit lp_playerHero, int lp_deadPlayer) {
    int auto9091C3BB_ae;
    int auto9091C3BB_ai;
    int autoD2EEC8FC_ae;
    int autoD2EEC8FC_ai;
    int auto9F13DA0A_val;

    // Variable Declarations
    unit lv_deadHeroUnit;
    unit lv_effectingUnit;
    string lv_effectingUnitType;
    int lv_effectingPlayer;
    fixed lv_currentTime;
    int lv_itEffectHistoryEntry;
    effecthistory lv_effectHistory;
    int lv_effectHistoryCount;
    fixed lv_effectHistoryEntryTime;
    string lv_effectHistoryEntryAbility;
    string lv_effectHistoryEntryBehavior;
    int lv_effectType;
    int lv_effectAmount;
    int lv_effectAmountAttempted;
    int lv_effectAmountShielded;
    bool lv_healed;
    fixed lv_effectTime;
    string lv_debugString;
    string lv_unitTypeAsString;
    int lv_effectTypePreset;
    int lv_effectTypePresetAttempted;
    bool lv_effectKill;
    bool lv_killingBlowFound;
    string lv_sourceButton;
    int lv_specialDamageEffectCount;
    string lv_specialDamageEffectAbilityLink;
    int lv_itSpecialDamageEffectEntry;
    bool lv_foundSpecialDamageEffect;

    // Variable Initialization
    lv_effectType = c_effectHistoryDeath;
    lv_debugString = "";
    lv_unitTypeAsString = "";
    lv_effectTypePreset = c_effectAmountDamaged;
    lv_effectTypePresetAttempted = c_effectAmountDamageAttempted;
    lv_specialDamageEffectCount = 1;

    // Implementation
    lv_deadHeroUnit = lp_playerHero;
    lv_currentTime = GameGetMissionTime();
    libGame_gf_DeathRecapClearDeathRecapForPlayer(lp_deadPlayer);
    lv_effectHistory = UnitEffectHistory(lp_playerHero, libGame_gv_deathRecap_MaxEffectsInHistory_C);
    lv_effectHistoryCount = EffectHistoryCount(lv_effectHistory);
    libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroMaxHealth = FixedToInt(UnitGetPropertyFixed(lv_deadHeroUnit, c_unitPropLifeMax, c_unitPropCurrent));
    auto9091C3BB_ae = lv_effectHistoryCount;
    auto9091C3BB_ai = 1;
    lv_itEffectHistoryEntry = 1;
    for ( ; ( (auto9091C3BB_ai >= 0 && lv_itEffectHistoryEntry <= auto9091C3BB_ae) || (auto9091C3BB_ai <= 0 && lv_itEffectHistoryEntry >= auto9091C3BB_ae) ) ; lv_itEffectHistoryEntry += auto9091C3BB_ai ) {
        lv_debugString = "";
        lv_effectHistoryEntryTime = EffectHistoryGetTime(lv_effectHistory, lv_itEffectHistoryEntry);
        if (((lv_currentTime - lv_effectHistoryEntryTime) > libGame_gv_deathRecap_MaxTimeElapsed_C)) {
            break;
        }

        lv_effectTime = (lv_currentTime - lv_effectHistoryEntryTime);
        lv_effectingPlayer = EffectHistoryGetOriginPlayerID(lv_effectHistory, lv_itEffectHistoryEntry);
        lv_foundSpecialDamageEffect = false;
        autoD2EEC8FC_ae = lv_specialDamageEffectCount;
        autoD2EEC8FC_ai = 1;
        lv_itSpecialDamageEffectEntry = 1;
        for ( ; ( (autoD2EEC8FC_ai >= 0 && lv_itSpecialDamageEffectEntry <= autoD2EEC8FC_ae) || (autoD2EEC8FC_ai <= 0 && lv_itSpecialDamageEffectEntry >= autoD2EEC8FC_ae) ) ; lv_itSpecialDamageEffectEntry += autoD2EEC8FC_ai ) {
            if ((EffectHistoryGetEffect(lv_effectHistory, lv_itEffectHistoryEntry, c_effectHistoryEffectCurrent) == libGame_gv_deathRecap_SpecialDamageEffects[lv_itSpecialDamageEffectEntry].lv_effect)) {
                lv_foundSpecialDamageEffect = true;
                break;
            }

        }
        lv_effectType = EffectHistoryGetType(lv_effectHistory, lv_itEffectHistoryEntry);
        if ((lv_foundSpecialDamageEffect == true)) {
            lv_effectTypePreset = c_effectAmountDamaged;
            lv_specialDamageEffectAbilityLink = EffectHistoryGetAbil(lv_effectHistory, lv_itEffectHistoryEntry);
            lv_effectAmount = FixedToInt(StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, lv_specialDamageEffectAbilityLink, "Cost.Vital[" + IntToString(0) + "]", lv_effectingPlayer)));
        }
        else {
            auto9F13DA0A_val = lv_effectType;
            if (auto9F13DA0A_val == c_effectHistoryHealing) {
                lv_effectTypePreset = c_effectAmountHealed;
                lv_effectTypePresetAttempted = c_effectAmountLifeAttempted;
            }
            else if (auto9F13DA0A_val == c_effectHistoryDamage) {
                lv_effectTypePreset = c_effectAmountDamaged;
                lv_effectTypePresetAttempted = c_effectAmountDamageAttempted;
            }
            else {
            }
            if ((lv_killingBlowFound == false)) {
                lv_effectKill = (EffectHistoryGetKillingUnit(lv_effectHistory, lv_itEffectHistoryEntry) != null);
            }

            lv_effectAmountShielded = EffectHistoryGetAmountInt(lv_effectHistory, lv_itEffectHistoryEntry, c_effectAmountBehaviorShield, false);
            lv_effectAmount = EffectHistoryGetAmountInt(lv_effectHistory, lv_itEffectHistoryEntry, lv_effectTypePreset, false);
            lv_effectAmountAttempted = EffectHistoryGetAmountInt(lv_effectHistory, lv_itEffectHistoryEntry, lv_effectTypePresetAttempted, false);
        }
        if ((lv_effectAmount <= 0)) {
            if ((lv_killingBlowFound == false) && (lv_effectTypePresetAttempted == c_effectAmountDamageAttempted) && (lv_effectAmountAttempted > lv_effectAmountShielded) && (lv_itEffectHistoryEntry == 1)) {
                lv_effectAmount = MaxI(FixedToInt(Floor(UnitGetPropertyFixed(lv_deadHeroUnit, c_unitPropLife, c_unitPropCurrent))), PlayerScoreValueGetAsInt(lp_deadPlayer, "DeadHeroLastKnownHealth"));
                lv_effectKill = true;
                if ((lv_effectAmount == libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_deadHeroMaxHealth)) {
                    lv_effectAmount = 1;
                }

            }
            else {
                continue;
            }
        }

        lv_effectingUnit = EffectHistoryGetUnitByLocation(lv_effectHistory, lv_itEffectHistoryEntry, c_effectUnitCaster);
        lv_effectingUnitType = EffectHistoryGetOriginUnitType(lv_effectHistory, lv_itEffectHistoryEntry);
        if (((lv_foundSpecialDamageEffect == true) || (CatalogFieldValueGet(c_gameCatalogEffect, EffectHistoryGetEffect(lv_effectHistory, lv_itEffectHistoryEntry, c_effectHistoryEffectCurrent), "SourceButtonFace", c_playerAny) == ""))) {
            lv_sourceButton = null;
        }
        else {
            lv_sourceButton = (CatalogFieldValueGet(c_gameCatalogEffect, EffectHistoryGetEffect(lv_effectHistory, lv_itEffectHistoryEntry, c_effectHistoryEffectCurrent), "SourceButtonFace", c_playerAny));
        }
        if (((lv_effectingUnitType == null) || ((EffectHistoryGetAbil(lv_effectHistory, lv_itEffectHistoryEntry) == "") && (EffectHistoryGetWeapon(lv_effectHistory, lv_itEffectHistoryEntry) == "") && (EffectHistoryGetSourceBehavior(lv_effectHistory, lv_itEffectHistoryEntry) == "")))) {
            lv_effectHistoryEntryAbility = "DebugUnknownAbility";
            lv_debugString = (EffectHistoryGetEffect(lv_effectHistory, lv_itEffectHistoryEntry, c_effectHistoryEffectCurrent));
            if ((lv_sourceButton == null)) {
                lv_sourceButton = (CatalogFieldValueGet(c_gameCatalogAbil, lv_effectHistoryEntryAbility, "CmdButtonArray[" + IntToString(0) + "].DefaultButtonFace", c_playerAny));
            }

        }
        else {
            lv_unitTypeAsString = (UnitGetType(libGame_gv_players[lv_effectingPlayer].lv_heroUnit));
            if ((lv_effectingUnitType != UnitGetType(libGame_gv_players[lv_effectingPlayer].lv_heroUnit)) && (((UnitTypeTestAttribute(lv_effectingUnitType, c_unitAttributeSummoned) == true) && (CatalogFieldValueGet(c_gameCatalogUnit, lv_effectingUnitType, "LeaderAlias", c_playerAny) != lv_unitTypeAsString)) || ((UnitTypeTestAttribute(lv_effectingUnitType, c_unitAttributeSummoned) == false) && (CatalogFieldValueGet(c_gameCatalogUnit, lv_effectingUnitType, "LeaderAlias", c_playerAny) == lv_unitTypeAsString)))) {
                lv_effectHistoryEntryAbility = AbilityCommandGetAbility(TechTreeUnitProducedAbilCmd(lv_effectingUnitType, 0));
                if ((lv_sourceButton == null)) {
                    lv_sourceButton = (CatalogFieldValueGet(c_gameCatalogAbil, lv_effectHistoryEntryAbility, "CmdButtonArray[" + IntToString(0) + "].DefaultButtonFace", c_playerAny));
                }

                lv_effectingUnit = libGame_gv_players[lv_effectingPlayer].lv_heroUnit;
                lv_effectingUnitType = UnitGetType(lv_effectingUnit);
            }
            else {
                if ((UnitTypeTestAttribute(lv_effectingUnitType, c_unitAttributeSummoned) == true) && (lv_effectingUnitType != UnitGetType(libGame_gv_players[lv_effectingPlayer].lv_heroUnit)) && (CatalogFieldValueGet(c_gameCatalogUnit, lv_effectingUnitType, "LeaderAlias", c_playerAny) == lv_unitTypeAsString)) {
                    lv_effectingUnit = libGame_gv_players[lv_effectingPlayer].lv_heroUnit;
                    lv_effectingUnitType = UnitGetType(lv_effectingUnit);
                }

                if ((EffectHistoryGetSourceBehavior(lv_effectHistory, lv_itEffectHistoryEntry) != "") && ((EffectHistoryGetAbil(lv_effectHistory, lv_itEffectHistoryEntry) == "") || (CatalogFieldValueGet(c_gameCatalogBehavior, EffectHistoryGetSourceBehavior(lv_effectHistory, lv_itEffectHistoryEntry), "Face", c_playerAny) != ""))) {
                    lv_effectHistoryEntryBehavior = EffectHistoryGetSourceBehavior(lv_effectHistory, lv_itEffectHistoryEntry);
                    if ((lv_sourceButton == null)) {
                        lv_sourceButton = (CatalogFieldValueGet(c_gameCatalogBehavior, lv_effectHistoryEntryBehavior, "Face", c_playerAny));
                    }

                }
                else {
                    if ((EffectHistoryGetAbil(lv_effectHistory, lv_itEffectHistoryEntry) != "")) {
                        lv_effectHistoryEntryAbility = EffectHistoryGetAbil(lv_effectHistory, lv_itEffectHistoryEntry);
                    }
                    else {
                        lv_effectHistoryEntryAbility = "attack";
                    }
                    if ((lv_sourceButton == null)) {
                        lv_sourceButton = (CatalogFieldValueGet(c_gameCatalogAbil, lv_effectHistoryEntryAbility, "CmdButtonArray[" + IntToString(0) + "].DefaultButtonFace", c_playerAny));
                    }

                }
            }
        }
        if ((lv_effectKill == true) && (lv_killingBlowFound == false)) {
            lv_killingBlowFound = true;
            libUIUI_gf_DeathRecapPopulateToastButton(lv_effectingUnit, lv_effectingUnitType, lp_deadPlayer, lv_effectingPlayer, lv_effectAmount, lv_effectAmountAttempted, lv_sourceButton);
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_A4E072FE"), false);
            TextExpressionSetToken("Param/Expression/lib_Game_20E33C7C", "A", FixedToText(lv_effectHistoryEntryTime, c_fixedPrecisionAny));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_20E33C7C"), false);
        }

        libGame_gf_DeathRecapAddEffectInstanceForPlayer(lp_deadPlayer, EffectHistoryGetEffect(lv_effectHistory, lv_itEffectHistoryEntry, c_effectHistoryEffectCurrent), lv_effectingPlayer, lv_effectHistoryEntryAbility, lv_effectingUnitType, lv_effectAmount, lv_effectAmountAttempted, lv_effectAmountShielded, (lv_effectType == c_effectHistoryHealing), lv_effectTime, lv_debugString, lv_sourceButton);
        if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectBarCount >= libGame_gv_deathRecap_MaxEffectBars_C)) {
            break;
        }

    }
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_14734E6C"), false);
    libGame_gf_DeathRecapSortMaxDamagers(lp_deadPlayer);
    if ((libGame_gv_deathRecap_DeathData[lp_deadPlayer].lv_effectEventCount >= 1)) {
        libUIUI_gf_DeathRecapPopulateEffectInstancesForAbilitiesPanel(lp_deadPlayer);
        libUIUI_gf_DeathRecapPopulateMaxDamagersForPlayer(lp_deadPlayer);
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_A143D762"), true);
    }
}

void libGame_gf_EndofMatchAwardsDisabled (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_EndOfMatchAwardsDisabled_C);
}

void libGame_gf_DisableEndofMatchAwards () {
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_EndOfMatchAwardsDisabled_C);
}

fixed libGame_gf_GetMVPAwardAmount (string lp_heroUnit, int lp_awardCategory) {
    int autoCC71B3A0_val;

    // Variable Declarations
    fixed lv_amounttoReturn;

    // Variable Initialization

    // Implementation
    autoCC71B3A0_val = lp_awardCategory;
    if (autoCC71B3A0_val == libGame_ge_MVPAwards_Assist) {
        lv_amounttoReturn = libGame_gv_awardforAssist;
        if ((lp_heroUnit == "HeroLostVikingsController")) {
            lv_amounttoReturn = 0.75;
        }
        else if ((lp_heroUnit == "HeroAbathur")) {
            lv_amounttoReturn = 0.75;
        }
    }
    else if (autoCC71B3A0_val == libGame_ge_MVPAwards_Kill) {
        lv_amounttoReturn = libGame_gv_awardforKill;
    }
    else if (autoCC71B3A0_val == libGame_ge_MVPAwards_TimeSpentDead) {
        lv_amounttoReturn = libGame_gv_awardforPercentageTimeSpentDead;
        if ((lp_heroUnit == "HeroMurky")) {
            lv_amounttoReturn = -1.0;
        }
        else if ((lp_heroUnit == "HeroGall")) {
            lv_amounttoReturn = -1.0;
        }
        else if ((lp_heroUnit == "HeroCho")) {
            lv_amounttoReturn = -0.85;
        }
    }
    else if (autoCC71B3A0_val == libGame_ge_MVPAwards_TopDamageTakenasWarrior) {
        lv_amounttoReturn = libGame_gv_awardforTopDamageTakenasWarrior;
    }
    else if (autoCC71B3A0_val == libGame_ge_MVPAwards_TopDamageTakenasWarrioronTeam) {
        lv_amounttoReturn = libGame_gv_awardforTopDamageTakenasWarrioronTeam;
    }
    else if (autoCC71B3A0_val == libGame_ge_MVPAwards_TopHealing) {
        lv_amounttoReturn = libGame_gv_awardforTopHealing;
    }
    else if (autoCC71B3A0_val == libGame_ge_MVPAwards_TopHeroDamage) {
        lv_amounttoReturn = libGame_gv_awardforTopHeroDamage;
    }
    else if (autoCC71B3A0_val == libGame_ge_MVPAwards_TopHeroDamageonTeam) {
        lv_amounttoReturn = libGame_gv_awardforTopHeroDamageonTeam;
    }
    else if (autoCC71B3A0_val == libGame_ge_MVPAwards_TopSiegeDamage) {
        lv_amounttoReturn = libGame_gv_awardforTopSiegeDamage;
    }
    else if (autoCC71B3A0_val == libGame_ge_MVPAwards_TopSiegeDamageonTeam) {
        lv_amounttoReturn = libGame_gv_awardforTopSiegeDamageonTeam;
    }
    else if (autoCC71B3A0_val == libGame_ge_MVPAwards_TopXPContributor) {
        lv_amounttoReturn = libGame_gv_awardforTopXPContributor;
    }
    else if (autoCC71B3A0_val == libGame_ge_MVPAwards_TopXPContributoronTeam) {
        lv_amounttoReturn = libGame_gv_awardforTopXPContributoronTeam;
    }
    else if (autoCC71B3A0_val == libGame_ge_MVPAwards_OnWinningTeam) {
        lv_amounttoReturn = libGame_gv_awardforOnWinningTeam;
    }
    else {
    }
    return lv_amounttoReturn;
}

void libGame_gf_SortMVPStats () {
    int auto6A308B90_ae;

    // Variable Declarations
    bool lv_reSort;
    int lv_iterator;
    int lv_prioritytoMove;
    fixed lv_valuetoMove;
    text lv_labeltoMove;
    text lv_texttoMove;

    // Variable Initialization

    // Implementation
    auto6A308B90_ae = (libGame_gv_maxMVPStatSlots - 1);
    lv_iterator = 1;
    for ( ; lv_iterator <= auto6A308B90_ae ; lv_iterator += 1 ) {
        if ((((libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatPriority) < (libGame_gv_mVPStatstoDisplay[(lv_iterator + 1)].lv_mVPStatPriority)) || (((libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatPriority) == (libGame_gv_mVPStatstoDisplay[(lv_iterator + 1)].lv_mVPStatPriority)) && (libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatValue < libGame_gv_mVPStatstoDisplay[(lv_iterator + 1)].lv_mVPStatValue)))) {
            lv_reSort = true;
            lv_labeltoMove = libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatLabel;
            lv_prioritytoMove = libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatPriority;
            lv_texttoMove = libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatText;
            lv_valuetoMove = libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatValue;
            libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatLabel = libGame_gv_mVPStatstoDisplay[(lv_iterator + 1)].lv_mVPStatLabel;
            libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatPriority = libGame_gv_mVPStatstoDisplay[(lv_iterator + 1)].lv_mVPStatPriority;
            libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatText = libGame_gv_mVPStatstoDisplay[(lv_iterator + 1)].lv_mVPStatText;
            libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatValue = libGame_gv_mVPStatstoDisplay[(lv_iterator + 1)].lv_mVPStatValue;
            libGame_gv_mVPStatstoDisplay[(lv_iterator + 1)].lv_mVPStatLabel = lv_labeltoMove;
            libGame_gv_mVPStatstoDisplay[(lv_iterator + 1)].lv_mVPStatPriority = lv_prioritytoMove;
            libGame_gv_mVPStatstoDisplay[(lv_iterator + 1)].lv_mVPStatText = lv_texttoMove;
            libGame_gv_mVPStatstoDisplay[(lv_iterator + 1)].lv_mVPStatValue = lv_valuetoMove;
        }

    }
    if ((lv_reSort == true)) {
        libGame_gf_SortMVPStats();
    }

}

void libGame_gf_AssignMVP (int lp_winningTeam) {
    int auto1F73EC8A_ae;
    int auto62E88247_ae;
    int auto1CB0D15B_ae;

    // Variable Declarations
    fixed lv_mVPScoreToBeat;
    int lv_iterator;
    int lv_itRoleMultiClass;
    fixed lv_gameLength;
    int lv_tiebreaker;
    int lv_topHeroDamagerinGame;
    fixed lv_topHeroDamageAmountinGame;
    int[libCore_gv_bALMaxTeams + 1] lv_topHeroDamagerPerTeam;
    fixed[libCore_gv_bALMaxTeams + 1] lv_topHeroDamageAmountPerTeam;
    int lv_topSiegeDamagerinGame;
    fixed lv_topSiegeDamageAmountinGame;
    int[libCore_gv_bALMaxTeams + 1] lv_topSiegeDamagerPerTeam;
    fixed[libCore_gv_bALMaxTeams + 1] lv_topSiegeDamageAmountPerTeam;
    int lv_topDamageTakerinGame;
    fixed lv_topDamageTakenAmountinGame;
    int[libCore_gv_bALMaxTeams + 1] lv_topDamageTakerPerTeam;
    fixed[libCore_gv_bALMaxTeams + 1] lv_topDamageTakenAmountPerTeam;
    int lv_topXPContributorinGame;
    fixed lv_topXPContributionAmountinGame;
    int[libCore_gv_bALMaxTeams + 1] lv_topXPContributorPerTeam;
    fixed[libCore_gv_bALMaxTeams + 1] lv_topXPContribution;
    int lv_topHealerinGame;
    fixed lv_topHealAmount;
    int[libCore_gv_bALMaxTeams + 1] lv_topHealerPerTeam;
    fixed[libCore_gv_bALMaxTeams + 1] lv_topHealAmountPerTeam;
    const int lv_maxMVPStatSlots = 3;
    int lv_mVPStatstoDisplayIterator;
    const fixed lv_mVPStatThresholdBeforePuttingIntoUISlots = 20.0;
    const fixed lv_mVPStatThresholdBeforePuttingIntoUISlotsforHeals = 10.0;
    text lv_emptyText;

    // Variable Initialization
    lv_gameLength = TimerGetElapsed(libGame_gv_gameTimer);
    lv_mVPStatstoDisplayIterator = 1;

    // Implementation
    if (((libCore_gv_sYSGameMode == libCore_ge_GameModes_ArenaMode) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_AttackDefend) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_Debug) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_TryMe) || (libGame_gv_endofMatchAwardsDisabled == true) || ((GameIsMatchmade() == false) && (libCore_gv_dEBUGDebuggingEnabled == false) && (libCore_gv_sYSGameMode != libCore_ge_GameModes_Tutorial1) && (libCore_gv_sYSGameMode != libCore_ge_GameModes_TutorialMapMechanics)))) {
        return ;
    }

    if (((libCore_gv_sYSGameMode == libCore_ge_GameModes_Tutorial1) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_TutorialMapMechanics))) {
        libGame_gv_mVPManualOverride = 1;
        libGame_gv_playerAwardEligibility[1][0].lv_dEBUGManuallyForceAssigned = true;
    }

    TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_8C6A653D") + IntToText(lp_winningTeam)), false);
    auto1F73EC8A_ae = libCore_gv_bALMaxPlayers;
    lv_iterator = 1;
    for ( ; lv_iterator <= auto1F73EC8A_ae ; lv_iterator += 1 ) {
        libGame_gv_mVPStats[lv_iterator].lv_team = libGame_gf_TeamNumberOfPlayer(lv_iterator);
        libGame_gv_mVPStats[lv_iterator].lv_role = libGame_gv_players[lv_iterator].lv_heroData.lv_class;
        libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gv_players[lv_iterator].lv_heroData.lv_heroRoles, libGame_gv_mVPStats[lv_iterator].lv_mvpRoles);
        libGame_gv_mVPStats[lv_iterator].lv_heroDamageDone = PlayerScoreValueGetAsFixed(lv_iterator, "HeroDamage");
        libGame_gf_SetAwardValueandWeight(lv_iterator, libGame_gv_mVPStats[lv_iterator].lv_heroDamageDone, libGame_ge_SecondaryAwards_Painbringer);
        libGame_gv_mVPStats[lv_iterator].lv_siegeDamageDone = PlayerScoreValueGetAsFixed(lv_iterator, "SiegeDamage");
        libGame_gf_SetAwardValueandWeight(lv_iterator, libGame_gv_mVPStats[lv_iterator].lv_siegeDamageDone, libGame_ge_SecondaryAwards_SiegeMaster);
        libGame_gv_mVPStats[lv_iterator].lv_damageTaken = libGame_gv_scoreValues[lv_iterator].lv_damageTaken;
        libGame_gv_mVPStats[lv_iterator].lv_deaths = libGame_gv_scoreValues[lv_iterator].lv_deaths;
        libGame_gf_SetAwardValueandWeight(lv_iterator, libGame_gv_mVPStats[lv_iterator].lv_damageTaken, libGame_ge_SecondaryAwards_Bulwark);
        libGame_gv_mVPStats[lv_iterator].lv_xPContribution = PlayerScoreValueGetAsFixed(lv_iterator, "ExperienceContribution");
        libGame_gf_SetAwardValueandWeight(lv_iterator, libGame_gv_mVPStats[lv_iterator].lv_xPContribution, libGame_ge_SecondaryAwards_Experienced);
        libGame_gv_mVPStats[lv_iterator].lv_healAmount = PlayerScoreValueGetAsFixed(lv_iterator, "Healing");
        libGame_gf_SetAwardValueandWeight(lv_iterator, libGame_gv_mVPStats[lv_iterator].lv_healAmount, libGame_ge_SecondaryAwards_MainHealer);
        libGame_gv_mVPStats[lv_iterator].lv_enemyTeam = libGame_gf_EnemyTeamNumberOfPlayer(lv_iterator);
        libGame_gv_mVPStats[lv_iterator].lv_heroName = UnitTypeGetName(UnitGetType(libGame_gv_players[lv_iterator].lv_heroUnit));
        libGame_gv_mVPStats[lv_iterator].lv_unitType = UnitGetType(libGame_gv_players[lv_iterator].lv_heroUnit);
        if ((libGame_gv_mVPStats[lv_iterator].lv_heroDamageDone > lv_topHeroDamageAmountPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team])) {
            lv_topHeroDamageAmountPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team] = libGame_gv_mVPStats[lv_iterator].lv_heroDamageDone;
            lv_topHeroDamagerPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team] = lv_iterator;
        }

        if ((libGame_gv_mVPStats[lv_iterator].lv_siegeDamageDone > lv_topSiegeDamageAmountPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team])) {
            lv_topSiegeDamageAmountPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team] = libGame_gv_mVPStats[lv_iterator].lv_siegeDamageDone;
            lv_topSiegeDamagerPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team] = lv_iterator;
        }

        if ((libGame_gv_mVPStats[lv_iterator].lv_damageTaken > lv_topDamageTakenAmountPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team])) {
            lv_topDamageTakenAmountPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team] = libGame_gv_mVPStats[lv_iterator].lv_damageTaken;
            lv_topDamageTakerPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team] = lv_iterator;
        }

        if ((libGame_gv_mVPStats[lv_iterator].lv_xPContribution > lv_topXPContribution[libGame_gv_mVPStats[lv_iterator].lv_team])) {
            lv_topXPContribution[libGame_gv_mVPStats[lv_iterator].lv_team] = libGame_gv_mVPStats[lv_iterator].lv_xPContribution;
            lv_topXPContributorPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team] = lv_iterator;
        }

        if ((libGame_gv_mVPStats[lv_iterator].lv_healAmount > lv_topHealAmountPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team])) {
            lv_topHealAmountPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team] = libGame_gv_mVPStats[lv_iterator].lv_healAmount;
            lv_topHealerPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team] = lv_iterator;
        }

    }
    TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_F2DB1E8D") + UnitTypeGetName(UnitGetType(libGame_gv_players[lv_topHeroDamagerPerTeam[1]].lv_heroUnit))), false);
    TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_269671F4") + FixedToText(lv_topHeroDamageAmountPerTeam[1], c_fixedPrecisionAny)), false);
    TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_B4D8E244") + UnitTypeGetName(UnitGetType(libGame_gv_players[lv_topHeroDamagerPerTeam[2]].lv_heroUnit))), false);
    TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_14F8534A") + FixedToText(lv_topHeroDamageAmountPerTeam[2], c_fixedPrecisionAny)), false);
    TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_BAC429E4") + UnitTypeGetName(UnitGetType(libGame_gv_players[lv_topSiegeDamagerPerTeam[1]].lv_heroUnit))), false);
    TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_8DE4645B") + FixedToText(lv_topSiegeDamageAmountPerTeam[1], c_fixedPrecisionAny)), false);
    TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_E97B07AB") + UnitTypeGetName(UnitGetType(libGame_gv_players[lv_topSiegeDamagerPerTeam[2]].lv_heroUnit))), false);
    TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_44002CA1") + FixedToText(lv_topSiegeDamageAmountPerTeam[2], c_fixedPrecisionAny)), false);
    TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_DD4D7AB3") + UnitTypeGetName(UnitGetType(libGame_gv_players[lv_topDamageTakerPerTeam[1]].lv_heroUnit))), false);
    TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_BFDDD4A9") + FixedToText(lv_topDamageTakenAmountPerTeam[1], c_fixedPrecisionAny)), false);
    TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_667838D9") + UnitTypeGetName(UnitGetType(libGame_gv_players[lv_topDamageTakerPerTeam[2]].lv_heroUnit))), false);
    TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_5B95C075") + FixedToText(lv_topDamageTakenAmountPerTeam[2], c_fixedPrecisionAny)), false);
    TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_8E88CA60") + UnitTypeGetName(UnitGetType(libGame_gv_players[lv_topHealerPerTeam[1]].lv_heroUnit))), false);
    TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_0E6D649F") + FixedToText(lv_topHealAmountPerTeam[1], c_fixedPrecisionAny)), false);
    TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_11E00082") + UnitTypeGetName(UnitGetType(libGame_gv_players[lv_topHealerPerTeam[2]].lv_heroUnit))), false);
    TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_E893337F") + FixedToText(lv_topHealAmountPerTeam[2], c_fixedPrecisionAny)), false);
    auto62E88247_ae = libCore_gv_bALMaxPlayers;
    lv_iterator = 1;
    for ( ; lv_iterator <= auto62E88247_ae ; lv_iterator += 1 ) {
        if ((libGame_gv_mVPStats[lv_iterator].lv_team == lp_winningTeam)) {
            libGame_gv_mVPStats[lv_iterator].lv_mVPScore += libGame_gf_GetMVPAwardAmount(libGame_gv_mVPStats[lv_iterator].lv_unitType, libGame_ge_MVPAwards_OnWinningTeam);
        }

        libGame_gv_mVPStats[lv_iterator].lv_kills = libGame_gv_scoreValues[lv_iterator].lv_kills;
        libGame_gf_SetAwardValueandWeight(lv_iterator, libGame_gv_mVPStats[lv_iterator].lv_kills, libGame_ge_SecondaryAwards_Finisher);
        libGame_gv_mVPStats[lv_iterator].lv_mVPScore += (libGame_gv_mVPStats[lv_iterator].lv_kills * libGame_gf_GetMVPAwardAmount(libGame_gv_mVPStats[lv_iterator].lv_unitType, libGame_ge_MVPAwards_Kill));
        TriggerDebugOutput(8, (libGame_gv_mVPStats[lv_iterator].lv_heroName + StringExternal("Param/Value/lib_Game_A78D91D5") + FixedToText(libGame_gv_scoreValues[lv_iterator].lv_kills, c_fixedPrecisionAny) + StringExternal("Param/Value/lib_Game_BFDA6658")), false);
        libGame_gv_mVPStats[lv_iterator].lv_assists = libGame_gv_scoreValues[lv_iterator].lv_assists;
        libGame_gv_mVPStats[lv_iterator].lv_mVPScore += (libGame_gv_mVPStats[lv_iterator].lv_assists * libGame_gf_GetMVPAwardAmount(libGame_gv_mVPStats[lv_iterator].lv_unitType, libGame_ge_MVPAwards_Assist));
        TriggerDebugOutput(8, (libGame_gv_mVPStats[lv_iterator].lv_heroName + StringExternal("Param/Value/lib_Game_0F666E73") + FixedToText(libGame_gv_scoreValues[lv_iterator].lv_assists, c_fixedPrecisionAny) + StringExternal("Param/Value/lib_Game_9666B389")), false);
        libGame_gv_mVPStats[lv_iterator].lv_timeSpentDead = PlayerScoreValueGetAsFixed(lv_iterator, "TimeSpentDead");
        if ((lv_gameLength > 0.0)) {
            TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_76523999") + FixedToText(lv_gameLength, c_fixedPrecisionAny) + StringExternal("Param/Value/lib_Game_00430BFC")), false);
            libGame_gv_mVPStats[lv_iterator].lv_mVPScore += (((libGame_gv_mVPStats[lv_iterator].lv_timeSpentDead / lv_gameLength) * 100.0) * libGame_gf_GetMVPAwardAmount(libGame_gv_mVPStats[lv_iterator].lv_unitType, libGame_ge_MVPAwards_TimeSpentDead));
            TriggerDebugOutput(8, (libGame_gv_mVPStats[lv_iterator].lv_heroName + StringExternal("Param/Value/lib_Game_AA28B988") + FixedToText(PlayerScoreValueGetAsFixed(lv_iterator, "TimeSpentDead"), c_fixedPrecisionAny) + StringExternal("Param/Value/lib_Game_FFBAB715") + FixedToText((((libGame_gv_mVPStats[lv_iterator].lv_timeSpentDead / lv_gameLength) * 100.0) * libGame_gv_awardforPercentageTimeSpentDead), c_fixedPrecisionAny) + StringExternal("Param/Value/lib_Game_359F599B")), false);
        }
        else {
            TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_4CF8135A")), false);
        }
        if ((lv_topHeroDamagerPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team] == lv_iterator)) {
            libGame_gv_mVPStats[lv_iterator].lv_mVPScore += libGame_gf_GetMVPAwardAmount(libGame_gv_mVPStats[lv_iterator].lv_unitType, libGame_ge_MVPAwards_TopHeroDamageonTeam);
            if ((lv_topHeroDamageAmountPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team] > lv_topHeroDamageAmountPerTeam[libGame_gv_mVPStats[lv_iterator].lv_enemyTeam])) {
                lv_topHeroDamagerinGame = lv_iterator;
                lv_topHeroDamageAmountinGame = lv_topHeroDamageAmountPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team];
                libGame_gv_mVPStats[lv_iterator].lv_mVPScore += libGame_gf_GetMVPAwardAmount(libGame_gv_mVPStats[lv_iterator].lv_unitType, libGame_ge_MVPAwards_TopHeroDamage);
            }

        }

        if ((lv_topSiegeDamagerPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team] == lv_iterator)) {
            libGame_gv_mVPStats[lv_iterator].lv_mVPScore += libGame_gf_GetMVPAwardAmount(libGame_gv_mVPStats[lv_iterator].lv_unitType, libGame_ge_MVPAwards_TopSiegeDamageonTeam);
            if ((lv_topSiegeDamageAmountPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team] > lv_topSiegeDamageAmountPerTeam[libGame_gv_mVPStats[lv_iterator].lv_enemyTeam])) {
                lv_topSiegeDamagerinGame = lv_iterator;
                lv_topSiegeDamageAmountinGame = lv_topSiegeDamageAmountPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team];
                libGame_gv_mVPStats[lv_iterator].lv_mVPScore += libGame_gf_GetMVPAwardAmount(libGame_gv_mVPStats[lv_iterator].lv_unitType, libGame_ge_MVPAwards_TopSiegeDamage);
            }

        }

        if ((lv_topDamageTakerPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team] == lv_iterator) && (PlayerGroupHasPlayer(libGame_gv_mVPStats[lv_iterator].lv_mvpRoles, (c_heroRoleWarrior)) == true)) {
            libGame_gv_mVPStats[lv_iterator].lv_mVPScore += libGame_gf_GetMVPAwardAmount(libGame_gv_mVPStats[lv_iterator].lv_unitType, libGame_ge_MVPAwards_TopDamageTakenasWarrioronTeam);
            if ((lv_topDamageTakenAmountPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team] > lv_topDamageTakenAmountPerTeam[libGame_gv_mVPStats[lv_iterator].lv_enemyTeam])) {
                lv_topDamageTakerinGame = lv_iterator;
                lv_topDamageTakenAmountinGame = lv_topDamageTakenAmountPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team];
                libGame_gv_mVPStats[lv_iterator].lv_mVPScore += libGame_gf_GetMVPAwardAmount(libGame_gv_mVPStats[lv_iterator].lv_unitType, libGame_ge_MVPAwards_TopDamageTakenasWarrior);
            }

        }

        if ((lv_topHealerPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team] == lv_iterator)) {
            if ((lv_topHealAmountPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team] >= lv_topHealAmountPerTeam[libGame_gv_mVPStats[lv_iterator].lv_enemyTeam])) {
                lv_topHealerinGame = lv_iterator;
                lv_topHealAmount = lv_topHealAmountPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team];
                libGame_gv_mVPStats[lv_iterator].lv_mVPScore += libGame_gf_GetMVPAwardAmount(libGame_gv_mVPStats[lv_iterator].lv_unitType, libGame_ge_MVPAwards_TopHealing);
            }

        }

        if ((lv_topXPContributorPerTeam[libGame_gv_mVPStats[lv_iterator].lv_team] == lv_iterator)) {
            libGame_gv_mVPStats[lv_iterator].lv_mVPScore += libGame_gf_GetMVPAwardAmount(libGame_gv_mVPStats[lv_iterator].lv_unitType, libGame_ge_MVPAwards_TopXPContributoronTeam);
            if ((lv_topXPContribution[libGame_gv_mVPStats[lv_iterator].lv_team] >= lv_topXPContribution[libGame_gv_mVPStats[lv_iterator].lv_enemyTeam])) {
                lv_topXPContributorinGame = lv_iterator;
                lv_topXPContributionAmountinGame = lv_topXPContribution[libGame_gv_mVPStats[lv_iterator].lv_team];
                libGame_gv_mVPStats[lv_iterator].lv_mVPScore += libGame_gf_GetMVPAwardAmount(libGame_gv_mVPStats[lv_iterator].lv_unitType, libGame_ge_MVPAwards_TopXPContributor);
            }

        }

        TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_45CD443A") + libGame_gv_mVPStats[lv_iterator].lv_heroName + StringExternal("Param/Value/lib_Game_5228A42B") + FixedToText(libGame_gv_mVPStats[lv_iterator].lv_mVPScore, c_fixedPrecisionAny)), false);
        if ((libGame_gv_mVPStats[lv_iterator].lv_mVPScore > lv_mVPScoreToBeat)) {
            lv_mVPScoreToBeat = libGame_gv_mVPStats[lv_iterator].lv_mVPScore;
            libGame_gv_mVPPlayer = lv_iterator;
        }
        else if ((libGame_gv_mVPStats[lv_iterator].lv_mVPScore == lv_mVPScoreToBeat) && (libGame_gv_mVPStats[lv_iterator].lv_xPContribution > libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_xPContribution)) {
            lv_mVPScoreToBeat = libGame_gv_mVPStats[lv_iterator].lv_mVPScore;
            libGame_gv_mVPPlayer = lv_iterator;
        }
        else if ((libGame_gv_mVPStats[lv_iterator].lv_mVPScore == lv_mVPScoreToBeat) && (libGame_gv_mVPStats[lv_iterator].lv_xPContribution == libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_xPContribution)) {
            lv_tiebreaker = RandomInt(0, 1);
            if ((lv_tiebreaker == 1)) {
                lv_mVPScoreToBeat = libGame_gv_mVPStats[lv_iterator].lv_mVPScore;
                libGame_gv_mVPPlayer = lv_iterator;
            }

        }
    }
    if ((libGame_gv_mVPManualOverride != 0)) {
        libGame_gv_mVPPlayer = libGame_gv_mVPManualOverride;
    }

    libGame_gv_playerHasWonAward[libGame_gv_mVPPlayer] = true;
    libGame_gf_BuildInitialSecondaryAwardList();
    libGame_gf_ScoreValuesReportIntegerValueAndLog(libGame_gv_mVPPlayer, "EndOfMatchAwardMVPBoolean", 1);
    if ((lv_topDamageTakerinGame == libGame_gv_mVPPlayer) && (PlayerGroupHasPlayer(libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_mvpRoles, (c_heroRoleWarrior)) == true) && ((((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_damageTaken * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Bulwark]) * 100.0) > lv_mVPStatThresholdBeforePuttingIntoUISlots) && (lv_mVPStatstoDisplayIterator <= libGame_gv_maxMVPStatSlots)) {
        libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatPriority = libGame_ge_MVPStatPriority_BestinGame;
        libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatLabel = StringExternal("Param/Value/lib_Game_4229130A");
        libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue = (((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_damageTaken * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Bulwark]) * 100.0);
        libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatText = (FixedToText(libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue, 0) + StringExternal("Param/Value/lib_Game_C7457CC9"));
        lv_mVPStatstoDisplayIterator += 1;
    }
    else {
        if ((PlayerGroupHasPlayer(libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_mvpRoles, (c_heroRoleWarrior)) == true) && ((lv_topDamageTakerPerTeam[1] == libGame_gv_mVPPlayer) || (lv_topDamageTakerPerTeam[2] == libGame_gv_mVPPlayer)) && ((((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_damageTaken * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Bulwark]) * 100.0) > lv_mVPStatThresholdBeforePuttingIntoUISlots) && (lv_mVPStatstoDisplayIterator <= libGame_gv_maxMVPStatSlots)) {
            libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatPriority = libGame_ge_MVPStatPriority_BestinTeam;
            libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatLabel = StringExternal("Param/Value/lib_Game_6AC097A5");
            libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue = (((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_damageTaken * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Bulwark]) * 100.0);
            libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatText = (FixedToText(libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue, 0) + StringExternal("Param/Value/lib_Game_8F83B293"));
            lv_mVPStatstoDisplayIterator += 1;
        }
        else {
            if ((PlayerGroupHasPlayer(libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_mvpRoles, (c_heroRoleWarrior)) == true) && ((((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_damageTaken * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Bulwark]) * 100.0) > lv_mVPStatThresholdBeforePuttingIntoUISlots) && (lv_mVPStatstoDisplayIterator <= libGame_gv_maxMVPStatSlots)) {
                libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatPriority = libGame_ge_MVPStatPriority_Notable;
                libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatLabel = StringExternal("Param/Value/lib_Game_429A5F34");
                libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue = (((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_damageTaken * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Bulwark]) * 100.0);
                libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatText = (FixedToText(libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue, 0) + StringExternal("Param/Value/lib_Game_20354E62"));
                lv_mVPStatstoDisplayIterator += 1;
            }

        }
    }
    if ((lv_topHeroDamagerinGame == libGame_gv_mVPPlayer) && ((((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_heroDamageDone * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Painbringer]) * 100.0) > lv_mVPStatThresholdBeforePuttingIntoUISlots) && (lv_mVPStatstoDisplayIterator <= libGame_gv_maxMVPStatSlots)) {
        libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatPriority = libGame_ge_MVPStatPriority_BestinGame;
        libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatLabel = StringExternal("Param/Value/lib_Game_55CBB08A");
        libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue = (((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_heroDamageDone * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Painbringer]) * 100.0);
        libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatText = (FixedToText(libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue, 0) + StringExternal("Param/Value/lib_Game_30502BA8"));
        lv_mVPStatstoDisplayIterator += 1;
    }
    else {
        if (((lv_topHeroDamagerPerTeam[1] == libGame_gv_mVPPlayer) || (lv_topHeroDamagerPerTeam[2] == libGame_gv_mVPPlayer)) && ((((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_heroDamageDone * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Painbringer]) * 100.0) > lv_mVPStatThresholdBeforePuttingIntoUISlots) && (lv_mVPStatstoDisplayIterator <= libGame_gv_maxMVPStatSlots)) {
            libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatPriority = libGame_ge_MVPStatPriority_BestinTeam;
            libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatLabel = StringExternal("Param/Value/lib_Game_F42C549A");
            libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue = (((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_heroDamageDone * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Painbringer]) * 100.0);
            libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatText = (FixedToText(libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue, 0) + StringExternal("Param/Value/lib_Game_05A3CB12"));
            lv_mVPStatstoDisplayIterator += 1;
        }
        else {
            if (((((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_heroDamageDone * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Painbringer]) * 100.0) > lv_mVPStatThresholdBeforePuttingIntoUISlots) && (lv_mVPStatstoDisplayIterator <= libGame_gv_maxMVPStatSlots)) {
                libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatPriority = libGame_ge_MVPStatPriority_Notable;
                libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatLabel = StringExternal("Param/Value/lib_Game_8D37B4CF");
                libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue = (((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_heroDamageDone * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Painbringer]) * 100.0);
                libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatText = (FixedToText(libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue, 0) + StringExternal("Param/Value/lib_Game_25CBB8D6"));
                lv_mVPStatstoDisplayIterator += 1;
            }

        }
    }
    if ((lv_topHealerinGame == libGame_gv_mVPPlayer) && ((((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_healAmount * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Bulwark]) * 100.0) > lv_mVPStatThresholdBeforePuttingIntoUISlotsforHeals) && (lv_mVPStatstoDisplayIterator <= libGame_gv_maxMVPStatSlots)) {
        libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatPriority = libGame_ge_MVPStatPriority_BestinGame;
        libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatLabel = StringExternal("Param/Value/lib_Game_8812D893");
        libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue = (((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_healAmount * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Bulwark]) * 100.0);
        libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatText = (FixedToText(libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue, 0) + StringExternal("Param/Value/lib_Game_02DE34F2"));
        lv_mVPStatstoDisplayIterator += 1;
    }
    else {
        if (((lv_topHealerPerTeam[1] == libGame_gv_mVPPlayer) || (lv_topHealerPerTeam[2] == libGame_gv_mVPPlayer)) && ((((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_healAmount * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Bulwark]) * 100.0) > lv_mVPStatThresholdBeforePuttingIntoUISlotsforHeals) && (lv_mVPStatstoDisplayIterator <= libGame_gv_maxMVPStatSlots)) {
            libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatPriority = libGame_ge_MVPStatPriority_BestinTeam;
            libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatLabel = StringExternal("Param/Value/lib_Game_A3651BF8");
            libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue = (((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_healAmount * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Bulwark]) * 100.0);
            libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatText = (FixedToText(libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue, 0) + StringExternal("Param/Value/lib_Game_1BD8ECF3"));
            lv_mVPStatstoDisplayIterator += 1;
        }
        else {
            if (((((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_healAmount * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Bulwark]) * 100.0) > lv_mVPStatThresholdBeforePuttingIntoUISlotsforHeals) && (lv_mVPStatstoDisplayIterator <= libGame_gv_maxMVPStatSlots)) {
                libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatPriority = libGame_ge_MVPStatPriority_Notable;
                libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatLabel = StringExternal("Param/Value/lib_Game_B9F8E56F");
                libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue = (((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_healAmount * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Bulwark]) * 100.0);
                libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatText = (FixedToText(libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue, 0) + StringExternal("Param/Value/lib_Game_B5D7A9B9"));
                lv_mVPStatstoDisplayIterator += 1;
            }

        }
    }
    if ((lv_topSiegeDamagerinGame == libGame_gv_mVPPlayer) && ((((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_siegeDamageDone * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_SiegeMaster]) * 100.0) > lv_mVPStatThresholdBeforePuttingIntoUISlots) && (lv_mVPStatstoDisplayIterator <= libGame_gv_maxMVPStatSlots)) {
        libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatPriority = libGame_ge_MVPStatPriority_BestinGame;
        libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatLabel = StringExternal("Param/Value/lib_Game_B3A03F4F");
        libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue = (((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_siegeDamageDone * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_SiegeMaster]) * 100.0);
        libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatText = (FixedToText(libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue, 0) + StringExternal("Param/Value/lib_Game_FBF75DC5"));
        lv_mVPStatstoDisplayIterator += 1;
    }
    else {
        if (((lv_topSiegeDamagerPerTeam[1] == libGame_gv_mVPPlayer) || (lv_topSiegeDamagerPerTeam[2] == libGame_gv_mVPPlayer)) && ((((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_siegeDamageDone * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_SiegeMaster]) * 100.0) > lv_mVPStatThresholdBeforePuttingIntoUISlots) && (lv_mVPStatstoDisplayIterator <= libGame_gv_maxMVPStatSlots)) {
            libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatPriority = libGame_ge_MVPStatPriority_BestinTeam;
            libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatLabel = StringExternal("Param/Value/lib_Game_68B3198B");
            libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue = (((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_siegeDamageDone * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_SiegeMaster]) * 100.0);
            libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatText = (FixedToText(libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue, 0) + StringExternal("Param/Value/lib_Game_8068A215"));
            lv_mVPStatstoDisplayIterator += 1;
        }
        else {
            if (((((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_siegeDamageDone * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_SiegeMaster]) * 100.0) > lv_mVPStatThresholdBeforePuttingIntoUISlots) && (lv_mVPStatstoDisplayIterator <= libGame_gv_maxMVPStatSlots)) {
                libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatPriority = libGame_ge_MVPStatPriority_Notable;
                libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatLabel = StringExternal("Param/Value/lib_Game_73E57423");
                libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue = (((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_siegeDamageDone * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_SiegeMaster]) * 100.0);
                libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatText = (FixedToText(libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue, 0) + StringExternal("Param/Value/lib_Game_B7C1F132"));
                lv_mVPStatstoDisplayIterator += 1;
            }

        }
    }
    if ((lv_topXPContributorinGame == libGame_gv_mVPPlayer) && ((((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_xPContribution * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Experienced]) * 100.0) > lv_mVPStatThresholdBeforePuttingIntoUISlots) && (lv_mVPStatstoDisplayIterator <= libGame_gv_maxMVPStatSlots)) {
        libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatPriority = libGame_ge_MVPStatPriority_BestinGame;
        libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatLabel = StringExternal("Param/Value/lib_Game_674FFC7D");
        libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue = (((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_xPContribution * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Experienced]) * 100.0);
        libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatText = (FixedToText(libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue, 0) + StringExternal("Param/Value/lib_Game_A941F748"));
        lv_mVPStatstoDisplayIterator += 1;
    }
    else {
        if (((lv_topXPContributorPerTeam[1] == libGame_gv_mVPPlayer) || (lv_topXPContributorPerTeam[2] == libGame_gv_mVPPlayer)) && ((((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_xPContribution * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Experienced]) * 100.0) > lv_mVPStatThresholdBeforePuttingIntoUISlots) && (lv_mVPStatstoDisplayIterator <= libGame_gv_maxMVPStatSlots)) {
            libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatPriority = libGame_ge_MVPStatPriority_BestinTeam;
            libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatLabel = StringExternal("Param/Value/lib_Game_E0929865");
            libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue = (((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_xPContribution * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Experienced]) * 100.0);
            libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatText = (FixedToText(libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue, 0) + StringExternal("Param/Value/lib_Game_1CFE3DC7"));
            lv_mVPStatstoDisplayIterator += 1;
        }
        else {
            if (((((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_xPContribution * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Experienced]) * 100.0) > lv_mVPStatThresholdBeforePuttingIntoUISlots) && (lv_mVPStatstoDisplayIterator <= libGame_gv_maxMVPStatSlots)) {
                libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatPriority = libGame_ge_MVPStatPriority_Notable;
                libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatLabel = StringExternal("Param/Value/lib_Game_7622D521");
                libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue = (((libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_xPContribution * 0.1) / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(libGame_gv_mVPPlayer)][libGame_ge_SecondaryAwards_Experienced]) * 100.0);
                libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatText = (FixedToText(libGame_gv_mVPStatstoDisplay[lv_mVPStatstoDisplayIterator].lv_mVPStatValue, 0) + StringExternal("Param/Value/lib_Game_A6AA3EBD"));
                lv_mVPStatstoDisplayIterator += 1;
            }

        }
    }
    libGame_gf_SortMVPStats();
    auto1CB0D15B_ae = lv_maxMVPStatSlots;
    lv_iterator = 1;
    for ( ; lv_iterator <= auto1CB0D15B_ae ; lv_iterator += 1 ) {
        if ((libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatPriority == libGame_ge_MVPStatPriority_BestinGame) && ((libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatText != null) == true)) {
            libUIUI_gf_AssignMVPStattoNextUISlot(libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatLabel, libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatText, StringExternal("Param/Value/lib_Game_9484BA4E"));
            libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatText = null;
        }
        else if ((libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatPriority == libGame_ge_MVPStatPriority_BestinTeam) && ((libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatText != null) == true)) {
            libUIUI_gf_AssignMVPStattoNextUISlot(libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatLabel, libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatText, StringExternal("Param/Value/lib_Game_9C3B1DB0"));
            libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatText = null;
        }
        else if ((libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatPriority == libGame_ge_MVPStatPriority_Notable) && ((libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatText != null) == true)) {
            libUIUI_gf_AssignMVPStattoNextUISlot(libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatLabel, libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatText, lv_emptyText);
            libGame_gv_mVPStatstoDisplay[lv_iterator].lv_mVPStatText = null;
        }
    }
    libGame_gf_SortInitialSecondaryAwardList();
    libGame_gf_AssignFinalSecondaryAwards();
    libUIUI_gf_UIEndofMatchAwardsMVPReveal();
}

void libGame_gf_MapSpecificAwardInitialize (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapSpecificAwardInitialize_C);
}

void libGame_gf_SendMapSpecificAwardInitializeEvent (text lp_name, text lp_suffix, fixed lp_base, bool lp_presentasRatio, bool lp_gatedbyBase, string lp_badgeIndex, string lp_scoreValue) {
    // Implementation
    DataTableSetText(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_Name_C), lp_name);
    DataTableSetText(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_Suffix_C), lp_suffix);
    DataTableSetFixed(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_Base_C), lp_base);
    DataTableSetBool(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_PresentAsRatio_C), lp_presentasRatio);
    DataTableSetBool(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_GatedByBase_C), lp_gatedbyBase);
    DataTableSetString(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_BadgeIndex_C), lp_badgeIndex);
    DataTableSetString(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_ScoreValue_C), (lp_scoreValue));
    TriggerSendEvent(libGame_gv_eventID_MapSpecificAwardInitialize_C);
}

void libGame_gf_SendMapSpecificAwardInitializeEventwithUserData (text lp_name, string lp_userData) {
    // Implementation
    DataTableSetText(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_Name_C), UserDataGetText("EndOfMatchMapSpecificAward", lp_userData, "Award Name", 1));
    DataTableSetText(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_Suffix_C), UserDataGetText("EndOfMatchMapSpecificAward", lp_userData, "Description", 1));
    DataTableSetFixed(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_Base_C), UserDataGetFixed("EndOfMatchMapSpecificAward", lp_userData, "Base", 1));
    DataTableSetBool(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_PresentAsRatio_C), libNtve_gf_ConvertStringToBoolean(UserDataGetString("EndOfMatchMapSpecificAward", lp_userData, "Present as Ratio", 1)));
    DataTableSetBool(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_GatedByBase_C), libNtve_gf_ConvertStringToBoolean(UserDataGetString("EndOfMatchMapSpecificAward", lp_userData, "Gated by Base", 1)));
    DataTableSetString(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_BadgeIndex_C), UserDataGetString("EndOfMatchMapSpecificAward", lp_userData, "Award Badge Index", 1));
    DataTableSetString(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_ScoreValue_C), (UserDataGetGameLink("EndOfMatchMapSpecificAward", lp_userData, "Score Value Boolean", 1)));
    DataTableSetText(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_Tooltip_C), UserDataGetText("EndOfMatchMapSpecificAward", lp_userData, "Tooltip Text", 1));
    TriggerSendEvent(libGame_gv_eventID_MapSpecificAwardInitialize_C);
}

text libGame_gf_MapSpecificAwardInitializeName () {
    // Implementation
    return DataTableGetText(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_Name_C));
}

text libGame_gf_MapSpecificAwardInitializeSuffix () {
    // Implementation
    return DataTableGetText(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_Suffix_C));
}

fixed libGame_gf_MapSpecificAwardInitializeBase () {
    // Implementation
    return DataTableGetFixed(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_Base_C));
}

bool libGame_gf_MapSpecificAwardInitializePresentasRatio () {
    // Implementation
    return DataTableGetBool(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_PresentAsRatio_C));
}

bool libGame_gf_MapSpecificAwardInitializeGateByBase () {
    // Implementation
    return DataTableGetBool(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_GatedByBase_C));
}

string libGame_gf_MapSpecificAwardInitializeBadgeIndex () {
    // Implementation
    return DataTableGetString(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_BadgeIndex_C));
}

string libGame_gf_MapSpecificAwardInitializeScoreValue () {
    // Implementation
    return DataTableGetString(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_ScoreValue_C));
}

text libGame_gf_MapSpecificAwardInitializeTooltip () {
    // Implementation
    return DataTableGetText(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardInitialize_C, libGame_gv_eventParam_MapSpecificAwardInitialize_Tooltip_C));
}

void libGame_gf_MapSpecificAwardUpdate (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapSpecificAwardUpdate_C);
}

void libGame_gf_SendMapSpecificAwardEvent (int lp_player, fixed lp_value, bool lp_isAdd) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardUpdate_C, libGame_gv_eventParam_MapSpecificAwardUpdate_Player_C), lp_player);
    DataTableSetFixed(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardUpdate_C, libGame_gv_eventParam_MapSpecificAwardUpdate_Value_C), lp_value);
    DataTableSetBool(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardUpdate_C, libGame_gv_eventParam_MapSpecificAwardUpdate_IsAdd_C), lp_isAdd);
    TriggerSendEvent(libGame_gv_eventID_MapSpecificAwardUpdate_C);
}

int libGame_gf_MapSpecificAwardUpdatePlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardUpdate_C, libGame_gv_eventParam_MapSpecificAwardUpdate_Player_C));
}

fixed libGame_gf_MapSpecificAwardUpdateValue () {
    // Implementation
    return DataTableGetFixed(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardUpdate_C, libGame_gv_eventParam_MapSpecificAwardUpdate_Value_C));
}

bool libGame_gf_MapSpecificAwardUpdateIsAdd () {
    // Implementation
    return DataTableGetBool(false, TriggerEventParamName(libGame_gv_eventID_MapSpecificAwardUpdate_C, libGame_gv_eventParam_MapSpecificAwardUpdate_IsAdd_C));
}

void libGame_gf_AddtoAwardValue (int lp_player, fixed lp_awardValue, int lp_award) {
    // Implementation
    libGame_gf_SetAwardValueandWeight(lp_player, (libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_value + lp_awardValue), lp_award);
}

void libGame_gf_AssignTopAwardValue (int lp_player, fixed lp_awardValue, int lp_award) {
    // Implementation
    if ((lp_awardValue > libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_value)) {
        libGame_gf_SetAwardValueandWeight(lp_player, lp_awardValue, lp_award);
    }

}

void libGame_gf_SetAwardValueandWeight (int lp_player, fixed lp_awardValue, int lp_award) {
    // Implementation
    if (((lp_player == 0) || (lp_player > 10) || (libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_dEBUGManuallyForceAssigned == true))) {
        return ;
    }

    libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_value = lp_awardValue;
    if ((libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_base == 0.0)) {
    }
    else if (((lp_award == libGame_ge_SecondaryAwards_Bulwark) || (lp_award == libGame_ge_SecondaryAwards_Guardian)) && (PlayerGroupHasPlayer(libGame_gv_players[lp_player].lv_heroData.lv_heroRoles, (c_heroRoleWarrior)) == false)) {
        return ;
    }
    else if (((lp_award == libGame_ge_SecondaryAwards_Bulwark) || (lp_award == libGame_ge_SecondaryAwards_Guardian)) && (PlayerGroupHasPlayer(libGame_gv_players[lp_player].lv_heroData.lv_heroRoles, (c_heroRoleWarrior)) == true)) {
        libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_weight = ((libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_value / (libGame_gv_mVPStats[lp_player].lv_deaths + 3.0)) / libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_base);
        libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_weight *= libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_weightModifier;
    }
    else if ((libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_gatedbyBase == true) && (libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_value >= libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_base)) {
        libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_weight = (libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_value / libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_base);
        libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_weight *= libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_weightModifier;
    }
    else if ((libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_gatedbyBase == false)) {
        libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_weight = (libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_value / libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_base);
        libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_weight *= libGame_gv_playerAwardEligibility[lp_player][(lp_award)].lv_weightModifier;
    }
}

void libGame_gf_SortInitialSecondaryAwardList () {
    int auto747C0FA6_ae;

    // Variable Declarations
    bool lv_reSort;
    int lv_iterator;
    int lv_winnertoMove;
    fixed lv_weighttoMove;
    fixed lv_valuetoMove;
    text lv_nametoMove;
    int lv_awardIndextoMove;
    string lv_badgeIndextoMove;
    text lv_suffixtoMove;
    text lv_prefixtoMove;
    text lv_tooltiptoMove;
    bool lv_ratioSettingtoMove;
    string lv_scoreValuetoMove;

    // Variable Initialization
    lv_badgeIndextoMove = "";

    // Implementation
    auto747C0FA6_ae = (libGame_gv_secondaryAwardCount - 1);
    lv_iterator = 1;
    for ( ; lv_iterator <= auto747C0FA6_ae ; lv_iterator += 1 ) {
        if ((libGame_gv_initialSecondaryAwardsList[lv_iterator].lv_weight < libGame_gv_initialSecondaryAwardsList[(lv_iterator + 1)].lv_weight)) {
            lv_reSort = true;
            lv_winnertoMove = libGame_gv_initialSecondaryAwardsList[lv_iterator].lv_winner;
            lv_weighttoMove = libGame_gv_initialSecondaryAwardsList[lv_iterator].lv_weight;
            lv_valuetoMove = libGame_gv_initialSecondaryAwardsList[lv_iterator].lv_value;
            lv_nametoMove = libGame_gv_initialSecondaryAwardsList[lv_iterator].lv_name;
            lv_suffixtoMove = libGame_gv_initialSecondaryAwardsList[lv_iterator].lv_suffix;
            lv_awardIndextoMove = libGame_gv_initialSecondaryAwardsList[lv_iterator].lv_awardIndex;
            lv_badgeIndextoMove = libGame_gv_initialSecondaryAwardsList[lv_iterator].lv_awardBadgeIndex;
            lv_ratioSettingtoMove = libGame_gv_initialSecondaryAwardsList[lv_iterator].lv_presentasRatio;
            lv_scoreValuetoMove = libGame_gv_initialSecondaryAwardsList[lv_iterator].lv_scoreValue;
            lv_tooltiptoMove = libGame_gv_initialSecondaryAwardsList[lv_iterator].lv_tooltip;
            libGame_gv_initialSecondaryAwardsList[lv_iterator].lv_winner = libGame_gv_initialSecondaryAwardsList[(lv_iterator + 1)].lv_winner;
            libGame_gv_initialSecondaryAwardsList[lv_iterator].lv_weight = libGame_gv_initialSecondaryAwardsList[(lv_iterator + 1)].lv_weight;
            libGame_gv_initialSecondaryAwardsList[lv_iterator].lv_value = libGame_gv_initialSecondaryAwardsList[(lv_iterator + 1)].lv_value;
            libGame_gv_initialSecondaryAwardsList[lv_iterator].lv_name = libGame_gv_initialSecondaryAwardsList[(lv_iterator + 1)].lv_name;
            libGame_gv_initialSecondaryAwardsList[lv_iterator].lv_suffix = libGame_gv_initialSecondaryAwardsList[(lv_iterator + 1)].lv_suffix;
            libGame_gv_initialSecondaryAwardsList[lv_iterator].lv_tooltip = libGame_gv_initialSecondaryAwardsList[(lv_iterator + 1)].lv_tooltip;
            libGame_gv_initialSecondaryAwardsList[lv_iterator].lv_awardIndex = libGame_gv_initialSecondaryAwardsList[(lv_iterator + 1)].lv_awardIndex;
            libGame_gv_initialSecondaryAwardsList[lv_iterator].lv_awardBadgeIndex = libGame_gv_initialSecondaryAwardsList[(lv_iterator + 1)].lv_awardBadgeIndex;
            libGame_gv_initialSecondaryAwardsList[lv_iterator].lv_presentasRatio = libGame_gv_initialSecondaryAwardsList[(lv_iterator + 1)].lv_presentasRatio;
            libGame_gv_initialSecondaryAwardsList[lv_iterator].lv_scoreValue = libGame_gv_initialSecondaryAwardsList[(lv_iterator + 1)].lv_scoreValue;
            libGame_gv_initialSecondaryAwardsList[(lv_iterator + 1)].lv_winner = lv_winnertoMove;
            libGame_gv_initialSecondaryAwardsList[(lv_iterator + 1)].lv_weight = lv_weighttoMove;
            libGame_gv_initialSecondaryAwardsList[(lv_iterator + 1)].lv_value = lv_valuetoMove;
            libGame_gv_initialSecondaryAwardsList[(lv_iterator + 1)].lv_name = lv_nametoMove;
            libGame_gv_initialSecondaryAwardsList[(lv_iterator + 1)].lv_suffix = lv_suffixtoMove;
            libGame_gv_initialSecondaryAwardsList[(lv_iterator + 1)].lv_tooltip = lv_tooltiptoMove;
            libGame_gv_initialSecondaryAwardsList[(lv_iterator + 1)].lv_awardIndex = lv_awardIndextoMove;
            libGame_gv_initialSecondaryAwardsList[(lv_iterator + 1)].lv_awardBadgeIndex = lv_badgeIndextoMove;
            libGame_gv_initialSecondaryAwardsList[(lv_iterator + 1)].lv_presentasRatio = lv_ratioSettingtoMove;
            libGame_gv_initialSecondaryAwardsList[(lv_iterator + 1)].lv_scoreValue = lv_scoreValuetoMove;
        }

    }
    if ((lv_reSort == true)) {
        libGame_gf_SortInitialSecondaryAwardList();
    }

}

void libGame_gf_InitializeAwardData (int lp_award, string lp_badgeIndex, text lp_name, text lp_prefix, text lp_suffix, fixed lp_base, bool lp_gatedbyBase, bool lp_presentasRatio, string lp_score, text lp_tooltip) {
    int autoC16FCB48_ae;

    // Variable Declarations
    int lv_iterator;

    // Variable Initialization

    // Implementation
    libGame_gv_initialSecondaryAwardsList[(lp_award)].lv_name = lp_name;
    libGame_gv_initialSecondaryAwardsList[(lp_award)].lv_prefix = lp_prefix;
    libGame_gv_initialSecondaryAwardsList[(lp_award)].lv_suffix = lp_suffix;
    libGame_gv_initialSecondaryAwardsList[(lp_award)].lv_base = lp_base;
    libGame_gv_initialSecondaryAwardsList[(lp_award)].lv_gatedbyBase = lp_gatedbyBase;
    libGame_gv_initialSecondaryAwardsList[(lp_award)].lv_presentasRatio = lp_presentasRatio;
    libGame_gv_initialSecondaryAwardsList[(lp_award)].lv_awardIndex = lp_award;
    libGame_gv_initialSecondaryAwardsList[(lp_award)].lv_awardBadgeIndex = lp_badgeIndex;
    libGame_gv_initialSecondaryAwardsList[(lp_award)].lv_scoreValue = lp_score;
    libGame_gv_initialSecondaryAwardsList[(lp_award)].lv_tooltip = lp_tooltip;
    autoC16FCB48_ae = libCore_gv_bALMaxPlayers;
    lv_iterator = 1;
    for ( ; lv_iterator <= autoC16FCB48_ae ; lv_iterator += 1 ) {
        libGame_gv_playerAwardEligibility[lv_iterator][(lp_award)].lv_name = lp_name;
        libGame_gv_playerAwardEligibility[lv_iterator][(lp_award)].lv_prefix = lp_prefix;
        libGame_gv_playerAwardEligibility[lv_iterator][(lp_award)].lv_suffix = lp_suffix;
        libGame_gv_playerAwardEligibility[lv_iterator][(lp_award)].lv_base = lp_base;
        libGame_gv_playerAwardEligibility[lv_iterator][(lp_award)].lv_gatedbyBase = lp_gatedbyBase;
        libGame_gv_playerAwardEligibility[lv_iterator][(lp_award)].lv_presentasRatio = lp_presentasRatio;
        libGame_gv_playerAwardEligibility[lv_iterator][(lp_award)].lv_awardIndex = lp_award;
        libGame_gv_playerAwardEligibility[lv_iterator][(lp_award)].lv_awardBadgeIndex = lp_badgeIndex;
        libGame_gv_playerAwardEligibility[lv_iterator][(lp_award)].lv_scoreValue = lp_score;
        libGame_gv_playerAwardEligibility[lv_iterator][(lp_award)].lv_tooltip = lp_tooltip;
    }
}

void libGame_gf_EscapeTrackingCreditEscapeAttempt (int lp_player, unit lp_unit) {
    // Variable Declarations
    bool lv_escapedinaTeamFight;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_teamfightTrackingNearbyAllyCount[lp_player] >= (libGame_gv_teamfightTrackingCount - 1)) && (libGame_gv_teamfightTrackingNearbyEnemyCount[lp_player] >= libGame_gv_teamfightTrackingCount)) {
        lv_escapedinaTeamFight = true;
    }

    Wait(5.0, c_timeGame);
    if ((UnitIsValid(lp_unit) == true) && (UnitIsAlive(lp_unit) == true) && (UnitBehaviorCount(lp_unit, "Dead") == 0) && (UnitGroupHasUnit(libGame_gv_players[lp_player].lv_heroUnitGroup, lp_unit) == true) && (UnitGroupHasUnit(libGame_gv_escapeTrackingHeroReducedtoLowHealthUnitGroup[lp_player], lp_unit) == true)) {
        if ((libGame_gv_teamfightTrackingNearbyAllyCount[lp_player] >= (libGame_gv_teamfightTrackingCount - 1)) && (libGame_gv_teamfightTrackingNearbyEnemyCount[lp_player] >= libGame_gv_teamfightTrackingCount) && (lv_escapedinaTeamFight == true)) {
            libGame_gf_AddtoAwardValue(lp_player, 1.0, libGame_ge_SecondaryAwards_Daredevil);
        }

        libGame_gf_AddtoAwardValue(lp_player, 1.0, libGame_ge_SecondaryAwards_EscapeArtist);
        UnitGroupRemove(libGame_gv_escapeTrackingHeroReducedtoLowHealthUnitGroup[lp_player], lp_unit);
    }
    else if ((UnitGroupHasUnit(libGame_gv_escapeTrackingHeroReducedtoLowHealthUnitGroup[lp_player], lp_unit) == true)) {
        UnitGroupRemove(libGame_gv_escapeTrackingHeroReducedtoLowHealthUnitGroup[lp_player], lp_unit);
    }
}

void libGame_gf_DetermineSoleSurvivor () {
    int auto15A2FE1C_ae;

    // Variable Declarations
    int lv_winner;
    int lv_iterator;

    // Variable Initialization

    // Implementation
    auto15A2FE1C_ae = libCore_gv_bALMaxPlayers;
    lv_iterator = 1;
    for ( ; lv_iterator <= auto15A2FE1C_ae ; lv_iterator += 1 ) {
        if ((libGame_gv_mVPStats[lv_iterator].lv_deaths == 0.0) && (lv_winner == 0)) {
            lv_winner = lv_iterator;
        }
        else if ((libGame_gv_mVPStats[lv_iterator].lv_deaths == 0.0) && (lv_winner != 0)) {
            return ;
        }
    }
    libGame_gf_SetAwardValueandWeight(lv_winner, 1.0, libGame_ge_SecondaryAwards_SoleSurvivor);
}

void libGame_gf_DetermineTeamPlayer () {
    int auto2D75B2B9_ae;

    // Variable Declarations
    int lv_winner;
    int lv_iterator;

    // Variable Initialization

    // Implementation
    auto2D75B2B9_ae = libCore_gv_bALMaxPlayers;
    lv_iterator = 1;
    for ( ; lv_iterator <= auto2D75B2B9_ae ; lv_iterator += 1 ) {
        if ((libGame_gv_outnumberedDeathCount[lv_iterator] == 0) && (lv_winner == 0)) {
            lv_winner = lv_iterator;
        }
        else if ((libGame_gv_outnumberedDeathCount[lv_iterator] == 0) && (lv_winner != 0)) {
            return ;
        }
    }
    libGame_gf_SetAwardValueandWeight(lv_winner, 1.0, libGame_ge_SecondaryAwards_TeamPlayer);
}

void libGame_gf_AddGuardianDamage (fixed lp_damageValue, int lp_player) {
    // Implementation
    if ((lp_player <= libCore_gv_bALMaxPlayers) && (lp_player > 0) && (libGame_gv_teamfightTrackingNearbyAllyCount[lp_player] >= (libGame_gv_teamfightTrackingCount - 1)) && (libGame_gv_teamfightTrackingNearbyEnemyCount[lp_player] >= libGame_gv_teamfightTrackingCount)) {
        libGame_gf_AddtoAwardValue(lp_player, lp_damageValue, libGame_ge_SecondaryAwards_Guardian);
    }

}

void libGame_gf_AddScrapperDamage (fixed lp_damageValue, int lp_player) {
    // Implementation
    if ((lp_player <= libCore_gv_bALMaxPlayers) && (lp_player > 0) && (libGame_gv_teamfightTrackingNearbyAllyCount[lp_player] >= (libGame_gv_teamfightTrackingCount - 1)) && (libGame_gv_teamfightTrackingNearbyEnemyCount[lp_player] >= libGame_gv_teamfightTrackingCount)) {
        libGame_gf_AddtoAwardValue(lp_player, lp_damageValue, libGame_ge_SecondaryAwards_Scrapper);
    }

}

void libGame_gf_InitializeAwardDataFromUserData (string lp_userData, int lp_award) {
    int auto4D932EBB_ae;

    // Variable Declarations
    int lv_iterator;

    // Variable Initialization

    // Implementation
    libGame_gv_initialSecondaryAwardsList[(lp_award)].lv_name = UserDataGetText("EndOfMatchGeneralAward", lp_userData, "Award Name", 1);
    libGame_gv_initialSecondaryAwardsList[(lp_award)].lv_suffix = UserDataGetText("EndOfMatchGeneralAward", lp_userData, "Description", 1);
    libGame_gv_initialSecondaryAwardsList[(lp_award)].lv_base = UserDataGetFixed("EndOfMatchGeneralAward", lp_userData, "Base", 1);
    libGame_gv_initialSecondaryAwardsList[(lp_award)].lv_gatedbyBase = libNtve_gf_ConvertStringToBoolean(UserDataGetString("EndOfMatchGeneralAward", lp_userData, "Gated by Base", 1));
    libGame_gv_initialSecondaryAwardsList[(lp_award)].lv_presentasRatio = libNtve_gf_ConvertStringToBoolean(UserDataGetString("EndOfMatchGeneralAward", lp_userData, "Present as Ratio", 1));
    libGame_gv_initialSecondaryAwardsList[(lp_award)].lv_awardIndex = lp_award;
    libGame_gv_initialSecondaryAwardsList[(lp_award)].lv_awardBadgeIndex = UserDataGetString("EndOfMatchGeneralAward", lp_userData, "Award Badge Index", 1);
    libGame_gv_initialSecondaryAwardsList[(lp_award)].lv_scoreValue = UserDataGetGameLink("EndOfMatchGeneralAward", lp_userData, "Score Value Boolean", 1);
    libGame_gv_initialSecondaryAwardsList[(lp_award)].lv_tooltip = UserDataGetText("EndOfMatchGeneralAward", lp_userData, "Tooltip Text", 1);
    libGame_gv_initialSecondaryAwardsList[(lp_award)].lv_weightModifier = UserDataGetFixed("EndOfMatchGeneralAward", lp_userData, "Weight Modifier", 1);
    auto4D932EBB_ae = libCore_gv_bALMaxPlayers;
    lv_iterator = 1;
    for ( ; lv_iterator <= auto4D932EBB_ae ; lv_iterator += 1 ) {
        libGame_gv_playerAwardEligibility[lv_iterator][(lp_award)].lv_name = UserDataGetText("EndOfMatchGeneralAward", lp_userData, "Award Name", 1);
        libGame_gv_playerAwardEligibility[lv_iterator][(lp_award)].lv_suffix = UserDataGetText("EndOfMatchGeneralAward", lp_userData, "Description", 1);
        libGame_gv_playerAwardEligibility[lv_iterator][(lp_award)].lv_base = UserDataGetFixed("EndOfMatchGeneralAward", lp_userData, "Base", 1);
        libGame_gv_playerAwardEligibility[lv_iterator][(lp_award)].lv_gatedbyBase = libNtve_gf_ConvertStringToBoolean(UserDataGetString("EndOfMatchGeneralAward", lp_userData, "Gated by Base", 1));
        libGame_gv_playerAwardEligibility[lv_iterator][(lp_award)].lv_presentasRatio = libNtve_gf_ConvertStringToBoolean(UserDataGetString("EndOfMatchGeneralAward", lp_userData, "Present as Ratio", 1));
        libGame_gv_playerAwardEligibility[lv_iterator][(lp_award)].lv_awardIndex = lp_award;
        libGame_gv_playerAwardEligibility[lv_iterator][(lp_award)].lv_awardBadgeIndex = UserDataGetString("EndOfMatchGeneralAward", lp_userData, "Award Badge Index", 1);
        libGame_gv_playerAwardEligibility[lv_iterator][(lp_award)].lv_scoreValue = UserDataGetGameLink("EndOfMatchGeneralAward", lp_userData, "Score Value Boolean", 1);
        libGame_gv_playerAwardEligibility[lv_iterator][(lp_award)].lv_tooltip = UserDataGetText("EndOfMatchGeneralAward", lp_userData, "Tooltip Text", 1);
        libGame_gv_playerAwardEligibility[lv_iterator][(lp_award)].lv_weightModifier = UserDataGetFixed("EndOfMatchGeneralAward", lp_userData, "Weight Modifier", 1);
    }
}

void libGame_gf_InitializeSecondaryAwardList () {
    // Variable Declarations
    int lv_iterator;

    // Variable Initialization

    // Implementation
    libGame_gf_InitializeAwardDataFromUserData("Experienced", libGame_ge_SecondaryAwards_Experienced);
    libGame_gf_InitializeAwardDataFromUserData("Painbringer", libGame_ge_SecondaryAwards_Painbringer);
    libGame_gf_InitializeAwardDataFromUserData("Bulwark", libGame_ge_SecondaryAwards_Bulwark);
    libGame_gf_InitializeAwardDataFromUserData("Main Healer", libGame_ge_SecondaryAwards_MainHealer);
    libGame_gf_InitializeAwardDataFromUserData("Siege Master", libGame_ge_SecondaryAwards_SiegeMaster);
    libGame_gf_InitializeAwardDataFromUserData("Dominator", libGame_ge_SecondaryAwards_Dominator);
    libGame_gf_InitializeAwardDataFromUserData("Stunner", libGame_ge_SecondaryAwards_Stunner);
    libGame_gf_InitializeAwardDataFromUserData("Headhunter", libGame_ge_SecondaryAwards_Headhunter);
    libGame_gf_InitializeAwardDataFromUserData("Finisher", libGame_ge_SecondaryAwards_Finisher);
    libGame_gf_InitializeAwardDataFromUserData("Hat Trick", libGame_ge_SecondaryAwards_HatTrick);
    libGame_gf_InitializeAwardDataFromUserData("Sole Survivor", libGame_ge_SecondaryAwards_SoleSurvivor);
    libGame_gf_InitializeAwardDataFromUserData("Clutch Healer", libGame_ge_SecondaryAwards_ClutchHealer);
    libGame_gf_InitializeAwardDataFromUserData("Trapper", libGame_ge_SecondaryAwards_Trapper);
    libGame_gf_InitializeAwardDataFromUserData("Protector", libGame_ge_SecondaryAwards_Protector);
    libGame_gf_InitializeAwardDataFromUserData("Silencer", libGame_ge_SecondaryAwards_Silencer);
    libGame_gf_InitializeAwardDataFromUserData("Guardian", libGame_ge_SecondaryAwards_Guardian);
    libGame_gf_InitializeAwardDataFromUserData("Combat Medic", libGame_ge_SecondaryAwards_CombatMedic);
    libGame_gf_InitializeAwardDataFromUserData("Team Player", libGame_ge_SecondaryAwards_TeamPlayer);
    libGame_gf_InitializeAwardDataFromUserData("Daredevil", libGame_ge_SecondaryAwards_Daredevil);
    libGame_gf_InitializeAwardDataFromUserData("Escape Artist", libGame_ge_SecondaryAwards_EscapeArtist);
    libGame_gf_InitializeAwardDataFromUserData("Scrapper", libGame_ge_SecondaryAwards_Scrapper);
    libGame_gf_InitializeAwardDataFromUserData("Avenger", libGame_ge_SecondaryAwards_Avenger);
}

void libGame_gf_BuildInitialSecondaryAwardList () {
    int autoF400ED20_ae;
    int auto9A235845_ae;
    int auto8517A970_ae;

    // Variable Declarations
    int lv_playerIterator;
    int lv_awardIterator;
    fixed lv_temporaryValue;

    // Variable Initialization

    // Implementation
    autoF400ED20_ae = libCore_gv_bALMaxPlayers;
    lv_playerIterator = 1;
    for ( ; lv_playerIterator <= autoF400ED20_ae ; lv_playerIterator += 1 ) {
        libGame_gf_SetAwardValueandWeight(lv_playerIterator, libGame_gv_scoreValues[lv_playerIterator].lv_creepCampsCaptured, libGame_ge_SecondaryAwards_Headhunter);
    }
    libGame_gf_DetermineSoleSurvivor();
    libGame_gf_DetermineTeamPlayer();
    auto9A235845_ae = libCore_gv_bALMaxPlayers;
    lv_playerIterator = 1;
    for ( ; lv_playerIterator <= auto9A235845_ae ; lv_playerIterator += 1 ) {
        auto8517A970_ae = libGame_gv_secondaryAwardCount;
        lv_awardIterator = 1;
        for ( ; lv_awardIterator <= auto8517A970_ae ; lv_awardIterator += 1 ) {
            lv_temporaryValue = (libGame_gv_playerAwardEligibility[lv_playerIterator][lv_awardIterator].lv_value * 0.1);
            libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(lv_playerIterator)][lv_awardIterator] += lv_temporaryValue;
            if ((libGame_gv_initialSecondaryAwardsList[lv_awardIterator].lv_weight < libGame_gv_playerAwardEligibility[lv_playerIterator][lv_awardIterator].lv_weight)) {
                libGame_gf_AssignAwardWinner(lv_awardIterator, lv_playerIterator);
            }

        }
    }
}

void libGame_gf_AssignAwardWinner (int lp_awardIndex, int lp_playerIndex) {
    // Implementation
    libGame_gv_initialSecondaryAwardsList[lp_awardIndex].lv_weight = libGame_gv_playerAwardEligibility[lp_playerIndex][lp_awardIndex].lv_weight;
    libGame_gv_initialSecondaryAwardsList[lp_awardIndex].lv_value = libGame_gv_playerAwardEligibility[lp_playerIndex][lp_awardIndex].lv_value;
    libGame_gv_initialSecondaryAwardsList[lp_awardIndex].lv_winner = lp_playerIndex;
}

int libGame_gf_DecideTiebreaker (int lp_awardPreset, int lp_firstPlayer, int lp_secondPlayer) {
    // Implementation
    if ((lp_awardPreset == libGame_ge_SecondaryAwards_EscapeArtist) && (lp_awardPreset == libGame_ge_SecondaryAwards_Dominator)) {
        if ((libGame_gv_scoreValues[lp_firstPlayer].lv_takedowns < libGame_gv_scoreValues[lp_secondPlayer].lv_takedowns)) {
            return lp_secondPlayer;
        }
        else if ((libGame_gv_scoreValues[lp_firstPlayer].lv_takedowns > libGame_gv_scoreValues[lp_secondPlayer].lv_takedowns)) {
            return lp_firstPlayer;
        }
    }

    if ((lp_awardPreset == libGame_ge_SecondaryAwards_Dominator)) {
        if ((libGame_gv_scoreValues[lp_firstPlayer].lv_kills < libGame_gv_scoreValues[lp_secondPlayer].lv_kills)) {
            return lp_secondPlayer;
        }
        else if ((libGame_gv_scoreValues[lp_firstPlayer].lv_kills > libGame_gv_scoreValues[lp_secondPlayer].lv_kills)) {
            return lp_firstPlayer;
        }
    }

    if ((lp_awardPreset == libGame_ge_SecondaryAwards_Finisher)) {
        if ((libGame_gv_scoreValues[lp_firstPlayer].lv_assists < libGame_gv_scoreValues[lp_secondPlayer].lv_assists)) {
            return lp_secondPlayer;
        }
        else if ((libGame_gv_scoreValues[lp_firstPlayer].lv_assists > libGame_gv_scoreValues[lp_secondPlayer].lv_assists)) {
            return lp_firstPlayer;
        }
    }

    if ((lp_awardPreset == libGame_ge_SecondaryAwards_TeamPlayer)) {
        if ((libGame_gv_scoreValues[lp_firstPlayer].lv_deaths < libGame_gv_scoreValues[lp_secondPlayer].lv_deaths)) {
            return lp_firstPlayer;
        }
        else if ((libGame_gv_scoreValues[lp_firstPlayer].lv_deaths > libGame_gv_scoreValues[lp_secondPlayer].lv_deaths)) {
            return lp_secondPlayer;
        }
        else if ((libGame_gv_scoreValues[lp_firstPlayer].lv_deaths == libGame_gv_scoreValues[lp_secondPlayer].lv_deaths)) {
            if ((libGame_gv_scoreValues[lp_firstPlayer].lv_kills < libGame_gv_scoreValues[lp_secondPlayer].lv_kills)) {
                return lp_secondPlayer;
            }
            else if ((libGame_gv_scoreValues[lp_firstPlayer].lv_kills > libGame_gv_scoreValues[lp_secondPlayer].lv_kills)) {
                return lp_firstPlayer;
            }
        }
    }

    if ((RandomInt(1, 2) == 1)) {
        return lp_firstPlayer;
    }
    else {
        return lp_secondPlayer;
    }
    return lp_firstPlayer;
}

fixed libGame_gf_GetAwardRatio (int lp_player, int lp_award) {
    // Variable Declarations
    fixed lv_awardValue;

    // Variable Initialization

    // Implementation
    lv_awardValue = libGame_gv_playerAwardEligibility[lp_player][lp_award].lv_value;
    if (((lp_award == (libGame_ge_SecondaryAwards_MainHealer)) || (lp_award == (libGame_ge_SecondaryAwards_Protector))) && (libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(lp_player)][libGame_ge_SecondaryAwards_Bulwark] > 1.0)) {
        lv_awardValue *= 0.1;
        lv_awardValue = ((lv_awardValue / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(lp_player)][libGame_ge_SecondaryAwards_Bulwark]) * 100.0);
        return lv_awardValue;
    }
    else if (((lp_award == (libGame_ge_SecondaryAwards_CombatMedic))) && (libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(lp_player)][libGame_ge_SecondaryAwards_Guardian] > 1.0)) {
        lv_awardValue *= 0.1;
        lv_awardValue = ((lv_awardValue / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(lp_player)][libGame_ge_SecondaryAwards_Guardian]) * 100.0);
        return lv_awardValue;
    }
    lv_awardValue *= 0.1;
    lv_awardValue = ((lv_awardValue / libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(lp_player)][lp_award]) * 100.0);
    return lv_awardValue;
}

text libGame_gf_GetFinalAwardValueInfo (int lp_playerIndex, int lp_finalAwardSlotIndex) {
    // Variable Declarations
    fixed lv_awardValue;
    text lv_texttoReturn;
    int lv_award;

    // Variable Initialization
    lv_award = libGame_gv_finalSecondaryAwardsList[lp_finalAwardSlotIndex].lv_awardIndex;

    // Implementation
    lv_awardValue = FixedToInt(libGame_gv_finalSecondaryAwardsList[lp_finalAwardSlotIndex].lv_value);
    if ((libGame_gv_finalSecondaryAwardsList[lp_finalAwardSlotIndex].lv_presentasRatio == true) && (libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(lp_playerIndex)][lv_award] != 0.0)) {
        lv_awardValue = libGame_gf_GetAwardRatio(lp_playerIndex, lv_award);
    }

    TextExpressionSetToken("AwardDesc", c_textExpressionTokenMain, libGame_gv_finalSecondaryAwardsList[lp_finalAwardSlotIndex].lv_suffix);
    TextExpressionSetToken("AwardDesc", "AwardValue", FixedToText(lv_awardValue, 0));
    return TextExpressionAssemble("AwardDesc");
}

bool libGame_gf_IsSecondaryAwardAboveRatioThreshold (int lp_player, int lp_awardPreset) {
    // Variable Declarations
    fixed lv_awardValue;

    // Variable Initialization

    // Implementation
    lv_awardValue = libGame_gv_playerAwardEligibility[lp_player][lp_awardPreset].lv_value;
    if ((libGame_gv_playerAwardEligibility[lp_player][lp_awardPreset].lv_presentasRatio != true)) {
        return true;
    }

    if ((libGame_gv_teamAwardTotalValues[libGame_gf_TeamNumberOfPlayer(lp_player)][lp_awardPreset] != 0.0)) {
        lv_awardValue = libGame_gf_GetAwardRatio(lp_player, lp_awardPreset);
    }

    if ((((lv_awardValue >= 20.0)) || (((lp_awardPreset == (libGame_ge_SecondaryAwards_MainHealer)) || (lp_awardPreset == (libGame_ge_SecondaryAwards_Protector))) && (lv_awardValue >= 10.0)))) {
        return true;
    }
    else {
        return false;
    }
}

text libGame_gf_GetAwardTooltipInfo (int lp_playerIndex, int lp_awardIndex) {
    // Variable Declarations
    fixed lv_awardValue;

    // Variable Initialization

    // Implementation
    lv_awardValue = libGame_gv_playerAwardEligibility[lp_playerIndex][lp_awardIndex].lv_value;
    TextExpressionSetToken("TooltipDesc", c_textExpressionTokenMain, libGame_gv_playerAwardEligibility[lp_playerIndex][lp_awardIndex].lv_tooltip);
    TextExpressionSetToken("TooltipDesc", "TooltipAmount", FormatNumber(FixedToInt(lv_awardValue)));
    if ((lp_awardIndex == libGame_ge_SecondaryAwards_Bulwark)) {
        TextExpressionSetToken("TooltipDesc", "TooltipSecondaryAmount", FormatNumber(FixedToInt(libGame_gv_mVPStats[lp_playerIndex].lv_deaths)));
    }

    return TextExpressionAssemble("TooltipDesc");
}

void libGame_gf_AssignFinalSecondaryAwards () {
    int auto8A327C5D_ae;
    int autoBA54619A_ae;
    int autoD9F10EBE_ae;
    int autoCFF39CBA_ae;

    // Variable Declarations
    int lv_slotIterator;
    bool lv_awardFoundforSlot;
    bool[libGame_gv_secondaryAwardCount + 1] lv_awardIsAssigned;
    int lv_awardIterator;
    int lv_awardPlayerIterator;
    int lv_awardWinner;
    int lv_award;
    fixed lv_awardWeight;
    bool[libCore_gv_bALMaxTeams + 1] lv_teamReceivedanAward;

    // Variable Initialization

    // Implementation
    lv_teamReceivedanAward[libGame_gv_mVPStats[libGame_gv_mVPPlayer].lv_team] = true;
    auto8A327C5D_ae = libGame_gv_secondaryAwardSlotCount;
    lv_slotIterator = 1;
    for ( ; lv_slotIterator <= auto8A327C5D_ae ; lv_slotIterator += 1 ) {
        lv_awardFoundforSlot = false;
        lv_awardWeight = 0.0;
        autoBA54619A_ae = libGame_gv_secondaryAwardCount;
        lv_awardIterator = 1;
        for ( ; lv_awardIterator <= autoBA54619A_ae ; lv_awardIterator += 1 ) {
            if ((lv_awardFoundforSlot == false) && (libGame_gv_playerHasWonAward[libGame_gv_initialSecondaryAwardsList[lv_awardIterator].lv_winner] == false) && (libGame_gv_playerAwardEligibility[libGame_gv_initialSecondaryAwardsList[lv_awardIterator].lv_winner][(libGame_gv_initialSecondaryAwardsList[lv_awardIterator].lv_awardIndex)].lv_weight != 0.0) && (libGame_gf_IsSecondaryAwardAboveRatioThreshold(libGame_gv_initialSecondaryAwardsList[lv_awardIterator].lv_winner, libGame_gv_initialSecondaryAwardsList[lv_awardIterator].lv_awardIndex) == true) && ((lv_slotIterator < libGame_gv_secondaryAwardSlotCount) || ((lv_slotIterator == libGame_gv_secondaryAwardSlotCount) && ((lv_teamReceivedanAward[libGame_gf_TeamNumberOfPlayer(libGame_gv_initialSecondaryAwardsList[lv_awardIterator].lv_winner)] == false) || ((lv_teamReceivedanAward[libGame_gv_teamOrderIndex_C] == true) && (lv_teamReceivedanAward[libGame_gv_teamChaosIndex_C] == true)))))) {
                lv_award = (libGame_gv_initialSecondaryAwardsList[lv_awardIterator].lv_awardIndex);
                lv_awardWinner = libGame_gv_initialSecondaryAwardsList[lv_awardIterator].lv_winner;
                lv_awardWeight = libGame_gv_playerAwardEligibility[lv_awardWinner][lv_award].lv_weight;
                lv_awardFoundforSlot = true;
                libGame_gv_playerHasWonAward[libGame_gv_initialSecondaryAwardsList[lv_awardIterator].lv_winner] = true;
                lv_teamReceivedanAward[libGame_gf_TeamNumberOfPlayer(lv_awardWinner)] = true;
                TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_8600D0FA") + IntToText(lv_slotIterator) + StringExternal("Param/Value/lib_Game_E8D93BD4") + libGame_gv_mVPStats[lv_awardWinner].lv_heroName + StringExternal("Param/Value/lib_Game_AF8F03EE")), false);
            }

        }
        if ((lv_awardFoundforSlot == true) && (lv_awardWeight != 0.0)) {
            TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_853A1D25")), false);
        }
        else {
            TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_AD17C337")), false);
            autoD9F10EBE_ae = libGame_gv_secondaryAwardCount;
            lv_awardIterator = 1;
            for ( ; lv_awardIterator <= autoD9F10EBE_ae ; lv_awardIterator += 1 ) {
                if ((lv_awardIsAssigned[lv_awardIterator] == false)) {
                    autoCFF39CBA_ae = libCore_gv_bALMaxPlayers;
                    lv_awardPlayerIterator = 1;
                    for ( ; lv_awardPlayerIterator <= autoCFF39CBA_ae ; lv_awardPlayerIterator += 1 ) {
                        if ((libGame_gv_playerHasWonAward[lv_awardPlayerIterator] == false) && (libGame_gv_playerAwardEligibility[lv_awardPlayerIterator][lv_awardIterator].lv_weight != 0.0) && (lv_awardWeight <= libGame_gv_playerAwardEligibility[lv_awardPlayerIterator][lv_awardIterator].lv_weight)) {
                            if ((lv_awardWeight == libGame_gv_playerAwardEligibility[lv_awardPlayerIterator][lv_awardIterator].lv_weight) && (lv_award == lv_awardIterator)) {
                                lv_awardWinner = libGame_gf_DecideTiebreaker(lv_awardIterator, lv_awardPlayerIterator, lv_awardWinner);
                                if ((lv_awardWinner == lv_awardPlayerIterator)) {
                                    lv_award = lv_awardIterator;
                                }

                            }
                            else {
                                lv_awardWinner = lv_awardPlayerIterator;
                                lv_award = lv_awardIterator;
                            }
                            lv_awardWeight = libGame_gv_playerAwardEligibility[lv_awardWinner][lv_award].lv_weight;
                            lv_awardFoundforSlot = true;
                        }

                    }
                }

            }
            if ((lv_awardFoundforSlot == true)) {
                TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_49A80F9D") + IntToText(lv_awardWinner)), false);
                libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_awardWinner, "EndOfMatchAwardGivenToNonwinner", lv_award);
            }

        }
        if ((lv_awardFoundforSlot == true) && (lv_awardWeight != 0.0)) {
            lv_awardFoundforSlot = true;
            libGame_gv_playerHasWonAward[lv_awardWinner] = true;
            lv_awardIsAssigned[lv_award] = true;
            libGame_gv_finalSecondaryAwardsList[lv_slotIterator].lv_winner = lv_awardWinner;
            TextExpressionSetToken("AwardName", c_textExpressionTokenMain, libGame_gv_playerAwardEligibility[lv_awardWinner][lv_award].lv_name);
            TextExpressionSetToken("AwardName", "HeroName", UnitTypeGetName(UnitGetType(libGame_gv_players[lv_awardWinner].lv_heroUnit)));
            libGame_gv_finalSecondaryAwardsList[lv_slotIterator].lv_name = TextExpressionAssemble("AwardName");
            libGame_gv_finalSecondaryAwardsList[lv_slotIterator].lv_prefix = libGame_gv_playerAwardEligibility[lv_awardWinner][lv_award].lv_prefix;
            libGame_gv_finalSecondaryAwardsList[lv_slotIterator].lv_suffix = libGame_gv_playerAwardEligibility[lv_awardWinner][lv_award].lv_suffix;
            libGame_gv_finalSecondaryAwardsList[lv_slotIterator].lv_weight = lv_awardWeight;
            libGame_gv_finalSecondaryAwardsList[lv_slotIterator].lv_value = libGame_gv_playerAwardEligibility[lv_awardWinner][lv_award].lv_value;
            libGame_gv_finalSecondaryAwardsList[lv_slotIterator].lv_scoreValue = libGame_gv_playerAwardEligibility[lv_awardWinner][lv_award].lv_scoreValue;
            libGame_gv_finalSecondaryAwardsList[lv_slotIterator].lv_awardIndex = libGame_gv_playerAwardEligibility[lv_awardWinner][lv_award].lv_awardIndex;
            libGame_gv_finalSecondaryAwardsList[lv_slotIterator].lv_awardBadgeIndex = libGame_gv_playerAwardEligibility[lv_awardWinner][lv_award].lv_awardBadgeIndex;
            libGame_gv_finalSecondaryAwardsList[lv_slotIterator].lv_presentasRatio = libGame_gv_playerAwardEligibility[lv_awardWinner][lv_award].lv_presentasRatio;
            TriggerDebugOutput(8, (StringExternal("Param/Value/lib_Game_542166A4") + libGame_gv_finalSecondaryAwardsList[lv_slotIterator].lv_name + StringExternal("Param/Value/lib_Game_7F1D45EC") + UnitTypeGetName(UnitGetType(libGame_gv_players[libGame_gv_finalSecondaryAwardsList[lv_slotIterator].lv_winner].lv_heroUnit)) + StringExternal("Param/Value/lib_Game_D3604DFC") + StringToText("") + FixedToText(libGame_gv_finalSecondaryAwardsList[lv_slotIterator].lv_value, 0) + StringToText("") + StringExternal("Param/Value/lib_Game_F56D9AF5") + FixedToText(libGame_gv_finalSecondaryAwardsList[lv_slotIterator].lv_base, 0) + StringExternal("Param/Value/lib_Game_06929FF2") + FixedToText(libGame_gv_finalSecondaryAwardsList[lv_slotIterator].lv_weight, 3)), false);
            libGame_gf_ScoreValuesReportIntegerValueAndLog(libGame_gv_finalSecondaryAwardsList[lv_slotIterator].lv_winner, libGame_gv_finalSecondaryAwardsList[lv_slotIterator].lv_scoreValue, 1);
        }

    }
}

void libGame_gf_TryMeCustomButton1Pressed (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_TryMeCustomButton1Pressed_C);
}

void libGame_gf_SendEventTryMeCustomButton1Pressed (int lp_player) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_TryMeCustomButton1Pressed_C, libGame_gv_eventParam_TryMeCustomButton1Pressed_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_TryMeCustomButton1Pressed_C);
}

int libGame_gf_TryMeCustomButton1PressedPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_TryMeCustomButton1Pressed_C, libGame_gv_eventParam_TryMeCustomButton1Pressed_Player_C));
}

void libGame_gf_CameraPannedFromScript (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_CameraPannedFromScript_C);
}

void libGame_gf_SendEventCameraPannedFromScript (int lp_player, point lp_point) {
    // Implementation
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_CameraPannedFromScript_C, libGame_gv_eventParam_CameraPannedFromScript_Point_C), lp_point);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CameraPannedFromScript_C, libGame_gv_eventParam_CameraPannedFromScript_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_CameraPannedFromScript_C);
}

point libGame_gf_CameraPannedFromScriptPoint () {
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_CameraPannedFromScript_C, libGame_gv_eventParam_CameraPannedFromScript_Point_C));
}

int libGame_gf_CameraPannedFromScriptPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CameraPannedFromScript_C, libGame_gv_eventParam_CameraPannedFromScript_Player_C));
}

void libGame_gf_CapturePointChangesOwner (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_CapturePointChangesOwner_C);
}

void libGame_gf_SendEventCapturePointChangesOwner (int lp_capturePointIndex, int lp_owner, playergroup lp_capturingPlayers, bool lp_hasMercLordTalent) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_CapturePointIndex_C), lp_capturePointIndex);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_Owner_C), lp_owner);
    DataTableSetPlayerGroup(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_CapturingPlayers_C), lp_capturingPlayers);
    DataTableSetBool(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_HasMercLordTalent_C), lp_hasMercLordTalent);
    TriggerSendEvent(libGame_gv_eventID_CapturePointChangesOwner_C);
}

int libGame_gf_CapturePointChangesOwnerCapturePointIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_CapturePointIndex_C));
}

int libGame_gf_CapturePointChangesOwnerOwner () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_Owner_C));
}

playergroup libGame_gf_CapturePointChangesOwnerCapturingPlayers () {
    // Implementation
    return DataTableGetPlayerGroup(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_CapturingPlayers_C));
}

bool libGame_gf_CapturePointChangesOwnerHasMercLordTalent () {
    // Implementation
    return DataTableGetBool(false, TriggerEventParamName(libGame_gv_eventID_CapturePointChangesOwner_C, libGame_gv_eventParam_CapturePointChangesOwner_HasMercLordTalent_C));
}

void libGame_gf_CapturePointBecomesFullyOverCaptured (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C);
}

void libGame_gf_SendEventCapturePointBecomesFullyOverCaptured (int lp_capturePointIndex) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C, libGame_gv_eventParam_CapturePointBecomesFullyOverCaptured_CapturePointIndex_C), lp_capturePointIndex);
    TriggerSendEvent(libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C);
}

int libGame_gf_CapturePointBecomesFullyOverCapturedCapturePointIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CapturePointBecomesFullyOverCaptured_C, libGame_gv_eventParam_CapturePointBecomesFullyOverCaptured_CapturePointIndex_C));
}

void libGame_gf_DebugHeroSwapped (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_DebugHeroSwapped_C);
}

void libGame_gf_SendEventDebugHeroSwapped (int lp_player) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_DebugHeroSwapped_C, libGame_gv_eventParam_DebugHeroSwapped_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_DebugHeroSwapped_C);
}

int libGame_gf_DebugHeroSwappedPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_DebugHeroSwapped_C, libGame_gv_eventParam_DebugHeroSwapped_Player_C));
}

void libGame_gf_JungleDefenderAIDefendersBeginFighting (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C);
}

void libGame_gf_SendEventJungleDefenderAIDefendersBeginFighting (int lp_defenderAIIndex) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C, libGame_gv_eventParam_JungleDefenderAIDefendersBeginFighting_Index_C), lp_defenderAIIndex);
    TriggerSendEvent(libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C);
}

int libGame_gf_JungleDefenderAIDefendersBeginFightingIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefendersBeginFighting_C, libGame_gv_eventParam_JungleDefenderAIDefendersBeginFighting_Index_C));
}

void libGame_gf_JungleDefenderAIDefendersEndFighting (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C);
}

void libGame_gf_SendEventJungleDefenderAIDefendersEndFighting (int lp_defenderAIIndex) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C, libGame_gv_eventParam_JungleDefenderAIDefendersEndFighting_Index_C), lp_defenderAIIndex);
    TriggerSendEvent(libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C);
}

int libGame_gf_JungleDefenderAIDefendersEndFightingIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefendersEndFighting_C, libGame_gv_eventParam_JungleDefenderAIDefendersEndFighting_Index_C));
}

void libGame_gf_JungleDefenderAIDefenderKilled (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleDefenderAIDefenderKilled_C);
}

void libGame_gf_SendEventJungleDefenderAIDefenderKilled (int lp_defenderAIIndex, unit lp_unit, int lp_killingPlayer) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Index_C), lp_defenderAIIndex);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Unit_C), lp_unit);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_KillingPlayer_C), lp_killingPlayer);
    TriggerSendEvent(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C);
}

int libGame_gf_JungleDefenderAIDefenderKilledIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Index_C));
}

unit libGame_gf_JungleDefenderAIDefenderKilledUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_Unit_C));
}

int libGame_gf_JungleDefenderAIDefenderKilledKillingPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefenderKilled_C, libGame_gv_eventParam_JungleDefenderAIDefenderKilled_KillingPlayer_C));
}

void libGame_gf_JungleDefenderAIAllDefendersKilled (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C);
}

void libGame_gf_SendEventJungleDefenderAIAllDefendersKilled (int lp_defenderAIIndex, int lp_killingPlayer) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C, libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_Index_C), lp_defenderAIIndex);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C, libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_KillingPlayer_C), lp_killingPlayer);
    TriggerSendEvent(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C);
}

int libGame_gf_JungleDefenderAIAllDefendersKilledIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C, libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_Index_C));
}

int libGame_gf_JungleDefenderAIAllDefendersKilledKillingPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIAllDefendersKilled_C, libGame_gv_eventParam_JungleDefenderAIAllDefendersKilled_KillingPlayer_C));
}

void libGame_gf_JungleDefenderAIDefendersBeginFightingFromIdleOrLeashing (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleDefenderAIDefendersBeginFightingFromIdleOrLeashing_C);
}

int libGame_gf_JungleDefenderAIDefendersBeginFightingFromIdleOrLeashingIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefendersBeginFightingFromIdleOrLeashing_C, libGame_gv_eventParam_JungleDefenderAIDefendersBeginFightingFromIdleOrLeashing_Index_C));
}

void libGame_gf_SendEventJungleDefenderAIDefendersBeginFightingFromIdleOrLeashing (int lp_defenderAIIndex) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleDefenderAIDefendersBeginFightingFromIdleOrLeashing_C, libGame_gv_eventParam_JungleDefenderAIDefendersBeginFightingFromIdleOrLeashing_Index_C), lp_defenderAIIndex);
    TriggerSendEvent(libGame_gv_eventID_JungleDefenderAIDefendersBeginFightingFromIdleOrLeashing_C);
}

void libGame_gf_GameOpenTimerStarted (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_GateOpenTimerStarted_C);
}

void libGame_gf_SendEventGameOpenTimerStarted () {
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_GateOpenTimerStarted_C);
}

void libGame_gf_TownDataInitialized (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_TownDataInitialized_C);
}

void libGame_gf_SendEventTownDataInitialized () {
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_TownDataInitialized_C);
}

void libGame_gf_GameOverEvent (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_GameOverEvent_C);
}

void libGame_gf_SendEventGameOverEvent () {
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_GameOverEvent_C);
}

void libGame_gf_HeroAIStartingCampAttack (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroAIStartingCampAttack_C);
}

void libGame_gf_SendEventHeroAIStartingCampAttack (int lp_teamIndex, int lp_campIndex) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroAIStartingCampAttack_C, libGame_gv_eventParam_HeroAIStartingCampAttack_TeamIndex_C), lp_teamIndex);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroAIStartingCampAttack_C, libGame_gv_eventParam_HeroAIStartingCampAttack_CampIndex_C), lp_campIndex);
    TriggerSendEvent(libGame_gv_eventID_HeroAIStartingCampAttack_C);
}

int libGame_gf_HeroAIStartingCampAttackTeamIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroAIStartingCampAttack_C, libGame_gv_eventParam_HeroAIStartingCampAttack_TeamIndex_C));
}

int libGame_gf_HeroAIStartingCampAttackCampIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroAIStartingCampAttack_C, libGame_gv_eventParam_HeroAIStartingCampAttack_CampIndex_C));
}

void libGame_gf_HeroAIEndingCampAttack (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroAIEndingCampAttack_C);
}

void libGame_gf_SendEventHeroAIEndingCampAttack (int lp_teamIndex, int lp_campIndex, bool lp_success) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroAIEndingCampAttack_C, libGame_gv_eventParam_HeroAIEndingCampAttack_TeamIndex_C), lp_teamIndex);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroAIEndingCampAttack_C, libGame_gv_eventParam_HeroAIEndingCampAttack_CampIndex_C), lp_campIndex);
    DataTableSetBool(false, TriggerEventParamName(libGame_gv_eventID_HeroAIEndingCampAttack_C, libGame_gv_eventParam_HeroAIEndingCampAttack_Success_C), lp_success);
    TriggerSendEvent(libGame_gv_eventID_HeroAIEndingCampAttack_C);
}

int libGame_gf_HeroAIEndingCampAttackTeamIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroAIEndingCampAttack_C, libGame_gv_eventParam_HeroAIEndingCampAttack_TeamIndex_C));
}

int libGame_gf_HeroAIEndingCampAttackCampIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroAIEndingCampAttack_C, libGame_gv_eventParam_HeroAIEndingCampAttack_CampIndex_C));
}

bool libGame_gf_HeroAIEndingCampAttackSuccess () {
    // Implementation
    return DataTableGetBool(false, TriggerEventParamName(libGame_gv_eventID_HeroAIEndingCampAttack_C, libGame_gv_eventParam_HeroAIEndingCampAttack_Success_C));
}

void libGame_gf_ClearHeroSpecificUI (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_ClearHeroSpecificUI_C);
}

void libGame_gf_SendEventClearHeroSpecificUI () {
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_ClearHeroSpecificUI_C);
}

void libGame_gf_HeroExitedTransport (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroExitedTransport_C);
}

void libGame_gf_SendEventHeroExitedTransport (int lp_player, unit lp_unit) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroExitedTransport_C, libGame_gv_eventParam_HeroExitedTransport_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroExitedTransport_C, libGame_gv_eventParam_HeroExitedTransport_Transport_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_HeroExitedTransport_C);
}

int libGame_gf_HeroExitingTransportPlayerExiting () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroExitedTransport_C, libGame_gv_eventParam_HeroExitedTransport_Player_C));
}

unit libGame_gf_HeroExitingTransportTransport () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroExitedTransport_C, libGame_gv_eventParam_HeroExitedTransport_Transport_C));
}

void libGame_gf_HeroEnteredTransport (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroEnteredTransport_C);
}

void libGame_gf_SendEventHeroEnteredTransport (int lp_player, unit lp_transportUnit, unit lp_cargoUnit) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroEnteredTransport_C, libGame_gv_eventParam_HeroEnteredTransport_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroEnteredTransport_C, libGame_gv_eventParam_HeroEnteredTransport_Transport_C), lp_transportUnit);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroEnteredTransport_C, libGame_gv_eventParam_HeroEnteredTransport_CargoUnit_C), lp_cargoUnit);
    TriggerSendEvent(libGame_gv_eventID_HeroEnteredTransport_C);
}

int libGame_gf_HeroEnteredTransportPlayerEntering () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroEnteredTransport_C, libGame_gv_eventParam_HeroEnteredTransport_Player_C));
}

unit libGame_gf_HeroEnteredTransportTransport () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroEnteredTransport_C, libGame_gv_eventParam_HeroEnteredTransport_Transport_C));
}

unit libGame_gf_HeroEnteredTransportCargoUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroEnteredTransport_C, libGame_gv_eventParam_HeroEnteredTransport_CargoUnit_C));
}

void libGame_gf_HeroLevelUp (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroLevelUp_C);
}

void libGame_gf_SendEventHeroLevelUp (int lp_player) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroLevelUp_C, libGame_gv_eventParam_HeroLevelUp_Player), lp_player);
    TriggerSendEvent(libGame_gv_eventID_HeroLevelUp_C);
}

int libGame_gf_HeroLevelUpPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroLevelUp_C, libGame_gv_eventParam_HeroLevelUp_Player));
}

void libGame_gf_HeroSpecialCaseMounting (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroSpecialCaseMounting_C);
}

void libGame_gf_SendEventHeroSpecialCaseMounting (int lp_player) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroSpecialCaseMounting_C, libGame_gv_eventParam_HeroSpecialCaseMounting_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_HeroSpecialCaseMounting_C);
}

int libGame_gf_HeroSpecialCaseMountingPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroSpecialCaseMounting_C, libGame_gv_eventParam_HeroSpecialCaseMounting_Player_C));
}

void libGame_gf_HeroPortedBackToTown (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroPortedBackToTown_C);
}

void libGame_gf_SendEventHeroPortedBackToTown (int lp_player) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroPortedBackToTown_C, libGame_gv_eventParam_HeroPortedBackToTown_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_HeroPortedBackToTown_C);
}

int libGame_gf_HeroPortedBackToTownPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroPortedBackToTown_C, libGame_gv_eventParam_HeroPortedBackToTown_Player_C));
}

void libGame_gf_HeroParticipatedInNPCTakedown (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroParticipatedInNPCTakedown_C);
}

void libGame_gf_SendEventHeroParticipatedInNPCTakedown (int lp_player, unit lp_unit) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInNPCTakedown_C, libGame_gv_eventParam_HeroParticipatedInNPCTakedown_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInNPCTakedown_C, libGame_gv_eventParam_HeroParticipatedInNPCTakedown_NPC_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_HeroParticipatedInNPCTakedown_C);
}

int libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInNPCTakedown_C, libGame_gv_eventParam_HeroParticipatedInNPCTakedown_Player_C));
}

unit libGame_gf_HeroParticipatedInNPCTakedownMinion () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInNPCTakedown_C, libGame_gv_eventParam_HeroParticipatedInNPCTakedown_NPC_C));
}

void libGame_gf_HeroWitnessedAlliedNPCDeath (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroWitnessedAlliedNPCDeath_C);
}

void libGame_gf_SendEventHeroWitnessedAlliedNPCDeath (int lp_player, unit lp_unit) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroWitnessedAlliedNPCDeath_C, libGame_gv_eventParam_HeroWitnessedAlliedNPCDeath_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroWitnessedAlliedNPCDeath_C, libGame_gv_eventParam_HeroWitnessedAlliedNPCDeath_NPC_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_HeroWitnessedAlliedNPCDeath_C);
}

int libGame_gf_HeroWitnessedAlliedNPCDeathAlliedPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroWitnessedAlliedNPCDeath_C, libGame_gv_eventParam_HeroWitnessedAlliedNPCDeath_Player_C));
}

unit libGame_gf_HeroWitnessedAlliedNPCDeathMinion () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroWitnessedAlliedNPCDeath_C, libGame_gv_eventParam_HeroWitnessedAlliedNPCDeath_NPC_C));
}

void libGame_gf_SpecialCaseParticipatedInNPCTakedown (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C);
}

void libGame_gf_SendEventSpecialCaseUnitParticipatedInNPCTakedown (int lp_player, unit lp_unit) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C, libGame_gv_eventParam_SpecialCaseUnitParticipatedInNPCTakedown_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C, libGame_gv_eventParam_SpecialCaseUnitParticipatedInNPCTakedown_NPC_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C);
}

int libGame_gf_SpecialCaseUnitParticipatedInNPCTakedownPlayerParticipant () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C, libGame_gv_eventParam_SpecialCaseUnitParticipatedInNPCTakedown_Player_C));
}

unit libGame_gf_SpecialCaseUnitParticipatedInNPCTakedownMinion () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_SpecialCaseUnitParticipatedInNPCTakedown_C, libGame_gv_eventParam_SpecialCaseUnitParticipatedInNPCTakedown_NPC_C));
}

void libGame_gf_HeroParticipatedInTakedown (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroParticipatedInTakedown_C);
}

void libGame_gf_SendEventHeroParticipatedInTakedowndepreciated (int lp_playerKilling, int lp_playerKilled, unit lp_heroKilled) {
    // Deprecated
    libGame_gf_SendEventHeroParticipatedInTakedown(0, lp_playerKilling, lp_playerKilled, lp_heroKilled, UnitGetPosition(lp_heroKilled));
}

void libGame_gf_SendEventHeroParticipatedInTakedown (int lp_lastHitPlayer, int lp_playerKilling, int lp_playerKilled, unit lp_heroKilled, point lp_heroKilledPosition) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_LastHitPlayer_C), lp_lastHitPlayer);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_PlayerKilling_C), lp_playerKilling);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_PlayerKilled_C), lp_playerKilled);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_HeroKilled_C), lp_heroKilled);
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_HeroKilledPosition_C), lp_heroKilledPosition);
    TriggerSendEvent(libGame_gv_eventID_HeroParticipatedInTakedown_C);
    SoundPlayOnUnitForPlayer(SoundLink("XP_Gain_Direct", -1), c_maxPlayers, PlayerGroupSingle(lp_playerKilling), lp_heroKilled, 0.0, 100.0, 0.0);
}

int libGame_gf_HeroParticipatedInTakedownKillingPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_PlayerKilling_C));
}

int libGame_gf_HeroParticipatedInTakedownLastHitPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_LastHitPlayer_C));
}

int libGame_gf_HeroParticipatedInTakedownKilledPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_PlayerKilled_C));
}

unit libGame_gf_HeroParticipatedInTakedownKilledHero () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_HeroKilled_C));
}

point libGame_gf_HeroParticipatedInTakedownKilledHeroPosition () {
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_HeroParticipatedInTakedown_C, libGame_gv_eventParam_HeroParticipatedInTakedown_HeroKilledPosition_C));
}

void libGame_gf_HeroKilled (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroKilled_C);
}

void libGame_gf_SendEventHeroKilled (int lp_playerKilling, unit lp_killedUnit) {
    // Implementation
    if (((lp_playerKilling < 1) || (lp_playerKilling > libCore_gv_bALMaxEnginePlayerCount))) {
        TextExpressionSetToken("Param/Expression/lib_Game_60EAAD3B", "A", IntToText(lp_playerKilling));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_60EAAD3B"), true);
        return ;
    }

    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_PlayerKilling_C), lp_playerKilling);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_KilledUnit_C), lp_killedUnit);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_PlayerKilled_C), UnitGetOwner(lp_killedUnit));
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_Location_C), UnitGetPosition(lp_killedUnit));
    TriggerSendEvent(libGame_gv_eventID_HeroKilled_C);
}

int libGame_gf_HeroKilledKillingPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_PlayerKilling_C));
}

int libGame_gf_HeroKilledPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_PlayerKilled_C));
}

point libGame_gf_HeroKilledLocation () {
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_Location_C));
}

unit libGame_gf_HeroKilledUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroKilled_C, libGame_gv_eventParam_HeroKilled_KilledUnit_C));
}

void libGame_gf_HeroAllyKilled (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroAllyKilled_C);
}

void libGame_gf_SendEventHeroAllyKilled (int lp_playerKilling, unit lp_killedUnit) {
    // Implementation
    if (((lp_playerKilling < 1) || (lp_playerKilling > libCore_gv_bALMaxEnginePlayerCount))) {
        TextExpressionSetToken("Param/Expression/lib_Game_1219366A", "A", IntToText(lp_playerKilling));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_1219366A"), true);
        return ;
    }

    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroAllyKilled_C, libGame_gv_eventParam_HeroAllyKilled_PlayerKilling_C), lp_playerKilling);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroAllyKilled_C, libGame_gv_eventParam_HeroAllyKilled_KilledUnit_C), lp_killedUnit);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroAllyKilled_C, libGame_gv_eventParam_HeroAllyKilled_PlayerKilled_C), UnitGetOwner(lp_killedUnit));
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_HeroAllyKilled_C, libGame_gv_eventParam_HeroAllyKilled_Location_C), UnitGetPosition(lp_killedUnit));
    TriggerSendEvent(libGame_gv_eventID_HeroAllyKilled_C);
}

int libGame_gf_HeroAllyKilledKillingPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroAllyKilled_C, libGame_gv_eventParam_HeroAllyKilled_PlayerKilling_C));
}

int libGame_gf_HeroAllyKilledPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroAllyKilled_C, libGame_gv_eventParam_HeroAllyKilled_PlayerKilled_C));
}

point libGame_gf_HeroAllyKilledLocation () {
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_HeroAllyKilled_C, libGame_gv_eventParam_HeroAllyKilled_Location_C));
}

unit libGame_gf_HeroAllyKilledUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroAllyKilled_C, libGame_gv_eventParam_HeroAllyKilled_KilledUnit_C));
}

void libGame_gf_HeroSpawn (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroSpawn_C);
}

void libGame_gf_SendEventHeroSpawn (int lp_player) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroSpawn_C, libGame_gv_eventParam_HeroSpawn_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_HeroSpawn_C);
}

int libGame_gf_HeroSpawnPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroSpawn_C, libGame_gv_eventParam_HeroSpawn_Player_C));
}

void libGame_gf_ManualHeroSpawn (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_ManualHeroSpawn_C);
}

void libGame_gf_SendEventManualHeroSpawn (int lp_player, int lp_heroID, fixed lp_debugXP) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_ManualHeroSpawn_C, libGame_gv_eventParam_ManualHeroSpawn_Player_C), lp_player);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_ManualHeroSpawn_C, libGame_gv_eventParam_ManualHeroSpawn_HeroID_C), lp_heroID);
    DataTableSetFixed(false, TriggerEventParamName(libGame_gv_eventID_ManualHeroSpawn_C, libGame_gv_eventParam_ManualHeroSpawn_DebugXP_C), lp_debugXP);
    TriggerSendEvent(libGame_gv_eventID_ManualHeroSpawn_C);
}

int libGame_gf_ManualHeroSpawnPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_ManualHeroSpawn_C, libGame_gv_eventParam_ManualHeroSpawn_Player_C));
}

int libGame_gf_ManualHeroSpawnHeroID () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_ManualHeroSpawn_C, libGame_gv_eventParam_ManualHeroSpawn_HeroID_C));
}

fixed libGame_gf_ManualHeroSpawnDebugXP () {
    // Implementation
    return DataTableGetFixed(false, TriggerEventParamName(libGame_gv_eventID_ManualHeroSpawn_C, libGame_gv_eventParam_ManualHeroSpawn_DebugXP_C));
}

void libGame_gf_HeroRespawn (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroRespawn_C);
}

void libGame_gf_SendEventHeroRespawn (int lp_player) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroRespawn_C, libGame_gv_eventParam_HeroRespawn_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_HeroRespawn_C);
}

int libGame_gf_HeroRespawnPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroRespawn_C, libGame_gv_eventParam_HeroRespawn_Player_C));
}

void libGame_gf_HeroGainTalent (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroGainTalent_C);
}

void libGame_gf_SendEventHeroGainTalent (string lp_GainedTalent, int lp_player) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroGainTalent_C, libGame_gv_eventParam_HeroGainTalent_Player), lp_player);
    DataTableSetString(false, TriggerEventParamName(libGame_gv_eventID_HeroGainTalent_C, libGame_gv_eventParam_HeroGainTalent_Gained_Talent), lp_GainedTalent);
    TriggerSendEvent(libGame_gv_eventID_HeroGainTalent_C);
}

int libGame_gf_HeroGainTalentPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroGainTalent_C, libGame_gv_eventParam_HeroGainTalent_Player));
}

string libGame_gf_HeroGainTalentGainedTalent () {
    // Implementation
    return (DataTableGetString(false, TriggerEventParamName(libGame_gv_eventID_HeroGainTalent_C, libGame_gv_eventParam_HeroGainTalent_Gained_Talent)));
}

void libGame_gf_HeroRespecsTalents (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroRespecsTalents_C);
}

void libGame_gf_SendEventHeroRespecsTalents (int lp_player) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroRespecsTalents_C, libGame_gv_eventParam_HeroRespecsTalents_Player), lp_player);
    TriggerSendEvent(libGame_gv_eventID_HeroRespecsTalents_C);
}

int libGame_gf_HeroRespecsTalentsPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroRespecsTalents_C, libGame_gv_eventParam_HeroRespecsTalents_Player));
}

void libGame_gf_HeroMindControlsNPC (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_EventID_HeroMindControlsNPC_C);
}

void libGame_gf_SendEventHeroMindControlsNPC (unit lp_mindControlledUnit, int lp_originalOwner) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_EventID_HeroMindControlsNPC_C, libGame_gv_eventParam_HeroMindControlsNPC_NPCUnit_C), lp_mindControlledUnit);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_EventID_HeroMindControlsNPC_C, libGame_gv_eventParam_HeroMindControlsNPC_OriginalOwner_C), lp_originalOwner);
    TriggerSendEvent(libGame_gv_EventID_HeroMindControlsNPC_C);
}

unit libGame_gf_HeroMindControlsNPCNPCUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_EventID_HeroMindControlsNPC_C, libGame_gv_eventParam_HeroMindControlsNPC_NPCUnit_C));
}

int libGame_gf_HeroMindControlsNPCOriginalOwner () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_EventID_HeroMindControlsNPC_C, libGame_gv_eventParam_HeroMindControlsNPC_OriginalOwner_C));
}

void libGame_gf_HeroEntersSpecialDeathState (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroEntersSpecialDeathState_C);
}

void libGame_gf_SendEventHeroEntersSpecialDeathState (unit lp_hero) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroEntersSpecialDeathState_C, libGame_gv_eventParam_HeroEntersSpecialDeathState_Unit_C), lp_hero);
    TriggerSendEvent(libGame_gv_eventID_HeroEntersSpecialDeathState_C);
}

unit libGame_gf_HeroEntersSpecialDeathStateHero () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroEntersSpecialDeathState_C, libGame_gv_eventParam_HeroEntersSpecialDeathState_Unit_C));
}

void libGame_gf_CheckUnitForAbilityRedirect (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_CheckUnitForAbilityRedirect_C);
}

void libGame_gf_SendEventCheckUnitForAbilityRedirect (unit lp_Unit, unit lp_TargetUnit, bool lp_boolean, point lp_point) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_CheckUnitForAbilityRedirect_C, libGame_gv_eventParam_CheckUnitForAbilityRedirect_Unit_C), lp_Unit);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_CheckUnitForAbilityRedirect_C, libGame_gv_eventParam_CheckUnitForAbilityRedirect_Target_C), lp_TargetUnit);
    DataTableSetBool(false, TriggerEventParamName(libGame_gv_eventID_CheckUnitForAbilityRedirect_C, libGame_gv_eventParam_CheckUnitForAbilityRedirect_Boolean_C), lp_boolean);
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_CheckUnitForAbilityRedirect_C, libGame_gv_eventParam_CheckUnitForAbilityRedirect_Point_C), lp_point);
    TriggerSendEvent(libGame_gv_eventID_CheckUnitForAbilityRedirect_C);
}

unit libGame_gf_CheckUnitForAbilityRedirectUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_CheckUnitForAbilityRedirect_C, libGame_gv_eventParam_CheckUnitForAbilityRedirect_Unit_C));
}

unit libGame_gf_CheckUnitForAbilityRedirectTarget () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_CheckUnitForAbilityRedirect_C, libGame_gv_eventParam_CheckUnitForAbilityRedirect_Target_C));
}

bool libGame_gf_CheckUnitForAbilityRedirectBoolean () {
    // Implementation
    return DataTableGetBool(false, TriggerEventParamName(libGame_gv_eventID_CheckUnitForAbilityRedirect_C, libGame_gv_eventParam_CheckUnitForAbilityRedirect_Boolean_C));
}

point libGame_gf_CheckUnitForAbilityRedirectPoint () {
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_CheckUnitForAbilityRedirect_C, libGame_gv_eventParam_CheckUnitForAbilityRedirect_Point_C));
}

void libGame_gf_SpecialCaseTalentCooldownReset (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_SpecialCaseTalentCooldownReset_C);
}

void libGame_gf_SendEventSpecialCaseTalentCooldownReset (int lp_player) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_SpecialCaseTalentCooldownReset_C, libGame_gv_eventParam_SpecialCaseTalentCooldownReset_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_SpecialCaseTalentCooldownReset_C);
}

int libGame_gf_SpecialCaseTalentCooldownResetPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_SpecialCaseTalentCooldownReset_C, libGame_gv_eventParam_SpecialCaseTalentCooldownReset_Player_C));
}

void libGame_gf_HeroUnitSwappedForPlayer (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_HeroUnitSwappedForPlayer_C);
}

void libGame_gf_SendEventHeroUnitSwappedForPlayer (unit lp_oldUnit, unit lp_newUnit, int lp_playerNumber) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroUnitSwappedForPlayer_C, libGame_gv_eventParam_HeroUnitSwappedForPlayer_OldUnit_C), lp_oldUnit);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroUnitSwappedForPlayer_C, libGame_gv_eventParam_HeroUnitSwappedForPlayer_NewUnit_C), lp_newUnit);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroUnitSwappedForPlayer_C, libGame_gv_eventParam_HeroUnitSwappedForPlayer_PlayerNumber_C), lp_playerNumber);
    TriggerSendEvent(libGame_gv_eventID_HeroUnitSwappedForPlayer_C);
}

unit libGame_gf_HeroUnitSwappedForPlayerOldUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroUnitSwappedForPlayer_C, libGame_gv_eventParam_HeroUnitSwappedForPlayer_OldUnit_C));
}

unit libGame_gf_HeroUnitSwappedForPlayerNewUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_HeroUnitSwappedForPlayer_C, libGame_gv_eventParam_HeroUnitSwappedForPlayer_NewUnit_C));
}

int libGame_gf_HeroUnitSwappedForPlayerPlayerNumber () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_HeroUnitSwappedForPlayer_C, libGame_gv_eventParam_HeroUnitSwappedForPlayer_PlayerNumber_C));
}

void libGame_gf_JungleCampSpawning (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleCampStartedSpawning_C);
}

void libGame_gf_SendEventJungleCampSpawning (int lp_camp) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleCampStartedSpawning_C, libGame_gv_eventParam_JungleCampStartedSpawning_Camp_C), lp_camp);
    TriggerSendEvent(libGame_gv_eventID_JungleCampStartedSpawning_C);
}

int libGame_gf_JungleCampSpawningIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleCampStartedSpawning_C, libGame_gv_eventParam_JungleCampStartedSpawning_Camp_C));
}

void libGame_gf_JungleCampSpawned (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleCampSpawned_C);
}

void libGame_gf_SendEventJungleCampSpawned (int lp_camp) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleCampSpawned_C, libGame_gv_eventParam_JungleCampSpawned_Camp_C), lp_camp);
    TriggerSendEvent(libGame_gv_eventID_JungleCampSpawned_C);
}

int libGame_gf_JungleCampSpawnedIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_JungleCampSpawned_C, libGame_gv_eventParam_JungleCampSpawned_Camp_C));
}

void libGame_gf_JungleCampDefenderCreated (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleCampDefenderCreated_C);
}

void libGame_gf_SendEventJungleCampDefenderCreated (unit lp_unit) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleCampDefenderCreated_C, libGame_gv_eventParam_JungleCampDefenderCreated_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_JungleCampDefenderCreated_C);
}

unit libGame_gf_JungleCampDefenderUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleCampDefenderCreated_C, libGame_gv_eventParam_JungleCampDefenderCreated_C));
}

void libGame_gf_JungleCampLanerCreated (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_JungleCampLanerCreated_C);
}

void libGame_gf_SendEventJungleCampLanerCreated (unit lp_unit) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleCampLanerCreated_C, libGame_gv_eventParam_JungleCampLanerCreated_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_JungleCampLanerCreated_C);
}

unit libGame_gf_JungleCampLanerUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_JungleCampLanerCreated_C, libGame_gv_eventParam_JungleCampLanerCreated_C));
}

void libGame_gf_MercCampCaptured (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MercCampCaptured_C);
}

void libGame_gf_SendEventMercCampCaptured (int lp_camp, int lp_owner, playergroup lp_capturingPlayers) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_Index_C), lp_camp);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_Owner_C), lp_owner);
    DataTableSetPlayerGroup(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_CapturingPlayers_C), lp_capturingPlayers);
    TriggerSendEvent(libGame_gv_eventID_MercCampCaptured_C);
}

int libGame_gf_MercCampCapturedIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_Index_C));
}

int libGame_gf_MercCampCapturedOwner () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_Owner_C));
}

playergroup libGame_gf_MercCampCapturedCapturingPlayers () {
    // Implementation
    return DataTableGetPlayerGroup(false, TriggerEventParamName(libGame_gv_eventID_MercCampCaptured_C, libGame_gv_eventParam_MercCampCaptured_Index_C));
}

void libGame_gf_MapMechanicInitialization (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapMechanicInit_C);
}

void libGame_gf_SendEventMapMechanicInitialization (string lp_mechanic) {
    // Implementation
    DataTableSetString(false, TriggerEventParamName(libGame_gv_eventID_MapMechanicInit_C, libGame_gv_eventParam_MapMechanicInit_Mechanic_C), lp_mechanic);
    TriggerSendEvent(libGame_gv_eventID_MapMechanicInit_C);
}

string libGame_gf_MapMechanicInitializationMechanicType () {
    // Variable Declarations
    string lv_value;

    // Variable Initialization
    lv_value = "";

    // Implementation
    lv_value = DataTableGetString(false, TriggerEventParamName(libGame_gv_eventID_MapMechanicInit_C, libGame_gv_eventParam_MapMechanicInit_Mechanic_C));
    return lv_value;
}

void libGame_gf_MapObjectiveCapturedByUnit (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_UnitCapturedMapObjective_C);
}

void libGame_gf_SendEventMapObjectiveCapturedByUnit (unit lp_capturingUnit) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitCapturedMapObjective_C, libGame_gv_eventParam_UnitCapturedMapObjective_Unit_C), lp_capturingUnit);
    TriggerSendEvent(libGame_gv_eventID_UnitCapturedMapObjective_C);
}

unit libGame_gf_MapObjectiveCapturingUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitCapturedMapObjective_C, libGame_gv_eventParam_UnitCapturedMapObjective_Unit_C));
}

void libGame_gf_MapCursedHollowTributeWarning (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapTributeWarning_C);
}

void libGame_gf_SendEventMapCursedHollowTributeWarning (point lp_position) {
    // Implementation
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapTributeWarning_C, libGame_gv_eventParam_MapTributeWarning_Position_C), lp_position);
    TriggerSendEvent(libGame_gv_eventID_MapTributeWarning_C);
}

point libGame_gf_MapCursedHollowTributeWarningPosition () {
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapTributeWarning_C, libGame_gv_eventParam_MapTributeWarning_Position_C));
}

void libGame_gf_MapCursedHollowTributeSpawned (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapTributeSpawned_C);
}

void libGame_gf_SendEventMapCursedHollowTributeSpawned (unit lp_tribute) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapTributeSpawned_C, libGame_gv_eventParam_MapTributeSpawned_Tribute_C), lp_tribute);
    TriggerSendEvent(libGame_gv_eventID_MapTributeSpawned_C);
}

unit libGame_gf_MapCursedHollowTributeSpawnedUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapTributeSpawned_C, libGame_gv_eventParam_MapTributeSpawned_Tribute_C));
}

void libGame_gf_MapCursedHollowTributePickedUp (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapTributePickedup_C);
}

void libGame_gf_SendEventMapCursedHollowTributePickedUp (int lp_player, point lp_positioin) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapTributePickedup_C, libGame_gv_eventParam_MapTributePickedup_Player_C), lp_player);
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapTributePickedup_C, libGame_gv_eventParam_MapTributePickedup_Position_C), lp_positioin);
    TriggerSendEvent(libGame_gv_eventID_MapTributePickedup_C);
}

int libGame_gf_MapCursedHollowTributePickedUpPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapTributePickedup_C, libGame_gv_eventParam_MapTributePickedup_Player_C));
}

point libGame_gf_MapCursedHollowTributePickedUpPosition () {
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapTributePickedup_C, libGame_gv_eventParam_MapTributePickedup_Position_C));
}

void libGame_gf_MapCursedHollowCurseStarts (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapRavenCurseStarts_C);
}

void libGame_gf_SendEventMapCursedHollowCurseStarts (int lp_team) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapRavenCurseStarts_C, libGame_gv_eventParam_MapRavenCurseStarts_Team_C), lp_team);
    TriggerSendEvent(libGame_gv_eventID_MapRavenCurseStarts_C);
}

int libGame_gf_MapCursedHollowCurseActivatedTeam () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapRavenCurseStarts_C, libGame_gv_eventParam_MapRavenCurseStarts_Team_C));
}

void libGame_gf_MapCursedHollowCurseEnds (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapRavenCurseEnds_C);
}

void libGame_gf_SendEventMapCursedHollowCurseEnds () {
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_MapRavenCurseEnds_C);
}

void libGame_gf_MapHauntedMinesUndeadSpawned (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapUnderworldOpen_C);
}

void libGame_gf_SendEventMapHauntedMinesUndeadSpawned (unitgroup lp_entrances, region lp_underworld, int lp_totalSkull) {
    // Implementation
    DataTableSetUnitGroup(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldOpen_C, libGame_gv_eventParam_MapUnderworldOpen_Entrances_C), lp_entrances);
    DataTableSetRegion(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldOpen_C, libGame_gv_eventParam_MapUnderworldOpen_Underworld_C), lp_underworld);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldOpen_C, libGame_gv_eventParam_MapUnderworldOpen_TotalSkull_C), lp_totalSkull);
    TriggerSendEvent(libGame_gv_eventID_MapUnderworldOpen_C);
}

unitgroup libGame_gf_MapHauntedMinesUndeadSpawnedEntrances () {
    // Implementation
    return DataTableGetUnitGroup(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldOpen_C, libGame_gv_eventParam_MapUnderworldOpen_Entrances_C));
}

region libGame_gf_MapHauntedMinesUndeadSpawnedUnderworldRegion () {
    // Implementation
    return DataTableGetRegion(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldOpen_C, libGame_gv_eventParam_MapUnderworldOpen_Underworld_C));
}

int libGame_gf_MapHauntedMinesUndeadSpawnedTotalSkull () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldOpen_C, libGame_gv_eventParam_MapUnderworldOpen_TotalSkull_C));
}

void libGame_gf_MapHauntedMinesSkullCollected (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapUnderworldSkullCollected_C);
}

void libGame_gf_SendEventMapHauntedMinesSkullCollected (int lp_team1, int lp_team2, int lp_collectingPlayer) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldSkullCollected_C, libGame_gv_eventParam_MapUnderworldSkullCollected_Team1Skulls_C), lp_team1);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldSkullCollected_C, libGame_gv_eventParam_MapUnderworldSkullCollected_Team2Skulls_C), lp_team2);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldSkullCollected_C, libGame_gv_eventParam_MapUnderworldSkullCollected_CollectingPlayer_C), lp_collectingPlayer);
    TriggerSendEvent(libGame_gv_eventID_MapUnderworldSkullCollected_C);
}

int libGame_gf_MapHauntedMinesSkullCollectedTeam1Skulls () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldSkullCollected_C, libGame_gv_eventParam_MapUnderworldSkullCollected_Team1Skulls_C));
}

int libGame_gf_MapHauntedMinesSkullCollectedTeam2Skulls () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldSkullCollected_C, libGame_gv_eventParam_MapUnderworldSkullCollected_Team2Skulls_C));
}

int libGame_gf_MapHauntedMinesSkullCollectedCollectingPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldSkullCollected_C, libGame_gv_eventParam_MapUnderworldSkullCollected_CollectingPlayer_C));
}

void libGame_gf_MapHauntedMinesCleared (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapUnderworldCleared_C);
}

void libGame_gf_SendEventMapHauntedMinesCleared () {
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_MapUnderworldCleared_C);
}

void libGame_gf_MapHauntedMinesBossStartSummoning (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapUnderworldBossStartSummoning_C);
}

void libGame_gf_SendEventMapHauntedMinesBossStartSummoning (int lp_team, point lp_location, int lp_lane) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldBossStartSummoning_C, libGame_gv_eventParam_MapUnderworldBossStartSummoning_Team_C), lp_team);
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldBossStartSummoning_C, libGame_gv_eventParam_MapUnderworldBossStartSummoning_Location_C), lp_location);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldBossStartSummoning_C, libGame_gv_eventParam_MapUnderworldBossStartSummoning_Lane_C), lp_lane);
    TriggerSendEvent(libGame_gv_eventID_MapUnderworldBossStartSummoning_C);
}

int libGame_gf_MapHauntedMinesBossStartSummoningTeam () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldBossStartSummoning_C, libGame_gv_eventParam_MapUnderworldBossStartSummoning_Team_C));
}

point libGame_gf_MapHauntedMinesBossStartSummoningLocation () {
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldBossStartSummoning_C, libGame_gv_eventParam_MapUnderworldBossStartSummoning_Location_C));
}

int libGame_gf_MapHauntedMinesBossStartSummoningLane () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldBossStartSummoning_C, libGame_gv_eventParam_MapUnderworldBossStartSummoning_Lane_C));
}

void libGame_gf_MapHauntedMinesBossSummoned (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapUnderworldBossSummoned_C);
}

void libGame_gf_SendEventMapHauntedMinesBossSummoned (unit lp_boss) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldBossSummoned_C, libGame_gv_eventParam_MapUnderworldBossSummoned_Boss_C), lp_boss);
    TriggerSendEvent(libGame_gv_eventID_MapUnderworldBossSummoned_C);
}

unit libGame_gf_MapHauntedMinesBossSummonedBoss () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldBossSummoned_C, libGame_gv_eventParam_MapUnderworldBossSummoned_Boss_C));
}

void libGame_gf_MapHauntedMinesPlayerUsesGate (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapUnderworldPlayerUsesGate_C);
}

void libGame_gf_SendEventMapHauntedMinesPlayerUsesGate (int lp_player, unit lp_heroUnit) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldPlayerUsesGate_C, libGame_gv_eventParam_MapUnderworldPlayerUsesGate_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldPlayerUsesGate_C, libGame_gv_eventParam_MapUnderworldPlayerUsesGate_HeroUnit_C), lp_heroUnit);
    TriggerSendEvent(libGame_gv_eventID_MapUnderworldPlayerUsesGate_C);
}

int libGame_gf_MapHauntedMinesPlayerUsesGatePlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldPlayerUsesGate_C, libGame_gv_eventParam_MapUnderworldPlayerUsesGate_Player_C));
}

unit libGame_gf_MapHauntedMinesPlayerUsesGateHeroUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldPlayerUsesGate_C, libGame_gv_eventParam_MapUnderworldPlayerUsesGate_HeroUnit_C));
}

void libGame_gf_MapHauntedMinesPlayerChangesPlane (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapUnderworldPlayerChangesPlane_C);
}

void libGame_gf_SendEventMapHauntedMinesPlayerChangesPlane (int lp_player, unit lp_heroUnit) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldPlayerChangesPlane_C, libGame_gv_eventParam_MapUnderworldPlayerChangesPlane_Player_C), lp_player);
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldPlayerChangesPlane_C, libGame_gv_eventParam_MapUnderworldPlayerChangesPlane_HeroUnit_C), lp_heroUnit);
    TriggerSendEvent(libGame_gv_eventID_MapUnderworldPlayerChangesPlane_C);
}

int libGame_gf_MapHauntedMinesPlayerChangesPlanePlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldPlayerChangesPlane_C, libGame_gv_eventParam_MapUnderworldPlayerChangesPlane_Player_C));
}

unit libGame_gf_MapHauntedMinesPlayerChangesPlaneHeroUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapUnderworldPlayerChangesPlane_C, libGame_gv_eventParam_MapUnderworldPlayerChangesPlane_HeroUnit_C));
}

void libGame_gf_MapDragonShireObeliskSpawned (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapObeliskSpawned_C);
}

void libGame_gf_SendEventMapDragonShireSpawned (unit lp_obelisk) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapObeliskSpawned_C, libGame_gv_eventParam_MapObeliskSpawned_Obelisk_C), lp_obelisk);
    TriggerSendEvent(libGame_gv_eventID_MapObeliskSpawned_C);
}

unit libGame_gf_MapDragonShireObeliskSpawnedUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapObeliskSpawned_C, libGame_gv_eventParam_MapObeliskSpawned_Obelisk_C));
}

void libGame_gf_MapDragonShireObeliskOwnershipChange (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapObeliskOwnershipChange_C);
}

void libGame_gf_SendEventMapDragonShireObeliskOwnershipChange (int lp_team, unit lp_obelisk, playergroup lp_capturingPlayers) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapObeliskOwnershipChange_C, libGame_gv_eventParam_MapObeliskOwnershipChange_Team_C), lp_team);
    DataTableSetUnit(true, TriggerEventParamName(libGame_gv_eventID_MapObeliskOwnershipChange_C, libGame_gv_eventParam_MapObeliskOwnershipChange_Obelisk_C), lp_obelisk);
    DataTableSetPlayerGroup(false, TriggerEventParamName(libGame_gv_eventID_MapObeliskOwnershipChange_C, libGame_gv_eventParam_MapObeliskOwnershipChange_CapturingPlayers_C), lp_capturingPlayers);
    TriggerSendEvent(libGame_gv_eventID_MapObeliskOwnershipChange_C);
}

int libGame_gf_MapDragonShireObeliskOwnershipChangeTeam () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapObeliskOwnershipChange_C, libGame_gv_eventParam_MapObeliskOwnershipChange_Team_C));
}

unit libGame_gf_MapDragonShireObeliskOwnershipChangeObelisk () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapObeliskOwnershipChange_C, libGame_gv_eventParam_MapObeliskOwnershipChange_Obelisk_C));
}

playergroup libGame_gf_MapDragonShireObeliskOwnershipChangeCapturingPlayers () {
    // Implementation
    return DataTableGetPlayerGroup(false, TriggerEventParamName(libGame_gv_eventID_MapObeliskOwnershipChange_C, libGame_gv_eventParam_MapObeliskOwnershipChange_CapturingPlayers_C));
}

void libGame_gf_MapDragonShireDragonActivated (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapDragonActivated_C);
}

void libGame_gf_SendEventMapDragonShireDragonActivated (unit lp_dragon, int lp_activatingPlayer) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapDragonActivated_C, libGame_gv_eventParam_MapDragonActivated_Dragon_C), lp_dragon);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapDragonActivated_C, libGame_gv_eventParam_MapDragonActivated_Player_C), lp_activatingPlayer);
    TriggerSendEvent(libGame_gv_eventID_MapDragonActivated_C);
}

unit libGame_gf_MapDragonShireDragonActivatedDragonUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_MapDragonActivated_C, libGame_gv_eventParam_MapDragonActivated_Dragon_C));
}

int libGame_gf_MapDragonShireDragonActivatedDragonPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapDragonActivated_C, libGame_gv_eventParam_MapDragonActivated_Player_C));
}

void libGame_gf_MapDragonShireDragonEnds (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapDragonShireDragonEnds_C);
}

void libGame_gf_SendEventMapDragonShireDragonEnds () {
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_MapDragonShireDragonEnds_C);
}

void libGame_gf_MapGardenOfTerrorNightStarts (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapHauntedWoodsNightStarts_C);
}

void libGame_gf_SendEventMapGardenOfTerrorNightStarts () {
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_MapHauntedWoodsNightStarts_C);
}

void libGame_gf_MapGardenOfTerrorNightEnds (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapHauntedWoodsNightEnds_C);
}

void libGame_gf_SendEventMapGardenOfTerrorNightEnds () {
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_MapHauntedWoodsNightEnds_C);
}

void libGame_gf_MapGardenOfTerrorSeedsCollected (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapGardensSeedCollected_C);
}

void libGame_gf_SendEventMapGardenOfTerrorSeedsCollected (int lp_collectingPlayer) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapGardensSeedCollected_C, libGame_gv_eventParam_MapGardensSeedCollected_CollectingPlayer_C), lp_collectingPlayer);
    TriggerSendEvent(libGame_gv_eventID_MapGardensSeedCollected_C);
}

int libGame_gf_MapGardenOfTerrorSeedsCollectedCollectingPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapGardensSeedCollected_C, libGame_gv_eventParam_MapGardensSeedCollected_CollectingPlayer_C));
}

void libGame_gf_MapTombSpiderQueenSoulCollected (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MapSoulCagesSoulCollected_C);
}

void libGame_gf_SendEventMapTombSpiderQueenSoulCollected (int lp_collectingPlayer, int lp_count) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapSoulCagesSoulCollected_C, libGame_gv_eventParam_MapSoulCagesSoulCollected_CollectingPlayer_C), lp_collectingPlayer);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MapSoulCagesSoulCollected_C, libGame_gv_eventParam_MapSoulCagesSoulCollected_Count_C), lp_count);
    TriggerSendEvent(libGame_gv_eventID_MapSoulCagesSoulCollected_C);
}

int libGame_gf_MapTombSpiderQueenSoulCollectedCollectingPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapSoulCagesSoulCollected_C, libGame_gv_eventParam_MapSoulCagesSoulCollected_CollectingPlayer_C));
}

int libGame_gf_MapTombSpiderQueenSoulCollectedCount () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MapSoulCagesSoulCollected_C, libGame_gv_eventParam_MapSoulCagesSoulCollected_Count_C));
}

void libGame_gf_MinionGroupCreated (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MinionGroupCreated_C);
}

void libGame_gf_SendEventMinionGroupCreated (unitgroup lp_unitGroup) {
    // Implementation
    DataTableSetUnitGroup(false, TriggerEventParamName(libGame_gv_eventID_MinionGroupCreated_C, libGame_gv_eventParam_MinionGroupCreated_C), lp_unitGroup);
    TriggerSendEvent(libGame_gv_eventID_MinionGroupCreated_C);
}

unitgroup libGame_gf_MinionUnitGroup () {
    // Implementation
    return DataTableGetUnitGroup(false, TriggerEventParamName(libGame_gv_eventID_MinionGroupCreated_C, libGame_gv_eventParam_MinionGroupCreated_C));
}

void libGame_gf_PlayerAchievesMultiKill (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_PlayerAchievesMultiKill_C);
}

void libGame_gf_SendEventPlayerAchievesMultiKill (int lp_player, int lp_killCount) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerAchievesMultiKill_C, libGame_gv_eventParam_PlayerAchievesMultiKill_Player_C), lp_player);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerAchievesMultiKill_C, libGame_gv_eventParam_PlayerAchievesMultiKill_KillCount_C), lp_killCount);
    TriggerSendEvent(libGame_gv_eventID_PlayerAchievesMultiKill_C);
}

int libGame_gf_PlayerAchievesMultiKillPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerAchievesMultiKill_C, libGame_gv_eventParam_PlayerAchievesMultiKill_Player_C));
}

int libGame_gf_PlayerAchievesMultiKillKillCount () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_PlayerAchievesMultiKill_C, libGame_gv_eventParam_PlayerAchievesMultiKill_KillCount_C));
}

void libGame_gf_ArenaModeCrowdKillingSpree (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_ArenaMode_Crowd_KillingSpree_Announce_C);
}

void libGame_gf_SendEventArenaModeCrowdKillingSpree (int lp_player) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_ArenaMode_Crowd_KillingSpree_Announce_C, libGame_gv_eventParam_KillingSpree_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_ArenaMode_Crowd_KillingSpree_Announce_C);
}

int libGame_gf_ArenaModeKillingSpreePlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_ArenaMode_Crowd_KillingSpree_Announce_C, libGame_gv_eventParam_KillingSpree_Player_C));
}

void libGame_gf_ArenaModeCrowdMayhem (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_ArenaMode_Crowd_Mayhem_Announce_C);
}

void libGame_gf_SendEventArenaModeCrowdMayhem (int lp_player) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_ArenaMode_Crowd_Mayhem_Announce_C, libGame_gv_eventParam_Mayhem_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_ArenaMode_Crowd_Mayhem_Announce_C);
}

int libGame_gf_ArenaModeMayhemPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_ArenaMode_Crowd_Mayhem_Announce_C, libGame_gv_eventParam_Mayhem_Player_C));
}

void libGame_gf_ArenaModeCrowdHotS (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_ArenaMode_Crowd_HotS_Announce_C);
}

void libGame_gf_SendEventArenaModeCrowdHotS (int lp_player) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_ArenaMode_Crowd_HotS_Announce_C, libGame_gv_eventParam_HotS_Player_C), lp_player);
    TriggerSendEvent(libGame_gv_eventID_ArenaMode_Crowd_HotS_Announce_C);
}

int libGame_gf_ArenaModeHotSPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_ArenaMode_Crowd_HotS_Announce_C, libGame_gv_eventParam_HotS_Player_C));
}

void libGame_gf_AnnouncerVOInitiated (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_AnnouncerVOInitiated_C);
}

void libGame_gf_SendEventAnnouncerVOInitiated (sound lp_sound, int lp_player, int lp_announcerEvent) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_AnnouncerVOInitiated_C, libGame_gv_eventParam_AnnouncerEvent_C), lp_announcerEvent);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_AnnouncerVOInitiated_C, libGame_gv_eventParam_Player_C), lp_player);
    DataTableSetSound(false, TriggerEventParamName(libGame_gv_eventID_AnnouncerVOInitiated_C, libGame_gv_eventParam_Sound_C), lp_sound);
    TriggerSendEvent(libGame_gv_eventID_AnnouncerVOInitiated_C);
}

int libGame_gf_AnnouncerVOInitiatedAnnouncerEvent () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_AnnouncerVOInitiated_C, libGame_gv_eventParam_AnnouncerEvent_C));
}

int libGame_gf_AnnouncerVOInitiatedPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_AnnouncerVOInitiated_C, libGame_gv_eventParam_Player_C));
}

sound libGame_gf_AnnouncerVOInitiatedSound () {
    // Implementation
    return DataTableGetSound(false, TriggerEventParamName(libGame_gv_eventID_AnnouncerVOInitiated_C, libGame_gv_eventParam_Sound_C));
}

void libGame_gf_CustomKillVO (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_CustomKillVO_C);
}

void libGame_gf_SendCustomKillVO (int lp_killingplayer, int lp_deadplayer, string lp_killLine, int lp_speakingPlayer) {
    // Variable Declarations
    string lv_string;

    // Variable Initialization
    lv_string = "";

    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CustomKillVO_C, libGame_gv_eventParam_CustomKillVOPlayer_C), lp_killingplayer);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CustomKillVO_C, libGame_gv_eventParam_CustomKillVODeadPlayer_C), lp_deadplayer);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_CustomKillVO_C, libGame_gv_eventParam_CustomKillVOSpeakingPlayer_C), lp_speakingPlayer);
    DataTableSetString(false, TriggerEventParamName(libGame_gv_eventID_CustomKillVO_C, libGame_gv_eventParam_CustomKillVOKillLine_C), (lp_killLine));
    TriggerSendEvent(libGame_gv_eventID_CustomKillVO_C);
}

int libGame_gf_CustomKillVOKillingPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CustomKillVO_C, libGame_gv_eventParam_CustomKillVOPlayer_C));
}

int libGame_gf_CustomKillVODeadPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CustomKillVO_C, libGame_gv_eventParam_CustomKillVODeadPlayer_C));
}

int libGame_gf_CustomKillVOSpeakingPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_CustomKillVO_C, libGame_gv_eventParam_CustomKillVOSpeakingPlayer_C));
}

string libGame_gf_CustomKillVOKillLine () {
    // Implementation
    return DataTableGetString(false, TriggerEventParamName(libGame_gv_eventID_CustomKillVO_C, libGame_gv_eventParam_CustomKillVOKillLine_C));
}

void libGame_gf_TalentPanelVisibilityChanged (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_TalentPanelVisibilityChanged_C);
}

void libGame_gf_SendEventTalentPanelVisibilityChanged (int lp_player, bool lp_visible) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_TalentPanelVisibilityChanged_C, libGame_gv_eventParam_TalentPanelVisibilityChanged_Player_C), lp_player);
    DataTableSetBool(false, TriggerEventParamName(libGame_gv_eventID_TalentPanelVisibilityChanged_C, libGame_gv_eventParam_TalentPanelVisibilityChanged_Visibility_C), lp_visible);
    TriggerSendEvent(libGame_gv_eventID_TalentPanelVisibilityChanged_C);
}

int libGame_gf_TalentPanelVisibilityChangedPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_TalentPanelVisibilityChanged_C, libGame_gv_eventParam_TalentPanelVisibilityChanged_Player_C));
}

bool libGame_gf_TalentPanelVisibilityChangedVisible () {
    // Implementation
    return DataTableGetBool(false, TriggerEventParamName(libGame_gv_eventID_TalentPanelVisibilityChanged_C, libGame_gv_eventParam_TalentPanelVisibilityChanged_Visibility_C));
}

void libGame_gf_TownStructureEntersSpecialDeathState (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_TownStructureEntersSpecialDeathState_C);
}

void libGame_gf_SendEventTownStructureEntersSpecialDeathState (unit lp_structure) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_TownStructureEntersSpecialDeathState_C, libGame_gv_eventParam_TownStructureEntersSpecialDeathState_Structure_C), lp_structure);
    TriggerSendEvent(libGame_gv_eventID_TownStructureEntersSpecialDeathState_C);
}

unit libGame_gf_TownStructureEntersSpecialDeathStateStructure () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_TownStructureEntersSpecialDeathState_C, libGame_gv_eventParam_TownStructureEntersSpecialDeathState_Structure_C));
}

void libGame_gf_UnitEntersSafeZonePuntRegion (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C);
}

void libGame_gf_SendEventUnitEntersSafeZonePuntRegion (unit lp_unit, point lp_puntPoint) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C, libGame_gv_eventParam_UnitEntersSafeZonePuntRegion_Unit_C), lp_unit);
    DataTableSetPoint(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C, libGame_gv_eventParam_UnitEntersSafeZonePuntRegion_PuntPoint_C), lp_puntPoint);
    TriggerSendEvent(libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C);
}

unit libGame_gf_UnitEntersSafeZonePuntRegionUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C, libGame_gv_eventParam_UnitEntersSafeZonePuntRegion_Unit_C));
}

point libGame_gf_UnitEntersSafeZonePuntRegionPuntPoint () {
    // Implementation
    return DataTableGetPoint(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZonePuntRegion_C, libGame_gv_eventParam_UnitEntersSafeZonePuntRegion_PuntPoint_C));
}

void libGame_gf_UnitEntersSafeZoneRegion (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_UnitEntersSafeZoneRegion_C);
}

void libGame_gf_SendEventUnitEntersSafeZoneRegion (unit lp_unit) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZoneRegion_C, libGame_gv_eventParam_UnitEntersSafeZoneRegion_Unit_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_UnitEntersSafeZoneRegion_C);
}

unit libGame_gf_UnitEntersSafeZoneRegionUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitEntersSafeZoneRegion_C, libGame_gv_eventParam_UnitEntersSafeZoneRegion_Unit_C));
}

void libGame_gf_UnitExitsSafeZoneRegion (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_UnitExitsSafeZoneRegion_C);
}

void libGame_gf_SendEventUnitExitsSafeZoneRegion (unit lp_unit) {
    // Implementation
    DataTableSetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitExitsSafeZoneRegion_C, libGame_gv_eventParam_UnitExitsSafeZoneRegion_Unit_C), lp_unit);
    TriggerSendEvent(libGame_gv_eventID_UnitExitsSafeZoneRegion_C);
}

unit libGame_gf_UnitExitsSafeZoneRegionUnit () {
    // Implementation
    return DataTableGetUnit(false, TriggerEventParamName(libGame_gv_eventID_UnitExitsSafeZoneRegion_C, libGame_gv_eventParam_UnitExitsSafeZoneRegion_Unit_C));
}

void libGame_gf_SeasonalEventTeamGetsEvent (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_SeasonalEventTeamGetsEvent_C);
}

void libGame_gf_SendEventTeamGetsEvent (int lp_team) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_SeasonalEventTeamGetsEvent_C, libGame_gv_eventParam_SeasonalEventTeamGetsEvent_Team_C), lp_team);
    TriggerSendEvent(libGame_gv_eventID_SeasonalEventTeamGetsEvent_C);
}

int libGame_gf_SeasonalEventTeamGetsEventTeam () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_SeasonalEventTeamGetsEvent_C, libGame_gv_eventParam_SeasonalEventTeamGetsEvent_Team_C));
}

void libGame_gf_TeamGetsVictorySequence (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_TeamGetsVictorySequence_C);
}

void libGame_gf_SendEventTeamGetsVictorySequence (int lp_team) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_TeamGetsVictorySequence_C, libGame_gv_eventParam_TeamGetsVictorySequence_Team_C), lp_team);
    TriggerSendEvent(libGame_gv_eventID_TeamGetsVictorySequence_C);
}

int libGame_gf_TeamGetsVictorySequenceTeam () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_TeamGetsVictorySequence_C, libGame_gv_eventParam_TeamGetsVictorySequence_Team_C));
}

void libGame_gf_GameLoadedUIHook (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_GameLoadedUIHook_C);
}

void libGame_gf_SendEventGameLoadedUIHook () {
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_GameLoadedUIHook_C);
}

void libGame_gf_MercCampRewardGranted (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_MercCampRewardGranted_C);
}

void libGame_gf_SendEventMercCampRewardGranted (int lp_player, int lp_campIndex) {
    // Implementation
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MercCampRewardGranted_C, libGame_gv_eventParam_MercCamp_CampIndex_C), lp_campIndex);
    DataTableSetInt(false, TriggerEventParamName(libGame_gv_eventID_MercCampRewardGranted_C, libGame_gv_eventParam_MercCamp_RewardedPlayer_C), lp_player);
    TriggerSendInstantEvent(libGame_gv_eventID_MercCampRewardGranted_C);
}

int libGame_gf_MercCampRewardGrantedCampIndex () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MercCampRewardGranted_C, libGame_gv_eventParam_MercCamp_CampIndex_C));
}

int libGame_gf_MercCampRewardGrantedPlayer () {
    // Implementation
    return DataTableGetInt(false, TriggerEventParamName(libGame_gv_eventID_MercCampRewardGranted_C, libGame_gv_eventParam_MercCamp_RewardedPlayer_C));
}

void libGame_gf_PickingHeroesForPlayers () {
    int autoB53EFE3A_ae;
    int autoB53EFE3A_ai;
    int auto27F3DF11_ae;
    int auto27F3DF11_ai;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    libAIAI_gf_HeroAIGeneralPreInit();
    libGame_gv_heroPickDone = false;
    if ((libGame_gv_pickingHeroesCallback != null)) {
        TriggerExecute(libGame_gv_pickingHeroesCallback, true, true);
        autoB53EFE3A_ae = libCore_gv_bALMaxPlayers;
        autoB53EFE3A_ai = 1;
        lv_playerIndex = 1;
        for ( ; ( (autoB53EFE3A_ai >= 0 && lv_playerIndex <= autoB53EFE3A_ae) || (autoB53EFE3A_ai <= 0 && lv_playerIndex >= autoB53EFE3A_ae) ) ; lv_playerIndex += autoB53EFE3A_ai ) {
            if ((libGame_gv_players[lv_playerIndex].lv_heroIndex >= 1)) {
                libCore_gf_DataLoadHeroDataIntoIndex(libCore_gf_GetHeroFromIndex(libGame_gv_players[lv_playerIndex].lv_heroIndex), lv_playerIndex);
            }

        }
    }
    else {
        TriggerExecute(libGame_gt_PickingHeroesNormalMode, true, true);
    }
    while (!((libGame_gv_heroPickDone == true))) {
        Wait(0.0625, c_timeGame);
    }
    libGame_gf_HeroSelectionSetBNetMountSelectionsForAllPlayers();
    if ((libGame_gv_randomizeMountsAndSkins == true)) {
        libGame_gf_HeroSelectionComputersRandomlyPickSkinsMounts();
    }

    auto27F3DF11_ae = libCore_gv_bALMaxPlayers;
    auto27F3DF11_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (auto27F3DF11_ai >= 0 && lv_playerIndex <= auto27F3DF11_ae) || (auto27F3DF11_ai <= 0 && lv_playerIndex >= auto27F3DF11_ae) ) ; lv_playerIndex += auto27F3DF11_ai ) {
        if ((PlayerStatus(lv_playerIndex) != c_playerStatusUnused) && (libGame_gv_players[lv_playerIndex].lv_heroIndex != 0)) {
            PlayerSetHero(lv_playerIndex, libCore_gf_GetHeroFromIndex(libGame_gv_players[lv_playerIndex].lv_heroIndex));
        }

    }
}

void libGame_gf_ChoGallSkinSelection (int lp_choPlayerID) {
    playergroup autoA94CBDD9_g;
    int autoA94CBDD9_p;

    // Variable Declarations
    int lv_itPlayer;
    int lv_gallPlayerID;
    int lv_randomNumber;
    string lv_choSelectedSkin;
    string lv_gallSelectedSkin;
    int lv_choSelectedSkinIndex;
    int lv_gallSelectedSkinIndex;

    // Variable Initialization

    // Implementation
    if ((PlayerHero(lp_choPlayerID) == "Gall")) {
        return ;
    }

    autoA94CBDD9_g = libGame_gf_AlliedPlayerGroupOfPlayer(lp_choPlayerID); 
    autoA94CBDD9_p = 1;
    for ( ; autoA94CBDD9_p <= PlayerGroupCount(autoA94CBDD9_g) ; autoA94CBDD9_p += (lv_itPlayer == PlayerGroupPlayer(autoA94CBDD9_g, autoA94CBDD9_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoA94CBDD9_g, autoA94CBDD9_p);
        if ((PlayerHero(lv_itPlayer) == "Gall")) {
            lv_gallPlayerID = lv_itPlayer;
            break;
        }

    }
    if ((lv_gallPlayerID == 0)) {
        return ;
    }

    lv_choSelectedSkin = PlayerSkin(lp_choPlayerID);
    lv_gallSelectedSkin = PlayerSkin(lv_gallPlayerID);
    lv_choSelectedSkinIndex = libCore_gf_DataSkinsGetSkinIndexFromSkinLink(lv_choSelectedSkin);
    lv_gallSelectedSkinIndex = libCore_gf_DataSkinsGetSkinIndexFromSkinLink(lv_gallSelectedSkin);
    if ((PlayerSkin(lv_gallPlayerID) == "")) {
        if ((PlayerSkin(lp_choPlayerID) == "")) {
            lv_randomNumber = RandomInt(0, 1);
            if ((lv_randomNumber == 1)) {
                libGame_gf_ChoGallMountSelection(lv_gallPlayerID, lp_choPlayerID);
            }
            else {
                libGame_gf_ChoGallMountSelection(lp_choPlayerID, lv_gallPlayerID);
            }
        }
        else {
            libGame_gv_players[lp_choPlayerID].lv_selectedSkin = lv_choSelectedSkinIndex;
            libGame_gv_players[lv_gallPlayerID].lv_selectedSkin = lv_choSelectedSkinIndex;
            PlayerSetSkin(lv_gallPlayerID, libGame_gv_players[lv_gallPlayerID].lv_skinData.lv_skinID);
            libGame_gf_ChoGallMountSelection(lp_choPlayerID, lv_gallPlayerID);
        }
    }
    else {
        if ((PlayerSkin(lp_choPlayerID) == "")) {
            libGame_gv_players[lp_choPlayerID].lv_selectedSkin = lv_gallSelectedSkinIndex;
            libGame_gf_ChoGallMountSelection(lv_gallPlayerID, lp_choPlayerID);
        }
        else {
            lv_randomNumber = RandomInt(0, 1);
            if ((lv_randomNumber == 1)) {
                libGame_gv_players[lp_choPlayerID].lv_selectedSkin = lv_gallSelectedSkinIndex;
                libGame_gf_ChoGallMountSelection(lv_gallPlayerID, lp_choPlayerID);
            }
            else {
                libGame_gv_players[lp_choPlayerID].lv_selectedSkin = lv_choSelectedSkinIndex;
                libGame_gv_players[lv_gallPlayerID].lv_selectedSkin = lv_choSelectedSkinIndex;
                PlayerSetSkin(lv_gallPlayerID, libGame_gv_players[lv_gallPlayerID].lv_skinData.lv_skinID);
                libGame_gf_ChoGallMountSelection(lp_choPlayerID, lv_gallPlayerID);
            }
        }
    }
    libCore_gf_DataLoadSkinDataIntoIndex(libCore_gf_DataSkinsGetSkinLinkFromSkinCatalogIndex(libGame_gv_players[lp_choPlayerID].lv_selectedSkin), lp_choPlayerID);
    libCore_gf_DataLoadSkinDataIntoIndex(libCore_gf_DataSkinsGetSkinLinkFromSkinCatalogIndex(libGame_gv_players[lv_gallPlayerID].lv_selectedSkin), lv_gallPlayerID);
}

void libGame_gf_ChoGallMountSelection (int lp_skinSelectedPlayer, int lp_mountSelectedPlayer) {
    // Variable Declarations
    string lv_selectedMountLink;
    int lv_choPlayerID;
    int lv_mountSelectedHeroIndex;

    // Variable Initialization

    // Implementation
    lv_mountSelectedHeroIndex = lp_mountSelectedPlayer;
    if ((PlayerHero(lp_skinSelectedPlayer) == "Cho")) {
        lv_choPlayerID = lp_skinSelectedPlayer;
    }
    else {
        lv_choPlayerID = lp_mountSelectedPlayer;
    }
    if ((PlayerMount(lp_mountSelectedPlayer) == libGame_gv_players[lv_mountSelectedHeroIndex].lv_heroData.lv_defaultMount)) {
        lv_selectedMountLink = PlayerMount(lp_skinSelectedPlayer);
        libCore_gf_DataMountsLoadMountDataIntoIndex(lv_selectedMountLink, libCore_gf_DataMountGetMountModelScaleAtConfigIndex(libCore_gf_DataMountGetMountConfigIndexFromMountLink(lv_selectedMountLink)), libCore_gf_DataMountGetMountWalkAnimSpeedAtConfigIndex(libCore_gf_DataMountGetMountConfigIndexFromMountLink(lv_selectedMountLink)), libCore_gf_DataMountGetMountPoseAnimGroupAtConfigIndex(libCore_gf_DataMountGetMountConfigIndexFromMountLink(lv_selectedMountLink)), lv_choPlayerID);
    }
    else {
        lv_selectedMountLink = PlayerMount(lp_mountSelectedPlayer);
        libCore_gf_DataMountsLoadMountDataIntoIndex(lv_selectedMountLink, libCore_gf_DataMountGetMountModelScaleAtConfigIndex(libCore_gf_DataMountGetMountConfigIndexFromMountLink(lv_selectedMountLink)), libCore_gf_DataMountGetMountWalkAnimSpeedAtConfigIndex(libCore_gf_DataMountGetMountConfigIndexFromMountLink(lv_selectedMountLink)), libCore_gf_DataMountGetMountPoseAnimGroupAtConfigIndex(libCore_gf_DataMountGetMountConfigIndexFromMountLink(lv_selectedMountLink)), lv_choPlayerID);
    }
    libGame_gv_players[lv_choPlayerID].lv_selectedMount = libCore_gf_DataMountGetMountIndexFromMountLink(lv_selectedMountLink);
    PlayerSetMount(lv_choPlayerID, libGame_gv_players[lv_choPlayerID].lv_mountData.lv_mountID);
}

void libGame_gf_GameOver (int lp_winningTeam) {
    playergroup auto06C7D5AE_g;
    int auto06C7D5AE_p;
    playergroup auto0404A1D9_g;
    int auto0404A1D9_p;
    playergroup auto58EC5D3D_g;
    int auto58EC5D3D_p;
    playergroup auto36E85141_g;
    int auto36E85141_p;
    playergroup auto75136350_g;
    int auto75136350_p;

    // Variable Declarations
    int lv_itPlayer;
    int lv_losingTeam;
    const fixed lv_endGameTimeDelay = 7.0;

    // Variable Initialization

    // Implementation
    libGame_gf_SendEventGameOverEvent();
    if ((lp_winningTeam == 0)) {
        auto06C7D5AE_g = libCore_gv_activeHumanPlayers; 
        auto06C7D5AE_p = 1;
        for ( ; auto06C7D5AE_p <= PlayerGroupCount(auto06C7D5AE_g) ; auto06C7D5AE_p += (lv_itPlayer == PlayerGroupPlayer(auto06C7D5AE_g, auto06C7D5AE_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto06C7D5AE_g, auto06C7D5AE_p);
            if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
                CameraLockInput(lv_itPlayer, true);
                libGame_gv_players[lv_itPlayer].lv_victoryDefeat = c_gameOverDefeat;
            }

        }
    }
    else {
        lv_losingTeam = (3 - lp_winningTeam);
        auto0404A1D9_g = libGame_gf_PlayersOnTeamHeroes(lp_winningTeam, false); 
        auto0404A1D9_p = 1;
        for ( ; auto0404A1D9_p <= PlayerGroupCount(auto0404A1D9_g) ; auto0404A1D9_p += (lv_itPlayer == PlayerGroupPlayer(auto0404A1D9_g, auto0404A1D9_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto0404A1D9_g, auto0404A1D9_p);
            if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
                CameraLockInput(lv_itPlayer, true);
                libGame_gv_players[lv_itPlayer].lv_victoryDefeat = c_gameOverVictory;
            }

        }
        auto58EC5D3D_g = libGame_gf_PlayersOnTeamHeroes(lv_losingTeam, false); 
        auto58EC5D3D_p = 1;
        for ( ; auto58EC5D3D_p <= PlayerGroupCount(auto58EC5D3D_g) ; auto58EC5D3D_p += (lv_itPlayer == PlayerGroupPlayer(auto58EC5D3D_g, auto58EC5D3D_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto58EC5D3D_g, auto58EC5D3D_p);
            if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
                CameraLockInput(lv_itPlayer, true);
                libGame_gv_players[lv_itPlayer].lv_victoryDefeat = c_gameOverDefeat;
            }

        }
    }
    TriggerEnable(libGame_gt_XPTrickle, false);
    libSprt_gf_DataMiningSendEndOfGameDigests(lp_winningTeam);
    auto36E85141_g = libCore_gv_activeHumanPlayers; 
    auto36E85141_p = 1;
    for ( ; auto36E85141_p <= PlayerGroupCount(auto36E85141_g) ; auto36E85141_p += (lv_itPlayer == PlayerGroupPlayer(auto36E85141_g, auto36E85141_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto36E85141_g, auto36E85141_p);
        libUIUI_gf_UITargetInfoPanelClearTargetForPlayer(lv_itPlayer);
        libUIUI_gf_UIHeroConsoleShowHideForPlayer(false, lv_itPlayer);
        UISetMode(libCore_gv_playerGroupFromPlayer[lv_itPlayer], c_uiModeFullscreen, c_transitionDurationImmediate);
        DialogControlSetVisible(libUIUI_gv_uIGameUIHandles.lv_talentsButton, libCore_gv_playerGroupFromPlayer[lv_itPlayer], false);
        UISetFrameVisible(libCore_gv_playerGroupFromPlayer[lv_itPlayer], c_syncFrameTypeMinimapPanel, false);
        libUIUI_gf_UIHeroTrackerArrowShowHideForPlayer(false, lv_itPlayer);
        libUIUI_gf_UIGameUIShowHideConsolePanelForPlayer(false, lv_itPlayer);
        libUIUI_gf_TopBarPanelShowHideForPlayer(false, lv_itPlayer);
        libUIUI_gf_DeathTimerPanelShowHideTeamsPanelForPlayer(false, libGame_gv_teamOrderIndex_C, lv_itPlayer);
        libUIUI_gf_DeathTimerPanelShowHideTeamsPanelForPlayer(false, libGame_gv_teamChaosIndex_C, lv_itPlayer);
        TextExpressionSetToken("Param/Expression/lib_Game_61C8E508", "C", IntToText(libGame_gf_TeamNumberOfPlayer(lv_itPlayer)));
        TextExpressionSetToken("Param/Expression/lib_Game_61C8E508", "A", UnitTypeGetName(UnitGetType(libGame_gv_players[lv_itPlayer].lv_heroUnit)));
        TextExpressionSetToken("Param/Expression/lib_Game_61C8E508", "B", IntToText(libGame_gv_scoreValues[lv_itPlayer].lv_damageTaken));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_61C8E508"), false);
    }
    libUIUI_gf_UITargetInfoPanelEnableDisable(false);
    DialogControlSetVisible(libUIUI_gv_uIObserverUI.lv_mainPanel, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    DialogControlHookupStandard(c_triggerControlTypePanel, "UIContainer/ConsoleUIContainer");
    DialogControlSetVisible(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    if ((libGame_gv_gameOverCallback != null)) {
        TriggerExecute(libGame_gv_gameOverCallback, true, true);
    }

    libUIUI_gf_GameOverSplashDisplayForAllPlayers(lp_winningTeam);
    UISetFrameVisible(PlayerGroupAll(), c_syncFrameTypeStatusUI, false);
    if ((libGame_gv_endofMatchAwardsDisabled == true)) {
        Wait(lv_endGameTimeDelay, c_timeGame);
    }

    if ((libCore_gv_sYSGameMode != libCore_ge_GameModes_ArenaMode)) {
        auto75136350_g = PlayerGroupAll(); 
        auto75136350_p = 1;
        for ( ; auto75136350_p <= PlayerGroupCount(auto75136350_g) ; auto75136350_p += (lv_itPlayer == PlayerGroupPlayer(auto75136350_g, auto75136350_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto75136350_g, auto75136350_p);
            if ((lv_itPlayer > 0) && (lv_itPlayer <= libCore_gv_bALMaxPlayers) && (PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
                libGame_gf_EndGameForPlayerStorm(lv_itPlayer);
            }

        }
    }

    GameSetReplayKeyframesEnabled(false);
    if (((libCore_gv_sYSGameMode == libCore_ge_GameModes_TutorialVeteran) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_Sandbox) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_Test))) {
        Wait(10.0, c_timeGame);
    }
    else {
        libGame_gf_AssignMVP(lp_winningTeam);
    }
    KickFromGame(PlayerGroupAll());
}

trigger auto_libGame_gf_PlayGameOverStinger_Trigger = null;
int auto_libGame_gf_PlayGameOverStinger_lp_winningTeam;

void libGame_gf_PlayGameOverStinger (int lp_winningTeam) {
    auto_libGame_gf_PlayGameOverStinger_lp_winningTeam = lp_winningTeam;

    if (auto_libGame_gf_PlayGameOverStinger_Trigger == null) {
        auto_libGame_gf_PlayGameOverStinger_Trigger = TriggerCreate("auto_libGame_gf_PlayGameOverStinger_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_PlayGameOverStinger_Trigger, false, false);
}

bool auto_libGame_gf_PlayGameOverStinger_TriggerFunc (bool testConds, bool runActions) {
    int lp_winningTeam = auto_libGame_gf_PlayGameOverStinger_lp_winningTeam;

    // Implementation
    Wait(2.17, c_timeGame);
    libSond_gf_SoundtrackSetUniqueSoundtrackState(false);
    if ((lp_winningTeam == 0)) {
        libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_Stinger_Defeat", libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup);
        libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_Stinger_Defeat", libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup);
    }
    else {
        libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_Stinger_Victory", libGame_gv_teams[lp_winningTeam].lv_teamPlayerGroup);
        libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_Stinger_Defeat", libGame_gv_teams[libGame_gf_EnemyTeam(lp_winningTeam)].lv_teamPlayerGroup);
    }
    return true;
}

trigger auto_libGame_gf_PlayVictoryDefeatVO_Trigger = null;
int auto_libGame_gf_PlayVictoryDefeatVO_lp_winningTeam;

void libGame_gf_PlayVictoryDefeatVO (int lp_winningTeam) {
    auto_libGame_gf_PlayVictoryDefeatVO_lp_winningTeam = lp_winningTeam;

    if (auto_libGame_gf_PlayVictoryDefeatVO_Trigger == null) {
        auto_libGame_gf_PlayVictoryDefeatVO_Trigger = TriggerCreate("auto_libGame_gf_PlayVictoryDefeatVO_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_PlayVictoryDefeatVO_Trigger, false, false);
}

bool auto_libGame_gf_PlayVictoryDefeatVO_TriggerFunc (bool testConds, bool runActions) {
    int lp_winningTeam = auto_libGame_gf_PlayVictoryDefeatVO_lp_winningTeam;

    int autoE22AD869_val;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    Wait(0.52, c_timeGame);
    libGame_gv_announcement_SystemEnabled = true;
    autoE22AD869_val = lp_winningTeam;
    if (autoE22AD869_val == 0) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Defeat, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Defeat, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
    }
    else if (autoE22AD869_val == libGame_gv_teamOrderIndex_C) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Victory, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Defeat, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_BlueTeamWins, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
    }
    else if (autoE22AD869_val == libGame_gv_teamChaosIndex_C) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Defeat, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Victory, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_RedTeamWins, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
    }
    else {
    }
    libGame_gv_announcement_SystemEnabled = false;
    return true;
}

void libGame_gf_TogglePercentScaling (bool lp_enabled) {
    // Implementation
    libGame_gv_dEBUG_PercentScalingEnabled = lp_enabled;
}

void libGame_gf_ApplyAbilityModificationsForPlayerAtTalent (int lp_player, int lp_tierIndex, int lp_buttonIndex) {
    int autoD91FE29A_ae;
    int autoD91FE29A_ai;

    // Variable Declarations
    int lv_itAbilityMod;
    int lv_catalog;
    string lv_entry;
    string lv_field;
    fixed lv_baseValue;
    fixed lv_newValue;
    string lv_offsetString;
    string lv_xOffset;
    string lv_yOffset;
    string lv_zOffset;
    fixed lv_yOffsetReal;
    string lv_replaceFrom;
    string lv_changeTo;

    // Variable Initialization
    lv_catalog = c_gameCatalogUnit;
    lv_entry = "";
    lv_field = "";
    lv_offsetString = "";
    lv_xOffset = "";
    lv_yOffset = "";
    lv_zOffset = "";
    lv_replaceFrom = "";
    lv_changeTo = "";

    // Implementation
    autoD91FE29A_ae = libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_totalModifications;
    autoD91FE29A_ai = 1;
    lv_itAbilityMod = 1;
    for ( ; ( (autoD91FE29A_ai >= 0 && lv_itAbilityMod <= autoD91FE29A_ae) || (autoD91FE29A_ai <= 0 && lv_itAbilityMod >= autoD91FE29A_ae) ) ; lv_itAbilityMod += autoD91FE29A_ai ) {
        lv_catalog = libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_catalog;
        lv_entry = libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_entry;
        lv_field = libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_field;
        if ((libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_changeType == c_talentModificationFlatModification )) {
            if (((lv_field == "InitialOffset") || (lv_field == "ExpireOffset") || (lv_field == "FinalOffset") || (lv_field == "PeriodicOffsetArray[0]") || (lv_field == "PeriodicOffsetArray[1]"))) {
                lv_offsetString = CatalogFieldValueGet(lv_catalog, lv_entry, lv_field, lp_player);
                lv_offsetString = StringReplaceWord(lv_offsetString, ",", " ", c_stringReplaceAll, c_stringCase);
                lv_xOffset = StringWord(lv_offsetString, 1);
                lv_yOffset = StringWord(lv_offsetString, 2);
                lv_zOffset = StringWord(lv_offsetString, 3);
                lv_yOffsetReal = StringToFixed(lv_yOffset);
                lv_yOffsetReal += libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_value;
                lv_yOffset = FixedToString(lv_yOffsetReal, 2);
                lv_offsetString = (lv_xOffset + "," + lv_yOffset + "," + lv_zOffset);
                CatalogFieldValueSet(lv_catalog, lv_entry, lv_field, lp_player, lv_offsetString);
            }
            else {
                lv_baseValue = StringToFixed(CatalogFieldValueGet(lv_catalog, lv_entry, lv_field, lp_player));
                lv_newValue = (lv_baseValue + libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_value);
                if ((libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_fieldIsInteger == true)) {
                    CatalogFieldValueModify(lv_catalog, lv_entry, lv_field, lp_player, IntToString(FixedToInt(lv_newValue)), c_upgradeOperationSet);
                }
                else {
                    CatalogFieldValueModify(lv_catalog, lv_entry, lv_field, lp_player, FixedToString(lv_newValue, 4), c_upgradeOperationSet);
                }
            }
        }

        if ((libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_changeType == c_talentModificationMultiplyLevelModification)) {
            lv_baseValue = StringToFixed(CatalogFieldValueGet(lv_catalog, lv_entry, lv_field, lp_player));
            lv_newValue = (lv_baseValue * libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_value);
            if ((libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_fieldIsInteger == true)) {
                CatalogFieldValueModify(lv_catalog, lv_entry, lv_field, lp_player, IntToString(FixedToInt(lv_newValue)), c_upgradeOperationSet);
            }
            else {
                CatalogFieldValueModify(lv_catalog, lv_entry, lv_field, lp_player, FixedToString(lv_newValue, 4), c_upgradeOperationSet);
            }
        }

        if ((libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_changeType == c_talentModificationStringReplacement) && (lv_catalog != c_gameCatalogButton)) {
            CatalogFieldValueSet(lv_catalog, lv_entry, lv_field, lp_player, libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_stringReplacementValue);
        }

        if ((libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_changeType == c_talentModificationCatalogReplacement)) {
            lv_replaceFrom = libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_catalogReplaceFrom;
            lv_changeTo = libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_catalogChangeTo;
            CatalogLinkReplace(lp_player, lv_catalog, lv_replaceFrom, lv_changeTo);
        }

    }
}

void libGame_gf_RemoveTalentAbilityModificationsForPlayerAtTalent (int lp_player, int lp_tierIndex, int lp_buttonIndex) {
    int auto1EF455F2_ae;
    int auto1EF455F2_ai;

    // Variable Declarations
    int lv_itAbilityMod;
    int lv_catalog;
    string lv_entry;
    string lv_field;
    string lv_replaceFrom;

    // Variable Initialization
    lv_catalog = c_gameCatalogUnit;
    lv_entry = "";
    lv_field = "";
    lv_replaceFrom = "";

    // Implementation
    auto1EF455F2_ae = libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_totalModifications;
    auto1EF455F2_ai = 1;
    lv_itAbilityMod = 1;
    for ( ; ( (auto1EF455F2_ai >= 0 && lv_itAbilityMod <= auto1EF455F2_ae) || (auto1EF455F2_ai <= 0 && lv_itAbilityMod >= auto1EF455F2_ae) ) ; lv_itAbilityMod += auto1EF455F2_ai ) {
        lv_catalog = libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_catalog;
        if (((libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_changeType == c_talentModificationFlatModification ) || (libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_changeType == c_talentModificationMultiplyLevelModification) || (libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_changeType == c_talentModificationStringReplacement))) {
            lv_entry = libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_entry;
            lv_field = libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_field;
            CatalogFieldValueSet(lv_catalog, lv_entry, lv_field, lp_player, CatalogFieldValueGet(lv_catalog, lv_entry, lv_field, 0));
        }

        if ((libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_changeType == c_talentModificationCatalogReplacement)) {
            lv_replaceFrom = libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_catalogReplaceFrom;
            CatalogLinkReplace(lp_player, lv_catalog, lv_replaceFrom, lv_replaceFrom);
        }

    }
    PlayerApplySkin(lp_player, PlayerSkin(lp_player), true);
}

void libGame_gf_ApplyLevelUpHeroStatsForHeroSingleLevel (unit lp_hero) {
    int auto45B2F0EE_ae;
    int auto45B2F0EE_ai;
    int auto202C7AA9_ae;
    int auto202C7AA9_ai;

    // Variable Declarations
    int lv_abilityindex;
    int lv_changeindex;
    int lv_player;
    int lv_heroIndex;
    int lv_catalog;
    string lv_entry;
    string lv_field;
    fixed lv_newValue;
    string lv_offsetString;
    string lv_xOffset;
    string lv_yOffset;
    string lv_zOffset;
    fixed lv_yOffsetReal;

    // Variable Initialization
    lv_catalog = c_gameCatalogUnit;
    lv_entry = "";
    lv_field = "";
    lv_offsetString = "";
    lv_xOffset = "";
    lv_yOffset = "";
    lv_zOffset = "";

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    if ((lp_hero != libGame_gv_players[lv_player].lv_heroUnit) && (lp_hero != libGame_gv_players[lv_player].lv_activeVehicle)) {
        return ;
    }

    lv_heroIndex = libCore_gf_GetHeroIndexForUnitType(UnitGetType(lp_hero));
    auto45B2F0EE_ae = libGame_gv_players[lv_heroIndex].lv_heroData.lv_levelUpAbilitiesCount;
    auto45B2F0EE_ai = 1;
    lv_abilityindex = 0;
    for ( ; ( (auto45B2F0EE_ai >= 0 && lv_abilityindex <= auto45B2F0EE_ae) || (auto45B2F0EE_ai <= 0 && lv_abilityindex >= auto45B2F0EE_ae) ) ; lv_abilityindex += auto45B2F0EE_ai ) {
        auto202C7AA9_ae = libGame_gv_players[lv_heroIndex].lv_heroData.lv_levelUpModificationData.lv_numberOfFieldChanges[lv_abilityindex];
        auto202C7AA9_ai = 1;
        lv_changeindex = 1;
        for ( ; ( (auto202C7AA9_ai >= 0 && lv_changeindex <= auto202C7AA9_ae) || (auto202C7AA9_ai <= 0 && lv_changeindex >= auto202C7AA9_ae) ) ; lv_changeindex += auto202C7AA9_ai ) {
            lv_catalog = libGame_gv_players[lv_heroIndex].lv_heroData.lv_levelUpModificationData.lv_catalog[lv_abilityindex][lv_changeindex];
            lv_entry = libGame_gv_players[lv_heroIndex].lv_heroData.lv_levelUpModificationData.lv_entry[lv_abilityindex][lv_changeindex];
            lv_field = libGame_gv_players[lv_heroIndex].lv_heroData.lv_levelUpModificationData.lv_field[lv_abilityindex][lv_changeindex];
            if (((lv_field == "InitialOffset") || (lv_field == "ExpireOffset") || (lv_field == "FinalOffset") || (lv_field == "PeriodicOffsetArray[0]"))) {
                lv_offsetString = CatalogFieldValueGet(lv_catalog, lv_entry, lv_field, lv_player);
                lv_offsetString = StringReplaceWord(lv_offsetString, ",", " ", c_stringReplaceAll, c_stringCase);
                lv_xOffset = StringWord(lv_offsetString, 1);
                lv_yOffset = StringWord(lv_offsetString, 2);
                lv_zOffset = StringWord(lv_offsetString, 3);
                lv_yOffsetReal = StringToFixed(lv_yOffset);
                lv_yOffsetReal += libGame_gv_players[lv_heroIndex].lv_heroData.lv_levelUpModificationData.lv_valueAddedPerLevel[lv_abilityindex][lv_changeindex];
                lv_yOffset = FixedToString(lv_yOffsetReal, 2);
                lv_offsetString = (lv_xOffset + "," + lv_yOffset + "," + lv_zOffset);
                CatalogFieldValueSet(lv_catalog, lv_entry, lv_field, lv_player, lv_offsetString);
            }
            else {
                if ((libGame_gv_dEBUG_PercentScalingEnabled == true) && (libGame_gv_players[lv_heroIndex].lv_heroData.lv_levelUpModificationData.lv_percentScaled[lv_abilityindex][lv_changeindex] == true)) {
                    lv_newValue = (StringToFixed(CatalogFieldValueGet(lv_catalog, lv_entry, lv_field, lv_player)) * libGame_gv_players[lv_heroIndex].lv_heroData.lv_levelUpModificationData.lv_valueAddedPerLevel[lv_abilityindex][lv_changeindex]);
                    if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_levelUpModificationData.lv_valueAddedPerLevel[lv_abilityindex][lv_changeindex] > 1.0)) {
                        TextExpressionSetToken("Param/Expression/lib_Game_9A5E6159", "A", StringToText(lv_entry));
                        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_9A5E6159"), true);
                        lv_newValue = 0.0;
                    }

                }
                else {
                    lv_newValue = libGame_gv_players[lv_heroIndex].lv_heroData.lv_levelUpModificationData.lv_valueAddedPerLevel[lv_abilityindex][lv_changeindex];
                }
                if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_levelUpModificationData.lv_fieldIsInteger[lv_abilityindex][lv_changeindex] == true)) {
                    CatalogFieldValueModify(lv_catalog, lv_entry, lv_field, lv_player, IntToString(FixedToInt(lv_newValue)), c_upgradeOperationAdd);
                }
                else {
                    CatalogFieldValueModify(lv_catalog, lv_entry, lv_field, lv_player, FixedToString(lv_newValue, 2), c_upgradeOperationAdd);
                }
            }
        }
    }
    libUIUI_gf_UIUpdateEventPlayerStatsChange(lv_player);
}

void libGame_gf_RemoveLevelUpHeroStatsForPlayer (string lp_heroUnitType, int lp_player) {
    int autoCE4C1B3C_ae;
    int autoCE4C1B3C_ai;
    int auto14530F63_ae;
    int auto14530F63_ai;

    // Variable Declarations
    int lv_itAbilityMod;
    int lv_itAbilityModChange;
    int lv_heroIndex;
    int lv_catalog;
    string lv_entry;
    string lv_field;

    // Variable Initialization
    lv_catalog = c_gameCatalogUnit;
    lv_entry = "";
    lv_field = "";

    // Implementation
    lv_heroIndex = libCore_gf_GetHeroIndexForUnitType(lp_heroUnitType);
    autoCE4C1B3C_ae = libGame_gv_players[lv_heroIndex].lv_heroData.lv_levelUpAbilitiesCount;
    autoCE4C1B3C_ai = 1;
    lv_itAbilityMod = 0;
    for ( ; ( (autoCE4C1B3C_ai >= 0 && lv_itAbilityMod <= autoCE4C1B3C_ae) || (autoCE4C1B3C_ai <= 0 && lv_itAbilityMod >= autoCE4C1B3C_ae) ) ; lv_itAbilityMod += autoCE4C1B3C_ai ) {
        auto14530F63_ae = libGame_gv_players[lv_heroIndex].lv_heroData.lv_levelUpModificationData.lv_numberOfFieldChanges[lv_itAbilityMod];
        auto14530F63_ai = 1;
        lv_itAbilityModChange = 1;
        for ( ; ( (auto14530F63_ai >= 0 && lv_itAbilityModChange <= auto14530F63_ae) || (auto14530F63_ai <= 0 && lv_itAbilityModChange >= auto14530F63_ae) ) ; lv_itAbilityModChange += auto14530F63_ai ) {
            lv_catalog = libGame_gv_players[lv_heroIndex].lv_heroData.lv_levelUpModificationData.lv_catalog[lv_itAbilityMod][lv_itAbilityModChange];
            lv_entry = libGame_gv_players[lv_heroIndex].lv_heroData.lv_levelUpModificationData.lv_entry[lv_itAbilityMod][lv_itAbilityModChange];
            lv_field = libGame_gv_players[lv_heroIndex].lv_heroData.lv_levelUpModificationData.lv_field[lv_itAbilityMod][lv_itAbilityModChange];
            CatalogFieldValueSet(lv_catalog, lv_entry, lv_field, lp_player, CatalogFieldValueGet(lv_catalog, lv_entry, lv_field, 0));
        }
    }
}

void libGame_gf_UpdateHeroStatsSpecialCasesForHero (unit lp_hero) {
    string auto86BCAEA2_val;

    // Variable Declarations
    int lv_abilityindex;
    int lv_changeindex;
    int lv_player;
    int lv_heroLevel;
    int lv_heroIndex;
    fixed lv_currentDamageAmount;
    fixed lv_abilityPowerMultiplier;
    fixed lv_healingPowerMultiplier;
    fixed lv_valueMultiplier;
    int lv_catalog;
    string lv_entry;
    string lv_field;
    fixed lv_baseValue;
    fixed lv_newValue;
    int lv_hPPercent;
    string lv_offsetString;
    string lv_xOffset;
    string lv_yOffset;
    string lv_zOffset;
    fixed lv_yOffsetReal;
    fixed lv_currentShieldAmount;

    // Variable Initialization
    lv_abilityPowerMultiplier = 1.0;
    lv_healingPowerMultiplier = 1.0;
    lv_catalog = c_gameCatalogUnit;
    lv_entry = "";
    lv_field = "";
    lv_offsetString = "";
    lv_xOffset = "";
    lv_yOffset = "";
    lv_zOffset = "";

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    if (((lv_player > libCore_gv_bALMaxPlayers) || (lv_player < 1))) {
        return ;
    }

    auto86BCAEA2_val = UnitGetType(lp_hero);
    if (auto86BCAEA2_val == "HeroTassadar") {
    }
    else {
    }
}

void libGame_gf_UpdateHeroWeaponStats (unit lp_hero) {
    string autoFD806D5D_val;

    // Variable Declarations
    int lv_player;
    int lv_heroLevel;
    int lv_heroIndex;

    // Variable Initialization

    // Implementation
    lv_player = UnitGetOwner(lp_hero);
    if (((lv_player < 1) || (lv_player > libCore_gv_bALMaxPlayers))) {
        return ;
    }

    lv_heroLevel = UnitLevel(lp_hero);
    lv_heroIndex = libGame_gv_players[lv_player].lv_heroIndex;
    autoFD806D5D_val = UnitGetType(lp_hero);
    if (autoFD806D5D_val == "HeroLiLi") {
        PlayerScoreValueSetFromInt(lv_player, "LiLiCloudSerpentDamageCorrected", FixedToInt((libCore_gf_GetWeaponDamageForUnit(lp_hero) * StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "CloudSerpentMinionBehavior", "DamageResponse.ModifyFraction", 0)))));
    }
    else if (autoFD806D5D_val == "HeroTychus") {
        PlayerScoreValueSetFromInt(lv_player, "TychusOverkillTargetedDamageCorrected", FixedToInt(((libCore_gf_GetWeaponDamageForUnit(lp_hero) * (1.0 + StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "OverkillTargetedDamage", "AttributeFactor[" + IntToString(0) + "]", 0)))) * (StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "TychusOverkillTargetedActive", "Duration", 0)) / StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "OverkillTargetedCreatePersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", 0))))));
    }
    else {
    }
}

void libGame_gf_UpdateHeroManaCosts (unit lp_unit) {
    int autoB4FFC150_ae;
    int autoB4FFC150_ai;

    // Variable Declarations
    int lv_itAbility;
    int lv_player;
    unit lv_hero;
    int lv_heroIndex;
    fixed lv_flatModifier;
    fixed lv_percentageModifier;
    string lv_entry;
    fixed lv_baseValue;
    fixed lv_baseMultiplierValue;
    fixed lv_newValue;

    // Variable Initialization
    lv_percentageModifier = 1.0;
    lv_entry = "";

    // Implementation
    lv_player = UnitGetOwner(lp_unit);
    if (((lv_player == 0) || (lv_player > libCore_gv_bALMaxPlayers))) {
        return ;
    }

    lv_hero = libGame_gv_players[lv_player].lv_heroUnit;
    lv_heroIndex = libGame_gv_players[lv_player].lv_heroIndex;
    if ((UnitBehaviorCount(lv_hero, "BucketOverdrive") == 1)) {
        lv_percentageModifier += libCore_gv_talents_BucketOverdriveManaCostIncreasePercent_C;
    }

    if ((UnitBehaviorCount(lv_hero, "0ManaCostBuff") == 1)) {
        lv_percentageModifier -= libCore_gv_talents_0ManaCostBuffMod_C;
    }

    autoB4FFC150_ae = libGame_gv_players[lv_heroIndex].lv_heroData.lv_numberOfAbilities;
    autoB4FFC150_ai = 1;
    lv_itAbility = 1;
    for ( ; ( (autoB4FFC150_ai >= 0 && lv_itAbility <= autoB4FFC150_ae) || (autoB4FFC150_ai <= 0 && lv_itAbility >= autoB4FFC150_ae) ) ; lv_itAbility += autoB4FFC150_ai ) {
        if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_isAffectedByOverdrive == true) && (libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_ability != null)) {
            if ((UnitBehaviorCount(lv_hero, "BucketOverdrive") == 1) && (UnitGetType(lv_hero) == "HeroKerrigan") && (PlayerHasTalent(lv_player, "KerriganMasteryPrimalGraspEnergizingGrasp") == true) && (libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_ability == "KerriganPrimalGrasp")) {
                CatalogFieldValueSet(c_gameCatalogAbil, "KerriganPrimalGrasp", "Cost[0].Vital[Energy]", lv_player, "21");
            }
            else {
                if ((UnitBehaviorCount(lv_hero, "BucketOverdrive") == 0) && (UnitGetType(lv_hero) == "HeroKerrigan") && (PlayerHasTalent(lv_player, "KerriganMasteryPrimalGraspEnergizingGrasp") == true) && (libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_ability == "KerriganPrimalGrasp")) {
                    CatalogFieldValueSet(c_gameCatalogAbil, "KerriganPrimalGrasp", "Cost[0].Vital[Energy]", lv_player, "15");
                }
                else {
                    lv_entry = (libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_ability);
                    lv_baseValue = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, lv_entry, "Cost[0].Vital[Energy]", 0));
                    lv_baseMultiplierValue = (lv_baseValue * lv_percentageModifier);
                    lv_newValue = (lv_baseMultiplierValue - lv_flatModifier);
                    if ((lv_newValue < 0.0)) {
                        lv_newValue = 0.0;
                    }

                    CatalogFieldValueSet(c_gameCatalogAbil, lv_entry, "Cost[0].Vital[Energy]", lv_player, FixedToString(lv_newValue, 2));
                }
            }
        }

    }
}

void libGame_gf_TurnDeathTimerCapOnOff (bool lp_onOff, fixed lp_cap) {
    int auto9D1290D1_ae;
    int auto9D1290D1_ai;

    // Variable Declarations
    int lv_itLevel;

    // Variable Initialization

    // Implementation
    if ((lp_onOff == true) && (lp_cap > 0.0)) {
        libCore_gv_sYSDeathTimerCap = lp_cap;
        auto9D1290D1_ae = libCore_gv_bALMaxLevel;
        auto9D1290D1_ai = 1;
        lv_itLevel = 1;
        for ( ; ( (auto9D1290D1_ai >= 0 && lv_itLevel <= auto9D1290D1_ae) || (auto9D1290D1_ai <= 0 && lv_itLevel >= auto9D1290D1_ae) ) ; lv_itLevel += auto9D1290D1_ai ) {
            libCore_gv_bALDeathTimes[lv_itLevel] = MinF(libCore_gv_bALDeathTimes[lv_itLevel], libCore_gv_sYSDeathTimerCap);
        }
        libCore_gv_bALMaxDeathTime = libCore_gv_bALDeathTimes[libCore_gv_bALMaxLevel];
    }
    else {
        libCore_gv_sYSDeathTimerCap = 0.0;
    }
}

trigger auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_Trigger = null;
unit auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_lp_deadHero;
int auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_lp_killingPlayer;

void libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE (unit lp_deadHero, int lp_killingPlayer) {
    auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_lp_deadHero = lp_deadHero;
    auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_lp_killingPlayer = lp_killingPlayer;

    if (auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_Trigger == null) {
        auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_Trigger = TriggerCreate("auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_Trigger, false, false);
}

bool auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_TriggerFunc (bool testConds, bool runActions) {
    unit lp_deadHero = auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_lp_deadHero;
    int lp_killingPlayer = auto_libGame_gf_HeroDeathUpdateStatsAwardXPMakeAnnouncementsCORE_lp_killingPlayer;

    playergroup autoDBD75236_g;
    int autoDBD75236_p;
    playergroup auto79D4F5E2_g;
    int auto79D4F5E2_p;

    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;
    int lv_deadPlayer;
    int lv_deadPlayerTeam;
    playergroup lv_killingTeamGroup;
    unitgroup lv_nearbyUnits;
    playergroup lv_awardGroup;
    playergroup lv_deadPlayerTeamGroup;
    playergroup lv_killingGroup;
    int lv_killingFaction;
    point lv_deadHeroPosition;

    // Variable Initialization
    lv_killingTeamGroup = PlayerGroupEmpty();
    lv_nearbyUnits = UnitGroupEmpty();
    lv_awardGroup = PlayerGroupEmpty();
    lv_deadPlayerTeamGroup = PlayerGroupEmpty();
    lv_killingGroup = PlayerGroupEmpty();

    // Deprecated
    StatEventSend(StatEventLastCreated());
    return true;
}

playergroup libGame_gf_HeroDeathGetKillingGroupFromKillingTeamGroupAndDeadUnit (playergroup lp_killingTeamGroup, int lp_killingPlayer, unit lp_deadHero) {
    unitgroup autoA1BBB25A_g;
    int autoA1BBB25A_u;
    playergroup auto2B5189AC_g;
    int auto2B5189AC_p;
    unitgroup autoF3785464_g;
    int autoF3785464_u;

    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;
    int lv_deadPlayer;
    unitgroup lv_nearbyUnits;
    playergroup lv_killingGroup;

    // Variable Initialization
    lv_nearbyUnits = UnitGroupEmpty();
    lv_killingGroup = PlayerGroupEmpty();

    // Implementation
    lv_deadPlayer = UnitGetOwner(lp_deadHero);
    if ((lp_killingPlayer > 0) && (lp_killingPlayer <= libCore_gv_bALMaxEnginePlayerCount)) {
        lv_nearbyUnits = UnitGroupSearch(null, lp_killingPlayer, UnitGetPosition(lp_deadHero), libCore_gv_bALHeroKillXPRadius, UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    }
    else {
        if ((lv_deadPlayer != libCore_gv_cOMPUTER_Hostile)) {
            lv_nearbyUnits = UnitGroupSearch(null, lv_deadPlayer, UnitGetPosition(lp_deadHero), libCore_gv_bALHeroKillXPRadius, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }

    }
    if ((UnitGetType(libGame_gv_players[lv_deadPlayer].lv_heroUnit) != "HeroLostVikingsController")) {
        auto2B5189AC_g = lp_killingTeamGroup; 
        auto2B5189AC_p = 1;
        for ( ; auto2B5189AC_p <= PlayerGroupCount(auto2B5189AC_g) ; auto2B5189AC_p += (lv_itPlayer == PlayerGroupPlayer(auto2B5189AC_g, auto2B5189AC_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto2B5189AC_g, auto2B5189AC_p);
            if ((lv_itPlayer != libCore_gv_cOMPUTER_TeamOrder) && (lv_itPlayer != libCore_gv_cOMPUTER_TeamChaos) && ((lv_itPlayer == lp_killingPlayer) || (libGame_gv_players[lv_deadPlayer].lv_recentPlayerDamageReceived[lv_itPlayer] > 0.0) || ((GameGetMissionTime() - libGame_gv_players[lv_deadPlayer].lv_lastTimeHeroWasWithinXPRadius[lv_itPlayer]) <= libCore_gv_bALHeroKillCreditTimeWindow))) {
                PlayerGroupAdd(lv_killingGroup, lv_itPlayer);
            }

        }
        autoF3785464_g = lv_nearbyUnits;
        autoF3785464_u = 1;
        for ( ; autoF3785464_u <= UnitGroupCount(autoF3785464_g, c_unitCountAll) ; autoF3785464_u += (lv_itUnit == UnitGroupUnit(autoF3785464_g, autoF3785464_u)) ) {
            lv_itUnit = UnitGroupUnit(autoF3785464_g, autoF3785464_u);
            if ((UnitHasBehavior2(lv_itUnit, "EarnsXP") == true)) {
                PlayerGroupAdd(lv_killingGroup, UnitGetOwner(lv_itUnit));
            }

        }
    }
    else {
        PlayerGroupAdd(lv_killingGroup, lp_killingPlayer);
        autoA1BBB25A_g = lv_nearbyUnits;
        autoA1BBB25A_u = 1;
        for ( ; autoA1BBB25A_u <= UnitGroupCount(autoA1BBB25A_g, c_unitCountAll) ; autoA1BBB25A_u += (lv_itUnit == UnitGroupUnit(autoA1BBB25A_g, autoA1BBB25A_u)) ) {
            lv_itUnit = UnitGroupUnit(autoA1BBB25A_g, autoA1BBB25A_u);
            if ((UnitHasBehavior2(lv_itUnit, "Dead") == false) && ((UnitFilterMatch(lv_itUnit, lv_deadPlayer, libCore_gv_filtersHeroicEnemy) == true) || (UnitHasBehavior2(lv_itUnit, "EarnsXP") == true))) {
                PlayerGroupAdd(lv_killingGroup, UnitGetOwner(lv_itUnit));
            }

        }
    }
    return lv_killingGroup;
}

trigger auto_libGame_gf_HeroDeathUpdateTeamStats_Trigger = null;
unit auto_libGame_gf_HeroDeathUpdateTeamStats_lp_deadHero;
int auto_libGame_gf_HeroDeathUpdateTeamStats_lp_killingFaction;

void libGame_gf_HeroDeathUpdateTeamStats (unit lp_deadHero, int lp_killingFaction) {
    auto_libGame_gf_HeroDeathUpdateTeamStats_lp_deadHero = lp_deadHero;
    auto_libGame_gf_HeroDeathUpdateTeamStats_lp_killingFaction = lp_killingFaction;

    if (auto_libGame_gf_HeroDeathUpdateTeamStats_Trigger == null) {
        auto_libGame_gf_HeroDeathUpdateTeamStats_Trigger = TriggerCreate("auto_libGame_gf_HeroDeathUpdateTeamStats_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_HeroDeathUpdateTeamStats_Trigger, false, false);
}

bool auto_libGame_gf_HeroDeathUpdateTeamStats_TriggerFunc (bool testConds, bool runActions) {
    unit lp_deadHero = auto_libGame_gf_HeroDeathUpdateTeamStats_lp_deadHero;
    int lp_killingFaction = auto_libGame_gf_HeroDeathUpdateTeamStats_lp_killingFaction;

    // Variable Declarations
    int lv_deadPlayer;

    // Variable Initialization

    // Implementation
    lv_deadPlayer = UnitGetOwner(lp_deadHero);
    if ((lp_killingFaction == libGame_ge_Faction_Chaos)) {
        libGame_gv_teams[2].lv_kills += 1;
        libGame_gv_teams[2].lv_multikillStreak += 1;
        TimerStart(libGame_gv_teams[2].lv_multikillTimer, libGame_gv_heroDeathMultikillTimeoutDuration, false, c_timeGame);
    }
    else {
        libGame_gv_teams[1].lv_kills += 1;
        libGame_gv_teams[1].lv_multikillStreak += 1;
        TimerStart(libGame_gv_teams[1].lv_multikillTimer, libGame_gv_heroDeathMultikillTimeoutDuration, false, c_timeGame);
    }
    return true;
}

trigger auto_libGame_gf_HeroDeathUpdatePlayerStats_Trigger = null;
unit auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_deadHero;
int auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingPlayer;
playergroup auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingTeamGroup;
playergroup auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingGroup;

void libGame_gf_HeroDeathUpdatePlayerStats (unit lp_deadHero, int lp_killingPlayer, playergroup lp_killingTeamGroup, playergroup lp_killingGroup) {
    auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_deadHero = lp_deadHero;
    auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingPlayer = lp_killingPlayer;
    auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingTeamGroup = lp_killingTeamGroup;
    auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingGroup = lp_killingGroup;

    if (auto_libGame_gf_HeroDeathUpdatePlayerStats_Trigger == null) {
        auto_libGame_gf_HeroDeathUpdatePlayerStats_Trigger = TriggerCreate("auto_libGame_gf_HeroDeathUpdatePlayerStats_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_HeroDeathUpdatePlayerStats_Trigger, false, false);
}

bool auto_libGame_gf_HeroDeathUpdatePlayerStats_TriggerFunc (bool testConds, bool runActions) {
    unit lp_deadHero = auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_deadHero;
    int lp_killingPlayer = auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingPlayer;
    playergroup lp_killingTeamGroup = auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingTeamGroup;
    playergroup lp_killingGroup = auto_libGame_gf_HeroDeathUpdatePlayerStats_lp_killingGroup;

    playergroup auto8F61D95F_g;
    int auto8F61D95F_p;
    playergroup auto0E9B9C5D_g;
    int auto0E9B9C5D_p;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeamPlayer;
    fixed lv_missionTime;
    int lv_deadPlayer;
    fixed lv_xPGranted;
    int lv_levelGap;

    // Variable Initialization

    // Implementation
    lv_deadPlayer = UnitGetOwner(lp_deadHero);
    lv_missionTime = GameGetMissionTime();
    if ((PlayerGroupCount(lp_killingGroup) >= 1)) {
        lv_xPGranted = libCore_gf_DataXPXPForHero(PlayerGroupPlayer(lp_killingGroup, 1), lp_deadHero);
    }
    else {
        if (((lp_killingPlayer == libCore_gv_cOMPUTER_TeamOrder) || (lp_killingPlayer == libCore_gv_cOMPUTER_TeamChaos))) {
            auto8F61D95F_g = lp_killingTeamGroup; 
            auto8F61D95F_p = 1;
            for ( ; auto8F61D95F_p <= PlayerGroupCount(auto8F61D95F_g) ; auto8F61D95F_p += (lv_itTeamPlayer == PlayerGroupPlayer(auto8F61D95F_g, auto8F61D95F_p)) ) {
                lv_itTeamPlayer = PlayerGroupPlayer(auto8F61D95F_g, auto8F61D95F_p);
                libGame_gf_ScoreValuesRecordXPContributionForPlayer(lv_itTeamPlayer, (libCore_gf_DataXPXPForHero(lv_itTeamPlayer, lp_deadHero) / PlayerGroupCount(lp_killingTeamGroup)), false);
            }
        }

    }
    lv_levelGap = (libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_deadPlayer)].lv_teamLevel - libGame_gv_teams[libGame_gf_EnemyTeamNumberOfPlayer(lv_deadPlayer)].lv_teamLevel);
    auto0E9B9C5D_g = lp_killingTeamGroup; 
    auto0E9B9C5D_p = 1;
    for ( ; auto0E9B9C5D_p <= PlayerGroupCount(auto0E9B9C5D_g) ; auto0E9B9C5D_p += (lv_itPlayer == PlayerGroupPlayer(auto0E9B9C5D_g, auto0E9B9C5D_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto0E9B9C5D_g, auto0E9B9C5D_p);
        if ((PlayerGroupHasPlayer(lp_killingGroup, lv_itPlayer) == true)) {
            UIAlert("EnemyHeroKilled", lv_itPlayer, StringToText(""), null);
            libGame_gv_players[lv_itPlayer].lv_multikillStreak += 1;
            libGame_gf_HeroDeathStartMultikillTimerForPlayer(lv_itPlayer);
            libGame_gf_ScoreValuesRecordXPContributionForPlayer(lv_itPlayer, (lv_xPGranted / PlayerGroupCount(lp_killingGroup)), true);
            if ((libGame_gv_players[lv_itPlayer].lv_isDead == false)) {
                libGame_gv_players[lv_itPlayer].lv_killingSpreeCount += 1;
                libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_itPlayer, "KillStreak", libGame_gv_players[lv_itPlayer].lv_killingSpreeCount);
                if ((PlayerScoreValueGetAsInt(lv_itPlayer, "HighestKillStreak") < libGame_gv_players[lv_itPlayer].lv_killingSpreeCount)) {
                    libGame_gf_SetAwardValueandWeight(lv_itPlayer, libGame_gv_players[lv_itPlayer].lv_killingSpreeCount, libGame_ge_SecondaryAwards_Dominator);
                    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_itPlayer, "HighestKillStreak", libGame_gv_players[lv_itPlayer].lv_killingSpreeCount);
                }

            }

            libSond_gf_HeroVORegisterHeroTakedownForPlayer(lv_itPlayer, lp_killingGroup, lv_deadPlayer, libGame_gv_players[lv_deadPlayer].lv_killingSpreeCount, lv_levelGap);
            libGame_gf_HeroDeathHeroKilledAnnouncementToKillingTeamPlayer(lv_deadPlayer, lp_deadHero, lv_itPlayer, true, lv_xPGranted);
            libGame_gf_HeroDeathCheckForKillingSpree(lv_itPlayer);
        }
        else {
            libGame_gf_HeroDeathHeroKilledAnnouncementToKillingTeamPlayer(lv_deadPlayer, lp_deadHero, lv_itPlayer, false, 0.0);
        }
    }
    return true;
}

trigger auto_libGame_gf_HeroDeathAwardXP_Trigger = null;
int auto_libGame_gf_HeroDeathAwardXP_lp_killingPlayer;
unit auto_libGame_gf_HeroDeathAwardXP_lp_deadHero;
playergroup auto_libGame_gf_HeroDeathAwardXP_lp_awardGroup;
playergroup auto_libGame_gf_HeroDeathAwardXP_lp_killingGroup;
bool auto_libGame_gf_HeroDeathAwardXP_lp_takedownScored;

void libGame_gf_HeroDeathAwardXP (int lp_killingPlayer, unit lp_deadHero, playergroup lp_awardGroup, playergroup lp_killingGroup, bool lp_takedownScored) {
    auto_libGame_gf_HeroDeathAwardXP_lp_killingPlayer = lp_killingPlayer;
    auto_libGame_gf_HeroDeathAwardXP_lp_deadHero = lp_deadHero;
    auto_libGame_gf_HeroDeathAwardXP_lp_awardGroup = lp_awardGroup;
    auto_libGame_gf_HeroDeathAwardXP_lp_killingGroup = lp_killingGroup;
    auto_libGame_gf_HeroDeathAwardXP_lp_takedownScored = lp_takedownScored;

    if (auto_libGame_gf_HeroDeathAwardXP_Trigger == null) {
        auto_libGame_gf_HeroDeathAwardXP_Trigger = TriggerCreate("auto_libGame_gf_HeroDeathAwardXP_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_HeroDeathAwardXP_Trigger, false, false);
}

bool auto_libGame_gf_HeroDeathAwardXP_TriggerFunc (bool testConds, bool runActions) {
    int lp_killingPlayer = auto_libGame_gf_HeroDeathAwardXP_lp_killingPlayer;
    unit lp_deadHero = auto_libGame_gf_HeroDeathAwardXP_lp_deadHero;
    playergroup lp_awardGroup = auto_libGame_gf_HeroDeathAwardXP_lp_awardGroup;
    playergroup lp_killingGroup = auto_libGame_gf_HeroDeathAwardXP_lp_killingGroup;
    bool lp_takedownScored = auto_libGame_gf_HeroDeathAwardXP_lp_takedownScored;

    playergroup auto0BA49109_g;
    int auto0BA49109_p;
    int autoEFD0A0C9_ae;
    int autoEFD0A0C9_ai;
    playergroup auto602C466E_g;
    int auto602C466E_p;
    playergroup auto44AF96F8_g;
    int auto44AF96F8_p;

    // Variable Declarations
    int lv_itPlayer;
    int lv_deadPlayer;
    fixed lv_valueCoefficient;
    int lv_levelGap;
    fixed lv_xPGranted;
    int lv_textTagType;
    int lv_killAwardPlayer;
    int lv_itDamagingEffect;

    // Variable Initialization
    lv_killAwardPlayer = lp_killingPlayer;

    // Implementation
    lv_deadPlayer = UnitGetOwner(lp_deadHero);
    lv_valueCoefficient = libCore_gf_DataXPGetValueCoefficientForUnit(lp_deadHero);
    auto0BA49109_g = lp_awardGroup; 
    auto0BA49109_p = 1;
    for ( ; auto0BA49109_p <= PlayerGroupCount(auto0BA49109_g) ; auto0BA49109_p += (lv_itPlayer == PlayerGroupPlayer(auto0BA49109_g, auto0BA49109_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto0BA49109_g, auto0BA49109_p);
        if ((lv_itPlayer == libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_itPlayer)].lv_choPlayer)) {
            PlayerGroupAdd(lp_awardGroup, libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_itPlayer)].lv_gallPlayer);
        }
        else {
            if ((lv_itPlayer == libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_itPlayer)].lv_gallPlayer)) {
                PlayerGroupAdd(lp_awardGroup, libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_itPlayer)].lv_choPlayer);
            }

        }
    }
    if ((lp_takedownScored == true)) {
        libGame_gv_scoreValues[lv_deadPlayer].lv_deaths += lv_valueCoefficient;
        libGame_gf_ScoreValuesReportRealValueAndLog(lv_deadPlayer, "Deaths", libGame_gv_scoreValues[lv_deadPlayer].lv_deaths);
        if ((lp_killingPlayer > libCore_gv_bALMaxPlayers)) {
            autoEFD0A0C9_ae = 10;
            autoEFD0A0C9_ai = 1;
            lv_itDamagingEffect = 1;
            for ( ; ( (autoEFD0A0C9_ai >= 0 && lv_itDamagingEffect <= autoEFD0A0C9_ae) || (autoEFD0A0C9_ai <= 0 && lv_itDamagingEffect >= autoEFD0A0C9_ae) ) ; lv_itDamagingEffect += autoEFD0A0C9_ai ) {
                if ((libGame_gv_deathRecap_DeathData[lv_deadPlayer].lv_effectBars[lv_itDamagingEffect].lv_time <= libGame_gv_heroDeathHeroDamageLookBackWindow)) {
                    if ((libGame_gv_deathRecap_DeathData[lv_deadPlayer].lv_effectBars[lv_itDamagingEffect].lv_isHeal == false) && (libGame_gv_deathRecap_DeathData[lv_deadPlayer].lv_effectBars[lv_itDamagingEffect].lv_effectPlayer <= libCore_gv_bALMaxPlayers) && (libGame_gv_deathRecap_DeathData[lv_deadPlayer].lv_effectBars[lv_itDamagingEffect].lv_effectPlayer > 0)) {
                        lv_killAwardPlayer = libGame_gv_deathRecap_DeathData[lv_deadPlayer].lv_effectBars[lv_itDamagingEffect].lv_effectPlayer;
                        break;
                    }

                }
                else {
                    break;
                }
            }
        }

        auto602C466E_g = lp_killingGroup; 
        auto602C466E_p = 1;
        for ( ; auto602C466E_p <= PlayerGroupCount(auto602C466E_g) ; auto602C466E_p += (lv_itPlayer == PlayerGroupPlayer(auto602C466E_g, auto602C466E_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto602C466E_g, auto602C466E_p);
            libGame_gv_scoreValues[lv_itPlayer].lv_takedowns += lv_valueCoefficient;
            libGame_gf_ScoreValuesReportRealValueAndLog(lv_itPlayer, "Takedowns", libGame_gv_scoreValues[lv_itPlayer].lv_takedowns);
            if ((lv_itPlayer == lv_killAwardPlayer)) {
                libGame_gv_scoreValues[lv_itPlayer].lv_kills += lv_valueCoefficient;
                libGame_gf_ScoreValuesReportRealValueAndLog(lv_itPlayer, "SoloKill", libGame_gv_scoreValues[lv_itPlayer].lv_kills);
            }
            else {
                libGame_gv_scoreValues[lv_itPlayer].lv_assists += lv_valueCoefficient;
                libGame_gf_ScoreValuesReportRealValueAndLog(lv_itPlayer, "Assists", libGame_gv_scoreValues[lv_itPlayer].lv_assists);
            }
        }
    }

    if (((lp_killingPlayer == libCore_gv_cOMPUTER_TeamOrder) || (lp_killingPlayer == libCore_gv_cOMPUTER_TeamChaos) || (PlayerGroupCount(lp_killingGroup) != 0))) {
        libGame_gf_ScoreValuesReportRealValueAndLog(PlayerGroupPlayer(libGame_gf_AlliedPlayerGroupOfPlayer(lv_deadPlayer), 1), "TeamTakedowns", (PlayerScoreValueGetAsFixed(PlayerGroupPlayer(libGame_gf_AlliedPlayerGroupOfPlayer(lv_deadPlayer), 1), "TeamTakedowns") + lv_valueCoefficient));
    }
    else {
        return true;
    }
    if ((libCore_gv_sYSXPOn == false)) {
        return true;
    }

    auto44AF96F8_g = lp_awardGroup; 
    auto44AF96F8_p = 1;
    for ( ; auto44AF96F8_p <= PlayerGroupCount(auto44AF96F8_g) ; auto44AF96F8_p += (lv_itPlayer == PlayerGroupPlayer(auto44AF96F8_g, auto44AF96F8_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto44AF96F8_g, auto44AF96F8_p);
        lv_levelGap = libCore_gf_DataXPLevelGapBetweenHeroes(lv_itPlayer, lp_deadHero);
        lv_xPGranted = libCore_gf_DataXPXPForHero(lv_itPlayer, lp_deadHero);
        libGame_gf_GrantXPToPlayer(lv_xPGranted, lv_itPlayer, libGame_ge_XPSources_Hero);
        if ((lv_levelGap <= -2)) {
            lv_textTagType = libCore_ge_FloatingTextType_XPSmall;
        }
        else {
            if ((lv_levelGap >= 2)) {
                lv_textTagType = libCore_ge_FloatingTextType_XPLarge;
            }
            else {
                lv_textTagType = libCore_ge_FloatingTextType_XPMedium;
            }
        }
        libUIUI_gf_UIFloatingCombatTextH16MidXP(lv_itPlayer, lp_deadHero, libCore_ge_FloatingTextType_XPLarge, FixedToInt(lv_xPGranted));
    }
    return true;
}

trigger auto_libGame_gf_HeroDeathDeadTeamAnnouncements_Trigger = null;
unit auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadHero;
playergroup auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadPlayerTeamGroup;
int auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_killingFaction;

void libGame_gf_HeroDeathDeadTeamAnnouncements (unit lp_deadHero, playergroup lp_deadPlayerTeamGroup, int lp_killingFaction) {
    auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadHero = lp_deadHero;
    auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadPlayerTeamGroup = lp_deadPlayerTeamGroup;
    auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_killingFaction = lp_killingFaction;

    if (auto_libGame_gf_HeroDeathDeadTeamAnnouncements_Trigger == null) {
        auto_libGame_gf_HeroDeathDeadTeamAnnouncements_Trigger = TriggerCreate("auto_libGame_gf_HeroDeathDeadTeamAnnouncements_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_HeroDeathDeadTeamAnnouncements_Trigger, false, false);
}

bool auto_libGame_gf_HeroDeathDeadTeamAnnouncements_TriggerFunc (bool testConds, bool runActions) {
    unit lp_deadHero = auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadHero;
    playergroup lp_deadPlayerTeamGroup = auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_deadPlayerTeamGroup;
    int lp_killingFaction = auto_libGame_gf_HeroDeathDeadTeamAnnouncements_lp_killingFaction;

    // Variable Declarations
    int lv_itPlayer;
    int lv_deadPlayer;
    int lv_deadPlayerTeam;
    playergroup lv_deadPlayerTeamGroupMinusDeadPlayer;
    bool lv_entireTeamDead;
    int lv_enemyTeam;

    // Variable Initialization
    lv_deadPlayerTeamGroupMinusDeadPlayer = PlayerGroupEmpty();
    lv_entireTeamDead = true;

    // Implementation
    lv_deadPlayer = UnitGetOwner(lp_deadHero);
    lv_deadPlayerTeam = libGame_gf_TeamNumberOfPlayer(lv_deadPlayer);
    lv_deadPlayerTeamGroupMinusDeadPlayer = PlayerGroupCopy(lp_deadPlayerTeamGroup);
    PlayerGroupRemove(lv_deadPlayerTeamGroupMinusDeadPlayer, lv_deadPlayer);
    if ((UnitGroupCount(libGame_gv_players[lv_deadPlayer].lv_heroUnitGroup, c_unitCountAlive) < 1)) {
        libGame_gf_HeroDeathYouHaveDiedAnnouncementToDeadPlayer(lv_deadPlayer);
    }
    else {
        libGame_gf_HeroDeathHeroHasDiedAnnouncementToDeadPlayer(lv_deadPlayer, lp_deadHero);
    }
    libGame_gf_HeroDeathHeroDiedAnnouncementToAlliedPlayerGroup(lv_deadPlayer, lp_deadHero, lv_deadPlayerTeamGroupMinusDeadPlayer);
    libGame_gf_HeroDeathHeroKilledAnnouncementToObserver(lv_deadPlayer, lp_deadHero);
    libGame_gf_HeroDeathCheckForTeamDominatedAnnouncement(lv_deadPlayerTeam);
    return true;
}

void libGame_gf_HeroDeathCheckForTeamDominatedAnnouncement (int lp_deadPlayerTeam) {
    playergroup autoF6A7EEAC_g;
    int autoF6A7EEAC_p;
    playergroup autoF76BFC27_g;
    int autoF76BFC27_p;

    // Variable Declarations
    int lv_itPlayer;
    bool lv_entireTeamDead;
    int lv_enemyTeam;

    // Variable Initialization
    lv_entireTeamDead = true;

    // Implementation
    lv_entireTeamDead = true;
    autoF6A7EEAC_g = libGame_gf_PlayersOnTeamHeroes(lp_deadPlayerTeam, false); 
    autoF6A7EEAC_p = 1;
    for ( ; autoF6A7EEAC_p <= PlayerGroupCount(autoF6A7EEAC_g) ; autoF6A7EEAC_p += (lv_itPlayer == PlayerGroupPlayer(autoF6A7EEAC_g, autoF6A7EEAC_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoF6A7EEAC_g, autoF6A7EEAC_p);
        if ((libGame_gv_players[lv_itPlayer].lv_isDead == false) && (UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "TyraelArchangelsWrathDeathActiveBuff") == false) && (UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "UtherEternalDevotionRezDelay") == false)) {
            lv_entireTeamDead = false;
            break;
        }

    }
    if ((lv_entireTeamDead == true)) {
        autoF76BFC27_g = libGame_gf_PlayersOnTeamHeroes(lp_deadPlayerTeam, false); 
        autoF76BFC27_p = 1;
        for ( ; autoF76BFC27_p <= PlayerGroupCount(autoF76BFC27_g) ; autoF76BFC27_p += (lv_itPlayer == PlayerGroupPlayer(autoF76BFC27_g, autoF76BFC27_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(autoF76BFC27_g, autoF76BFC27_p);
            libSond_gf_HeroVOStartTeamKilledVOTimerForPlayer(lv_itPlayer, libGame_gv_heroDeathTeamKilledVODelay);
        }
        lv_enemyTeam = (3 - lp_deadPlayerTeam);
        if ((lv_enemyTeam <= libCore_gv_bALMaxTeams)) {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_TeamKill, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, true);
            if ((lp_deadPlayerTeam == libGame_gv_teamOrderIndex_C)) {
                libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_BlueTeamKilled, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            }
            else {
                libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_RedTeamKilled, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            }
        }

    }

}

void libGame_gf_HeroDeathCheckToSeeIfLivingAlliesExist (unit lp_deadUnit, int lp_deadPlayerTeamNumber, playergroup lp_deadPlayersTeam) {
    playergroup auto11DEDC0E_g;
    int auto11DEDC0E_p;

    // Variable Declarations
    bool lv_entireTeamDead;
    int lv_itPlayer;
    int lv_numberOfPlayersOnDeadPlayersTeam;
    int lv_speakingPlayer;

    // Variable Initialization
    lv_entireTeamDead = true;

    // Implementation
    lv_entireTeamDead = true;
    auto11DEDC0E_g = libGame_gf_PlayersOnTeamHeroes(lp_deadPlayerTeamNumber, true); 
    auto11DEDC0E_p = 1;
    for ( ; auto11DEDC0E_p <= PlayerGroupCount(auto11DEDC0E_g) ; auto11DEDC0E_p += (lv_itPlayer == PlayerGroupPlayer(auto11DEDC0E_g, auto11DEDC0E_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto11DEDC0E_g, auto11DEDC0E_p);
        if ((libGame_gv_players[lv_itPlayer].lv_isDead == false) && (UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "TyraelArchangelsWrathDeathActiveBuff") == false) && (UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "UtherEternalDevotionRezDelay") == false)) {
            lv_entireTeamDead = false;
            break;
        }

    }
    if ((lv_entireTeamDead == false)) {
        lv_numberOfPlayersOnDeadPlayersTeam = PlayerGroupCount(lp_deadPlayersTeam);
        lv_speakingPlayer = PlayerGroupPlayer(lp_deadPlayersTeam, RandomInt(1, lv_numberOfPlayersOnDeadPlayersTeam));
        libSond_gf_HeroVOStartAlliedTakedownVOTimerForPlayer(lv_speakingPlayer, 3.5);
    }

}

void libGame_gf_HeroDeathStartRespawnTimer (int lp_player, fixed lp_initialRespawnTime) {
    // Variable Declarations
    unit lv_heroUnit;

    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    UnitSetState(lv_heroUnit, c_unitStateStatusBar, false);
    libGame_gv_players[lp_player].lv_timeSpentDead += lp_initialRespawnTime;
    TimerStart(libGame_gv_players[lp_player].lv_respawnTimer, lp_initialRespawnTime, false, c_timeGame);
    TimerStart(libGame_gv_players[lp_player].lv_respawnSoundCueTimer, MaxF((lp_initialRespawnTime - libGame_gv_heroDeathRespawnCueSoundTiming), 0.0625), false, c_timeGame);
    libGame_gf_ScoreValuesReportRealValueAndLog(lp_player, "TimeSpentDead", libGame_gv_players[lp_player].lv_timeSpentDead);
}

void libGame_gf_HeroDeathUpdateUIElementsForDeath (bool lp_showOverlay, bool lp_registerwithAnnouncementUI, bool lp_showDeathRecapToast, int lp_player, int lp_killingPlayer) {
    // Implementation
    if ((libGame_gv_heroDeath_RunDeathUIUpdates == false)) {
        return ;
    }

    if (((lp_killingPlayer < 1) || (lp_killingPlayer > libCore_gv_bALMaxEnginePlayerCount))) {
        TextExpressionSetToken("Param/Expression/lib_Game_5FB257F8", "A", IntToText(lp_killingPlayer));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_5FB257F8"), true);
        return ;
    }

    libGame_gf_UpdateStormMapLighting(PlayerGroupSingle(lp_player), 0.0);
    libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer(false, lp_player);
    if ((lp_registerwithAnnouncementUI == true)) {
        libUIUI_gf_DeathAnnouncementPanelRegisterDeath(lp_player, lp_killingPlayer, libGame_gv_players[libGame_gv_players[lp_player].lv_heroIndex].lv_heroData.lv_portrait, libGame_gv_players[lp_player].lv_heroUnit, libGame_gv_players[libGame_gv_players[lp_player].lv_heroIndex].lv_heroData.lv_name, libGame_gv_players[lp_player].lv_respawnTimer);
    }

    if ((lp_showOverlay == true)) {
        libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay(true, lp_player);
    }

    libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer("Gen_Hero_Death_Self", libGame_ge_HeroDeathKillStingerQueueType_Ally, lp_player);
    if ((lp_showDeathRecapToast == true)) {
        libUIUI_gf_DeathRecapShowHideToastButtonForPlayer(true, lp_player);
    }

}

void libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer (bool lp_enableDisable, int lp_player) {
    // Variable Declarations
    fixed lv_deathTimeRemaining;
    fixed lv_soundOffset;

    // Variable Initialization

    // Implementation
    if ((lp_enableDisable == true)) {
        SoundChannelDSPInsert(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser2, "Heroes_Lowpass_Death");
        SoundChannelMute(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryAmbient, true);
        lv_deathTimeRemaining = TimerGetRemaining(libGame_gv_players[lp_player].lv_respawnTimer);
        lv_soundOffset = (libCore_gv_bALMaxDeathTime - lv_deathTimeRemaining);
        SoundPlayForPlayer(SoundLink("Gen_Hero_Respawn_Amb", -1), lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, lv_soundOffset);
        libGame_gv_heroDeath_DeathAmbientSound[lp_player] = SoundLastPlayed();
        SoundtrackStopCurrent(PlayerGroupSingle(lp_player), c_soundtrackCategoryMusic, true);
        SoundtrackPlay(PlayerGroupSingle(lp_player), c_soundtrackCategoryMusic, "MX_Dead", c_soundtrackCueAny, c_soundtrackIndexAny, true);
    }
    else {
        SoundChannelDSPRemove(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryUser2, "Heroes_Lowpass_Death");
        SoundStop(libGame_gv_heroDeath_DeathAmbientSound[lp_player], true);
        libSond_gf_SoundtrackStopDeadSoundtrackforPlayer(lp_player);
        SoundChannelMute(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryAmbient, false);
    }
}

void libGame_gf_HeroDeathPortHeroBackAndSetDeathState (int lp_player, point lp_portLocation) {
    // Variable Declarations
    int lv_i;
    unit lv_heroUnit;

    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    UnitSetPropertyFixed(lv_heroUnit, c_unitPropLifePercent, 100.0);
    UnitSetPropertyFixed(lv_heroUnit, c_unitPropEnergyPercent, 100.0);
    UnitBehaviorAdd(lv_heroUnit, "Dead", lv_heroUnit, 1);
    if ((UnitBehaviorCount(EventUnit(), "NoDeadMechanics") == 0)) {
        UnitBehaviorAdd(lv_heroUnit, "DeadMechanics", lv_heroUnit, 1);
    }

    if ((TimerGetDuration(libGame_gv_players[lp_player].lv_respawnTimer) > 0.0)) {
        UnitBehaviorSetDuration(lv_heroUnit, "Dead", TimerGetRemaining(libGame_gv_players[lp_player].lv_respawnTimer));
    }
    else {
        UnitBehaviorSetDuration(lv_heroUnit, "Dead", 0.0);
    }
    if ((UnitHasBehavior2(lv_heroUnit, "GuldanDarkBargainDuration") == true)) {
        libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar("GuldanDarkBargainDuration", lp_player);
    }
    else {
        libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar("Dead", lp_player);
    }
    Wait(0.5, c_timeGame);
    UnitSetPosition(lv_heroUnit, lp_portLocation, false);
    UnitSetFacing(lv_heroUnit, 270.0, 0.0);
}

void libGame_gf_HeroDeathModifyRespawnTimer (int lp_respawningPlayer, fixed lp_modificationAmount) {
    // Variable Declarations
    fixed lv_currentRespawnTimer;
    fixed lv_newRespawnTimer;

    // Variable Initialization

    // Implementation
    lv_currentRespawnTimer = TimerGetRemaining(libGame_gv_players[lp_respawningPlayer].lv_respawnTimer);
    if ((lv_currentRespawnTimer == 0.0)) {
        return ;
    }

    lv_newRespawnTimer = (lv_currentRespawnTimer + lp_modificationAmount);
    if ((lv_newRespawnTimer < 0.5)) {
        lv_newRespawnTimer = 0.5;
    }

    libGame_gf_HeroDeathUpdateRespawnTimer(lp_respawningPlayer, lv_newRespawnTimer);
}

void libGame_gf_HeroDeathUpdateRespawnTimer (int lp_respawningPlayer, fixed lp_newRespawnTimerDuration) {
    // Variable Declarations
    fixed lv_currentRespawnTimer;
    fixed lv_soundOffset;

    // Variable Initialization

    // Implementation
    lv_currentRespawnTimer = TimerGetRemaining(libGame_gv_players[lp_respawningPlayer].lv_respawnTimer);
    if ((lv_currentRespawnTimer == 0.0)) {
        return ;
    }

    if ((lv_currentRespawnTimer < lp_newRespawnTimerDuration)) {
        UnitBehaviorSetDuration(libGame_gv_players[lp_respawningPlayer].lv_heroUnit, "Dead", lp_newRespawnTimerDuration);
    }
    else {
        UnitBehaviorSetDurationRemaining(libGame_gv_players[lp_respawningPlayer].lv_heroUnit, "Dead", lp_newRespawnTimerDuration);
    }
    TimerStart(libGame_gv_players[lp_respawningPlayer].lv_respawnTimer, lp_newRespawnTimerDuration, false, c_timeGame);
    TimerStart(libGame_gv_players[lp_respawningPlayer].lv_respawnSoundCueTimer, MaxF((lp_newRespawnTimerDuration - libGame_gv_heroDeathRespawnCueSoundTiming), 0.0625), false, c_timeGame);
    DialogControlSetVisible(libUIUI_gv_heroConsoleUnitStatusBars.lv_stunDeathBarParentFrame, libCore_gv_playerGroupFromPlayer[lp_respawningPlayer], false);
    libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar("Dead", lp_respawningPlayer);
    libUIUI_gf_DeathTimerPanelPlayerDeathTimerChanges(lp_respawningPlayer, libGame_gv_players[lp_respawningPlayer].lv_heroUnit);
    if ((UnitHasBehavior2(libGame_gv_players[lp_respawningPlayer].lv_heroUnit, "HeroGenericIgnoreDeathSounds") == false)) {
        SoundStop(libGame_gv_heroDeath_DeathAmbientSound[lp_respawningPlayer], false);
        if ((lp_newRespawnTimerDuration > 0.0)) {
            lv_soundOffset = (libCore_gv_bALMaxDeathTime - lp_newRespawnTimerDuration);
            SoundPlayForPlayer(SoundLink("Gen_Hero_Respawn_Amb", -1), lp_respawningPlayer, libCore_gv_playerGroupFromPlayer[lp_respawningPlayer], 100.0, lv_soundOffset);
        }

    }
    else {
        if ((lp_newRespawnTimerDuration > 0.0)) {
            lv_soundOffset = (libCore_gv_bALMaxDeathTime - lp_newRespawnTimerDuration);
        }

    }
}

void libGame_gf_HeroDeathRespawnHeroforPlayer (bool lp_respawnMounted, int lp_player, point lp_reSpawnLocation, int lp_reSpawnHealthPercent) {
    // Variable Declarations
    int lv_i;
    unit lv_heroUnit;

    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    if ((UnitHasBehavior2(lv_heroUnit, "AbnormalRespawn") == true)) {
        return ;
    }

    UnitKill(libGame_gv_players[lp_player].lv_gravestone);
    UnitBehaviorRemove(lv_heroUnit, "Dead", 1);
    UnitBehaviorRemove(lv_heroUnit, "DeadMechanics", 1);
    UnitRevive(lv_heroUnit);
    UnitSetState(lv_heroUnit, c_unitStateStatusBar, true);
    UnitSetPropertyFixed(lv_heroUnit, c_unitPropLifePercent, lp_reSpawnHealthPercent);
    if ((UnitHasBehavior2(lv_heroUnit, "HeroGeneric0EnergyOnRespawn") == true)) {
        UnitSetPropertyFixed(lv_heroUnit, c_unitPropEnergyPercent, 0.0);
    }
    else {
        UnitSetPropertyFixed(lv_heroUnit, c_unitPropEnergyPercent, 100.0);
    }
    libGame_gv_players[lp_player].lv_isDead = false;
    UnitCreateEffectUnit(lv_heroUnit, "HealingPadSet", lv_heroUnit);
    if ((UnitGetType(lv_heroUnit) == "HeroMurky")) {
        libGDHL_gf_HeroMurkyRespawnLogicCheck(lp_player);
    }
    else {
        UnitSetPosition(lv_heroUnit, lp_reSpawnLocation, false);
    }
    libGame_gf_SendEventHeroRespawn(lp_player);
    libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay(false, lp_player);
    TextTagDestroy(libGame_gv_players[lp_player].lv_gravestoneTextTag);
    UIAlert("YourHeroHasRevived", lp_player, StringToText(""), null);
    libGame_gf_AfkResumeWarningTimerForPlayer(lp_player);
    libNtve_gf_SendActorMessageToUnit(lv_heroUnit, "Signal Respawn");
    libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(false, lp_player);
    libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_Revive, lp_player, libCore_gv_playerGroupFromPlayer[lp_player]);
    UnitRemove(libGame_gv_players[lp_player].lv_cameraDeadUnitCameraTarget);
    libGame_gv_players[lp_player].lv_cameraDeadUnitCameraTarget = null;
    libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(lv_heroUnit);
    libGame_gf_CameraUpdateCameraForPlayer(lp_player);
    libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer(true, lp_player);
    if ((lp_respawnMounted == true) && ((UnitHasBehavior2(lv_heroUnit, "HomeShieldProtection") == true) || (UnitGetType(lv_heroUnit) == "HeroMurky"))) {
        libGame_gf_ApplyMountBehaviorToHero(lv_heroUnit);
        libGame_gf_SendEventHeroSpecialCaseMounting(lp_player);
    }

}

void libGame_gf_HeroDeathHeroKilledAnnouncementToKillingTeamPlayer (int lp_deadPlayer, unit lp_deadHero, int lp_killingTeamPlayer, bool lp_playerWasInvolvedInKill, fixed lp_xPValue) {
    int auto869E4A78_val;

    // Variable Declarations
    int lv_multiKillStreak;
    int lv_killingTeam;
    int lv_vOEvent;
    string lv_deathStingerSound;
    string lv_animName;
    text lv_titleText;
    fixed lv_duration;

    // Variable Initialization
    lv_vOEvent = libCore_ge_AnnouncerVOEvents_Null;
    lv_animName = "";

    // Implementation
    lv_killingTeam = libGame_gf_TeamNumberOfPlayer(lp_killingTeamPlayer);
    lv_multiKillStreak = libGame_gv_players[lp_killingTeamPlayer].lv_multikillStreak;
    if ((UnitGetType(libGame_gv_players[lp_deadPlayer].lv_heroUnit) == "HeroCho")) {
        lv_multiKillStreak += 1;
    }

    if ((lp_playerWasInvolvedInKill == true)) {
        if ((libGame_gv_heroDeathMultikillTimerEnabled == true)) {
            auto869E4A78_val = lv_multiKillStreak;
            if (auto869E4A78_val == 2) {
                lv_vOEvent = libCore_ge_AnnouncerVOEvents_DoubleKill;
                if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
                    lv_deathStingerSound = "Gen_Hero_Death_Double_R";
                }
                else {
                    lv_deathStingerSound = "Gen_Hero_Death_Double_L";
                }
                lv_animName = "ShowTimedNotification_Tier1";
                lv_titleText = StringExternal("Param/Value/lib_Game_855DD2B2");
                lv_duration = libGame_gv_announcement_KillAnnouncementDuration_C;
                libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer(lp_killingTeamPlayer, StringExternal("Param/Value/lib_Game_CEE24189"), StringExternal("Param/Value/lib_Game_EA230E99"));
                libGame_gf_SendEventPlayerAchievesMultiKill(lp_killingTeamPlayer, libGame_gv_players[lp_killingTeamPlayer].lv_multikillStreak);
            }
            else if (auto869E4A78_val == 3) {
                lv_vOEvent = libCore_ge_AnnouncerVOEvents_TripleKill;
                if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
                    lv_deathStingerSound = "Gen_Hero_Death_Triple_R";
                }
                else {
                    lv_deathStingerSound = "Gen_Hero_Death_Triple_L";
                }
                lv_animName = "ShowTimedNotification_Tier2";
                lv_titleText = StringExternal("Param/Value/lib_Game_B57CA767");
                lv_duration = libGame_gv_announcement_KillAnnouncementDuration_C;
                libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer(lp_killingTeamPlayer, StringExternal("Param/Value/lib_Game_F5B98EFA"), StringExternal("Param/Value/lib_Game_CCDACBD8"));
                libGame_gf_SendEventPlayerAchievesMultiKill(lp_killingTeamPlayer, libGame_gv_players[lp_killingTeamPlayer].lv_multikillStreak);
            }
            else if (auto869E4A78_val == 4) {
                lv_vOEvent = libCore_ge_AnnouncerVOEvents_QuadraKill;
                if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
                    lv_deathStingerSound = "Gen_Hero_Death_Four_R";
                }
                else {
                    lv_deathStingerSound = "Gen_Hero_Death_Four_L";
                }
                lv_animName = "ShowTimedNotification_Tier3";
                lv_titleText = StringExternal("Param/Value/lib_Game_4AEEDB15");
                lv_duration = libGame_gv_announcement_KillAnnouncementDuration_C;
                libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer(lp_killingTeamPlayer, StringExternal("Param/Value/lib_Game_F83644E7"), StringExternal("Param/Value/lib_Game_7CC15B43"));
                libGame_gf_SendEventPlayerAchievesMultiKill(lp_killingTeamPlayer, libGame_gv_players[lp_killingTeamPlayer].lv_multikillStreak);
            }
            else if (auto869E4A78_val == 5) {
                lv_vOEvent = libCore_ge_AnnouncerVOEvents_MegaKill;
                if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
                    lv_deathStingerSound = "Gen_Hero_Death_Penta_R";
                }
                else {
                    lv_deathStingerSound = "Gen_Hero_Death_Penta_L";
                }
                lv_animName = "ShowTimedNotification_Tier4";
                lv_titleText = StringExternal("Param/Value/lib_Game_21ABA061");
                lv_duration = libGame_gv_announcement_LongAnnouncementDuration_C;
                libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer(lp_killingTeamPlayer, StringExternal("Param/Value/lib_Game_14443980"), StringExternal("Param/Value/lib_Game_678E76AB"));
                libGame_gf_SendEventPlayerAchievesMultiKill(lp_killingTeamPlayer, libGame_gv_players[lp_killingTeamPlayer].lv_multikillStreak);
            }
            else {
                lv_vOEvent = libCore_ge_AnnouncerVOEvents_EnemyKilledParticipants;
                if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
                    lv_deathStingerSound = ((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Enemy_R"));
                }
                else {
                    lv_deathStingerSound = ((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Enemy_L"));
                }
                lv_animName = "ShowStandardNotification";
                lv_titleText = StringExternal("Param/Value/lib_Game_FC51EB82");
                lv_duration = libGame_gv_announcement_KillAnnouncementDuration_C;
                libUIUI_gf_NotificationDisplaySetMultikillTimerLabelsForPlayer(lp_killingTeamPlayer, StringExternal("Param/Value/lib_Game_4EDC2964"), StringExternal("Param/Value/lib_Game_A83B9DD0"));
            }
        }
        else {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_EnemyKilledParticipants;
            if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = ((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Enemy_R"));
            }
            else {
                lv_deathStingerSound = ((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Enemy_L"));
            }
            lv_animName = "ShowStandardNotification";
            lv_titleText = StringExternal("Param/Value/lib_Game_027DFECA");
            lv_duration = libGame_gv_announcement_KillAnnouncementDuration_C;
        }
    }
    else {
        if ((lv_killingTeam == libGame_gv_teamOrderIndex_C)) {
            lv_deathStingerSound = ((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Enemy_Offscreen_R"));
        }
        else {
            lv_deathStingerSound = ((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Enemy_Offscreen_L"));
        }
    }
    libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer(lv_deathStingerSound, libGame_ge_HeroDeathKillStingerQueueType_Enemy, lp_killingTeamPlayer);
    if ((libGame_gv_firstBloodAvailable == true)) {
        lv_vOEvent = libCore_ge_AnnouncerVOEvents_AllyFirstBlood;
        lv_titleText = StringExternal("Param/Value/lib_Game_3AA52D1D");
    }

    if ((lp_playerWasInvolvedInKill == true) && (libGame_gv_players[lp_deadPlayer].lv_suppressHeroAnnouncements == false)) {
        if ((libGame_gv_players[lp_deadPlayer].lv_heroUsesAnnouncementAlias == true)) {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_killingTeamPlayer], libGame_ge_AnnouncementPriorities_Critical, lv_vOEvent, lv_animName, lv_titleText, libGame_gv_players[lp_deadPlayer].lv_heroAnnouncementAliasText, null, null, lv_duration, true);
        }
        else {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_killingTeamPlayer], libGame_ge_AnnouncementPriorities_Critical, lv_vOEvent, lv_animName, lv_titleText, UnitTypeGetName(UnitGetType(lp_deadHero)), null, null, lv_duration, true);
        }
    }

}

void libGame_gf_HeroDeathHeroKilledAnnouncementToObserver (int lp_deadPlayer, unit lp_deadHero) {
    // Variable Declarations
    int lv_killingTeam;
    text lv_killMessage;
    int lv_vOEvent;

    // Variable Initialization

    // Implementation
    lv_killingTeam = libGame_gf_EnemyTeamNumberOfPlayer(lp_deadPlayer);
    if ((lv_killingTeam == 1)) {
        lv_killMessage = StringExternal("Param/Value/lib_Game_95A823E0");
    }
    else {
        lv_killMessage = StringExternal("Param/Value/lib_Game_DBC9E655");
    }
    if ((libGame_gv_firstBloodAvailable == true)) {
        if ((lv_killingTeam == 1)) {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_BlueTeamFirstBlood;
        }
        else {
            lv_vOEvent = libCore_ge_AnnouncerVOEvents_RedTeamFirstBlood;
        }
    }
    else {
        lv_vOEvent = libCore_ge_AnnouncerVOEvents_HeroKilledObserver;
    }
    if ((lv_killingTeam == 1)) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Critical, lv_vOEvent, "ShowStandardNotification", lv_killMessage, UnitTypeGetName(UnitGetType(lp_deadHero)), null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
    else {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Critical, lv_vOEvent, "ShowEnemyNotification", lv_killMessage, UnitTypeGetName(UnitGetType(lp_deadHero)), null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
}

void libGame_gf_HeroDeathHeroDiedAnnouncementToAlliedPlayerGroup (int lp_deadPlayer, unit lp_deadHero, playergroup lp_alliedPlayerGroup) {
    unitgroup auto6AD73EDD_g;
    int auto6AD73EDD_u;
    playergroup auto400955E7_g;
    int auto400955E7_p;

    // Variable Declarations
    unit lv_itUnit;
    int lv_itPlayer;
    int lv_teamOfDeadPlayer;
    bool[libCore_gv_bALMaxPlayers + 1] lv_playerIsNearDeadPlayer;
    unitgroup lv_nearbyUnits;
    int lv_heroPlayer;
    string lv_deathStingerSound;

    // Variable Initialization
    lv_nearbyUnits = UnitGroupEmpty();

    // Implementation
    lv_teamOfDeadPlayer = libGame_gf_TeamNumberOfPlayer(lp_deadPlayer);
    lv_nearbyUnits = UnitGroupSearch(null, lp_deadPlayer, UnitGetPosition(lp_deadHero), libCore_gv_bALHeroKillXPRadius, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6AD73EDD_g = lv_nearbyUnits;
    auto6AD73EDD_u = 1;
    for ( ; auto6AD73EDD_u <= UnitGroupCount(auto6AD73EDD_g, c_unitCountAll) ; auto6AD73EDD_u += (lv_itUnit == UnitGroupUnit(auto6AD73EDD_g, auto6AD73EDD_u)) ) {
        lv_itUnit = UnitGroupUnit(auto6AD73EDD_g, auto6AD73EDD_u);
        lv_heroPlayer = UnitGetOwner(lv_itUnit);
        if (((lv_itUnit == lp_deadHero) || (lv_itUnit == libGame_gv_players[lv_heroPlayer].lv_activeVehicle) || (libGame_gf_UnitIsHero(lv_itUnit) == true))) {
            lv_playerIsNearDeadPlayer[lv_heroPlayer] = true;
            continue;
        }

        if ((UnitHasBehavior2(lv_itUnit, "EarnsXP") == true)) {
            lv_heroPlayer = UnitBehaviorEffectPlayer(lv_itUnit, "EarnsXP", c_effectPlayerOrigin, 0);
            if ((lv_heroPlayer <= libCore_gv_bALMaxPlayers)) {
                lv_playerIsNearDeadPlayer[lv_heroPlayer] = true;
                continue;
            }

        }

    }
    auto400955E7_g = lp_alliedPlayerGroup; 
    auto400955E7_p = 1;
    for ( ; auto400955E7_p <= PlayerGroupCount(auto400955E7_g) ; auto400955E7_p += (lv_itPlayer == PlayerGroupPlayer(auto400955E7_g, auto400955E7_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto400955E7_g, auto400955E7_p);
        if ((lv_itPlayer > libCore_gv_bALMaxPlayers)) {
            continue;
        }

        if ((lv_playerIsNearDeadPlayer[lv_itPlayer] == true)) {
            if ((lv_teamOfDeadPlayer == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = ((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Ally_L"));
            }
            else {
                lv_deathStingerSound = ((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Ally_R"));
            }
        }
        else {
            if ((lv_teamOfDeadPlayer == libGame_gv_teamOrderIndex_C)) {
                lv_deathStingerSound = ((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Ally_Offscreen_L"));
            }
            else {
                lv_deathStingerSound = ((libGame_gv_players[lp_deadPlayer].lv_soundDeathAlertPrefix + "Ally_Offscreen_R"));
            }
        }
        libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer(lv_deathStingerSound, libGame_ge_HeroDeathKillStingerQueueType_Ally, lv_itPlayer);
    }
}

void libGame_gf_HeroDeathYouHaveDiedAnnouncementToDeadPlayer (int lp_deadPlayer) {
    // Implementation
    if ((libGame_gv_heroDeath_RunDeathUIUpdates == false)) {
        return ;
    }

    if ((libGame_gv_players[lp_deadPlayer].lv_killingSpreeCount >= libCore_gv_killingSpree_KillThresholdBase_C)) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libGame_ge_AnnouncementPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeEndYou, "ShowEnemyNotification", StringExternal("Param/Value/lib_Game_DC86A45D"), null, null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
    else {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libGame_ge_AnnouncementPriorities_Critical, libCore_ge_AnnouncerVOEvents_YouHaveBeenKilled, "ShowEnemyNotification", StringExternal("Param/Value/lib_Game_A4657A6A"), null, null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
    libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer("Gen_Hero_Death_Self", libGame_ge_HeroDeathKillStingerQueueType_Ally, lp_deadPlayer);
}

void libGame_gf_HeroDeathHeroHasDiedAnnouncementToDeadPlayer (int lp_deadPlayer, unit lp_deadHero) {
    // Variable Declarations
    text lv_heroDiedText;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_heroDeath_RunDeathUIUpdates == false)) {
        return ;
    }

    if ((libGame_gv_players[lp_deadPlayer].lv_killingSpreeCount >= libCore_gv_killingSpree_KillThresholdBase_C)) {
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libGame_ge_AnnouncementPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeEndYou, "ShowEnemyNotification", StringExternal("Param/Value/lib_Game_DD74EA80"), null, null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
    else {
        TextExpressionSetToken("Param/Expression/lib_Game_4F04F9C4", "A", UnitTypeGetName(UnitGetType(lp_deadHero)));
        lv_heroDiedText = TextExpressionAssemble("Param/Expression/lib_Game_4F04F9C4");
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_deadPlayer], libGame_ge_AnnouncementPriorities_Critical, libCore_ge_AnnouncerVOEvents_YouHaveBeenKilled, "ShowEnemyNotification", lv_heroDiedText, null, null, null, libGame_gv_announcement_KillAnnouncementDuration_C, false);
    }
    libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer("Gen_Hero_Death_Self", libGame_ge_HeroDeathKillStingerQueueType_Ally, lp_deadPlayer);
}

void libGame_gf_HeroDeathCheckForKillingSpree (int lp_killingPlayer) {
    // Variable Declarations
    int lv_killingSpreeCount;
    playergroup lv_announcementGroup;

    // Variable Initialization
    lv_announcementGroup = PlayerGroupEmpty();

    // Implementation
    lv_killingSpreeCount = libGame_gv_players[lp_killingPlayer].lv_killingSpreeCount;
    lv_announcementGroup = PlayerGroupCopy(libCore_gv_playerGroupFromPlayer[lp_killingPlayer]);
    if ((lv_killingSpreeCount == libCore_gv_killingSpree_KillThresholdBase_C)) {
        libGame_gv_heroDeathKillStreakRegistered[lp_killingPlayer][1] = true;
        return ;
    }

    if ((lv_killingSpreeCount == libCore_gv_killingSpree_KillThresholdUpgrade1_C)) {
        libGame_gv_heroDeathKillStreakRegistered[lp_killingPlayer][2] = true;
        return ;
    }

    if ((lv_killingSpreeCount == libCore_gv_killingSpree_KillThresholdUpgrade2_C)) {
        libGame_gv_heroDeathKillStreakRegistered[lp_killingPlayer][3] = true;
        return ;
    }

    if ((lv_killingSpreeCount == libCore_gv_killingSpree_KillThresholdUpgrade3_C)) {
        libGame_gv_heroDeathKillStreakRegistered[lp_killingPlayer][4] = true;
        return ;
    }

}

void libGame_gf_HeroDeathDispatchKillingSpreeAnnouncement (int lp_player) {
    int auto6D92A7AF_ae;
    int auto6D92A7AF_ai;
    int autoBF1FB7C4_val;

    // Variable Declarations
    int lv_itThreshold;
    int lv_registeredThreshold;

    // Variable Initialization

    // Implementation
    auto6D92A7AF_ae = libCore_gv_killingSpree_KillThresholdCount_C;
    auto6D92A7AF_ai = 1;
    lv_itThreshold = 1;
    for ( ; ( (auto6D92A7AF_ai >= 0 && lv_itThreshold <= auto6D92A7AF_ae) || (auto6D92A7AF_ai <= 0 && lv_itThreshold >= auto6D92A7AF_ae) ) ; lv_itThreshold += auto6D92A7AF_ai ) {
        if ((libGame_gv_heroDeathKillStreakRegistered[lp_player][lv_itThreshold] == true)) {
            libGame_gv_heroDeathKillStreakRegistered[lp_player][lv_itThreshold] = false;
            lv_registeredThreshold = lv_itThreshold;
            break;
        }

    }
    autoBF1FB7C4_val = lv_registeredThreshold;
    if (autoBF1FB7C4_val == 1) {
        TextExpressionSetToken("Param/Expression/lib_Game_8825A2A0", "A", IntToText(libCore_gv_killingSpree_KillThresholdBase_C));
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_player], libGame_ge_AnnouncementPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeStart, "ShowStandardNotification", StringExternal("Param/Value/lib_Game_3A39FC5B"), TextExpressionAssemble("Param/Expression/lib_Game_8825A2A0"), StringToText(""), null, libGame_gv_announcement_LongAnnouncementDuration_C, false);
    }
    else if (autoBF1FB7C4_val == 2) {
        TextExpressionSetToken("Param/Expression/lib_Game_6CE64AC3", "A", IntToText(libCore_gv_killingSpree_KillThresholdUpgrade1_C));
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_player], libGame_ge_AnnouncementPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade1Mayhem, "ShowStandardNotification", StringExternal("Param/Value/lib_Game_2D25E4DC"), TextExpressionAssemble("Param/Expression/lib_Game_6CE64AC3"), StringToText(""), null, libGame_gv_announcement_LongAnnouncementDuration_C, false);
    }
    else if (autoBF1FB7C4_val == 3) {
        TextExpressionSetToken("Param/Expression/lib_Game_CC140864", "A", IntToText(libCore_gv_killingSpree_KillThresholdUpgrade2_C));
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_player], libGame_ge_AnnouncementPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade2Untouchable, "ShowStandardNotification", StringExternal("Param/Value/lib_Game_769C1CA0"), TextExpressionAssemble("Param/Expression/lib_Game_CC140864"), StringToText(""), null, libGame_gv_announcement_LongAnnouncementDuration_C, false);
    }
    else if (autoBF1FB7C4_val == 4) {
        TextExpressionSetToken("Param/Expression/lib_Game_162AE324", "A", IntToText(libCore_gv_killingSpree_KillThresholdUpgrade3_C));
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lp_player], libGame_ge_AnnouncementPriorities_Critical, libCore_ge_AnnouncerVOEvents_KillingSpreeUpgrade3HeroOfTheStorm, "ShowStandardNotification", StringExternal("Param/Value/lib_Game_3D367900"), TextExpressionAssemble("Param/Expression/lib_Game_162AE324"), StringToText(""), null, libGame_gv_announcement_LongAnnouncementDuration_C, false);
    }
    else {
    }
}

void libGame_gf_HeroDeathStartMultikillTimerForPlayer (int lp_player) {
    // Implementation
    TimerStart(libGame_gv_players[lp_player].lv_multikillTimer, libGame_gv_heroDeathMultikillTimeoutDuration, false, c_timeGame);
    TriggerEnable(libGame_gt_HeroDeathUpdateMultikillTimerUI, true);
}

void libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer (string lp_sound, int lp_queueType, int lp_player) {
    // Variable Declarations
    int lv_queueTypeInt;
    int lv_currentQueueCount;
    int lv_nextPlayIndex;
    int lv_insertIndex;
    soundlink lv_soundLink;

    // Variable Initialization
    lv_soundLink = SoundLink(lp_sound, c_soundIndexAny);

    // Implementation
    lv_queueTypeInt = (lp_queueType);
    lv_currentQueueCount = libGame_gv_heroDeathKillStingerQueue[lp_player].lv_numberOfItemsInQueue[lv_queueTypeInt];
    lv_nextPlayIndex = libGame_gv_heroDeathKillStingerQueue[lp_player].lv_nextPlayIndex[lv_queueTypeInt];
    if ((lv_currentQueueCount >= libCore_gv_bALMaxPlayersOnATeam)) {
        return ;
    }

    lv_insertIndex = (lv_nextPlayIndex + lv_currentQueueCount);
    if ((lv_insertIndex > libCore_gv_bALMaxPlayersOnATeam)) {
        lv_insertIndex -= libCore_gv_bALMaxPlayersOnATeam;
    }

    libGame_gv_heroDeathKillStingerQueue[lp_player].lv_soundQueue[lv_queueTypeInt][lv_insertIndex] = lv_soundLink;
    libGame_gv_heroDeathKillStingerQueue[lp_player].lv_numberOfItemsInQueue[lv_queueTypeInt] += 1;
    if ((TimerGetRemaining(libGame_gv_heroDeathKillStingerQueue[lp_player].lv_killStingerTimer[lv_queueTypeInt]) <= 0.0)) {
        libGame_gf_HeroDeathPlayNextSoundInQueueForPlayer(lp_queueType, lp_player);
    }

}

void libGame_gf_HeroDeathPlayNextSoundInQueueForPlayer (int lp_queueType, int lp_player) {
    // Variable Declarations
    int lv_queueTypeInt;
    int lv_nextPlayIndex;

    // Variable Initialization

    // Implementation
    lv_queueTypeInt = (lp_queueType);
    if ((libGame_gv_heroDeathKillStingerQueue[lp_player].lv_numberOfItemsInQueue[lv_queueTypeInt] <= 0)) {
        return ;
    }

    lv_nextPlayIndex = libGame_gv_heroDeathKillStingerQueue[lp_player].lv_nextPlayIndex[lv_queueTypeInt];
    SoundPlayForPlayer(libGame_gv_heroDeathKillStingerQueue[lp_player].lv_soundQueue[lv_queueTypeInt][lv_nextPlayIndex], lp_player, libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
    libGame_gv_heroDeathKillStingerQueue[lp_player].lv_numberOfItemsInQueue[lv_queueTypeInt] -= 1;
    lv_nextPlayIndex += 1;
    if ((lv_nextPlayIndex > libCore_gv_bALMaxPlayersOnATeam)) {
        lv_nextPlayIndex = 1;
    }

    libGame_gv_heroDeathKillStingerQueue[lp_player].lv_nextPlayIndex[lv_queueTypeInt] = lv_nextPlayIndex;
    TimerStart(libGame_gv_heroDeathKillStingerQueue[lp_player].lv_killStingerTimer[lv_queueTypeInt], libGame_gv_heroDeathKillStingerQueueTimerDuration, false, c_timeGame);
}

bool libGame_gf_HeroSelectionIsHeroSelectedForAnyPlayer (int lp_heroIndex) {
    int auto7065EDD6_ae;
    int auto7065EDD6_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    auto7065EDD6_ae = libCore_gv_bALMaxPlayers;
    auto7065EDD6_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto7065EDD6_ai >= 0 && lv_itPlayer <= auto7065EDD6_ae) || (auto7065EDD6_ai <= 0 && lv_itPlayer >= auto7065EDD6_ae) ) ; lv_itPlayer += auto7065EDD6_ai ) {
        if ((libGame_gv_players[lv_itPlayer].lv_heroIndex == lp_heroIndex)) {
            return true;
        }

    }
    return false;
}

bool libGame_gf_HeroSelectionIsHeroSelectedForPlayersTeam (int lp_heroIndex, int lp_player) {
    playergroup auto7E1B80E2_g;
    int auto7E1B80E2_p;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto7E1B80E2_g = libGame_gf_AlliedPlayerGroupOfPlayer(lp_player); 
    auto7E1B80E2_p = 1;
    for ( ; auto7E1B80E2_p <= PlayerGroupCount(auto7E1B80E2_g) ; auto7E1B80E2_p += (lv_i == PlayerGroupPlayer(auto7E1B80E2_g, auto7E1B80E2_p)) ) {
        lv_i = PlayerGroupPlayer(auto7E1B80E2_g, auto7E1B80E2_p);
        if ((lv_i != libCore_gv_cOMPUTER_TeamOrder) && (lv_i != libCore_gv_cOMPUTER_TeamChaos) && (libGame_gv_players[lv_i].lv_heroIndex == lp_heroIndex)) {
            return true;
        }

    }
    return false;
}

int libGame_gf_HeroSelectionRandomlyPickAnyUnusedHero (int lp_choosingPlayer, bool lp_allowAnyTier, bool lp_ignoreCheck) {
    int autoDC75D56D_ae;
    int autoDC75D56D_ai;

    // Variable Declarations
    int lv_itHeroIndex;
    int lv_numUnused;

    // Variable Initialization

    // Implementation
    autoDC75D56D_ae = libCore_gv_dataHeroesNumberOfHeroes;
    autoDC75D56D_ai = 1;
    lv_itHeroIndex = 1;
    for ( ; ( (autoDC75D56D_ai >= 0 && lv_itHeroIndex <= autoDC75D56D_ae) || (autoDC75D56D_ai <= 0 && lv_itHeroIndex >= autoDC75D56D_ae) ) ; lv_itHeroIndex += autoDC75D56D_ai ) {
        if ((libGame_gf_HeroSelectionIsHeroSelectedForPlayersTeam(lv_itHeroIndex, lp_choosingPlayer) == false) && ((lp_ignoreCheck == true) || (libCore_gf_MetagameDoesPlayerHaveAccessToHero(lp_choosingPlayer, lv_itHeroIndex) == true)) && ((PlayerType(lp_choosingPlayer) != c_playerTypeComputer) || (lp_allowAnyTier == true) || (libAIAI_gf_HeroAIAIDifficultyLevelShouldUseHero(lp_choosingPlayer, lv_itHeroIndex) == true))) {
            lv_numUnused += 1;
            DataTableSetInt(false, ("RAND_PickHero_" + IntToString(lv_numUnused)), lv_itHeroIndex);
        }

    }
    if ((lv_numUnused == 0)) {
        return 0;
    }

    return DataTableGetInt(false, ("RAND_PickHero_" + IntToString(RandomInt(1, lv_numUnused))));
}

int libGame_gf_HeroSelectionRandomlyPickUnusedHeroWithFilter (int lp_choosingPlayer, bool lp_allowMelee, bool lp_allowTank, bool lp_allowDamage, bool lp_allowSupport, bool lp_allowSiege) {
    int auto6771DB47_ae;
    int auto6771DB47_ai;

    // Variable Declarations
    int lv_itHeroIndex;
    int lv_numUnused;
    bool lv_heroIndex_IsMelee;
    int lv_heroClassInt;
    int lv_heroIndex_Class;

    // Variable Initialization
    lv_heroIndex_Class = c_heroRoleWarrior;

    // Implementation
    auto6771DB47_ae = libCore_gv_dataHeroesNumberOfHeroes;
    auto6771DB47_ai = 1;
    lv_itHeroIndex = 1;
    for ( ; ( (auto6771DB47_ai >= 0 && lv_itHeroIndex <= auto6771DB47_ae) || (auto6771DB47_ai <= 0 && lv_itHeroIndex >= auto6771DB47_ae) ) ; lv_itHeroIndex += auto6771DB47_ai ) {
        lv_heroIndex_IsMelee = (CatalogFieldValueGetAsInt(c_gameCatalogHero, DataTableGetString(true, ("HeroIndex_" + IntToString(lv_itHeroIndex))), "Melee", c_playerAny) != 0);
        lv_heroClassInt = CatalogFieldValueGetAsInt(c_gameCatalogHero, DataTableGetString(true, ("HeroIndex_" + IntToString(lv_itHeroIndex))), "Role", c_playerAny);
        lv_heroIndex_Class = lv_heroClassInt;
        if ((libGame_gf_HeroSelectionIsHeroSelectedForPlayersTeam(lv_itHeroIndex, lp_choosingPlayer) == false) && ((PlayerType(lp_choosingPlayer) != c_playerTypeComputer) || (libAIAI_gf_HeroAIAIDifficultyLevelShouldUseHero(lp_choosingPlayer, lv_itHeroIndex) == true)) && (libCore_gf_MetagameDoesPlayerHaveAccessToHero(lp_choosingPlayer, lv_itHeroIndex) == true) && ((lv_heroIndex_IsMelee == false) || (lp_allowMelee == true)) && ((lv_heroIndex_Class != c_heroRoleWarrior) || (lp_allowTank == true)) && ((lv_heroIndex_Class != c_heroRoleDamage) || (lp_allowDamage == true)) && ((lv_heroIndex_Class != c_heroRoleSupport) || (lp_allowSupport == true)) && ((lv_heroIndex_Class != c_heroRoleSpecialist) || (lp_allowSiege == true))) {
            lv_numUnused += 1;
            DataTableSetInt(false, ("RAND_PickHero_" + IntToString(lv_numUnused)), lv_itHeroIndex);
        }

    }
    if ((lv_numUnused == 0)) {
        return 0;
    }

    return DataTableGetInt(false, ("RAND_PickHero_" + IntToString(RandomInt(1, lv_numUnused))));
}

int libGame_gf_HeroSelectionRandomlyPickComplementaryUnusedHero (int lp_choosingPlayer, bool lp_enemyTeamHasSupport, bool lp_enemyTeamHasWarrior, int lp_enemyTeamRandomCount) {
    int auto16ED23D9_ae;
    int auto16ED23D9_ai;
    playergroup auto7FAE02B5_g;
    int auto7FAE02B5_p;

    // Variable Declarations
    int lv_player;
    int lv_itHeroClass;
    int[libCore_gv_dataHeroesNumberOfHeroClasses + 1] lv_classCount;
    int lv_meleeHeroCount;
    bool lv_allowMelee;
    bool lv_allowTank;
    bool lv_allowDamage;
    bool lv_allowSupport;
    bool lv_allowSiege;
    int lv_warriorSupportCount;
    int lv_itRoleMultiClass;

    // Variable Initialization
    lv_allowTank = true;
    lv_allowDamage = true;
    lv_allowSupport = true;
    lv_allowSiege = true;

    // Implementation
    auto16ED23D9_ae = libCore_gv_bALMaxPlayers;
    auto16ED23D9_ai = 1;
    lv_player = 1;
    for ( ; ( (auto16ED23D9_ai >= 0 && lv_player <= auto16ED23D9_ae) || (auto16ED23D9_ai <= 0 && lv_player >= auto16ED23D9_ae) ) ; lv_player += auto16ED23D9_ai ) {
        if ((PlayerStatus(lv_player) != c_playerStatusUnused) && (libGame_gv_players[lv_player].lv_faction == libGame_gv_players[lp_choosingPlayer].lv_faction) && (libGame_gv_players[lv_player].lv_heroIndex != 0)) {
            if ((libGame_gv_players[lv_player].lv_heroData.lv_isMelee == true)) {
                lv_meleeHeroCount += 1;
            }

            auto7FAE02B5_g = libGame_gv_players[lv_player].lv_heroData.lv_heroRoles; 
            auto7FAE02B5_p = 1;
            for ( ; auto7FAE02B5_p <= PlayerGroupCount(auto7FAE02B5_g) ; auto7FAE02B5_p += (lv_itRoleMultiClass == PlayerGroupPlayer(auto7FAE02B5_g, auto7FAE02B5_p)) ) {
                lv_itRoleMultiClass = PlayerGroupPlayer(auto7FAE02B5_g, auto7FAE02B5_p);
                lv_classCount[lv_itRoleMultiClass] += 1;
            }
        }

    }
    if ((lp_enemyTeamHasSupport == true) && (lv_classCount[(c_heroRoleSupport)] == 0)) {
        lv_allowTank = false;
        lv_allowDamage = false;
        lv_allowSiege = false;
    }
    else if ((lp_enemyTeamHasWarrior == true) && (lv_classCount[(c_heroRoleWarrior)] == 0)) {
        lv_allowSupport = false;
        lv_allowDamage = false;
        lv_allowSiege = false;
    }
    else if ((lv_classCount[(c_heroRoleSupport)] == 0) && (lv_classCount[(c_heroRoleWarrior)] == 0) && (lp_enemyTeamRandomCount > 0)) {
        lv_allowDamage = false;
        lv_allowSiege = false;
    }
    else if ((((lv_classCount[(c_heroRoleSupport)] == 0) && (lp_enemyTeamRandomCount > 0)) || ((lv_classCount[(c_heroRoleWarrior)] == 0) && (lp_enemyTeamRandomCount > 0)) || (lv_classCount[(c_heroRoleDamage)] == 0) || (lv_classCount[(c_heroRoleSpecialist)] == 0))) {
        if ((lv_classCount[(c_heroRoleSupport)] > 0)) {
            lv_warriorSupportCount += 1;
        }

        if ((lv_classCount[(c_heroRoleWarrior)] > 0)) {
            lv_warriorSupportCount += 1;
        }

        if ((lp_enemyTeamRandomCount > lv_warriorSupportCount)) {
            lv_allowSupport = ((lv_classCount[(c_heroRoleSupport)] == 0) && (lp_enemyTeamRandomCount > 0));
            lv_allowTank = ((lv_classCount[(c_heroRoleWarrior)] == 0) && (lp_enemyTeamRandomCount > 0));
        }
        else {
            lv_allowSupport = false;
            lv_allowTank = false;
        }
        lv_allowDamage = (lv_classCount[(c_heroRoleDamage)] == 0);
        lv_allowSiege = (lv_classCount[(c_heroRoleSpecialist)] == 0);
    }
    else if (true) {
        lv_allowSupport = false;
        lv_allowTank = false;
    }
    if ((lv_allowTank == true) && (lv_allowDamage == false) && (lv_allowSupport == false) && (lv_allowSiege == false)) {
        lv_allowMelee = true;
    }
    else {
        lv_allowMelee = (lv_meleeHeroCount < 2);
    }
    return libGame_gf_HeroSelectionRandomlyPickUnusedHeroWithFilter(lp_choosingPlayer, lv_allowMelee, lv_allowTank, lv_allowDamage, lv_allowSupport, lv_allowSiege);
}

int libGame_gf_HeroSelectionRandomlyPickBasedOnEnemyComposition (int lp_choosingPlayer) {
    int auto950627DC_ae;
    int auto950627DC_ai;
    playergroup auto5318CA0F_g;
    int auto5318CA0F_p;

    // Variable Declarations
    int lv_player;
    int[libCore_gv_dataHeroesNumberOfHeroClasses + 1] lv_classCount;
    int lv_itHeroClass;
    bool lv_enemyTeamHasSupport;
    bool lv_enemyTeamHasWarrior;
    int lv_enemyTeamRandomCount;
    int lv_itRoleMultiClass;

    // Variable Initialization

    // Implementation
    auto950627DC_ae = libCore_gv_bALMaxPlayers;
    auto950627DC_ai = 1;
    lv_player = 1;
    for ( ; ( (auto950627DC_ai >= 0 && lv_player <= auto950627DC_ae) || (auto950627DC_ai <= 0 && lv_player >= auto950627DC_ae) ) ; lv_player += auto950627DC_ai ) {
        if ((PlayerStatus(lv_player) != c_playerStatusUnused) && (libGame_gv_players[lv_player].lv_faction != libGame_gv_players[lp_choosingPlayer].lv_faction)) {
            if ((libGame_gv_players[lv_player].lv_heroIndex != 0)) {
                auto5318CA0F_g = libGame_gv_players[lv_player].lv_heroData.lv_heroRoles; 
                auto5318CA0F_p = 1;
                for ( ; auto5318CA0F_p <= PlayerGroupCount(auto5318CA0F_g) ; auto5318CA0F_p += (lv_itRoleMultiClass == PlayerGroupPlayer(auto5318CA0F_g, auto5318CA0F_p)) ) {
                    lv_itRoleMultiClass = PlayerGroupPlayer(auto5318CA0F_g, auto5318CA0F_p);
                    lv_classCount[lv_itRoleMultiClass] += 1;
                }
            }
            else {
                lv_enemyTeamRandomCount += 1;
            }
        }

    }
    if ((lv_classCount[(c_heroRoleSupport)] > 0)) {
        lv_enemyTeamHasSupport = true;
    }

    if ((lv_classCount[(c_heroRoleWarrior)] > 0)) {
        lv_enemyTeamHasWarrior = true;
    }

    return libGame_gf_HeroSelectionRandomlyPickComplementaryUnusedHero(lp_choosingPlayer, lv_enemyTeamHasSupport, lv_enemyTeamHasWarrior, lv_enemyTeamRandomCount);
}

void libGame_gf_HeroSelectionSetBNetHeroAndSkinSelectionsForAllPlayers () {
    int autoB9931724_ae;
    int autoB9931724_ai;

    // Variable Declarations
    int lv_itPlayer;
    string lv_heroLink;
    int lv_heroIndex;
    string lv_skinLink;
    int lv_skinIndex;

    // Variable Initialization

    // Implementation
    autoB9931724_ae = libCore_gv_bALMaxPlayers;
    autoB9931724_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoB9931724_ai >= 0 && lv_itPlayer <= autoB9931724_ae) || (autoB9931724_ai <= 0 && lv_itPlayer >= autoB9931724_ae) ) ; lv_itPlayer += autoB9931724_ai ) {
        lv_heroLink = PlayerHero(lv_itPlayer);
        if (((lv_heroLink == null) || (lv_heroLink == libCore_gv_heroes_RandomHeroID))) {
            continue;
        }

        lv_heroIndex = libCore_gf_GetIndexFromHero(lv_heroLink);
        if ((GameAreHeroDuplicatesAllowed() == false) && (libGame_gf_HeroSelectionIsHeroSelectedForAnyPlayer(lv_heroIndex) == true)) {
            continue;
        }

        if (((libGame_gf_HeroSelectionIsHeroSelectedForPlayersTeam(lv_heroIndex, lv_itPlayer) == false) || ((libCore_gv_dEBUGDebuggingEnabled == true) && (libCore_gv_dEBUGGameIsOnline == false)))) {
            libGame_gv_players[lv_itPlayer].lv_heroIndex = lv_heroIndex;
            libCore_gf_DataLoadHeroDataIntoIndex(libCore_gf_GetHeroFromIndex(libGame_gv_players[lv_itPlayer].lv_heroIndex), lv_itPlayer);
            if (((libCore_gv_sYSGameMode != libCore_ge_GameModes_TryMe) && ((libGame_gv_players[lv_itPlayer].lv_heroIndex == libCore_gf_GetIndexFromHero("Gall")) || (libGame_gv_players[lv_itPlayer].lv_heroIndex == libCore_gf_GetIndexFromHero("Cho"))))) {
                libGame_gf_ChoGallSkinSelection(lv_itPlayer);
                continue;
            }

            lv_skinLink = PlayerSkin(lv_itPlayer);
            if ((lv_skinLink == libCore_gv_heroes_RandomSkinID)) {
                libGame_gf_HeroSelectionRandomlyPickSkin(lv_itPlayer);
                continue;
            }

            if ((lv_skinLink != null)) {
                lv_skinIndex = libCore_gf_DataSkinsGetSkinIndexFromSkinLink(lv_skinLink);
                if ((libCore_gf_DataSkinsIsSkinValidForHero(lv_itPlayer, lv_skinIndex) == true)) {
                    libGame_gv_players[lv_itPlayer].lv_selectedSkin = lv_skinIndex;
                    libCore_gf_DataLoadSkinDataIntoIndex(lv_skinLink, lv_itPlayer);
                }

            }

        }

    }
}

void libGame_gf_HeroSelectionSetBNetMountSelectionsForAllPlayers () {
    int auto56229722_ae;
    int auto56229722_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_heroIndex;
    string lv_mountLink;
    bool lv_defaultFallback;
    int lv_skinIndex;
    int lv_mountIndex;
    int lv_mountConfigIndex;

    // Variable Initialization

    // Implementation
    auto56229722_ae = libCore_gv_bALMaxPlayers;
    auto56229722_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto56229722_ai >= 0 && lv_itPlayer <= auto56229722_ae) || (auto56229722_ai <= 0 && lv_itPlayer >= auto56229722_ae) ) ; lv_itPlayer += auto56229722_ai ) {
        lv_defaultFallback = false;
        lv_heroIndex = lv_itPlayer;
        lv_mountLink = PlayerMount(lv_itPlayer);
        if (((libGame_gv_players[lv_itPlayer].lv_heroIndex == libCore_gf_GetIndexFromHero("Gall")) || (libGame_gv_players[lv_itPlayer].lv_heroIndex == libCore_gf_GetIndexFromHero("Cho")))) {
            continue;
        }

        if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_usesMounts == false)) {
            continue;
        }

        if ((lv_mountLink == libCore_gv_heroes_RandomMountID)) {
            libGame_gf_HeroSelectionRandomlyPickMount(lv_itPlayer);
            continue;
        }

        if ((lv_mountLink != null)) {
            lv_skinIndex = libGame_gv_players[lv_itPlayer].lv_selectedSkin;
            lv_mountIndex = libCore_gf_DataMountGetMountIndexFromMountLink(lv_mountLink);
            if ((libCore_gf_DataMountMountIsValidForHeroSkin(libGame_gv_players[lv_itPlayer].lv_heroIndex, lv_skinIndex, lv_mountIndex) == true)) {
                libGame_gv_players[lv_itPlayer].lv_selectedMount = lv_mountIndex;
            }
            else {
                lv_defaultFallback = true;
            }
        }
        else {
            lv_defaultFallback = true;
        }
        if ((lv_defaultFallback == true)) {
            lv_mountLink = libGame_gv_players[lv_heroIndex].lv_heroData.lv_defaultMount;
            lv_mountIndex = libCore_gf_DataMountGetMountIndexFromMountLink(lv_mountLink);
            libGame_gv_players[lv_itPlayer].lv_selectedMount = lv_mountIndex;
        }

        lv_mountConfigIndex = libCore_gf_DataMountGetMountConfigIndexFromMountLink(lv_mountLink);
        libCore_gf_DataMountsLoadMountDataIntoIndex(lv_mountLink, libCore_gf_DataMountGetMountModelScaleAtConfigIndex(lv_mountConfigIndex), libCore_gf_DataMountGetMountWalkAnimSpeedAtConfigIndex(lv_mountConfigIndex), libCore_gf_DataMountGetMountPoseAnimGroupAtConfigIndex(lv_mountConfigIndex), lv_itPlayer);
        PlayerSetMount(lv_itPlayer, libGame_gv_players[lv_itPlayer].lv_mountData.lv_mountID);
    }
}

void libGame_gf_HeroSelectionComputersRandomlyPickSkinsMounts () {
    int autoD4F61831_ae;
    int autoD4F61831_ai;

    // Variable Declarations
    int lv_itPlayer;
    bool lv_hasPickedRandomAISkinOrder;
    bool lv_hasPickedRandomAIMountOrder;
    bool lv_hasPickedRandomAISkinChaos;
    bool lv_hasPickedRandomAIMountChaos;

    // Variable Initialization

    // Implementation
    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_Tutorial1)) {
        return ;
    }

    autoD4F61831_ae = libCore_gv_bALMaxPlayers;
    autoD4F61831_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoD4F61831_ai >= 0 && lv_itPlayer <= autoD4F61831_ae) || (autoD4F61831_ai <= 0 && lv_itPlayer >= autoD4F61831_ae) ) ; lv_itPlayer += autoD4F61831_ai ) {
        if ((PlayerType(lv_itPlayer) == c_playerTypeComputer) && ((libAIAI_gv_aIHeroes[lv_itPlayer].lv_difficulty == libAIAI_ge_HeroAIDifficulty_HeroAIMedium) || (libAIAI_gv_aIHeroes[lv_itPlayer].lv_difficulty == libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard) || (libAIAI_gv_aIHeroes[lv_itPlayer].lv_difficulty == libAIAI_ge_HeroAIDifficulty_HeroAIElite))) {
            if ((libGame_gv_players[lv_itPlayer].lv_faction == libGame_ge_Faction_Order)) {
                if ((lv_hasPickedRandomAISkinOrder == false)) {
                    libGame_gf_HeroSelectionRandomlyPickSkin(lv_itPlayer);
                    if ((libAIAI_gv_aIHeroes[lv_itPlayer].lv_difficulty == libAIAI_ge_HeroAIDifficulty_HeroAIMedium)) {
                        lv_hasPickedRandomAISkinOrder = true;
                    }

                }
                else {
                    if ((lv_hasPickedRandomAIMountOrder == false)) {
                        libGame_gf_HeroSelectionRandomlyPickMount(lv_itPlayer);
                        if ((libAIAI_gv_aIHeroes[lv_itPlayer].lv_difficulty == libAIAI_ge_HeroAIDifficulty_HeroAIMedium)) {
                            lv_hasPickedRandomAIMountOrder = true;
                        }

                    }

                }
            }
            else {
                if ((lv_hasPickedRandomAISkinChaos == false)) {
                    libGame_gf_HeroSelectionRandomlyPickSkin(lv_itPlayer);
                    if ((libAIAI_gv_aIHeroes[lv_itPlayer].lv_difficulty == libAIAI_ge_HeroAIDifficulty_HeroAIMedium)) {
                        lv_hasPickedRandomAISkinChaos = true;
                    }

                }
                else {
                    if ((lv_hasPickedRandomAIMountChaos == false)) {
                        libGame_gf_HeroSelectionRandomlyPickMount(lv_itPlayer);
                        if ((libAIAI_gv_aIHeroes[lv_itPlayer].lv_difficulty == libAIAI_ge_HeroAIDifficulty_HeroAIMedium)) {
                            lv_hasPickedRandomAIMountChaos = true;
                        }

                    }

                }
            }
        }

    }
}

void libGame_gf_HeroSelectionRandomlyPickSkin (int lp_choosingPlayer) {
    int auto2E01BCDC_ae;
    int auto2E01BCDC_ai;

    // Variable Declarations
    int lv_itSkin;
    int lv_allowedSkinCount;
    int lv_randomChoice;
    string lv_skinLink;
    int lv_index;

    // Variable Initialization

    // Implementation
    lv_index = lp_choosingPlayer;
    if ((libGame_gv_players[lv_index].lv_heroData.lv_skinCount < 2)) {
        return ;
    }

    auto2E01BCDC_ae = libGame_gv_players[lv_index].lv_heroData.lv_skinCount;
    auto2E01BCDC_ai = 1;
    lv_itSkin = 1;
    for ( ; ( (auto2E01BCDC_ai >= 0 && lv_itSkin <= auto2E01BCDC_ae) || (auto2E01BCDC_ai <= 0 && lv_itSkin >= auto2E01BCDC_ae) ) ; lv_itSkin += auto2E01BCDC_ai ) {
        if (((PlayerType(lp_choosingPlayer) == c_playerTypeComputer) || (libCore_gf_MetagameDoesPlayerHaveAccessToSkin(lp_choosingPlayer, libCore_gf_DataSkinsGetSkinIndexFromSkinLink(libGame_gv_players[lv_index].lv_heroData.lv_skinArray[lv_itSkin])) == true))) {
            lv_allowedSkinCount += 1;
            DataTableSetInt(false, ("RAND_PickSkin_" + IntToString(lv_allowedSkinCount)), lv_itSkin);
        }

    }
    if ((lv_allowedSkinCount < 2)) {
        return ;
    }

    lv_randomChoice = RandomInt(2, lv_allowedSkinCount);
    lv_skinLink = libGame_gv_players[lv_index].lv_heroData.lv_skinArray[DataTableGetInt(false, ("RAND_PickSkin_" + IntToString(lv_randomChoice)))];
    libGame_gv_players[lp_choosingPlayer].lv_selectedSkin = libCore_gf_DataSkinsGetSkinIndexFromSkinLink(lv_skinLink);
    libCore_gf_DataLoadSkinDataIntoIndex(lv_skinLink, lv_index);
    PlayerSetSkin(lp_choosingPlayer, libGame_gv_players[lv_index].lv_skinData.lv_skinID);
}

void libGame_gf_HeroSelectionRandomlyPickMount (int lp_choosingPlayer) {
    int auto1203A014_ae;
    int auto1203A014_ai;
    int auto7695663F_ae;
    int auto7695663F_ai;

    // Variable Declarations
    int lv_itMount;
    int lv_itMountCategory;
    int lv_allowedMountCount;
    int lv_randomChoiceIndex;
    int lv_index;
    string lv_mountCategoryStr;
    int lv_randomCategoryMountIndex;
    string lv_randomCategoryMountStr;
    string lv_chosenMountLink;
    int lv_chosenMountIndex;
    int lv_chosenMountConfigIndex;

    // Variable Initialization
    lv_mountCategoryStr = "";
    lv_randomCategoryMountStr = "";

    // Implementation
    lv_index = lp_choosingPlayer;
    if (((libCore_gv_dataMountsMountCount < 2) || (libGame_gv_players[lv_index].lv_heroData.lv_usesMounts == false))) {
        return ;
    }

    auto1203A014_ae = DataTableGetInt(true, ("HeroIndex_" + IntToString(libGame_gv_players[lp_choosingPlayer].lv_heroIndex) + "_MountCategoryCount"));
    auto1203A014_ai = 1;
    lv_itMountCategory = 1;
    for ( ; ( (auto1203A014_ai >= 0 && lv_itMountCategory <= auto1203A014_ae) || (auto1203A014_ai <= 0 && lv_itMountCategory >= auto1203A014_ae) ) ; lv_itMountCategory += auto1203A014_ai ) {
        lv_mountCategoryStr = DataTableGetString(true, ("HeroIndex_" + IntToString(libGame_gv_players[lp_choosingPlayer].lv_heroIndex) + "_MountCategoryIndex_" + IntToString(lv_itMountCategory)));
        auto7695663F_ae = DataTableGetInt(true, ("Mounts_MountCategory_" + lv_mountCategoryStr + "_MountCount"));
        auto7695663F_ai = 1;
        lv_itMount = 1;
        for ( ; ( (auto7695663F_ai >= 0 && lv_itMount <= auto7695663F_ae) || (auto7695663F_ai <= 0 && lv_itMount >= auto7695663F_ae) ) ; lv_itMount += auto7695663F_ai ) {
            lv_chosenMountIndex = DataTableGetInt(true, ("Mounts_MountCategory_" + lv_mountCategoryStr + "_Index_" + IntToString(lv_itMount) + "_Index"));
            if ((((PlayerType(lp_choosingPlayer) == c_playerTypeComputer) || (libCore_gf_MetagameDoesPlayerHaveAccessToMount(lp_choosingPlayer, lv_chosenMountIndex) == true)) && (libCore_gf_DataMountMountIsValidForHeroSkin(libGame_gv_players[lp_choosingPlayer].lv_heroIndex, libGame_gv_players[lp_choosingPlayer].lv_selectedSkin, lv_chosenMountIndex) == true))) {
                lv_allowedMountCount += 1;
                DataTableSetInt(false, ("RAND_PickMount_" + IntToString(lv_allowedMountCount)), lv_chosenMountIndex);
            }

        }
    }
    lv_chosenMountIndex = RandomInt(1, lv_allowedMountCount);
    lv_chosenMountLink = libCore_gf_DataSkinsGetMountLinkFromMountIndex(DataTableGetInt(false, ("RAND_PickMount_" + IntToString(lv_chosenMountIndex))));
    libGame_gv_players[lp_choosingPlayer].lv_selectedMount = lv_chosenMountIndex;
    lv_chosenMountConfigIndex = libCore_gf_DataMountGetMountConfigIndexFromMountLink(lv_chosenMountLink);
    libCore_gf_DataMountsLoadMountDataIntoIndex(lv_chosenMountLink, libCore_gf_DataMountGetMountModelScaleAtConfigIndex(lv_chosenMountConfigIndex), libCore_gf_DataMountGetMountWalkAnimSpeedAtConfigIndex(lv_chosenMountConfigIndex), libCore_gf_DataMountGetMountPoseAnimGroupAtConfigIndex(lv_chosenMountConfigIndex), lp_choosingPlayer);
    PlayerSetMount(lp_choosingPlayer, libGame_gv_players[lp_choosingPlayer].lv_mountData.lv_mountID);
}

void libGame_gf_HeroRefreshCooldowns (int lp_player, bool lp_resetPlayerHeroUnits) {
    unitgroup auto30FAF137_g;
    int auto30FAF137_u;
    int auto342EB673_ae;
    int auto342EB673_ai;
    int auto4F156570_ae;

    // Variable Declarations
    int lv_itAbility;
    unit lv_itUnit;
    int lv_heroIndex;
    string lv_abilLink;
    string lv_cooldownLink;
    string lv_chargeLink;
    int lv_chargeCount;
    string lv_itemUnitType;
    int lv_itemIndex;
    int lv_currentRank;
    int lv_itItems;
    int lv_itAbilitiesOnItems;
    string lv_itemLink;
    unitgroup lv_unitGroup;

    // Variable Initialization
    lv_cooldownLink = "";
    lv_chargeLink = "";
    lv_unitGroup = UnitGroupEmpty();

    // Implementation
    if ((lp_resetPlayerHeroUnits == true)) {
        lv_unitGroup = libGame_gv_players[lp_player].lv_heroUnitGroup;
    }
    else {
        lv_unitGroup = UnitGroupSelected(lp_player);
    }
    auto30FAF137_g = lv_unitGroup;
    auto30FAF137_u = 1;
    for ( ; auto30FAF137_u <= UnitGroupCount(auto30FAF137_g, c_unitCountAll) ; auto30FAF137_u += (lv_itUnit == UnitGroupUnit(auto30FAF137_g, auto30FAF137_u)) ) {
        lv_itUnit = UnitGroupUnit(auto30FAF137_g, auto30FAF137_u);
        if ((libGame_gf_UnitIsHero(lv_itUnit) == true)) {
            lv_heroIndex = libCore_gf_GetHeroIndexForUnitType(UnitGetType(lv_itUnit));
        }
        else {
            if (((UnitGetType(lv_itUnit) == "TargetHeroDummyFreddie") || (UnitGetType(lv_itUnit) == "TargetHeroDummy") || (UnitGetType(lv_itUnit) == "AbathurSymbiote") || (UnitGetType(lv_itUnit) == "RagnarosBigRag"))) {
                libSprt_gf_DEBUGRefreshCooldownsforUnit(lp_player, lv_itUnit);
                continue;
            }
            else {
                continue;
            }
        }
        auto342EB673_ae = libGame_gv_players[lv_heroIndex].lv_heroData.lv_numberOfAbilities;
        auto342EB673_ai = 1;
        lv_itAbility = 1;
        for ( ; ( (auto342EB673_ai >= 0 && lv_itAbility <= auto342EB673_ae) || (auto342EB673_ai <= 0 && lv_itAbility >= auto342EB673_ae) ) ; lv_itAbility += auto342EB673_ai ) {
            if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_isAffectedByCooldownReduction == true)) {
                lv_abilLink = libGame_gv_players[lv_heroIndex].lv_heroData.lv_abilities[lv_itAbility].lv_ability;
                lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.Link", UnitGetOwner(lv_itUnit));
                libNtve_gf_UnitRemoveCooldown(lv_itUnit, lv_cooldownLink);
                libNtve_gf_PlayerRemoveCooldown(lp_player, lv_cooldownLink);
                lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Charge.Link", UnitGetOwner(lv_itUnit));
                lv_chargeCount = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Charge.CountMax", UnitGetOwner(lv_itUnit));
                UnitAddChargeUsed(lv_itUnit, lv_chargeLink, (-lv_chargeCount));
                PlayerAddChargeUsed(lp_player, lv_cooldownLink, (-lv_chargeCount));
            }

        }
        auto4F156570_ae = UnitInventoryCount(lv_itUnit, c_unitInventoryCountCarried);
        lv_itItems = 1;
        for ( ; lv_itItems <= auto4F156570_ae ; lv_itItems += 1 ) {
            lv_itemUnitType = UnitGetType(UnitInventoryItem(lv_itUnit, lv_itItems));
            lv_itemLink = (CatalogFieldValueGet(c_gameCatalogUnit, lv_itemUnitType, "Item", c_playerAny));
            lv_abilLink = (CatalogFieldValueGet(c_gameCatalogItem, lv_itemLink, "Abil", c_playerAny));
            lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Cooldown.Link", UnitGetOwner(lv_itUnit));
            libNtve_gf_UnitRemoveCooldown(lv_itUnit, lv_cooldownLink);
            libNtve_gf_PlayerRemoveCooldown(lp_player, lv_cooldownLink);
            lv_chargeLink = CatalogFieldValueGet(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Charge.Link", UnitGetOwner(lv_itUnit));
            lv_chargeCount = CatalogFieldValueGetAsInt(c_gameCatalogAbil, lv_abilLink, "Cost[" + IntToString(0) + "].Charge.CountMax", UnitGetOwner(lv_itUnit));
            UnitAddChargeUsed(lv_itUnit, lv_chargeLink, (-lv_chargeCount));
        }
    }
    libGame_gf_SendEventSpecialCaseTalentCooldownReset(lp_player);
}

void libGame_gf_CalculateClosestLaneDataForLane (point lp_testPoint, int lp_curLane) {
    // Variable Declarations

    // Variable Initialization

    // Implementation
    AILaneWaypointCalcClosestDataForLane(lp_curLane, lp_testPoint);
    libGame_gv_closestLaneData.lv_laneData[lp_curLane].lv_closestIndex = AILaneWaypointGetCalcDataClosestWaypointIndex();
    libGame_gv_closestLaneData.lv_laneData[lp_curLane].lv_secondaryIndex = AILaneWaypointGetCalcDataSecondWaypointIndex();
    libGame_gv_closestLaneData.lv_laneData[lp_curLane].lv_closestPoint = AILaneWaypointGetCalcDataClosestPoint();
    libGame_gv_closestLaneData.lv_laneData[lp_curLane].lv_closestDist = AILaneWaypointGetCalcDataClosestDist();
}

void libGame_gf_CalculateClosestLaneData (point lp_testPoint) {
    int auto0EE20048_ae;
    int auto0EE20048_ai;

    // Variable Declarations
    int lv_curLane;
    int lv_curWaypointIndex;
    point lv_curWaypoint;
    fixed lv_curDist;
    fixed lv_tempBestDistance;
    point lv_tempClosestPoint;
    int lv_closestIndex;
    point lv_closestWaypoint;
    int lv_secondaryIndex;
    point lv_secondaryWaypoint;
    point lv_closestPoint;
    fixed lv_finalBestDistanceAnyLane;
    fixed lv_finalBestDistanceMinionLane;

    // Variable Initialization

    // Implementation
    lv_finalBestDistanceAnyLane = 524287.0;
    lv_finalBestDistanceMinionLane = 524287.0;
    libGame_gv_closestLaneData.lv_closestLane = 0;
    libGame_gv_closestLaneData.lv_closestMinionLane = 0;
    auto0EE20048_ae = libGame_gv_laneCount;
    auto0EE20048_ai = 1;
    lv_curLane = 1;
    for ( ; ( (auto0EE20048_ai >= 0 && lv_curLane <= auto0EE20048_ae) || (auto0EE20048_ai <= 0 && lv_curLane >= auto0EE20048_ae) ) ; lv_curLane += auto0EE20048_ai ) {
        libGame_gf_CalculateClosestLaneDataForLane(lp_testPoint, lv_curLane);
        if ((libGame_gv_closestLaneData.lv_laneData[lv_curLane].lv_closestDist < lv_finalBestDistanceAnyLane)) {
            libGame_gv_closestLaneData.lv_closestLane = lv_curLane;
            lv_finalBestDistanceAnyLane = libGame_gv_closestLaneData.lv_laneData[lv_curLane].lv_closestDist;
        }

        if ((libGame_gv_laneData[lv_curLane].lv_minionSpawningEnabled == true) && (libGame_gv_closestLaneData.lv_laneData[lv_curLane].lv_closestDist < lv_finalBestDistanceMinionLane)) {
            libGame_gv_closestLaneData.lv_closestMinionLane = lv_curLane;
            lv_finalBestDistanceMinionLane = libGame_gv_closestLaneData.lv_laneData[lv_curLane].lv_closestDist;
        }

    }
}

bool libGame_gf_LaneIndexIsValid (int lp_laneIndex) {
    // Implementation
    if (((lp_laneIndex > 0) || (lp_laneIndex == libGame_gv_laneCustomLane))) {
        return true;
    }
    else {
        return false;
    }
}

void libGame_gf_SetStormMapLighting (string lp_lighting, playergroup lp_players, fixed lp_blendtime) {
    playergroup auto5C10B9E8_g;
    int auto5C10B9E8_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    auto5C10B9E8_g = lp_players; 
    auto5C10B9E8_p = 1;
    for ( ; auto5C10B9E8_p <= PlayerGroupCount(auto5C10B9E8_g) ; auto5C10B9E8_p += (lv_itPlayer == PlayerGroupPlayer(auto5C10B9E8_g, auto5C10B9E8_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto5C10B9E8_g, auto5C10B9E8_p);
        if (((lv_itPlayer == libCore_gv_oBSERVER_ObserverUIPlayer) || ((lv_itPlayer >= 1) && (lv_itPlayer <= libCore_gv_bALMaxPlayers)))) {
            if ((lp_lighting == libGame_gv_stormMapLightingCurrent[lv_itPlayer])) {
                continue;
            }

            libGame_gv_stormMapLightingCurrent[lv_itPlayer] = lp_lighting;
            PlayerSetLighting(lv_itPlayer, lp_lighting, lp_blendtime);
        }

    }
}

void libGame_gf_UpdateStormMapLighting (playergroup lp_players, fixed lp_blendtime) {
    playergroup autoB63EDD43_g;
    int autoB63EDD43_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    autoB63EDD43_g = lp_players; 
    autoB63EDD43_p = 1;
    for ( ; autoB63EDD43_p <= PlayerGroupCount(autoB63EDD43_g) ; autoB63EDD43_p += (lv_itPlayer == PlayerGroupPlayer(autoB63EDD43_g, autoB63EDD43_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoB63EDD43_g, autoB63EDD43_p);
        if (((lv_itPlayer == libCore_gv_oBSERVER_ObserverUIPlayer) || ((lv_itPlayer >= 1) && (lv_itPlayer <= libCore_gv_bALMaxPlayers)))) {
            if ((libGame_gv_stormMapLightingSpecial[lv_itPlayer] != null)) {
                libGame_gf_SetStormMapLighting(libGame_gv_stormMapLightingSpecial[lv_itPlayer], PlayerGroupSingle(lv_itPlayer), lp_blendtime);
            }
            else {
                libGame_gf_SetStormMapLighting(libCore_gv_mAPMapLight, PlayerGroupSingle(lv_itPlayer), lp_blendtime);
            }
        }

    }
}

void libGame_gf_SpecialLightingEventStart (string lp_lighting, playergroup lp_players, fixed lp_blendtime) {
    playergroup autoA44B11C0_g;
    int autoA44B11C0_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    autoA44B11C0_g = lp_players; 
    autoA44B11C0_p = 1;
    for ( ; autoA44B11C0_p <= PlayerGroupCount(autoA44B11C0_g) ; autoA44B11C0_p += (lv_itPlayer == PlayerGroupPlayer(autoA44B11C0_g, autoA44B11C0_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoA44B11C0_g, autoA44B11C0_p);
        if (((lv_itPlayer == libCore_gv_oBSERVER_ObserverUIPlayer) || ((lv_itPlayer >= 1) && (lv_itPlayer <= libCore_gv_bALMaxPlayers)))) {
            libGame_gv_stormMapLightingSpecial[lv_itPlayer] = lp_lighting;
            libGame_gf_UpdateStormMapLighting(PlayerGroupSingle(lv_itPlayer), lp_blendtime);
        }

    }
}

void libGame_gf_SpecialLightingEventEnd (string lp_lighting, playergroup lp_players, fixed lp_blendtime) {
    playergroup auto08F890C8_g;
    int auto08F890C8_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    auto08F890C8_g = lp_players; 
    auto08F890C8_p = 1;
    for ( ; auto08F890C8_p <= PlayerGroupCount(auto08F890C8_g) ; auto08F890C8_p += (lv_itPlayer == PlayerGroupPlayer(auto08F890C8_g, auto08F890C8_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto08F890C8_g, auto08F890C8_p);
        if (((lv_itPlayer == libCore_gv_oBSERVER_ObserverUIPlayer) || ((lv_itPlayer >= 1) && (lv_itPlayer <= libCore_gv_bALMaxPlayers)))) {
            if ((libGame_gv_stormMapLightingSpecial[lv_itPlayer] == null)) {
                continue;
            }

            if ((libGame_gv_stormMapLightingSpecial[lv_itPlayer] != lp_lighting)) {
                continue;
            }

            libGame_gv_stormMapLightingSpecial[lv_itPlayer] = null;
            libGame_gf_UpdateStormMapLighting(PlayerGroupSingle(lv_itPlayer), lp_blendtime);
        }

    }
}

int libGame_gf_MinionDetermineWaveComposition (int lp_lane, int lp_team) {
    // Implementation
    if ((libUIUI_gv_uIDebugPanelForceMinionWaveComp == true)) {
        return libCore_ge_MinionWaveCompositionsTypes_Null;
    }

    return libGame_gv_laneData[lp_lane].lv_minionCompositions[lp_team];
}

bool libGame_gf_MinionSystemStarted () {
    // Implementation
    return libGame_gv_minionSystemStarted;
}

void libGame_gf_MinionEnableDisableWaveCompositionType (bool lp_enableDisable, int lp_compositionType) {
    // Implementation
    if ((lp_enableDisable == true)) {
        libCore_gv_dataMinionWaveCompositions[(lp_compositionType)].lv_enabled = true;
    }
    else {
        libCore_gv_dataMinionWaveCompositions[(lp_compositionType)].lv_enabled = false;
    }
}

void libGame_gf_MinionTurnOnOffCatapults (bool lp_onOff) {
    bool auto791B4420_val;

    // Implementation
    auto791B4420_val = lp_onOff;
    if (auto791B4420_val == true) {
        libGame_gv_minionMapNeverSpawnsCatapults = false;
    }
    else if (auto791B4420_val == false) {
        libGame_gv_minionMapNeverSpawnsCatapults = true;
    }
    else {
    }
}

void libGame_gf_MinionStartStopMinionSystem (bool lp_startStop) {
    // Implementation
    if ((lp_startStop == true)) {
        if ((libCore_gv_sYSMinionAI == false)) {
            return ;
        }

        if ((libGame_gv_minionSystemStarted == false)) {
            libGame_gv_minionSystemStarted = true;
            libGame_gv_minionSystemPaused = false;
            libAIAI_gf_MinionAITurnMinionAISystemOnOff(true);
        }

    }
    else {
        libGame_gv_minionSystemStarted = false;
        libGame_gf_MinionStartStopMinionSpawnCycle(false);
        libAIAI_gf_MinionAITurnMinionAISystemOnOff(false);
    }
}

void libGame_gf_MinionStartStopMinionSpawnCycle (bool lp_startStop) {
    // Implementation
    if ((lp_startStop == true)) {
        TriggerExecute(libGame_gt_MinionSpawnCycle, true, false);
    }
    else {
        TriggerStop(libGame_gt_MinionSpawnCycle);
    }
}

void libGame_gf_MinionPauseUnpauseMinionSystem (bool lp_pauseUnpause) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_minionSystemStarted == true)) {
        if ((lp_pauseUnpause == true)) {
            libGame_gv_minionSystemPaused = true;
            libGame_gv_minionSpawningEnabled = false;
            TimerPause(libGame_gv_scalingTimer, true);
            libAIAI_gf_MinionAIPauseUnpauseMinionAISystem(true);
        }
        else {
            libGame_gv_minionSystemPaused = false;
            libGame_gv_minionSpawningEnabled = true;
            if ((libGame_gv_minionScalingEnabled == true)) {
                TimerPause(libGame_gv_scalingTimer, false);
            }

            libAIAI_gf_MinionAIPauseUnpauseMinionAISystem(false);
        }
    }

}

void libGame_gf_MinionPauseUnpauseMinionSystemForTeam (bool lp_pauseUnpause, int lp_team, int lp_lane) {
    int autoAA4AEC98_ae;
    int autoAA4AEC98_ai;
    int autoDC652BA1_ae;
    int autoDC652BA1_ai;

    // Variable Declarations
    int lv_itLane;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_minionSystemStarted == true)) {
        if ((lp_pauseUnpause == true)) {
            if ((lp_lane == libGame_ge_AllLanes_AllLanes)) {
                autoDC652BA1_ae = libGame_gv_laneCount;
                autoDC652BA1_ai = 1;
                lv_itLane = 1;
                for ( ; ( (autoDC652BA1_ai >= 0 && lv_itLane <= autoDC652BA1_ae) || (autoDC652BA1_ai <= 0 && lv_itLane >= autoDC652BA1_ae) ) ; lv_itLane += autoDC652BA1_ai ) {
                    libGame_gv_minionSystemPausedAdvanced[lp_team][lv_itLane] = true;
                }
            }
            else {
                libGame_gv_minionSystemPausedAdvanced[lp_team][lp_lane] = true;
            }
        }
        else {
            if ((lp_lane == libGame_ge_AllLanes_AllLanes)) {
                autoAA4AEC98_ae = libGame_gv_laneCount;
                autoAA4AEC98_ai = 1;
                lv_itLane = 1;
                for ( ; ( (autoAA4AEC98_ai >= 0 && lv_itLane <= autoAA4AEC98_ae) || (autoAA4AEC98_ai <= 0 && lv_itLane >= autoAA4AEC98_ae) ) ; lv_itLane += autoAA4AEC98_ai ) {
                    libGame_gv_minionSystemPausedAdvanced[lp_team][lv_itLane] = false;
                }
            }
            else {
                libGame_gv_minionSystemPausedAdvanced[lp_team][lp_lane] = false;
            }
        }
    }

}

void libGame_gf_MinionSpawnMinion (int lp_lane, int lp_owner, int lp_type, point lp_spawnPoint) {
    // Variable Declarations
    int lv_team;
    int lv_bruiserLevel;
    string lv_spawnUnitType;
    int lv_minionTypeIndex;

    // Variable Initialization

    // Implementation
    if (((libGame_gv_gameOver == true) || (libGame_gv_minionSpawningEnabled == false))) {
        return ;
    }

    if ((lp_owner == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_team = 1;
    }
    else {
        lv_team = 2;
    }
    lv_spawnUnitType = libCore_gf_DataMinionUnitTypeFromPreset(lp_type);
    if ((lv_spawnUnitType == null)) {
        return ;
    }

    if (((libGame_gf_TownAliveinLane(libGame_gf_EnemyTeam(lv_team), lp_lane) == true) || (libGame_gv_minionMapNeverSpawnsCatapults == true) || ((libGame_gv_minion_CapCatapults == true) && (UnitGroupCount(libGame_gv_minion_CatapultGroup[lv_team], c_unitCountAlive) > libGame_gv_minion_CatapultCap_C))) && ((lp_type == libCore_ge_MinionTypes_Catapult) || (lp_type == libCore_ge_MinionTypes_CustomCatapult1) || (lp_type == libCore_ge_MinionTypes_CustomCatapult2))) {
        return ;
    }
    else {
        if ((libGame_gv_minionMapNeverSpawnsCatapults == false) && (libGame_gf_TownAliveinLane(libGame_gf_EnemyTeam(lv_team), lp_lane) == false) && ((lp_type == libCore_ge_MinionTypes_Catapult) || (lp_type == libCore_ge_MinionTypes_CustomCatapult1) || (lp_type == libCore_ge_MinionTypes_CustomCatapult2)) && (libGame_gv_minionStaggerCatapultSpawning == true)) {
            if ((libGame_gv_minion_SpawnStaggeredCatapult[lv_team][lp_lane] == false)) {
                libGame_gv_minion_SpawnStaggeredCatapult[lv_team][lp_lane] = true;
                return ;
            }
            else {
                libGame_gv_minion_SpawnStaggeredCatapult[lv_team][lp_lane] = false;
            }
        }

    }
    libNtve_gf_CreateUnitsAtPoint2(1, lv_spawnUnitType, 0, lp_owner, lp_spawnPoint);
    if ((libGame_gv_minion_CapCatapults == true) && ((lp_type == libCore_ge_MinionTypes_Catapult) || (lp_type == libCore_ge_MinionTypes_CustomCatapult1) || (lp_type == libCore_ge_MinionTypes_CustomCatapult2))) {
        UnitGroupAdd(libGame_gv_minion_CatapultGroup[lv_team], UnitLastCreated());
    }

    if ((libGame_gv_minionTakesReducedSpellDamage == true)) {
        UnitBehaviorAdd(UnitLastCreated(), "MinionSpellDamageReduction", UnitLastCreated(), 1);
    }

    if ((libGame_gv_minionScalingEnabled == true)) {
        lv_minionTypeIndex = (lp_type);
        libGame_gf_UpdateScalingForUnit(UnitLastCreated(), libGame_gv_scalingTicks, 0);
    }

    libGame_gf_CalculateSpawnedMinionGoalPoints(lp_owner, lp_spawnPoint);
    libAIAI_gf_MinionAIStartMinionAI(-1, UnitLastCreated(), lp_lane, libGame_gv_spawnedMinionFirstWaypointIndex, false, false, false, 0, false);
    libGame_gf_SendEventMinionGroupCreated(UnitLastCreatedGroup());
    if ((libMapM_gv_mMRavenTeamStats[libGame_gf_TeamNumberOfPlayer(lp_owner)].lv_cursed == true)) {
        libMapM_gf_MMRavenApplyCurseEffectOnMinion(UnitLastCreated());
    }

}

trigger auto_libGame_gf_MinionSpawnWave_Trigger = null;
int auto_libGame_gf_MinionSpawnWave_lp_lane;
int auto_libGame_gf_MinionSpawnWave_lp_owner;
int auto_libGame_gf_MinionSpawnWave_lp_composition;

void libGame_gf_MinionSpawnWave (int lp_lane, int lp_owner, int lp_composition) {
    auto_libGame_gf_MinionSpawnWave_lp_lane = lp_lane;
    auto_libGame_gf_MinionSpawnWave_lp_owner = lp_owner;
    auto_libGame_gf_MinionSpawnWave_lp_composition = lp_composition;

    if (auto_libGame_gf_MinionSpawnWave_Trigger == null) {
        auto_libGame_gf_MinionSpawnWave_Trigger = TriggerCreate("auto_libGame_gf_MinionSpawnWave_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_MinionSpawnWave_Trigger, false, false);
}

bool auto_libGame_gf_MinionSpawnWave_TriggerFunc (bool testConds, bool runActions) {
    int lp_lane = auto_libGame_gf_MinionSpawnWave_lp_lane;
    int lp_owner = auto_libGame_gf_MinionSpawnWave_lp_owner;
    int lp_composition = auto_libGame_gf_MinionSpawnWave_lp_composition;

    int autoB77C7225_ae;
    int autoB77C7225_ai;
    int autoEFB6C6D3_ae;
    int autoEFB6C6D3_ai;

    // Variable Declarations
    const fixed lv_offsetChangePerGroup = 1.875;
    int lv_itGroup;
    int lv_itMinion;
    int lv_groupCount;
    point lv_basePoint;
    point lv_offsetPoint;
    fixed lv_currentOffsetAmount;
    point lv_spawnPoint;
    int lv_team;
    int lv_minionType;
    int lv_bruiserLevel;

    // Variable Initialization

    // Implementation
    lv_groupCount = libCore_gv_dataMinionWaveCompositions[(lp_composition)].lv_numberOfGroups;
    if ((lp_owner == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_basePoint = libGame_gv_laneData[lp_lane].lv_waypoints[2];
        lv_offsetPoint = libGame_gv_laneData[lp_lane].lv_waypoints[3];
        lv_team = 1;
    }

    lv_currentOffsetAmount = ((lv_groupCount - 1) * lv_offsetChangePerGroup);
    if ((lp_owner == libCore_gv_cOMPUTER_TeamChaos)) {
        lv_basePoint = libGame_gv_laneData[lp_lane].lv_waypoints[(libGame_gv_laneData[lp_lane].lv_waypointCount - 1)];
        lv_offsetPoint = libGame_gv_laneData[lp_lane].lv_waypoints[(libGame_gv_laneData[lp_lane].lv_waypointCount - 2)];
        lv_team = 2;
    }

    if ((lv_basePoint == null)) {
        return true;
    }

    Wait(libCore_gv_bALMinionTeamSpawnDelay[lv_team], c_timeGame);
    Wait(libGame_gv_laneData[lp_lane].lv_spawnDelay, c_timeGame);
    lv_bruiserLevel = libGame_gv_laneData[lp_lane].lv_bruiserMinionLevel[lv_team];
    autoB77C7225_ae = lv_groupCount;
    autoB77C7225_ai = 1;
    lv_itGroup = 1;
    for ( ; ( (autoB77C7225_ai >= 0 && lv_itGroup <= autoB77C7225_ae) || (autoB77C7225_ai <= 0 && lv_itGroup >= autoB77C7225_ae) ) ; lv_itGroup += autoB77C7225_ai ) {
        lv_minionType = libCore_gv_dataMinionWaveCompositions[(lp_composition)].lv_groupMinionType[lv_itGroup];
        lv_spawnPoint = libNtve_gf_PointOffsetTowardsPoint(lv_basePoint, lv_currentOffsetAmount, lv_offsetPoint);
        autoEFB6C6D3_ae = libCore_gv_dataMinionWaveCompositions[(lp_composition)].lv_groupMinionCount[lv_itGroup];
        autoEFB6C6D3_ai = 1;
        lv_itMinion = 1;
        for ( ; ( (autoEFB6C6D3_ai >= 0 && lv_itMinion <= autoEFB6C6D3_ae) || (autoEFB6C6D3_ai <= 0 && lv_itMinion >= autoEFB6C6D3_ae) ) ; lv_itMinion += autoEFB6C6D3_ai ) {
            libGame_gf_MinionSpawnMinion(lp_lane, lp_owner, lv_minionType, lv_spawnPoint);
        }
        lv_currentOffsetAmount -= lv_offsetChangePerGroup;
        Wait(0.0625, c_timeGame);
    }
    return true;
}

void libGame_gf_MinionTurnMinionScalingOnOff (bool lp_onOff) {
    // Implementation
    if ((lp_onOff == true)) {
        libGame_gv_minionScalingEnabled = true;
        TimerStart(libGame_gv_scalingTimer, libGame_gv_bALScalingTimerDuration, false, c_timeGame);
    }
    else {
        libGame_gv_minionScalingEnabled = false;
        TimerPause(libGame_gv_scalingTimer, true);
    }
}

void libGame_gf_MinionPauseUnpauseMinionScaling (bool lp_pauseUnpause) {
    // Implementation
    if ((libGame_gv_minionScalingEnabled == true)) {
        if ((lp_pauseUnpause == false)) {
            TimerPause(libGame_gv_scalingTimer, false);
        }
        else {
            TimerPause(libGame_gv_scalingTimer, true);
        }
    }

}

void libGame_gf_CalculateSpawnedMinionGoalPoints (int lp_ownerPlayer, point lp_positionofSpawner) {
    // Implementation
    if (((libGame_gv_laneCount <= 0) || (lp_positionofSpawner == null) || (lp_ownerPlayer > libCore_gv_bALMaxEnginePlayerCount))) {
        libGame_gv_spawnedMinionLane = 0;
        libGame_gv_spawnedMinionFirstWaypointIndex = 0;
        return ;
    }

    libGame_gf_CalculateClosestLaneData(lp_positionofSpawner);
    libGame_gf_CalculateSpawnedMinionGoalPointsFromClosestLaneData(lp_ownerPlayer);
}

void libGame_gf_CalculateSpawnedMinionGoalPointsFromLane (int lp_ownerPlayer, point lp_positionofSpawner, int lp_lane) {
    // Implementation
    if (((libGame_gv_laneCount <= 0) || (lp_positionofSpawner == null) || (lp_ownerPlayer > libCore_gv_bALMaxEnginePlayerCount))) {
        libGame_gv_spawnedMinionLane = 0;
        libGame_gv_spawnedMinionFirstWaypointIndex = 0;
        return ;
    }

    libGame_gv_closestLaneData.lv_closestLane = lp_lane;
    libGame_gf_CalculateClosestLaneDataForLane(lp_positionofSpawner, lp_lane);
    libGame_gf_CalculateSpawnedMinionGoalPointsFromClosestLaneData(lp_ownerPlayer);
}

void libGame_gf_CalculateSpawnedMinionGoalPointsFromClosestLaneData (int lp_ownerPlayer) {
    // Variable Declarations
    int lv_closestIndex;
    int lv_secondaryIndex;

    // Variable Initialization

    // Implementation
    libGame_gv_spawnedMinionLane = libGame_gv_closestLaneData.lv_closestLane;
    if (((libGame_gv_spawnedMinionLane == 0) || (libGame_gv_laneData[libGame_gv_spawnedMinionLane].lv_waypointCount < 3))) {
        if ((libCore_gv_sYSGameMode != libCore_ge_GameModes_ArenaMode) && (libCore_gv_sYSGameMode != libCore_ge_GameModes_AttackDefend)) {
            TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_B26BDFE3"), true);
        }

        libGame_gv_spawnedMinionFirstWaypointIndex = 0;
        return ;
    }

    lv_closestIndex = libGame_gv_closestLaneData.lv_laneData[libGame_gv_spawnedMinionLane].lv_closestIndex;
    lv_secondaryIndex = libGame_gv_closestLaneData.lv_laneData[libGame_gv_spawnedMinionLane].lv_secondaryIndex;
    if ((libGame_gv_players[lp_ownerPlayer].lv_faction == libGame_ge_Faction_Order)) {
        libGame_gv_spawnedMinionFirstWaypointIndex = MaxI(lv_closestIndex, lv_secondaryIndex);
        if ((libCore_gv_mAPUsesCirclingAI == false)) {
            if ((libGame_gv_spawnedMinionFirstWaypointIndex >= libGame_gv_laneData[libGame_gv_spawnedMinionLane].lv_waypointCount)) {
                libGame_gv_spawnedMinionFirstWaypointIndex = (libGame_gv_laneData[libGame_gv_spawnedMinionLane].lv_waypointCount - 1);
            }

        }
        else {
            while ((libGame_gv_spawnedMinionFirstWaypointIndex >= (libGame_gv_laneData[libGame_gv_spawnedMinionLane].lv_waypointCount - libCore_gv_mAPPathNodesBeforeLooping))) {
                libGame_gv_spawnedMinionFirstWaypointIndex -= 1;
            }
        }
    }
    else {
        libGame_gv_spawnedMinionFirstWaypointIndex = MinI(lv_closestIndex, lv_secondaryIndex);
        if ((libCore_gv_mAPUsesCirclingAI == false)) {
            if ((libGame_gv_spawnedMinionFirstWaypointIndex <= 1)) {
                libGame_gv_spawnedMinionFirstWaypointIndex = 2;
            }

        }
        else {
            while ((libGame_gv_spawnedMinionFirstWaypointIndex <= libCore_gv_mAPPathNodesBeforeLooping)) {
                libGame_gv_spawnedMinionFirstWaypointIndex += 1;
            }
        }
    }
}

void libGame_gf_ApplyMountBehaviorToPlayer (int lp_player) {
    // Variable Declarations
    unit lv_heroUnit;

    // Variable Initialization

    // Deprecated
    if ((libGame_gv_players[lp_player].lv_heroData.lv_isFlyer == false)) {
        lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
        UnitBehaviorAdd(lv_heroUnit, "Mounted", lv_heroUnit, 1);
    }

}

void libGame_gf_ApplyMountBehaviorToHero (unit lp_hero) {
    // Implementation
    if ((libGame_gv_players[libCore_gf_GetHeroIndexForUnitType(UnitGetType(lp_hero))].lv_heroData.lv_usesMounts == true)) {
        UnitBehaviorAdd(lp_hero, "Mounted", lp_hero, 1);
    }

}

bool libGame_gf_MountEnabled (unit lp_hero) {
    // Implementation
    if (((UnitAbilityCheck(lp_hero, "Mount", true) == true) || ((UnitGetType(lp_hero) == "HeroRehgar") && (UnitAbilityCheck(lp_hero, "RehgarGhostWolfActivate", true) == true)))) {
        return true;
    }

    return false;
}

void libGame_gf_TurnOnOffTownDestructionRemovesCoreInvulnerable (bool lp_onOff) {
    bool autoAE38A62E_val;

    // Implementation
    autoAE38A62E_val = lp_onOff;
    if (autoAE38A62E_val == true) {
        libGame_gv_townDestructionRemovesCoreInvulnerable = true;
    }
    else if (autoAE38A62E_val == false) {
        libGame_gv_townDestructionRemovesCoreInvulnerable = false;
    }
    else {
    }
}

void libGame_gf_AwardXPForNPCKill (unit lp_killedUnit, int lp_killedUnitPlayer, int lp_killedUnitClassification, int lp_killingPlayer, fixed lp_killedUnitXPAward) {
    unitgroup auto8BF37171_g;
    int auto8BF37171_u;
    unitgroup autoED19B100_g;
    int autoED19B100_u;
    playergroup auto635EB3AE_g;
    int auto635EB3AE_p;
    playergroup autoA75BD986_g;
    int autoA75BD986_p;
    playergroup autoAB55B378_g;
    int autoAB55B378_p;
    playergroup auto60ED318E_g;
    int auto60ED318E_p;
    int auto6BF10103_val;

    // Variable Declarations
    unit lv_itUnit;
    int lv_itPlayer;
    int lv_itTeamPlayer;
    unitgroup lv_nearbyUnits;
    int lv_creditPlayer;
    playergroup lv_killCreditGroup;
    fixed lv_xPValue;
    playergroup lv_xPAwardGroup;
    int lv_xPSource;
    unitgroup lv_nearbyUnitsAlliedToKilledUnit;
    unit lv_itAlliedUnit;

    // Variable Initialization
    lv_nearbyUnits = UnitGroupEmpty();
    lv_killCreditGroup = PlayerGroupEmpty();
    lv_xPAwardGroup = PlayerGroupEmpty();
    lv_nearbyUnitsAlliedToKilledUnit = UnitGroupEmpty();

    // Implementation
    if ((lp_killingPlayer > 0) && (lp_killingPlayer <= libCore_gv_bALMaxEnginePlayerCount)) {
        lv_nearbyUnits = UnitGroupSearch(null, lp_killingPlayer, UnitGetPosition(lp_killedUnit), libCore_gv_bALXPRadius, UnitFilter(0, 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        lv_nearbyUnitsAlliedToKilledUnit = UnitGroupSearch(null, lp_killingPlayer, UnitGetPosition(lp_killedUnit), libCore_gv_bALXPRadius, libCore_gv_filtersHeroicEnemy, 0);
        auto8BF37171_g = lv_nearbyUnitsAlliedToKilledUnit;
        auto8BF37171_u = 1;
        for ( ; auto8BF37171_u <= UnitGroupCount(auto8BF37171_g, c_unitCountAll) ; auto8BF37171_u += (lv_itAlliedUnit == UnitGroupUnit(auto8BF37171_g, auto8BF37171_u)) ) {
            lv_itAlliedUnit = UnitGroupUnit(auto8BF37171_g, auto8BF37171_u);
            libGame_gf_SendEventHeroWitnessedAlliedNPCDeath(UnitGetOwner(lv_itAlliedUnit), lp_killedUnit);
        }
    }
    else {
        if ((lp_killedUnitPlayer != libCore_gv_cOMPUTER_Hostile)) {
            lv_nearbyUnits = UnitGroupSearch(null, lp_killedUnitPlayer, UnitGetPosition(lp_killedUnit), libCore_gv_bALXPRadius, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        }
        else {
            if ((lp_killedUnitXPAward > 0.0) && (UnitHasBehavior2(lp_killedUnit, "UnitGivesNoXP") == false)) {
                TextExpressionSetToken("Param/Expression/lib_Game_F67CE810", "A", UnitTypeGetName(UnitGetType(lp_killedUnit)));
                TextExpressionSetToken("Param/Expression/lib_Game_F67CE810", "B", IntToText(lp_killingPlayer));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_F67CE810"), true);
                return ;
            }

        }
    }
    autoED19B100_g = lv_nearbyUnits;
    autoED19B100_u = 1;
    for ( ; autoED19B100_u <= UnitGroupCount(autoED19B100_g, c_unitCountAll) ; autoED19B100_u += (lv_itUnit == UnitGroupUnit(autoED19B100_g, autoED19B100_u)) ) {
        lv_itUnit = UnitGroupUnit(autoED19B100_g, autoED19B100_u);
        if ((UnitBehaviorCount(lv_itUnit, "SpecialCaseNPCTakedownParticipant") == 1) && (libNtve_gf_PlayerIsEnemy(UnitGetOwner(lv_itUnit), UnitGetOwner(lp_killedUnit), libNtve_ge_PlayerRelation_Enemy) == true)) {
            libGame_gf_SendEventSpecialCaseUnitParticipatedInNPCTakedown(UnitGetOwner(lv_itUnit), lp_killedUnit);
        }

        if (((UnitHasBehavior2(lv_itUnit, "EarnsXP") == true) || ((UnitTypeTestAttribute(UnitGetType(lv_itUnit), c_unitAttributeHeroic) == true) && (UnitHasBehavior2(lv_itUnit, "AbathurUltimateEvolutionVehicleCasterBehavior") == false) && (UnitTestState(lv_itUnit, c_unitStateHallucination) == false)))) {
            lv_creditPlayer = UnitGetOwner(lv_itUnit);
            if ((lv_creditPlayer <= libCore_gv_bALMaxPlayers)) {
                PlayerGroupAdd(lv_killCreditGroup, lv_creditPlayer);
            }

            if ((lv_creditPlayer == libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_creditPlayer)].lv_choPlayer)) {
                PlayerGroupAdd(lv_killCreditGroup, libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_creditPlayer)].lv_gallPlayer);
            }
            else {
                if ((lv_creditPlayer == libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_creditPlayer)].lv_gallPlayer)) {
                    PlayerGroupAdd(lv_killCreditGroup, libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lv_creditPlayer)].lv_choPlayer);
                }

            }
        }

    }
    if ((lp_killingPlayer > 0) && (lp_killingPlayer <= libCore_gv_bALMaxPlayers)) {
        PlayerGroupAdd(lv_killCreditGroup, lp_killingPlayer);
    }

    if ((PlayerGroupCount(lv_killCreditGroup) == 0) && (UnitTypeTestAttribute(UnitGetType(lp_killedUnit), c_unitAttributeStructure) == false)) {
        return ;
    }

    if ((lp_killingPlayer == libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lp_killingPlayer)].lv_choPlayer)) {
        PlayerGroupAdd(lv_killCreditGroup, libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lp_killingPlayer)].lv_gallPlayer);
    }
    else {
        if ((lp_killingPlayer == libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lp_killingPlayer)].lv_gallPlayer)) {
            PlayerGroupAdd(lv_killCreditGroup, libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(lp_killingPlayer)].lv_choPlayer);
        }

    }
    auto635EB3AE_g = lv_killCreditGroup; 
    auto635EB3AE_p = 1;
    for ( ; auto635EB3AE_p <= PlayerGroupCount(auto635EB3AE_g) ; auto635EB3AE_p += (lv_itPlayer == PlayerGroupPlayer(auto635EB3AE_g, auto635EB3AE_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto635EB3AE_g, auto635EB3AE_p);
        libGame_gf_SendEventHeroParticipatedInNPCTakedown(lv_itPlayer, lp_killedUnit);
        if ((UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "LeoricUndying") == true)) {
            PlayerGroupRemove(lv_killCreditGroup, lv_itPlayer);
            if ((PlayerGroupCount(lv_killCreditGroup) == 0) && (UnitTypeTestAttribute(UnitGetType(lp_killedUnit), c_unitAttributeStructure) == false)) {
                return ;
            }

        }

    }
    lv_xPValue = lp_killedUnitXPAward;
    if ((libSprt_gv_dEBUGXPTextEnabled == true)) {
        TextExpressionSetToken("Param/Expression/lib_Game_D3D36514", "A", UnitTypeGetName(UnitGetType(lp_killedUnit)));
        TextExpressionSetToken("Param/Expression/lib_Game_D3D36514", "B", FixedToText(lv_xPValue, c_fixedPrecisionAny));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_D3D36514"), true);
    }

    if (((libCore_gv_sYSXPOn == false) || (lv_xPValue <= 0.0) || (UnitHasBehavior2(lp_killedUnit, "UnitGivesNoXP") == true))) {
        return ;
    }

    if ((PlayerGroupCount(lv_killCreditGroup) == 0)) {
        lv_xPAwardGroup = PlayerGroupCopy(libGame_gf_EnemyPlayerGroupOfPlayer(lp_killedUnitPlayer));
        if ((PlayerGroupCount(lv_xPAwardGroup) == 0) && (UnitTypeTestAttribute(UnitGetType(lp_killedUnit), c_unitAttributeStructure) == true) && (lp_killedUnitPlayer == libCore_gv_cOMPUTER_Hostile)) {
            lv_xPAwardGroup = PlayerGroupCopy(libGame_gf_AlliedPlayerGroupOfPlayer(lp_killingPlayer));
        }

        PlayerGroupRemove(lv_xPAwardGroup, libCore_gv_cOMPUTER_TeamOrder);
        PlayerGroupRemove(lv_xPAwardGroup, libCore_gv_cOMPUTER_TeamChaos);
        if (((lp_killedUnitPlayer < 0) || (lp_killedUnitPlayer > libCore_gv_bALMaxEnginePlayerCount))) {
            TextExpressionSetToken("Param/Expression/lib_Game_34F4B7D0", "A", UnitTypeGetName(UnitGetType(lp_killedUnit)));
            TextExpressionSetToken("Param/Expression/lib_Game_34F4B7D0", "B", IntToText(lp_killedUnitPlayer));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_34F4B7D0"), true);
        }
        else {
            autoAB55B378_g = lv_xPAwardGroup; 
            autoAB55B378_p = 1;
            for ( ; autoAB55B378_p <= PlayerGroupCount(autoAB55B378_g) ; autoAB55B378_p += (lv_itTeamPlayer == PlayerGroupPlayer(autoAB55B378_g, autoAB55B378_p)) ) {
                lv_itTeamPlayer = PlayerGroupPlayer(autoAB55B378_g, autoAB55B378_p);
                libGame_gf_ScoreValuesRecordXPContributionForPlayer(lv_itTeamPlayer, (lv_xPValue / PlayerGroupCount(lv_xPAwardGroup)), false);
            }
        }
    }
    else {
        autoA75BD986_g = lv_killCreditGroup; 
        autoA75BD986_p = 1;
        for ( ; autoA75BD986_p <= PlayerGroupCount(autoA75BD986_g) ; autoA75BD986_p += (lv_itPlayer == PlayerGroupPlayer(autoA75BD986_g, autoA75BD986_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(autoA75BD986_g, autoA75BD986_p);
            libGame_gf_ScoreValuesRecordXPContributionForPlayer(lv_itPlayer, (lv_xPValue / PlayerGroupCount(lv_killCreditGroup)), true);
            if ((lv_itPlayer == lp_killingPlayer)) {
                SoundPlayOnUnitForPlayer(SoundLink("XP_Gain_Direct", -1), c_maxPlayers, PlayerGroupSingle(lv_itPlayer), lp_killedUnit, 0.0, 100.0, 0.0);
            }
            else {
                SoundPlayOnUnitForPlayer(SoundLink("XP_Gain_Indirect", -1), c_maxPlayers, PlayerGroupSingle(lv_itPlayer), lp_killedUnit, 0.0, 100.0, 0.0);
            }
        }
        lv_xPAwardGroup = PlayerGroupCopy(libGame_gf_AlliedPlayerGroupOfPlayer(PlayerGroupPlayer(lv_killCreditGroup, 1)));
        PlayerGroupRemove(lv_xPAwardGroup, libCore_gv_cOMPUTER_TeamOrder);
        PlayerGroupRemove(lv_xPAwardGroup, libCore_gv_cOMPUTER_TeamChaos);
    }
    if ((PlayerGroupCount(lv_xPAwardGroup) == 0) && (UnitTypeTestAttribute(UnitGetType(lp_killedUnit), c_unitAttributeStructure) == true) && (PlayerGroupCount(libGame_gv_teams[1].lv_teamPlayerGroupNoNPCPlayers) > 0) && (PlayerGroupCount(libGame_gv_teams[2].lv_teamPlayerGroupNoNPCPlayers) > 0)) {
        TextExpressionSetToken("Param/Expression/lib_Game_8402AC6F", "A", UnitTypeGetName(UnitGetType(lp_killedUnit)));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_8402AC6F"), true);
    }

    auto60ED318E_g = lv_xPAwardGroup; 
    auto60ED318E_p = 1;
    for ( ; auto60ED318E_p <= PlayerGroupCount(auto60ED318E_g) ; auto60ED318E_p += (lv_itPlayer == PlayerGroupPlayer(auto60ED318E_g, auto60ED318E_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto60ED318E_g, auto60ED318E_p);
        auto6BF10103_val = lp_killedUnitClassification;
        if (auto6BF10103_val == c_unitAttributeStructure) {
            lv_xPSource = libGame_ge_XPSources_Structure;
        }
        else if (auto6BF10103_val == c_unitAttributeLight) {
            lv_xPSource = libGame_ge_XPSources_Creep;
        }
        else if (auto6BF10103_val == c_unitAttributeBiological) {
            lv_xPSource = libGame_ge_XPSources_Minion;
        }
        else {
        }
        libGame_gf_GrantXPToPlayer(lv_xPValue, lv_itPlayer, lv_xPSource);
        if ((lp_killedUnitClassification != c_unitAttributeStructure)) {
            libUIUI_gf_UIFloatingCombatTextH16MidXP(lv_itPlayer, lp_killedUnit, libCore_ge_FloatingTextType_XPSmall, FixedToInt(lv_xPValue));
        }
        else {
            libUIUI_gf_UIFloatingCombatTextH16MidXP(lv_itPlayer, lp_killedUnit, libCore_ge_FloatingTextType_XPLarge, FixedToInt(lv_xPValue));
        }
    }
}

trigger auto_libGame_gf_BuildingDiesCameraShake_Trigger = null;
fixed auto_libGame_gf_BuildingDiesCameraShake_lp_delay;
string auto_libGame_gf_BuildingDiesCameraShake_lp_intensity;
playergroup auto_libGame_gf_BuildingDiesCameraShake_lp_playerGroup;

void libGame_gf_BuildingDiesCameraShake (fixed lp_delay, string lp_intensity, playergroup lp_playerGroup) {
    auto_libGame_gf_BuildingDiesCameraShake_lp_delay = lp_delay;
    auto_libGame_gf_BuildingDiesCameraShake_lp_intensity = lp_intensity;
    auto_libGame_gf_BuildingDiesCameraShake_lp_playerGroup = lp_playerGroup;

    if (auto_libGame_gf_BuildingDiesCameraShake_Trigger == null) {
        auto_libGame_gf_BuildingDiesCameraShake_Trigger = TriggerCreate("auto_libGame_gf_BuildingDiesCameraShake_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_BuildingDiesCameraShake_Trigger, false, false);
}

bool auto_libGame_gf_BuildingDiesCameraShake_TriggerFunc (bool testConds, bool runActions) {
    fixed lp_delay = auto_libGame_gf_BuildingDiesCameraShake_lp_delay;
    string lp_intensity = auto_libGame_gf_BuildingDiesCameraShake_lp_intensity;
    playergroup lp_playerGroup = auto_libGame_gf_BuildingDiesCameraShake_lp_playerGroup;

    playergroup auto7B461A9C_g;
    int auto7B461A9C_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    Wait(lp_delay, c_timeGame);
    auto7B461A9C_g = lp_playerGroup; 
    auto7B461A9C_p = 1;
    for ( ; auto7B461A9C_p <= PlayerGroupCount(auto7B461A9C_g) ; auto7B461A9C_p += (lv_itPlayer == PlayerGroupPlayer(auto7B461A9C_g, auto7B461A9C_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto7B461A9C_g, auto7B461A9C_p);
        CameraShake(lv_itPlayer, lp_intensity, "Shake", 0.1, 0.4, 0.5);
    }
    return true;
}

void libGame_gf_GazloweSalvageProc (int lp_killingPlayer, unit lp_minion) {
    // Implementation
    if ((UnitGetType(libGame_gv_players[lp_killingPlayer].lv_heroUnit) == "HeroTinker") && (UnitHasBehavior2(lp_minion, "UnitGivesNoXP") == false)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TinkerSalvageScrap", 0, lp_killingPlayer, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_minion), 1.0, UnitGetPosition(libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_minion))].lv_core)));
        UnitBehaviorAdd(UnitLastCreated(), "TinkerSalvageScrapTimedLife", libGame_gv_players[lp_killingPlayer].lv_heroUnit, 1);
    }

}

void libGame_gf_GazloweReduceReuseRecycleProc (int lp_killingPlayer, unit lp_minion) {
    // Implementation
    if ((UnitGetType(libGame_gv_players[lp_killingPlayer].lv_heroUnit) == "HeroTinker") && (UnitBehaviorCount(libGame_gv_players[lp_killingPlayer].lv_heroUnit, "ReduceReuseRecycleCarryBehavior") == 1) && (UnitTypeTestAttribute(UnitGetType(lp_minion), c_unitAttributeStructure) == false)) {
        UnitCreateEffectPoint(libGame_gv_players[lp_killingPlayer].lv_heroUnit, "ReduceReuseRecycleCreateUnit", libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lp_minion), 1.0, UnitGetPosition(libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lp_killingPlayer)].lv_core)));
    }

}

void libGame_gf_BribeProc (int lp_killingPlayer, unit lp_minion) {
    // Variable Declarations
    unit lv_bribeOwnerUnit;

    // Variable Initialization

    // Implementation
    if (((UnitHasBehavior2(libGame_gv_players[lp_killingPlayer].lv_heroUnit, "TalentBribeTalentCarry") == true) || (UnitHasBehavior2(libGame_gv_players[lp_killingPlayer].lv_activeVehicle, "TalentBribeTalentCarry") == true))) {
        lv_bribeOwnerUnit = libGame_gv_players[lp_killingPlayer].lv_heroUnit;
        UnitCreateEffectUnit(lv_bribeOwnerUnit, "TalentBribeAdd1Token", lv_bribeOwnerUnit);
        if ((ModI(UnitBehaviorCount(lv_bribeOwnerUnit, libGame_gv_players[lp_killingPlayer].lv_bribeTokenLink), libGame_gv_players[lp_killingPlayer].lv_bribeChargeStackRequirement) == 0)) {
            UnitAddChargeUsed(lv_bribeOwnerUnit, "Abil/TalentBucketBribe", -1.0);
        }

    }

}

void libGame_gf_DiabloBlackSoulstoneProc (int lp_killingPlayer, unit lp_minion) {
    // Implementation
    if ((UnitHasBehavior2(libGame_gv_players[lp_killingPlayer].lv_heroUnit, "DiabloBlackSoulstoneTokenCounter") == true)) {
        if ((UnitBehaviorCount(libGame_gv_players[lp_killingPlayer].lv_heroUnit, "DiabloBlackSoulstoneTokenCounter") < 100)) {
            UnitCreateEffectUnit(libGame_gv_players[lp_killingPlayer].lv_heroUnit, "DiabloBlackSoulstoneAdd1TokenSet", libGame_gv_players[lp_killingPlayer].lv_heroUnit);
            UnitCreateEffectUnit(libGame_gv_players[lp_killingPlayer].lv_heroUnit, "DiabloBlackSoulstoneNonHeroTargetLaunchMissile", lp_minion);
        }

    }

}

void libGame_gf_DiabloEssenceOfTheSlainProc (int lp_killingPlayer, unit lp_minion) {
    // Variable Declarations
    unit lv_diablo;

    // Variable Initialization

    // Implementation
    lv_diablo = libGame_gv_players[lp_killingPlayer].lv_heroUnit;
    if ((UnitHasBehavior2(lv_diablo, "DiabloEssenceOfTheSlainCarryBehavior") == true)) {
        UnitCreateEffectUnitWithSource(lv_diablo, "DiabloManaFunnelGrantMana", lv_diablo, c_gameCatalogBehavior, "DiabloEssenceOfTheSlainCarryBehavior");
        UnitCreateEffectUnitWithSource(lv_diablo, "DiabloEssenceofTheSlainHealer", lv_diablo, c_gameCatalogBehavior, "DiabloEssenceOfTheSlainCarryBehavior");
    }

}

void libGame_gf_GenericSeasonedMarksmanProc (int lp_killingPlayer, unit lp_minion) {
    // Variable Declarations
    unit lv_unit;
    int lv_stackCount;

    // Variable Initialization
    lv_unit = libGame_gv_players[lp_killingPlayer].lv_heroUnit;

    // Implementation
    if ((UnitHasBehavior2(lv_unit, "TalentSeasonedMarksmanCarryBehavior") == true) && (UnitBehaviorCount(libGame_gv_players[lp_killingPlayer].lv_heroUnit, "TalentSeasonedMarksmanTokenCounter") != 1000)) {
        if ((UnitBehaviorCount(libGame_gv_players[lp_killingPlayer].lv_heroUnit, "TalentSeasonedMarksmanTokenCounter") >= 40)) {
            UnitCreateEffectUnit(lv_unit, "TalentSeasonedMarksmanAdd2TokenCountNoQuestCategory", lv_unit);
        }
        else {
            UnitCreateEffectUnit(lv_unit, "TalentSeasonedMarksmanAdd2TokenCount", lv_unit);
        }
    }

}

void libGame_gf_CreepDies (unit lp_creepUnit, int lp_killingPlayer, fixed lp_killXP) {
    unitgroup auto46A0FEDF_g;
    int auto46A0FEDF_u;

    // Variable Declarations
    int lv_defenderAIIndex;
    int lv_team;
    int lv_camp;
    unit lv_itUnit;
    int lv_defenderUnitIndex;

    // Variable Initialization

    // Implementation
    lv_camp = libMapM_gf_JungleGetJungleCampForUnit(lp_creepUnit);
    lv_defenderUnitIndex = libMapM_gf_JungleGetJungleUnitIndexForUnit(lp_creepUnit);
    if ((libMapM_gv_jungleCreepCamps[lv_camp].lv_defenderDefendersCoweronDeath == true)) {
        auto46A0FEDF_g = libMapM_gv_jungleCreepCamps[lv_camp].lv_defenderCoweringUnitGroup;
        auto46A0FEDF_u = 1;
        for ( ; auto46A0FEDF_u <= UnitGroupCount(auto46A0FEDF_g, c_unitCountAll) ; auto46A0FEDF_u += (lv_itUnit == UnitGroupUnit(auto46A0FEDF_g, auto46A0FEDF_u)) ) {
            lv_itUnit = UnitGroupUnit(auto46A0FEDF_g, auto46A0FEDF_u);
            if ((lp_creepUnit == lv_itUnit)) {
                if ((PointPathingPassable(UnitGetPosition(lp_creepUnit)) == true)) {
                    UnitCreate(1, "MercCoweringDefenderOrientDummy", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Hostile, UnitGetPosition(lp_creepUnit), UnitGetFacing(lp_creepUnit));
                }
                else {
                    UnitSetPosition(lp_creepUnit, libMapM_gv_jungleCreepCamps[lv_camp].lv_mapDataDefenderSpawnPoints[lv_defenderUnitIndex], false);
                    UnitSetFacing(lp_creepUnit, PointGetFacing(libMapM_gv_jungleCreepCamps[lv_camp].lv_mapDataDefenderSpawnPoints[lv_defenderUnitIndex]), 0.0);
                    UnitCreate(1, "MercCoweringDefenderOrientDummy", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Hostile, libMapM_gv_jungleCreepCamps[lv_camp].lv_mapDataDefenderSpawnPoints[lv_defenderUnitIndex], PointGetFacing(libMapM_gv_jungleCreepCamps[lv_camp].lv_mapDataDefenderSpawnPoints[lv_defenderUnitIndex]));
                }
                UnitGroupRemove(libMapM_gv_jungleCreepCamps[lv_camp].lv_defenderCoweringUnitGroup, lv_itUnit);
            }

        }
    }

    lv_defenderAIIndex = libAIAI_gf_DefenderAIIndexOfUnit(lp_creepUnit);
    if ((lv_defenderAIIndex == 0)) {
        return ;
    }

    libAIAI_gf_DefenderAICreepDies(lv_defenderAIIndex, lp_creepUnit, lp_killingPlayer);
    libGame_gf_AwardXPForNPCKill(lp_creepUnit, UnitGetOwner(lp_creepUnit), c_unitAttributeLight, lp_killingPlayer, lp_killXP);
}

void libGame_gf_MinionDies (unit lp_minionUnit, int lp_killingPlayer, fixed lp_killXP) {
    // Variable Declarations
    int lv_minionOwner;
    int lv_regenGlobeOwner;

    // Variable Initialization

    // Implementation
    if ((UnitHasBehavior2(lp_minionUnit, "SuppressRegenGlobeCreation") == false)) {
        lv_minionOwner = UnitGetOwner(lp_minionUnit);
        if (((UnitGetType(lp_minionUnit) == "WizardMinion"))) {
            if ((lv_minionOwner == libCore_gv_cOMPUTER_TeamOrder)) {
                lv_regenGlobeOwner = libCore_gv_cOMPUTER_TeamChaos;
            }
            else {
                lv_regenGlobeOwner = libCore_gv_cOMPUTER_TeamOrder;
            }
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RegenGlobe", c_unitCreateIgnorePlacement, lv_regenGlobeOwner, UnitGetPosition(lp_minionUnit));
        }

        libGame_gf_AwardXPForNPCKill(lp_minionUnit, lv_minionOwner, c_unitAttributeBiological, lp_killingPlayer, libCore_gf_DataXPXPForMinion(lp_killXP, PlayerGroupPlayer(PlayerGroupAlliance(c_playerGroupAlly, lp_killingPlayer), 1), lp_minionUnit));
    }

}

bool libGame_gf_TownAliveinLane (int lp_team, int lp_laneID) {
    int auto6BF31565_ae;
    int auto6BF31565_ai;

    // Variable Declarations
    int lv_townID;

    // Variable Initialization

    // Implementation
    auto6BF31565_ae = libGame_gv_townTownCount;
    auto6BF31565_ai = 1;
    lv_townID = 1;
    for ( ; ( (auto6BF31565_ai >= 0 && lv_townID <= auto6BF31565_ae) || (auto6BF31565_ai <= 0 && lv_townID >= auto6BF31565_ae) ) ; lv_townID += auto6BF31565_ai ) {
        if ((libGame_gv_townTownData[lv_townID].lv_owner == libGame_gf_ComputerPlayerInTeam(lp_team)) && (libGame_gv_townTownData[lv_townID].lv_lane == lp_laneID) && (libGame_gv_townTownData[lv_townID].lv_townHallIndex > 0) && (UnitIsAlive(libGame_gv_townTownData[lv_townID].lv_structureUnits[libGame_gv_townTownData[lv_townID].lv_townHallIndex]) == true)) {
            return true;
        }

        if (true) {
        }

    }
    return false;
}

void libGame_gf_TurnOnOffInitialHeroSpawnFX (bool lp_onOff) {
    bool autoCBB45CBF_val;

    // Implementation
    autoCBB45CBF_val = lp_onOff;
    if (autoCBB45CBF_val == true) {
        libGame_gv_suppressInitialHeroSpawnFX = false;
    }
    else if (autoCBB45CBF_val == false) {
        libGame_gv_suppressInitialHeroSpawnFX = true;
    }
    else {
        libGame_gv_suppressInitialHeroSpawnFX = false;
    }
}

int libGame_gf_EnemyTeam (int lp_team) {
    // Implementation
    if ((libGame_gf_TeamNumberIsValid(lp_team) == false)) {
        TextExpressionSetToken("Param/Expression/lib_Game_9AD807BA", "A", IntToText(lp_team));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_9AD807BA"), true);
        return 0;
    }

    return (3 - lp_team);
}

color libGame_gf_TeamColor (int lp_team) {
    // Implementation
    return libNtve_gf_ConvertPlayerColorToColor(PlayerGetColorIndex(libGame_gf_ComputerPlayerInTeam(lp_team), false));
}

playergroup libGame_gf_AlliedPlayerGroupOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Implementation
    if (((lp_player < 0) || (lp_player > libCore_gv_bALMaxEnginePlayerCount))) {
        return PlayerGroupEmpty();
    }

    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);
    if ((libGame_gf_TeamNumberIsValid(lv_team) == false)) {
        return PlayerGroupEmpty();
    }

    return libGame_gf_PlayersOnTeamHeroes(lv_team, true);
}

playergroup libGame_gf_EnemyPlayerGroupOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Implementation
    if (((lp_player < 0) || (lp_player > libCore_gv_bALMaxEnginePlayerCount))) {
        return PlayerGroupEmpty();
    }

    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);
    if ((libGame_gf_TeamNumberIsValid(lv_team) == false)) {
        return PlayerGroupEmpty();
    }

    return libGame_gf_PlayersOnTeamHeroes(libGame_gf_EnemyTeam(lv_team), false);
}

int libGame_gf_TeamNumberOfPlayer (int lp_player) {
    // Implementation
    if ((lp_player > 0) && (lp_player <= libCore_gv_cOMPUTER_NoVision_TeamChaos)) {
        return libGame_gf_TeamNumberOfFaction(libGame_gv_players[lp_player].lv_faction);
    }

    return 0;
}

int libGame_gf_TeamNumberOfFaction (int lp_faction) {
    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        return libGame_gv_teamOrderIndex_C;
    }

    if ((lp_faction == libGame_ge_Faction_Chaos)) {
        return libGame_gv_teamChaosIndex_C;
    }

    TextExpressionSetToken("Param/Expression/lib_Game_875E6F64", "A", IntToText((lp_faction)));
    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_875E6F64"), true);
    return 0;
}

bool libGame_gf_TeamNumberIsValid (int lp_team) {
    // Implementation
    return ((lp_team == libGame_gv_teamOrderIndex_C) || (lp_team == libGame_gv_teamChaosIndex_C));
}

int libGame_gf_EnemyTeamNumberOfPlayer (int lp_player) {
    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Implementation
    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);
    if ((libGame_gf_TeamNumberIsValid(lv_team) == true)) {
        return libGame_gf_EnemyTeam(lv_team);
    }
    else {
        return 0;
    }
}

int libGame_gf_ComputerPlayerInTeam (int lp_team) {
    int autoBA7B6EDB_val;

    // Implementation
    autoBA7B6EDB_val = lp_team;
    if (autoBA7B6EDB_val == 1) {
        return libCore_gv_cOMPUTER_TeamOrder;
    }
    else if (autoBA7B6EDB_val == 2) {
        return libCore_gv_cOMPUTER_TeamChaos;
    }
    else {
    }
    return 0;
}

int libGame_gf_ComputerPlayerInFaction (int lp_faction) {
    int autoC49E022D_val;

    // Implementation
    autoC49E022D_val = lp_faction;
    if (autoC49E022D_val == libGame_ge_Faction_Order) {
        return libCore_gv_cOMPUTER_TeamOrder;
    }
    else if (autoC49E022D_val == libGame_ge_Faction_Chaos) {
        return libCore_gv_cOMPUTER_TeamChaos;
    }
    else if (autoC49E022D_val == libGame_ge_Faction_Neutral) {
        return libCore_gv_cOMPUTER_Neutral;
    }
    else if (autoC49E022D_val == libGame_ge_Faction_HostileCreeps) {
        return libCore_gv_cOMPUTER_Hostile;
    }
    else {
    }
    return libCore_gv_cOMPUTER_Neutral;
}

int libGame_gf_PlayersAliveOnTeam (int lp_team) {
    playergroup autoF6F1B708_g;
    int autoF6F1B708_p;

    // Variable Declarations
    int lv_itPlayer;
    int lv_count;

    // Variable Initialization

    // Implementation
    autoF6F1B708_g = libGame_gf_PlayersOnTeamHeroes(lp_team, false); 
    autoF6F1B708_p = 1;
    for ( ; autoF6F1B708_p <= PlayerGroupCount(autoF6F1B708_g) ; autoF6F1B708_p += (lv_itPlayer == PlayerGroupPlayer(autoF6F1B708_g, autoF6F1B708_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoF6F1B708_g, autoF6F1B708_p);
        if ((libGame_gv_players[lv_itPlayer].lv_isDead == false)) {
            lv_count += 1;
        }

    }
    return lv_count;
}

int libGame_gf_GetPlayerNumberFromRosterSlot (int lp_rosterSlot) {
    int autoC6542F8A_ae;
    int autoC6542F8A_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    autoC6542F8A_ae = libCore_gv_bALMaxPlayers;
    autoC6542F8A_ai = 1;
    lv_i = 1;
    for ( ; ( (autoC6542F8A_ai >= 0 && lv_i <= autoC6542F8A_ae) || (autoC6542F8A_ai <= 0 && lv_i >= autoC6542F8A_ae) ) ; lv_i += autoC6542F8A_ai ) {
        if ((libGame_gv_players[lv_i].lv_rosterSlot == lp_rosterSlot)) {
            return lv_i;
        }

    }
    return 0;
}

bool libGame_gf_UnitIsHero (unit lp_testUnit) {
    // Variable Declarations
    int lv_ownerPlayer;

    // Variable Initialization

    // Implementation
    lv_ownerPlayer = UnitGetOwner(lp_testUnit);
    if (((lv_ownerPlayer < 1) || (lv_ownerPlayer > libCore_gv_bALMaxPlayers))) {
        return false;
    }

    if ((UnitFilterMatch(lp_testUnit, lv_ownerPlayer, libCore_gv_filtersHeroicjustexcludingMissile) == true) && ((lp_testUnit == libGame_gv_players[lv_ownerPlayer].lv_heroUnit) || (lp_testUnit == libGame_gv_players[lv_ownerPlayer].lv_activeVehicle))) {
        return true;
    }

    if ((UnitGroupHasUnit(libGame_gv_players[lv_ownerPlayer].lv_heroUnitGroup, lp_testUnit) == true)) {
        return true;
    }

    return false;
}

int libGame_gf_GetCustomValueLevelofHeroUnit (unit lp_heroUnit) {
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_heroUnit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_HeroLevelIndex)));
}

void libGame_gf_InitializePlayer (int lp_player, int lp_team) {
    // Variable Declarations
    int lv_numberOfPlayersOnTeam;
    int lv_slot;

    // Variable Initialization

    // Implementation
    libGame_gv_players[lp_player].lv_faction = lp_team;
    if ((lp_team == libGame_ge_Faction_Order)) {
        PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, lp_player);
        lv_numberOfPlayersOnTeam = PlayerGroupCount(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup);
        lv_slot = (lv_numberOfPlayersOnTeam + 0);
        libGame_gv_players[lp_player].lv_spawnPoint = PlayerStartLocation(lv_slot);
    }

    if ((lp_team == libGame_ge_Faction_Chaos)) {
        PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, lp_player);
        lv_numberOfPlayersOnTeam = PlayerGroupCount(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup);
        lv_slot = (lv_numberOfPlayersOnTeam + 5);
        libGame_gv_players[lp_player].lv_spawnPoint = PlayerStartLocation(lv_slot);
    }

    libGame_gv_players[lp_player].lv_rosterSlot = lv_slot;
    libGame_gv_players[lp_player].lv_teamPlayerSlot = lv_numberOfPlayersOnTeam;
    if ((PlayerStatus(lp_player) == c_playerStatusActive) && (PlayerType(lp_player) != c_playerTypeComputer)) {
        libGame_gv_players[lp_player].lv_playerStatus = libGame_ge_PlayerStatusStorm_ChoosingaHero;
        CameraPan(lp_player, libGame_gv_players[lp_player].lv_spawnPoint, 0.0, -1, 0.0, false);
        CameraLockInput(lp_player, true);
        libNtve_gf_SetAllSoundChannelVolumes(libNtve_ge_VolumeChannelMode_Game, libCore_gv_playerGroupFromPlayer[lp_player], 0.0);
        PlayerGroupAdd(libCore_gv_activeHumanPlayers, lp_player);
    }

    libGame_gv_players[lp_player].lv_name = PlayerName(lp_player);
    PlayerSetState(lp_player, c_playerStateDisplayGameResult, false);
}

void libGame_gf_GrantXPToPlayer (fixed lp_xP, int lp_player, int lp_source) {
    int auto993D99AD_val;

    // Variable Declarations
    unit lv_heroUnit;
    int lv_playerLevel;
    fixed lv_totalXPForNextLevel;
    fixed lv_totalXPForCurrentLevel;
    fixed lv_currentXPForPlayer;
    fixed lv_fractionalLevelValue;
    fixed lv_xPDifference;

    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    if ((UnitIsValid(lv_heroUnit) == false)) {
        return ;
    }

    UnitXPAddXP(lv_heroUnit, null, lp_xP);
    auto993D99AD_val = lp_source;
    if (auto993D99AD_val == libGame_ge_XPSources_Creep) {
        libGame_gv_players[lp_player].lv_xPRecievedFromCreeps += lp_xP;
    }
    else if (auto993D99AD_val == libGame_ge_XPSources_Hero) {
        libGame_gv_players[lp_player].lv_xPRecievedFromHeroes += lp_xP;
    }
    else if (auto993D99AD_val == libGame_ge_XPSources_Minion) {
        libGame_gv_players[lp_player].lv_xPRecievedFromMinions += lp_xP;
    }
    else if (auto993D99AD_val == libGame_ge_XPSources_Structure) {
        libGame_gv_players[lp_player].lv_xPRecievedFromStructures += lp_xP;
    }
    else if (auto993D99AD_val == libGame_ge_XPSources_Trickle) {
        libGame_gv_players[lp_player].lv_xPRecievedFromTrickle += lp_xP;
    }
    else if (auto993D99AD_val == libGame_ge_XPSources_RegenGlobe) {
        libGame_gv_players[lp_player].lv_xPRecievedFromRegenGlobe += lp_xP;
    }
    else {
    }
    lv_playerLevel = libGame_gv_scoreValues[lp_player].lv_level;
    if ((lv_playerLevel == libCore_gv_bALMaxLevel)) {
        lv_fractionalLevelValue = lv_playerLevel;
    }
    else {
        lv_totalXPForNextLevel = libCore_gf_GetTotalXPForLevel((lv_playerLevel + 1));
        lv_totalXPForCurrentLevel = libCore_gf_GetTotalXPForLevel(lv_playerLevel);
        lv_currentXPForPlayer = UnitGetPropertyFixed(lv_heroUnit, c_unitPropXP, c_unitPropCurrent);
        lv_xPDifference = (lv_totalXPForNextLevel - lv_totalXPForCurrentLevel);
        if ((lv_xPDifference > 0.0)) {
            lv_fractionalLevelValue = (lv_playerLevel + (lv_currentXPForPlayer - lv_totalXPForCurrentLevel) / lv_xPDifference);
            libGame_gf_ScoreValuesReportRealValueAndLog(lp_player, "FractionalTeamLevel", lv_fractionalLevelValue);
        }

    }
}

trigger auto_libGame_gf_LevelUpHero_Trigger = null;
unit auto_libGame_gf_LevelUpHero_lp_hero;

void libGame_gf_LevelUpHero (unit lp_hero) {
    auto_libGame_gf_LevelUpHero_lp_hero = lp_hero;

    if (auto_libGame_gf_LevelUpHero_Trigger == null) {
        auto_libGame_gf_LevelUpHero_Trigger = TriggerCreate("auto_libGame_gf_LevelUpHero_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_LevelUpHero_Trigger, false, false);
}

bool auto_libGame_gf_LevelUpHero_TriggerFunc (bool testConds, bool runActions) {
    unit lp_hero = auto_libGame_gf_LevelUpHero_lp_hero;

    int autoDDBD77DD_val;
    int autoE654A081_ae;
    int autoE654A081_ai;
    unitgroup auto0D9AE8AF_g;
    int auto0D9AE8AF_u;
    int auto50611CD3_ae;
    int auto50611CD3_ai;

    // Variable Declarations
    int lv_itTalentTier;
    int lv_player;
    int lv_level;
    int lv_heroIndex;
    int lv_team;
    unit lv_itUnit;

    // Variable Initialization

    // Implementation
    UnitSetCustomValue(lp_hero, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_HeroLevelIndex), (libGame_gf_GetCustomValueLevelofHeroUnit(lp_hero) + 1));
    lv_player = UnitGetOwner(lp_hero);
    if ((lv_player > libCore_gv_bALMaxEnginePlayerCount)) {
        return true;
    }

    lv_level = libGame_gf_GetCustomValueLevelofHeroUnit(lp_hero);
    lv_heroIndex = libGame_gv_players[lv_player].lv_heroIndex;
    lv_team = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_hero));
    libGame_gv_teams[lv_team].lv_teamLevel = MaxI(libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_player)].lv_teamLevel, lv_level);
    libGame_gv_scoreValues[lv_player].lv_level = lv_level;
    if ((libSond_gf_SoundtrackIsIntroPlaying() == false) && (libCore_gv_sYSGameMode != libCore_ge_GameModes_ArenaMode) && (libCore_gv_sYSGameMode != libCore_ge_GameModes_AttackDefend)) {
        autoDDBD77DD_val = libGame_gv_teams[lv_team].lv_teamLevel;
        if (autoDDBD77DD_val == 10) {
            libSond_gf_SoundtrackUpdateMapSoundtrackIndex();
        }
        else if (autoDDBD77DD_val == 20) {
            libSond_gf_SoundtrackUpdateMapSoundtrackIndex();
        }
        else {
        }
    }

    libUIUI_gf_TopBarTeamLevelUpdateTeamsLevelLabel(lv_team, lv_level);
    libUIUI_gf_DeathTimerPanelUpdateTeamDeathTimeIndicatorForTeam(lv_team);
    libGame_gf_ApplyLevelUpHeroStatsForHeroSingleLevel(lp_hero);
    libGame_gf_UpdateHeroWeaponStats(lp_hero);
    autoE654A081_ae = libCore_gv_talents_MaxTiers_C;
    autoE654A081_ai = 1;
    lv_itTalentTier = 1;
    for ( ; ( (autoE654A081_ai >= 0 && lv_itTalentTier <= autoE654A081_ae) || (autoE654A081_ai <= 0 && lv_itTalentTier >= autoE654A081_ae) ) ; lv_itTalentTier += autoE654A081_ai ) {
        if (((lv_level == 1) || (lv_level == (libGame_gv_players[lv_player].lv_talents_TierLevels[lv_itTalentTier].lv_level - 1)))) {
            libGame_gf_PreloadTalentModelAssets(lv_player, lv_itTalentTier);
            break;
        }

    }
    if ((libCore_gv_sYSTalentsOn == true)) {
        SetTalentTreeHeroLevel(lv_player, lv_level);
        libGame_gf_TalentsUpdateChoicePanelForPlayer(lv_player);
        if ((libCore_gv_tUTTalentsAutobuyOn == true) && (libGame_gv_talents_ActiveChoiceTierForPlayer[lv_player] != 0) && (libGame_gv_talents_TalentChoices[lv_player][libGame_gv_talents_ActiveChoiceTierForPlayer[lv_player]].lv_selection == 0)) {
            if ((libGame_gv_players[lv_player].lv_talents_TierLevels[libGame_gv_talents_ActiveChoiceTierForPlayer[lv_player]].lv_tierType == libCore_ge_TalentTierType_HeroicAbility)) {
                libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_player], libGame_ge_AnnouncementPriorities_Critical, libCore_ge_AnnouncerVOEvents_Null, "ShowTutorialNotification", StringExternal("Param/Value/lib_Game_8CBC2F41"), StringExternal("Param/Value/lib_Game_E4ADA4DB"), null, null, libGame_gv_announcement_StandardTimerDuration_C, false);
            }

            libGame_gf_TalentsChooseTalentForPlayer(libGame_gv_talents_ActiveChoiceTierForPlayer[lv_player], 1, lv_player);
        }

    }

    StatEventCreate("LevelUp");
    StatEventAddDataInt(StatEventLastCreated(), "PlayerID", lv_player);
    StatEventAddDataInt(StatEventLastCreated(), "Level", lv_level);
    StatEventSend(StatEventLastCreated());
    libGame_gf_SendEventHeroLevelUp(lv_player);
    if ((libGame_gv_players[lv_player].lv_suppressLevelUpFXAndTeamXPTracking == false) && (libGame_gv_players[lv_player].lv_suppressLevelUpFXAndSounds == false) && (UnitLevel(lp_hero) > 1)) {
        auto0D9AE8AF_g = libGame_gv_players[lv_player].lv_heroUnitGroup;
        auto0D9AE8AF_u = 1;
        for ( ; auto0D9AE8AF_u <= UnitGroupCount(auto0D9AE8AF_g, c_unitCountAll) ; auto0D9AE8AF_u += (lv_itUnit == UnitGroupUnit(auto0D9AE8AF_g, auto0D9AE8AF_u)) ) {
            lv_itUnit = UnitGroupUnit(auto0D9AE8AF_g, auto0D9AE8AF_u);
            libNtve_gf_SendActorMessageToUnit(lv_itUnit, "Signal LevelUp");
            SoundPlayOnUnit(SoundLink("UI_Game_LevelUp_Team", -1), PlayerGroupSingle(lv_player), lv_itUnit, 8.0, 100.0, 0.0);
            SoundPlayOnUnit(SoundLink("UI_Game_LevelUp_Enemy", -1), PlayerGroupAlliance(c_playerGroupEnemy, lv_player), lv_itUnit, 8.0, 100.0, 0.0);
        }
        auto50611CD3_ae = libCore_gv_talents_MaxTiers_C;
        auto50611CD3_ai = 1;
        lv_itTalentTier = 1;
        for ( ; ( (auto50611CD3_ai >= 0 && lv_itTalentTier <= auto50611CD3_ae) || (auto50611CD3_ai <= 0 && lv_itTalentTier >= auto50611CD3_ae) ) ; lv_itTalentTier += auto50611CD3_ai ) {
            if ((libCore_gv_tUTTalentsAutobuyOn == false) && (lv_level == libGame_gv_players[lv_player].lv_talents_TierLevels[lv_itTalentTier].lv_level)) {
                SoundPlayOnUnit(SoundLink("UI_Game_LevelUp_Talent", -1), PlayerGroupSingle(lv_player), lp_hero, 8.0, 100.0, 0.0);
            }

        }
    }

    return true;
}

void libGame_gf_TurnOnOffLevelUpFXForPlayer (bool lp_onOff, int lp_player) {
    // Implementation
    if ((lp_onOff == true)) {
        libGame_gv_players[lp_player].lv_suppressLevelUpFXAndSounds = false;
    }
    else {
        libGame_gv_players[lp_player].lv_suppressLevelUpFXAndSounds = true;
    }
}

void libGame_gf_PreloadTalentModelAssets (int lp_player, int lp_talentTier) {
    int auto921EEAE9_ae;
    int auto921EEAE9_ai;
    int auto3CD7A32D_ae;
    int auto3CD7A32D_ai;

    // Variable Declarations
    int lv_itButtonIndex;
    int lv_itAbilityMod;
    string lv_modelEntry;

    // Variable Initialization
    lv_modelEntry = "";

    // Implementation
    auto921EEAE9_ae = libGame_gv_talents_TalentChoices[lp_player][lp_talentTier].lv_numberOfTalentsForThisTier;
    auto921EEAE9_ai = 1;
    lv_itButtonIndex = 1;
    for ( ; ( (auto921EEAE9_ai >= 0 && lv_itButtonIndex <= auto921EEAE9_ae) || (auto921EEAE9_ai <= 0 && lv_itButtonIndex >= auto921EEAE9_ae) ) ; lv_itButtonIndex += auto921EEAE9_ai ) {
        auto3CD7A32D_ae = libGame_gv_talents_TalentChoices[lp_player][lp_talentTier].lv_talentData[lv_itButtonIndex].lv_totalModifications;
        auto3CD7A32D_ai = 1;
        lv_itAbilityMod = 1;
        for ( ; ( (auto3CD7A32D_ai >= 0 && lv_itAbilityMod <= auto3CD7A32D_ae) || (auto3CD7A32D_ai <= 0 && lv_itAbilityMod >= auto3CD7A32D_ae) ) ; lv_itAbilityMod += auto3CD7A32D_ai ) {
            if ((libGame_gv_talents_TalentChoices[lp_player][lp_talentTier].lv_talentData[lv_itButtonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_changeType == c_talentModificationCatalogReplacement) && (libGame_gv_talents_TalentChoices[lp_player][lp_talentTier].lv_talentData[lv_itButtonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_catalog == c_gameCatalogModel)) {
                lv_modelEntry = libGame_gv_talents_TalentChoices[lp_player][lp_talentTier].lv_talentData[lv_itButtonIndex].lv_abilityModificationData[lv_itAbilityMod].lv_catalogChangeTo;
                libNtve_gf_PreloadModelObject((lv_modelEntry), false);
            }

        }
    }
}

trigger auto_libGame_gf_SpawnHero_Trigger = null;
int auto_libGame_gf_SpawnHero_lp_player;
int auto_libGame_gf_SpawnHero_lp_heroIndex;
point auto_libGame_gf_SpawnHero_lp_spawnLocation;

void libGame_gf_SpawnHero (int lp_player, int lp_heroIndex, point lp_spawnLocation) {
    auto_libGame_gf_SpawnHero_lp_player = lp_player;
    auto_libGame_gf_SpawnHero_lp_heroIndex = lp_heroIndex;
    auto_libGame_gf_SpawnHero_lp_spawnLocation = lp_spawnLocation;

    if (auto_libGame_gf_SpawnHero_Trigger == null) {
        auto_libGame_gf_SpawnHero_Trigger = TriggerCreate("auto_libGame_gf_SpawnHero_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_SpawnHero_Trigger, false, false);
}

bool auto_libGame_gf_SpawnHero_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libGame_gf_SpawnHero_lp_player;
    int lp_heroIndex = auto_libGame_gf_SpawnHero_lp_heroIndex;
    point lp_spawnLocation = auto_libGame_gf_SpawnHero_lp_spawnLocation;

    // Variable Declarations
    int lv_skinIndex;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_players[lp_player].lv_heroUnit != null)) {
        return true;
    }

    while (!((libGame_gv_players[lp_player].lv_heroSpawnReady == true))) {
        Wait(0.0625, c_timeGame);
    }
    lv_skinIndex = lp_player;
    if ((libGame_gv_players[lv_skinIndex].lv_skinData.lv_skinID != null)) {
        PlayerSetSkin(lp_player, libGame_gv_players[lv_skinIndex].lv_skinData.lv_skinID);
    }

    libNtve_gf_CreateUnitsAtPoint2(1, libGame_gv_players[lp_heroIndex].lv_heroData.lv_unitType, c_unitCreateIgnorePlacement, lp_player, lp_spawnLocation);
    libGame_gv_players[lp_player].lv_heroUnit = UnitLastCreated();
    libAIAI_gv_aIHeroes[lp_player].lv_currentHeroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    UnitGroupClear(libGame_gv_players[lp_player].lv_heroUnitGroup);
    UnitGroupAdd(libGame_gv_players[lp_player].lv_heroUnitGroup, UnitLastCreated());
    AIAddPlayerUnit(libGame_gv_players[lp_player].lv_heroUnit);
    libGame_gv_players[lp_player].lv_heroIndex = lp_heroIndex;
    libGame_gv_players[lp_player].lv_portraitIcon = libGame_gv_players[lp_heroIndex].lv_heroData.lv_portrait;
    libGame_gv_players[lp_player].lv_vOSoundSuffix = "";
    libCore_gf_DataHeroVOReloadHeroVODataForHero(lp_player);
    libCore_gf_DataClearAnnouncerVOOverridesPlayer(lp_player);
    libCore_gf_SendPlayersSkinActorMessagesToUnit(lp_player, libGame_gv_players[lp_player].lv_heroUnit);
    UnitGroupAdd(libGame_gv_heroes, UnitLastCreated());
    UnitStatusBarOverride(UnitLastCreated(), c_unitStatusGroupAll);
    libUIUI_gf_InitPathingLines(UnitLastCreated(), lp_player);
    if ((libGame_gv_suppressInitialHeroSpawnFX == false)) {
        libNtve_gf_SendActorMessageToUnit(libGame_gv_players[lp_player].lv_heroUnit, "Signal Respawn");
    }

    UnitSelect(libGame_gv_players[lp_player].lv_heroUnit, lp_player, true);
    libGame_gv_players[lp_player].lv_playerStatus = libGame_ge_PlayerStatusStorm_Playing;
    libGame_gv_players[lp_player].lv_isDead = false;
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(libGame_gv_players[lp_player].lv_heroUnit, lp_player);
    libUIUI_gf_UIHeroConsoleSetUpForPlayer(libGame_gv_players[lp_player].lv_heroUnit, lp_player);
    libUIUI_gf_UIUnitStatusFramesHookupUnitStatusFramesForPlayer(lp_player);
    libUIUI_gf_UIHeroConsoleShowHideForPlayer(true, lp_player);
    if ((libNtve_gf_PlayerInCinematicMode(lp_player) == false)) {
        UISetMode(libCore_gv_playerGroupFromPlayer[lp_player], c_uiModeConsole, c_transitionDurationImmediate);
        libUIUI_gf_TopBarPanelShowHideForPlayer(true, lp_player);
        libUIUI_gf_UIGameUIShowHideConsolePanelForPlayer(true, lp_player);
    }

    PlayerSetHero(lp_player, libGame_gv_players[lp_heroIndex].lv_heroData.lv_heroCatalogLink);
    StatEventCreate("PlayerSpawned");
    StatEventAddDataInt(StatEventLastCreated(), "PlayerID", lp_player);
    StatEventAddDataString(StatEventLastCreated(), "Hero", (libGame_gv_players[lp_heroIndex].lv_heroData.lv_unitType));
    StatEventSend(StatEventLastCreated());
    ActorScopeSend(ActorScopeFromUnit(libGame_gv_players[lp_player].lv_heroUnit), "StatusIncrement PreventDestroyOnDeath");
    UnitBehaviorAdd(libGame_gv_players[lp_player].lv_heroUnit, "NearShop", libGame_gv_players[lp_player].lv_heroUnit, 1);
    libGame_gf_SendEventHeroSpecialCaseMounting(lp_player);
    if ((libGame_gv_heroDeath_RespawnMounted == true)) {
        libGame_gf_ApplyMountBehaviorToHero(libGame_gv_players[lp_player].lv_heroUnit);
    }

    if ((libGame_gv_players[lp_player].lv_mountData.lv_isMorphMount == true)) {
        UnitBehaviorAdd(libGame_gv_players[lp_player].lv_heroUnit, "IsMorphMounted", libGame_gv_players[lp_player].lv_heroUnit, 1);
    }

    libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[lp_player].lv_heroUnitGroup;
    if (((lp_player != 1) || (libCore_gv_sYSGameMode != libCore_ge_GameModes_Tutorial1) || (libNtve_gf_PlayerInCinematicMode(1) == false))) {
        libGame_gf_CameraUpdateCameraForPlayer(lp_player);
    }

    Wait(0.125, c_timeGame);
    libGame_gf_GrantXPToPlayer(libCore_gf_GetTotalXPForLevel(libCore_gv_sYSHeroStartLevel), lp_player, libGame_ge_XPSources_Trickle);
    libCore_gf_SetTalentsTierLevels(lp_player);
    libGame_gf_TalentsSetupTalentChoicesFromHeroDataForPlayer(lp_heroIndex, lp_player);
    if ((libCore_gv_tUTTalentsAutobuyOn == true)) {
        libGame_gf_SendEventHeroGainTalent("", lp_player);
    }

    SetTalentTreeHeroLevel(lp_player, 0);
    libGame_gf_LevelUpHero(libGame_gv_players[lp_player].lv_heroUnit);
    libUIUI_gf_UIObserverUIAddPlayerToObserverUI(lp_player);
    libUIUI_gf_TopBarTeamLevelHookUpXPBarUnitForTeamAndShowTeamLevelLabel(libGame_gf_TeamNumberOfPlayer(lp_player), libGame_gv_players[lp_player].lv_heroUnit);
    libSond_gv_soundtrack_UniqueSoundtrackEnabled[lp_player] = false;
    libGame_gf_SendEventHeroSpawn(lp_player);
    return true;
}

trigger auto_libGame_gf_SpawnHeroesForTeam_Trigger = null;
int auto_libGame_gf_SpawnHeroesForTeam_lp_team;

void libGame_gf_SpawnHeroesForTeam (int lp_team) {
    auto_libGame_gf_SpawnHeroesForTeam_lp_team = lp_team;

    if (auto_libGame_gf_SpawnHeroesForTeam_Trigger == null) {
        auto_libGame_gf_SpawnHeroesForTeam_Trigger = TriggerCreate("auto_libGame_gf_SpawnHeroesForTeam_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_SpawnHeroesForTeam_Trigger, false, false);
}

bool auto_libGame_gf_SpawnHeroesForTeam_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libGame_gf_SpawnHeroesForTeam_lp_team;

    playergroup auto6879AF6E_g;
    int auto6879AF6E_p;
    int autoA7CE9B09_ae;
    int autoA7CE9B09_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itManualSpawnHero;
    int lv_itManualSpawnHeroIndex;
    bool lv_isManualSpawnHero;

    // Variable Initialization

    // Implementation
    auto6879AF6E_g = libGame_gv_teams[lp_team].lv_teamPlayerGroup; 
    auto6879AF6E_p = 1;
    for ( ; auto6879AF6E_p <= PlayerGroupCount(auto6879AF6E_g) ; auto6879AF6E_p += (lv_itPlayer == PlayerGroupPlayer(auto6879AF6E_g, auto6879AF6E_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto6879AF6E_g, auto6879AF6E_p);
        if ((lv_itPlayer == 1) && (libCore_gv_dEBUGDebuggingEnabled == true) && (BankValueGetAsFlag(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "Debug Menu Options", "SavedHero") == true) && (BankValueGetAsInt(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "Debug Menu Options", "TrueHeroIndex") != 0) && (BankValueGetAsInt(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "Debug Menu Options", "TrueSkinIndex") != 0) && (BankValueGetAsInt(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "Debug Menu Options", "TrueMountIndex") != 0)) {
            libGame_gv_players[lv_itPlayer].lv_heroIndex = BankValueGetAsInt(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "Debug Menu Options", "TrueHeroIndex");
            libGame_gv_players[lv_itPlayer].lv_selectedSkin = BankValueGetAsInt(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "Debug Menu Options", "TrueSkinIndex");
            libGame_gv_players[lv_itPlayer].lv_selectedMount = BankValueGetAsInt(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "Debug Menu Options", "TrueMountIndex");
        }

        if ((lv_itPlayer <= libCore_gv_bALMaxPlayers) && (PlayerStatus(lv_itPlayer) != c_playerStatusUnused) && (libGame_gv_players[lv_itPlayer].lv_heroUnit == null)) {
            autoA7CE9B09_ae = libCore_gv_dataHeroesManualSpawnHeroesCount;
            autoA7CE9B09_ai = 1;
            lv_itManualSpawnHero = 1;
            for ( ; ( (autoA7CE9B09_ai >= 0 && lv_itManualSpawnHero <= autoA7CE9B09_ae) || (autoA7CE9B09_ai <= 0 && lv_itManualSpawnHero >= autoA7CE9B09_ae) ) ; lv_itManualSpawnHero += autoA7CE9B09_ai ) {
                if ((libGame_gv_players[lv_itPlayer].lv_heroIndex == libCore_gv_dataHeroesManualSpawnHeroIDs[lv_itManualSpawnHero].lv_heroIndex) && (libCore_gv_dataHeroesManualSpawnHeroIDs[lv_itManualSpawnHero].lv_core == false)) {
                    lv_isManualSpawnHero = true;
                    lv_itManualSpawnHeroIndex = lv_itManualSpawnHero;
                    break;
                }

            }
            if ((lv_isManualSpawnHero == true)) {
                libGame_gf_SendEventManualHeroSpawn(lv_itPlayer, libCore_gv_dataHeroesManualSpawnHeroIDs[lv_itManualSpawnHeroIndex].lv_heroIndex, 0);
                lv_isManualSpawnHero = false;
            }
            else {
                libGame_gf_SpawnHero(lv_itPlayer, lv_itPlayer, libGame_gv_players[lv_itPlayer].lv_spawnPoint);
            }
            Wait(libGame_gv_individualHeroSpawnMiniDelay_C, c_timeGame);
        }

        if ((lv_itPlayer == 1) && (libCore_gv_dEBUGDebuggingEnabled == true) && (BankValueGetAsFlag(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "Debug Menu Options", "SavedHero") == true) && (BankValueGetAsInt(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "Debug Menu Options", "TrueHeroIndex") != 0) && (BankValueGetAsInt(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "Debug Menu Options", "TrueSkinIndex") != 0) && (BankValueGetAsInt(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "Debug Menu Options", "TrueMountIndex") != 0)) {
            libGame_gf_GrantXPToPlayer(BankValueGetAsFixed(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "Debug Menu Options", "HeroLevelXP"), lv_itPlayer, libGame_ge_XPSources_Debug);
        }

    }
    return true;
}

void libGame_gf_SpawnHeroesForBothTeams () {
    int auto434A30E3_ae;
    int auto434A30E3_ai;
    int auto7B27C0CF_ae;
    int auto7B27C0CF_ai;
    playergroup autoD57830E2_g;
    int autoD57830E2_p;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;
    bool lv_ready;

    // Variable Initialization

    // Implementation
    auto434A30E3_ae = libCore_gv_bALMaxTeams;
    auto434A30E3_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (auto434A30E3_ai >= 0 && lv_itTeam <= auto434A30E3_ae) || (auto434A30E3_ai <= 0 && lv_itTeam >= auto434A30E3_ae) ) ; lv_itTeam += auto434A30E3_ai ) {
        libGame_gf_SpawnHeroesForTeam(lv_itTeam);
    }
    if ((libGame_gv_heroSpawnBlockGame == false)) {
        return ;
    }

    while (true) {
        lv_ready = true;
        auto7B27C0CF_ae = libCore_gv_bALMaxTeams;
        auto7B27C0CF_ai = 1;
        lv_itTeam = 1;
        for ( ; ( (auto7B27C0CF_ai >= 0 && lv_itTeam <= auto7B27C0CF_ae) || (auto7B27C0CF_ai <= 0 && lv_itTeam >= auto7B27C0CF_ae) ) ; lv_itTeam += auto7B27C0CF_ai ) {
            autoD57830E2_g = libGame_gv_teams[lv_itTeam].lv_teamPlayerGroup; 
            autoD57830E2_p = 1;
            for ( ; autoD57830E2_p <= PlayerGroupCount(autoD57830E2_g) ; autoD57830E2_p += (lv_itPlayer == PlayerGroupPlayer(autoD57830E2_g, autoD57830E2_p)) ) {
                lv_itPlayer = PlayerGroupPlayer(autoD57830E2_g, autoD57830E2_p);
                if ((lv_itPlayer <= libCore_gv_bALMaxPlayers) && (PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
                    if ((libGame_gv_players[lv_itPlayer].lv_heroUnit == null)) {
                        lv_ready = false;
                        break;
                    }

                }

            }
            if ((lv_ready == false)) {
                break;
            }

        }
        if ((lv_ready == true)) {
            return ;
        }

        Wait(0.125, c_timeGame);
    }
}

void libGame_gf_PreloadHeroesForTeam (int lp_team) {
    playergroup autoD88D129F_g;
    int autoD88D129F_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    autoD88D129F_g = libGame_gv_teams[lp_team].lv_teamPlayerGroup; 
    autoD88D129F_p = 1;
    for ( ; autoD88D129F_p <= PlayerGroupCount(autoD88D129F_g) ; autoD88D129F_p += (lv_itPlayer == PlayerGroupPlayer(autoD88D129F_g, autoD88D129F_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoD88D129F_g, autoD88D129F_p);
        if ((libGame_gv_players[lv_itPlayer].lv_heroIndex != 0)) {
            libCore_gf_DataClearHeroDataAtIndex(lv_itPlayer);
            libCore_gf_DataLoadHeroDataIntoIndex(libCore_gf_GetHeroFromIndex(libGame_gv_players[lv_itPlayer].lv_heroIndex), lv_itPlayer);
            libNtve_gf_PreloadUnit(libGame_gv_players[lv_itPlayer].lv_heroData.lv_unitType, false);
        }

    }
}

void libGame_gf_ShareUnshareVisionOfAlliesForPlayer (bool lp_onOff, int lp_player) {
    playergroup auto198D0B9F_g;
    int auto198D0B9F_p;

    // Variable Declarations
    int lv_i;
    unit lv_u;
    playergroup lv_allyPlayerGroup;

    // Variable Initialization
    lv_allyPlayerGroup = PlayerGroupEmpty();

    // Implementation
    lv_allyPlayerGroup = libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lp_player)].lv_teamPlayerGroup;
    auto198D0B9F_g = lv_allyPlayerGroup; 
    auto198D0B9F_p = 1;
    for ( ; auto198D0B9F_p <= PlayerGroupCount(auto198D0B9F_g) ; auto198D0B9F_p += (lv_i == PlayerGroupPlayer(auto198D0B9F_g, auto198D0B9F_p)) ) {
        lv_i = PlayerGroupPlayer(auto198D0B9F_g, auto198D0B9F_p);
        if ((lv_i != lp_player)) {
            PlayerSetAlliance(lv_i, c_allianceIdVision, lp_player, lp_onOff);
        }

    }
}

void libGame_gf_EndGameForPlayerStorm (int lp_player) {
    // Implementation
    libGame_gf_ScoreValuesReportForPlayer(lp_player);
    libGame_gv_players[lp_player].lv_gameEndedForPlayer = true;
    GameOver(lp_player, libGame_gv_players[lp_player].lv_victoryDefeat, false, true);
}

trigger auto_libGame_gf_PlayerHeroDisplacementCameraLock_Trigger = null;
unit auto_libGame_gf_PlayerHeroDisplacementCameraLock_lp_lockUnit;
string auto_libGame_gf_PlayerHeroDisplacementCameraLock_lp_displacingBehavior;

void libGame_gf_PlayerHeroDisplacementCameraLock (unit lp_lockUnit, string lp_displacingBehavior) {
    auto_libGame_gf_PlayerHeroDisplacementCameraLock_lp_lockUnit = lp_lockUnit;
    auto_libGame_gf_PlayerHeroDisplacementCameraLock_lp_displacingBehavior = lp_displacingBehavior;

    if (auto_libGame_gf_PlayerHeroDisplacementCameraLock_Trigger == null) {
        auto_libGame_gf_PlayerHeroDisplacementCameraLock_Trigger = TriggerCreate("auto_libGame_gf_PlayerHeroDisplacementCameraLock_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_PlayerHeroDisplacementCameraLock_Trigger, false, false);
}

bool auto_libGame_gf_PlayerHeroDisplacementCameraLock_TriggerFunc (bool testConds, bool runActions) {
    unit lp_lockUnit = auto_libGame_gf_PlayerHeroDisplacementCameraLock_lp_lockUnit;
    string lp_displacingBehavior = auto_libGame_gf_PlayerHeroDisplacementCameraLock_lp_displacingBehavior;

    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = UnitGetOwner(lp_lockUnit);

    // Implementation
    if (((UnitGetOwner(lp_lockUnit) >= 1) && (UnitGetOwner(lp_lockUnit) <= 10) && (lp_lockUnit == libGame_gv_players[lv_player].lv_heroUnit) && (UnitIsAlive(lp_lockUnit) == true))) {
        libGame_gv_players[lv_player].lv_cameraPlayerHasControl = false;
        libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[lv_player].lv_heroUnit);
        CameraUseHeightDisplacement(lv_player, true);
        libGame_gf_CameraUpdateCameraForPlayer(lv_player);
        libGame_gf_PlayerHeroDisplacementCameraUnlock(lv_player, lp_displacingBehavior);
    }

    return true;
}

trigger auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_Trigger = null;
int auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_lp_player;
string auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_lp_displacingBehavior;

void libGame_gf_PlayerHeroDisplacementCameraUnlock (int lp_player, string lp_displacingBehavior) {
    auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_lp_player = lp_player;
    auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_lp_displacingBehavior = lp_displacingBehavior;

    if (auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_Trigger == null) {
        auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_Trigger = TriggerCreate("auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_Trigger, false, false);
}

bool auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_lp_player;
    string lp_displacingBehavior = auto_libGame_gf_PlayerHeroDisplacementCameraUnlock_lp_displacingBehavior;

    // Implementation
    while (((UnitBehaviorCount(libGame_gv_players[lp_player].lv_heroUnit, lp_displacingBehavior) >= 1) && (UnitIsAlive(libGame_gv_players[lp_player].lv_heroUnit) == true))) {
        Wait(0.0625, c_timeGame);
    }
    libGame_gv_players[lp_player].lv_cameraPlayerHasControl = true;
    CameraUseHeightDisplacement(lp_player, false);
    libGame_gf_CameraUpdateCameraForPlayer(lp_player);
    return true;
}

void libGame_gf_UpdateScalingForUnit (unit lp_unit, int lp_desiredLevel, int lp_existingLevel) {
    // Variable Declarations
    int lv_xPToApply;

    // Variable Initialization

    // Implementation
    lv_xPToApply = (lp_desiredLevel - lp_existingLevel);
    if ((lv_xPToApply > 0)) {
        UnitXPAddXP(lp_unit, null, lv_xPToApply);
    }

}

void libGame_gf_UpdateUpgradesForPlayer (int lp_player, unit lp_unit, int lp_level) {
    // Variable Declarations
    string lv_upgrade;

    // Variable Initialization

    // Implementation
    lv_upgrade = (((UnitGetType(lp_unit)) + "Upgrade"));
    if ((lv_upgrade != null)) {
        libNtve_gf_SetUpgradeLevelForPlayer(lp_player, lv_upgrade, lp_level);
    }

}

void libGame_gf_JungleUpdateScalingForCamp (int lp_camp, int lp_scalingTicks) {
    int autoC1B55DFB_ae;
    int autoC1B55DFB_ai;

    // Variable Declarations
    int lv_itDefender;
    int lv_currentDefenderScalingTicks;
    int lv_newDefenderScalingTicks;
    int lv_newMercScalingTicks;
    int lv_campDefenderType;
    unit lv_creepUnit;

    // Variable Initialization

    // Implementation
    lv_currentDefenderScalingTicks = libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCurrentDefenderScalingTicks;
    lv_newDefenderScalingTicks = MinI(lp_scalingTicks, libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderNumberOfRanks);
    lv_newMercScalingTicks = MinI(lp_scalingTicks, libMapM_gv_jungleCreepCamps[lp_camp].lv_mercNumberOfRanks);
    lv_campDefenderType = (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType);
    autoC1B55DFB_ae = libAIAI_gf_DefenderUnitCount(libMapM_gv_jungleCreepCamps[lp_camp].lv_aIDefenderAIIndex);
    autoC1B55DFB_ai = 1;
    lv_itDefender = 1;
    for ( ; ( (autoC1B55DFB_ai >= 0 && lv_itDefender <= autoC1B55DFB_ae) || (autoC1B55DFB_ai <= 0 && lv_itDefender >= autoC1B55DFB_ae) ) ; lv_itDefender += autoC1B55DFB_ai ) {
        lv_creepUnit = libAIAI_gf_DefenderUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_aIDefenderAIIndex, lv_itDefender);
        if ((lv_creepUnit != null) && (UnitIsAlive(lv_creepUnit) == true)) {
            libGame_gf_UpdateScalingForUnit(lv_creepUnit, lv_newDefenderScalingTicks, lv_currentDefenderScalingTicks);
            UnitSetPropertyFixed(lv_creepUnit, c_unitPropLifePercent, 100.0);
        }

    }
    libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCurrentDefenderScalingTicks = lv_newDefenderScalingTicks;
    libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCurrentMercScalingTicks = lv_newMercScalingTicks;
}

void libGame_gf_JungleUpdateScalingForCamps () {
    int autoBC04B9D5_ae;
    int autoBC04B9D5_ai;

    // Variable Declarations
    int lv_camp;

    // Variable Initialization

    // Implementation
    autoBC04B9D5_ae = libMapM_gv_jungleNumberOfCreepCamps;
    autoBC04B9D5_ai = 1;
    lv_camp = 1;
    for ( ; ( (autoBC04B9D5_ai >= 0 && lv_camp <= autoBC04B9D5_ae) || (autoBC04B9D5_ai <= 0 && lv_camp >= autoBC04B9D5_ae) ) ; lv_camp += autoBC04B9D5_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lv_camp].lv_aIState == libMapM_ge_JungleCampStates_Idle)) {
            libGame_gf_JungleUpdateScalingForCamp(lv_camp, libGame_gv_scalingTicks);
        }

    }
}

void libGame_gf_CoreUpdateScaling () {
    int autoD19BFE26_ae;
    int autoD19BFE26_ai;

    // Variable Declarations
    int lv_itTeam;

    // Variable Initialization

    // Implementation
    autoD19BFE26_ae = libCore_gv_bALMaxTeams;
    autoD19BFE26_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (autoD19BFE26_ai >= 0 && lv_itTeam <= autoD19BFE26_ae) || (autoD19BFE26_ai <= 0 && lv_itTeam >= autoD19BFE26_ae) ) ; lv_itTeam += autoD19BFE26_ai ) {
        if ((UnitIsAlive(libGame_gv_teams[lv_itTeam].lv_core) == true) && (UnitHasBehavior2(libGame_gv_teams[lv_itTeam].lv_core, "CoreScaling") == true)) {
            UnitXPSetCurrentLevel(libGame_gv_teams[lv_itTeam].lv_core, null, libGame_gv_scalingTicks);
        }

    }
}

void libGame_gf_TownUpdateL2BuildingScaling (int lp_overrideScalingTicks) {
    int autoF5E192D0_ae;
    int autoF5E192D0_ai;

    // Variable Declarations
    int lv_itTeam;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_buildingScalingEnabled == false)) {
        return ;
    }

    autoF5E192D0_ae = libCore_gv_bALMaxTeams;
    autoF5E192D0_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (autoF5E192D0_ai >= 0 && lv_itTeam <= autoF5E192D0_ae) || (autoF5E192D0_ai <= 0 && lv_itTeam >= autoF5E192D0_ae) ) ; lv_itTeam += autoF5E192D0_ai ) {
        CatalogFieldValueSet(c_gameCatalogUnit, "TownCannonTowerL2Standalone", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownCannonTowerL2Standalone", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Tower_Health)), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownCannonTowerL2Standalone", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownCannonTowerL2Standalone", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Tower_Health)), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownCannonTowerL2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownCannonTowerL2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Tower_Health)), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownCannonTowerL2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownCannonTowerL2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Tower_Health)), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogEffect, "CannonTowerL2Damage", "Amount", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogEffect, "CannonTowerL2Damage", "Amount", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + libGame_gv_buildingScaling.lv_l2_Tower_Damage), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownTownHallL2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownTownHallL2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_TownHall_Health)), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownTownHallL2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownTownHallL2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_TownHall_Health)), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogEffect, "TownHallL2WeaponDamage", "Amount", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogEffect, "TownHallL2WeaponDamage", "Amount", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + libGame_gv_buildingScaling.lv_l2_TownHall_Damage), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownMoonwellL2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownMoonwellL2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_HealingFountain_Health)), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownMoonwellL2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownMoonwellL2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_HealingFountain_Health)), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownMoonwellL2", "ShieldsStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownMoonwellL2", "ShieldsStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_HealingFountain_Shields)), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownMoonwellL2", "ShieldsMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownMoonwellL2", "ShieldsMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_HealingFountain_Shields)), c_fixedPrecisionAny));
        libGame_gf_TownUpdateL2WallGateScaling(lv_itTeam);
    }
}

void libGame_gf_TownUpdateL2WallGateScaling (int lp_team) {
    // Implementation
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL215BLUR", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL215BLUR", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL215BLUR", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL215BLUR", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL215BLURBRVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL215BLURBRVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL215BLURBRVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL215BLURBRVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL215BLURTLVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL215BLURTLVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL215BLURTLVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL215BLURTLVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL215BRUL", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL215BRUL", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL215BRUL", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL215BRUL", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL215BRULBLVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL215BRULBLVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL215BRULBLVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL215BRULBLVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL215BRULTRVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL215BRULTRVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL215BRULTRVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL215BRULTRVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2BLUR", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2BLUR", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2BLUR", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2BLUR", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2BLURBRVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2BLURBRVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2BLURBRVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2BLURBRVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2BLURTLVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2BLURTLVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2BLURTLVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2BLURTLVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2BRUL", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2BRUL", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2BRUL", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2BRUL", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2BRULBLVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2BRULBLVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2BRULBLVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2BRULBLVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2BRULTRVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2BRULTRVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2BRULTRVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2BRULTRVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2Horizontal", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2Horizontal", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2Horizontal", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2Horizontal", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2HorizontalBotVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2HorizontalBotVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2HorizontalBotVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2HorizontalBotVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2HorizontalTopVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2HorizontalTopVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2HorizontalTopVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2HorizontalTopVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2Vertical", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2Vertical", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2Vertical", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2Vertical", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2VerticalLeftVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2VerticalLeftVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2VerticalLeftVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2VerticalLeftVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2VerticalRightVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2VerticalRightVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL2VerticalRightVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL2VerticalRightVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallL2DiagonalBLUR", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallL2DiagonalBLUR", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallL2DiagonalBLUR", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallL2DiagonalBLUR", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallL2DiagonalBRUL", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallL2DiagonalBRUL", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallL2DiagonalBRUL", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallL2DiagonalBRUL", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallL2Horizontal", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallL2Horizontal", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallL2Horizontal", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallL2Horizontal", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallL2Vertical", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallL2Vertical", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallL2Vertical", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallL2Vertical", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial0L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial0L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial0L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial0L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial1L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial1L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial1L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial1L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial2L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial2L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial2L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial2L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial3L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial3L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial3L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial3L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial4L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial4L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial4L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial4L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial5L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial5L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial5L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial5L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial6L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial6L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial6L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial6L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial7L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial7L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial7L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial7L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial8L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial8L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial8L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial8L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial9L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial9L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial9L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial9L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial10L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial10L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial10L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial10L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial11L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial11L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial11L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial11L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial12L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial12L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial12L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial12L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial13L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial13L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial13L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial13L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial14L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial14L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial14L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial14L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial15L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial15L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial15L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial15L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial16L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial16L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial16L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial16L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial17L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial17L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial17L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial17L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial18L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial18L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial18L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial18L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial19L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial19L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial19L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial19L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial20L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial20L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial20L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial20L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial21L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial21L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial21L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial21L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial22L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial22L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial22L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial22L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial23L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial23L2", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial23L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial23L2", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l2_Wall_Health)), c_fixedPrecisionAny));
}

void libGame_gf_TownUpdateL3BuildingScaling (int lp_overrideScalingTicks) {
    int auto893D8959_ae;
    int auto893D8959_ai;

    // Variable Declarations
    int lv_itTeam;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_buildingScalingEnabled == false)) {
        return ;
    }

    auto893D8959_ae = libCore_gv_bALMaxTeams;
    auto893D8959_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (auto893D8959_ai >= 0 && lv_itTeam <= auto893D8959_ae) || (auto893D8959_ai <= 0 && lv_itTeam >= auto893D8959_ae) ) ; lv_itTeam += auto893D8959_ai ) {
        CatalogFieldValueSet(c_gameCatalogUnit, "TownCannonTowerL3Standalone", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownCannonTowerL3Standalone", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Tower_Health)), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownCannonTowerL3Standalone", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownCannonTowerL3Standalone", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Tower_Health)), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownCannonTowerL3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownCannonTowerL3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Tower_Health)), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownCannonTowerL3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownCannonTowerL3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Tower_Health)), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogEffect, "CannonTowerL3Damage", "Amount", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogEffect, "CannonTowerL3Damage", "Amount", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + libGame_gv_buildingScaling.lv_l3_Tower_Damage), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownTownHallL3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownTownHallL3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_TownHall_Health)), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownTownHallL3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownTownHallL3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_TownHall_Health)), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogEffect, "TownHallL3WeaponDamage", "Amount", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogEffect, "TownHallL3WeaponDamage", "Amount", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + libGame_gv_buildingScaling.lv_l3_TownHall_Damage), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownMoonwellL3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownMoonwellL3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_HealingFountain_Health)), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownMoonwellL3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownMoonwellL3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_HealingFountain_Health)), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownMoonwellL3", "ShieldsStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownMoonwellL3", "ShieldsStart", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_HealingFountain_Shields)), c_fixedPrecisionAny));
        CatalogFieldValueSet(c_gameCatalogUnit, "TownMoonwellL3", "ShieldsMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownMoonwellL3", "ShieldsMax", libGame_gf_ComputerPlayerInTeam(lv_itTeam)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_HealingFountain_Shields)), c_fixedPrecisionAny));
        libGame_gf_TownUpdateL3WallGateScaling(lv_itTeam);
    }
}

void libGame_gf_TownUpdateL3WallGateScaling (int lp_team) {
    // Implementation
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL315BLUR", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL315BLUR", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL315BLUR", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL315BLUR", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL315BLURBRVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL315BLURBRVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL315BLURBRVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL315BLURBRVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL315BLURTLVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL315BLURTLVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL315BLURTLVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL315BLURTLVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL315BRUL", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL315BRUL", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL315BRUL", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL315BRUL", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL315BRULBLVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL315BRULBLVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL315BRULBLVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL315BRULBLVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL315BRULTRVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL315BRULTRVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL315BRULTRVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL315BRULTRVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3BLUR", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3BLUR", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3BLUR", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3BLUR", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3BLURBRVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3BLURBRVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3BLURBRVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3BLURBRVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3BLURTLVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3BLURTLVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3BLURTLVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3BLURTLVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3BRUL", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3BRUL", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3BRUL", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3BRUL", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3BRULBLVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3BRULBLVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3BRULBLVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3BRULBLVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3BRULTRVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3BRULTRVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3BRULTRVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3BRULTRVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3Horizontal", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3Horizontal", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3Horizontal", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3Horizontal", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3HorizontalBotVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3HorizontalBotVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3HorizontalBotVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3HorizontalBotVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3HorizontalTopVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3HorizontalTopVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3HorizontalTopVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3HorizontalTopVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3Vertical", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3Vertical", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3Vertical", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3Vertical", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3VerticalLeftVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3VerticalLeftVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3VerticalLeftVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3VerticalLeftVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3VerticalRightVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3VerticalRightVisionBlocked", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownGateL3VerticalRightVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownGateL3VerticalRightVisionBlocked", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Gate_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallL3DiagonalBLUR", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallL3DiagonalBLUR", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallL3DiagonalBLUR", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallL3DiagonalBLUR", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallL3DiagonalBRUL", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallL3DiagonalBRUL", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallL3DiagonalBRUL", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallL3DiagonalBRUL", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallL3Horizontal", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallL3Horizontal", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallL3Horizontal", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallL3Horizontal", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallL3Vertical", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallL3Vertical", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallL3Vertical", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallL3Vertical", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial0L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial0L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial0L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial0L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial1L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial1L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial1L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial1L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial2L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial2L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial2L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial2L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial3L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial3L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial3L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial3L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial4L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial4L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial4L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial4L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial5L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial5L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial5L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial5L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial6L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial6L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial6L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial6L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial7L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial7L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial7L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial7L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial8L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial8L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial8L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial8L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial9L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial9L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial9L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial9L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial10L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial10L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial10L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial10L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial11L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial11L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial11L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial11L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial12L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial12L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial12L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial12L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial13L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial13L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial13L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial13L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial14L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial14L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial14L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial14L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial15L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial15L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial15L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial15L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial16L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial16L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial16L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial16L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial17L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial17L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial17L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial17L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial18L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial18L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial18L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial18L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial19L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial19L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial19L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial19L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial20L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial20L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial20L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial20L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial21L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial21L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial21L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial21L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial22L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial22L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial22L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial22L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial23L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial23L3", "LifeStart", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
    CatalogFieldValueSet(c_gameCatalogUnit, "TownWallRadial23L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team), FixedToString((CatalogFieldValueGetAsInt(c_gameCatalogUnit, "TownWallRadial23L3", "LifeMax", libGame_gf_ComputerPlayerInTeam(lp_team)) + FixedToInt(libGame_gv_buildingScaling.lv_l3_Wall_Health)), c_fixedPrecisionAny));
}

void libGame_gf_ScalingIncremented (trigger t) {
    // Implementation
    TriggerAddEventGeneric(t, libGame_gv_eventID_ScalingIncremented_C);
}

void libGame_gf_SendEventScalingIncremented () {
    // Implementation
    TriggerSendEvent(libGame_gv_eventID_ScalingIncremented_C);
}

fixed libGame_gf_BrawlMetaXPTableLerp (fixed lp_time) {
    // Variable Declarations
    fixed lv_minutes;
    int lv_minutesWhole;
    fixed lv_minutesFractional;

    // Variable Initialization

    // Implementation
    lv_minutes = (lp_time / 60.0);
    if ((lv_minutes >= libCore_gv_dataXPBrawlMetaXPMaximumDuration)) {
        return libCore_gv_dataXPBrawlMetaXPValues[libCore_gv_data_XP_BrawlMetaXPTableSize_C];
    }
    else {
        lv_minutesWhole = FixedToInt(lv_minutes);
        lv_minutesFractional = (lv_minutes - lv_minutesWhole);
        return (libCore_gv_dataXPBrawlMetaXPValues[lv_minutesWhole] + lv_minutesFractional*(libCore_gv_dataXPBrawlMetaXPValues[(lv_minutesWhole + 1)] - libCore_gv_dataXPBrawlMetaXPValues[lv_minutesWhole]));
    }
}

int libGame_gf_BrawlMetaXP (int lp_player) {
    // Variable Declarations
    fixed lv_metaXP;
    fixed lv_metaXP_Bonus;

    // Variable Initialization

    // Implementation
    lv_metaXP = libGame_gf_BrawlMetaXPTableLerp(MinF(TimerGetElapsed(libGame_gv_matchGameplayTimer), (libCore_gv_dataXPBrawlMetaXPMaximumDuration * 60.0)));
    lv_metaXP_Bonus = libGame_gf_BrawlMetaXPTableLerp(MinF(TimerGetElapsed(libGame_gv_matchGameplayTimer), (libCore_gv_dataXPBrawlMetaXPExpectedDuration * 60.0)));
    if ((libGame_gv_players[lp_player].lv_victoryDefeat == c_gameOverVictory)) {
        lv_metaXP += (0.5 * lv_metaXP_Bonus);
    }
    else if ((libGame_gv_gameScore_MinorVictoryScored[libGame_gf_TeamNumberOfPlayer(lp_player)] == true)) {
        lv_metaXP += (0.25 * lv_metaXP_Bonus);
    }
    return FixedToInt(lv_metaXP);
}

void libGame_gf_ScoreValuesReportIntegerValueAndLog (int lp_player, string lp_score, int lp_value) {
    // Implementation
    PlayerScoreValueSetFromInt(lp_player, lp_score, lp_value);
    TextExpressionSetToken("Param/Expression/lib_Game_B600485F", "D", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetElapsed(libGame_gv_gameTimer))));
    TextExpressionSetToken("Param/Expression/lib_Game_B600485F", "A", IntToText(lp_player));
    TextExpressionSetToken("Param/Expression/lib_Game_B600485F", "B", StringToText((lp_score)));
    TextExpressionSetToken("Param/Expression/lib_Game_B600485F", "C", IntToText(PlayerScoreValueGetAsInt(lp_player, lp_score)));
    TriggerDebugOutput(2, TextExpressionAssemble("Param/Expression/lib_Game_B600485F"), false);
}

void libGame_gf_ScoreValuesReportRealValueAndLog (int lp_player, string lp_score, fixed lp_value) {
    string auto9C20ABE7_val;

    // Implementation
    auto9C20ABE7_val = lp_score;
    if (auto9C20ABE7_val == "ExperienceContribution") {
    }
    else if (auto9C20ABE7_val == "Takedowns") {
    }
    else {
    }
    PlayerScoreValueSetFromFixed(lp_player, lp_score, lp_value);
}

void libGame_gf_ScoreValuesReportForPlayer (int lp_player) {
    int autoA70CB022_ae;
    int autoA70CB022_ai;
    int autoD482BBB2_val;
    int autoE4DEA447_val;
    int auto4351418E_val;
    int autoDCD541B0_val;
    int autoC92E084A_val;
    int autoD6CBF14B_val;
    playergroup auto9665A00A_g;
    int auto9665A00A_p;
    int auto76440E23_val;
    playergroup auto1B472315_g;
    int auto1B472315_p;
    int auto5D5836B4_val;

    // Variable Declarations
    int lv_decrementedValueForTalentReporting;
    int lv_it_TalentTier;
    int lv_itPlayer;
    int lv_itScoreValue;
    int lv_itHeroClass;
    int lv_team;
    int lv_heroIndex;
    int lv_earnedMetaXPValue;
    int lv_trackedXPValueSum;
    int lv_rewardedMetaXPValue;
    bool lv_matchFound;

    // Variable Initialization

    // Implementation
    if (((lp_player > libCore_gv_bALMaxPlayers) || (lp_player <= 0))) {
        return ;
    }

    lv_team = libGame_gf_TeamNumberOfPlayer(lp_player);
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    if ((libCore_gv_sYSIsBrawlGame == true)) {
        lv_earnedMetaXPValue = libGame_gf_BrawlMetaXP(lp_player);
    }
    else {
        lv_earnedMetaXPValue = FixedToInt(UnitGetPropertyFixed(libGame_gv_players[lp_player].lv_heroUnit, c_unitPropXP, c_unitPropCurrent));
    }
    lv_rewardedMetaXPValue = lv_earnedMetaXPValue;
    if ((libCore_gv_dEBUGDebuggingEnabled == true) && (libUIUI_gv_uIDebugPanelDebugMetaXPValue > 0)) {
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "MetaExperience", libUIUI_gv_uIDebugPanelDebugMetaXPValue);
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "ExperienceFromTrickle", libUIUI_gv_uIDebugPanelDebugMetaXPValue);
    }
    else {
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "MetaExperience", lv_rewardedMetaXPValue);
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "ExperienceFromTrickle", FixedToInt(libGame_gv_players[lp_player].lv_xPRecievedFromTrickle));
    }
    if ((libCore_gv_sYSIsBrawlGame == true)) {
        return ;
    }

    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "ExperienceFromMinionsAndCreeps", FixedToInt((libGame_gv_players[lp_player].lv_xPRecievedFromMinions + libGame_gv_players[lp_player].lv_xPRecievedFromCreeps)));
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "ExperienceFromTakedowns", FixedToInt(libGame_gv_players[lp_player].lv_xPRecievedFromHeroes));
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "ExperienceFromTownsDestroyed", FixedToInt(libGame_gv_players[lp_player].lv_xPRecievedFromStructures));
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "ExperienceFromRegenGlobes", FixedToInt(libGame_gv_players[lp_player].lv_xPRecievedFromRegenGlobe));
    lv_trackedXPValueSum = (FixedToInt(libGame_gv_players[lp_player].lv_xPRecievedFromMinions) + FixedToInt(libGame_gv_players[lp_player].lv_xPRecievedFromCreeps) + FixedToInt(libGame_gv_players[lp_player].lv_xPRecievedFromHeroes) + FixedToInt(libGame_gv_players[lp_player].lv_xPRecievedFromStructures) + FixedToInt(libGame_gv_players[lp_player].lv_xPRecievedFromTrickle));
    if (((libCore_gv_sYSGameMode == libCore_ge_GameModes_Normal) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_ArenaMode) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_AttackDefend) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_Test)) && (AbsI((lv_earnedMetaXPValue - lv_trackedXPValueSum)) > 2)) {
        TextExpressionSetToken("Param/Expression/lib_Game_63D9F63A", "A", IntToText(lp_player));
        TextExpressionSetToken("Param/Expression/lib_Game_63D9F63A", "B", IntToText(lv_earnedMetaXPValue));
        TextExpressionSetToken("Param/Expression/lib_Game_63D9F63A", "C", IntToText(lv_trackedXPValueSum));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_63D9F63A"), true);
    }

    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "TeamTownKills", libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lp_player)].lv_townKills);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "TeamMercCampCaptures", libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lp_player)].lv_map_MercCampCaptures);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "MercCampCaptures", libGame_gv_scoreValues[lp_player].lv_creepCampsCaptured);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "WatchTowerCaptures", libGame_gv_scoreValues[lp_player].lv_watchTowersCaptured);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "Level", libGame_gv_scoreValues[lp_player].lv_level);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "TownKills", libGame_gv_scoreValues[lp_player].lv_townKills);
    autoA70CB022_ae = 7;
    autoA70CB022_ai = 1;
    lv_it_TalentTier = 1;
    for ( ; ( (autoA70CB022_ai >= 0 && lv_it_TalentTier <= autoA70CB022_ae) || (autoA70CB022_ai <= 0 && lv_it_TalentTier >= autoA70CB022_ae) ) ; lv_it_TalentTier += autoA70CB022_ai ) {
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, (("Tier" + IntToString(lv_it_TalentTier) + "Talent")), libGame_gv_talents_TalentChoices[lp_player][lv_it_TalentTier].lv_selection);
    }
    PlayerGroupLoopBegin(libGame_gv_players[lp_player].lv_heroData.lv_heroRoles);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        autoD482BBB2_val = PlayerGroupLoopCurrent();
        if (autoD482BBB2_val == c_heroRoleWarrior) {
            libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "PlaysWarrior", 1);
        }
        else if (autoD482BBB2_val == c_heroRoleDamage) {
            libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "PlaysAssassin", 1);
        }
        else if (autoD482BBB2_val == c_heroRoleSupport) {
            libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "PlaysSupport", 1);
        }
        else if (autoD482BBB2_val == c_heroRoleSpecialist) {
            libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "PlaysSpecialist", 1);
        }
        else {
        }
    }
    PlayerGroupLoopEnd();
    autoE4DEA447_val = libGame_gv_players[lv_heroIndex].lv_heroData.lv_universe;
    if (autoE4DEA447_val == c_heroUniverseWarcraft) {
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "PlaysWarCraft", 1);
    }
    else if (autoE4DEA447_val == c_heroUniverseStarCraft) {
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "PlaysStarCraft", 1);
    }
    else if (autoE4DEA447_val == c_heroUniverseDiablo) {
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "PlaysDiablo", 1);
    }
    else {
    }
    auto4351418E_val = libGame_gv_players[lv_heroIndex].lv_heroData.lv_gender;
    if (auto4351418E_val == c_heroGenderMale) {
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "PlaysMale", 1);
    }
    else if (auto4351418E_val == c_heroGenderFemale) {
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "PlaysFemale", 1);
    }
    else {
    }
    if ((libGame_gv_players[lp_player].lv_victoryDefeat == c_gameOverVictory)) {
        PlayerGroupLoopBegin(libGame_gv_players[lp_player].lv_heroData.lv_heroRoles);
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            autoDCD541B0_val = PlayerGroupLoopCurrent();
            if (autoDCD541B0_val == c_heroRoleWarrior) {
                libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "WinsWarrior", 1);
            }
            else if (autoDCD541B0_val == c_heroRoleDamage) {
                libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "WinsAssassin", 1);
            }
            else if (autoDCD541B0_val == c_heroRoleSupport) {
                libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "WinsSupport", 1);
            }
            else if (autoDCD541B0_val == c_heroRoleSpecialist) {
                libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "WinsSpecialist", 1);
            }
            else {
            }
        }
        PlayerGroupLoopEnd();
        autoC92E084A_val = libGame_gv_players[lv_heroIndex].lv_heroData.lv_universe;
        if (autoC92E084A_val == c_heroUniverseWarcraft) {
            libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "WinsWarcraft", 1);
        }
        else if (autoC92E084A_val == c_heroUniverseStarCraft) {
            libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "WinsStarCraft", 1);
        }
        else if (autoC92E084A_val == c_heroUniverseDiablo) {
            libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "WinsDiablo", 1);
        }
        else {
        }
        autoD6CBF14B_val = libGame_gv_players[lv_heroIndex].lv_heroData.lv_gender;
        if (autoD6CBF14B_val == c_heroGenderMale) {
            libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "WinsMale", 1);
        }
        else if (autoD6CBF14B_val == c_heroGenderFemale) {
            libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "WinsFemale", 1);
        }
        else {
        }
        if ((libGame_gv_teams[lv_team].lv_teamPlayerCount == libCore_gv_bALMaxPlayersOnATeam)) {
            lv_matchFound = true;
            auto9665A00A_g = libGame_gv_teams[lv_team].lv_teamPlayerGroupNoNPCPlayers; 
            auto9665A00A_p = 1;
            for ( ; auto9665A00A_p <= PlayerGroupCount(auto9665A00A_g) ; auto9665A00A_p += (lv_itPlayer == PlayerGroupPlayer(auto9665A00A_g, auto9665A00A_p)) ) {
                lv_itPlayer = PlayerGroupPlayer(auto9665A00A_g, auto9665A00A_p);
                if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_universe != libGame_gv_players[lv_itPlayer].lv_heroData.lv_universe)) {
                    lv_matchFound = false;
                    break;
                }

            }
            if ((lv_matchFound == true)) {
                auto76440E23_val = libGame_gv_players[lv_heroIndex].lv_heroData.lv_universe;
                if (auto76440E23_val == c_heroUniverseWarcraft) {
                    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "TeamWinsWarcraft", 1);
                }
                else if (auto76440E23_val == c_heroUniverseStarCraft) {
                    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "TeamWinsStarCraft", 1);
                }
                else if (auto76440E23_val == c_heroUniverseDiablo) {
                    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "TeamWinsDiablo", 1);
                }
                else {
                }
            }

            lv_matchFound = true;
            auto1B472315_g = libGame_gv_teams[lv_team].lv_teamPlayerGroupNoNPCPlayers; 
            auto1B472315_p = 1;
            for ( ; auto1B472315_p <= PlayerGroupCount(auto1B472315_g) ; auto1B472315_p += (lv_itPlayer == PlayerGroupPlayer(auto1B472315_g, auto1B472315_p)) ) {
                lv_itPlayer = PlayerGroupPlayer(auto1B472315_g, auto1B472315_p);
                if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_gender != libGame_gv_players[lv_itPlayer].lv_heroData.lv_gender)) {
                    lv_matchFound = false;
                    break;
                }

            }
            if ((lv_matchFound == true)) {
                auto5D5836B4_val = libGame_gv_players[lv_heroIndex].lv_heroData.lv_gender;
                if (auto5D5836B4_val == c_heroGenderMale) {
                    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "TeamWinsMale", 1);
                }
                else if (auto5D5836B4_val == c_heroGenderFemale) {
                    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "TeamWinsFemale", 1);
                }
                else {
                }
            }

        }

    }

    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "RavenTeamNumberOfTimesCursedTheEnemy", libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lp_player)].lv_map_CursesPlacedOnEnemyTeam);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "DragonTeamNumberOfDragonCaptures", libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lp_player)].lv_map_DragonCaptures);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "MinesTeamSkullsCollected", libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lp_player)].lv_map_SkullsCollected);
}

void libGame_gf_ScoreValuesRecordXPContributionForPlayer (int lp_player, fixed lp_amount, bool lp_resetAfk) {
    // Implementation
    if ((lp_player > libCore_gv_bALMaxPlayers)) {
        return ;
    }

    libGame_gv_scoreValues[lp_player].lv_individualXPEarned += lp_amount;
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lp_player, "ExperienceContribution", FixedToInt(libGame_gv_scoreValues[lp_player].lv_individualXPEarned));
    if ((lp_resetAfk == true)) {
        if ((libGame_gv_afk_UseBrawlAFKSystem == false)) {
            libGame_gf_AfkResetWarningTimerForPlayer(lp_player);
        }
        else {
            libGame_gf_AFKBrawlResetWarningTimerForPlayer(lp_player);
        }
    }

}

void libGame_gf_TalentsSetupTalentChoicesFromHeroDataForPlayer (int lp_heroIndex, int lp_player) {
    int auto24231396_ae;
    int auto24231396_ai;
    int autoB840BFC3_ae;
    int autoB840BFC3_ai;
    int auto192BBEE8_ae;
    int auto192BBEE8_ai;
    int auto38B17200_ae;
    int auto38B17200_ai;
    int autoDE132AE1_ae;
    int autoDE132AE1_ai;

    // Variable Declarations
    int lv_itTier;
    int lv_itTalent;
    int lv_itBehavior;
    int lv_itAbilityMod;
    int lv_itAbilityModChange;
    string lv_heroID;
    int lv_talentCount;
    int lv_tier;
    string lv_talentID;
    int lv_column;
    int lv_behaviorCount;
    int lv_rank;
    int lv_numberOfAbilitiesModified;
    int lv_numberOfFieldsModified;
    int lv_catalogInt;
    int lv_changeTypeInt;
    int lv_currentTalentModNumber;

    // Variable Initialization
    lv_heroID = "";
    lv_talentID = "";

    // Implementation
    if ((lp_player > 0) && (lp_player <= libCore_gv_bALMaxPlayers)) {
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_ED151A3E"), true);
        return ;
    }
    lv_heroID = (libGame_gv_players[lp_player].lv_heroData.lv_heroCatalogLink);
    lv_talentCount = CatalogFieldValueCount(c_gameCatalogHero, lv_heroID, "TalentTreeArray", c_playerAny);
    auto24231396_ae = libCore_gv_talents_MaxTiers_C;
    auto24231396_ai = 1;
    lv_itTier = 1;
    for ( ; ( (auto24231396_ai >= 0 && lv_itTier <= auto24231396_ae) || (auto24231396_ai <= 0 && lv_itTier >= auto24231396_ae) ) ; lv_itTier += auto24231396_ai ) {
        libGame_gv_talents_TalentChoices[lp_player][lv_itTier].lv_numberOfTalentsForThisTier = 0;
    }
    autoB840BFC3_ae = lv_talentCount;
    autoB840BFC3_ai = 1;
    lv_itTalent = 1;
    for ( ; ( (autoB840BFC3_ai >= 0 && lv_itTalent <= autoB840BFC3_ae) || (autoB840BFC3_ai <= 0 && lv_itTalent >= autoB840BFC3_ae) ) ; lv_itTalent += autoB840BFC3_ai ) {
        lv_tier = CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroID, "TalentTreeArray[" + IntToString((lv_itTalent - 1)) + "].Tier", c_playerAny);
        lv_talentID = CatalogFieldValueGet(c_gameCatalogHero, lv_heroID, "TalentTreeArray[" + IntToString((lv_itTalent - 1)) + "].Talent", c_playerAny);
        if (((lv_tier < 0) || (lv_tier > libCore_gv_talents_MaxTiers_C))) {
            TextExpressionSetToken("Param/Expression/lib_Game_B44849DC", "A", StringToText(lv_heroID));
            TextExpressionSetToken("Param/Expression/lib_Game_B44849DC", "B", IntToText((lv_itTalent - 1)));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_B44849DC"), true);
            continue;
        }

        lv_column = CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroID, "TalentTreeArray[" + IntToString((lv_itTalent - 1)) + "].Column", c_playerAny);
        if ((lv_column > libCore_gv_talents_MaxTalentsPerTier_C)) {
            TextExpressionSetToken("Param/Expression/lib_Game_F2B9CE61", "A", StringToText(lv_heroID));
            TextExpressionSetToken("Param/Expression/lib_Game_F2B9CE61", "B", IntToText((lv_itTalent - 1)));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_F2B9CE61"), true);
            continue;
        }

        libGame_gv_talents_TalentChoices[lp_player][lv_tier].lv_numberOfTalentsForThisTier += 1;
        if ((libGame_gv_talents_TalentChoices[lp_player][lv_tier].lv_numberOfTalentsForThisTier > libCore_gv_talents_MaxTalentsPerTier_C)) {
            TextExpressionSetToken("Param/Expression/lib_Game_77AF763C", "A", StringToText(lv_talentID));
            TextExpressionSetToken("Param/Expression/lib_Game_77AF763C", "B", IntToText(lv_tier));
            TextExpressionSetToken("Param/Expression/lib_Game_77AF763C", "C", IntToText(libCore_gv_talents_MaxTalentsPerTier_C));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_77AF763C"), true);
            continue;
        }

        if ((lv_column != libGame_gv_talents_TalentChoices[lp_player][lv_tier].lv_numberOfTalentsForThisTier)) {
            TextExpressionSetToken("Param/Expression/lib_Game_E999ACA3", "A", StringToText(lv_heroID));
            TextExpressionSetToken("Param/Expression/lib_Game_E999ACA3", "B", IntToText(lv_tier));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_E999ACA3"), true);
            libGame_gv_talents_TalentChoices[lp_player][lv_tier].lv_numberOfTalentsForThisTier = MaxI(libGame_gv_talents_TalentChoices[lp_player][lv_tier].lv_numberOfTalentsForThisTier, lv_column);
        }

        libGame_gv_talents_TalentChoices[lp_player][lv_tier].lv_talentData[lv_column].lv_talentCatalogLink = (lv_talentID);
        if ((CatalogFieldValueCount(c_gameCatalogTalent, lv_talentID, "RankArray", c_playerAny) != 0)) {
            lv_behaviorCount = CatalogFieldValueCount(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString(0) + "].BehaviorArray", c_playerAny);
        }
        else {
            lv_behaviorCount = 0;
        }
        if ((lv_behaviorCount > libCore_gv_talents_MaxBehaviorsPerTalent_C)) {
            TextExpressionSetToken("Param/Expression/lib_Game_04162B65", "A", StringToText(lv_talentID));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_04162B65"), true);
            continue;
        }

        libGame_gv_talents_TalentChoices[lp_player][lv_tier].lv_talentData[lv_column].lv_behaviorCount = lv_behaviorCount;
        if ((lv_behaviorCount != 0)) {
            auto192BBEE8_ae = lv_behaviorCount;
            auto192BBEE8_ai = 1;
            lv_itBehavior = 1;
            for ( ; ( (auto192BBEE8_ai >= 0 && lv_itBehavior <= auto192BBEE8_ae) || (auto192BBEE8_ai <= 0 && lv_itBehavior >= auto192BBEE8_ae) ) ; lv_itBehavior += auto192BBEE8_ai ) {
                libGame_gv_talents_TalentChoices[lp_player][lv_tier].lv_talentData[lv_column].lv_behaviors[lv_itBehavior] = (CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString(0) + "].BehaviorArray[" + IntToString((lv_itBehavior - 1)) + "]", c_playerAny));
            }
        }

        if ((CatalogFieldValueCount(c_gameCatalogTalent, lv_talentID, "RankArray", c_playerAny) > libCore_gv_talents_MaxTalentRank_C)) {
            TextExpressionSetToken("Param/Expression/lib_Game_76A0DE18", "A", StringToText(lv_talentID));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_76A0DE18"), false);
        }

        lv_rank = 1;
        if ((CatalogFieldValueCount(c_gameCatalogTalent, lv_talentID, "RankArray", c_playerAny) != 0)) {
            libGame_gv_talents_TalentChoices[lp_player][lv_tier].lv_talentData[lv_column].lv_item = (CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "RankArray[" + IntToString((lv_rank - 1)) + "].Item", c_playerAny));
        }
        else {
            libGame_gv_talents_TalentChoices[lp_player][lv_tier].lv_talentData[lv_column].lv_item = "";
        }
        lv_currentTalentModNumber = 0;
        libGame_gv_talents_TalentChoices[lp_player][lv_tier].lv_talentData[lv_column].lv_totalModifications = 0;
        lv_numberOfAbilitiesModified = CatalogFieldValueCount(c_gameCatalogTalent, lv_talentID, "AbilityModificationArray", c_playerAny);
        auto38B17200_ae = lv_numberOfAbilitiesModified;
        auto38B17200_ai = 1;
        lv_itAbilityMod = 1;
        for ( ; ( (auto38B17200_ai >= 0 && lv_itAbilityMod <= auto38B17200_ae) || (auto38B17200_ai <= 0 && lv_itAbilityMod >= auto38B17200_ae) ) ; lv_itAbilityMod += auto38B17200_ai ) {
            lv_numberOfFieldsModified = CatalogFieldValueCount(c_gameCatalogTalent, lv_talentID, "AbilityModificationArray[" + IntToString(lv_itAbilityMod - 1) + "].Modifications", c_playerAny);
            autoDE132AE1_ae = lv_numberOfFieldsModified;
            autoDE132AE1_ai = 1;
            lv_itAbilityModChange = 1;
            for ( ; ( (autoDE132AE1_ai >= 0 && lv_itAbilityModChange <= autoDE132AE1_ae) || (autoDE132AE1_ai <= 0 && lv_itAbilityModChange >= autoDE132AE1_ae) ) ; lv_itAbilityModChange += autoDE132AE1_ai ) {
                lv_currentTalentModNumber += 1;
                if ((lv_currentTalentModNumber > libGame_gv_talents_DebugMaxModifedAbilites)) {
                    libGame_gv_talents_DebugMaxModifedAbilites = lv_currentTalentModNumber;
                }

                if ((lv_currentTalentModNumber > libCore_gv_talents_MaxModificationsPerTalent_C)) {
                    TextExpressionSetToken("Param/Expression/lib_Game_A454641D", "A", StringToText(lv_talentID));
                    TextExpressionSetToken("Param/Expression/lib_Game_A454641D", "B", IntToText((lv_rank - 1)));
                    TextExpressionSetToken("Param/Expression/lib_Game_A454641D", "C", IntToText(libCore_gv_talents_MaxModificationsPerTalent_C));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_A454641D"), true);
                    lv_currentTalentModNumber = libCore_gv_talents_MaxModificationsPerTalent_C;
                    continue;
                }

                lv_changeTypeInt = CatalogFieldValueGetAsInt(c_gameCatalogTalent, lv_talentID, "AbilityModificationArray[" + IntToString((lv_itAbilityMod - 1)) + "].Modifications[" + IntToString((lv_itAbilityModChange - 1)) + "].Type", c_playerAny);
                libGame_gv_talents_TalentChoices[lp_player][lv_tier].lv_talentData[lv_column].lv_abilityModificationData[lv_currentTalentModNumber].lv_changeType = lv_changeTypeInt;
                lv_catalogInt = CatalogFieldValueGetAsInt(c_gameCatalogTalent, lv_talentID, "AbilityModificationArray[" + IntToString((lv_itAbilityMod - 1)) + "].Modifications[" + IntToString((lv_itAbilityModChange - 1)) + "].Catalog", c_playerAny);
                libGame_gv_talents_TalentChoices[lp_player][lv_tier].lv_talentData[lv_column].lv_abilityModificationData[lv_currentTalentModNumber].lv_catalog = lv_catalogInt;
                libGame_gv_talents_TalentChoices[lp_player][lv_tier].lv_talentData[lv_column].lv_abilityModificationData[lv_currentTalentModNumber].lv_field = CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "AbilityModificationArray[" + IntToString((lv_itAbilityMod - 1)) + "].Modifications[" + IntToString((lv_itAbilityModChange - 1)) + "].Field", c_playerAny);
                libGame_gv_talents_TalentChoices[lp_player][lv_tier].lv_talentData[lv_column].lv_abilityModificationData[lv_currentTalentModNumber].lv_fieldIsInteger = (CatalogFieldValueGetAsInt(c_gameCatalogTalent, lv_talentID, "AbilityModificationArray[" + IntToString((lv_itAbilityMod - 1)) + "].Modifications[" + IntToString((lv_itAbilityModChange - 1)) + "].FieldIsInteger", c_playerAny) == 1);
                libGame_gv_talents_TalentChoices[lp_player][lv_tier].lv_talentData[lv_column].lv_abilityModificationData[lv_currentTalentModNumber].lv_value = StringToFixed(CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "AbilityModificationArray[" + IntToString((lv_itAbilityMod - 1)) + "].Modifications[" + IntToString((lv_itAbilityModChange - 1)) + "].Value", c_playerAny));
                if ((libGame_gv_talents_TalentChoices[lp_player][lv_tier].lv_talentData[lv_column].lv_abilityModificationData[lv_currentTalentModNumber].lv_changeType == c_talentModificationCatalogReplacement)) {
                    libGame_gv_talents_TalentChoices[lp_player][lv_tier].lv_talentData[lv_column].lv_abilityModificationData[lv_currentTalentModNumber].lv_catalogReplaceFrom = CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "AbilityModificationArray[" + IntToString((lv_itAbilityMod - 1)) + "].Modifications[" + IntToString((lv_itAbilityModChange - 1)) + "].Entry", c_playerAny);
                    libGame_gv_talents_TalentChoices[lp_player][lv_tier].lv_talentData[lv_column].lv_abilityModificationData[lv_currentTalentModNumber].lv_catalogChangeTo = CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "AbilityModificationArray[" + IntToString((lv_itAbilityMod - 1)) + "].Modifications[" + IntToString((lv_itAbilityModChange - 1)) + "].StringReplacement", c_playerAny);
                }
                else {
                    libGame_gv_talents_TalentChoices[lp_player][lv_tier].lv_talentData[lv_column].lv_abilityModificationData[lv_currentTalentModNumber].lv_entry = CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "AbilityModificationArray[" + IntToString((lv_itAbilityMod - 1)) + "].Modifications[" + IntToString((lv_itAbilityModChange - 1)) + "].Entry", c_playerAny);
                    libGame_gv_talents_TalentChoices[lp_player][lv_tier].lv_talentData[lv_column].lv_abilityModificationData[lv_currentTalentModNumber].lv_stringReplacementValue = CatalogFieldValueGet(c_gameCatalogTalent, lv_talentID, "AbilityModificationArray[" + IntToString((lv_itAbilityMod - 1)) + "].Modifications[" + IntToString((lv_itAbilityModChange - 1)) + "].StringReplacement", c_playerAny);
                }
            }
        }
        if ((lv_numberOfAbilitiesModified > 0)) {
            libGame_gv_talents_TalentChoices[lp_player][lv_tier].lv_talentData[lv_column].lv_totalModifications = lv_currentTalentModNumber;
        }

    }
}

void libGame_gf_TalentsRespecHeroForPlayer (int lp_player) {
    int auto78D9F909_ae;
    int auto78D9F909_ai;
    int auto1DF9E79D_ae;
    int auto1DF9E79D_ai;
    int auto6316811D_ae;
    int auto6316811D_ai;
    unitgroup autoFF6805AB_g;
    int autoFF6805AB_u;
    int auto322ED411_ae;
    int auto322ED411_ai;
    int auto1D22FFB2_ae;
    int auto1D22FFB2_ai;

    // Variable Declarations
    int lv_itTalent;
    int lv_itChoice;
    int lv_itButton;
    int lv_itBehavior;
    int lv_itRank;
    int lv_itSlot;
    unit lv_itHeroUnit;
    int lv_itAzmo;
    unit lv_heroUnit;
    int lv_heroIndex;
    int lv_currentRank;

    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    auto78D9F909_ae = libCore_gv_talents_MaxTiers_C;
    auto78D9F909_ai = 1;
    lv_itChoice = 1;
    for ( ; ( (auto78D9F909_ai >= 0 && lv_itChoice <= auto78D9F909_ae) || (auto78D9F909_ai <= 0 && lv_itChoice >= auto78D9F909_ae) ) ; lv_itChoice += auto78D9F909_ai ) {
        auto1DF9E79D_ae = libGame_gv_talents_TalentChoices[lp_player][lv_itChoice].lv_numberOfTalentsForThisTier;
        auto1DF9E79D_ai = 1;
        lv_itButton = 1;
        for ( ; ( (auto1DF9E79D_ai >= 0 && lv_itButton <= auto1DF9E79D_ae) || (auto1DF9E79D_ai <= 0 && lv_itButton >= auto1DF9E79D_ae) ) ; lv_itButton += auto1DF9E79D_ai ) {
            libGame_gf_RemoveTalentAbilityModificationsForPlayerAtTalent(lp_player, lv_itChoice, lv_itButton);
            PlayerRemoveTalent(lp_player, libGame_gv_talents_TalentChoices[lp_player][lv_itChoice].lv_talentData[lv_itButton].lv_talentCatalogLink);
            auto6316811D_ae = libGame_gv_talents_TalentChoices[lp_player][lv_itChoice].lv_talentData[lv_itButton].lv_behaviorCount;
            auto6316811D_ai = 1;
            lv_itBehavior = 1;
            for ( ; ( (auto6316811D_ai >= 0 && lv_itBehavior <= auto6316811D_ae) || (auto6316811D_ai <= 0 && lv_itBehavior >= auto6316811D_ae) ) ; lv_itBehavior += auto6316811D_ai ) {
                autoFF6805AB_g = libGame_gv_players[lp_player].lv_heroUnitGroup;
                autoFF6805AB_u = 1;
                for ( ; autoFF6805AB_u <= UnitGroupCount(autoFF6805AB_g, c_unitCountAll) ; autoFF6805AB_u += (lv_itHeroUnit == UnitGroupUnit(autoFF6805AB_g, autoFF6805AB_u)) ) {
                    lv_itHeroUnit = UnitGroupUnit(autoFF6805AB_g, autoFF6805AB_u);
                    UnitBehaviorRemove(lv_itHeroUnit, libGame_gv_talents_TalentChoices[lp_player][lv_itChoice].lv_talentData[lv_itButton].lv_behaviors[lv_itBehavior], 1);
                }
            }
            if ((libGame_gv_talents_TalentChoices[lp_player][lv_itChoice].lv_talentData[lv_itButton].lv_item != null)) {
                auto322ED411_ae = libCore_gv_bALPlayerTotalInventorySlots;
                auto322ED411_ai = 1;
                lv_itSlot = 1;
                for ( ; ( (auto322ED411_ai >= 0 && lv_itSlot <= auto322ED411_ae) || (auto322ED411_ai <= 0 && lv_itSlot >= auto322ED411_ae) ) ; lv_itSlot += auto322ED411_ai ) {
                    if ((UnitGetType(UnitInventoryItem(lv_heroUnit, lv_itSlot)) == libGame_gv_talents_TalentChoices[lp_player][lv_itChoice].lv_talentData[lv_itButton].lv_item)) {
                        UnitRemove(UnitInventoryItem(lv_heroUnit, lv_itSlot));
                        break;
                    }

                }
            }

        }
    }
    if ((UnitGetType(lv_heroUnit) == "HeroSgtHammer")) {
        UnitCreateEffectUnit(lv_heroUnit, "SiegeModeRemoveSet", lv_heroUnit);
    }

    auto1D22FFB2_ae = libCore_gv_talents_MaxTiers_C;
    auto1D22FFB2_ai = 1;
    lv_itChoice = 1;
    for ( ; ( (auto1D22FFB2_ai >= 0 && lv_itChoice <= auto1D22FFB2_ae) || (auto1D22FFB2_ai <= 0 && lv_itChoice >= auto1D22FFB2_ae) ) ; lv_itChoice += auto1D22FFB2_ai ) {
        TalentTreeClearTier(lp_player, lv_itChoice);
        libGame_gv_talents_TalentChoices[lp_player][lv_itChoice].lv_selection = 0;
    }
    libUIUI_gf_UIUpdateEventPlayerStatsChange(lp_player);
    libGame_gf_TalentsUpdateChoicePanelForPlayer(lp_player);
    ShowTalentPanel(PlayerGroupSingle(lp_player), true, 1);
    libGame_gf_SendEventHeroRespecsTalents(lp_player);
}

void libGame_gf_TalentsUpdateChoicePanelForPlayer (int lp_player) {
    int auto50211B8D_ae;
    int auto50211B8D_ai;

    // Variable Declarations
    int lv_itChoice;
    int lv_heroIndex;
    int lv_playerLevel;
    int lv_currentChoice;

    // Variable Initialization

    // Implementation
    lv_heroIndex = libGame_gv_players[lp_player].lv_heroIndex;
    lv_playerLevel = UnitLevel(libGame_gv_players[lp_player].lv_heroUnit);
    auto50211B8D_ae = libCore_gv_talents_MaxTiers_C;
    auto50211B8D_ai = 1;
    lv_itChoice = 1;
    for ( ; ( (auto50211B8D_ai >= 0 && lv_itChoice <= auto50211B8D_ae) || (auto50211B8D_ai <= 0 && lv_itChoice >= auto50211B8D_ae) ) ; lv_itChoice += auto50211B8D_ai ) {
        if ((libGame_gv_talents_TalentChoices[lp_player][lv_itChoice].lv_selection == 0) && (lv_playerLevel >= libGame_gv_players[lp_player].lv_talents_TierLevels[lv_itChoice].lv_level) && (GetTalentTierEnabled(lv_itChoice) == true)) {
            lv_currentChoice = lv_itChoice;
            break;
        }

    }
    libGame_gv_talents_ActiveChoiceTierForPlayer[lp_player] = lv_currentChoice;
    if ((libCore_gv_tUTTalentsAutobuyOn == false)) {
        if ((lv_currentChoice == 1)) {
            DialogControlSendAnimationEvent(libUIUI_gv_uIGameUIHandles.lv_gameUIContainer, PlayerGroupSingle(lp_player), "TalentsAvailable");
            if ((libCore_gv_sYSGameMode != libCore_ge_GameModes_Tutorial1) && (libMapM_gf_MapMechanicIntroFinished(lp_player) == true) && (lv_playerLevel > 1) && (libGame_gv_talents_PlayChooseATalentSound == true)) {
                libSond_gf_SoundAnnouncerVOPlayAnnouncerVOForPlayer(libCore_ge_AnnouncerVOEvents_TalentUnlocked, lp_player);
            }

            SoundPlayForPlayer(SoundLink("UI_Game_PickTalentSound", -1), c_maxPlayers, PlayerGroupSingle(lp_player), 100.0, 0.0);
            libGame_gf_SendEventTalentPanelVisibilityChanged(lp_player, true);
        }
        else {
            DialogControlSendAnimationEvent(libUIUI_gv_uIGameUIHandles.lv_gameUIContainer, PlayerGroupSingle(lp_player), "TalentsNotAvailable");
            libGame_gf_SendEventTalentPanelVisibilityChanged(lp_player, false);
        }
    }

}

void libGame_gf_TalentsChooseTalentForPlayer (int lp_tierIndex, int lp_buttonIndex, int lp_player) {
    int auto5F4D4827_ae;
    int auto5F4D4827_ai;

    // Variable Declarations
    int lv_itBehavior;
    unit lv_heroUnit;

    // Variable Initialization

    // Implementation
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;
    libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_selection = lp_buttonIndex;
    if ((!((((libCore_gv_sYSGameMode == libCore_ge_GameModes_Tutorial1) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_TutorialMapMechanics)) && (lp_player >= 6) && (lp_player <= 10))))) {
        auto5F4D4827_ae = libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_behaviorCount;
        auto5F4D4827_ai = 1;
        lv_itBehavior = 1;
        for ( ; ( (auto5F4D4827_ai >= 0 && lv_itBehavior <= auto5F4D4827_ae) || (auto5F4D4827_ai <= 0 && lv_itBehavior >= auto5F4D4827_ae) ) ; lv_itBehavior += auto5F4D4827_ai ) {
            UnitBehaviorAdd(lv_heroUnit, libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_behaviors[lv_itBehavior], lv_heroUnit, 1);
        }
        UnitInventoryCreate(lv_heroUnit, libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_item);
        libGame_gf_SendEventHeroGainTalent((libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_talentCatalogLink), lp_player);
        libGame_gf_ApplyAbilityModificationsForPlayerAtTalent(lp_player, lp_tierIndex, lp_buttonIndex);
    }

    StatEventCreate("TalentChosen");
    StatEventAddDataInt(StatEventLastCreated(), "PlayerID", lp_player);
    StatEventAddDataString(StatEventLastCreated(), "PurchaseName", (libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_talentCatalogLink));
    StatEventSend(StatEventLastCreated());
    PlayerAddTalent(lp_player, libGame_gv_talents_TalentChoices[lp_player][lp_tierIndex].lv_talentData[lp_buttonIndex].lv_talentCatalogLink);
    libGame_gf_TalentsUpdateChoicePanelForPlayer(lp_player);
    libUIUI_gf_UIUpdateEventPlayerStatsChange(lp_player);
}

void libGame_gf_InitializeTeleporterPetList () {
    // Implementation
    libGame_gv_teleporters_PetList[1] = "ArthasArmyOfTheDeadGhoul";
    libGame_gv_teleporters_PetList[2] = "JainaWaterElemental";
    libGame_gv_teleporters_PetList[3] = "StitchesStinkling";
    libGame_gv_teleporters_PetList[4] = "WitchDoctorGargantuan";
    libGame_gv_teleporters_PetList[5] = "RaynorRaynorsBanshee";
    libGame_gv_teleporters_PetList[6] = "KerriganUltralisk";
    libGame_gv_teleporters_PetListLength = 6;
}

void libGame_gf_TeleportPetstoHeroLocation (int lp_player, point lp_preTeleportLocation) {
    unitgroup auto48CAF3D1_g;
    int auto48CAF3D1_u;
    int autoD4AD6D45_ae;
    int autoD4AD6D45_ai;

    // Variable Declarations
    unit lv_heroUnit;
    unit lv_petUnit;
    int lv_petTypeIndex;

    // Variable Initialization
    lv_heroUnit = libGame_gv_players[lp_player].lv_heroUnit;

    // Implementation
    if ((libGame_gv_teleporters_PetListLength == 0)) {
        libGame_gf_InitializeTeleporterPetList();
    }

    if ((UnitIsValid(libGDHL_gv_rexxarMishaUnit[lp_player]) == true)) {
        UnitSetPosition(libGDHL_gv_rexxarMishaUnit[lp_player], UnitGetPosition(lv_heroUnit), false);
        UnitIssueOrder(libGDHL_gv_rexxarMishaUnit[lp_player], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }

    auto48CAF3D1_g = libGame_gv_players[lp_player].lv_summonedUnitGroup;
    auto48CAF3D1_u = 1;
    for ( ; auto48CAF3D1_u <= UnitGroupCount(auto48CAF3D1_g, c_unitCountAll) ; auto48CAF3D1_u += (lv_petUnit == UnitGroupUnit(auto48CAF3D1_g, auto48CAF3D1_u)) ) {
        lv_petUnit = UnitGroupUnit(auto48CAF3D1_g, auto48CAF3D1_u);
        autoD4AD6D45_ae = libGame_gv_teleporters_PetListLength;
        autoD4AD6D45_ai = 1;
        lv_petTypeIndex = 1;
        for ( ; ( (autoD4AD6D45_ai >= 0 && lv_petTypeIndex <= autoD4AD6D45_ae) || (autoD4AD6D45_ai <= 0 && lv_petTypeIndex >= autoD4AD6D45_ae) ) ; lv_petTypeIndex += autoD4AD6D45_ai ) {
            if ((UnitIsValid(lv_petUnit) == true) && (UnitGetType(lv_petUnit) == libGame_gv_teleporters_PetList[lv_petTypeIndex]) && (DistanceBetweenPoints(UnitGetPosition(lv_petUnit), lp_preTeleportLocation) <= 8.0)) {
                UnitSetPosition(lv_petUnit, UnitGetPosition(lv_heroUnit), false);
                UnitIssueOrder(lv_petUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            }

        }
    }
}

void libGame_gf_TownAddStructureToTownArray (int lp_townIndex, unit lp_structureUnit, int lp_structurePresetValue, int lp_enemyTeam) {
    int auto3FC7CD85_val;

    // Variable Declarations
    int lv_structureIndex;

    // Variable Initialization

    // Implementation
    if ((lp_structurePresetValue != libGame_ge_TownStructureTypes_None)) {
        libGame_gv_townTownData[lp_townIndex].lv_structureCount += 1;
        lv_structureIndex = libGame_gv_townTownData[lp_townIndex].lv_structureCount;
        UnitSetCustomValue(lp_structureUnit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_TownIndex), lp_townIndex);
        UnitSetCustomValue(lp_structureUnit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_TownStructureIndex), lv_structureIndex);
        UnitSetCustomValue(lp_structureUnit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_LaneIndex), libGame_gv_townTownData[lp_townIndex].lv_lane);
        libGame_gv_townTownData[lp_townIndex].lv_structureTypes[lv_structureIndex] = lp_structurePresetValue;
        libGame_gv_townTownData[lp_townIndex].lv_structureUnits[lv_structureIndex] = lp_structureUnit;
        libGame_gv_townTownData[lp_townIndex].lv_structureUnitIDs[lv_structureIndex] = UnitGetType(lp_structureUnit);
        libGame_gv_townTownData[lp_townIndex].lv_structureSpawnPoints[lv_structureIndex] = UnitGetPosition(lp_structureUnit);
        auto3FC7CD85_val = lp_structurePresetValue;
        if (auto3FC7CD85_val == libGame_ge_TownStructureTypes_TownHall) {
            libGame_gv_townTownData[lp_townIndex].lv_townHallIndex = lv_structureIndex;
            libGame_gv_townTownData[lp_townIndex].lv_townHallPosition = UnitGetPosition(lp_structureUnit);
            libGame_gv_townTownData[lp_townIndex].lv_structuresAlive += 1;
            UnitBehaviorAddPlayer(lp_structureUnit, "StormPowerSourceA", libGame_gv_townTownData[lp_townIndex].lv_owner, 1);
            UnitBehaviorAddPlayer(lp_structureUnit, "StormPowerSourceB", lp_enemyTeam, 1);
        }
        else if (auto3FC7CD85_val == libGame_ge_TownStructureTypes_CannonTower) {
            libGame_gv_townTownData[lp_townIndex].lv_structuresAlive += 1;
        }
        else if (auto3FC7CD85_val == libGame_ge_TownStructureTypes_Gate) {
            libGame_gv_townTownData[lp_townIndex].lv_structuresAlive += 1;
        }
        else if (auto3FC7CD85_val == libGame_ge_TownStructureTypes_Moonwell) {
            libGame_gv_townTownData[lp_townIndex].lv_structuresAlive += 1;
        }
        else {
        }
    }

}

int libGame_gf_TownGetTownForUnit (unit lp_unit) {
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_TownIndex)));
}

int libGame_gf_TownGetTownStructureIndexForUnit (unit lp_unit) {
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_TownStructureIndex)));
}

int libGame_gf_TownGetTownStructurePresetFromUnit (unit lp_unit) {
    // Variable Declarations
    string lv_unitType;

    // Variable Initialization
    lv_unitType = UnitGetType(lp_unit);

    // Implementation
    if ((UnitTypeTestFlag(lv_unitType, c_unitFlagTownStructureWall) == true)) {
        return libGame_ge_TownStructureTypes_Wall;
    }
    else if ((UnitTypeTestFlag(lv_unitType, c_unitFlagTownStructureGate) == true)) {
        return libGame_ge_TownStructureTypes_Gate;
    }
    else if ((UnitTypeTestFlag(lv_unitType, c_unitFlagTownStructureMoonwell) == true)) {
        return libGame_ge_TownStructureTypes_Moonwell;
    }
    else if ((UnitTypeTestFlag(lv_unitType, c_unitFlagTownStructureCannonTower) == true)) {
        return libGame_ge_TownStructureTypes_CannonTower;
    }
    else if ((UnitTypeTestFlag(lv_unitType, c_unitFlagTownStructureTownHall) == true)) {
        return libGame_ge_TownStructureTypes_TownHall;
    }
    else if ((UnitTypeTestFlag(lv_unitType, c_unitFlagTownStructureCore) == true)) {
        return libGame_ge_TownStructureTypes_Core;
    }
    return libGame_ge_TownStructureTypes_None;
}

int libGame_gf_TownGetTownHallPresetFromUnitID (string lp_unitType) {
    string auto92E62C3D_val;

    // Implementation
    auto92E62C3D_val = lp_unitType;
    if (auto92E62C3D_val == "TownTownHallL2") {
        return libGame_ge_TownHallTypes_FrontTown;
    }
    else if (auto92E62C3D_val == "TownTownHallL3") {
        return libGame_ge_TownHallTypes_BackTown;
    }
    else {
        return libGame_ge_TownHallTypes_None;
    }
}

int libGame_gf_TownGetTownFromPoint (point lp_point) {
    int auto89A0A625_ae;
    int auto89A0A625_ai;

    // Variable Declarations
    int lv_town;

    // Variable Initialization

    // Implementation
    auto89A0A625_ae = libGame_gv_townTownCount;
    auto89A0A625_ai = 1;
    lv_town = 1;
    for ( ; ( (auto89A0A625_ai >= 0 && lv_town <= auto89A0A625_ae) || (auto89A0A625_ai <= 0 && lv_town >= auto89A0A625_ae) ) ; lv_town += auto89A0A625_ai ) {
        if ((RegionContainsPoint(libGame_gv_townTownData[lv_town].lv_townRegion, lp_point) == true)) {
            return lv_town;
        }

    }
    return 0;
}

bool libGame_gf_TownTownIsAlive (int lp_town, int lp_player) {
    // Variable Declarations
    unitgroup lv_buildings;

    // Variable Initialization
    lv_buildings = UnitGroupEmpty();

    // Implementation
    lv_buildings = UnitGroup(null, lp_player, libGame_gv_townTownData[lp_town].lv_townRegion, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    return !(libNtve_gf_UnitGroupIsDead(lv_buildings));
}

unit libGame_gf_TownTownHall (int lp_town) {
    // Implementation
    return libGame_gv_townTownData[lp_town].lv_structureUnits[libGame_gv_townTownData[lp_town].lv_townHallIndex];
}

void libGame_gf_TownUpgradeBruiserMinions (int lp_town) {
    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_townTownData[lp_town].lv_owner == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_team = 2;
    }
    else {
        lv_team = 1;
    }
    libGame_gv_laneData[libGame_gv_townTownData[lp_town].lv_lane].lv_bruiserMinionLevel[lv_team] += 1;
}

void libGame_gf_TownAnnounceTownDestroyed (int lp_town, int lp_townType) {
    int auto77C5AA67_val;
    int auto9AC08F08_val;

    // Variable Declarations
    int lv_townHallIndex;

    // Variable Initialization

    // Implementation
    lv_townHallIndex = libGame_gv_townTownData[lp_town].lv_townHallIndex;
    if ((lv_townHallIndex < 0)) {
        return ;
    }

    SoundPlayForPlayer(SoundLink("UI_Game_Fort_Death", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    if ((libGame_gv_townTownData[lp_town].lv_owner == libCore_gv_cOMPUTER_TeamOrder)) {
        MinimapPing(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_gv_townTownData[lp_town].lv_structureSpawnPoints[lv_townHallIndex], 5.0, libCore_gv_cOLOREnemyColor);
        MinimapPing(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_gv_townTownData[lp_town].lv_structureSpawnPoints[lv_townHallIndex], 5.0, libCore_gv_cOLORAllyColor);
        SoundtrackPlay(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, c_soundtrackCategoryMusic, "MX_Stinger_TownDestroyed_Ally", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        SoundtrackPlay(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, c_soundtrackCategoryMusic, "MX_Stinger_TownDestroyed_Enemy", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        auto77C5AA67_val = lp_townType;
        if (auto77C5AA67_val == libGame_ge_TownHallTypes_FrontTown) {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedOutpostDestroyed, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_EnemyOutpostDestroyed, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_RedTeamDestroysTown, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        }
        else if (auto77C5AA67_val == libGame_ge_TownHallTypes_BackTown) {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedKeepDestroyed, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_EnemyKeepDestroyed, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_RedTeamDestroysTown, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        }
        else {
        }
    }
    else {
        MinimapPing(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_gv_townTownData[lp_town].lv_structureSpawnPoints[lv_townHallIndex], 5.0, libCore_gv_cOLORAllyColor);
        MinimapPing(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_gv_townTownData[lp_town].lv_structureSpawnPoints[lv_townHallIndex], 5.0, libCore_gv_cOLOREnemyColor);
        SoundtrackPlay(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, c_soundtrackCategoryMusic, "MX_Stinger_TownDestroyed_Enemy", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        SoundtrackPlay(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, c_soundtrackCategoryMusic, "MX_Stinger_TownDestroyed_Ally", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        auto9AC08F08_val = lp_townType;
        if (auto9AC08F08_val == libGame_ge_TownHallTypes_FrontTown) {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_EnemyOutpostDestroyed, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedOutpostDestroyed, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_BlueTeamDestroysTown, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        }
        else if (auto9AC08F08_val == libGame_ge_TownHallTypes_BackTown) {
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_EnemyKeepDestroyed, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_AlliedKeepDestroyed, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
            libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_BlueTeamDestroysTown, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
        }
        else {
        }
    }
}

void libGame_gf_TownAddMoonwellMinimapIconstoTown (int lp_townIndex) {
    // Implementation
    IntLoopBegin(1, libGame_gv_townTownData[lp_townIndex].lv_structureCount);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((libGame_gf_TownGetTownStructurePresetFromUnit(libGame_gv_townTownData[lp_townIndex].lv_structureUnits[IntLoopCurrent()]) == libGame_ge_TownStructureTypes_TownHall)) {
            DialogControlHookupMinimapUnitStatus(c_triggerControlTypePanel, "$this", libGame_gv_townTownData[lp_townIndex].lv_structureUnits[IntLoopCurrent()]);
            if ((libGame_gv_townTownData[lp_townIndex].lv_owner == libCore_gv_cOMPUTER_TeamOrder)) {
                DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "MoonwellIndicator", "Left");
            }
            else {
                DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "MoonwellIndicator", "Right");
            }
        }

    }
    IntLoopEnd();
}

void libGame_gf_TownRemoveMoonwellMinimapIconsFromTown (int lp_townIndex) {
    // Implementation
    IntLoopBegin(1, libGame_gv_townTownData[lp_townIndex].lv_structureCount);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((libGame_gf_TownGetTownStructurePresetFromUnit(libGame_gv_townTownData[lp_townIndex].lv_structureUnits[IntLoopCurrent()]) == libGame_ge_TownStructureTypes_TownHall) && (UnitIsAlive(libGame_gv_townTownData[lp_townIndex].lv_structureUnits[IntLoopCurrent()]) == true)) {
            DialogControlHookupMinimapUnitStatus(c_triggerControlTypePanel, "$this", libGame_gv_townTownData[lp_townIndex].lv_structureUnits[IntLoopCurrent()]);
            DialogControlSetAnimationState(DialogControlLastCreated(), PlayerGroupAll(), "MoonwellIndicator", "None");
        }

    }
    IntLoopEnd();
}

void libGame_gf_TownUnhideMinimapIconsOnMoonwellUnits (int lp_townIndex) {
    // Implementation
    IntLoopBegin(1, libGame_gv_townTownData[lp_townIndex].lv_structureCount);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        if ((libGame_gf_TownGetTownStructurePresetFromUnit(libGame_gv_townTownData[lp_townIndex].lv_structureUnits[IntLoopCurrent()]) == libGame_ge_TownStructureTypes_Moonwell) && (UnitIsAlive(libGame_gv_townTownData[lp_townIndex].lv_structureUnits[IntLoopCurrent()]) == true)) {
            libNtve_gf_SendActorMessageToUnit(libGame_gv_townTownData[lp_townIndex].lv_structureUnits[IntLoopCurrent()], "Signal RevealMinimapIcon");
        }

    }
    IntLoopEnd();
}

void libGame_gf_TownTurnOnOffBasicMinimapHealthMonitor (bool lp_turnOnOff) {
    // Implementation
    if ((lp_turnOnOff != libGame_gv_townBasicMinimapHealthMontior)) {
        libGame_gv_townBasicMinimapHealthMontior = lp_turnOnOff;
        if ((lp_turnOnOff == true)) {
        }

    }

}

void libGame_gf_VehiclesReturnPlayerFromVehicleAtPoint (int lp_player, point lp_vehicleLocation) {
    string auto2CA932AE_val;

    // Variable Declarations
    fixed lv_modifiedDistance;
    point lv_actualTargetPoint;
    unit lv_driverUnit;
    int lv_itHeroUnit;

    // Variable Initialization

    // Implementation
    lv_actualTargetPoint = lp_vehicleLocation;
    UnitGroupLoopBegin(libGame_gv_players[lp_player].lv_heroUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitHasBehavior2(UnitGroupLoopCurrent(), "UsingVehicle") == true)) {
            lv_driverUnit = UnitGroupLoopCurrent();
            break;
        }

    }
    UnitGroupLoopEnd();
    UnitBehaviorRemove(lv_driverUnit, "UsingVehicle", 1);
    UnitSelect(lv_driverUnit, lp_player, true);
    if ((UnitHasBehavior2(libGame_gv_players[lp_player].lv_heroUnit, "AbathurUltimateEvolutionVehicleCasterBehavior") == false)) {
        while ((PointPathingPassable(lv_actualTargetPoint) == false)) {
            lv_modifiedDistance -= 0.125;
            lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(lp_vehicleLocation, lv_modifiedDistance, UnitGetPosition(lv_driverUnit));
        }
        UnitSetPosition(lv_driverUnit, lv_actualTargetPoint, false);
    }
    else {
        UnitBehaviorRemove(lv_driverUnit, "AbathurUltimateEvolutionVehicleCasterBehavior", 1);
    }
    auto2CA932AE_val = UnitGetType(lv_driverUnit);
    if (auto2CA932AE_val == "HeroArthas") {
        UnitGroupLoopBegin(UnitGroupFilter("ArthasArmyOfTheDeadGhoul", lp_player, libGame_gv_players[lp_player].lv_summonedUnitGroup, UnitFilter(0, 0, 0, (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(lv_driverUnit), false);
            UnitBehaviorRemove(UnitGroupLoopCurrent(), "UsingVehicle", 1);
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lp_player, UnitGetPosition(lv_driverUnit), 0.0, -1, 0.0, false);
    if (((UnitGroupCount(libGame_gv_players[lp_player].lv_heroUnitGroup, c_unitCountAll) == 1) || (libNtve_gf_UnitIsInsideTransport(libGame_gv_players[lp_player].lv_heroUnit) == true))) {
        libGame_gv_players[lp_player].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[lp_player].lv_heroUnitGroup;
        libGame_gf_CameraUpdateCameraForPlayer(lp_player);
    }

    AIAddPlayerUnit(lv_driverUnit);
}

trigger auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_Trigger = null;
int auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_lp_watchTower;
int auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_lp_newOwner;

void libGame_gf_WatchTowersChangeWatchTowerOwnership (int lp_watchTower, int lp_newOwner) {
    auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_lp_watchTower = lp_watchTower;
    auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_lp_newOwner = lp_newOwner;

    if (auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_Trigger == null) {
        auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_Trigger = TriggerCreate("auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_TriggerFunc");
    }

    TriggerExecute(auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_Trigger, false, false);
}

bool auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_TriggerFunc (bool testConds, bool runActions) {
    int lp_watchTower = auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_lp_watchTower;
    int lp_newOwner = auto_libGame_gf_WatchTowersChangeWatchTowerOwnership_lp_newOwner;

    playergroup autoFBCD20DD_g;
    int autoFBCD20DD_p;

    // Variable Declarations
    int lv_player;
    unitgroup lv_pillarUnits;

    // Variable Initialization
    lv_pillarUnits = UnitGroupEmpty();

    // Implementation
    if ((lp_newOwner == libCore_gv_cOMPUTER_Neutral)) {
    }
    else {
        libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lp_watchTower].lv_watchTowerUnit, "AnimBracketStart Capture Stand,Work,Start Stand,Work Stand,Work,End");
    }
    UnitSetOwner(libGame_gv_watchTowers[lp_watchTower].lv_watchTowerUnit, lp_newOwner, true);
    UnitSetOwner(libGame_gv_watchTowers[lp_watchTower].lv_captureBeaconUnit, lp_newOwner, true);
    ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_watchTowers[lp_watchTower].lv_watchTowerUnit), "Signal ActiveSoundTog");
    Wait(0.125, c_timeGame);
    autoFBCD20DD_g = PlayerGroupAll(); 
    autoFBCD20DD_p = 1;
    for ( ; autoFBCD20DD_p <= PlayerGroupCount(autoFBCD20DD_g) ; autoFBCD20DD_p += (lv_player == PlayerGroupPlayer(autoFBCD20DD_g, autoFBCD20DD_p)) ) {
        lv_player = PlayerGroupPlayer(autoFBCD20DD_g, autoFBCD20DD_p);
        VisRevealArea(lv_player, RegionCircle(UnitGetPosition(libGame_gv_watchTowers[lp_watchTower].lv_watchTowerUnit), 0.75), 0.125, false);
    }
    return true;
}

int libGame_gf_WatchTowersGetWatchTowerIndexForUnit (unit lp_unit) {
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_WatchTowerIndex)));
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include Game
//--------------------------------------------------------------------------------------------------
bool libGame_gt_IncludeGame_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_IncludeGame_Init () {
    libGame_gt_IncludeGame = TriggerCreate("libGame_gt_IncludeGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Banks
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeBanks_Func (bool testConds, bool runActions) {
    int auto6D90B843_ae;
    int auto6D90B843_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itDeathTip;
    string lv_bankKey;
    int lv_itNewUserTip;

    // Variable Initialization
    lv_bankKey = "";

    // Actions
    if (!runActions) {
        return true;
    }

    auto6D90B843_ae = libCore_gv_bALMaxPlayers;
    auto6D90B843_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto6D90B843_ai >= 0 && lv_itPlayer <= auto6D90B843_ae) || (auto6D90B843_ai <= 0 && lv_itPlayer >= auto6D90B843_ae) ) ; lv_itPlayer += auto6D90B843_ai ) {
        if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused) && (PlayerType(lv_itPlayer) == c_playerTypeUser)) {
            BankLoad("PlayerSettings", lv_itPlayer);
            libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank = BankLastCreated();
            if ((libCore_gv_mAPMapStringID != "") && (BankKeyExists(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "MapPlayCounts", libCore_gv_mAPMapStringID) == true)) {
                libGame_gv_players[lv_itPlayer].lv_bankData.lv_mapPlayCount = BankValueGetAsInt(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "MapPlayCounts", libCore_gv_mAPMapStringID);
            }

            libGame_gv_players[lv_itPlayer].lv_bankData.lv_mapPlayCount += 1;
            if ((libCore_gv_mAPMapStringID != "")) {
                BankValueSetFromInt(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank, "MapPlayCounts", libCore_gv_mAPMapStringID, libGame_gv_players[lv_itPlayer].lv_bankData.lv_mapPlayCount);
            }

            TriggerExecute(libStEx_gt_TrainingModeBankInit, true, false);
            BankSave(libGame_gv_players[lv_itPlayer].lv_bankData.lv_bank);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeBanks_Init () {
    libGame_gt_InitializeBanks = TriggerCreate("libGame_gt_InitializeBanks_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Game Systems
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeGameSystems_Func (bool testConds, bool runActions) {
    int autoE506CAD5_ae;
    int autoE506CAD5_ai;
    int auto35D6DBF3_val;

    // Variable Declarations
    int lv_itTeam;
    region lv_baseRegion;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libGame_gt_InitializeBehaviorCategoryBitFlagValues, true, true);
    TriggerExecute(libGame_gt_InitializeCodeLaneSystem, true, true);
    if ((libCore_gv_sYSTowerAI == true)) {
        libAIAI_gf_TowerTurnTowerSystemOnOff(true);
    }

    TriggerExecute(libGame_gt_InitializeWatchTowers, true, true);
    TriggerExecute(libGame_gt_InitializeTownSystem, true, true);
    TriggerExecute(libMapM_gt_InitializeJungleCamps, true, true);
    autoE506CAD5_ae = libCore_gv_bALMaxTeams;
    autoE506CAD5_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (autoE506CAD5_ai >= 0 && lv_itTeam <= autoE506CAD5_ae) || (autoE506CAD5_ai <= 0 && lv_itTeam >= autoE506CAD5_ae) ) ; lv_itTeam += autoE506CAD5_ai ) {
        auto35D6DBF3_val = lv_itTeam;
        if (auto35D6DBF3_val == libGame_gv_teamOrderIndex_C) {
            lv_baseRegion = libCore_gv_mAPOrderBaseRegion;
        }
        else if (auto35D6DBF3_val == libGame_gv_teamChaosIndex_C) {
            lv_baseRegion = libCore_gv_mAPChaosBaseRegion;
        }
        else {
        }
        libGame_gv_teams[lv_itTeam].lv_hearthStone = UnitGroupUnit(UnitGroup("HealingPadSearchUnit", libGame_gf_ComputerPlayerInTeam(lv_itTeam), lv_baseRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    }
    GameTimeOfDayPause(true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeGameSystems_Init () {
    libGame_gt_InitializeGameSystems = TriggerCreate("libGame_gt_InitializeGameSystems_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Players
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializePlayers_Func (bool testConds, bool runActions) {
    int auto1FB8724F_ae;
    int auto1FB8724F_ai;
    int autoF679E39A_ae;
    int autoF679E39A_ai;
    int auto7FFD0E17_ae;
    int auto7FFD0E17_ai;
    int autoB55CAFAD_ae;
    int autoB55CAFAD_ai;
    playergroup auto626F615F_g;
    int auto626F615F_p;
    playergroup auto11030675_g;
    int auto11030675_p;
    int auto09A86058_ae;
    int auto09A86058_ai;
    playergroup auto688FB2AB_g;
    int auto688FB2AB_p;
    int auto410EB58E_ae;
    int auto410EB58E_ai;
    int auto822BCDA9_ae;
    int auto822BCDA9_ai;
    int auto8D65EB03_ae;
    int auto8D65EB03_ai;

    // Variable Declarations
    int lv_index;
    int lv_itTeam;
    int lv_currentEnemyPlayer;
    int lv_indexPlayer1;
    int lv_indexPlayer2;
    playergroup lv_unusedPlayersAddedToOrder;
    playergroup lv_unusedPlayersAddedToChaos;
    playergroup lv_group;

    // Variable Initialization
    lv_unusedPlayersAddedToOrder = PlayerGroupEmpty();
    lv_unusedPlayersAddedToChaos = PlayerGroupEmpty();
    lv_group = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gv_dEBUGDebuggingEnabled == true) && ((libCore_gv_sYSGameMode == libCore_ge_GameModes_Normal) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_Sandbox) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_ArenaMode) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_AttackDefend))) {
        auto1FB8724F_ae = 10;
        auto1FB8724F_ai = 1;
        lv_itTeam = (libCore_gv_bALMaxTeams + 1);
        for ( ; ( (auto1FB8724F_ai >= 0 && lv_itTeam <= auto1FB8724F_ae) || (auto1FB8724F_ai <= 0 && lv_itTeam >= auto1FB8724F_ae) ) ; lv_itTeam += auto1FB8724F_ai ) {
            lv_group = GameAttributePlayersForTeam(lv_itTeam);
            if ((PlayerGroupCount(GameAttributePlayersForTeam(lv_itTeam)) > 0)) {
                TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_CD5979A1"), true);
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, StringExternal("Param/Value/lib_Game_EBB4B199"));
                libCore_gv_dEBUGErrorDuringInitialization = true;
                return true;
            }

        }
        autoF679E39A_ae = libCore_gv_bALMaxTeams;
        autoF679E39A_ai = 1;
        lv_itTeam = 1;
        for ( ; ( (autoF679E39A_ai >= 0 && lv_itTeam <= autoF679E39A_ae) || (autoF679E39A_ai <= 0 && lv_itTeam >= autoF679E39A_ae) ) ; lv_itTeam += autoF679E39A_ai ) {
            lv_group = GameAttributePlayersForTeam(lv_itTeam);
            if ((PlayerGroupCount(GameAttributePlayersForTeam(lv_itTeam)) > libCore_gv_bALMaxPlayersOnATeam)) {
                TextExpressionSetToken("Param/Expression/lib_Game_24D5C381", "A", IntToText(lv_itTeam));
                TextExpressionSetToken("Param/Expression/lib_Game_24D5C381", "B", IntToText(libCore_gv_bALMaxPlayersOnATeam));
                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_24D5C381"), true);
                TextExpressionSetToken("Param/Expression/lib_Game_86FA8A87", "A", IntToText(lv_itTeam));
                TextExpressionSetToken("Param/Expression/lib_Game_86FA8A87", "B", IntToText(libCore_gv_bALMaxPlayersOnATeam));
                UIDisplayMessage(PlayerGroupAll(), c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_Game_86FA8A87"));
                libCore_gv_dEBUGErrorDuringInitialization = true;
                return true;
            }

        }
    }

    libGame_gv_players[libCore_gv_cOMPUTER_TeamOrder].lv_faction = libGame_ge_Faction_Order;
    libGame_gv_players[libCore_gv_cOMPUTER_TeamOrder].lv_portraitIcon = "Assets\\Textures\\storm_ui_ingame_hero_icon_towerking_blue.dds";
    libGame_gv_players[libCore_gv_cOMPUTER_TeamOrder].lv_name = StringExternal("Param/Value/lib_Game_CE553E53");
    libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_Hostile, libCore_gv_cOMPUTER_TeamOrder, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_TeamOrder, libCore_gv_cOMPUTER_Hostile, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetUpgradeLevelForPlayer(libCore_gv_cOMPUTER_TeamOrder, "IsPlayer11", 1);
    libGame_gv_players[libCore_gv_cOMPUTER_TeamChaos].lv_faction = libGame_ge_Faction_Chaos;
    libGame_gv_players[libCore_gv_cOMPUTER_TeamChaos].lv_portraitIcon = "Assets\\Textures\\storm_ui_ingame_hero_icon_towerking_red.dds";
    libGame_gv_players[libCore_gv_cOMPUTER_TeamChaos].lv_name = StringExternal("Param/Value/lib_Game_A7B0450E");
    libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_Hostile, libCore_gv_cOMPUTER_TeamChaos, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_TeamChaos, libCore_gv_cOMPUTER_Hostile, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetUpgradeLevelForPlayer(libCore_gv_cOMPUTER_TeamChaos, "IsPlayer12", 1);
    libGame_gv_players[libCore_gv_cOMPUTER_Neutral].lv_faction = libGame_ge_Faction_Neutral;
    libGame_gv_players[libCore_gv_cOMPUTER_Neutral].lv_portraitIcon = "Assets\\Textures\\storm_ui_ingame_hero_icon_yeti.dds";
    PlayerSetColorIndex(libCore_gv_cOMPUTER_Neutral, libCore_gv_cOLORNeutralPlayerColor, true);
    libGame_gv_players[libCore_gv_cOMPUTER_NoVision_TeamOrder].lv_faction = libGame_ge_Faction_Order;
    libGame_gv_players[libCore_gv_cOMPUTER_NoVision_TeamOrder].lv_name = StringExternal("Param/Value/lib_Game_7D87EBFA");
    PlayerSetColorIndex(libCore_gv_cOMPUTER_NoVision_TeamOrder, libCore_gv_cOLOROrderPlayerColor, true);
    libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_Hostile, libCore_gv_cOMPUTER_NoVision_TeamOrder, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_NoVision_TeamOrder, libCore_gv_cOMPUTER_Hostile, libNtve_ge_AllianceSetting_Neutral);
    libGame_gv_players[libCore_gv_cOMPUTER_NoVision_TeamChaos].lv_faction = libGame_ge_Faction_Chaos;
    libGame_gv_players[libCore_gv_cOMPUTER_NoVision_TeamChaos].lv_name = StringExternal("Param/Value/lib_Game_21663FDC");
    PlayerSetColorIndex(libCore_gv_cOMPUTER_NoVision_TeamOrder, libCore_gv_cOLORChaosPlayerColor, true);
    libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_Hostile, libCore_gv_cOMPUTER_NoVision_TeamChaos, libNtve_ge_AllianceSetting_Neutral);
    libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_NoVision_TeamChaos, libCore_gv_cOMPUTER_Hostile, libNtve_ge_AllianceSetting_Neutral);
    libGame_gv_players[libCore_gv_cOMPUTER_Hostile].lv_faction = libGame_ge_Faction_HostileCreeps;
    libGame_gv_players[libCore_gv_cOMPUTER_Hostile].lv_portraitIcon = "Assets\\Textures\\storm_ui_ingame_hero_icon_yeti.dds";
    libGame_gv_players[libCore_gv_cOMPUTER_Hostile].lv_name = StringExternal("Param/Value/lib_Game_923DE167");
    PlayerSetColorIndex(libCore_gv_cOMPUTER_Hostile, libCore_gv_cOLORHostilePlayerColor, true);
    if (((libCore_gv_sYSGameMode == libCore_ge_GameModes_Normal) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_Sandbox) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_ArenaMode) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_AttackDefend))) {
        auto626F615F_g = GameAttributePlayersForTeam(1); 
        auto626F615F_p = 1;
        for ( ; auto626F615F_p <= PlayerGroupCount(auto626F615F_g) ; auto626F615F_p += (lv_index == PlayerGroupPlayer(auto626F615F_g, auto626F615F_p)) ) {
            lv_index = PlayerGroupPlayer(auto626F615F_g, auto626F615F_p);
            libGame_gf_InitializePlayer(lv_index, libGame_ge_Faction_Order);
        }
        auto11030675_g = GameAttributePlayersForTeam(2); 
        auto11030675_p = 1;
        for ( ; auto11030675_p <= PlayerGroupCount(auto11030675_g) ; auto11030675_p += (lv_index == PlayerGroupPlayer(auto11030675_g, auto11030675_p)) ) {
            lv_index = PlayerGroupPlayer(auto11030675_g, auto11030675_p);
            libGame_gf_InitializePlayer(lv_index, libGame_ge_Faction_Chaos);
        }
    }
    else {
        auto7FFD0E17_ae = libCore_gv_bALMaxPlayersOnATeam;
        auto7FFD0E17_ai = 1;
        lv_index = 1;
        for ( ; ( (auto7FFD0E17_ai >= 0 && lv_index <= auto7FFD0E17_ae) || (auto7FFD0E17_ai <= 0 && lv_index >= auto7FFD0E17_ae) ) ; lv_index += auto7FFD0E17_ai ) {
            libGame_gf_InitializePlayer(lv_index, libGame_ge_Faction_Order);
        }
        autoB55CAFAD_ae = libCore_gv_bALMaxPlayers;
        autoB55CAFAD_ai = 1;
        lv_index = (libCore_gv_bALMaxPlayersOnATeam + 1);
        for ( ; ( (autoB55CAFAD_ai >= 0 && lv_index <= autoB55CAFAD_ae) || (autoB55CAFAD_ai <= 0 && lv_index >= autoB55CAFAD_ae) ) ; lv_index += autoB55CAFAD_ai ) {
            libGame_gf_InitializePlayer(lv_index, libGame_ge_Faction_Chaos);
        }
    }
    auto09A86058_ae = libCore_gv_bALMaxPlayers;
    auto09A86058_ai = 1;
    lv_index = 1;
    for ( ; ( (auto09A86058_ai >= 0 && lv_index <= auto09A86058_ae) || (auto09A86058_ai <= 0 && lv_index >= auto09A86058_ae) ) ; lv_index += auto09A86058_ai ) {
        if ((PlayerStatus(lv_index) == c_playerStatusUnused)) {
            if ((libSprt_gv_performanceTestPerformanceTestRunning == true)) {
                if ((PlayerGroupCount(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup) < 5)) {
                    libGame_gf_InitializePlayer(lv_index, libGame_ge_Faction_Order);
                }
                else {
                    if ((PlayerGroupCount(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup) < 5)) {
                        libGame_gf_InitializePlayer(lv_index, libGame_ge_Faction_Chaos);
                    }

                }
            }
            else {
                if ((PlayerGroupCount(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup) < 5)) {
                    libGame_gf_InitializePlayer(lv_index, libGame_ge_Faction_Order);
                    PlayerGroupAdd(lv_unusedPlayersAddedToOrder, lv_index);
                }
                else {
                    if ((PlayerGroupCount(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup) < 5)) {
                        libGame_gf_InitializePlayer(lv_index, libGame_ge_Faction_Chaos);
                        PlayerGroupAdd(lv_unusedPlayersAddedToChaos, lv_index);
                    }

                }
            }
        }

    }
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libCore_gv_cOMPUTER_TeamOrder);
    PlayerGroupAdd(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libCore_gv_cOMPUTER_TeamChaos);
    libNtve_gf_SetPlayerGroupAlliance(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    libNtve_gf_SetPlayerGroupAlliance(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
    PlayerGroupLoopBegin(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), libCore_gv_cOMPUTER_NoVision_TeamOrder, libNtve_ge_AllianceSetting_Ally);
        PlayerSetAlliance(libCore_gv_cOMPUTER_NoVision_TeamOrder, c_allianceIdVision, PlayerGroupLoopCurrent(), false);
        PlayerSetAlliance(libCore_gv_cOMPUTER_TeamChaos, c_allianceIdPower, PlayerGroupLoopCurrent(), true);
        libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_TeamOrder, PlayerGroupLoopCurrent(), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        PlayerSetColorIndex(PlayerGroupLoopCurrent(), libCore_gv_cOLOROrderPlayerColor, true);
        auto688FB2AB_g = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup; 
        auto688FB2AB_p = 1;
        for ( ; auto688FB2AB_p <= PlayerGroupCount(auto688FB2AB_g) ; auto688FB2AB_p += (lv_currentEnemyPlayer == PlayerGroupPlayer(auto688FB2AB_g, auto688FB2AB_p)) ) {
            lv_currentEnemyPlayer = PlayerGroupPlayer(auto688FB2AB_g, auto688FB2AB_p);
            libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), lv_currentEnemyPlayer, libNtve_ge_AllianceSetting_Enemy);
        }
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, libCore_gv_oBSERVER_ObserverUIPlayer, true);
        if ((PlayerGroupLoopCurrent() != libCore_gv_cOMPUTER_TeamOrder)) {
            libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), libCore_gv_cOMPUTER_Hostile, libNtve_ge_AllianceSetting_Enemy);
            PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdPushable, libCore_gv_cOMPUTER_TeamOrder, false);
            PlayerSetAlliance(libCore_gv_cOMPUTER_TeamOrder, c_allianceIdSeekHelp, PlayerGroupLoopCurrent(), false);
            PlayerSetAlliance(libCore_gv_cOMPUTER_TeamOrder, c_allianceIdPower, PlayerGroupLoopCurrent(), true);
        }

    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), libCore_gv_cOMPUTER_NoVision_TeamChaos, libNtve_ge_AllianceSetting_Ally);
        PlayerSetAlliance(libCore_gv_cOMPUTER_NoVision_TeamChaos, c_allianceIdVision, PlayerGroupLoopCurrent(), false);
        PlayerSetAlliance(libCore_gv_cOMPUTER_TeamOrder, c_allianceIdPower, PlayerGroupLoopCurrent(), true);
        libNtve_gf_SetAllianceOneWay(libCore_gv_cOMPUTER_TeamChaos, PlayerGroupLoopCurrent(), libNtve_ge_AllianceSetting_AllyWithSharedVisionAndPushable);
        PlayerSetColorIndex(PlayerGroupLoopCurrent(), libCore_gv_cOLORChaosPlayerColor, true);
        PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdVision, libCore_gv_oBSERVER_ObserverUIPlayer, true);
        if ((PlayerGroupLoopCurrent() != libCore_gv_cOMPUTER_TeamChaos)) {
            libNtve_gf_SetAlliance(PlayerGroupLoopCurrent(), libCore_gv_cOMPUTER_Hostile, libNtve_ge_AllianceSetting_Enemy);
            PlayerSetAlliance(PlayerGroupLoopCurrent(), c_allianceIdPushable, libCore_gv_cOMPUTER_TeamChaos, false);
            PlayerSetAlliance(libCore_gv_cOMPUTER_TeamChaos, c_allianceIdSeekHelp, PlayerGroupLoopCurrent(), false);
            PlayerSetAlliance(libCore_gv_cOMPUTER_TeamChaos, c_allianceIdPower, PlayerGroupLoopCurrent(), true);
        }

    }
    PlayerGroupLoopEnd();
    PlayerSetColorIndex(libCore_gv_cOMPUTER_NoVision_TeamOrder, libCore_gv_cOLOROrderPlayerColor, true);
    PlayerSetColorIndex(libCore_gv_cOMPUTER_NoVision_TeamChaos, libCore_gv_cOLORChaosPlayerColor, true);
    PlayerSetAlliance(libCore_gv_cOMPUTER_Hostile, c_allianceIdVision, libCore_gv_oBSERVER_ObserverUIPlayer, true);
    PlayerGroupLoopBegin(lv_unusedPlayersAddedToOrder);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerGroupRemove(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    PlayerGroupLoopBegin(lv_unusedPlayersAddedToChaos);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        PlayerGroupRemove(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    PlayerGroupAdd(libCore_gv_nPCPlayers, libCore_gv_cOMPUTER_Neutral);
    PlayerGroupAdd(libCore_gv_nPCPlayers, libCore_gv_cOMPUTER_TeamOrder);
    PlayerGroupAdd(libCore_gv_nPCPlayers, libCore_gv_cOMPUTER_TeamChaos);
    PlayerGroupAdd(libCore_gv_nPCPlayers, libCore_gv_cOMPUTER_Hostile);
    auto410EB58E_ae = libCore_gv_bALMaxPlayers;
    auto410EB58E_ai = 1;
    lv_index = 1;
    for ( ; ( (auto410EB58E_ai >= 0 && lv_index <= auto410EB58E_ae) || (auto410EB58E_ai <= 0 && lv_index >= auto410EB58E_ae) ) ; lv_index += auto410EB58E_ai ) {
        PlayerGroupAdd(libCore_gv_allHeroPlayersPlusObserver, lv_index);
    }
    PlayerGroupAdd(libCore_gv_allHeroPlayersPlusObserver, libCore_gv_oBSERVER_ObserverUIPlayer);
    auto822BCDA9_ae = libCore_gv_bALMaxPlayers;
    auto822BCDA9_ai = 1;
    lv_index = 1;
    for ( ; ( (auto822BCDA9_ai >= 0 && lv_index <= auto822BCDA9_ae) || (auto822BCDA9_ai <= 0 && lv_index >= auto822BCDA9_ae) ) ; lv_index += auto822BCDA9_ai ) {
        PlayerSetDeathTimer(lv_index, libGame_gv_players[lv_index].lv_respawnTimer);
    }
    libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_nPCPlayer = libCore_gv_cOMPUTER_TeamOrder;
    libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers = PlayerGroupCopy(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup);
    PlayerGroupRemove(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroupNoNPCPlayers, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_nPCPlayer);
    libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_nPCPlayer = libCore_gv_cOMPUTER_TeamChaos;
    libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers = PlayerGroupCopy(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup);
    PlayerGroupRemove(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroupNoNPCPlayers, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_nPCPlayer);
    auto8D65EB03_ae = libCore_gv_bALMaxTeams;
    auto8D65EB03_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (auto8D65EB03_ai >= 0 && lv_itTeam <= auto8D65EB03_ae) || (auto8D65EB03_ai <= 0 && lv_itTeam >= auto8D65EB03_ae) ) ; lv_itTeam += auto8D65EB03_ai ) {
        libGame_gv_teams[lv_itTeam].lv_teamPlayerCount = PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false));
        libGame_gv_teams[lv_itTeam].lv_activeHumanPlayers = PlayerGroupCount(libGame_gf_PlayersOnTeamHeroes(lv_itTeam, false));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializePlayers_Init () {
    libGame_gt_InitializePlayers = TriggerCreate("libGame_gt_InitializePlayers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Visibility
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeVisibility_Func (bool testConds, bool runActions) {
    playergroup autoE4148D4A_g;
    int autoE4148D4A_p;
    playergroup auto6814F9D0_g;
    int auto6814F9D0_p;
    playergroup auto0C1904B1_g;
    int auto0C1904B1_p;
    playergroup auto6F7C59FD_g;
    int auto6F7C59FD_p;
    playergroup autoB48B1BB9_g;
    int autoB48B1BB9_p;
    int auto4D61B2C2_ae;
    int auto4D61B2C2_ai;

    // Variable Declarations
    int lv_player;
    revealer[13] lv_tempRevealer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoE4148D4A_g = libCore_gv_allHeroPlayersPlusObserver; 
    autoE4148D4A_p = 1;
    for ( ; autoE4148D4A_p <= PlayerGroupCount(autoE4148D4A_g) ; autoE4148D4A_p += (lv_player == PlayerGroupPlayer(autoE4148D4A_g, autoE4148D4A_p)) ) {
        lv_player = PlayerGroupPlayer(autoE4148D4A_g, autoE4148D4A_p);
        VisExploreArea(lv_player, RegionEntireMap(), true, false);
    }
    auto6814F9D0_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup; 
    auto6814F9D0_p = 1;
    for ( ; auto6814F9D0_p <= PlayerGroupCount(auto6814F9D0_g) ; auto6814F9D0_p += (lv_player == PlayerGroupPlayer(auto6814F9D0_g, auto6814F9D0_p)) ) {
        lv_player = PlayerGroupPlayer(auto6814F9D0_g, auto6814F9D0_p);
        VisRevealerCreate(lv_player, libCore_gv_mAPOrderBaseRegion);
        VisRevealerEnable(VisRevealerLastCreated(), true);
        libGame_gv_baseRevealers[lv_player] = VisRevealerLastCreated();
    }
    auto0C1904B1_g = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup; 
    auto0C1904B1_p = 1;
    for ( ; auto0C1904B1_p <= PlayerGroupCount(auto0C1904B1_g) ; auto0C1904B1_p += (lv_player == PlayerGroupPlayer(auto0C1904B1_g, auto0C1904B1_p)) ) {
        lv_player = PlayerGroupPlayer(auto0C1904B1_g, auto0C1904B1_p);
        VisRevealerCreate(lv_player, libCore_gv_mAPChaosBaseRegion);
        VisRevealerEnable(VisRevealerLastCreated(), true);
        libGame_gv_baseRevealers[lv_player] = VisRevealerLastCreated();
    }
    auto6F7C59FD_g = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup; 
    auto6F7C59FD_p = 1;
    for ( ; auto6F7C59FD_p <= PlayerGroupCount(auto6F7C59FD_g) ; auto6F7C59FD_p += (lv_player == PlayerGroupPlayer(auto6F7C59FD_g, auto6F7C59FD_p)) ) {
        lv_player = PlayerGroupPlayer(auto6F7C59FD_g, auto6F7C59FD_p);
        VisRevealerCreate(lv_player, libCore_gv_mAPChaosBaseRegion);
        VisRevealerEnable(VisRevealerLastCreated(), true);
        lv_tempRevealer[lv_player] = VisRevealerLastCreated();
    }
    autoB48B1BB9_g = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup; 
    autoB48B1BB9_p = 1;
    for ( ; autoB48B1BB9_p <= PlayerGroupCount(autoB48B1BB9_g) ; autoB48B1BB9_p += (lv_player == PlayerGroupPlayer(autoB48B1BB9_g, autoB48B1BB9_p)) ) {
        lv_player = PlayerGroupPlayer(autoB48B1BB9_g, autoB48B1BB9_p);
        VisRevealerCreate(lv_player, libCore_gv_mAPOrderBaseRegion);
        VisRevealerEnable(VisRevealerLastCreated(), true);
        lv_tempRevealer[lv_player] = VisRevealerLastCreated();
    }
    Wait(0.125, c_timeGame);
    auto4D61B2C2_ae = 12;
    auto4D61B2C2_ai = 1;
    lv_player = 1;
    for ( ; ( (auto4D61B2C2_ai >= 0 && lv_player <= auto4D61B2C2_ae) || (auto4D61B2C2_ai <= 0 && lv_player >= auto4D61B2C2_ae) ) ; lv_player += auto4D61B2C2_ai ) {
        VisRevealerEnable(lv_tempRevealer[lv_player], false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeVisibility_Init () {
    libGame_gt_InitializeVisibility = TriggerCreate("libGame_gt_InitializeVisibility_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Afk In Altar Detection
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AfkInAltarDetection_Func (bool testConds, bool runActions) {
    int autoE437EE07_ae;
    int autoE437EE07_ai;
    int auto90BDEA6F_ae;
    int auto90BDEA6F_ai;
    unitgroup auto3DDDB52F_g;
    int auto3DDDB52F_u;

    // Variable Declarations
    int lv_itTeam;
    int lv_itPlayer;
    region[libCore_gv_bALMaxTeams + 1] lv_altarRegion;
    unit lv_itHero;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_afk_AfkDetectionSystemEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoE437EE07_ae = libCore_gv_bALMaxTeams;
    autoE437EE07_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (autoE437EE07_ai >= 0 && lv_itTeam <= autoE437EE07_ae) || (autoE437EE07_ai <= 0 && lv_itTeam >= autoE437EE07_ae) ) ; lv_itTeam += autoE437EE07_ai ) {
        lv_altarRegion[lv_itTeam] = RegionCircle(UnitGetPosition(libGame_gv_teams[lv_itTeam].lv_hearthStone), libGame_gv_afk_AfkInAltarRadius_C);
    }
    auto90BDEA6F_ae = libCore_gv_bALMaxPlayers;
    auto90BDEA6F_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto90BDEA6F_ai >= 0 && lv_itPlayer <= auto90BDEA6F_ae) || (auto90BDEA6F_ai <= 0 && lv_itPlayer >= auto90BDEA6F_ae) ) ; lv_itPlayer += auto90BDEA6F_ai ) {
        if (((libGame_gv_players[lv_itPlayer].lv_isDead == true) || (UnitGetType(libGame_gv_players[lv_itPlayer].lv_heroUnit) == "HeroGall"))) {
            libGame_gf_AfkResetAltarTimerForPlayer(lv_itPlayer);
            continue;
        }

        lv_itTeam = libGame_gf_TeamNumberOfPlayer(lv_itPlayer);
        auto3DDDB52F_g = libGame_gv_players[lv_itPlayer].lv_heroUnitGroup;
        auto3DDDB52F_u = 1;
        for ( ; auto3DDDB52F_u <= UnitGroupCount(auto3DDDB52F_g, c_unitCountAll) ; auto3DDDB52F_u += (lv_itHero == UnitGroupUnit(auto3DDDB52F_g, auto3DDDB52F_u)) ) {
            lv_itHero = UnitGroupUnit(auto3DDDB52F_g, auto3DDDB52F_u);
            if (((UnitGetPropertyFixed(lv_itHero, c_unitPropLifePercent, c_unitPropCurrent) < 100.0) || ((UnitHasBehavior2(lv_itHero, "NotManaUserDummy") == false) && (UnitGetPropertyFixed(lv_itHero, c_unitPropEnergyPercent, c_unitPropCurrent) < 100.0)) || (libNtve_gf_UnitInRegion(lv_itHero, lv_altarRegion[lv_itTeam]) == false) || ((libGame_gv_players[lv_itPlayer].lv_activeVehicle != null) && (libNtve_gf_UnitInRegion(libGame_gv_players[lv_itPlayer].lv_activeVehicle, lv_altarRegion[lv_itTeam]) == false)))) {
                libGame_gf_AfkResetAltarTimerForPlayer(lv_itPlayer);
                break;
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AfkInAltarDetection_Init () {
    libGame_gt_AfkInAltarDetection = TriggerCreate("libGame_gt_AfkInAltarDetection_Func");
    TriggerEnable(libGame_gt_AfkInAltarDetection, false);
    TriggerAddEventTimePeriodic(libGame_gt_AfkInAltarDetection, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Afk Check Player Score Values For Activity
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AfkCheckPlayerScoreValuesForActivity_Func (bool testConds, bool runActions) {
    int autoAC9E31E6_ae;
    int autoAC9E31E6_ai;
    int auto3E3671D0_ae;
    int auto3E3671D0_ai;
    int autoC7FAAD9C_ae;
    int autoC7FAAD9C_ai;

    // Variable Declarations
    int lv_itPlayer;
    fixed[libCore_gv_bALMaxPlayers + 1] lv_heroDamageScoreValue;
    fixed[libCore_gv_bALMaxPlayers + 1] lv_siegeDamageScoreValue;
    fixed[libCore_gv_bALMaxPlayers + 1] lv_creepDamageScoreValue;
    fixed[libCore_gv_bALMaxPlayers + 1] lv_healingScoreValue;
    bool lv_didSomething;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAC9E31E6_ae = libCore_gv_bALMaxPlayers;
    autoAC9E31E6_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoAC9E31E6_ai >= 0 && lv_itPlayer <= autoAC9E31E6_ae) || (autoAC9E31E6_ai <= 0 && lv_itPlayer >= autoAC9E31E6_ae) ) ; lv_itPlayer += autoAC9E31E6_ai ) {
        lv_heroDamageScoreValue[lv_itPlayer] = PlayerScoreValueGetAsFixed(lv_itPlayer, "HeroDamage");
        lv_siegeDamageScoreValue[lv_itPlayer] = PlayerScoreValueGetAsFixed(lv_itPlayer, "SiegeDamage");
        lv_creepDamageScoreValue[lv_itPlayer] = PlayerScoreValueGetAsFixed(lv_itPlayer, "CreepDamage");
        lv_healingScoreValue[lv_itPlayer] = PlayerScoreValueGetAsFixed(lv_itPlayer, "Healing");
    }
    auto3E3671D0_ae = libCore_gv_bALMaxPlayers;
    auto3E3671D0_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto3E3671D0_ai >= 0 && lv_itPlayer <= auto3E3671D0_ae) || (auto3E3671D0_ai <= 0 && lv_itPlayer >= auto3E3671D0_ae) ) ; lv_itPlayer += auto3E3671D0_ai ) {
        lv_didSomething = false;
        if (((lv_heroDamageScoreValue[lv_itPlayer] > libGame_gv_afk_PlayerScoreValueTracking[lv_itPlayer].lv_heroDamage) || (lv_siegeDamageScoreValue[lv_itPlayer] > libGame_gv_afk_PlayerScoreValueTracking[lv_itPlayer].lv_siegeDamage))) {
            lv_didSomething = true;
        }

        if (((lv_creepDamageScoreValue[lv_itPlayer] > libGame_gv_afk_PlayerScoreValueTracking[lv_itPlayer].lv_creepDamage) || (lv_healingScoreValue[lv_itPlayer] > libGame_gv_afk_PlayerScoreValueTracking[lv_itPlayer].lv_healing))) {
            lv_didSomething = true;
        }

        if ((lv_didSomething == true)) {
            libGame_gf_AfkResetWarningTimerForPlayer(lv_itPlayer);
        }

    }
    autoC7FAAD9C_ae = libCore_gv_bALMaxPlayers;
    autoC7FAAD9C_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoC7FAAD9C_ai >= 0 && lv_itPlayer <= autoC7FAAD9C_ae) || (autoC7FAAD9C_ai <= 0 && lv_itPlayer >= autoC7FAAD9C_ae) ) ; lv_itPlayer += autoC7FAAD9C_ai ) {
        libGame_gv_afk_PlayerScoreValueTracking[lv_itPlayer].lv_heroDamage = lv_heroDamageScoreValue[lv_itPlayer];
        libGame_gv_afk_PlayerScoreValueTracking[lv_itPlayer].lv_siegeDamage = lv_siegeDamageScoreValue[lv_itPlayer];
        libGame_gv_afk_PlayerScoreValueTracking[lv_itPlayer].lv_creepDamage = lv_creepDamageScoreValue[lv_itPlayer];
        libGame_gv_afk_PlayerScoreValueTracking[lv_itPlayer].lv_healing = lv_healingScoreValue[lv_itPlayer];
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AfkCheckPlayerScoreValuesForActivity_Init () {
    libGame_gt_AfkCheckPlayerScoreValuesForActivity = TriggerCreate("libGame_gt_AfkCheckPlayerScoreValuesForActivity_Func");
    TriggerEnable(libGame_gt_AfkCheckPlayerScoreValuesForActivity, false);
    TriggerAddEventTimePeriodic(libGame_gt_AfkCheckPlayerScoreValuesForActivity, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Afk Check Player Close To Map Mechanic
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AfkCheckPlayerCloseToMapMechanic_Func (bool testConds, bool runActions) {
    int autoD9C1652F_ae;
    int autoD9C1652F_ai;
    unitgroup auto5EB5E832_g;
    int auto5EB5E832_u;
    int autoF72F7A97_ae;
    int autoF72F7A97_ai;
    unitgroup autoF6154C5E_g;
    int autoF6154C5E_u;
    unitgroup auto48F6702B_g;
    int auto48F6702B_u;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itLocation;
    unit lv_itHero;
    bool lv_close;
    bool lv_alive;
    bool lv_checkNearbyEnemyHero;
    unitgroup lv_nearbyEnemyHeroes;
    unit lv_itEnemyHero;

    // Variable Initialization
    lv_nearbyEnemyHeroes = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoD9C1652F_ae = libCore_gv_bALMaxPlayers;
    autoD9C1652F_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoD9C1652F_ai >= 0 && lv_itPlayer <= autoD9C1652F_ae) || (autoD9C1652F_ai <= 0 && lv_itPlayer >= autoD9C1652F_ae) ) ; lv_itPlayer += autoD9C1652F_ai ) {
        lv_close = false;
        lv_alive = false;
        auto5EB5E832_g = libGame_gv_players[lv_itPlayer].lv_heroUnitGroup;
        auto5EB5E832_u = 1;
        for ( ; auto5EB5E832_u <= UnitGroupCount(auto5EB5E832_g, c_unitCountAll) ; auto5EB5E832_u += (lv_itHero == UnitGroupUnit(auto5EB5E832_g, auto5EB5E832_u)) ) {
            lv_itHero = UnitGroupUnit(auto5EB5E832_g, auto5EB5E832_u);
            if ((UnitIsAlive(lv_itHero) == true)) {
                lv_alive = true;
                break;
            }

        }
        autoF72F7A97_ae = libGame_gv_afk_PlayerAfkMapMechanicLocationCount;
        autoF72F7A97_ai = 1;
        lv_itLocation = 1;
        for ( ; ( (autoF72F7A97_ai >= 0 && lv_itLocation <= autoF72F7A97_ae) || (autoF72F7A97_ai <= 0 && lv_itLocation >= autoF72F7A97_ae) ) ; lv_itLocation += autoF72F7A97_ai ) {
            if ((libGame_gv_afk_PlayerAfkMapMechanicLocations[lv_itLocation] == null)) {
                break;
            }

            autoF6154C5E_g = libGame_gv_players[lv_itPlayer].lv_heroUnitGroup;
            autoF6154C5E_u = 1;
            for ( ; autoF6154C5E_u <= UnitGroupCount(autoF6154C5E_g, c_unitCountAll) ; autoF6154C5E_u += (lv_itHero == UnitGroupUnit(autoF6154C5E_g, autoF6154C5E_u)) ) {
                lv_itHero = UnitGroupUnit(autoF6154C5E_g, autoF6154C5E_u);
                if ((UnitIsAlive(lv_itHero) == true)) {
                    lv_alive = true;
                    if ((libNtve_gf_UnitInRegion(lv_itHero, RegionCircle(libGame_gv_afk_PlayerAfkMapMechanicLocations[lv_itLocation], libGame_gv_afk_PlayerAfkMapMechanicLocationCheckRange_C)) == true)) {
                        lv_close = true;
                        break;
                    }

                }

            }
            if ((lv_close == true)) {
                break;
            }

        }
        if ((lv_close == true) && (lv_alive == true)) {
            if ((libGame_gv_afk_UseBrawlAFKSystem == false)) {
                libGame_gf_AfkResetWarningTimerForPlayer(lv_itPlayer);
            }
            else {
                libGame_gf_AFKBrawlResetWarningTimerForPlayer(lv_itPlayer);
            }
        }

        lv_checkNearbyEnemyHero = false;
        if ((lv_alive == true)) {
            if ((libGame_gv_players[lv_itPlayer].lv_heroData.lv_heroCatalogLink == "Medivh") && (UnitBehaviorEnabled(libGame_gv_players[lv_itPlayer].lv_heroUnit, "MedivhTransformRaven") == true)) {
                lv_checkNearbyEnemyHero = true;
            }
            else {
                if (((libGame_gv_players[lv_itPlayer].lv_heroData.lv_heroCatalogLink == "Nova") || (libGame_gv_players[lv_itPlayer].lv_heroData.lv_heroCatalogLink == "Zeratul"))) {
                    lv_checkNearbyEnemyHero = true;
                }

            }
            if ((lv_checkNearbyEnemyHero == true)) {
                lv_nearbyEnemyHeroes = UnitGroupAlliance(lv_itPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(libGame_gv_players[lv_itPlayer].lv_heroUnit), libGame_gv_afk_PlayerCheckNearbyEnemyHeroRadius_C), libCore_gv_filtersHeroic, 1);
                auto48F6702B_g = lv_nearbyEnemyHeroes;
                auto48F6702B_u = 1;
                for ( ; auto48F6702B_u <= UnitGroupCount(auto48F6702B_g, c_unitCountAll) ; auto48F6702B_u += (lv_itEnemyHero == UnitGroupUnit(auto48F6702B_g, auto48F6702B_u)) ) {
                    lv_itEnemyHero = UnitGroupUnit(auto48F6702B_g, auto48F6702B_u);
                    if ((UnitIsAlive(lv_itEnemyHero) == true) && (libNtve_gf_UnitIsVisibleToPlayer(lv_itEnemyHero, lv_itPlayer) == true)) {
                        if ((libGame_gv_afk_UseBrawlAFKSystem == false)) {
                            libGame_gf_AfkResetWarningTimerForPlayer(lv_itPlayer);
                        }
                        else {
                            libGame_gf_AFKBrawlResetWarningTimerForPlayer(lv_itPlayer);
                        }
                        break;
                    }

                }
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AfkCheckPlayerCloseToMapMechanic_Init () {
    libGame_gt_AfkCheckPlayerCloseToMapMechanic = TriggerCreate("libGame_gt_AfkCheckPlayerCloseToMapMechanic_Func");
    TriggerEnable(libGame_gt_AfkCheckPlayerCloseToMapMechanic, false);
    TriggerAddEventTimePeriodic(libGame_gt_AfkCheckPlayerCloseToMapMechanic, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AFK Check Player Entered Vehicle
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AFKCheckPlayerEnteredVehicle_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_afk_UseBrawlAFKSystem == false)) {
        libGame_gf_AfkResetWarningTimerForPlayer(lv_player);
    }
    else {
        libGame_gf_AFKBrawlResetWarningTimerForPlayer(lv_player);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AFKCheckPlayerEnteredVehicle_Init () {
    libGame_gt_AFKCheckPlayerEnteredVehicle = TriggerCreate("libGame_gt_AFKCheckPlayerEnteredVehicle_Func");
    TriggerEnable(libGame_gt_AFKCheckPlayerEnteredVehicle, false);
    TriggerAddEventPlayerEffectUsed(libGame_gt_AFKCheckPlayerEnteredVehicle, c_playerAny, "UseVehicleCastCompleteSet");
    TriggerAddEventPlayerEffectUsed(libGame_gt_AFKCheckPlayerEnteredVehicle, c_playerAny, "CommandeerOdinVehicleCastCompleteSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Afk Player Afk Warning Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AfkPlayerAfkWarningTimerExpires_Func (bool testConds, bool runActions) {
    int auto47D26E9F_ae;
    int auto47D26E9F_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_triggeringPlayer;
    fixed lv_kickTimerDuration;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto47D26E9F_ae = libCore_gv_bALMaxPlayers;
    auto47D26E9F_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto47D26E9F_ai >= 0 && lv_itPlayer <= auto47D26E9F_ae) || (auto47D26E9F_ai <= 0 && lv_itPlayer >= auto47D26E9F_ae) ) ; lv_itPlayer += auto47D26E9F_ai ) {
        if (((EventTimer() == libGame_gv_afk_PlayerAfkWarningTimer[lv_itPlayer]) || (EventTimer() == libGame_gv_afk_PlayerAfkAltarWarningTimer[lv_itPlayer]))) {
            lv_triggeringPlayer = lv_itPlayer;
            break;
        }

    }
    if ((lv_triggeringPlayer == 0)) {
        return true;
    }

    if ((libGame_gv_afk_UseBrawlAFKSystem == false)) {
        lv_kickTimerDuration = libGame_gv_afk_AfkKickTimerDuration_C;
    }
    else {
        lv_kickTimerDuration = libGame_gv_afkBrawl_AfkKickTimerDuration_C;
    }
    libGame_gv_afk_PlayerAfkWarnCount[lv_triggeringPlayer] += 1;
    TimerPause(libGame_gv_afk_PlayerAfkAltarWarningTimer[lv_triggeringPlayer], true);
    TimerPause(libGame_gv_afk_PlayerAfkWarningTimer[lv_triggeringPlayer], true);
    if ((libStEx_gf_InTrainingMode() == true) && (libGame_gv_afk_PlayerAfkWarnCount[lv_triggeringPlayer] == libGame_gv_afk_AfkMaxWarnCount_Training_C)) {
        libGame_gv_afk_PlayerAfkWarning[lv_triggeringPlayer] = true;
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[lv_triggeringPlayer], c_messageAreaDirective, TextExpressionAssemble("Param/Expression/lib_Game_0DABA161"));
        TimerStart(libGame_gv_afk_PlayerAfkKickTimer[lv_triggeringPlayer], lv_kickTimerDuration, false, c_timeGame);
    }
    else if ((libStEx_gf_InTrainingMode() == false) && (libGame_gv_afk_PlayerAfkWarnCount[lv_triggeringPlayer] > libGame_gv_afk_AfkMaxWarnCount_C)) {
        libGame_gf_AfkKickPlayer(lv_triggeringPlayer);
    }
    else if ((libStEx_gf_InTrainingMode() == true) && (libGame_gv_afk_PlayerAfkWarnCount[lv_triggeringPlayer] > libGame_gv_afk_AfkMaxWarnCount_Training_C)) {
        libGame_gf_AfkKickPlayer(lv_triggeringPlayer);
    }
    else if (true) {
        libGame_gv_afk_PlayerAfkWarning[lv_triggeringPlayer] = true;
        TextExpressionSetToken("Param/Expression/lib_Game_2879DA39", "A", FixedToText(lv_kickTimerDuration, 0));
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[lv_triggeringPlayer], c_messageAreaDirective, TextExpressionAssemble("Param/Expression/lib_Game_2879DA39"));
        TimerStart(libGame_gv_afk_PlayerAfkKickTimer[lv_triggeringPlayer], lv_kickTimerDuration, false, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AfkPlayerAfkWarningTimerExpires_Init () {
    libGame_gt_AfkPlayerAfkWarningTimerExpires = TriggerCreate("libGame_gt_AfkPlayerAfkWarningTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkWarningTimer[1]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkWarningTimer[2]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkWarningTimer[3]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkWarningTimer[4]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkWarningTimer[5]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkWarningTimer[6]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkWarningTimer[7]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkWarningTimer[8]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkWarningTimer[9]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkWarningTimer[10]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkAltarWarningTimer[1]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkAltarWarningTimer[2]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkAltarWarningTimer[3]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkAltarWarningTimer[4]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkAltarWarningTimer[5]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkAltarWarningTimer[6]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkAltarWarningTimer[7]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkAltarWarningTimer[8]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkAltarWarningTimer[9]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkWarningTimerExpires, libGame_gv_afk_PlayerAfkAltarWarningTimer[10]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Afk Player Afk Kick Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AfkPlayerAfkKickTimerExpires_Func (bool testConds, bool runActions) {
    int autoBF9EE333_ae;
    int autoBF9EE333_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_triggeringPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBF9EE333_ae = libCore_gv_bALMaxPlayers;
    autoBF9EE333_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoBF9EE333_ai >= 0 && lv_itPlayer <= autoBF9EE333_ae) || (autoBF9EE333_ai <= 0 && lv_itPlayer >= autoBF9EE333_ae) ) ; lv_itPlayer += autoBF9EE333_ai ) {
        if ((EventTimer() == libGame_gv_afk_PlayerAfkKickTimer[lv_itPlayer])) {
            lv_triggeringPlayer = lv_itPlayer;
            break;
        }

    }
    if ((lv_triggeringPlayer > 0)) {
        libGame_gf_AfkKickPlayer(lv_triggeringPlayer);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AfkPlayerAfkKickTimerExpires_Init () {
    libGame_gt_AfkPlayerAfkKickTimerExpires = TriggerCreate("libGame_gt_AfkPlayerAfkKickTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkKickTimerExpires, libGame_gv_afk_PlayerAfkKickTimer[1]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkKickTimerExpires, libGame_gv_afk_PlayerAfkKickTimer[2]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkKickTimerExpires, libGame_gv_afk_PlayerAfkKickTimer[3]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkKickTimerExpires, libGame_gv_afk_PlayerAfkKickTimer[4]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkKickTimerExpires, libGame_gv_afk_PlayerAfkKickTimer[5]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkKickTimerExpires, libGame_gv_afk_PlayerAfkKickTimer[6]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkKickTimerExpires, libGame_gv_afk_PlayerAfkKickTimer[7]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkKickTimerExpires, libGame_gv_afk_PlayerAfkKickTimer[8]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkKickTimerExpires, libGame_gv_afk_PlayerAfkKickTimer[9]);
    TriggerAddEventTimer(libGame_gt_AfkPlayerAfkKickTimerExpires, libGame_gv_afk_PlayerAfkKickTimer[10]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AFKBrawl - Check Player Used Ability
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AFKBrawlCheckPlayerUsedAbility_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_AFKBrawlResetWarningTimerForPlayer(UnitGetOwner(EventUnit()));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AFKBrawlCheckPlayerUsedAbility_Init () {
    libGame_gt_AFKBrawlCheckPlayerUsedAbility = TriggerCreate("libGame_gt_AFKBrawlCheckPlayerUsedAbility_Func");
    TriggerEnable(libGame_gt_AFKBrawlCheckPlayerUsedAbility, false);
    TriggerAddEventUnitAbility(libGame_gt_AFKBrawlCheckPlayerUsedAbility, null, null, c_unitAbilStageAll, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: AFKBrawl - Check Player Healed Unit
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AFKBrawlCheckPlayerHealedUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_healingUnit;
    unitgroup lv_nearbyAllies;
    fixed lv_amount;

    // Variable Initialization
    lv_healingUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_nearbyAllies = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(lv_healingUnit) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(lv_healingUnit) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_amount = Round(EventPlayerEffectUsedAmountFixed(c_effectAmountLifeChanged, false));
    if ((lv_amount <= 0.0)) {
        return true;
    }

    lv_nearbyAllies = UnitGroupAlliance(UnitGetOwner(lv_healingUnit), c_unitAllianceAllyExcludeSelf, RegionCircle(UnitGetPosition(lv_healingUnit), libCore_gv_bALXPRadius), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    libGame_gf_AFKBrawlResetWarningTimerForPlayer(UnitGetOwner(lv_healingUnit));
    UnitGroupLoopBegin(lv_nearbyAllies);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libGame_gf_AFKBrawlResetWarningTimerForPlayer(UnitGetOwner(UnitGroupLoopCurrent()));
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AFKBrawlCheckPlayerHealedUnit_Init () {
    libGame_gt_AFKBrawlCheckPlayerHealedUnit = TriggerCreate("libGame_gt_AFKBrawlCheckPlayerHealedUnit_Func");
    TriggerEnable(libGame_gt_AFKBrawlCheckPlayerHealedUnit, false);
    TriggerAddEventPlayerEffectUsedFromScope(libGame_gt_AFKBrawlCheckPlayerHealedUnit, c_playerAny, "CEffectCreateHealer");
}

//--------------------------------------------------------------------------------------------------
// Trigger: AFKBrawl - Check Player Damaged Unit
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AFKBrawlCheckPlayerDamagedUnit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_damagingUnit;
    unitgroup lv_nearbyAllies;
    fixed lv_damageAttempted;

    // Variable Initialization
    lv_damagingUnit = EventUnitDamageSourceUnit();
    lv_nearbyAllies = UnitGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) >= 1))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnitDamageSourceUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_damageAttempted = EventUnitDamageAttemptedVitals();
    if ((lv_damageAttempted <= 0.0)) {
        return true;
    }

    lv_nearbyAllies = UnitGroupAlliance(EventUnitDamageSourcePlayer(), c_unitAllianceAllyExcludeSelf, RegionCircle(UnitGetPosition(lv_damagingUnit), libCore_gv_bALXPRadius), UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    libGame_gf_AFKBrawlResetWarningTimerForPlayer(EventUnitDamageSourcePlayer());
    UnitGroupLoopBegin(lv_nearbyAllies);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libGame_gf_AFKBrawlResetWarningTimerForPlayer(UnitGetOwner(UnitGroupLoopCurrent()));
    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AFKBrawlCheckPlayerDamagedUnit_Init () {
    libGame_gt_AFKBrawlCheckPlayerDamagedUnit = TriggerCreate("libGame_gt_AFKBrawlCheckPlayerDamagedUnit_Func");
    TriggerEnable(libGame_gt_AFKBrawlCheckPlayerDamagedUnit, false);
    TriggerAddEventUnitDamaged(libGame_gt_AFKBrawlCheckPlayerDamagedUnit, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Announcement Message Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AnnouncementMessageTimerExpires_Func (bool testConds, bool runActions) {
    int autoCF4991EE_ae;
    int autoCF4991EE_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoCF4991EE_ae = libCore_gv_bALMaxEnginePlayerCount;
    autoCF4991EE_ai = 1;
    lv_player = 0;
    for ( ; ( (autoCF4991EE_ai >= 0 && lv_player <= autoCF4991EE_ae) || (autoCF4991EE_ai <= 0 && lv_player >= autoCF4991EE_ae) ) ; lv_player += autoCF4991EE_ai ) {
        if ((EventTimer() == libGame_gv_announcementQueue[lv_player].lv_messageTimer)) {
            libGame_gf_AnnouncementPlayNextItemForPlayer(lv_player);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AnnouncementMessageTimerExpires_Init () {
    libGame_gt_AnnouncementMessageTimerExpires = TriggerCreate("libGame_gt_AnnouncementMessageTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[1].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[2].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[3].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[4].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[5].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[6].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[7].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[8].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[9].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[10].lv_messageTimer);
    TriggerAddEventTimer(libGame_gt_AnnouncementMessageTimerExpires, libGame_gv_announcementQueue[libCore_gv_oBSERVER_ObserverUIPlayer].lv_messageTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Behavior Category Bit Flag Values
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeBehaviorCategoryBitFlagValues_Func (bool testConds, bool runActions) {
    int auto3044E806_ae;
    int auto3044E806_ai;

    // Variable Declarations
    int lv_itCategory;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_behaviorCategoryCount_C != (c_behaviorCategoryUser15+1))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_53C847C1"), true);
    }

    auto3044E806_ae = (libGame_gv_behaviorCategoryCount_C - 1);
    auto3044E806_ai = 1;
    lv_itCategory = 0;
    for ( ; ( (auto3044E806_ai >= 0 && lv_itCategory <= auto3044E806_ae) || (auto3044E806_ai <= 0 && lv_itCategory >= auto3044E806_ae) ) ; lv_itCategory += auto3044E806_ai ) {
        libGame_gv_behaviorCategoryBitFlagValues[lv_itCategory] = (1 << lv_itCategory);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeBehaviorCategoryBitFlagValues_Init () {
    libGame_gt_InitializeBehaviorCategoryBitFlagValues = TriggerCreate("libGame_gt_InitializeBehaviorCategoryBitFlagValues_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Capture Point Logic
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CapturePointLogic_Func (bool testConds, bool runActions) {
    int auto429447FB_ae;
    int auto429447FB_ai;
    unitgroup autoC5905908_g;
    int autoC5905908_u;
    int auto416AF879_val;
    int autoAF8EF2F0_val;
    int autoB759D9BE_val;
    int autoE7E61F37_val;

    // Variable Declarations
    const int lv_captureIncrement = 1;
    unit lv_itUnit;
    int lv_capturePointIndex;
    int lv_orderTeamHeroes;
    int lv_chaosTeamHeroes;
    playergroup lv_capturingPlayers;
    bool lv_hasOverCaptureRegion;
    bool lv_becameFullyCaptured;
    bool[libGame_gv_capturePointMaxCount_C + 1] lv_capperHasMercLordTalent;

    // Variable Initialization
    lv_capturingPlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    auto429447FB_ae = libGame_gv_capturePointCurrentCount;
    auto429447FB_ai = 1;
    lv_capturePointIndex = 1;
    for ( ; ( (auto429447FB_ai >= 0 && lv_capturePointIndex <= auto429447FB_ae) || (auto429447FB_ai <= 0 && lv_capturePointIndex >= auto429447FB_ae) ) ; lv_capturePointIndex += auto429447FB_ai ) {
        if ((UnitBehaviorCount(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit, "DisableBeaconBuff") == 1)) {
            continue;
        }

        if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_enabled == false)) {
            continue;
        }

        lv_capturingPlayers = PlayerGroupEmpty();
        lv_orderTeamHeroes = 0;
        lv_chaosTeamHeroes = 0;
        autoC5905908_g = UnitGroup(null, c_playerAny, libGame_gv_capturePoints[lv_capturePointIndex].lv_captureRegion, libCore_gv_filtersHeroicandnotBenign, 0);
        autoC5905908_u = 1;
        for ( ; autoC5905908_u <= UnitGroupCount(autoC5905908_g, c_unitCountAll) ; autoC5905908_u += (lv_itUnit == UnitGroupUnit(autoC5905908_g, autoC5905908_u)) ) {
            lv_itUnit = UnitGroupUnit(autoC5905908_g, autoC5905908_u);
            if (((UnitBehaviorCount(lv_itUnit, "UltimateEvolutionBuff") == 1) || (UnitBehaviorCount(lv_itUnit, "CapturePointAllowed") == 1) || (UnitTestState(lv_itUnit, c_unitStateHallucination) == false))) {
                if ((libGame_gv_players[UnitGetOwner(lv_itUnit)].lv_faction == libGame_ge_Faction_Order)) {
                    lv_orderTeamHeroes += 1;
                }
                else {
                    lv_chaosTeamHeroes += 1;
                }
                PlayerGroupAdd(lv_capturingPlayers, UnitGetOwner(lv_itUnit));
            }

        }
        if ((PlayerGroupCount(lv_capturingPlayers) > 0)) {
            libGame_gf_UpdateTimers(lv_capturePointIndex, lv_capturingPlayers);
        }

        if ((lv_orderTeamHeroes == 0) && (lv_chaosTeamHeroes == 0)) {
            auto416AF879_val = libGame_gv_capturePoints[lv_capturePointIndex].lv_emptyPointDecay;
            if (auto416AF879_val == libGame_ge_CapturePointDecay_DoNotDecay) {
            }
            else if (auto416AF879_val == libGame_ge_CapturePointDecay_Neutral) {
                if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter != 0)) {
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_RevertingtoNeutral)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_RevertingtoNeutral;
                        libCore_gf_SendActorMessageToDoodadsInRegion("Signal RevertingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                        if ((UnitGetType(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == "WatchTowerCaptureBeacon")) {
                            libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "AnimBracketStop Capture");
                            libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "Signal CapturePointEmpty");
                        }

                    }

                }

                if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < 0)) {
                    libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter += lv_captureIncrement;
                }

                if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > 0)) {
                    libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter -= lv_captureIncrement;
                }

            }
            else if (auto416AF879_val == libGame_ge_CapturePointDecay_Owner) {
                autoAF8EF2F0_val = UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit);
                if (autoAF8EF2F0_val == libCore_gv_cOMPUTER_Neutral) {
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter != 0)) {
                        if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_RevertingtoNeutral)) {
                            libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_RevertingtoNeutral;
                            libCore_gf_SendActorMessageToDoodadsInRegion("Signal RevertingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                            if ((UnitGetType(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == "WatchTowerCaptureBeacon")) {
                                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "AnimBracketStop Capture");
                                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "Signal CapturePointEmpty");
                            }

                        }

                    }

                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < 0)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter += lv_captureIncrement;
                    }

                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > 0)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter -= lv_captureIncrement;
                    }

                }
                else if (autoAF8EF2F0_val == libCore_gv_cOMPUTER_TeamOrder) {
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter += lv_captureIncrement;
                        if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_Capturing)) {
                            libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_Capturing;
                            libCore_gf_SendActorMessageToDoodadsInRegion("Signal CapturingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                            if ((UnitGetType(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == "WatchTowerCaptureBeacon")) {
                                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "AnimBracketResume Capture");
                                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "Signal CapturePointEmpty");
                            }

                        }

                    }

                }
                else if (autoAF8EF2F0_val == libCore_gv_cOMPUTER_TeamChaos) {
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > (libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture * -1))) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter -= lv_captureIncrement;
                        if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_Capturing)) {
                            libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_Capturing;
                            libCore_gf_SendActorMessageToDoodadsInRegion("Signal CapturingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                            if ((UnitGetType(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == "WatchTowerCaptureBeacon")) {
                                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "AnimBracketResume Capture");
                                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "Signal CapturePointEmpty");
                            }

                        }

                    }

                }
                else {
                }
            }
            else {
            }
        }

        if ((lv_orderTeamHeroes > 0) && (lv_chaosTeamHeroes > 0)) {
            autoB759D9BE_val = libGame_gv_capturePoints[lv_capturePointIndex].lv_contestedPointDecay;
            if (autoB759D9BE_val == libGame_ge_CapturePointDecay_DoNotDecay) {
                if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_Contested)) {
                    libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_Contested;
                    libCore_gf_SendActorMessageToDoodadsInRegion("Signal ContestedCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                    if ((UnitGetType(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == "WatchTowerCaptureBeacon")) {
                        libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "Signal CapturePointEmpty");
                    }

                }

            }
            else if (autoB759D9BE_val == libGame_ge_CapturePointDecay_Neutral) {
                if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter != 0)) {
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_RevertingtoNeutral)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_RevertingtoNeutral;
                        libCore_gf_SendActorMessageToDoodadsInRegion("Signal RevertingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                        if ((UnitGetType(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == "WatchTowerCaptureBeacon")) {
                            libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "AnimBracketStop Capture");
                            libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "Signal CapturePointEmpty");
                        }

                    }

                }

                if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < 0)) {
                    libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter += lv_captureIncrement;
                }

                if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > 0)) {
                    libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter -= lv_captureIncrement;
                }

            }
            else if (autoB759D9BE_val == libGame_ge_CapturePointDecay_Owner) {
                autoE7E61F37_val = UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit);
                if (autoE7E61F37_val == libCore_gv_cOMPUTER_Neutral) {
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter != 0)) {
                        if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_RevertingtoNeutral)) {
                            libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_RevertingtoNeutral;
                            libCore_gf_SendActorMessageToDoodadsInRegion("Signal RevertingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                            if ((UnitGetType(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == "WatchTowerCaptureBeacon")) {
                                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "AnimBracketStop Capture");
                                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "Signal CapturePointEmpty");
                            }

                        }

                    }

                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < 0)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter += lv_captureIncrement;
                    }

                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > 0)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter -= lv_captureIncrement;
                    }

                }
                else if (autoE7E61F37_val == libCore_gv_cOMPUTER_TeamOrder) {
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter += lv_captureIncrement;
                        if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_Capturing)) {
                            libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_Capturing;
                            libCore_gf_SendActorMessageToDoodadsInRegion("Signal CapturingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                            if ((UnitGetType(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == "WatchTowerCaptureBeacon")) {
                                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "AnimBracketResume Capture");
                                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "Signal CapturePointEmpty");
                            }

                        }

                    }

                }
                else if (autoE7E61F37_val == libCore_gv_cOMPUTER_TeamChaos) {
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > (libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture * -1))) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter -= lv_captureIncrement;
                        if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_Capturing)) {
                            libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_Capturing;
                            libCore_gf_SendActorMessageToDoodadsInRegion("Signal CapturingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                            if ((UnitGetType(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == "WatchTowerCaptureBeacon")) {
                                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "AnimBracketResume Capture");
                                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "Signal CapturePointEmpty");
                            }

                        }

                    }

                }
                else {
                }
            }
            else {
            }
        }

        if ((lv_orderTeamHeroes > 0) && (lv_chaosTeamHeroes == 0) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints)) {
            if (((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter + lv_captureIncrement) >= libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints)) {
                lv_becameFullyCaptured = true;
                libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter = libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints;
                if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_Captured)) {
                    libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_Captured;
                    libCore_gf_SendActorMessageToDoodadsInRegion("Signal CapturingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                    if ((UnitGetType(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == "WatchTowerCaptureBeacon")) {
                        libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "Signal CapturePointEmpty");
                        libNtve_gf_SendActorMessageToUnit(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit, "Signal WatchTowerOwnerOrder");
                    }
                    else {
                        libNtve_gf_SendActorMessageToUnit(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit, "Signal CapturePointOwnerOrder");
                    }
                }

            }
            else {
                libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter += lv_captureIncrement;
                if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < 0)) {
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_RevertingtoNeutral)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_RevertingtoNeutral;
                        libCore_gf_SendActorMessageToDoodadsInRegion("Signal RevertingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                        if ((UnitGetType(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == "WatchTowerCaptureBeacon")) {
                            libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "AnimBracketStop Capture");
                            libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "Signal CapturePointOccupied");
                        }

                    }

                }
                else {
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_Capturing)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_Capturing;
                        libCore_gf_SendActorMessageToDoodadsInRegion("Signal TeamOrderCapturing", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                        libCore_gf_SendActorMessageToDoodadsInRegion("Signal CapturingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                        if ((UnitGetType(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == "WatchTowerCaptureBeacon")) {
                            libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "Signal CapturePointOccupied");
                        }

                    }

                }
            }
        }

        if ((lv_chaosTeamHeroes > 0) && (lv_orderTeamHeroes == 0) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > (-1 * libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints))) {
            if (((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter - lv_captureIncrement) <= (-1 * libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints))) {
                lv_becameFullyCaptured = true;
                libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter = (-1 * libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints);
                if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_Captured)) {
                    libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_Captured;
                    libCore_gf_SendActorMessageToDoodadsInRegion("Signal CapturingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                    if ((UnitGetType(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == "WatchTowerCaptureBeacon")) {
                        libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "Signal CapturePointEmpty");
                        libNtve_gf_SendActorMessageToUnit(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit, "Signal WatchTowerOwnerChaos");
                    }
                    else {
                        libNtve_gf_SendActorMessageToUnit(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit, "Signal CapturePointOwnerChaos");
                    }
                }

            }
            else {
                libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter -= lv_captureIncrement;
                if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > 0)) {
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_RevertingtoNeutral)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_RevertingtoNeutral;
                        libCore_gf_SendActorMessageToDoodadsInRegion("Signal RevertingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                        if ((UnitGetType(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == "WatchTowerCaptureBeacon")) {
                            libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "AnimBracketStop Capture");
                            libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "Signal CapturePointOccupied");
                        }

                    }

                }
                else {
                    if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_Capturing)) {
                        libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_Capturing;
                        libCore_gf_SendActorMessageToDoodadsInRegion("Signal TeamChaosCapturing", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                        libCore_gf_SendActorMessageToDoodadsInRegion("Signal CapturingCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit), 12.0), null);
                        if ((UnitGetType(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == "WatchTowerCaptureBeacon")) {
                            libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "Signal CapturePointOccupied");
                        }

                    }

                }
            }
        }

        if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter == 0)) {
            if ((libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState != libGame_ge_CapturePointState_Neutral)) {
                if ((UnitGetType(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == "WatchTowerCaptureBeacon")) {
                    libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_capturePointIndex].lv_watchTowerUnit, "AnimBracketClear Capture Instant");
                    libNtve_gf_SendActorMessageToUnit(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit, "Signal WatchTowerOwnerNeutral");
                }
                else {
                    libNtve_gf_SendActorMessageToUnit(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit, "Signal CapturePointOwnerNeutral");
                }
                libGame_gv_capturePoints[lv_capturePointIndex].lv_capturePointState = libGame_ge_CapturePointState_Neutral;
            }

        }

        libNtve_gf_SetDialogItemCurrentValue(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureProgressBar, (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter + libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints), PlayerGroupAll());
        if ((UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) != libCore_gv_cOMPUTER_Neutral) && (((libGame_gv_capturePoints[lv_capturePointIndex].lv_rememberLastOwner == true) && (UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == libCore_gv_cOMPUTER_TeamOrder) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter <= 0)) || ((libGame_gv_capturePoints[lv_capturePointIndex].lv_rememberLastOwner == true) && (UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) == libCore_gv_cOMPUTER_TeamChaos) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter >= 0)) || ((libGame_gv_capturePoints[lv_capturePointIndex].lv_rememberLastOwner == false) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter > (libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture * -1)) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter < libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture)))) {
            libGame_gf_CapturePointChangeOwnership(lv_capturePointIndex, libCore_gv_cOMPUTER_Neutral, lv_capturingPlayers, lv_capperHasMercLordTalent[lv_capturePointIndex]);
        }
        else if ((UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) != libCore_gv_cOMPUTER_TeamOrder) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter >= libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture)) {
            libGame_gf_CapturePointChangeOwnership(lv_capturePointIndex, libCore_gv_cOMPUTER_TeamOrder, lv_capturingPlayers, lv_capperHasMercLordTalent[lv_capturePointIndex]);
        }
        else if ((UnitGetOwner(libGame_gv_capturePoints[lv_capturePointIndex].lv_captureBeaconUnit) != libCore_gv_cOMPUTER_TeamChaos) && (libGame_gv_capturePoints[lv_capturePointIndex].lv_captureCounter <= (libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture * -1))) {
            libGame_gf_CapturePointChangeOwnership(lv_capturePointIndex, libCore_gv_cOMPUTER_TeamChaos, lv_capturingPlayers, lv_capperHasMercLordTalent[lv_capturePointIndex]);
        }
        lv_hasOverCaptureRegion = (libGame_gv_capturePoints[lv_capturePointIndex].lv_maximumPoints > libGame_gv_capturePoints[lv_capturePointIndex].lv_pointsNeededToCapture);
        if ((lv_becameFullyCaptured == true) && (lv_hasOverCaptureRegion == true)) {
            libGame_gf_SendEventCapturePointBecomesFullyOverCaptured(lv_capturePointIndex);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CapturePointLogic_Init () {
    libGame_gt_CapturePointLogic = TriggerCreate("libGame_gt_CapturePointLogic_Func");
    TriggerEnable(libGame_gt_CapturePointLogic, false);
    TriggerAddEventTimePeriodic(libGame_gt_CapturePointLogic, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Dim Capture Point
//--------------------------------------------------------------------------------------------------
bool libGame_gt_DimCapturePoint_Func (bool testConds, bool runActions) {
    int auto9F786313_ae;
    int auto9F786313_ai;

    // Variable Declarations
    int lv_itCapturePointIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto9F786313_ae = libGame_gv_capturePointMaxCount_C;
    auto9F786313_ai = 1;
    lv_itCapturePointIndex = 0;
    for ( ; ( (auto9F786313_ai >= 0 && lv_itCapturePointIndex <= auto9F786313_ae) || (auto9F786313_ai <= 0 && lv_itCapturePointIndex >= auto9F786313_ae) ) ; lv_itCapturePointIndex += auto9F786313_ai ) {
        if ((EventUnit() == libGame_gv_capturePoints[lv_itCapturePointIndex].lv_captureBeaconUnit)) {
            DialogControlSendAnimationEvent(libGame_gv_capturePoints[lv_itCapturePointIndex].lv_progressBarDimmingFrame, PlayerGroupAll(), "DimmedOn");
            libNtve_gf_SendActorMessageToUnit(libGame_gv_capturePoints[lv_itCapturePointIndex].lv_captureBeaconUnit, "SetTintColor 35,35,35 0.000000 OneShot VoidPrisonTint");
            libCore_gf_SendActorMessageToDoodadsInRegion("Signal PauseCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_itCapturePointIndex].lv_captureBeaconUnit), 12.0), null);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_DimCapturePoint_Init () {
    libGame_gt_DimCapturePoint = TriggerCreate("libGame_gt_DimCapturePoint_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_DimCapturePoint, null, "DisableBeaconBuff", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: UnDim Capture Point
//--------------------------------------------------------------------------------------------------
bool libGame_gt_UnDimCapturePoint_Func (bool testConds, bool runActions) {
    int autoDE5B5F2A_ae;
    int autoDE5B5F2A_ai;

    // Variable Declarations
    int lv_itCapturePointIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoDE5B5F2A_ae = libGame_gv_capturePointMaxCount_C;
    autoDE5B5F2A_ai = 1;
    lv_itCapturePointIndex = 0;
    for ( ; ( (autoDE5B5F2A_ai >= 0 && lv_itCapturePointIndex <= autoDE5B5F2A_ae) || (autoDE5B5F2A_ai <= 0 && lv_itCapturePointIndex >= autoDE5B5F2A_ae) ) ; lv_itCapturePointIndex += autoDE5B5F2A_ai ) {
        if ((EventUnit() == libGame_gv_capturePoints[lv_itCapturePointIndex].lv_captureBeaconUnit)) {
            DialogControlSendAnimationEvent(libGame_gv_capturePoints[lv_itCapturePointIndex].lv_progressBarDimmingFrame, PlayerGroupAll(), "DimmedOff");
            libNtve_gf_SendActorMessageToUnit(libGame_gv_capturePoints[lv_itCapturePointIndex].lv_captureBeaconUnit, "ClearTintColor 0.000000 VoidPrisonTint");
            libCore_gf_SendActorMessageToDoodadsInRegion("Signal UnPauseCapturePoint", RegionCircle(UnitGetPosition(libGame_gv_capturePoints[lv_itCapturePointIndex].lv_captureBeaconUnit), 12.0), null);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_UnDimCapturePoint_Init () {
    libGame_gt_UnDimCapturePoint = TriggerCreate("libGame_gt_UnDimCapturePoint_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_UnDimCapturePoint, null, "DisableBeaconBuff", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower - Core Is Under Attack
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TowerCoreIsUnderAttack_Func (bool testConds, bool runActions) {
    int auto3B2503E2_ae;
    int auto3B2503E2_ai;

    // Variable Declarations
    int lv_itTeamNumber;
    unitgroup lv_enemiesNearCore;
    fixed lv_lowestTimer;

    // Variable Initialization
    lv_enemiesNearCore = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libGame_gv_gameOver == true) || (libGame_gv_towerMapPlaysCoreWarning == false))) {
        return true;
    }

    lv_lowestTimer = libGame_gv_towerCoreUnderAttackAlertRepeatTime;
    auto3B2503E2_ae = libCore_gv_bALMaxTeams;
    auto3B2503E2_ai = 1;
    lv_itTeamNumber = 1;
    for ( ; ( (auto3B2503E2_ai >= 0 && lv_itTeamNumber <= auto3B2503E2_ae) || (auto3B2503E2_ai <= 0 && lv_itTeamNumber >= auto3B2503E2_ae) ) ; lv_itTeamNumber += auto3B2503E2_ai ) {
        if ((TimerGetRemaining(libGame_gv_towerTeamCoreAlertTimer[lv_itTeamNumber]) == 0.0) && (libGame_gv_teams[lv_itTeamNumber].lv_core != null) && (UnitHasBehavior2(libGame_gv_teams[lv_itTeamNumber].lv_core, "CoreInvulnerability") == false)) {
            lv_enemiesNearCore = UnitGroupSearch(null, UnitGetOwner(libGame_gv_teams[lv_itTeamNumber].lv_core), UnitGetPosition(libGame_gv_teams[lv_itTeamNumber].lv_core), libGame_gv_towerCoreUnderAttackScanRange, UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            if ((UnitGroupCount(UnitGroupFilter(null, c_playerAny, lv_enemiesNearCore, libCore_gv_filtersHeroic, 0), c_unitCountAll) > 0)) {
                libGame_gf_TowerCreateCoreUnderAttackPing(libGame_gv_teams[lv_itTeamNumber].lv_teamPlayerGroup, libGame_gv_teams[lv_itTeamNumber].lv_core);
                TimerStart(libGame_gv_towerTeamCoreAlertTimer[lv_itTeamNumber], libGame_gv_towerCoreUnderAttackAlertRepeatTime, false, c_timeGame);
                continue;
            }

            if ((UnitGroupCount(UnitGroupFilter(null, c_playerAny, lv_enemiesNearCore, libCore_gv_filtersMercLaner, 0), c_unitCountAll) > 0)) {
                libGame_gf_TowerCreateCoreUnderAttackPing(libGame_gv_teams[lv_itTeamNumber].lv_teamPlayerGroup, libGame_gv_teams[lv_itTeamNumber].lv_core);
                TimerStart(libGame_gv_towerTeamCoreAlertTimer[lv_itTeamNumber], libGame_gv_towerCoreUnderAttackAlertRepeatTime, false, c_timeGame);
                continue;
            }

            if ((UnitGroupCount(UnitGroupFilter("CatapultMinion", c_playerAny, lv_enemiesNearCore, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAll) >= 3)) {
                libGame_gf_TowerCreateCoreUnderAttackPing(libGame_gv_teams[lv_itTeamNumber].lv_teamPlayerGroup, libGame_gv_teams[lv_itTeamNumber].lv_core);
                TimerStart(libGame_gv_towerTeamCoreAlertTimer[lv_itTeamNumber], libGame_gv_towerCoreUnderAttackAlertRepeatTime, false, c_timeGame);
                continue;
            }

            lv_lowestTimer = 0.0;
        }
        else {
            if ((TimerGetRemaining(libGame_gv_towerTeamCoreAlertTimer[lv_itTeamNumber]) < lv_lowestTimer)) {
                lv_lowestTimer = TimerGetRemaining(libGame_gv_towerTeamCoreAlertTimer[lv_itTeamNumber]);
            }

        }
    }
    if ((lv_lowestTimer > libGame_gv_towerCoreUnderAttackScanPeriod)) {
        TimerStart(libGame_gv_towerMainCoreAlertTimer, lv_lowestTimer, false, c_timeGame);
    }
    else {
        TimerStart(libGame_gv_towerMainCoreAlertTimer, libGame_gv_towerCoreUnderAttackScanPeriod, false, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TowerCoreIsUnderAttack_Init () {
    libGame_gt_TowerCoreIsUnderAttack = TriggerCreate("libGame_gt_TowerCoreIsUnderAttack_Func");
    TriggerAddEventTimer(libGame_gt_TowerCoreIsUnderAttack, libGame_gv_towerMainCoreAlertTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower - Core Has Taken Damage
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TowerCoreHasTakenDamage_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_teamUnderAttack;
    timer lv_teamAlertTimer;

    // Variable Initialization
    lv_teamUnderAttack = PlayerGroupEmpty();
    lv_teamAlertTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libUIUI_gt_TopBarPanelShowPerPlayerLoop, false);
    DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_coreHealthUnitStatusFrames[libGame_gv_teamOrderIndex_C], PlayerGroupAll(), true);
    DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_coreHealthUnitStatusFrames[libGame_gv_teamChaosIndex_C], PlayerGroupAll(), true);
    DialogControlSetVisible(libUIUI_gv_uIObserverUI.lv_coreHealthUnitStatusFrames[libGame_gv_teamOrderIndex_C], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    DialogControlSetVisible(libUIUI_gv_uIObserverUI.lv_coreHealthUnitStatusFrames[libGame_gv_teamChaosIndex_C], libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
    DialogControlSetVisible(libUIUI_gv_topBarPanel.lv_coreHealthLabel, PlayerGroupAll(), true);
    UnitBehaviorRemove(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core, "PalaceDamageResponseController", 1);
    UnitBehaviorRemove(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, "PalaceDamageResponseController", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TowerCoreHasTakenDamage_Init () {
    libGame_gt_TowerCoreHasTakenDamage = TriggerCreate("libGame_gt_TowerCoreHasTakenDamage_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_TowerCoreHasTakenDamage, c_playerAny, "PalaceDamageResponseDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Slow
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognitionSlow_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorAdd(EventUnit(), "SlowedCC", UnitBehaviorEffectUnit(EventUnit(), EventUnitBehavior(), c_effectUnitCaster, 0), 1);
    UnitBehaviorSetDuration(EventUnit(), "SlowedCC", UnitBehaviorDuration(EventUnit(), EventUnitBehavior()));
    if (((PlayerHasTalent(UnitGetOwner(EventUnit()), "LiLiMasteryShakeIfOff") == false) && (EventUnitBehavior() != "RehgarEarthbindTotemSlow") && (EventUnitBehavior() != "ChromieSlowingSands10Slow") && (EventUnitBehavior() != "ChromieSlowingSands20Slow") && (EventUnitBehavior() != "ChromieSlowingSands30Slow") && (EventUnitBehavior() != "ChromieSlowingSands40Slow") && (EventUnitBehavior() != "ChromieSlowingSands50Slow"))) {
        libGame_gf_CCRecognitionCCReduction(EventUnit(), EventUnitBehavior());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognitionSlow_Init () {
    libGame_gt_CCRecognitionSlow = TriggerCreate("libGame_gt_CCRecognitionSlow_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionSlow, null, c_behaviorCategorySlow, c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Blind
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognitionBlind_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_blindedUnit;

    // Variable Initialization
    lv_blindedUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_blindedUnit, "GenericVehicleBehaviorOccupied") == true))) {
            return false;
        }

        if (!((UnitGetOwner(lv_blindedUnit) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(lv_blindedUnit) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_CCRecognitionCCReduction(lv_blindedUnit, EventUnitBehavior());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognitionBlind_Init () {
    libGame_gt_CCRecognitionBlind = TriggerCreate("libGame_gt_CCRecognitionBlind_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionBlind, null, c_behaviorCategoryUser8, c_unitBehaviorChangeIncrease);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Root
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognitionRoot_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_behavior;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_behavior = EventUnitBehavior();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_CCRecognitionCCReduction(lv_unit, lv_behavior);
    if ((UnitBehaviorCount(EventUnit(), "HeroGenericHasNoStatusBar") == 0)) {
        libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar(lv_behavior, UnitGetOwner(lv_unit));
    }

    UIAlert("YourHeroHasBeenRooted", UnitGetOwner(lv_unit), StringToText(""), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognitionRoot_Init () {
    libGame_gt_CCRecognitionRoot = TriggerCreate("libGame_gt_CCRecognitionRoot_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionRoot, null, c_behaviorCategoryUser5, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionRoot, null, c_behaviorCategoryUser5, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Stun
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognitionStun_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_behavior;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_behavior = EventUnitBehavior();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(EventUnit(), "HeroGenericHasNoStatusBar") == 0)) {
        libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar(lv_behavior, UnitGetOwner(lv_unit));
    }

    if ((libGame_gf_CCReductionStunReduceable(lv_behavior) == true)) {
        libGame_gf_CCRecognitionCCReduction(lv_unit, lv_behavior);
    }

    if (((lv_unit == libGame_gv_players[UnitGetOwner(lv_unit)].lv_heroUnit) || (lv_unit == libGame_gv_players[UnitGetOwner(lv_unit)].lv_activeVehicle))) {
        if ((lv_behavior == "Hooked")) {
            libUIUI_gf_FullscreenOverlaysCreateCCEffectFlashForPlayer(UnitGetOwner(lv_unit), 0.0);
        }
        else {
            libUIUI_gf_FullscreenOverlaysCreateCCEffectFlashForPlayer(UnitGetOwner(lv_unit), UnitBehaviorDuration(lv_unit, lv_behavior));
        }
    }

    UIAlert("YourHeroHasBeenStunned", UnitGetOwner(lv_unit), StringToText(""), null);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognitionStun_Init () {
    libGame_gt_CCRecognitionStun = TriggerCreate("libGame_gt_CCRecognitionStun_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionStun, null, c_behaviorCategoryStun, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionStun, null, c_behaviorCategoryStun, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Silenced
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognitionSilenced_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_behavior;
    fixed lv_vertOffset;
    fixed lv_horizOffset;

    // Variable Initialization
    lv_unit = EventUnit();
    lv_behavior = EventUnitBehavior();

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(EventUnit(), "HeroGenericHasNoStatusBar") == 0)) {
        libUIUI_gf_HeroConsoleUnitStatusBarsUpdateStunDeathBar(lv_behavior, UnitGetOwner(lv_unit));
    }

    lv_vertOffset = 2.0;
    lv_horizOffset = RandomFixed(-0.4, -0.6);
    if ((EventUnit() == libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit)) {
        libUIUI_gf_FullscreenOverlaysCreateCCEffectFlashForPlayer(UnitGetOwner(EventUnit()), UnitBehaviorDuration(EventUnit(), EventUnitBehavior()));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognitionSilenced_Init () {
    libGame_gt_CCRecognitionSilenced = TriggerCreate("libGame_gt_CCRecognitionSilenced_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionSilenced, null, c_behaviorCategoryUser7, c_unitBehaviorChangeCreate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionSilenced, null, c_behaviorCategoryUser7, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Stasis
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognitionStasis_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_vertOffset;
    fixed lv_horizOffset;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vertOffset = 1.5;
    lv_horizOffset = RandomFixed(0.4, 0.6);
    if ((EventUnit() == libGame_gv_players[UnitGetOwner(EventUnit())].lv_heroUnit)) {
        libUIUI_gf_FullscreenOverlaysCreateCCEffectFlashForPlayer(UnitGetOwner(EventUnit()), 0.0);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognitionStasis_Init () {
    libGame_gt_CCRecognitionStasis = TriggerCreate("libGame_gt_CCRecognitionStasis_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_CCRecognitionStasis, null, "VoidPrisonDisplay", c_unitBehaviorChangeCreate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Time Stop On
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognitionTimeStopOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_timeStopVictim;
    int lv_timeStopVictimPlayer;

    // Variable Initialization
    lv_timeStopVictim = EventUnit();
    lv_timeStopVictimPlayer = UnitGetOwner(lv_timeStopVictim);

    // Conditions
    if (testConds) {
        if (!((lv_timeStopVictimPlayer > 0))) {
            return false;
        }

        if (!((lv_timeStopVictimPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitHasBehaviorWithFlag(EventUnit(), c_unitBehaviorFlagTimeStop) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerPauseAllCooldowns(lv_timeStopVictimPlayer, true);
    PlayerPauseAllCharges(lv_timeStopVictimPlayer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognitionTimeStopOn_Init () {
    libGame_gt_CCRecognitionTimeStopOn = TriggerCreate("libGame_gt_CCRecognitionTimeStopOn_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionTimeStopOn, null, c_behaviorCategoryTimeStop, c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: CC Recognition - Time Stop Off
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CCRecognitionTimeStopOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_timeStopVictim;
    int lv_timeStopVictimPlayer;

    // Variable Initialization
    lv_timeStopVictim = EventUnit();
    lv_timeStopVictimPlayer = UnitGetOwner(lv_timeStopVictim);

    // Conditions
    if (testConds) {
        if (!((lv_timeStopVictimPlayer > 0))) {
            return false;
        }

        if (!((lv_timeStopVictimPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitHasBehaviorWithFlag(EventUnit(), c_unitBehaviorFlagTimeStop) != true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerPauseAllCooldowns(lv_timeStopVictimPlayer, false);
    PlayerPauseAllCharges(lv_timeStopVictimPlayer, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CCRecognitionTimeStopOff_Init () {
    libGame_gt_CCRecognitionTimeStopOff = TriggerCreate("libGame_gt_CCRecognitionTimeStopOff_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_CCRecognitionTimeStopOff, null, c_behaviorCategoryTimeStop, c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Recap - Hero Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_DeathRecapHeroDies_Func (bool testConds, bool runActions) {
    int auto23D24E5A_ae;
    int auto23D24E5A_ai;

    // Variable Declarations
    int lv_itManualSpawnHero;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto23D24E5A_ae = libCore_gv_dataHeroesManualSpawnHeroesCount;
    auto23D24E5A_ai = 1;
    lv_itManualSpawnHero = 1;
    for ( ; ( (auto23D24E5A_ai >= 0 && lv_itManualSpawnHero <= auto23D24E5A_ae) || (auto23D24E5A_ai <= 0 && lv_itManualSpawnHero >= auto23D24E5A_ae) ) ; lv_itManualSpawnHero += auto23D24E5A_ai ) {
        if ((libGame_gv_players[libGame_gf_HeroKilledPlayer()].lv_heroIndex == libCore_gv_dataHeroesManualSpawnHeroIDs[lv_itManualSpawnHero].lv_heroIndex)) {
            return true;
        }

    }
    libGame_gf_DeathRecapPopulateDeathRecapDataForPlayer(libGame_gf_HeroKilledUnit(), libGame_gf_HeroKilledPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_DeathRecapHeroDies_Init () {
    libGame_gt_DeathRecapHeroDies = TriggerCreate("libGame_gt_DeathRecapHeroDies_Func");
    libGame_gf_HeroKilled(libGame_gt_DeathRecapHeroDies);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Death Recap - Hero Respawn
//--------------------------------------------------------------------------------------------------
bool libGame_gt_DeathRecapHeroRespawn_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libUIUI_gf_DeathRecapShowHideToastButtonForPlayer(false, libGame_gf_HeroRespawnPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_DeathRecapHeroRespawn_Init () {
    libGame_gt_DeathRecapHeroRespawn = TriggerCreate("libGame_gt_DeathRecapHeroRespawn_Func");
    libGame_gf_HeroRespawn(libGame_gt_DeathRecapHeroRespawn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DEBUG - Manual Assign Award
//--------------------------------------------------------------------------------------------------
bool libGame_gt_DEBUGManualAssignAward_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    int lv_awardIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((StringWord(EventChatMessage(false), 2) == "")) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_2114147A"), true);
        return true;
    }
    else {
        lv_awardIndex = StringToInt(StringWord(EventChatMessage(false), 2));
    }
    if ((StringWord(EventChatMessage(false), 3) == "")) {
        lv_player = 1;
    }
    else {
        lv_player = StringToInt(StringWord(EventChatMessage(false), 3));
    }
    if ((lv_awardIndex == 0)) {
        libGame_gv_mVPManualOverride = lv_player;
        libGame_gv_playerAwardEligibility[lv_player][(lv_awardIndex)].lv_dEBUGManuallyForceAssigned = true;
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Game_CFC72273") + IntToText(lv_player)), true);
    }
    else {
        libGame_gf_SetAwardValueandWeight(lv_player, 250000.0, lv_awardIndex);
        libGame_gv_playerAwardEligibility[lv_player][(lv_awardIndex)].lv_dEBUGManuallyForceAssigned = true;
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_Game_1EE7296C") + IntToText(lv_player)), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_DEBUGManualAssignAward_Init () {
    libGame_gt_DEBUGManualAssignAward = TriggerCreate("libGame_gt_DEBUGManualAssignAward_Func");
    TriggerAddEventChatMessage(libGame_gt_DEBUGManualAssignAward, c_playerAny, "-assigneom", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: End of Match Awards Disabled Response
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EndofMatchAwardsDisabledResponse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_endofMatchAwardsDisabled = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EndofMatchAwardsDisabledResponse_Init () {
    libGame_gt_EndofMatchAwardsDisabledResponse = TriggerCreate("libGame_gt_EndofMatchAwardsDisabledResponse_Func");
    libGame_gf_EndofMatchAwardsDisabled(libGame_gt_EndofMatchAwardsDisabledResponse);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map-Specific Event Initialize Response
//--------------------------------------------------------------------------------------------------
bool libGame_gt_MapSpecificEventInitializeResponse_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_InitializeAwardData(libGame_ge_SecondaryAwards_MapSpecific, libGame_gf_MapSpecificAwardInitializeBadgeIndex(), libGame_gf_MapSpecificAwardInitializeName(), StringToText(""), libGame_gf_MapSpecificAwardInitializeSuffix(), libGame_gf_MapSpecificAwardInitializeBase(), libGame_gf_MapSpecificAwardInitializeGateByBase(), libGame_gf_MapSpecificAwardInitializePresentasRatio(), (libGame_gf_MapSpecificAwardInitializeScoreValue()), libGame_gf_MapSpecificAwardInitializeTooltip());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_MapSpecificEventInitializeResponse_Init () {
    libGame_gt_MapSpecificEventInitializeResponse = TriggerCreate("libGame_gt_MapSpecificEventInitializeResponse_Func");
    libGame_gf_MapSpecificAwardInitialize(libGame_gt_MapSpecificEventInitializeResponse);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Map-Specific Event Update Response
//--------------------------------------------------------------------------------------------------
bool libGame_gt_MapSpecificEventUpdateResponse_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_Player;
    fixed lv_Value;
    bool lv_isAdd;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_Player = libGame_gf_MapSpecificAwardUpdatePlayer();
    lv_Value = libGame_gf_MapSpecificAwardUpdateValue();
    lv_isAdd = libGame_gf_MapSpecificAwardUpdateIsAdd();
    if ((lv_isAdd == true)) {
        libGame_gf_AddtoAwardValue(lv_Player, lv_Value, libGame_ge_SecondaryAwards_MapSpecific);
    }
    else {
        libGame_gf_SetAwardValueandWeight(lv_Player, lv_Value, libGame_ge_SecondaryAwards_MapSpecific);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_MapSpecificEventUpdateResponse_Init () {
    libGame_gt_MapSpecificEventUpdateResponse = TriggerCreate("libGame_gt_MapSpecificEventUpdateResponse_Func");
    libGame_gf_MapSpecificAwardUpdate(libGame_gt_MapSpecificEventUpdateResponse);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add to Vengeance Targets
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AddtoVengeanceTargets_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingPlayer;
    int lv_killedPlayer;

    // Variable Initialization
    lv_killingPlayer = libGame_gf_HeroKilledKillingPlayer();
    lv_killedPlayer = libGame_gf_HeroKilledPlayer();

    // Conditions
    if (testConds) {
        if (!((lv_killedPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((lv_killingPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_vengeanceTargets[lv_killedPlayer][lv_killingPlayer] += 1;
    if ((libGame_gv_vengeanceTargets[lv_killingPlayer][lv_killedPlayer] > 0)) {
        libGame_gf_AddtoAwardValue(lv_killingPlayer, 1.0, libGame_ge_SecondaryAwards_Avenger);
        libGame_gv_vengeanceTargets[lv_killingPlayer][lv_killedPlayer] -= 1;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AddtoVengeanceTargets_Init () {
    libGame_gt_AddtoVengeanceTargets = TriggerCreate("libGame_gt_AddtoVengeanceTargets_Func");
    libGame_gf_HeroKilled(libGame_gt_AddtoVengeanceTargets);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Escape Tracking Low Health Detected
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EscapeTrackingLowHealthDetected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_escapingUnit;
    int lv_escapingPlayer;

    // Variable Initialization
    lv_escapingUnit = EventUnit();
    lv_escapingPlayer = UnitGetOwner(lv_escapingUnit);

    // Conditions
    if (testConds) {
        if (!((UnitTestState(lv_escapingUnit, c_unitStateHallucination) == false))) {
            return false;
        }

        if (!((lv_escapingPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitGroupHasUnit(libGame_gv_escapeTrackingHeroReducedtoLowHealthUnitGroup[lv_escapingPlayer], lv_escapingUnit) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupAdd(libGame_gv_escapeTrackingHeroReducedtoLowHealthUnitGroup[lv_escapingPlayer], lv_escapingUnit);
    libGame_gf_EscapeTrackingCreditEscapeAttempt(lv_escapingPlayer, lv_escapingUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EscapeTrackingLowHealthDetected_Init () {
    libGame_gt_EscapeTrackingLowHealthDetected = TriggerCreate("libGame_gt_EscapeTrackingLowHealthDetected_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_EscapeTrackingLowHealthDetected, null, "EndOfMatchAwardsHeroGenericLowHealthMonitor", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Event-Based Awards Data Report
//--------------------------------------------------------------------------------------------------
bool libGame_gt_EventBasedAwardsDataReport_Func (bool testConds, bool runActions) {
    int auto9E870A07_ae;

    // Variable Declarations
    int lv_iterator;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto9E870A07_ae = libCore_gv_bALMaxPlayers;
    lv_iterator = 1;
    for ( ; lv_iterator <= auto9E870A07_ae ; lv_iterator += 1 ) {
        if ((PlayerStatus(lv_iterator) == c_playerStatusUnused)) {
            continue;
        }

        libGame_gf_ScoreValuesReportRealValueAndLog(lv_iterator, "ClutchHealsPerformed", libGame_gv_playerAwardEligibility[lv_iterator][libGame_ge_SecondaryAwards_ClutchHealer].lv_value);
        libGame_gf_ScoreValuesReportRealValueAndLog(lv_iterator, "TimeStunningEnemyHeroes", libGame_gv_playerAwardEligibility[lv_iterator][libGame_ge_SecondaryAwards_Stunner].lv_value);
        libGame_gf_ScoreValuesReportRealValueAndLog(lv_iterator, "TimeRootingEnemyHeroes", libGame_gv_playerAwardEligibility[lv_iterator][libGame_ge_SecondaryAwards_Trapper].lv_value);
        libGame_gf_ScoreValuesReportRealValueAndLog(lv_iterator, "ProtectionGivenToAllies", libGame_gv_playerAwardEligibility[lv_iterator][libGame_ge_SecondaryAwards_Protector].lv_value);
        libGame_gf_ScoreValuesReportRealValueAndLog(lv_iterator, "TimeSilencingEnemyHeroes", libGame_gv_playerAwardEligibility[lv_iterator][libGame_ge_SecondaryAwards_Silencer].lv_value);
        libGame_gf_ScoreValuesReportRealValueAndLog(lv_iterator, "TeamfightDamageTaken", libGame_gv_playerAwardEligibility[lv_iterator][libGame_ge_SecondaryAwards_Guardian].lv_value);
        libGame_gf_ScoreValuesReportRealValueAndLog(lv_iterator, "TeamfightHealingDone", libGame_gv_playerAwardEligibility[lv_iterator][libGame_ge_SecondaryAwards_CombatMedic].lv_value);
        libGame_gf_ScoreValuesReportRealValueAndLog(lv_iterator, "EscapesPerformed", libGame_gv_playerAwardEligibility[lv_iterator][libGame_ge_SecondaryAwards_EscapeArtist].lv_value);
        libGame_gf_ScoreValuesReportRealValueAndLog(lv_iterator, "TeamfightEscapesPerformed", libGame_gv_playerAwardEligibility[lv_iterator][libGame_ge_SecondaryAwards_Daredevil].lv_value);
        libGame_gf_ScoreValuesReportRealValueAndLog(lv_iterator, "TeamfightHeroDamage", libGame_gv_playerAwardEligibility[lv_iterator][libGame_ge_SecondaryAwards_Scrapper].lv_value);
        libGame_gf_ScoreValuesReportRealValueAndLog(lv_iterator, "VengeancesPerformed", libGame_gv_playerAwardEligibility[lv_iterator][libGame_ge_SecondaryAwards_Avenger].lv_value);
        libGame_gf_ScoreValuesReportRealValueAndLog(lv_iterator, "OutnumberedDeaths", libGame_gv_outnumberedDeathCount[lv_iterator]);
        libGame_gf_ScoreValuesReportRealValueAndLog(lv_iterator, "TeamLevel", UnitXPGetCurrentLevel(libGame_gv_players[lv_iterator].lv_heroUnit, null));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_EventBasedAwardsDataReport_Init () {
    libGame_gt_EventBasedAwardsDataReport = TriggerCreate("libGame_gt_EventBasedAwardsDataReport_Func");
    libGame_gf_GameOverEvent(libGame_gt_EventBasedAwardsDataReport);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Track If Death Outnumbered
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TrackIfDeathOutnumbered_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_killedUnit;
    int lv_killedPlayer;

    // Variable Initialization
    lv_killedUnit = libGame_gf_HeroKilledUnit();
    lv_killedPlayer = UnitGetOwner(lv_killedUnit);

    // Conditions
    if (testConds) {
        if (!(((libGame_gv_teamfightTrackingNearbyAllyCount[lv_killedPlayer] + libGame_gv_nearbyAlliesRecentlyKilledinTeamfight[lv_killedPlayer]) < libGame_gv_teamfightTrackingNearbyEnemyCount[lv_killedPlayer]))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_outnumberedDeathCount[lv_killedPlayer] += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TrackIfDeathOutnumbered_Init () {
    libGame_gt_TrackIfDeathOutnumbered = TriggerCreate("libGame_gt_TrackIfDeathOutnumbered_Func");
    libGame_gf_HeroKilled(libGame_gt_TrackIfDeathOutnumbered);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Player Hero Death Grace Period
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TeamPlayerHeroDeathGracePeriod_Func (bool testConds, bool runActions) {
    unitgroup autoD84BC848_g;
    int autoD84BC848_u;
    unitgroup auto571F68DC_g;
    int auto571F68DC_u;

    // Variable Declarations
    unit lv_killedUnit;
    int lv_killedPlayer;
    unitgroup lv_allyUnitGroup;
    int lv_iterator;
    unit lv_unitIterator;
    int lv_ownerofUnitIterator;

    // Variable Initialization
    lv_killedUnit = libGame_gf_HeroKilledUnit();
    lv_killedPlayer = UnitGetOwner(lv_killedUnit);
    lv_allyUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_allyUnitGroup = UnitGroupSearch(null, lv_killedPlayer, UnitGetPosition(libGame_gv_players[lv_killedPlayer].lv_heroUnit), libGame_gv_teamfightTrackingRadius, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoD84BC848_g = lv_allyUnitGroup;
    autoD84BC848_u = 1;
    for ( ; autoD84BC848_u <= UnitGroupCount(autoD84BC848_g, c_unitCountAll) ; autoD84BC848_u += (lv_unitIterator == UnitGroupUnit(autoD84BC848_g, autoD84BC848_u)) ) {
        lv_unitIterator = UnitGroupUnit(autoD84BC848_g, autoD84BC848_u);
        lv_ownerofUnitIterator = UnitGetOwner(lv_unitIterator);
        if (((lv_unitIterator == libGame_gv_players[lv_ownerofUnitIterator].lv_heroUnit))) {
            libGame_gv_nearbyAlliesRecentlyKilledinTeamfight[UnitGetOwner(lv_unitIterator)] += 1;
        }

    }
    Wait(5.0, c_timeGame);
    auto571F68DC_g = lv_allyUnitGroup;
    auto571F68DC_u = 1;
    for ( ; auto571F68DC_u <= UnitGroupCount(auto571F68DC_g, c_unitCountAll) ; auto571F68DC_u += (lv_unitIterator == UnitGroupUnit(auto571F68DC_g, auto571F68DC_u)) ) {
        lv_unitIterator = UnitGroupUnit(auto571F68DC_g, auto571F68DC_u);
        lv_ownerofUnitIterator = UnitGetOwner(lv_unitIterator);
        if (((lv_unitIterator == libGame_gv_players[lv_ownerofUnitIterator].lv_heroUnit))) {
            libGame_gv_nearbyAlliesRecentlyKilledinTeamfight[UnitGetOwner(lv_unitIterator)] -= 1;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TeamPlayerHeroDeathGracePeriod_Init () {
    libGame_gt_TeamPlayerHeroDeathGracePeriod = TriggerCreate("libGame_gt_TeamPlayerHeroDeathGracePeriod_Func");
    libGame_gf_HeroKilled(libGame_gt_TeamPlayerHeroDeathGracePeriod);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Add Combat Medic Healing
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AddCombatMedicHealing_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_healedUnit;
    int lv_healedPlayer;
    int lv_healingPlayer;

    // Variable Initialization
    lv_healedUnit = EventUnit();
    lv_healedPlayer = UnitGetOwner(lv_healedUnit);
    lv_healingPlayer = UnitGetOwner(EventUnitHealLaunchUnit());

    // Conditions
    if (testConds) {
        if (!((lv_healedPlayer > 0))) {
            return false;
        }

        if (!((lv_healedPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((lv_healingPlayer > 0))) {
            return false;
        }

        if (!((lv_healingPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitFilterMatch(lv_healedUnit, lv_healingPlayer, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0)) == true))) {
            return false;
        }

        if (!((libGame_gv_teamfightTrackingNearbyAllyCount[lv_healingPlayer] >= (libGame_gv_teamfightTrackingCount - 1)))) {
            return false;
        }

        if (!((libGame_gv_teamfightTrackingNearbyEnemyCount[lv_healingPlayer] >= libGame_gv_teamfightTrackingCount))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_AddtoAwardValue(lv_healingPlayer, EventUnitHealAmount(), libGame_ge_SecondaryAwards_CombatMedic);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AddCombatMedicHealing_Init () {
    libGame_gt_AddCombatMedicHealing = TriggerCreate("libGame_gt_AddCombatMedicHealing_Func");
    TriggerAddEventUnitHealed(libGame_gt_AddCombatMedicHealing, null, c_unitVitalAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Teamfight Tracking
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TeamfightTracking_Func (bool testConds, bool runActions) {
    int auto4E466BEE_ae;

    // Variable Declarations
    int lv_playerIterator;
    unitgroup lv_allyUnitGroup;
    unitgroup lv_enemyUnitGroup;
    int lv_allyUnitCount;
    int lv_enemyUnitCount;

    // Variable Initialization
    lv_allyUnitGroup = UnitGroupEmpty();
    lv_enemyUnitGroup = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while ((libGame_gv_gameOver == false)) {
        auto4E466BEE_ae = libCore_gv_bALMaxPlayers;
        lv_playerIterator = 1;
        for ( ; lv_playerIterator <= auto4E466BEE_ae ; lv_playerIterator += 1 ) {
            if ((UnitIsValid(libGame_gv_players[lv_playerIterator].lv_heroUnit) == true)) {
                lv_allyUnitGroup = UnitGroupSearch(null, lv_playerIterator, UnitGetPosition(libGame_gv_players[lv_playerIterator].lv_heroUnit), libGame_gv_teamfightTrackingRadius, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                libGame_gv_teamfightTrackingNearbyAllyCount[lv_playerIterator] = UnitGroupCount(lv_allyUnitGroup, c_unitCountAll);
                lv_enemyUnitGroup = UnitGroupSearch(null, lv_playerIterator, UnitGetPosition(libGame_gv_players[lv_playerIterator].lv_heroUnit), libGame_gv_teamfightTrackingRadius, UnitFilter((1 << c_targetFilterHeroic), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral), (1 << (c_targetFilterDead - 32))), 0);
                libGame_gv_teamfightTrackingNearbyEnemyCount[lv_playerIterator] = UnitGroupCount(lv_enemyUnitGroup, c_unitCountAll);
            }

        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TeamfightTracking_Init () {
    libGame_gt_TeamfightTracking = TriggerCreate("libGame_gt_TeamfightTracking_Func");
    libGame_gf_GameOpenTimerStarted(libGame_gt_TeamfightTracking);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Silencer Data Collection
//--------------------------------------------------------------------------------------------------
bool libGame_gt_SilencerDataCollection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_triggeringUnit;
    int lv_caster;
    fixed lv_duration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringUnit = EventUnit();
    if (((UnitGetOwner(lv_triggeringUnit) <= 0) || (UnitGetOwner(lv_triggeringUnit) > libCore_gv_bALMaxPlayers) || (UnitTypeTestAttribute(UnitGetType(lv_triggeringUnit), c_unitAttributeHeroic) == false) || (UnitTestState(lv_triggeringUnit, c_unitStateHallucination) == true))) {
        return true;
    }

    lv_caster = UnitBehaviorEffectPlayer(lv_triggeringUnit, EventUnitBehavior(), c_effectPlayerCaster, 0);
    if (((lv_caster <= 0) || (lv_caster > libCore_gv_bALMaxPlayers))) {
        return true;
    }

    lv_duration = UnitBehaviorDurationTotal(lv_triggeringUnit, EventUnitBehavior());
    libGame_gf_AddtoAwardValue(lv_caster, lv_duration, libGame_ge_SecondaryAwards_Silencer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_SilencerDataCollection_Init () {
    libGame_gt_SilencerDataCollection = TriggerCreate("libGame_gt_SilencerDataCollection_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_SilencerDataCollection, null, c_behaviorCategoryUser7, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_SilencerDataCollection, null, c_behaviorCategoryUser7, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Protector Data Collection
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ProtectorDataCollection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;
    fixed lv_damageAbsorbed;
    unit lv_casterUnit;
    int lv_casterUnitOwner;
    unit lv_shieldedUnit;
    int lv_shieldedUnitOwner;

    // Variable Initialization
    lv_casterPlayer = UnitBehaviorEffectPlayer(EventUnit(), EventUnitBehavior(), c_effectPlayerCaster, 0);
    lv_damageAbsorbed = EventUnitDamageAbsorbed();
    lv_casterUnit = UnitBehaviorEffectUnit(lv_shieldedUnit, EventUnitBehavior(), c_effectUnitCaster, 0);
    lv_casterUnitOwner = UnitGetOwner(lv_casterUnit);
    lv_shieldedUnit = EventUnit();
    lv_shieldedUnitOwner = UnitGetOwner(lv_shieldedUnit);

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorHasFlag(EventUnitBehavior(), c_unitBehaviorFlagUser11) == true))) {
            return false;
        }

        if (!((UnitGetOwner(lv_shieldedUnit) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((lv_casterPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((lv_casterPlayer != lv_shieldedUnitOwner))) {
            return false;
        }

        if (!((UnitFilterMatch(lv_shieldedUnit, lv_shieldedUnitOwner, libCore_gv_filtersHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_AddtoAwardValue(lv_casterPlayer, lv_damageAbsorbed, libGame_ge_SecondaryAwards_Protector);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ProtectorDataCollection_Init () {
    libGame_gt_ProtectorDataCollection = TriggerCreate("libGame_gt_ProtectorDataCollection_Func");
    TriggerAddEventUnitDamageAbsorbed(libGame_gt_ProtectorDataCollection, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Stunner Data Collection
//--------------------------------------------------------------------------------------------------
bool libGame_gt_StunnerDataCollection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_triggeringUnit;
    int lv_caster;
    fixed lv_duration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringUnit = EventUnit();
    if (((UnitGetOwner(lv_triggeringUnit) <= 0) || (UnitGetOwner(lv_triggeringUnit) > libCore_gv_bALMaxPlayers) || (UnitTypeTestAttribute(UnitGetType(lv_triggeringUnit), c_unitAttributeHeroic) == false) || (UnitTestState(lv_triggeringUnit, c_unitStateHallucination) == true))) {
        return true;
    }

    lv_caster = UnitBehaviorEffectPlayer(lv_triggeringUnit, EventUnitBehavior(), c_effectPlayerCaster, 0);
    if (((lv_caster <= 0) || (lv_caster > libCore_gv_bALMaxPlayers))) {
        return true;
    }

    lv_duration = UnitBehaviorDurationTotal(lv_triggeringUnit, EventUnitBehavior());
    if ((lv_duration < 10.0)) {
        libGame_gf_AddtoAwardValue(lv_caster, lv_duration, libGame_ge_SecondaryAwards_Stunner);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_StunnerDataCollection_Init () {
    libGame_gt_StunnerDataCollection = TriggerCreate("libGame_gt_StunnerDataCollection_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_StunnerDataCollection, null, c_behaviorCategoryStun, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_StunnerDataCollection, null, c_behaviorCategoryStun, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Trapper Data Collection
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TrapperDataCollection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_triggeringUnit;
    int lv_caster;
    fixed lv_duration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringUnit = EventUnit();
    if (((UnitGetOwner(lv_triggeringUnit) <= 0) || (UnitGetOwner(lv_triggeringUnit) > libCore_gv_bALMaxPlayers) || (UnitTypeTestAttribute(UnitGetType(lv_triggeringUnit), c_unitAttributeHeroic) == false) || (UnitTestState(lv_triggeringUnit, c_unitStateHallucination) == true))) {
        return true;
    }

    lv_caster = UnitBehaviorEffectPlayer(lv_triggeringUnit, EventUnitBehavior(), c_effectPlayerCaster, 0);
    if (((lv_caster <= 0) || (lv_caster > libCore_gv_bALMaxPlayers))) {
        return true;
    }

    lv_duration = UnitBehaviorDurationTotal(lv_triggeringUnit, EventUnitBehavior());
    libGame_gf_AddtoAwardValue(lv_caster, lv_duration, libGame_ge_SecondaryAwards_Trapper);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TrapperDataCollection_Init () {
    libGame_gt_TrapperDataCollection = TriggerCreate("libGame_gt_TrapperDataCollection_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_TrapperDataCollection, null, c_behaviorCategoryUser5, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_TrapperDataCollection, null, c_behaviorCategoryUser5, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Clutch Healer Increment
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ClutchHealerIncrement_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_healedUnit;
    int lv_healedPlayer;
    int lv_healingPlayer;

    // Variable Initialization
    lv_healedUnit = EventUnit();
    lv_healedPlayer = UnitGetOwner(lv_healedUnit);
    lv_healingPlayer = UnitGetOwner(EventUnitHealLaunchUnit());

    // Conditions
    if (testConds) {
        if (!((lv_healedPlayer > 0))) {
            return false;
        }

        if (!((lv_healedPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((lv_healingPlayer > 0))) {
            return false;
        }

        if (!((lv_healingPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((lv_healingPlayer != lv_healedPlayer))) {
            return false;
        }

        if (!((libGame_gv_clutchHealerMonitorOn[lv_healingPlayer][lv_healedPlayer] == false))) {
            return false;
        }

        if (!((((UnitGetPropertyFixed(lv_healedUnit, c_unitPropLife, c_unitPropCurrent) - EventUnitHealAmount()) / UnitGetPropertyFixed(lv_healedUnit, c_unitPropLifeMax, c_unitPropCurrent)) < 0.1))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_clutchHealerMonitorOn[lv_healingPlayer][lv_healedPlayer] = true;
    Wait(5.0, c_timeGame);
    if ((UnitIsAlive(lv_healedUnit) == true) && (UnitBehaviorCount(lv_healedUnit, "Dead") == 0)) {
        libGame_gf_AddtoAwardValue(lv_healingPlayer, 1.0, libGame_ge_SecondaryAwards_ClutchHealer);
        libGame_gv_clutchHealerMonitorOn[lv_healingPlayer][lv_healedPlayer] = false;
    }
    else {
        libGame_gv_clutchHealerMonitorOn[lv_healingPlayer][lv_healedPlayer] = false;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ClutchHealerIncrement_Init () {
    libGame_gt_ClutchHealerIncrement = TriggerCreate("libGame_gt_ClutchHealerIncrement_Func");
    TriggerAddEventUnitHealed(libGame_gt_ClutchHealerIncrement, null, c_unitVitalAny, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hat Trick Award Counter
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HatTrickAwardCounter_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_hatTrickKillCount < 3))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killingPlayer = libGame_gf_HeroKilledKillingPlayer();
    libGame_gv_hatTrickKillCount += 1;
    if ((libGame_gv_hatTrickTentativeWinner == 0)) {
        libGame_gv_hatTrickTentativeWinner = lv_killingPlayer;
    }
    else if ((libGame_gv_hatTrickTentativeWinner != lv_killingPlayer)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }
    else if ((libGame_gv_hatTrickKillCount == 3)) {
        libGame_gf_SetAwardValueandWeight(libGame_gv_hatTrickTentativeWinner, 1.0, libGame_ge_SecondaryAwards_HatTrick);
        TriggerEnable(TriggerGetCurrent(), false);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HatTrickAwardCounter_Init () {
    libGame_gt_HatTrickAwardCounter = TriggerCreate("libGame_gt_HatTrickAwardCounter_Func");
    libGame_gf_HeroKilled(libGame_gt_HatTrickAwardCounter);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Secondary Award List
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeSecondaryAwardList_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_InitializeSecondaryAwardList();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeSecondaryAwardList_Init () {
    libGame_gt_InitializeSecondaryAwardList = TriggerCreate("libGame_gt_InitializeSecondaryAwardList_Func");
    libGame_gf_GameOpenTimerStarted(libGame_gt_InitializeSecondaryAwardList);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game
//--------------------------------------------------------------------------------------------------
bool libGame_gt_StartGame_Func (bool testConds, bool runActions) {
    int auto39C34241_ae;
    int auto39C34241_ai;
    int auto48C055FE_ae;
    int auto48C055FE_ai;
    int autoD9051020_ae;
    int autoD9051020_ai;

    // Variable Declarations
    int lv_treasureGoblinSpawnCheck;
    int lv_lunarNewYearSpawnCheck;
    int lv_itTeam;
    int lv_itPlayer;
    int lv_itManualSpawnHero;
    point lv_oldCorePosition;
    unit lv_oldCoreUnit;
    int lv_teamOfPlayer;
    int lv_heroIndexOfPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerAddEventUnitRegion(libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds, null, libCore_gv_mAPOrderBaseRegion, false);
    TriggerAddEventUnitRegion(libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds, null, libCore_gv_mAPChaosBaseRegion, false);
    TimerStart(libGame_gv_totalTime, c_timerDurationInfinite, false, c_timeGame);
    libUIUI_gf_UIUpdateTimeLabels();
    auto39C34241_ae = libCore_gv_bALMaxPlayers;
    auto39C34241_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto39C34241_ai >= 0 && lv_itPlayer <= auto39C34241_ae) || (auto39C34241_ai <= 0 && lv_itPlayer >= auto39C34241_ae) ) ; lv_itPlayer += auto39C34241_ai ) {
        lv_teamOfPlayer = libGame_gf_TeamNumberOfPlayer(lv_itPlayer);
        auto48C055FE_ae = libCore_gv_dataHeroesManualSpawnHeroesCount;
        auto48C055FE_ai = 1;
        lv_itManualSpawnHero = 1;
        for ( ; ( (auto48C055FE_ai >= 0 && lv_itManualSpawnHero <= auto48C055FE_ae) || (auto48C055FE_ai <= 0 && lv_itManualSpawnHero >= auto48C055FE_ae) ) ; lv_itManualSpawnHero += auto48C055FE_ai ) {
            lv_heroIndexOfPlayer = libCore_gf_GetIndexFromHero(PlayerHero(lv_itPlayer));
            if ((libCore_gv_dataHeroesManualSpawnHeroIDs[lv_itManualSpawnHero].lv_heroIndex == lv_heroIndexOfPlayer) && (libCore_gv_dataHeroesManualSpawnHeroIDs[lv_itManualSpawnHero].lv_core == true)) {
                libGame_gv_coreHeroPlayer = lv_itPlayer;
                TriggerExecute(libCore_gv_dataHeroesManualSpawnHeroIDs[lv_itManualSpawnHero].lv_coreSpawnTrigger, true, true);
            }

        }
    }
    autoD9051020_ae = libCore_gv_bALMaxTeams;
    autoD9051020_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (autoD9051020_ai >= 0 && lv_itTeam <= autoD9051020_ae) || (autoD9051020_ai <= 0 && lv_itTeam >= autoD9051020_ae) ) ; lv_itTeam += autoD9051020_ai ) {
        libUIUI_gf_TopBarSetUpCoreHealthBarforTeam(lv_itTeam);
    }
    libStEx_gf_AddAllInGameTips(true);
    while (!((libGame_gv_heroSpawnReady == true))) {
        Wait(0.0625, c_timeGame);
    }
    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_Tutorial1)) {
        Wait(0.0, c_timeGame);
    }
    else {
        SoundPlayForPlayer(SoundLink("Gen_HeroRespawn_GameStart", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(libGame_gv_heroSpawnDelay_C, c_timeGame);
    }
    libGame_gf_SpawnHeroesForBothTeams();
    while (!((libGame_gv_gateTimerReady == true))) {
        Wait(0.0625, c_timeGame);
    }
    if ((PlayerGroupCount(libStEx_gf_MapMechanicIntroPlayers()) > 0)) {
        Wait(2.0, c_timeGame);
    }

    TriggerExecute(libGame_gt_StartGameShowTowerRadius, true, false);
    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_AttackDefend)) {
        TimerStart(libGame_gv_openTheGatesTimer, libCore_gv_bALOpenTheGatesDelay_Brawl, false, c_timeGame);
    }
    else {
        TimerStart(libGame_gv_openTheGatesTimer, libCore_gv_bALOpenTheGatesDelay, false, c_timeGame);
    }
    libGame_gf_SendEventGameOpenTimerStarted();
    if ((libGDHL_gv_seasonalEvents.lv_teamGotEventThisGame[libGame_gv_teamOrderIndex_C] == true) && (libGDHL_gv_seasonalEvents.lv_teamGotEventThisGame[libGame_gv_teamChaosIndex_C] == true)) {
        TriggerExecute(libGDHL_gt_SeasonalEventAnnounceCountdownNoIntro, true, false);
    }
    else {
        TriggerExecute(libGame_gt_AnnounceCountdown, true, false);
    }
    TriggerExecute(libGame_gt_RunAnimations, true, false);
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_startGameButton, PlayerGroupAll(), true);
    if ((libSprt_gv_performanceTestPerformanceTestRunning == true)) {
        TriggerExecute(libSprt_gt_PerformanceTestSetHeroChoices, true, true);
    }

    TriggerExecute(libStEx_gt_TrainingModeInit, true, false);
    TriggerExecute(libSprt_gt_StatTrackingStartTrackingforAllPlayers, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_StartGame_Init () {
    libGame_gt_StartGame = TriggerCreate("libGame_gt_StartGame_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Picking Heroes (Normal Mode)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PickingHeroesNormalMode_Func (bool testConds, bool runActions) {
    int auto475683D8_ae;
    int auto475683D8_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libCore_gv_sYSGameMode == libCore_ge_GameModes_ArenaMode))) {
        return true;
    }

    libGame_gf_HeroSelectionSetBNetHeroAndSkinSelectionsForAllPlayers();
    auto475683D8_ae = libCore_gv_bALMaxPlayers;
    auto475683D8_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto475683D8_ai >= 0 && lv_itPlayer <= auto475683D8_ae) || (auto475683D8_ai <= 0 && lv_itPlayer >= auto475683D8_ae) ) ; lv_itPlayer += auto475683D8_ai ) {
        if ((PlayerStatus(lv_itPlayer) != c_playerStatusUnused)) {
            if ((libGame_gv_players[lv_itPlayer].lv_heroIndex == 0)) {
                if ((libSprt_gv_dEBUGHeroMimic == true)) {
                    libGame_gv_players[lv_itPlayer].lv_heroIndex = libGame_gv_players[1].lv_heroIndex;
                }
                else {
                    libGame_gv_players[lv_itPlayer].lv_heroIndex = libGame_gf_HeroSelectionRandomlyPickBasedOnEnemyComposition(lv_itPlayer);
                    if ((libGame_gv_players[lv_itPlayer].lv_heroIndex == 0)) {
                        libGame_gv_players[lv_itPlayer].lv_heroIndex = libGame_gf_HeroSelectionRandomlyPickAnyUnusedHero(lv_itPlayer, false, false);
                        if ((libGame_gv_players[lv_itPlayer].lv_heroIndex == 0)) {
                            libGame_gv_players[lv_itPlayer].lv_heroIndex = libGame_gf_HeroSelectionRandomlyPickAnyUnusedHero(lv_itPlayer, true, false);
                            if ((libGame_gv_players[lv_itPlayer].lv_heroIndex == 0)) {
                                TextExpressionSetToken("Param/Expression/lib_Game_A2F0F832", "A", IntToText(lv_itPlayer));
                                TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_A2F0F832"), true);
                                libGame_gv_players[lv_itPlayer].lv_heroIndex = libGame_gf_HeroSelectionRandomlyPickAnyUnusedHero(lv_itPlayer, true, true);
                            }

                        }

                    }

                }
                libCore_gf_DataLoadHeroDataIntoIndex(libCore_gf_GetHeroFromIndex(libGame_gv_players[lv_itPlayer].lv_heroIndex), lv_itPlayer);
                if ((PlayerType(lv_itPlayer) != c_playerTypeComputer)) {
                    libGame_gf_HeroSelectionRandomlyPickSkin(lv_itPlayer);
                    libGame_gf_HeroSelectionRandomlyPickMount(lv_itPlayer);
                }

            }

        }

    }
    libGame_gv_heroPickDone = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PickingHeroesNormalMode_Init () {
    libGame_gt_PickingHeroesNormalMode = TriggerCreate("libGame_gt_PickingHeroesNormalMode_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Game Show Tower Radius
//--------------------------------------------------------------------------------------------------
bool libGame_gt_StartGameShowTowerRadius_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((libStEx_gf_InTrainingMode() == true) || (libStEx_gf_InPracticeMode() == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    CatalogFieldValueSet(c_gameCatalogEffect, "TownHallRangeIndicatorApplyBehavior", "Chance", libCore_gv_cOMPUTER_TeamOrder, "0");
    CatalogFieldValueSet(c_gameCatalogEffect, "TownHallRangeIndicatorApplyBehavior", "Chance", libCore_gv_cOMPUTER_TeamChaos, "0");
    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, null, UnitFilter((1 << c_targetFilterArmored), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if (((libGame_gf_TownGetTownStructurePresetFromUnit(UnitGroupLoopCurrent()) == libGame_ge_TownStructureTypes_TownHall) || (libGame_gf_TownGetTownStructurePresetFromUnit(UnitGroupLoopCurrent()) == libGame_ge_TownStructureTypes_CannonTower))) {
            UnitBehaviorAddPlayer(UnitGroupLoopCurrent(), "TutorialTowerRangeBehavior", UnitGetOwner(UnitGroupLoopCurrent()), 1);
        }

    }
    UnitGroupLoopEnd();
    IntLoopBegin(1, libCore_gv_bALMaxTeams);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitBehaviorAddPlayer(libGame_gv_teams[IntLoopCurrent()].lv_core, "TutorialKingsCoreRangeBehavior", UnitGetOwner(libGame_gv_teams[IntLoopCurrent()].lv_core), 1);
    }
    IntLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_StartGameShowTowerRadius_Init () {
    libGame_gt_StartGameShowTowerRadius = TriggerCreate("libGame_gt_StartGameShowTowerRadius_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Announce Countdown
//--------------------------------------------------------------------------------------------------
bool libGame_gt_AnnounceCountdown_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_Tutorial1)) {
        while (!((libNtve_gf_PlayerInCinematicMode(1) == false) && (TimerIsPaused(libGame_gv_openTheGatesTimer) == false))) {
            Wait(0.5, c_timeGame);
        }
        TimerStart(libGame_gv_openTheGatesTimer, 25.0, false, c_timeGame);
    }
    else {
        libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 34.0, false);
        libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_GetReadyForBattle, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    }
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 12.125, false);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_BattleStartingIn, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 10.125, false);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown10, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 5.125, false);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown5, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown4, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown3, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown2, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    Wait(1.0, c_timeGame);
    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_allHeroPlayersPlusObserver, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_Countdown1, "", null, null, null, null, libGame_gv_announcement_NoDelay_C, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_AnnounceCountdown_Init () {
    libGame_gt_AnnounceCountdown = TriggerCreate("libGame_gt_AnnounceCountdown_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Run Animations
//--------------------------------------------------------------------------------------------------
bool libGame_gt_RunAnimations_Func (bool testConds, bool runActions) {
    int autoD06C5B74_ae;
    int autoD06C5B74_ai;
    int auto30240BB2_ae;
    int auto30240BB2_ai;
    int auto48A1495C_ae;
    int auto48A1495C_ai;
    int auto984DF843_ae;
    int auto984DF843_ai;
    int auto24B93EDA_ae;
    int auto24B93EDA_ai;
    int auto50A12BA3_ae;
    int auto50A12BA3_ai;
    int autoF87F17A3_ae;
    int autoF87F17A3_ai;
    int autoF1D282C2_ae;
    int autoF1D282C2_ai;

    // Variable Declarations
    int lv_town;
    int lv_structure;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_Tutorial1)) {
        ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core), "Signal CoreBuild");
        Wait(7.0, c_timeGame);
    }
    else {
        Wait(4.0, c_timeGame);
        ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core), "Signal CoreBuild");
        ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core), "Signal CoreBuild");
        Wait(12.0, c_timeGame);
    }
    autoD06C5B74_ae = libGame_gv_townTownCount;
    autoD06C5B74_ai = 1;
    lv_town = 1;
    for ( ; ( (autoD06C5B74_ai >= 0 && lv_town <= autoD06C5B74_ae) || (autoD06C5B74_ai <= 0 && lv_town >= autoD06C5B74_ae) ) ; lv_town += autoD06C5B74_ai ) {
        auto30240BB2_ae = libGame_gv_townTownData[lv_town].lv_structureCount;
        auto30240BB2_ai = 1;
        lv_structure = 1;
        for ( ; ( (auto30240BB2_ai >= 0 && lv_structure <= auto30240BB2_ae) || (auto30240BB2_ai <= 0 && lv_structure >= auto30240BB2_ae) ) ; lv_structure += auto30240BB2_ai ) {
            if ((UnitGetType(libGame_gv_townTownData[lv_town].lv_structureUnits[lv_structure]) == "TownTownHallL3")) {
                ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_townTownData[lv_town].lv_structureUnits[lv_structure]), "Signal PlayBuild");
            }

        }
    }
    Wait(2.0, c_timeGame);
    auto48A1495C_ae = libGame_gv_townTownCount;
    auto48A1495C_ai = 1;
    lv_town = 1;
    for ( ; ( (auto48A1495C_ai >= 0 && lv_town <= auto48A1495C_ae) || (auto48A1495C_ai <= 0 && lv_town >= auto48A1495C_ae) ) ; lv_town += auto48A1495C_ai ) {
        auto984DF843_ae = libGame_gv_townTownData[lv_town].lv_structureCount;
        auto984DF843_ai = 1;
        lv_structure = 1;
        for ( ; ( (auto984DF843_ai >= 0 && lv_structure <= auto984DF843_ae) || (auto984DF843_ai <= 0 && lv_structure >= auto984DF843_ae) ) ; lv_structure += auto984DF843_ai ) {
            if ((libGame_gv_townTownData[lv_town].lv_structureTypes[lv_structure] == libGame_ge_TownStructureTypes_CannonTower)) {
                ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_townTownData[lv_town].lv_structureUnits[lv_structure]), "Signal PlayBuild");
            }

        }
    }
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 13.0, false);
    auto24B93EDA_ae = libGame_gv_townTownCount;
    auto24B93EDA_ai = 1;
    lv_town = 1;
    for ( ; ( (auto24B93EDA_ai >= 0 && lv_town <= auto24B93EDA_ae) || (auto24B93EDA_ai <= 0 && lv_town >= auto24B93EDA_ae) ) ; lv_town += auto24B93EDA_ai ) {
        auto50A12BA3_ae = libGame_gv_townTownData[lv_town].lv_structureCount;
        auto50A12BA3_ai = 1;
        lv_structure = 1;
        for ( ; ( (auto50A12BA3_ai >= 0 && lv_structure <= auto50A12BA3_ae) || (auto50A12BA3_ai <= 0 && lv_structure >= auto50A12BA3_ae) ) ; lv_structure += auto50A12BA3_ai ) {
            if ((libGame_gv_townTownData[lv_town].lv_structureTypes[lv_structure] == libGame_ge_TownStructureTypes_Gate)) {
                ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_townTownData[lv_town].lv_structureUnits[lv_structure]), "Signal PrePlayBuild");
            }

        }
    }
    libNtve_gf_WaitForTimer(libGame_gv_openTheGatesTimer, 6.0, false);
    autoF87F17A3_ae = libGame_gv_townTownCount;
    autoF87F17A3_ai = 1;
    lv_town = 1;
    for ( ; ( (autoF87F17A3_ai >= 0 && lv_town <= autoF87F17A3_ae) || (autoF87F17A3_ai <= 0 && lv_town >= autoF87F17A3_ae) ) ; lv_town += autoF87F17A3_ai ) {
        autoF1D282C2_ae = libGame_gv_townTownData[lv_town].lv_structureCount;
        autoF1D282C2_ai = 1;
        lv_structure = 1;
        for ( ; ( (autoF1D282C2_ai >= 0 && lv_structure <= autoF1D282C2_ae) || (autoF1D282C2_ai <= 0 && lv_structure >= autoF1D282C2_ae) ) ; lv_structure += autoF1D282C2_ai ) {
            if ((libGame_gv_townTownData[lv_town].lv_structureTypes[lv_structure] == libGame_ge_TownStructureTypes_Gate)) {
                ActorSend(libNtve_gf_MainActorofUnit(libGame_gv_townTownData[lv_town].lv_structureUnits[lv_structure]), "Signal PlayBuild");
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_RunAnimations_Init () {
    libGame_gt_RunAnimations = TriggerCreate("libGame_gt_RunAnimations_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Open The Gates (Open The Gates Timer Expires)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_OpenTheGatesOpenTheGatesTimerExpires_Func (bool testConds, bool runActions) {
    int autoDDF95E47_ae;
    int autoDDF95E47_ai;
    unitgroup auto157DB87C_g;
    int auto157DB87C_u;
    unitgroup auto4CAD3EA8_g;
    int auto4CAD3EA8_u;

    // Variable Declarations
    int lv_itPlayer;
    unit lv_itBlocker;
    bool lv_orderVOPlayed;
    bool lv_chaosVOPlayed;
    playergroup lv_orderVOGroup;
    playergroup lv_chaosVOGroup;

    // Variable Initialization
    lv_orderVOGroup = PlayerGroupEmpty();
    lv_chaosVOGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameStarted == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_gameStarted = true;
    TriggerEnable(libGame_gt_ConfineHeroesToBaseUntilCountdownEnds, false);
    TriggerEnable(libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds, false);
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_startGameButton, PlayerGroupAll(), false);
    DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_spawnCreepCampsButton, PlayerGroupAll(), true);
    AINotifyGameStarted();
    StatEventCreate("GatesOpen");
    StatEventSend(StatEventLastCreated());
    TimerStart(libGame_gv_gameTimer, c_timerDurationInfinite, false, c_timeGame);
    if ((TimerGetElapsed(libGame_gv_matchGameplayTimer) > 0.0)) {
        TimerPause(libGame_gv_matchGameplayTimer, false);
    }
    else {
        TimerStart(libGame_gv_matchGameplayTimer, c_timerDurationInfinite, false, c_timeGame);
    }
    TimerStart(libGame_gv_minionSpawnStartTimer, libCore_gv_bALSpawnMinionsDelay, false, c_timeGame);
    TriggerEnable(libMapM_gt_JungleCreepCampRespawnTimerExpires, true);
    TriggerExecute(libMapM_gt_StartJungleCampTimers, true, false);
    TimerStart(libGame_gv_jungleWatchTowerStartTimer, libCore_gv_bALJungleWatchTowerActivationDelay, false, c_timeGame);
    TimerStart(libGame_gv_scalingTimer, libGame_gv_bALScalingTimerDuration, false, c_timeGame);
    TimerStart(libGame_gv_xPTrickleStartTimer, libCore_gv_bALXPTrickleStartDelay, false, c_timeGame);
    autoDDF95E47_ae = libCore_gv_bALMaxPlayers;
    autoDDF95E47_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoDDF95E47_ai >= 0 && lv_itPlayer <= autoDDF95E47_ae) || (autoDDF95E47_ai <= 0 && lv_itPlayer >= autoDDF95E47_ae) ) ; lv_itPlayer += autoDDF95E47_ai ) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_itPlayer, "GatesAreOpen", 1);
    }
    if ((libGame_gv_afk_UseAFKSystem == true)) {
        if ((libGame_gv_afk_UseBrawlAFKSystem == false)) {
            libGame_gf_AfkStartAfkWarningSystem(false);
        }
        else {
            libGame_gf_AFKBrawlStartAfkWarningSystem(true);
        }
    }

    SoundPlayForPlayer(SoundLink("GameStart", -1), c_maxPlayers, PlayerGroupAll(), 40.0, 0.0);
    if ((libCore_gv_sYSGameMode != libCore_ge_GameModes_ArenaMode)) {
        auto157DB87C_g = UnitGroup("StormGameStartPathingBlocker", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto157DB87C_u = 1;
        for ( ; auto157DB87C_u <= UnitGroupCount(auto157DB87C_g, c_unitCountAll) ; auto157DB87C_u += (lv_itBlocker == UnitGroupUnit(auto157DB87C_g, auto157DB87C_u)) ) {
            lv_itBlocker = UnitGroupUnit(auto157DB87C_g, auto157DB87C_u);
            UnitRemove(lv_itBlocker);
        }
        auto4CAD3EA8_g = UnitGroup("StormGameStartPathingBlockerDiagonal", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto4CAD3EA8_u = 1;
        for ( ; auto4CAD3EA8_u <= UnitGroupCount(auto4CAD3EA8_g, c_unitCountAll) ; auto4CAD3EA8_u += (lv_itBlocker == UnitGroupUnit(auto4CAD3EA8_g, auto4CAD3EA8_u)) ) {
            lv_itBlocker = UnitGroupUnit(auto4CAD3EA8_g, auto4CAD3EA8_u);
            UnitRemove(lv_itBlocker);
        }
    }

    if ((libCore_gv_sYSDataMiningListenForData == true)) {
        libSprt_gf_DataMiningTurnDataMiningTriggersOnOff(true);
    }

    TimerStart(libGame_gv_towerMainCoreAlertTimer, libGame_gv_towerCoreUnderAttackScanPeriod, false, c_timeGame);
    Wait(1.0, c_timeGame);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false), lv_orderVOGroup);
    PlayerGroupAdd(lv_orderVOGroup, libCore_gv_oBSERVER_ObserverUIPlayer);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false), lv_chaosVOGroup);
    if (((libGDHL_gv_seasonalEvents.lv_failVOCompleted[libGame_gv_teamOrderIndex_C] == true) || (libGDHL_gv_seasonalEvents.lv_successVOCompleted[libGame_gv_teamOrderIndex_C] == true) || (libGDHL_gv_seasonalEvents.lv_teamGotEventThisGame[libGame_gv_teamOrderIndex_C] == false))) {
        lv_orderVOPlayed = true;
        libGame_gf_AnnouncementAddItemForPlayerGroup(lv_orderVOGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_LetTheBattleBegin, "BattleBegin", StringExternal("Param/Value/lib_Game_CD24FF66"), null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
    }

    if (((libGDHL_gv_seasonalEvents.lv_failVOCompleted[libGame_gv_teamChaosIndex_C] == true) || (libGDHL_gv_seasonalEvents.lv_successVOCompleted[libGame_gv_teamChaosIndex_C] == true) || (libGDHL_gv_seasonalEvents.lv_teamGotEventThisGame[libGame_gv_teamChaosIndex_C] == false))) {
        lv_chaosVOPlayed = true;
        libGame_gf_AnnouncementAddItemForPlayerGroup(lv_chaosVOGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_LetTheBattleBegin, "BattleBegin", StringExternal("Param/Value/lib_Game_79C9784F"), null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
    }

    if (((lv_orderVOPlayed == false) || (lv_chaosVOPlayed == false))) {
        while (true) {
            if (((lv_orderVOPlayed == true) && (lv_chaosVOPlayed == true))) {
                break;
            }
            else {
                if (((lv_orderVOPlayed == false) && ((libGDHL_gv_seasonalEvents.lv_failVOCompleted[libGame_gv_teamOrderIndex_C] == true) || (libGDHL_gv_seasonalEvents.lv_successVOCompleted[libGame_gv_teamOrderIndex_C] == true)))) {
                    libGame_gf_AnnouncementAddItemForPlayerGroup(lv_orderVOGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_LetTheBattleBegin, "BattleBegin", StringExternal("Param/Value/lib_Game_AAFB3A44"), null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
                    lv_orderVOPlayed = true;
                }

                if (((lv_chaosVOPlayed == false) && ((libGDHL_gv_seasonalEvents.lv_failVOCompleted[libGame_gv_teamChaosIndex_C] == true) || (libGDHL_gv_seasonalEvents.lv_successVOCompleted[libGame_gv_teamChaosIndex_C] == true)))) {
                    libGame_gf_AnnouncementAddItemForPlayerGroup(lv_chaosVOGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_LetTheBattleBegin, "BattleBegin", StringExternal("Param/Value/lib_Game_7744FF12"), null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
                    lv_chaosVOPlayed = true;
                }

            }
            Wait(1.0, c_timeGame);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_OpenTheGatesOpenTheGatesTimerExpires_Init () {
    libGame_gt_OpenTheGatesOpenTheGatesTimerExpires = TriggerCreate("libGame_gt_OpenTheGatesOpenTheGatesTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_OpenTheGatesOpenTheGatesTimerExpires, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Spawn Minions (Minion Spawn Start Timer Expires)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_SpawnMinionsMinionSpawnStartTimerExpires_Func (bool testConds, bool runActions) {
    int auto2E1904D7_ae;
    int auto2E1904D7_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto2E1904D7_ae = libCore_gv_bALMaxPlayers;
    auto2E1904D7_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto2E1904D7_ai >= 0 && lv_itPlayer <= auto2E1904D7_ae) || (auto2E1904D7_ai <= 0 && lv_itPlayer >= auto2E1904D7_ae) ) ; lv_itPlayer += auto2E1904D7_ai ) {
        libNtve_gf_SetUpgradeLevelForPlayer(lv_itPlayer, "MinionsAreSpawning", 1);
    }
    if ((libCore_gv_sYSMinionAI == true)) {
        libGame_gf_MinionStartStopMinionSystem(true);
        if ((libCore_gv_sYSMinionSpawningOn == true)) {
            libGame_gf_MinionStartStopMinionSpawnCycle(true);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_SpawnMinionsMinionSpawnStartTimerExpires_Init () {
    libGame_gt_SpawnMinionsMinionSpawnStartTimerExpires = TriggerCreate("libGame_gt_SpawnMinionsMinionSpawnStartTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_SpawnMinionsMinionSpawnStartTimerExpires, libGame_gv_minionSpawnStartTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Turn On XP Trickle (XP Trickle Start Timer Expires)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libGame_gt_XPTrickle, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires_Init () {
    libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires = TriggerCreate("libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires, libGame_gv_xPTrickleStartTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Confine Heroes To Base Until Countdown Ends
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ConfineHeroesToBaseUntilCountdownEnds_Func (bool testConds, bool runActions) {
    int auto18BC8C63_ae;
    int auto18BC8C63_ai;
    int auto6A2E3FEE_n;
    int auto6A2E3FEE_i;

    // Variable Declarations
    const fixed lv_bufferDistance = 0.25;
    int lv_player;
    unit lv_heroUnit;
    region lv_region;
    point lv_targetPoint;
    point lv_targetPoint2;
    point lv_targetPoint3;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto18BC8C63_ae = libCore_gv_bALMaxPlayers;
    auto18BC8C63_ai = 1;
    lv_player = 1;
    for ( ; ( (auto18BC8C63_ai >= 0 && lv_player <= auto18BC8C63_ae) || (auto18BC8C63_ai <= 0 && lv_player >= auto18BC8C63_ae) ) ; lv_player += auto18BC8C63_ai ) {
        lv_heroUnit = libGame_gv_players[lv_player].lv_heroUnit;
        if ((UnitIsAlive(lv_heroUnit) == true)) {
            if ((libGame_gv_players[lv_player].lv_faction == libGame_ge_Faction_Order)) {
                lv_region = libCore_gv_mAPOrderBaseRegion;
            }
            else {
                lv_region = libCore_gv_mAPChaosBaseRegion;
            }
            if ((lv_region == null)) {
                return true;
            }

            if ((libNtve_gf_UnitInRegion(lv_heroUnit, lv_region) == false)) {
                lv_targetPoint = UnitGetPosition(lv_heroUnit);
                lv_targetPoint2 = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint, lv_bufferDistance, libGame_gv_players[lv_player].lv_spawnPoint);
                lv_targetPoint3 = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint2, lv_bufferDistance, libGame_gv_players[lv_player].lv_spawnPoint);
                auto6A2E3FEE_n = 80;
                for (auto6A2E3FEE_i = 1; auto6A2E3FEE_i <= auto6A2E3FEE_n; auto6A2E3FEE_i += 1) {
                    if (((PointPathingPassable(lv_targetPoint) == false) || (PointPathingPassable(lv_targetPoint2) == false) || (PointPathingPassable(lv_targetPoint3) == false) || (RegionContainsPoint(lv_region, lv_targetPoint) == false))) {
                        lv_targetPoint = lv_targetPoint2;
                        lv_targetPoint2 = lv_targetPoint3;
                        lv_targetPoint3 = libNtve_gf_PointOffsetTowardsPoint(lv_targetPoint2, lv_bufferDistance, libGame_gv_players[lv_player].lv_spawnPoint);
                    }
                    else {
                        break;
                    }
                }
                if (((PointPathingPassable(lv_targetPoint) == false) || (PointPathingPassable(lv_targetPoint2) == false) || (PointPathingPassable(lv_targetPoint3) == false) || (RegionContainsPoint(lv_region, lv_targetPoint) == false))) {
                    lv_targetPoint2 = libGame_gv_players[lv_player].lv_spawnPoint;
                }

                UnitSetPosition(lv_heroUnit, lv_targetPoint2, true);
                UnitIssueOrder(lv_heroUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                libNtve_gf_UIErrorMessage(libCore_gv_playerGroupFromPlayer[lv_player], StringExternal("Param/Value/lib_Game_66560905"), SoundLink("UI_GenericError", -1));
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ConfineHeroesToBaseUntilCountdownEnds_Init () {
    libGame_gt_ConfineHeroesToBaseUntilCountdownEnds = TriggerCreate("libGame_gt_ConfineHeroesToBaseUntilCountdownEnds_Func");
    TriggerAddEventTimePeriodic(libGame_gt_ConfineHeroesToBaseUntilCountdownEnds, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Confine Other Stuff To Base Until Countdown Ends
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if (((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeHeroic) == false) || (UnitTestState(EventUnit(), c_unitStateHallucination) == true) || (UnitHasBehavior2(EventUnit(), "Precursor") == true)) && (UnitFilterMatch(EventUnit(), 0, UnitFilter((1 << c_targetFilterItem), 0, 0, 0)) == false) && (UnitGetType(EventUnit()) != "StitchesHookMissile") && (UnitGetType(EventUnit()) != "StitchesHookMissedReturnMissile") && (UnitGetType(EventUnit()) != "AbathurSymbiote") && (UnitGetType(EventUnit()) != "MurkyPufferfishMissile") && (UnitGetType(EventUnit()) != "MurkyPufferfishNoBounceMissile")) {
        UnitKill(EventUnit());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds_Init () {
    libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds = TriggerCreate("libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Determine Winning Team
//--------------------------------------------------------------------------------------------------
bool libGame_gt_DetermineWinningTeam_Func (bool testConds, bool runActions) {
    unitgroup auto08265F96_g;
    int auto08265F96_u;
    unitgroup auto377877B3_g;
    int auto377877B3_u;
    unitgroup auto1DE78EA4_g;
    int auto1DE78EA4_u;
    playergroup autoB1212857_g;
    int autoB1212857_p;

    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;
    bool[libCore_gv_bALMaxTeams + 1] lv_teamCoreAlive;
    int lv_winningTeam;

    // Variable Initialization
    lv_winningTeam = -1;

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_gameOver_DetermineWinningTeamHasRun == true)) {
        return true;
    }

    libGame_gv_gameOver_DetermineWinningTeamHasRun = true;
    if ((libGame_gv_teamOrderCoreAlive == true)) {
        lv_winningTeam = libGame_gv_teamOrderIndex_C;
    }
    else {
        lv_winningTeam = libGame_gv_teamChaosIndex_C;
    }
    if ((lv_winningTeam == -1)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_FADF76DE"), true);
        return true;
    }

    TriggerQueueClear(c_triggerQueueRemove);
    TransmissionClearAll();
    libSond_gf_MuteMostSoundChannelsForGameOverState(true);
    libGame_gf_PlayGameOverStinger(lv_winningTeam);
    auto08265F96_g = libGame_gv_heroes;
    auto08265F96_u = 1;
    for ( ; auto08265F96_u <= UnitGroupCount(auto08265F96_g, c_unitCountAll) ; auto08265F96_u += (lv_itUnit == UnitGroupUnit(auto08265F96_g, auto08265F96_u)) ) {
        lv_itUnit = UnitGroupUnit(auto08265F96_g, auto08265F96_u);
        if ((UnitGetType(lv_itUnit) == "HeroTassadar")) {
            UnitBehaviorAdd(lv_itUnit, "TassadarDistortionBeamSuppression", lv_itUnit, 1);
        }

        if ((UnitGetType(lv_itUnit) == "HeroDiablo")) {
            UnitBehaviorRemove(lv_itUnit, "DiabloLightningBreathActive", 1);
        }

    }
    if ((lv_winningTeam > 0)) {
        auto377877B3_g = UnitGroupAlliance(libGame_gv_teams[lv_winningTeam].lv_nPCPlayer, c_unitAllianceAlly, RegionCircle(UnitGetPosition(libGame_gv_teams[libGame_gf_EnemyTeam(lv_winningTeam)].lv_core), 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto377877B3_u = 1;
        for ( ; auto377877B3_u <= UnitGroupCount(auto377877B3_g, c_unitCountAll) ; auto377877B3_u += (lv_itUnit == UnitGroupUnit(auto377877B3_g, auto377877B3_u)) ) {
            lv_itUnit = UnitGroupUnit(auto377877B3_g, auto377877B3_u);
            UnitBehaviorRemove(lv_itUnit, "Mounted", 1);
            libNtve_gf_SendActorMessageToUnit(lv_itUnit, "Signal GameWon");
        }
        auto1DE78EA4_g = UnitGroupAlliance(libGame_gv_teams[lv_winningTeam].lv_nPCPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(libGame_gv_teams[libGame_gf_EnemyTeam(lv_winningTeam)].lv_core), 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto1DE78EA4_u = 1;
        for ( ; auto1DE78EA4_u <= UnitGroupCount(auto1DE78EA4_g, c_unitCountAll) ; auto1DE78EA4_u += (lv_itUnit == UnitGroupUnit(auto1DE78EA4_g, auto1DE78EA4_u)) ) {
            lv_itUnit = UnitGroupUnit(auto1DE78EA4_g, auto1DE78EA4_u);
            UnitBehaviorRemove(lv_itUnit, "Mounted", 1);
            libNtve_gf_SendActorMessageToUnit(lv_itUnit, "Signal GameLost");
        }
    }

    TriggerExecute(libSprt_gt_DEBUGInspectTheBalanceProbebalanceprobe, true, false);
    libGDHL_gf_SeasonalEventDetermineIfVictorySequenceShouldPlay(lv_winningTeam);
    Wait(libGame_gv_gameOver_CameraPanTime_C, c_timeGame);
    Wait(libGame_gv_gameOver_CoreAnimationWaitTime_C, c_timeGame);
    autoB1212857_g = PlayerGroupAll(); 
    autoB1212857_p = 1;
    for ( ; autoB1212857_p <= PlayerGroupCount(autoB1212857_g) ; autoB1212857_p += (lv_itPlayer == PlayerGroupPlayer(autoB1212857_g, autoB1212857_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoB1212857_g, autoB1212857_p);
        libGame_gf_AnnouncementClearQueueForPlayer(lv_itPlayer);
    }
    libGame_gv_announcement_SystemEnabled = false;
    libGame_gf_PlayVictoryDefeatVO(lv_winningTeam);
    libGame_gf_GameOver(lv_winningTeam);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_DetermineWinningTeam_Init () {
    libGame_gt_DetermineWinningTeam = TriggerCreate("libGame_gt_DetermineWinningTeam_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Update Stats, Award XP, Make Annouccements CORE
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathUpdateStatsAwardXPMakeAnnouccementsCORE_Func (bool testConds, bool runActions) {
    playergroup autoE9AC1C24_g;
    int autoE9AC1C24_p;
    playergroup autoC94524FE_g;
    int autoC94524FE_p;

    // Variable Declarations
    unit lv_deadHero;
    int lv_killingPlayer;
    int lv_itPlayer;
    unit lv_itUnit;
    int lv_deadPlayer;
    int lv_deadPlayerTeam;
    playergroup lv_killingTeamGroup;
    unitgroup lv_nearbyUnits;
    playergroup lv_awardGroup;
    playergroup lv_deadPlayerTeamGroup;
    playergroup lv_killingGroup;
    int lv_killingFaction;
    point lv_deadHeroPosition;

    // Variable Initialization
    lv_killingTeamGroup = PlayerGroupEmpty();
    lv_nearbyUnits = UnitGroupEmpty();
    lv_awardGroup = PlayerGroupEmpty();
    lv_deadPlayerTeamGroup = PlayerGroupEmpty();
    lv_killingGroup = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killingPlayer = libGame_gf_HeroKilledKillingPlayer();
    lv_deadHero = libGame_gf_HeroKilledUnit();
    if ((libGame_gv_heroDeath_UpdateStats == false)) {
        return true;
    }

    if (((lv_killingPlayer < 1) || (lv_killingPlayer > libCore_gv_bALMaxEnginePlayerCount))) {
        TextExpressionSetToken("Param/Expression/lib_Game_1A6F3F77", "A", IntToText(lv_killingPlayer));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_1A6F3F77"), true);
        return true;
    }

    lv_deadPlayer = UnitGetOwner(lv_deadHero);
    lv_deadPlayerTeam = libGame_gf_TeamNumberOfPlayer(lv_deadPlayer);
    lv_deadHeroPosition = UnitGetPosition(lv_deadHero);
    UIAlert("YourHeroHasDied", lv_deadPlayer, StringToText(""), null);
    lv_deadPlayerTeamGroup = libGame_gf_AlliedPlayerGroupOfPlayer(lv_deadPlayer);
    lv_killingTeamGroup = libGame_gf_EnemyPlayerGroupOfPlayer(lv_deadPlayer);
    if ((lv_deadPlayerTeam == libGame_gv_teamOrderIndex_C)) {
        lv_killingFaction = libGame_ge_Faction_Chaos;
    }
    else {
        lv_killingFaction = libGame_ge_Faction_Order;
    }
    libGame_gf_AfkPauseWarningTimerForPlayer(lv_deadPlayer, true);
    autoE9AC1C24_g = lv_killingTeamGroup; 
    autoE9AC1C24_p = 1;
    for ( ; autoE9AC1C24_p <= PlayerGroupCount(autoE9AC1C24_g) ; autoE9AC1C24_p += (lv_itPlayer == PlayerGroupPlayer(autoE9AC1C24_g, autoE9AC1C24_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoE9AC1C24_g, autoE9AC1C24_p);
        if ((lv_itPlayer != libCore_gv_cOMPUTER_TeamOrder) && (lv_itPlayer != libCore_gv_cOMPUTER_TeamChaos)) {
            PlayerGroupAdd(lv_awardGroup, lv_itPlayer);
        }

    }
    lv_killingGroup = libGame_gf_HeroDeathGetKillingGroupFromKillingTeamGroupAndDeadUnit(lv_killingTeamGroup, lv_killingPlayer, lv_deadHero);
    if (((PlayerGroupCount(lv_killingGroup) > 0) || (lv_killingPlayer == libCore_gv_cOMPUTER_TeamOrder) || (lv_killingPlayer == libCore_gv_cOMPUTER_TeamChaos))) {
        libGame_gf_HeroDeathUpdateTeamStats(lv_deadHero, lv_killingFaction);
    }

    libGame_gf_HeroDeathAwardXP(lv_killingPlayer, lv_deadHero, lv_awardGroup, lv_killingGroup, true);
    libGame_gf_HeroDeathUpdatePlayerStats(lv_deadHero, lv_killingPlayer, lv_killingTeamGroup, lv_killingGroup);
    libGame_gf_HeroDeathDeadTeamAnnouncements(lv_deadHero, lv_deadPlayerTeamGroup, lv_killingFaction);
    libGame_gv_players[lv_deadPlayer].lv_killingSpreeCount = 0;
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_deadPlayer, "KillStreak", libGame_gv_players[lv_deadPlayer].lv_killingSpreeCount);
    if ((libGame_gv_firstBloodAvailable == true)) {
        libGame_gv_firstBloodAvailable = false;
    }

    StatEventCreate("PlayerDeath");
    StatEventAddDataInt(StatEventLastCreated(), "PlayerID", lv_deadPlayer);
    StatEventAddDataFixed(StatEventLastCreated(), "PositionX", PointGetX(UnitGetPosition(lv_deadHero)));
    StatEventAddDataFixed(StatEventLastCreated(), "PositionY", PointGetY(UnitGetPosition(lv_deadHero)));
    if ((PlayerGroupCount(lv_killingGroup) > 0)) {
        autoC94524FE_g = lv_killingGroup; 
        autoC94524FE_p = 1;
        for ( ; autoC94524FE_p <= PlayerGroupCount(autoC94524FE_g) ; autoC94524FE_p += (lv_itPlayer == PlayerGroupPlayer(autoC94524FE_g, autoC94524FE_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(autoC94524FE_g, autoC94524FE_p);
            StatEventAddDataInt(StatEventLastCreated(), "KillingPlayer", lv_itPlayer);
            if ((UnitTypeTestAttribute(UnitGetType(lv_deadHero), c_unitAttributeSummoned) == false)) {
                libGame_gf_SendEventHeroParticipatedInTakedown(lv_killingPlayer, lv_itPlayer, lv_deadPlayer, lv_deadHero, lv_deadHeroPosition);
            }

        }
    }
    else {
        StatEventAddDataInt(StatEventLastCreated(), "KillingPlayer", 0);
    }
    StatEventSend(StatEventLastCreated());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathUpdateStatsAwardXPMakeAnnouccementsCORE_Init () {
    libGame_gt_HeroDeathUpdateStatsAwardXPMakeAnnouccementsCORE = TriggerCreate("libGame_gt_HeroDeathUpdateStatsAwardXPMakeAnnouccementsCORE_Func");
    libGame_gf_HeroKilled(libGame_gt_HeroDeathUpdateStatsAwardXPMakeAnnouccementsCORE);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Diablo Participated In Takedown
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathDiabloParticipatedInTakedown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_behaviorCountToAdd;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit) == "HeroDiablo"))) {
            return false;
        }

        if (!((UnitHasBehavior2(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "DiabloBlackSoulstoneTokenCounter") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_DiabloEssenceOfTheSlainProc(libGame_gf_HeroParticipatedInTakedownKillingPlayer(), libGame_gf_HeroParticipatedInTakedownKilledHero());
    if ((UnitBehaviorCount(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "DiabloBlackSoulstoneTokenCounter") < 100)) {
        UnitCreateEffectUnit(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "DiabloBlackSoulstoneAdd10TokenSet", libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit);
        UnitCreateEffectUnit(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "DiabloBlackSoulstoneHeroTargetLaunchMissile", libGame_gf_HeroParticipatedInTakedownKilledHero());
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathDiabloParticipatedInTakedown_Init () {
    libGame_gt_HeroDeathDiabloParticipatedInTakedown = TriggerCreate("libGame_gt_HeroDeathDiabloParticipatedInTakedown_Func");
    libGame_gf_HeroParticipatedInTakedown(libGame_gt_HeroDeathDiabloParticipatedInTakedown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Seasoned Marksman Participated In Takedown
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathSeasonedMarksmanParticipatedInTakedown_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stackCount;
    unit lv_unit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "TalentSeasonedMarksmanCarryBehavior") == 1))) {
            return false;
        }

        if (!((UnitBehaviorCount(libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit, "TalentSeasonedMarksmanTokenCounter") != 1000))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = libGame_gv_players[libGame_gf_HeroParticipatedInTakedownKillingPlayer()].lv_heroUnit;
    lv_stackCount = UnitBehaviorCount(lv_unit, "TalentSeasonedMarksmanTokenCounter");
    if ((lv_stackCount >= 40)) {
        UnitCreateEffectUnit(lv_unit, "TalentSeasonedMarksmanAdd5TokenCountNoQuestCategory", lv_unit);
    }
    else {
        UnitCreateEffectUnit(lv_unit, "TalentSeasonedMarksmanAdd5TokenCount", lv_unit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathSeasonedMarksmanParticipatedInTakedown_Init () {
    libGame_gt_HeroDeathSeasonedMarksmanParticipatedInTakedown = TriggerCreate("libGame_gt_HeroDeathSeasonedMarksmanParticipatedInTakedown_Func");
    libGame_gf_HeroParticipatedInTakedown(libGame_gt_HeroDeathSeasonedMarksmanParticipatedInTakedown);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Hero Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathHeroDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadUnit;
    int lv_deadPlayer;
    int lv_killingPlayer;
    int lv_currentStackCountofSoulstone;

    // Variable Initialization
    lv_currentStackCountofSoulstone = UnitBehaviorCount(EventUnit(), "BlackSoulstone");

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((EventPlayer() >= 1))) {
            return false;
        }

        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((EventUnit() == libGame_gv_players[EventPlayer()].lv_heroUnit))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "AbnormalDeath") == false))) {
            return false;
        }

        if (!(((UnitHasBehavior2(EventUnit(), "UtherEternalDevotion") == false) && (UnitHasBehavior2(EventUnit(), "UtherEternalDevotionRezDelay") == false) && (UnitHasBehavior2(EventUnit(), "TyraelArchangelsWrath") == false) && (UnitHasBehavior2(EventUnit(), "UltimateEvolutionBuff") == false) && (UnitHasBehavior2(EventUnit(), "BlackSoulstoneCarryBehavior") == false) && (UnitHasBehavior2(EventUnit(), "GuldanDarkBargainMaxHealthBehavior") == false) && (UnitGetType(EventUnit()) != "HeroGall")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadUnit = EventUnit();
    lv_deadPlayer = EventPlayer();
    lv_killingPlayer = libNtve_gf_KillingPlayer();
    UISetTargetingOrder(libCore_gv_playerGroupFromPlayer[lv_deadPlayer], libNtve_gf_ConvertUnitToUnitGroup(lv_deadUnit), null, false);
    libGame_gv_players[lv_deadPlayer].lv_isDead = true;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DeadUnitCameraTarget", 0, lv_deadPlayer, UnitGetPosition(lv_deadUnit));
    libGame_gv_players[lv_deadPlayer].lv_cameraDeadUnitCameraTarget = UnitLastCreated();
    if ((libCore_gv_sYSGameMode != libCore_ge_GameModes_Tutorial1Deprecated)) {
        libGame_gv_players[lv_deadPlayer].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[lv_deadPlayer].lv_cameraDeadUnitCameraTarget);
    }

    libGame_gf_CameraUpdateCameraForPlayer(lv_deadPlayer);
    libGame_gf_SendEventHeroKilled(lv_killingPlayer, lv_deadUnit);
    libGame_gf_HeroDeathStartRespawnTimer(lv_deadPlayer, libCore_gf_HeroDeathTime(lv_deadPlayer, UnitLevel(libGame_gv_players[lv_deadPlayer].lv_heroUnit)));
    libGame_gf_HeroDeathUpdateUIElementsForDeath(true, true, true, lv_deadPlayer, lv_killingPlayer);
    libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(true, lv_deadPlayer);
    libGame_gf_HeroDeathPortHeroBackAndSetDeathState(lv_deadPlayer, libGame_gv_players[lv_deadPlayer].lv_spawnPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathHeroDies_Init () {
    libGame_gt_HeroDeathHeroDies = TriggerCreate("libGame_gt_HeroDeathHeroDies_Func");
    TriggerAddEventUnitDied(libGame_gt_HeroDeathHeroDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Hero Death Toast Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathHeroDeathToastTimerExpires_Func (bool testConds, bool runActions) {
    int auto612DAC5D_ae;
    int auto612DAC5D_ai;

    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto612DAC5D_ae = libCore_gv_bALMaxPlayers;
    auto612DAC5D_ai = 1;
    lv_player = 1;
    for ( ; ( (auto612DAC5D_ai >= 0 && lv_player <= auto612DAC5D_ae) || (auto612DAC5D_ai <= 0 && lv_player >= auto612DAC5D_ae) ) ; lv_player += auto612DAC5D_ai ) {
        if ((EventTimer() == libGame_gv_players[lv_player].lv_deathToastTimer)) {
            libUIUI_gf_DeathRecapShowHideToastButtonForPlayer(false, lv_player);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathHeroDeathToastTimerExpires_Init () {
    libGame_gt_HeroDeathHeroDeathToastTimerExpires = TriggerCreate("libGame_gt_HeroDeathHeroDeathToastTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[1].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[2].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[3].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[4].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[5].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[6].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[7].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[8].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[9].lv_deathToastTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroDeathToastTimerExpires, libGame_gv_players[10].lv_deathToastTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Hero Respawn Sound Cue Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires_Func (bool testConds, bool runActions) {
    int autoBF669FDA_ae;
    int autoBF669FDA_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoBF669FDA_ae = libCore_gv_bALMaxPlayers;
    autoBF669FDA_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoBF669FDA_ai >= 0 && lv_itPlayer <= autoBF669FDA_ae) || (autoBF669FDA_ai <= 0 && lv_itPlayer >= autoBF669FDA_ae) ) ; lv_itPlayer += autoBF669FDA_ai ) {
        if ((EventTimer() == libGame_gv_players[lv_itPlayer].lv_respawnSoundCueTimer) && (UnitHasBehavior2(libGame_gv_players[lv_itPlayer].lv_heroUnit, "HeroGenericIgnoreDeathSounds") == false)) {
            SoundPlayForPlayer(SoundLink("Gen_Hero_Respawn_Ready", -1), lv_itPlayer, libCore_gv_playerGroupFromPlayer[lv_itPlayer], 100.0, 0.0);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires_Init () {
    libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires = TriggerCreate("libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[1].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[2].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[3].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[4].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[5].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[6].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[7].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[8].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[9].lv_respawnSoundCueTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires, libGame_gv_players[10].lv_respawnSoundCueTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Hero Respawn Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathHeroRespawnTimerExpires_Func (bool testConds, bool runActions) {
    int auto4637F465_ae;
    int auto4637F465_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto4637F465_ae = libCore_gv_bALMaxPlayers;
    auto4637F465_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto4637F465_ai >= 0 && lv_itPlayer <= auto4637F465_ae) || (auto4637F465_ai <= 0 && lv_itPlayer >= auto4637F465_ae) ) ; lv_itPlayer += auto4637F465_ai ) {
        if ((EventTimer() == libGame_gv_players[lv_itPlayer].lv_respawnTimer)) {
            if ((libGame_gv_players[lv_itPlayer].lv_noRespawn == true)) {
                break;
            }

            if ((libGame_gv_players[lv_itPlayer].lv_heroRequiresCustomRespawn == false)) {
                libGame_gf_HeroDeathRespawnHeroforPlayer(libGame_gv_heroDeath_RespawnMounted, lv_itPlayer, libGame_gv_players[lv_itPlayer].lv_spawnPoint, 100);
                break;
            }
            else {
                break;
            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathHeroRespawnTimerExpires_Init () {
    libGame_gt_HeroDeathHeroRespawnTimerExpires = TriggerCreate("libGame_gt_HeroDeathHeroRespawnTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[1].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[2].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[3].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[4].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[5].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[6].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[7].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[8].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[9].lv_respawnTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathHeroRespawnTimerExpires, libGame_gv_players[10].lv_respawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Team Multikill Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathTeamMultikillTimerExpires_Func (bool testConds, bool runActions) {
    int autoAF0AA5CC_ae;
    int autoAF0AA5CC_ai;

    // Variable Declarations
    int lv_itTeam;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoAF0AA5CC_ae = libCore_gv_bALMaxTeams;
    autoAF0AA5CC_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (autoAF0AA5CC_ai >= 0 && lv_itTeam <= autoAF0AA5CC_ae) || (autoAF0AA5CC_ai <= 0 && lv_itTeam >= autoAF0AA5CC_ae) ) ; lv_itTeam += autoAF0AA5CC_ai ) {
        if ((EventTimer() == libGame_gv_teams[lv_itTeam].lv_multikillTimer)) {
            libGame_gv_teams[lv_itTeam].lv_multikillStreak = 0;
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathTeamMultikillTimerExpires_Init () {
    libGame_gt_HeroDeathTeamMultikillTimerExpires = TriggerCreate("libGame_gt_HeroDeathTeamMultikillTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathTeamMultikillTimerExpires, libGame_gv_teams[1].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathTeamMultikillTimerExpires, libGame_gv_teams[2].lv_multikillTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Player Multikill Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathPlayerMultikillTimerExpires_Func (bool testConds, bool runActions) {
    int auto35E4C1F1_ae;
    int auto35E4C1F1_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto35E4C1F1_ae = libCore_gv_bALMaxPlayers;
    auto35E4C1F1_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto35E4C1F1_ai >= 0 && lv_itPlayer <= auto35E4C1F1_ae) || (auto35E4C1F1_ai <= 0 && lv_itPlayer >= auto35E4C1F1_ae) ) ; lv_itPlayer += auto35E4C1F1_ai ) {
        if ((EventTimer() == libGame_gv_players[lv_itPlayer].lv_multikillTimer)) {
            if ((libGame_gv_players[lv_itPlayer].lv_multikillStreak > 1)) {
                DialogControlSendAnimationEvent(libUIUI_gv_notificationDisplay.lv_mainPanel, libCore_gv_playerGroupFromPlayer[lv_itPlayer], "ShowTimedNotification_Expire");
            }

            libGame_gv_players[lv_itPlayer].lv_multikillStreak = 0;
            libGame_gf_HeroDeathDispatchKillingSpreeAnnouncement(lv_itPlayer);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathPlayerMultikillTimerExpires_Init () {
    libGame_gt_HeroDeathPlayerMultikillTimerExpires = TriggerCreate("libGame_gt_HeroDeathPlayerMultikillTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[1].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[2].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[3].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[4].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[5].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[6].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[7].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[8].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[9].lv_multikillTimer);
    TriggerAddEventTimer(libGame_gt_HeroDeathPlayerMultikillTimerExpires, libGame_gv_players[10].lv_multikillTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Update Multikill Timer UI
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathUpdateMultikillTimerUI_Func (bool testConds, bool runActions) {
    int auto93E1A67E_ae;
    int auto93E1A67E_ai;

    // Variable Declarations
    int lv_itPlayer;
    fixed lv_remainingTimerDuration;
    bool lv_playerStillUpdating;
    fixed lv_animTime;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto93E1A67E_ae = libCore_gv_bALMaxPlayers;
    auto93E1A67E_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto93E1A67E_ai >= 0 && lv_itPlayer <= auto93E1A67E_ae) || (auto93E1A67E_ai <= 0 && lv_itPlayer >= auto93E1A67E_ae) ) ; lv_itPlayer += auto93E1A67E_ai ) {
        if ((libGame_gv_players[lv_itPlayer].lv_multikillStreak == 5)) {
            TimerPause(libGame_gv_players[lv_itPlayer].lv_multikillTimer, true);
            libGame_gv_players[lv_itPlayer].lv_multikillStreak = 0;
            libGame_gf_HeroDeathDispatchKillingSpreeAnnouncement(lv_itPlayer);
            continue;
        }

        lv_remainingTimerDuration = TimerGetRemaining(libGame_gv_players[lv_itPlayer].lv_multikillTimer);
        if ((lv_remainingTimerDuration > 0.0)) {
            lv_playerStillUpdating = true;
            lv_animTime = (libGame_gv_heroDeathMultikillTimeoutDuration - lv_remainingTimerDuration);
            libNtve_gf_SetDialogItemAnimationTime(libUIUI_gv_notificationDisplay.lv_multikillTimerCountdownImage, lv_animTime, libCore_gv_playerGroupFromPlayer[lv_itPlayer]);
        }

    }
    if ((lv_playerStillUpdating == false)) {
        TriggerEnable(TriggerGetCurrent(), false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathUpdateMultikillTimerUI_Init () {
    libGame_gt_HeroDeathUpdateMultikillTimerUI = TriggerCreate("libGame_gt_HeroDeathUpdateMultikillTimerUI_Func");
    TriggerEnable(libGame_gt_HeroDeathUpdateMultikillTimerUI, false);
    TriggerAddEventTimePeriodic(libGame_gt_HeroDeathUpdateMultikillTimerUI, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Kill Stinger Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathKillStingerTimerExpires_Func (bool testConds, bool runActions) {
    int auto740A276E_ae;
    int auto740A276E_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto740A276E_ae = libCore_gv_bALMaxEnginePlayerCount;
    auto740A276E_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto740A276E_ai >= 0 && lv_itPlayer <= auto740A276E_ae) || (auto740A276E_ai <= 0 && lv_itPlayer >= auto740A276E_ae) ) ; lv_itPlayer += auto740A276E_ai ) {
        if ((EventTimer() == libGame_gv_heroDeathKillStingerQueue[lv_itPlayer].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)])) {
            libGame_gf_HeroDeathPlayNextSoundInQueueForPlayer(libGame_ge_HeroDeathKillStingerQueueType_Ally, lv_itPlayer);
            break;
        }

        if ((EventTimer() == libGame_gv_heroDeathKillStingerQueue[lv_itPlayer].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)])) {
            libGame_gf_HeroDeathPlayNextSoundInQueueForPlayer(libGame_ge_HeroDeathKillStingerQueueType_Enemy, lv_itPlayer);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathKillStingerTimerExpires_Init () {
    libGame_gt_HeroDeathKillStingerTimerExpires = TriggerCreate("libGame_gt_HeroDeathKillStingerTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[1].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[2].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[3].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[4].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[5].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[6].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[7].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[8].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[9].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[10].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[libCore_gv_oBSERVER_ObserverUIPlayer].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Ally)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[1].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[2].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[3].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[4].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[5].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[6].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[7].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[8].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[9].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[10].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
    TriggerAddEventTimer(libGame_gt_HeroDeathKillStingerTimerExpires, libGame_gv_heroDeathKillStingerQueue[libCore_gv_oBSERVER_ObserverUIPlayer].lv_killStingerTimer[(libGame_ge_HeroDeathKillStingerQueueType_Enemy)]);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Diablo - Diablo Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathDiabloDiabloDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadUnit;
    int lv_deadPlayer;
    int lv_killingPlayer;
    int lv_respawnDuration;
    int lv_currentStackCountofSoulstone;
    int lv_removeAmount;
    point lv_deadUnitsOriginalLocation;
    fixed lv_respawnTime;

    // Variable Initialization
    lv_deadUnit = EventUnit();
    lv_deadPlayer = EventPlayer();
    lv_killingPlayer = libNtve_gf_KillingPlayer();
    lv_currentStackCountofSoulstone = UnitBehaviorCount(EventUnit(), "DiabloBlackSoulstoneTokenCounter");
    lv_deadUnitsOriginalLocation = UnitGetPosition(EventUnit());

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((lv_deadPlayer >= 1))) {
            return false;
        }

        if (!((lv_deadPlayer <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((lv_deadUnit == libGame_gv_players[lv_deadPlayer].lv_heroUnit))) {
            return false;
        }

        if (!((UnitTestState(lv_deadUnit, c_unitStateHallucination) == false))) {
            return false;
        }

        if (!((UnitGetType(lv_deadUnit) == "HeroDiablo"))) {
            return false;
        }

        if (!((UnitHasBehavior2(lv_deadUnit, "DiabloBlackSoulstoneTokenCounter") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_respawnDuration = FixedToInt(libCore_gf_HeroDeathTime(lv_deadPlayer, UnitLevel(lv_deadUnit)));
    if ((PlayerHasTalent(lv_deadPlayer, "DiabloMasteryDyingBreathApocalypse") == true)) {
        UnitCreateEffectUnitWithSource(lv_deadUnit, "ApocalypseCastSearch", lv_deadUnit, c_gameCatalogAbil, "DiabloApocalypse");
    }

    libGame_gv_players[lv_deadPlayer].lv_isDead = true;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DeadUnitCameraTarget", 0, lv_deadPlayer, UnitGetPosition(lv_deadUnit));
    libGame_gv_players[lv_deadPlayer].lv_cameraDeadUnitCameraTarget = UnitLastCreated();
    libGame_gv_players[lv_deadPlayer].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[lv_deadPlayer].lv_cameraDeadUnitCameraTarget);
    libGame_gf_CameraUpdateCameraForPlayer(lv_deadPlayer);
    libGame_gf_SendEventHeroKilled(lv_killingPlayer, lv_deadUnit);
    if (((lv_currentStackCountofSoulstone >= 100) || ((lv_currentStackCountofSoulstone >= 80) && (UnitHasBehavior2(lv_deadUnit, "DevilsDueCarryBehavior") == true)))) {
        lv_respawnTime = libCore_gv_bALDiabloSoulstoneDeathTime;
        PlayerCreateEffectPoint(lv_deadPlayer, "DiabloBlackSoulstoneResurrectDummyPersistent", libNtve_gf_PointWithZOffset(lv_deadUnitsOriginalLocation, 2.0));
        if ((UnitHasBehavior2(lv_deadUnit, "DevilsDueCarryBehavior") == true)) {
            UnitCreateEffectUnit(lv_deadUnit, "DiabloBlackSoulstoneRemove80TokenSet", lv_deadUnit);
        }
        else {
            UnitCreateEffectUnit(lv_deadUnit, "DiabloBlackSoulstoneRemove100TokenSet", lv_deadUnit);
        }
    }
    else {
        lv_respawnTime = libCore_gf_HeroDeathTime(lv_deadPlayer, UnitLevel(libGame_gv_players[lv_deadPlayer].lv_heroUnit));
    }
    libGame_gf_HeroDeathStartRespawnTimer(lv_deadPlayer, lv_respawnTime);
    libGame_gf_HeroDeathUpdateUIElementsForDeath(true, true, true, lv_deadPlayer, lv_killingPlayer);
    libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(true, lv_deadPlayer);
    libGame_gf_HeroDeathPortHeroBackAndSetDeathState(lv_deadPlayer, libGame_gv_players[lv_deadPlayer].lv_spawnPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathDiabloDiabloDies_Init () {
    libGame_gt_HeroDeathDiabloDiabloDies = TriggerCreate("libGame_gt_HeroDeathDiabloDiabloDies_Func");
    TriggerAddEventUnitDied(libGame_gt_HeroDeathDiabloDiabloDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Uther Eternal Devotion Proc
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathUtherEternalDevotionProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadUnit;
    int lv_deadPlayer;
    int lv_killingPlayer;
    const fixed lv_spiritOfRedemptionLowDeathTimeAdjustment_C = 2.0;
    fixed lv_currentDeathTime;
    fixed lv_spiritOfRedemptionBuffDuration;
    fixed lv_spiritOfRedemptionBuffImprovedDuration;
    timer lv_utherRedemptionCustomTimer;

    // Variable Initialization
    lv_utherRedemptionCustomTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_deadPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_killingPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    libGame_gv_players[lv_deadPlayer].lv_lastKillingPlayer = lv_killingPlayer;
    libGame_gf_SendEventHeroKilled(lv_killingPlayer, lv_deadUnit);
    UnitBehaviorAdd(lv_deadUnit, "Dead", lv_deadUnit, 1);
    lv_currentDeathTime = libCore_gf_HeroDeathTime(lv_deadPlayer, UnitLevel(lv_deadUnit));
    lv_spiritOfRedemptionBuffDuration = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "SpiritOfRedemptionSpiritFormBuff", "Duration", 0));
    CatalogFieldValueSet(c_gameCatalogBehavior, "SpiritOfRedemptionSpiritFormBuff", "Duration", lv_deadPlayer, FixedToString(MinF((lv_currentDeathTime - lv_spiritOfRedemptionLowDeathTimeAdjustment_C), lv_spiritOfRedemptionBuffDuration), 2));
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_deadPlayer, UnitGetPosition(lv_deadUnit), 0.25, -1, 0.0, false);
    libGame_gf_SendEventHeroEntersSpecialDeathState(lv_deadUnit);
    if ((UnitBehaviorCount(lv_deadUnit, "UtherRedemptionAlreadyDead") == 0) && ((UnitBehaviorCount(lv_deadUnit, "RedemptionCarryBehavior") == 1) || ((PlayerHasTalent(lv_deadPlayer, "UtherMasteryRedemption") == true) && (UnitBehaviorDuration(lv_deadUnit, "RedemptionCooldown") <= (StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "UtherEternalDevotionRezDelay", "Duration", lv_deadPlayer)) + lv_spiritOfRedemptionBuffDuration))))) {
        TimerStart(lv_utherRedemptionCustomTimer, (StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "SpiritOfRedemptionSpiritFormBuff", "Duration", lv_deadPlayer)) + StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, "UtherEternalDevotionRezDelay", "Duration", lv_deadPlayer))), false, c_timeGame);
        libUIUI_gf_DeathAnnouncementPanelRegisterDeath(lv_deadPlayer, lv_killingPlayer, libGame_gv_players[lv_deadPlayer].lv_heroData.lv_portrait, libGame_gv_players[lv_deadPlayer].lv_heroUnit, libGame_gv_players[lv_deadPlayer].lv_heroData.lv_name, libGame_gv_players[lv_deadPlayer].lv_respawnTimer);
    }
    else {
        libGame_gf_HeroDeathStartRespawnTimer(lv_deadPlayer, libCore_gf_HeroDeathTime(lv_deadPlayer, UnitLevel(libGame_gv_players[lv_deadPlayer].lv_heroUnit)));
        libUIUI_gf_DeathAnnouncementPanelRegisterDeath(lv_deadPlayer, lv_killingPlayer, libGame_gv_players[lv_deadPlayer].lv_heroData.lv_portrait, libGame_gv_players[lv_deadPlayer].lv_heroUnit, libGame_gv_players[lv_deadPlayer].lv_heroData.lv_name, libGame_gv_players[lv_deadPlayer].lv_respawnTimer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathUtherEternalDevotionProc_Init () {
    libGame_gt_HeroDeathUtherEternalDevotionProc = TriggerCreate("libGame_gt_HeroDeathUtherEternalDevotionProc_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_HeroDeathUtherEternalDevotionProc, c_playerAny, "SpiritofRedemptionApplyRezDelayBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Uther Redemption Proc
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathUtherRedemptionProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_utherPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_utherPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    libGame_gv_players[lv_utherPlayer].lv_isDead = false;
    libGame_gf_SendEventHeroRespawn(lv_utherPlayer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathUtherRedemptionProc_Init () {
    libGame_gt_HeroDeathUtherRedemptionProc = TriggerCreate("libGame_gt_HeroDeathUtherRedemptionProc_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_HeroDeathUtherRedemptionProc, c_playerAny, "RedemptionProcSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Tyrael Archangels Wrath Proc
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathTyraelArchangelsWrathProc_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_deadUnit;
    int lv_deadPlayer;
    int lv_killingPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitBehaviorCount(EventPlayerEffectUsedUnit(c_effectUnitCaster), "AbathurUltimateEvolutionHasPostDeathEffectsController") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_deadPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_killingPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    libGame_gv_players[lv_deadPlayer].lv_lastKillingPlayer = lv_killingPlayer;
    libGame_gf_SendEventHeroKilled(lv_killingPlayer, lv_deadUnit);
    UnitBehaviorAdd(lv_deadUnit, "Dead", lv_deadUnit, 1);
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_deadPlayer, UnitGetPosition(lv_deadUnit), 0.25, -1, 0.0, false);
    libGame_gf_SendEventHeroEntersSpecialDeathState(lv_deadUnit);
    libGame_gf_HeroDeathStartRespawnTimer(lv_deadPlayer, libCore_gf_HeroDeathTime(lv_deadPlayer, UnitLevel(libGame_gv_players[lv_deadPlayer].lv_heroUnit)));
    libUIUI_gf_DeathAnnouncementPanelRegisterDeath(lv_deadPlayer, lv_killingPlayer, libGame_gv_players[lv_deadPlayer].lv_heroData.lv_portrait, libGame_gv_players[lv_deadPlayer].lv_heroUnit, libGame_gv_players[lv_deadPlayer].lv_heroData.lv_name, libGame_gv_players[lv_deadPlayer].lv_respawnTimer);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathTyraelArchangelsWrathProc_Init () {
    libGame_gt_HeroDeathTyraelArchangelsWrathProc = TriggerCreate("libGame_gt_HeroDeathTyraelArchangelsWrathProc_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_HeroDeathTyraelArchangelsWrathProc, c_playerAny, "ArchangelsWrathApplyActiveBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Special Death State Dies (Tyrael) (Uther)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathSpecialDeathStateDiesTyraelUther_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_deadPlayer;
    int lv_killingPlayer;
    unit lv_deadUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitHasBehavior2(EventUnit(), "TyraelArchangelsWrath") == true) || (UnitHasBehavior2(EventUnit(), "UtherEternalDevotion") == true)))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "AbathurUltimateEvolutionHasPostDeathEffectsController") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadUnit = EventUnit();
    lv_deadPlayer = UnitGetOwner(lv_deadUnit);
    lv_killingPlayer = libGame_gv_players[lv_deadPlayer].lv_lastKillingPlayer;
    libGame_gv_players[lv_deadPlayer].lv_isDead = true;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DeadUnitCameraTarget", 0, lv_deadPlayer, UnitGetPosition(lv_deadUnit));
    libGame_gv_players[lv_deadPlayer].lv_cameraDeadUnitCameraTarget = UnitLastCreated();
    libGame_gv_players[lv_deadPlayer].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[lv_deadPlayer].lv_cameraDeadUnitCameraTarget);
    libGame_gf_CameraUpdateCameraForPlayer(lv_deadPlayer);
    libGame_gf_HeroDeathUpdateUIElementsForDeath(true, false, true, lv_deadPlayer, lv_killingPlayer);
    libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(true, lv_deadPlayer);
    libGame_gf_HeroDeathPortHeroBackAndSetDeathState(lv_deadPlayer, libGame_gv_players[lv_deadPlayer].lv_spawnPoint);
    libGame_gf_AfkPauseWarningTimerForPlayer(lv_deadPlayer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathSpecialDeathStateDiesTyraelUther_Init () {
    libGame_gt_HeroDeathSpecialDeathStateDiesTyraelUther = TriggerCreate("libGame_gt_HeroDeathSpecialDeathStateDiesTyraelUther_Func");
    TriggerAddEventUnitDied(libGame_gt_HeroDeathSpecialDeathStateDiesTyraelUther, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Death - Gall Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDeathGallDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_deadPlayer;
    int lv_killingPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "HeroGall"))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }

        if (!((UnitBehaviorCount(EventUnit(), "AbathurUltimateEvolutionHasPostDeathEffectsController") == 0))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadPlayer = UnitGetOwner(EventUnit());
    lv_killingPlayer = libGame_gv_players[lv_deadPlayer].lv_lastKillingPlayer;
    libGame_gv_players[lv_deadPlayer].lv_isDead = true;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "DeadUnitCameraTarget", 0, lv_deadPlayer, UnitGetPosition(EventUnit()));
    libGame_gv_players[lv_deadPlayer].lv_cameraDeadUnitCameraTarget = UnitLastCreated();
    libGame_gv_players[lv_deadPlayer].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[lv_deadPlayer].lv_cameraDeadUnitCameraTarget);
    libGame_gf_CameraUpdateCameraForPlayer(lv_deadPlayer);
    libUIUI_gf_UIHeroConsoleShowHideUnitStatusFrameForPlayer(false, lv_deadPlayer);
    libUIUI_gf_FullscreenOverlaysShowHideDeathOverlay(true, lv_deadPlayer);
    libGame_gf_HeroDeathAddStingerSoundToQueueForPlayer("Gen_Hero_Death_Self", libGame_ge_HeroDeathKillStingerQueueType_Ally, lv_deadPlayer);
    libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(true, lv_deadPlayer);
    libGame_gf_HeroDeathPortHeroBackAndSetDeathState(lv_deadPlayer, libGame_gv_players[lv_deadPlayer].lv_spawnPoint);
    libUIUI_gf_DeathRecapShowHideToastButtonForPlayer(true, lv_deadPlayer);
    libGame_gf_AfkPauseWarningTimerForPlayer(lv_deadPlayer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDeathGallDies_Init () {
    libGame_gt_HeroDeathGallDies = TriggerCreate("libGame_gt_HeroDeathGallDies_Func");
    TriggerAddEventUnitDied(libGame_gt_HeroDeathGallDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Code Lane System
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeCodeLaneSystem_Func (bool testConds, bool runActions) {
    int auto6FB2B62C_ae;
    int auto6FB2B62C_ai;
    int autoF21E549D_ae;
    int autoF21E549D_ai;

    // Variable Declarations
    int lv_laneIndex;
    int lv_waypointIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    AILaneWaypointClearAll();
    auto6FB2B62C_ae = libGame_gv_laneCount;
    auto6FB2B62C_ai = 1;
    lv_laneIndex = 1;
    for ( ; ( (auto6FB2B62C_ai >= 0 && lv_laneIndex <= auto6FB2B62C_ae) || (auto6FB2B62C_ai <= 0 && lv_laneIndex >= auto6FB2B62C_ae) ) ; lv_laneIndex += auto6FB2B62C_ai ) {
        autoF21E549D_ae = libGame_gv_laneData[lv_laneIndex].lv_waypointCount;
        autoF21E549D_ai = 1;
        lv_waypointIndex = 1;
        for ( ; ( (autoF21E549D_ai >= 0 && lv_waypointIndex <= autoF21E549D_ae) || (autoF21E549D_ai <= 0 && lv_waypointIndex >= autoF21E549D_ae) ) ; lv_waypointIndex += autoF21E549D_ai ) {
            AILaneWaypointAdd(lv_laneIndex, libGame_gv_laneData[lv_laneIndex].lv_waypoints[lv_waypointIndex]);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeCodeLaneSystem_Init () {
    libGame_gt_InitializeCodeLaneSystem = TriggerCreate("libGame_gt_InitializeCodeLaneSystem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Leaves Game
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerLeavesGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_team;
    int lv_enemyTeam;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_players[EventPlayer()].lv_gameEndedForPlayer == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_gameOver == false)) {
        TimerStart(libGame_gv_players[EventPlayer()].lv_playerLeftAnnouncementTimer, libGame_gv_playerLeftAnnouncementTimerDuration_C, false, c_timeGame);
        libGame_gv_players[EventPlayer()].lv_playerStatus = libGame_ge_PlayerStatusStorm_LefttheGame;
        lv_team = libGame_gf_TeamNumberOfPlayer(EventPlayer());
        libGame_gv_teams[lv_team].lv_activeHumanPlayers -= 1;
        if ((libGame_gv_teams[lv_team].lv_activeHumanPlayers == 0)) {
            lv_enemyTeam = (3 - lv_team);
            TextExpressionSetToken("Param/Expression/lib_Game_2995AAD8", "A", FixedToText(libGame_gv_teamAbandonedTheGameTimerDuration_C, 0));
            UIDisplayMessage(libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, c_messageAreaChat, TextExpressionAssemble("Param/Expression/lib_Game_2995AAD8"));
            TimerStart(libGame_gv_teams[lv_team].lv_abandonedTheGameTimer, libGame_gv_teamAbandonedTheGameTimerDuration_C, false, c_timeGame);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerLeavesGame_Init () {
    libGame_gt_PlayerLeavesGame = TriggerCreate("libGame_gt_PlayerLeavesGame_Func");
    TriggerAddEventPlayerLeft(libGame_gt_PlayerLeavesGame, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Rejoins Game
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerRejoinsGame_Func (bool testConds, bool runActions) {
    // Variable Declarations
    playergroup lv_announcementGroup;
    int lv_team;

    // Variable Initialization
    lv_announcementGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_players[EventPlayer()].lv_playerLeftAnnoucnementPlayed == true)) {
        lv_announcementGroup = libGame_gf_AlliedPlayerGroupOfPlayer(EventPlayer());
        PlayerGroupAdd(lv_announcementGroup, libCore_gv_oBSERVER_ObserverUIPlayer);
        libGame_gf_AnnouncementAddItemForPlayerGroup(lv_announcementGroup, libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_APlayerHasRejoinedTheGame, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
    }
    else {
        TimerPause(libGame_gv_players[EventPlayer()].lv_playerLeftAnnouncementTimer, true);
    }
    libGame_gv_players[EventPlayer()].lv_playerStatus = libGame_ge_PlayerStatusStorm_Playing;
    lv_team = libGame_gf_TeamNumberOfPlayer(EventPlayer());
    libGame_gv_teams[lv_team].lv_activeHumanPlayers += 1;
    TimerPause(libGame_gv_teams[lv_team].lv_abandonedTheGameTimer, true);
    if ((libGame_gv_players[EventPlayer()].lv_heroUnit != null)) {
        libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(EventPlayer(), UnitGetPosition(libGame_gv_players[EventPlayer()].lv_heroUnit), 0.0, -1, 0.0, false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerRejoinsGame_Init () {
    libGame_gt_PlayerRejoinsGame = TriggerCreate("libGame_gt_PlayerRejoinsGame_Func");
    TriggerAddEventPlayerJoin(libGame_gt_PlayerRejoinsGame, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Team Abandoned The Game Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TeamAbandonedTheGameTimerExpires_Func (bool testConds, bool runActions) {
    int auto0AF30C00_ae;
    int auto0AF30C00_ai;

    // Variable Declarations
    int lv_itTeam;
    int lv_enemyTeam;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0AF30C00_ae = libCore_gv_bALMaxTeams;
    auto0AF30C00_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (auto0AF30C00_ai >= 0 && lv_itTeam <= auto0AF30C00_ae) || (auto0AF30C00_ai <= 0 && lv_itTeam >= auto0AF30C00_ae) ) ; lv_itTeam += auto0AF30C00_ai ) {
        if ((EventTimer() == libGame_gv_teams[lv_itTeam].lv_abandonedTheGameTimer)) {
            lv_enemyTeam = (3 - lv_itTeam);
            UIDisplayMessage(libGame_gv_teams[lv_enemyTeam].lv_teamPlayerGroupNoNPCPlayers, c_messageAreaChat, StringExternal("Param/Value/lib_Game_CAD91146"));
            UnitKill(libGame_gv_teams[lv_itTeam].lv_core);
            TriggerEnable(TriggerGetCurrent(), false);
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TeamAbandonedTheGameTimerExpires_Init () {
    libGame_gt_TeamAbandonedTheGameTimerExpires = TriggerCreate("libGame_gt_TeamAbandonedTheGameTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_TeamAbandonedTheGameTimerExpires, libGame_gv_teams[1].lv_abandonedTheGameTimer);
    TriggerAddEventTimer(libGame_gt_TeamAbandonedTheGameTimerExpires, libGame_gv_teams[2].lv_abandonedTheGameTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player Left Announcement Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerLeftAnnouncementTimerExpires_Func (bool testConds, bool runActions) {
    int autoAD9152EC_ae;
    int autoAD9152EC_ai;
    playergroup autoA2B8AD94_g;
    int autoA2B8AD94_p;

    // Variable Declarations
    playergroup lv_announcementGroup;
    int lv_itPlayer;
    int lv_itTriggeringPlayer;
    int lv_enemyTeam;

    // Variable Initialization
    lv_announcementGroup = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAD9152EC_ae = libCore_gv_bALMaxEnginePlayerCount;
    autoAD9152EC_ai = 1;
    lv_itTriggeringPlayer = 1;
    for ( ; ( (autoAD9152EC_ai >= 0 && lv_itTriggeringPlayer <= autoAD9152EC_ae) || (autoAD9152EC_ai <= 0 && lv_itTriggeringPlayer >= autoAD9152EC_ae) ) ; lv_itTriggeringPlayer += autoAD9152EC_ai ) {
        if ((EventTimer() == libGame_gv_players[lv_itTriggeringPlayer].lv_playerLeftAnnouncementTimer)) {
            libGame_gv_players[lv_itTriggeringPlayer].lv_playerLeftAnnoucnementPlayed = true;
            lv_announcementGroup = libGame_gf_AlliedPlayerGroupOfPlayer(lv_itTriggeringPlayer);
            PlayerGroupAdd(lv_announcementGroup, libCore_gv_oBSERVER_ObserverUIPlayer);
            autoA2B8AD94_g = lv_announcementGroup; 
            autoA2B8AD94_p = 1;
            for ( ; autoA2B8AD94_p <= PlayerGroupCount(autoA2B8AD94_g) ; autoA2B8AD94_p += (lv_itPlayer == PlayerGroupPlayer(autoA2B8AD94_g, autoA2B8AD94_p)) ) {
                lv_itPlayer = PlayerGroupPlayer(autoA2B8AD94_g, autoA2B8AD94_p);
                if ((lv_itPlayer != lv_itTriggeringPlayer)) {
                    libGame_gf_AnnouncementAddItemForPlayerGroup(libCore_gv_playerGroupFromPlayer[lv_itPlayer], libGame_ge_AnnouncementPriorities_Normal, libCore_ge_AnnouncerVOEvents_APlayerHasLeftTheGame, "", null, null, null, null, libGame_gv_announcement_QuickSoundOnlyTimerDuration_C, false);
                }

            }
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerLeftAnnouncementTimerExpires_Init () {
    libGame_gt_PlayerLeftAnnouncementTimerExpires = TriggerCreate("libGame_gt_PlayerLeftAnnouncementTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[1].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[2].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[3].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[4].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[5].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[6].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[7].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[8].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[9].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[10].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[11].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[12].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[13].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[14].lv_playerLeftAnnouncementTimer);
    TriggerAddEventTimer(libGame_gt_PlayerLeftAnnouncementTimerExpires, libGame_gv_players[15].lv_playerLeftAnnouncementTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Minion - Spawn Cycle
//--------------------------------------------------------------------------------------------------
bool libGame_gt_MinionSpawnCycle_Func (bool testConds, bool runActions) {
    int auto2740E61A_ae;
    int auto2740E61A_ai;

    // Variable Declarations
    int lv_lane;
    int lv_waveComposition;
    timer lv_waveTimer;
    bool lv_paused;

    // Variable Initialization
    lv_waveTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        if (((libGame_gv_gameOver == true) || (libCore_gv_sYSMinionAI == false))) {
            return true;
        }

        TimerStart(lv_waveTimer, libCore_gv_bALMinionWaveInterval, false, c_timeGame);
        libGame_gv_minionWaveSpawnCounter += 1;
        auto2740E61A_ae = libGame_gv_laneCount;
        auto2740E61A_ai = 1;
        lv_lane = 1;
        for ( ; ( (auto2740E61A_ai >= 0 && lv_lane <= auto2740E61A_ae) || (auto2740E61A_ai <= 0 && lv_lane >= auto2740E61A_ae) ) ; lv_lane += auto2740E61A_ai ) {
            if ((libGame_gv_laneData[lv_lane].lv_minionSpawningEnabled == true)) {
                if ((libGame_gv_minionSystemPausedAdvanced[libGame_gv_teamOrderIndex_C][lv_lane] == false)) {
                    lv_waveComposition = libGame_gf_MinionDetermineWaveComposition(lv_lane, libGame_gv_teamOrderIndex_C);
                    libGame_gf_MinionSpawnWave(lv_lane, libCore_gv_cOMPUTER_TeamOrder, lv_waveComposition);
                }

                if ((libGame_gv_minionSystemPausedAdvanced[libGame_gv_teamChaosIndex_C][lv_lane] == false)) {
                    lv_waveComposition = libGame_gf_MinionDetermineWaveComposition(lv_lane, libGame_gv_teamChaosIndex_C);
                    libGame_gf_MinionSpawnWave(lv_lane, libCore_gv_cOMPUTER_TeamChaos, lv_waveComposition);
                }

                Wait(0.1875, c_timeGame);
            }

        }
        while ((TimerGetRemaining(lv_waveTimer) > 0.0)) {
            if ((libGame_gv_minionSpawningEnabled == false)) {
                if ((lv_paused == false)) {
                    TimerPause(lv_waveTimer, true);
                    lv_paused = true;
                }

            }
            else {
                if ((lv_paused == true)) {
                    TimerPause(lv_waveTimer, false);
                    lv_paused = false;
                }

            }
            Wait(0.25, c_timeGame);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_MinionSpawnCycle_Init () {
    libGame_gt_MinionSpawnCycle = TriggerCreate("libGame_gt_MinionSpawnCycle_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Moonwell Cooldown On/Off
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroMoonwellCooldownOnOff_Func (bool testConds, bool runActions) {
    int auto96169CAC_ae;
    int auto96169CAC_ai;

    // Variable Declarations
    int lv_index;
    int lv_itPlayerIndex;
    bool lv_isHeroUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto96169CAC_ae = libCore_gv_bALMaxPlayers;
    auto96169CAC_ai = 1;
    lv_itPlayerIndex = 1;
    for ( ; ( (auto96169CAC_ai >= 0 && lv_itPlayerIndex <= auto96169CAC_ae) || (auto96169CAC_ai <= 0 && lv_itPlayerIndex >= auto96169CAC_ae) ) ; lv_itPlayerIndex += auto96169CAC_ai ) {
        if ((EventUnit() == libGame_gv_players[lv_itPlayerIndex].lv_heroUnit)) {
            lv_isHeroUnit = true;
            break;
        }

    }
    if (((UnitIsValid(EventUnit()) == false) || (lv_isHeroUnit == false))) {
        return true;
    }

    UIFlyerHelperOverride(PlayerGroupAll(), libNtve_ge_FlyerHelperDisplay_c_flyerDisplayNone);
    if ((EventUnitBehaviorChange() == c_unitBehaviorChangeActivate)) {
        libGame_gv_moonwellMoonwellonCooldown[UnitGetOwner(EventUnit())] = true;
        UIFlyerHelperOverride(PlayerGroupSingle(UnitGetOwner(EventUnit())), libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
        if (((UnitGetOwner(EventUnit()) < 1) || (UnitGetOwner(EventUnit()) > libCore_gv_bALMaxPlayers))) {
            TextExpressionSetToken("Param/Expression/lib_Game_8CA366B7", "A", IntToText(UnitGetOwner(EventUnit())));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_Game_8CA366B7"), true);
        }

        UnitGroupLoopBegin(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("TownMoonwell", "TownMoonwellL2", "TownMoonwellL3", UnitGetOwner(EventUnit()), c_unitAllianceAlly, RegionPlayableMap(), UnitFilter(0, 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "Signal MoonwellDrink");
            UnitGroupAdd(libGame_gv_moonwellTextTagsUnitGroup[UnitGetOwner(EventUnit())], UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitGroupLoopBegin(libGame_gv_moonwellTextTagsUnitGroup[UnitGetOwner(EventUnit())]);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            lv_index += 1;
            TextTagCreate((StringExternal("Param/Value/lib_Game_3F1D7629") + FixedToText(UnitBehaviorDuration(UnitGroupLoopCurrent(), "HealingFountainCooldown"), 0)), 20, UnitGetPosition(UnitGroupLoopCurrent()), 4.2, false, false, PlayerGroupSingle(UnitGetOwner(EventUnit())));
            libGame_gv_moonwellTextTags[UnitGetOwner(EventUnit())][lv_index] = TextTagLastCreated();
            libGame_gv_moonwellTextTagsUnit[UnitGetOwner(EventUnit())][lv_index] = UnitGroupLoopCurrent();
        }
        UnitGroupLoopEnd();
    }
    else {
        libGame_gv_moonwellMoonwellonCooldown[UnitGetOwner(EventUnit())] = false;
        UIFlyerHelperOverride(PlayerGroupSingle(UnitGetOwner(EventUnit())), libNtve_ge_FlyerHelperDisplay_c_flyerDisplayAll);
        UnitGroupLoopBegin(libGame_gv_moonwellTextTagsUnitGroup[UnitGetOwner(EventUnit())]);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            libNtve_gf_SendActorMessageToUnit(UnitGroupLoopCurrent(), "Signal MoonwellReset");
            UnitGroupRemove(libGame_gv_moonwellTextTagsUnitGroup[UnitGetOwner(EventUnit())], UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        IntLoopBegin(1, libGame_gv_moonwellMaxMoonwellCount);
        for ( ; !IntLoopDone() ; IntLoopStep() ) {
            libGame_gv_moonwellTextTagsUnit[UnitGetOwner(EventUnit())][IntLoopCurrent()] = null;
            TextTagDestroy(libGame_gv_moonwellTextTags[UnitGetOwner(EventUnit())][IntLoopCurrent()]);
            libGame_gv_moonwellTextTags[UnitGetOwner(EventUnit())][IntLoopCurrent()] = c_textTagNone;
        }
        IntLoopEnd();
    }
    Wait(0.0625, c_timeGame);
    UIFlyerHelperClearOverride(PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroMoonwellCooldownOnOff_Init () {
    libGame_gt_HeroMoonwellCooldownOnOff = TriggerCreate("libGame_gt_HeroMoonwellCooldownOnOff_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_HeroMoonwellCooldownOnOff, null, "HealingFountainCooldown", c_unitBehaviorChangeAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Moonwell Duration Text Tag Updates
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroMoonwellDurationTextTagUpdates_Func (bool testConds, bool runActions) {
    int autoCA847D3A_ae;
    int autoCA847D3A_ai;

    // Variable Declarations
    bool lv_notTutorial;
    int lv_textTag;
    int lv_itPlayer;
    text lv_helpLabel;
    int lv_team;

    // Variable Initialization
    lv_textTag = c_textTagNone;

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libCore_gv_sYSGameMode == libCore_ge_GameModes_Normal) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_ArenaMode) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_AttackDefend) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_Test) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_Sandbox))) {
        lv_notTutorial = true;
    }
    else {
        lv_notTutorial = false;
    }
    autoCA847D3A_ae = libCore_gv_bALMaxPlayers;
    autoCA847D3A_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoCA847D3A_ai >= 0 && lv_itPlayer <= autoCA847D3A_ae) || (autoCA847D3A_ai <= 0 && lv_itPlayer >= autoCA847D3A_ae) ) ; lv_itPlayer += autoCA847D3A_ai ) {
        lv_team = libGame_gf_TeamNumberOfPlayer(lv_itPlayer);
        if ((libGame_gv_moonwellMoonwellonCooldown[lv_itPlayer] == true)) {
            IntLoopBegin(1, libGame_gv_moonwellMaxMoonwellCount);
            for ( ; !IntLoopDone() ; IntLoopStep() ) {
                lv_textTag = libGame_gv_moonwellTextTags[lv_itPlayer][IntLoopCurrent()];
                if ((UnitIsAlive(libGame_gv_moonwellTextTagsUnit[lv_itPlayer][IntLoopCurrent()]) == true)) {
                    TextTagShow(lv_textTag, PlayerGroupSingle(lv_itPlayer), true);
                    TextTagSetText(lv_textTag, (StringExternal("Param/Value/lib_Game_79F06999") + FixedToText(UnitBehaviorDuration(libGame_gv_players[lv_itPlayer].lv_heroUnit, "HealingFountainCooldown"), 0)));
                }
                else if ((lv_textTag != c_textTagNone)) {
                    TextTagDestroy(lv_textTag);
                    libGame_gv_moonwellTextTags[lv_itPlayer][IntLoopCurrent()] = c_textTagNone;
                }
            }
            IntLoopEnd();
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroMoonwellDurationTextTagUpdates_Init () {
    libGame_gt_HeroMoonwellDurationTextTagUpdates = TriggerCreate("libGame_gt_HeroMoonwellDurationTextTagUpdates_Func");
    TriggerAddEventTimePeriodic(libGame_gt_HeroMoonwellDurationTextTagUpdates, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Mount
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroMount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_mountingUnit;
    int lv_mountingPlayer;
    string lv_mountingUnitType;
    actor lv_heroActor;
    int lv_heroIndex;
    int lv_mountIndex;
    string lv_poseAnimGroup;
    string lv_poseAnimGroupStatus;
    fixed lv_mountScale;
    fixed lv_mountWalkAnimMoveSpeed;
    string lv_mountModel;
    string lv_actorNameForMount;
    actor lv_mountActor;

    // Variable Initialization
    lv_mountingUnit = EventUnit();
    lv_mountingPlayer = UnitGetOwner(lv_mountingUnit);
    lv_mountingUnitType = UnitGetType(lv_mountingUnit);
    lv_heroActor = libNtve_gf_MainActorofUnit(lv_mountingUnit);
    lv_heroIndex = lv_mountingPlayer;
    lv_poseAnimGroup = "";
    lv_poseAnimGroupStatus = "";
    lv_actorNameForMount = libGame_gv_mountModelActor;

    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(lv_mountingUnit) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(lv_mountingUnit) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_mountingUnit, "UltimateEvolutionTimedLife") == true)) {
        PlayerGroupLoopBegin(libGame_gf_AlliedPlayerGroupOfPlayer(lv_mountingPlayer));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((lv_mountingUnitType == UnitGetType(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit))) {
                lv_mountIndex = PlayerGroupLoopCurrent();
                break;
            }

        }
        PlayerGroupLoopEnd();
    }
    else {
        lv_mountIndex = lv_mountingPlayer;
    }
    lv_poseAnimGroup = libGame_gv_players[lv_mountIndex].lv_mountData.lv_mountPoseAnimGroup;
    lv_poseAnimGroupStatus = libGame_gv_players[lv_mountIndex].lv_mountData.lv_mountPoseAnimGroupStatus;
    lv_mountScale = libGame_gv_players[lv_mountIndex].lv_mountData.lv_mountModelScale;
    lv_mountWalkAnimMoveSpeed = libGame_gv_players[lv_mountIndex].lv_mountData.lv_mountModelWalkAnimMoveSpeed;
    if ((UnitHasBehavior2(lv_mountingUnit, "SiegeMode") == true)) {
        UnitCreateEffectUnit(lv_mountingUnit, "SiegeModeRemoveSet", lv_mountingUnit);
    }

    if ((UnitHasBehavior2(lv_mountingUnit, "ArthasFrozenTempestCaster") == true)) {
        UnitBehaviorRemove(lv_mountingUnit, "ArthasFrozenTempestCaster", 1);
    }

    ActorSend(lv_heroActor, (("StatusSet " + lv_poseAnimGroupStatus + " 1")));
    if ((UnitHasBehavior2(lv_mountingUnit, "IsMorphMounted") == true)) {
        lv_actorNameForMount = libGame_gv_morphMountModelActor;
    }

    if ((libGame_gv_players[lv_mountIndex].lv_mountData.lv_noAttachedMountModel == false)) {
        ActorSend(lv_heroActor, "PhysicsTerminate");
        lv_mountModel = libGame_gv_players[lv_mountIndex].lv_mountData.lv_mountModel;
        ActorSend(lv_heroActor, libNtve_gf_Create(lv_actorNameForMount, (lv_mountModel)));
        lv_mountActor = ActorFromActor(lv_heroActor, lv_actorNameForMount);
        libCore_gf_SendMountActorMessagesToActor(lv_mountIndex, lv_mountActor);
        if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_isFlyer == true)) {
            ActorSend(lv_mountActor, libNtve_gf_RefSet("::Host", "FlyerBillboard"));
        }

        ActorSend(lv_mountActor, libNtve_gf_SetScaleAbsolute(lv_mountScale, lv_mountScale, lv_mountScale, 0.0));
        ActorSend(lv_heroActor, (("AnimGroupApply " + lv_poseAnimGroup + " {} {} Instant")));
        if (((lv_poseAnimGroup == "Ridebike") || (lv_poseAnimGroup == "Ridenone"))) {
            UnitBehaviorAdd(lv_mountingUnit, "HideHandAttachmentsWhileMounted", lv_mountingUnit, 1);
        }

        ActorSend(lv_heroActor, libNtve_gf_RefSet("::Host", lv_actorNameForMount));
        ActorSend(lv_heroActor, libNtve_gf_HostSiteOpsSet("::Host", "SOpAttachMount", 0, 0));
        ActorSend(lv_heroActor, libNtve_gf_RefSet("::HostForProps", "PropsHost"));
        ActorSend(lv_mountActor, libNtve_gf_RefSet("::HostForProps", (lv_mountingUnitType)));
    }
    else {
        ActorSend(lv_heroActor, (("AnimGroupApply " + lv_poseAnimGroup)));
    }
    ActorSend(lv_heroActor, libNtve_gf_SetWalkAnimMoveSpeed(lv_mountWalkAnimMoveSpeed));
    ActorSend(lv_mountActor, libNtve_gf_Signal("MountSound"));
    if ((libGame_gv_players[lv_mountIndex].lv_mountData.lv_mountModel != "MoneyPig")) {
        ActorSend(lv_heroActor, libNtve_gf_Create("MountSmokeScreen", ""));
    }

    if ((libGame_gv_players[lv_mountIndex].lv_mountData.lv_mountSound != "")) {
        ActorSend(lv_heroActor, libNtve_gf_Create("MountDismountSound", (libGame_gv_players[lv_mountIndex].lv_mountData.lv_mountSound)));
    }

    if ((libGame_gv_players[lv_mountIndex].lv_mountData.lv_loopingSound != "")) {
        ActorSend(lv_heroActor, libNtve_gf_Create("MountLoopingSound", (libGame_gv_players[lv_mountIndex].lv_mountData.lv_loopingSound)));
    }

    if ((libGame_gv_players[lv_mountIndex].lv_mountData.lv_stationarySound != "")) {
        ActorSend(lv_heroActor, libNtve_gf_Create("MountStationarySound", (libGame_gv_players[lv_mountIndex].lv_mountData.lv_stationarySound)));
    }

    if ((libGame_gv_players[lv_mountIndex].lv_mountData.lv_movingSound != "")) {
        ActorSend(lv_heroActor, libNtve_gf_Create("MountMovingSound", (libGame_gv_players[lv_mountIndex].lv_mountData.lv_movingSound)));
    }

    if ((libGame_gv_players[lv_mountIndex].lv_mountData.lv_moveStartSound != "")) {
        CatalogLinkReplace(lv_mountingPlayer, c_gameCatalogSound, "GenericMountMoveStartSound", (libGame_gv_players[lv_mountIndex].lv_mountData.lv_moveStartSound));
    }

    if ((libGame_gv_players[lv_mountIndex].lv_mountData.lv_moveStopSound != "")) {
        CatalogLinkReplace(lv_mountingPlayer, c_gameCatalogSound, "GenericMountMoveStopSound", (libGame_gv_players[lv_mountIndex].lv_mountData.lv_moveStopSound));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroMount_Init () {
    libGame_gt_HeroMount = TriggerCreate("libGame_gt_HeroMount_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_HeroMount, null, "Mounted", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Dismount
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDismount_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dismountingUnit;
    int lv_dismountingPlayer;
    int lv_heroIndex;
    actor lv_heroActor;
    int lv_mountIndex;
    fixed lv_heroWalkAnimMoveSpeed;
    string lv_poseAnimGroup;
    string lv_poseAnimGroupStatus;
    string lv_mountActorName;

    // Variable Initialization
    lv_dismountingUnit = EventUnit();
    lv_dismountingPlayer = UnitGetOwner(lv_dismountingUnit);
    lv_heroIndex = libCore_gf_GetHeroIndexForUnitType(UnitGetType(lv_dismountingUnit));
    lv_heroActor = libNtve_gf_MainActorofUnit(lv_dismountingUnit);
    lv_poseAnimGroup = "";
    lv_poseAnimGroupStatus = "";
    lv_mountActorName = libGame_gv_mountModelActor;

    // Conditions
    if (testConds) {
        if (!((lv_dismountingPlayer <= libCore_gv_bALMaxEnginePlayerCount))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_dismountingUnit, "UltimateEvolutionTimedLife") == true)) {
        PlayerGroupLoopBegin(libGame_gf_AlliedPlayerGroupOfPlayer(lv_dismountingPlayer));
        for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
            if ((UnitGetType(lv_dismountingUnit) == UnitGetType(libGame_gv_players[PlayerGroupLoopCurrent()].lv_heroUnit))) {
                lv_mountIndex = PlayerGroupLoopCurrent();
                break;
            }

        }
        PlayerGroupLoopEnd();
    }
    else {
        lv_mountIndex = lv_dismountingPlayer;
    }
    lv_heroWalkAnimMoveSpeed = StringToFixed(CatalogFieldValueGet(c_gameCatalogActor, UnitGetType(lv_dismountingUnit), "WalkAnimMoveSpeed", lv_dismountingPlayer));
    lv_poseAnimGroup = libGame_gv_players[lv_mountIndex].lv_mountData.lv_mountPoseAnimGroup;
    lv_poseAnimGroupStatus = libGame_gv_players[lv_mountIndex].lv_mountData.lv_mountPoseAnimGroup;
    if ((UnitHasBehavior2(lv_dismountingUnit, "WarSpurs") == true)) {
        UnitBehaviorAdd(lv_dismountingUnit, "WarSpursSpeedBuff", lv_dismountingUnit, 1);
    }

    ActorSend(lv_heroActor, (("StatusSet " + lv_poseAnimGroupStatus + " 0")));
    if ((libGame_gv_players[lv_mountIndex].lv_mountData.lv_isMorphMount == true)) {
        lv_mountActorName = libGame_gv_morphMountModelActor;
    }

    if ((libGame_gv_players[lv_mountIndex].lv_mountData.lv_noAttachedMountModel == false)) {
        ActorSend(lv_heroActor, (("AnimBlendTimeApply 0")));
        ActorSend(lv_heroActor, (("AnimGroupRemove " + lv_poseAnimGroup + " Instant")));
        ActorSend(lv_heroActor, (("AnimBlendTimeApply")));
        if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_isFlyer == true)) {
            ActorSend(lv_heroActor, libNtve_gf_RefSet("::Host", "FlyerBillboard"));
            ActorSend(lv_heroActor, libNtve_gf_HostSiteOpsSet("::Host", "", 0, 0));
        }
        else {
            if (((UnitHasBehavior2(lv_dismountingUnit, "TychusOverkillTargetedActive") == true))) {
            }
            else {
                ActorSend(lv_heroActor, libNtve_gf_RefClear("::Host"));
                ActorSend(lv_heroActor, libNtve_gf_HostSiteOpsSet("::Host", "SOpBasicScopeFollow", 0, 0));
                ActorSend(lv_heroActor, libNtve_gf_Signal("HostSetFromTriggers"));
            }
        }
        ActorSend(ActorFromScope(ActorScopeFromUnit(EventUnit()), lv_mountActorName), libNtve_gf_Destroy());
    }
    else {
        ActorSend(lv_heroActor, (("AnimGroupRemove " + lv_poseAnimGroup)));
    }
    ActorSend(lv_heroActor, libNtve_gf_SetWalkAnimMoveSpeed(lv_heroWalkAnimMoveSpeed));
    if ((UnitIsAlive(lv_dismountingUnit) == true)) {
        ActorSend(lv_heroActor, libNtve_gf_Create("DismountSmokeScreen", ""));
    }

    if ((libGame_gv_players[lv_mountIndex].lv_mountData.lv_dismountSound != "")) {
        ActorSend(lv_heroActor, libNtve_gf_Create("MountDismountSound", (libGame_gv_players[lv_mountIndex].lv_mountData.lv_dismountSound)));
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDismount_Init () {
    libGame_gt_HeroDismount = TriggerCreate("libGame_gt_HeroDismount_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_HeroDismount, null, "Mounted", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Dismount On Ability Use - Attack
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDismountOnAbilityUseAttack_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;

    // Variable Initialization
    lv_unit = EventUnitTarget();

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_unit, "Mounted") == true)) {
        UnitBehaviorRemove(lv_unit, "Mounted", 1);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDismountOnAbilityUseAttack_Init () {
    libGame_gt_HeroDismountOnAbilityUseAttack = TriggerCreate("libGame_gt_HeroDismountOnAbilityUseAttack_Func");
    TriggerAddEventUnitAttacked(libGame_gt_HeroDismountOnAbilityUseAttack, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero - Dismount On Cheer Dance Taunt Used
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDismountOnCheerDanceTauntUsed_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_triggeringUnit;

    // Variable Initialization
    lv_triggeringUnit = EventUnit();

    // Conditions
    if (testConds) {
        if (!((UnitHasBehavior2(lv_triggeringUnit, "Mounted") == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_triggeringUnit, "AbilityUseResponseSetDismount", lv_triggeringUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDismountOnCheerDanceTauntUsed_Init () {
    libGame_gt_HeroDismountOnCheerDanceTauntUsed = TriggerCreate("libGame_gt_HeroDismountOnCheerDanceTauntUsed_Func");
    TriggerAddEventUnitAbility(libGame_gt_HeroDismountOnCheerDanceTauntUsed, null, AbilityCommand("HoldFire", 2), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libGame_gt_HeroDismountOnCheerDanceTauntUsed, null, AbilityCommand("HoldFire", 3), c_unitAbilStageExecute, false);
    TriggerAddEventUnitAbility(libGame_gt_HeroDismountOnCheerDanceTauntUsed, null, AbilityCommand("HoldFire", 4), c_unitAbilStageExecute, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Game General NPC Proc Listener
//--------------------------------------------------------------------------------------------------
bool libGame_gt_GameGeneralNPCProcListener_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_killingPlayer;
    unit lv_minion;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_killingPlayer = libGame_gf_HeroParticipatedInNPCTakedownKillingPlayer();
    lv_minion = libGame_gf_HeroParticipatedInNPCTakedownMinion();
    if (((UnitTypeTestAttribute(UnitGetType(lv_minion), c_unitAttributeSummoned) == true) || (UnitTypeTestAttribute(UnitGetType(lv_minion), c_unitAttributeUser1) == true) || (UnitTypeTestAttribute(UnitGetType(lv_minion), c_unitAttributeMapBoss) == true))) {
        return true;
    }

    if ((UnitTypeTestAttribute(UnitGetType(lv_minion), c_unitAttributeStructure) == true)) {
        libGame_gf_GazloweSalvageProc(lv_killingPlayer, lv_minion);
        return true;
    }

    if ((UnitTypeTestAttribute(UnitGetType(lv_minion), c_unitAttributeBiological) == true) && (UnitFilterMatch(lv_minion, lv_killingPlayer, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterRobotic), 0)) == true)) {
        libGame_gf_GazloweReduceReuseRecycleProc(lv_killingPlayer, lv_minion);
        libGame_gf_BribeProc(lv_killingPlayer, lv_minion);
        libGame_gf_DiabloBlackSoulstoneProc(lv_killingPlayer, lv_minion);
        libGame_gf_DiabloEssenceOfTheSlainProc(lv_killingPlayer, lv_minion);
        libGame_gf_GenericSeasonedMarksmanProc(lv_killingPlayer, lv_minion);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_GameGeneralNPCProcListener_Init () {
    libGame_gt_GameGeneralNPCProcListener = TriggerCreate("libGame_gt_GameGeneralNPCProcListener_Func");
    libGame_gf_HeroParticipatedInNPCTakedown(libGame_gt_GameGeneralNPCProcListener);
}

//--------------------------------------------------------------------------------------------------
// Trigger: NPC Unit Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_NPCUnitDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_unit;
    string lv_unitType;
    int lv_minionIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_unit = EventUnit();
    lv_unitType = UnitGetType(lv_unit);
    if ((UnitTypeTestAttribute(lv_unitType, c_unitAttributeLight) == true)) {
        libGame_gf_CreepDies(lv_unit, libNtve_gf_KillingPlayer(), EventUnitDamageKillXP());
        return true;
    }

    lv_minionIndex = libAIAI_gf_MinionAIGetIndexForMinion(lv_unit);
    if ((lv_minionIndex != 0)) {
        libAIAI_gf_MinionAIFreeMinionIndex(lv_minionIndex);
    }

    if ((UnitTypeTestAttribute(lv_unitType, c_unitAttributeSummoned) == true)) {
        libGame_gf_AwardXPForNPCKill(lv_unit, EventPlayer(), c_unitAttributeSummoned, libNtve_gf_KillingPlayer(), EventUnitDamageKillXP());
        return true;
    }

    if ((UnitTypeTestAttribute(lv_unitType, c_unitAttributeBiological) == true) && (UnitTestState(lv_unit, c_unitStateHallucination) == false) && (libGame_gv_minionSystemStarted == true)) {
        libGame_gf_MinionDies(lv_unit, libNtve_gf_KillingPlayer(), EventUnitDamageKillXP());
        return true;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_NPCUnitDies_Init () {
    libGame_gt_NPCUnitDies = TriggerCreate("libGame_gt_NPCUnitDies_Func");
    TriggerAddEventUnitDied(libGame_gt_NPCUnitDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Town Structure Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TownStructureDies_Func (bool testConds, bool runActions) {
    int auto81D7249A_ae;
    int auto81D7249A_ai;
    unitgroup autoE376AD85_g;
    int autoE376AD85_u;
    playergroup auto8BB7E864_g;
    int auto8BB7E864_p;

    // Variable Declarations
    unit lv_dyingStructureUnit;
    int lv_victimTeam;
    int lv_townIndex;
    int lv_structureType;
    int lv_itPlayer;
    unit lv_itUnit;
    int lv_structureIndex;
    fixed lv_townHallAnimationExplodeTime;
    playergroup lv_nearbyPlayersGroup;
    playergroup lv_killingPlayersGroup;
    int lv_killingFaction;

    // Variable Initialization
    lv_dyingStructureUnit = EventUnit();
    lv_structureType = libGame_ge_TownStructureTypes_None;
    lv_townHallAnimationExplodeTime = 0.75;
    lv_nearbyPlayersGroup = PlayerGroupEmpty();
    lv_killingPlayersGroup = PlayerGroupEmpty();
    lv_killingFaction = libGame_ge_Faction_Neutral;

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(lv_dyingStructureUnit), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(lv_dyingStructureUnit), c_unitAttributeSummoned) == false))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_townIndex = libGame_gf_TownGetTownForUnit(lv_dyingStructureUnit);
    lv_structureType = libGame_gf_TownGetTownStructurePresetFromUnit(lv_dyingStructureUnit);
    lv_victimTeam = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_dyingStructureUnit));
    libGame_gf_AwardXPForNPCKill(lv_dyingStructureUnit, EventPlayer(), c_unitAttributeStructure, libNtve_gf_KillingPlayer(), EventUnitDamageKillXP());
    if ((UnitGetOwner(lv_dyingStructureUnit) == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_killingFaction = libGame_ge_Faction_Chaos;
    }
    else {
        lv_killingFaction = libGame_ge_Faction_Order;
    }
    if ((libGame_gv_townTownData[lv_townIndex].lv_structureTypes[lv_structureIndex] == libGame_ge_TownStructureTypes_TownHall)) {
        StatEventCreate("TownStructureDeath");
        StatEventAddDataInt(StatEventLastCreated(), "TownID", lv_townIndex);
        auto81D7249A_ae = libCore_gv_bALMaxPlayers;
        auto81D7249A_ai = 1;
        lv_itPlayer = 1;
        for ( ; ( (auto81D7249A_ai >= 0 && lv_itPlayer <= auto81D7249A_ae) || (auto81D7249A_ai <= 0 && lv_itPlayer >= auto81D7249A_ae) ) ; lv_itPlayer += auto81D7249A_ai ) {
            if ((libGame_gv_players[lv_itPlayer].lv_faction == lv_killingFaction) && (((libGame_gv_players[lv_itPlayer].lv_heroUnit != null) && (DistanceBetweenPoints(UnitGetPosition(libGame_gv_players[lv_itPlayer].lv_heroUnit), UnitGetPosition(lv_dyingStructureUnit)) <= libCore_gv_bALHeroKillXPRadius)) || ((libGame_gv_players[lv_itPlayer].lv_activeVehicle != null) && (DistanceBetweenPoints(UnitGetPosition(libGame_gv_players[lv_itPlayer].lv_activeVehicle), UnitGetPosition(lv_dyingStructureUnit)) <= libCore_gv_bALHeroKillXPRadius)))) {
                StatEventAddDataInt(StatEventLastCreated(), "KillingPlayer", lv_itPlayer);
                libGame_gv_scoreValues[lv_itPlayer].lv_townKills += 1;
            }

        }
        StatEventSend(StatEventLastCreated());
    }

    if ((lv_structureType == libGame_ge_TownStructureTypes_TownHall)) {
        if ((lv_killingFaction == libGame_ge_Faction_Order)) {
            libGame_gv_teams[1].lv_townKills += 1;
            libGame_gv_teams[2].lv_townsRemaining -= 1;
        }
        else {
            libGame_gv_teams[2].lv_townKills += 1;
            libGame_gv_teams[1].lv_townsRemaining -= 1;
        }
        autoE376AD85_g = UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(lv_dyingStructureUnit), 15.0), libCore_gv_filtersHeroic, 0);
        autoE376AD85_u = 1;
        for ( ; autoE376AD85_u <= UnitGroupCount(autoE376AD85_g, c_unitCountAll) ; autoE376AD85_u += (lv_itUnit == UnitGroupUnit(autoE376AD85_g, autoE376AD85_u)) ) {
            lv_itUnit = UnitGroupUnit(autoE376AD85_g, autoE376AD85_u);
            if ((libNtve_gf_PlayerIsEnemy(UnitGetOwner(lv_itUnit), UnitGetOwner(lv_dyingStructureUnit), libNtve_ge_PlayerRelation_Enemy) == true)) {
                PlayerGroupAdd(lv_killingPlayersGroup, UnitGetOwner(lv_itUnit));
            }

            PlayerGroupAdd(lv_nearbyPlayersGroup, UnitGetOwner(lv_itUnit));
        }
        libGame_gf_BuildingDiesCameraShake(lv_townHallAnimationExplodeTime, "Heavy", lv_nearbyPlayersGroup);
        libGame_gf_TownUpgradeBruiserMinions(lv_townIndex);
        libGame_gf_TownAnnounceTownDestroyed(lv_townIndex, libGame_gf_TownGetTownHallPresetFromUnitID(UnitGetType(lv_dyingStructureUnit)));
        auto8BB7E864_g = lv_killingPlayersGroup; 
        auto8BB7E864_p = 1;
        for ( ; auto8BB7E864_p <= PlayerGroupCount(auto8BB7E864_g) ; auto8BB7E864_p += (lv_itPlayer == PlayerGroupPlayer(auto8BB7E864_g, auto8BB7E864_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto8BB7E864_g, auto8BB7E864_p);
            libSond_gf_HeroVOStartCelebrateVOTimerForPlayer(lv_itPlayer, lv_killingPlayersGroup);
        }
        if ((libGame_gv_townDestructionRemovesCoreInvulnerable == true) && (libCore_gv_sYSGameMode != libCore_ge_GameModes_TryMe) && (libGame_gf_TownAliveinLane(lv_victimTeam, libGame_gv_townTownData[lv_townIndex].lv_lane) == false)) {
            UnitBehaviorRemove(libGame_gv_teams[lv_victimTeam].lv_core, "CoreInvulnerability", 1);
        }

        libGame_gf_TownUnhideMinimapIconsOnMoonwellUnits(lv_townIndex);
    }

    if ((lv_structureType == libGame_ge_TownStructureTypes_Moonwell)) {
        libGame_gf_TownRemoveMoonwellMinimapIconsFromTown(lv_townIndex);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TownStructureDies_Init () {
    libGame_gt_TownStructureDies = TriggerCreate("libGame_gt_TownStructureDies_Func");
    TriggerAddEventUnitDied(libGame_gt_TownStructureDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core Dies (Game Over)
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CoreDiesGameOver_Func (bool testConds, bool runActions) {
    int auto0239D8C8_ae;
    int auto0239D8C8_ai;
    unitgroup autoFE95939E_g;
    int autoFE95939E_u;

    // Variable Declarations
    int lv_itPlayerTracking;
    const fixed lv_coreAnimationWaitExplodeTime = 2.8;
    int lv_itPlayer;
    unit lv_itHeroUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSGameMode != libCore_ge_GameModes_ArenaMode))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_gameOver = true;
    if ((EventUnit() == libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core)) {
        libGame_gv_teamOrderCoreAlive = false;
    }

    TimerPause(libGame_gv_gameTimer, true);
    TimerPause(libGame_gv_matchGameplayTimer, true);
    UnitPauseAll(true);
    auto0239D8C8_ae = libCore_gv_bALMaxPlayers;
    auto0239D8C8_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto0239D8C8_ai >= 0 && lv_itPlayer <= auto0239D8C8_ae) || (auto0239D8C8_ai <= 0 && lv_itPlayer >= auto0239D8C8_ae) ) ; lv_itPlayer += auto0239D8C8_ai ) {
        autoFE95939E_g = libGame_gv_players[lv_itPlayer].lv_heroUnitGroup;
        autoFE95939E_u = 1;
        for ( ; autoFE95939E_u <= UnitGroupCount(autoFE95939E_g, c_unitCountAll) ; autoFE95939E_u += (lv_itHeroUnit == UnitGroupUnit(autoFE95939E_g, autoFE95939E_u)) ) {
            lv_itHeroUnit = UnitGroupUnit(autoFE95939E_g, autoFE95939E_u);
            libNtve_gf_ChangeUnitDamage(lv_itHeroUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Deal, libNtve_ge_UnitDamageChangeOption_No);
            libNtve_gf_ChangeUnitDamage(lv_itHeroUnit, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
        }
    }
    libNtve_gf_ChangeUnitDamage(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libNtve_gf_ChangeUnitDamage(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, libNtve_ge_UnitDamageTakenDealt_Damage_Take, libNtve_ge_UnitDamageChangeOption_No);
    libAIAI_gf_MinionAIPauseUnpauseMinionAISystem(true);
    libUIUI_gf_DeathTimerPanelPauseTimerAnimations();
    VisRevealerCreate(libCore_gv_cOMPUTER_TeamOrder, RegionCircle(UnitGetPosition(EventUnit()), 4.0));
    VisRevealerCreate(libCore_gv_cOMPUTER_TeamChaos, RegionCircle(UnitGetPosition(EventUnit()), 4.0));
    libGame_gf_BuildingDiesCameraShake(lv_coreAnimationWaitExplodeTime, "Massive", libCore_gv_activeHumanPlayers);
    PlayerGroupLoopBegin(libCore_gv_activeHumanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraLockInput(PlayerGroupLoopCurrent(), true);
        PlayerOptionOverride(PlayerGroupLoopCurrent(), "camerafollow", "0");
        libGame_gf_HeroDeathEnableDisableDeadSoundStateForPlayer(false, PlayerGroupLoopCurrent());
    }
    PlayerGroupLoopEnd();
    Wait(0.0625, c_timeGame);
    PlayerGroupLoopBegin(libCore_gv_activeHumanPlayers);
    for ( ; !PlayerGroupLoopDone() ; PlayerGroupLoopStep() ) {
        CameraFollowUnitGroup(PlayerGroupLoopCurrent(), CameraFollowUnitGroupGet(PlayerGroupLoopCurrent()), false, false);
        libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(PlayerGroupLoopCurrent(), UnitGetPosition(EventUnit()), libGame_gv_gameOver_CameraPanTime_C, -1, 10, false);
    }
    PlayerGroupLoopEnd();
    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(libCore_gv_oBSERVER_ObserverUIPlayer, UnitGetPosition(EventUnit()), libGame_gv_gameOver_CameraPanTime_C, -1, 10, false);
    SetTalentsEnabled(false);
    TriggerExecute(libGame_gt_DetermineWinningTeam, true, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CoreDiesGameOver_Init () {
    libGame_gt_CoreDiesGameOver = TriggerCreate("libGame_gt_CoreDiesGameOver_Func");
    TriggerAddEventUnitDied(libGame_gt_CoreDiesGameOver, UnitRefFromVariable("libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core"));
    TriggerAddEventUnitDied(libGame_gt_CoreDiesGameOver, UnitRefFromVariable("libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: Level Up
//--------------------------------------------------------------------------------------------------
bool libGame_gt_LevelUp_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetOwner(EventUnit()) > 0))) {
            return false;
        }

        if (!((UnitGetOwner(EventUnit()) <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }

        if (!((EventUnitBehavior() == "HeroDummyVeterancy"))) {
            return false;
        }

        if (!((UnitHasBehavior2(EventUnit(), "AbnormalExperienceGain") == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_LevelUpHero(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_LevelUp_Init () {
    libGame_gt_LevelUp = TriggerCreate("libGame_gt_LevelUp_Func");
    TriggerAddEventUnitGainLevel(libGame_gt_LevelUp, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Recent Damage Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_RecentDamageTimerExpires_Func (bool testConds, bool runActions) {
    int autoB30A3530_ae;
    int autoB30A3530_ai;
    int auto28EF0F20_ae;
    int auto28EF0F20_ai;

    // Variable Declarations
    int lv_i;
    int lv_playerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoB30A3530_ae = libCore_gv_bALMaxPlayers;
    autoB30A3530_ai = 1;
    lv_i = 1;
    for ( ; ( (autoB30A3530_ai >= 0 && lv_i <= autoB30A3530_ae) || (autoB30A3530_ai <= 0 && lv_i >= autoB30A3530_ae) ) ; lv_i += autoB30A3530_ai ) {
        if ((EventTimer() == libGame_gv_players[lv_i].lv_recentDamageResetTimer)) {
            lv_playerIndex = lv_i;
            break;
        }

    }
    if ((lv_playerIndex != 0)) {
        auto28EF0F20_ae = libCore_gv_bALMaxPlayers;
        auto28EF0F20_ai = 1;
        lv_i = 1;
        for ( ; ( (auto28EF0F20_ai >= 0 && lv_i <= auto28EF0F20_ae) || (auto28EF0F20_ai <= 0 && lv_i >= auto28EF0F20_ae) ) ; lv_i += auto28EF0F20_ai ) {
            libGame_gv_players[lv_playerIndex].lv_recentPlayerDamageReceived[lv_i] = 0.0;
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_RecentDamageTimerExpires_Init () {
    libGame_gt_RecentDamageTimerExpires = TriggerCreate("libGame_gt_RecentDamageTimerExpires_Func");
    TriggerAddEventTimer(libGame_gt_RecentDamageTimerExpires, libGame_gv_players[1].lv_recentDamageResetTimer);
    TriggerAddEventTimer(libGame_gt_RecentDamageTimerExpires, libGame_gv_players[2].lv_recentDamageResetTimer);
    TriggerAddEventTimer(libGame_gt_RecentDamageTimerExpires, libGame_gv_players[3].lv_recentDamageResetTimer);
    TriggerAddEventTimer(libGame_gt_RecentDamageTimerExpires, libGame_gv_players[4].lv_recentDamageResetTimer);
    TriggerAddEventTimer(libGame_gt_RecentDamageTimerExpires, libGame_gv_players[5].lv_recentDamageResetTimer);
    TriggerAddEventTimer(libGame_gt_RecentDamageTimerExpires, libGame_gv_players[6].lv_recentDamageResetTimer);
    TriggerAddEventTimer(libGame_gt_RecentDamageTimerExpires, libGame_gv_players[7].lv_recentDamageResetTimer);
    TriggerAddEventTimer(libGame_gt_RecentDamageTimerExpires, libGame_gv_players[8].lv_recentDamageResetTimer);
    TriggerAddEventTimer(libGame_gt_RecentDamageTimerExpires, libGame_gv_players[9].lv_recentDamageResetTimer);
    TriggerAddEventTimer(libGame_gt_RecentDamageTimerExpires, libGame_gv_players[10].lv_recentDamageResetTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Damage Tracking
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroDamageTracking_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_eventUnitDamageSourcePlayer;
    int lv_eventPlayer;
    string lv_triggeringUnitType;
    string lv_damagingUnitType;
    int lv_damageTaken;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_eventUnitDamageSourcePlayer = EventUnitDamageSourcePlayer();
    lv_eventPlayer = EventPlayer();
    lv_triggeringUnitType = UnitGetType(EventUnit());
    lv_damagingUnitType = UnitGetType(EventUnitDamageSourceUnit());
    lv_damageTaken = FixedToInt(EventUnitDamageAmount());
    if ((lv_eventPlayer <= libCore_gv_bALMaxPlayers) && (UnitTypeTestAttribute(lv_triggeringUnitType, c_unitAttributeHeroic) == true) && (UnitTestState(EventUnit(), c_unitStateHallucination) == false) && (UnitHasBehavior(EventUnit(), "GenericVehicleBehaviorEmpty") == false) && (UnitHasBehavior(EventUnit(), "GenericVehicleBehaviorOccupied") == false)) {
        if ((lv_eventUnitDamageSourcePlayer != 15)) {
            libGame_gv_scoreValues[lv_eventPlayer].lv_damageTaken += FixedToInt(EventUnitDamageAbsorbed());
            libGame_gf_AddGuardianDamage(EventUnitDamageAbsorbed(), lv_eventPlayer);
            libGame_gf_AddScrapperDamage(lv_damageTaken, lv_eventUnitDamageSourcePlayer);
            if ((PlayerGroupHasPlayer(libGame_gv_players[lv_eventPlayer].lv_heroData.lv_heroRoles, (c_heroRoleWarrior)) == true)) {
                libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_eventPlayer, "DamageTaken", libGame_gv_scoreValues[lv_eventPlayer].lv_damageTaken);
            }

        }

        if ((UnitTypeTestAttribute(lv_damagingUnitType, c_unitAttributeHeroic) == true) && (UnitTestState(EventUnitDamageSourceUnit(), c_unitStateHallucination) == false)) {
            if ((lv_eventUnitDamageSourcePlayer <= libCore_gv_bALMaxPlayers)) {
                libGame_gv_players[lv_eventPlayer].lv_recentPlayerDamageReceived[lv_eventUnitDamageSourcePlayer] += IntToFixed(lv_damageTaken);
            }

        }

        TimerStart(libGame_gv_players[lv_eventPlayer].lv_recentDamageResetTimer, libCore_gv_bALRecentDamageResetTime, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroDamageTracking_Init () {
    libGame_gt_HeroDamageTracking = TriggerCreate("libGame_gt_HeroDamageTracking_Func");
    TriggerAddEventUnitDamaged(libGame_gt_HeroDamageTracking, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero Kill Credit Proximity Tracking
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroKillCreditProximityTracking_Func (bool testConds, bool runActions) {
    int auto98CCDFBA_ae;
    int auto98CCDFBA_ai;
    unitgroup auto6101B342_g;
    int auto6101B342_u;

    // Variable Declarations
    const int lv_heroIndexMod = 2;
    int lv_player;
    unit lv_u;
    fixed lv_missionTime;
    int lv_firstIndex;
    int lv_owner;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_missionTime = GameGetMissionTime();
    lv_firstIndex = ModI(FixedToInt((lv_missionTime / 0.0625)), lv_heroIndexMod);
    auto98CCDFBA_ae = libCore_gv_bALMaxPlayers;
    auto98CCDFBA_ai = lv_heroIndexMod;
    lv_player = lv_firstIndex;
    for ( ; ( (auto98CCDFBA_ai >= 0 && lv_player <= auto98CCDFBA_ae) || (auto98CCDFBA_ai <= 0 && lv_player >= auto98CCDFBA_ae) ) ; lv_player += auto98CCDFBA_ai ) {
        if ((UnitIsAlive(libGame_gv_players[lv_player].lv_heroUnit) == true)) {
            auto6101B342_g = UnitGroupSearch(null, lv_player, UnitGetPosition(libGame_gv_players[lv_player].lv_heroUnit), libCore_gv_bALHeroKillXPRadius, libCore_gv_filtersHeroicEnemyandnotHallucination, 0);
            auto6101B342_u = 1;
            for ( ; auto6101B342_u <= UnitGroupCount(auto6101B342_g, c_unitCountAll) ; auto6101B342_u += (lv_u == UnitGroupUnit(auto6101B342_g, auto6101B342_u)) ) {
                lv_u = UnitGroupUnit(auto6101B342_g, auto6101B342_u);
                lv_owner = UnitGetOwner(lv_u);
                if ((lv_owner <= libCore_gv_bALMaxPlayers)) {
                    libGame_gv_players[lv_player].lv_lastTimeHeroWasWithinXPRadius[lv_owner] = lv_missionTime;
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroKillCreditProximityTracking_Init () {
    libGame_gt_HeroKillCreditProximityTracking = TriggerCreate("libGame_gt_HeroKillCreditProximityTracking_Func");
    TriggerAddEventTimePeriodic(libGame_gt_HeroKillCreditProximityTracking, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Hero XP Changes
//--------------------------------------------------------------------------------------------------
bool libGame_gt_HeroXPChanges_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((EventPlayer() >= 1))) {
            return false;
        }

        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((EventUnit() == libGame_gv_players[EventPlayer()].lv_heroUnit))) {
            return false;
        }

        if (!((libGame_gv_players[EventPlayer()].lv_suppressLevelUpFXAndTeamXPTracking == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_team = libGame_gf_TeamNumberOfPlayer(EventPlayer());
    libGame_gv_teams[lv_team].lv_xPTotals += EventUnitPropertyChangeInt();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_HeroXPChanges_Init () {
    libGame_gt_HeroXPChanges = TriggerCreate("libGame_gt_HeroXPChanges_Func");
    TriggerAddEventUnitProperty(libGame_gt_HeroXPChanges, null, c_unitPropXP);
}

//--------------------------------------------------------------------------------------------------
// Trigger: XP Trickle
//--------------------------------------------------------------------------------------------------
bool libGame_gt_XPTrickle_Func (bool testConds, bool runActions) {
    unitgroup autoAEA68A5B_g;
    int autoAEA68A5B_u;

    // Variable Declarations
    unit lv_u;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSXPOn == true))) {
            return false;
        }

        if (!((libGame_gv_xPTrickleEnabled == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoAEA68A5B_g = libGame_gv_heroes;
    autoAEA68A5B_u = 1;
    for ( ; autoAEA68A5B_u <= UnitGroupCount(autoAEA68A5B_g, c_unitCountAll) ; autoAEA68A5B_u += (lv_u == UnitGroupUnit(autoAEA68A5B_g, autoAEA68A5B_u)) ) {
        lv_u = UnitGroupUnit(autoAEA68A5B_g, autoAEA68A5B_u);
        libGame_gf_GrantXPToPlayer((libCore_gv_data_XP_TrickleAmount_C * libGame_gv_xPTrickleModifier[libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_u))]), UnitGetOwner(lv_u), libGame_ge_XPSources_Trickle);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_XPTrickle_Init () {
    libGame_gt_XPTrickle = TriggerCreate("libGame_gt_XPTrickle_Func");
    TriggerEnable(libGame_gt_XPTrickle, false);
    TriggerAddEventTimePeriodic(libGame_gt_XPTrickle, libCore_gv_data_XP_TricklePeriod_C, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player - Home Shield Protection On
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerHomeShieldProtectionOn_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_heroUnit;
    int lv_heroUnitOwner;

    // Variable Initialization
    lv_heroUnit = EventUnit();
    lv_heroUnitOwner = UnitGetOwner(lv_heroUnit);

    // Conditions
    if (testConds) {
        if (!((lv_heroUnitOwner >= 1))) {
            return false;
        }

        if (!((lv_heroUnitOwner <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(lv_heroUnit), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitGetType(lv_heroUnit) != "HeroAbathur"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(lv_heroUnit, "HeroGenericHomeShieldProtectionMountModifyCooldown", lv_heroUnit);
    if (((libGame_gv_players[lv_heroUnitOwner].lv_heroUnit == lv_heroUnit) || (libGame_gv_players[lv_heroUnitOwner].lv_activeVehicle == lv_heroUnit))) {
        CatalogFieldValueSet(c_gameCatalogAbil, "Mount", "CastIntroTime[" + IntToString(0) + "]", lv_heroUnitOwner, "0");
        CatalogFieldValueSet(c_gameCatalogAbil, "Mount", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lv_heroUnitOwner, "0");
        CatalogFieldValueSet(c_gameCatalogAbil, "RehgarGhostWolfActivate", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lv_heroUnitOwner, "0");
        CatalogFieldValueSet(c_gameCatalogEffect, "GhostWolfModifyCooldown", "Cost[" + IntToString(0) + "].CooldownTimeUse", lv_heroUnitOwner, "0.5");
        CatalogFieldValueSet(c_gameCatalogEffect, "RehgarGhostWolfModifyCancelCooldown", "Cost[" + IntToString(0) + "].CooldownTimeUse", lv_heroUnitOwner, "0");
        CatalogFieldValueSet(c_gameCatalogAbil, "IllidanMetamorphosisMountCustom", "CastIntroTime[" + IntToString(0) + "]", lv_heroUnitOwner, "0");
        CatalogFieldValueSet(c_gameCatalogAbil, "IllidanMetamorphosisMountCustom", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lv_heroUnitOwner, "0");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerHomeShieldProtectionOn_Init () {
    libGame_gt_PlayerHomeShieldProtectionOn = TriggerCreate("libGame_gt_PlayerHomeShieldProtectionOn_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_PlayerHomeShieldProtectionOn, null, "HomeShieldProtection", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player - Home Shield Protection Off
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerHomeShieldProtectionOff_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_heroUnit;
    int lv_heroUnitOwner;

    // Variable Initialization
    lv_heroUnit = EventUnit();
    lv_heroUnitOwner = UnitGetOwner(lv_heroUnit);

    // Conditions
    if (testConds) {
        if (!((lv_heroUnitOwner >= 1))) {
            return false;
        }

        if (!((lv_heroUnitOwner <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(lv_heroUnit), c_unitAttributeHeroic) == true))) {
            return false;
        }

        if (!((UnitGetType(lv_heroUnit) != "HeroAbathur"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libGame_gv_players[lv_heroUnitOwner].lv_heroUnit == lv_heroUnit) || (libGame_gv_players[lv_heroUnitOwner].lv_activeVehicle == lv_heroUnit))) {
        CatalogFieldValueSet(c_gameCatalogAbil, "Mount", "CastIntroTime[" + IntToString(0) + "]", lv_heroUnitOwner, CatalogFieldValueGet(c_gameCatalogAbil, "Mount", "CastIntroTime[" + IntToString(0) + "]", 0));
        CatalogFieldValueSet(c_gameCatalogAbil, "Mount", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lv_heroUnitOwner, CatalogFieldValueGet(c_gameCatalogAbil, "Mount", "Cost.Cooldown.TimeUse", 0));
        CatalogFieldValueSet(c_gameCatalogAbil, "RehgarGhostWolfActivate", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lv_heroUnitOwner, "1");
        CatalogFieldValueSet(c_gameCatalogEffect, "GhostWolfModifyCooldown", "Cost[" + IntToString(0) + "].CooldownTimeUse", lv_heroUnitOwner, "4");
        CatalogFieldValueSet(c_gameCatalogEffect, "RehgarGhostWolfModifyCancelCooldown", "Cost[" + IntToString(0) + "].CooldownTimeUse", lv_heroUnitOwner, "1.5");
        CatalogFieldValueSet(c_gameCatalogAbil, "IllidanMetamorphosisMountCustom", "CastIntroTime[" + IntToString(0) + "]", lv_heroUnitOwner, CatalogFieldValueGet(c_gameCatalogAbil, "Mount", "CastIntroTime[" + IntToString(0) + "]", 0));
        CatalogFieldValueSet(c_gameCatalogAbil, "IllidanMetamorphosisMountCustom", "Cost[" + IntToString(0) + "].Cooldown.TimeUse", lv_heroUnitOwner, "1");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerHomeShieldProtectionOff_Init () {
    libGame_gt_PlayerHomeShieldProtectionOff = TriggerCreate("libGame_gt_PlayerHomeShieldProtectionOff_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_PlayerHomeShieldProtectionOff, null, "HomeShieldProtection", c_unitBehaviorChangeDeactivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player - Shrub Proximity Reveal Proc
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerShrubProximityRevealProc_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "ShrubProximityRevealApplyRevealer", EventPlayerEffectUsedUnit(c_effectUnitCaster));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerShrubProximityRevealProc_Init () {
    libGame_gt_PlayerShrubProximityRevealProc = TriggerCreate("libGame_gt_PlayerShrubProximityRevealProc_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_PlayerShrubProximityRevealProc, c_playerAny, "ShrubProximityRevealDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player - Hero Displacement Behaviors
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerHeroDisplacementBehaviors_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Conditions
    if (testConds) {
        if (!(((UnitGetOwner(EventUnit()) >= 1) && (UnitGetOwner(EventUnit()) <= 10) && (EventUnit() == libGame_gv_players[lv_player].lv_heroUnit) && (UnitIsAlive(EventUnit()) == true)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_PlayerHeroDisplacementCameraLock(EventUnit(), EventUnitBehavior());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerHeroDisplacementBehaviors_Init () {
    libGame_gt_PlayerHeroDisplacementBehaviors = TriggerCreate("libGame_gt_PlayerHeroDisplacementBehaviors_Func");
    TriggerAddEventUnitBehaviorChange(libGame_gt_PlayerHeroDisplacementBehaviors, null, "DragonKnightBullRushTargetKnockback", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGame_gt_PlayerHeroDisplacementBehaviors, null, "Hooked", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGame_gt_PlayerHeroDisplacementBehaviors, null, "StitchesGorgeCameraLockBehavior", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGame_gt_PlayerHeroDisplacementBehaviors, null, "HaymakerTargetBehaviorKnockback", c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChange(libGame_gt_PlayerHeroDisplacementBehaviors, null, "JudgementKnockback", c_unitBehaviorChangeActivate);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player - Regen Globe Dummy Impact
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerRegenGlobeDummyImpact_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitTarget), "RegenGlobeImpactSet", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerRegenGlobeDummyImpact_Init () {
    libGame_gt_PlayerRegenGlobeDummyImpact = TriggerCreate("libGame_gt_PlayerRegenGlobeDummyImpact_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_PlayerRegenGlobeDummyImpact, c_playerAny, "RegenGlobePickupImpactDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Player - Regen Globe Neutral Dummy Set
//--------------------------------------------------------------------------------------------------
bool libGame_gt_PlayerRegenGlobeNeutralDummySet_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget))) == libGame_gv_teamOrderIndex_C)) {
        UnitSetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster), libCore_gv_cOMPUTER_TeamOrder, false);
    }
    else {
        UnitSetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster), libCore_gv_cOMPUTER_TeamChaos, false);
    }
    UnitCreateEffectUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster), "RegenGlobePickupSet", EventPlayerEffectUsedUnit(c_effectUnitTarget));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_PlayerRegenGlobeNeutralDummySet_Init () {
    libGame_gt_PlayerRegenGlobeNeutralDummySet = TriggerCreate("libGame_gt_PlayerRegenGlobeNeutralDummySet_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_PlayerRegenGlobeNeutralDummySet, c_playerAny, "RegenGlobeNeutralDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Scaling Timer Expiration
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScalingTimerExpiration_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_scalingTicks += 1;
    if ((libGame_gv_scalingTicks > libCore_gv_dataScalingMaxScalingTicks)) {
        libGame_gv_scalingTicks = libCore_gv_dataScalingMaxScalingTicks;
    }

    TriggerExecute(libGame_gt_JungleScalingTimerExpires, true, false);
    TriggerExecute(libGame_gt_CoreScalingTimerExpires, true, false);
    TriggerExecute(libGame_gt_TownScalingTimerExpires, true, false);
    libGame_gf_SendEventScalingIncremented();
    TimerStart(libGame_gv_scalingTimer, libGame_gv_bALScalingTimerDuration, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScalingTimerExpiration_Init () {
    libGame_gt_ScalingTimerExpiration = TriggerCreate("libGame_gt_ScalingTimerExpiration_Func");
    TriggerAddEventTimer(libGame_gt_ScalingTimerExpiration, libGame_gv_scalingTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Scaling Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_JungleScalingTimerExpires_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSJungleCreepCamps == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_JungleUpdateScalingForCamps();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_JungleScalingTimerExpires_Init () {
    libGame_gt_JungleScalingTimerExpires = TriggerCreate("libGame_gt_JungleScalingTimerExpires_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Core - Scaling Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_CoreScalingTimerExpires_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSMinionAI == true))) {
            return false;
        }

        if (!((libCore_gv_sYSGameMode != libCore_ge_GameModes_ArenaMode))) {
            return false;
        }

        if (!((libCore_gv_sYSGameMode != libCore_ge_GameModes_AttackDefend))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_CoreUpdateScaling();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_CoreScalingTimerExpires_Init () {
    libGame_gt_CoreScalingTimerExpires = TriggerCreate("libGame_gt_CoreScalingTimerExpires_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Town - Scaling Timer Expires
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TownScalingTimerExpires_Func (bool testConds, bool runActions) {
    int auto7FA69FE1_ae;
    int auto7FA69FE1_ai;
    int auto06675179_ae;
    int auto06675179_ai;

    // Variable Declarations
    int lv_townIndex;
    int lv_structureIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSMinionAI == true))) {
            return false;
        }

        if (!((libCore_gv_sYSGameMode != libCore_ge_GameModes_ArenaMode))) {
            return false;
        }

        if (!((libCore_gv_sYSGameMode != libCore_ge_GameModes_AttackDefend))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libGame_gv_buildingScalingEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7FA69FE1_ae = libGame_gv_townTownCount;
    auto7FA69FE1_ai = 1;
    lv_townIndex = 1;
    for ( ; ( (auto7FA69FE1_ai >= 0 && lv_townIndex <= auto7FA69FE1_ae) || (auto7FA69FE1_ai <= 0 && lv_townIndex >= auto7FA69FE1_ae) ) ; lv_townIndex += auto7FA69FE1_ai ) {
        auto06675179_ae = libGame_gv_townTownData[lv_townIndex].lv_structureCount;
        auto06675179_ai = 1;
        lv_structureIndex = 1;
        for ( ; ( (auto06675179_ai >= 0 && lv_structureIndex <= auto06675179_ae) || (auto06675179_ai <= 0 && lv_structureIndex >= auto06675179_ae) ) ; lv_structureIndex += auto06675179_ai ) {
            if ((UnitGetType(libGame_gv_townTownData[lv_townIndex].lv_structureUnits[lv_structureIndex]) != "KingsCore")) {
                DataTableSetFixed(true, ("%BuildingScalingLifePercent%" + IntToString(UnitGetTag(libGame_gv_townTownData[lv_townIndex].lv_structureUnits[lv_structureIndex]))), UnitGetPropertyFixed(libGame_gv_townTownData[lv_townIndex].lv_structureUnits[lv_structureIndex], c_unitPropLifePercent, c_unitPropCurrent));
            }

        }
    }
    if ((libGame_gv_scalingTicks <= 15)) {
        libGame_gf_TownUpdateL2BuildingScaling(0);
    }

    if ((libGame_gv_scalingTicks >= 11) && (libGame_gv_scalingTicks <= 20)) {
        libGame_gf_TownUpdateL3BuildingScaling(0);
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitGetType(UnitGroupLoopCurrent()) != "KingsCore")) {
            UnitSetPropertyFixed(UnitGroupLoopCurrent(), c_unitPropLifePercent, DataTableGetFixed(true, ("%BuildingScalingLifePercent%" + IntToString(UnitGetTag(UnitGroupLoopCurrent())))));
        }

    }
    UnitGroupLoopEnd();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TownScalingTimerExpires_Init () {
    libGame_gt_TownScalingTimerExpires = TriggerCreate("libGame_gt_TownScalingTimerExpires_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Tracking Time CCd Enemy Heroes
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScoreTrackingTimeCCdEnemyHeroes_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_triggeringUnit;
    int lv_caster;
    fixed lv_duration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringUnit = EventUnit();
    if (((UnitGetOwner(lv_triggeringUnit) <= 0) || (UnitGetOwner(lv_triggeringUnit) > libCore_gv_bALMaxPlayers) || (UnitTypeTestAttribute(UnitGetType(lv_triggeringUnit), c_unitAttributeHeroic) == false) || (UnitTestState(lv_triggeringUnit, c_unitStateHallucination) == true))) {
        return true;
    }

    lv_caster = UnitBehaviorEffectPlayer(lv_triggeringUnit, EventUnitBehavior(), c_effectPlayerCaster, 0);
    if (((lv_caster <= 0) || (lv_caster > libCore_gv_bALMaxPlayers))) {
        return true;
    }

    lv_duration = UnitBehaviorDurationTotal(lv_triggeringUnit, EventUnitBehavior());
    if ((lv_duration > 10.0)) {
        lv_duration = 10.0;
    }

    libGame_gv_scoreValues[lv_caster].lv_timeCCdEnemyHeroes += lv_duration;
    libGame_gf_ScoreValuesReportRealValueAndLog(lv_caster, "TimeCCdEnemyHeroes", libGame_gv_scoreValues[lv_caster].lv_timeCCdEnemyHeroes);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScoreTrackingTimeCCdEnemyHeroes_Init () {
    libGame_gt_ScoreTrackingTimeCCdEnemyHeroes = TriggerCreate("libGame_gt_ScoreTrackingTimeCCdEnemyHeroes_Func");
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_ScoreTrackingTimeCCdEnemyHeroes, null, c_behaviorCategorySlow, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_ScoreTrackingTimeCCdEnemyHeroes, null, c_behaviorCategorySlow, c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_ScoreTrackingTimeCCdEnemyHeroes, null, c_behaviorCategoryUser5, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_ScoreTrackingTimeCCdEnemyHeroes, null, c_behaviorCategoryUser5, c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_ScoreTrackingTimeCCdEnemyHeroes, null, c_behaviorCategoryStun, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_ScoreTrackingTimeCCdEnemyHeroes, null, c_behaviorCategoryStun, c_unitBehaviorChangeRefresh);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_ScoreTrackingTimeCCdEnemyHeroes, null, c_behaviorCategoryUser6, c_unitBehaviorChangeActivate);
    TriggerAddEventUnitBehaviorChangeFromCategory(libGame_gt_ScoreTrackingTimeCCdEnemyHeroes, null, c_behaviorCategoryUser6, c_unitBehaviorChangeRefresh);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Tracking Raven Tribute Collected
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScoreTrackingRavenTributeCollected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;
    int lv_triggeringPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringPlayer = libGame_gf_MapCursedHollowTributePickedUpPlayer();
    libGame_gv_scoreValues[lv_triggeringPlayer].lv_tributesCollected += 1;
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_triggeringPlayer, "MapMechanics", libGame_gv_scoreValues[lv_triggeringPlayer].lv_tributesCollected);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_triggeringPlayer, "RavenTributesCollected", libGame_gv_scoreValues[lv_triggeringPlayer].lv_tributesCollected);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScoreTrackingRavenTributeCollected_Init () {
    libGame_gt_ScoreTrackingRavenTributeCollected = TriggerCreate("libGame_gt_ScoreTrackingRavenTributeCollected_Func");
    libGame_gf_MapCursedHollowTributePickedUp(libGame_gt_ScoreTrackingRavenTributeCollected);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Tracking Dragon Activated
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScoreTrackingDragonActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;
    int lv_triggeringPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringPlayer = libGame_gf_MapDragonShireDragonActivatedDragonPlayer();
    libGame_gv_scoreValues[lv_triggeringPlayer].lv_dragonCaptures += 1;
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_triggeringPlayer, "MapMechanics", libGame_gv_scoreValues[lv_triggeringPlayer].lv_dragonCaptures);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_triggeringPlayer, "DragonNumberOfDragonCaptures", libGame_gv_scoreValues[lv_triggeringPlayer].lv_dragonCaptures);
    libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(libGame_gf_MapDragonShireDragonActivatedDragonPlayer())].lv_map_DragonCaptures += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScoreTrackingDragonActivated_Init () {
    libGame_gt_ScoreTrackingDragonActivated = TriggerCreate("libGame_gt_ScoreTrackingDragonActivated_Func");
    libGame_gf_MapDragonShireDragonActivated(libGame_gt_ScoreTrackingDragonActivated);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Tracking Dragon Shrine Captured
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScoreTrackingDragonShrineCaptured_Func (bool testConds, bool runActions) {
    playergroup auto2D8867FF_g;
    int auto2D8867FF_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gf_MapDragonShireObeliskOwnershipChangeTeam() == 0)) {
        return true;
    }

    auto2D8867FF_g = libGame_gf_MapDragonShireObeliskOwnershipChangeCapturingPlayers(); 
    auto2D8867FF_p = 1;
    for ( ; auto2D8867FF_p <= PlayerGroupCount(auto2D8867FF_g) ; auto2D8867FF_p += (lv_itPlayer == PlayerGroupPlayer(auto2D8867FF_g, auto2D8867FF_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto2D8867FF_g, auto2D8867FF_p);
        libGame_gv_scoreValues[lv_itPlayer].lv_dragonShrineCaptures += 1;
        libGame_gf_SendMapSpecificAwardEvent(lv_itPlayer, libGame_gv_scoreValues[lv_itPlayer].lv_dragonShrineCaptures, false);
        libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_itPlayer, "DragonShrinesCaptured", libGame_gv_scoreValues[lv_itPlayer].lv_dragonShrineCaptures);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScoreTrackingDragonShrineCaptured_Init () {
    libGame_gt_ScoreTrackingDragonShrineCaptured = TriggerCreate("libGame_gt_ScoreTrackingDragonShrineCaptured_Func");
    libGame_gf_MapDragonShireObeliskOwnershipChange(libGame_gt_ScoreTrackingDragonShrineCaptured);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Tracking Skull Collected
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScoreTrackingSkullCollected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;
    int lv_triggeringPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringPlayer = libGame_gf_MapHauntedMinesSkullCollectedCollectingPlayer();
    libGame_gv_scoreValues[lv_triggeringPlayer].lv_skullsCollected += 1;
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_triggeringPlayer, "MapMechanics", libGame_gv_scoreValues[lv_triggeringPlayer].lv_skullsCollected);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_triggeringPlayer, "MinesSkullsCollected", libGame_gv_scoreValues[lv_triggeringPlayer].lv_skullsCollected);
    libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_triggeringPlayer)].lv_map_SkullsCollected += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScoreTrackingSkullCollected_Init () {
    libGame_gt_ScoreTrackingSkullCollected = TriggerCreate("libGame_gt_ScoreTrackingSkullCollected_Func");
    libGame_gf_MapHauntedMinesSkullCollected(libGame_gt_ScoreTrackingSkullCollected);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Score Tracking Seed Collected
//--------------------------------------------------------------------------------------------------
bool libGame_gt_ScoreTrackingSeedCollected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;
    int lv_triggeringPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_triggeringPlayer = libGame_gf_MapGardenOfTerrorSeedsCollectedCollectingPlayer();
    libGame_gv_scoreValues[lv_triggeringPlayer].lv_seedsCollected += 1;
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_triggeringPlayer, "MapMechanics", libGame_gv_scoreValues[lv_triggeringPlayer].lv_seedsCollected);
    libGame_gf_ScoreValuesReportIntegerValueAndLog(lv_triggeringPlayer, "GardensSeedsCollected", libGame_gv_scoreValues[lv_triggeringPlayer].lv_seedsCollected);
    libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lv_triggeringPlayer)].lv_map_SeedsCollected += 1;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_ScoreTrackingSeedCollected_Init () {
    libGame_gt_ScoreTrackingSeedCollected = TriggerCreate("libGame_gt_ScoreTrackingSeedCollected_Func");
    libGame_gf_MapGardenOfTerrorSeedsCollected(libGame_gt_ScoreTrackingSeedCollected);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Talents Choice Selected
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TalentsChoiceSelected_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_TalentsChooseTalentForPlayer(libGame_gv_talents_ActiveChoiceTierForPlayer[EventPlayer()], TalentTreeGetSelectedHeroTalentTreeColumn(EventPlayer(), libGame_gv_talents_ActiveChoiceTierForPlayer[EventPlayer()]), EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TalentsChoiceSelected_Init () {
    libGame_gt_TalentsChoiceSelected = TriggerCreate("libGame_gt_TalentsChoiceSelected_Func");
    TriggerAddEventHeroTalentTreeSelected(libGame_gt_TalentsChoiceSelected, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower - Tower Dead State Gate Check
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TowerTowerDeadStateGateCheck_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitGroupLoopBegin(UnitGroup(null, c_playerAny, RegionCircle(UnitGetPosition(EventUnit()), 6.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        if ((UnitTypeTestFlag(UnitGetType(UnitGroupLoopCurrent()), c_unitFlagTownStructureGate) == true)) {
            return true;
        }

    }
    UnitGroupLoopEnd();
    UnitBehaviorAdd(EventUnit(), "UnitGivesNoXP", EventUnit(), 1);
    UnitKill(EventUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TowerTowerDeadStateGateCheck_Init () {
    libGame_gt_TowerTowerDeadStateGateCheck = TriggerCreate("libGame_gt_TowerTowerDeadStateGateCheck_Func");
    TriggerAddEventUnitAbility(libGame_gt_TowerTowerDeadStateGateCheck, null, AbilityCommand("TowerDeadMorph", 0), c_abilMorphStageUnitEnd, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower - Tower Morph To Dead State Structure "Dies"
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TowerTowerMorphToDeadStateStructureDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_tower;
    int lv_itPlayer;
    int lv_townIndex;
    int lv_structureIndex;
    int lv_killingFaction;
    int lv_xPAwarded;

    // Variable Initialization
    lv_tower = EventPlayerEffectUsedUnit(c_effectUnitCaster);

    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_townIndex = libGame_gf_TownGetTownForUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_structureIndex = libGame_gf_TownGetTownStructureIndexForUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    lv_xPAwarded = CatalogFieldValueGetAsInt(c_gameCatalogUnit, UnitGetType(EventPlayerEffectUsedUnit(c_effectUnitCaster)), "KillXP", c_playerAny);
    libGame_gf_AwardXPForNPCKill(EventPlayerEffectUsedUnit(c_effectUnitCaster), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), c_unitAttributeStructure, EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget), lv_xPAwarded);
    libGame_gf_SendEventTownStructureEntersSpecialDeathState(lv_tower);
    if ((UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == libCore_gv_cOMPUTER_TeamOrder)) {
        lv_killingFaction = libGame_ge_Faction_Chaos;
    }
    else {
        lv_killingFaction = libGame_ge_Faction_Order;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TowerTowerMorphToDeadStateStructureDies_Init () {
    libGame_gt_TowerTowerMorphToDeadStateStructureDies = TriggerCreate("libGame_gt_TowerTowerMorphToDeadStateStructureDies_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_TowerTowerMorphToDeadStateStructureDies, c_playerAny, "TownCannonTowerDeathSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower - Hero Targeting Warning Sounds
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TowerHeroTargetingWarningSounds_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestFlag(UnitGetType(EventUnit()), c_unitFlagHero) == true))) {
            return false;
        }

        if (!((UnitTestState(EventUnit(), c_unitStateHallucination) == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(EventUnit(), "TowerAggroSoundCooldown") == false)) {
        SoundPlayForPlayer(SoundLink("Doodad_CannonTower_Targeting_Warning", -1), UnitGetOwner(EventUnit()), libCore_gv_playerGroupFromPlayer[UnitGetOwner(EventUnit())], 100.0, 0.0);
        UnitBehaviorAdd(EventUnit(), "TowerAggroSoundCooldown", EventUnit(), 1);
    }
    else {
        UnitBehaviorAdd(EventUnit(), "TowerAggroSoundCooldown", EventUnit(), 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TowerHeroTargetingWarningSounds_Init () {
    libGame_gt_TowerHeroTargetingWarningSounds = TriggerCreate("libGame_gt_TowerHeroTargetingWarningSounds_Func");
    TriggerAddEventUnitAttacked2(libGame_gt_TowerHeroTargetingWarningSounds, null, "GuardTowerL1Weapon");
    TriggerAddEventUnitAttacked2(libGame_gt_TowerHeroTargetingWarningSounds, null, "GuardTowerL2Weapon");
    TriggerAddEventUnitAttacked2(libGame_gt_TowerHeroTargetingWarningSounds, null, "GuardTowerL3Weapon");
    TriggerAddEventUnitAttacked2(libGame_gt_TowerHeroTargetingWarningSounds, null, "TownHallWeapon");
    TriggerAddEventUnitAttacked2(libGame_gt_TowerHeroTargetingWarningSounds, null, "TownHallL2Weapon");
    TriggerAddEventUnitAttacked2(libGame_gt_TowerHeroTargetingWarningSounds, null, "TownHallL3Weapon");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Town System
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeTownSystem_Func (bool testConds, bool runActions) {
    int autoFDF0F771_ae;
    int autoFDF0F771_ai;
    unitgroup auto408FF192_g;
    int auto408FF192_u;

    // Variable Declarations
    const fixed lv_workerSpreadArc = 30.0;
    int lv_town;
    unit lv_u;
    int lv_townStructureType;
    int lv_townStructureIndex;
    int lv_townEnemyTeam;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSTowns == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_townsRemaining = 0;
    libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_townsRemaining = 0;
    autoFDF0F771_ae = libGame_gv_townTownCount;
    autoFDF0F771_ai = 1;
    lv_town = 1;
    for ( ; ( (autoFDF0F771_ai >= 0 && lv_town <= autoFDF0F771_ae) || (autoFDF0F771_ai <= 0 && lv_town >= autoFDF0F771_ae) ) ; lv_town += autoFDF0F771_ai ) {
        libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(libGame_gv_townTownData[lv_town].lv_owner)].lv_townsRemaining += 1;
        libGame_gv_townTownData[lv_town].lv_structureCount = 0;
        libGame_gv_townTownData[lv_town].lv_structuresAlive = 0;
        if ((libGame_gv_townTownData[lv_town].lv_owner == libCore_gv_cOMPUTER_TeamOrder)) {
            lv_townEnemyTeam = libCore_gv_cOMPUTER_TeamChaos;
        }
        else {
            lv_townEnemyTeam = libCore_gv_cOMPUTER_TeamOrder;
        }
        auto408FF192_g = UnitGroup(null, libGame_gv_townTownData[lv_town].lv_owner, libGame_gv_townTownData[lv_town].lv_townRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto408FF192_u = 1;
        for ( ; auto408FF192_u <= UnitGroupCount(auto408FF192_g, c_unitCountAll) ; auto408FF192_u += (lv_u == UnitGroupUnit(auto408FF192_g, auto408FF192_u)) ) {
            lv_u = UnitGroupUnit(auto408FF192_g, auto408FF192_u);
            lv_townStructureType = libGame_gf_TownGetTownStructurePresetFromUnit(lv_u);
            libGame_gf_TownAddStructureToTownArray(lv_town, lv_u, lv_townStructureType, lv_townEnemyTeam);
        }
    }
    libGame_gf_SendEventTownDataInitialized();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeTownSystem_Init () {
    libGame_gt_InitializeTownSystem = TriggerCreate("libGame_gt_InitializeTownSystem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Moonwell Minimap Icons on Towns
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeMoonwellIconsonTowns_Func (bool testConds, bool runActions) {
    int autoEEE30D1B_ae;
    int autoEEE30D1B_ai;

    // Variable Declarations
    int lv_town;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSTowns == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    Wait(0.0625, c_timeGame);
    autoEEE30D1B_ae = libGame_gv_townTownCount;
    autoEEE30D1B_ai = 1;
    lv_town = 1;
    for ( ; ( (autoEEE30D1B_ai >= 0 && lv_town <= autoEEE30D1B_ae) || (autoEEE30D1B_ai <= 0 && lv_town >= autoEEE30D1B_ae) ) ; lv_town += autoEEE30D1B_ai ) {
        libGame_gf_TownAddMoonwellMinimapIconstoTown(lv_town);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeMoonwellIconsonTowns_Init () {
    libGame_gt_InitializeMoonwellIconsonTowns = TriggerCreate("libGame_gt_InitializeMoonwellIconsonTowns_Func");
    libGame_gf_GameOpenTimerStarted(libGame_gt_InitializeMoonwellIconsonTowns);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Town - Mid-Late Game Power Transition On
//--------------------------------------------------------------------------------------------------
bool libGame_gt_TownMidLateGamePowerTransitionOn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gv_townMidLateGamePowerTransitionOn == false)) {
        libGame_gv_townMidLateGamePowerTransitionOn = true;
        CatalogFieldValueSet(c_gameCatalogEffect, "KingsCoreWeaponDamage", "Amount", 11, "200");
        CatalogFieldValueSet(c_gameCatalogEffect, "KingsCoreWeaponDamage", "Amount", 12, "200");
        CatalogFieldValueSet(c_gameCatalogWeapon, "KingsCore", "Period", 11, ".5");
        CatalogFieldValueSet(c_gameCatalogWeapon, "KingsCore", "Period", 12, ".5");
        CatalogFieldValueSet(c_gameCatalogEffect, "KingsCoreWeaponDamage", "AttributeFactor[" + IntToString(2) + "]", 11, "2");
        CatalogFieldValueSet(c_gameCatalogEffect, "KingsCoreWeaponDamage", "AttributeFactor[" + IntToString(2) + "]", 12, "2");
        CatalogFieldValueSet(c_gameCatalogEffect, "KingsCoreWeaponDamage", "AttributeFactor[" + IntToString(10) + "]", 11, "2");
        CatalogFieldValueSet(c_gameCatalogEffect, "KingsCoreWeaponDamage", "AttributeFactor[" + IntToString(10) + "]", 12, "2");
        CatalogFieldValueSet(c_gameCatalogEffect, "KingsCoreWeaponDamage", "AttributeFactor[" + IntToString(7) + "]", 11, "2");
        CatalogFieldValueSet(c_gameCatalogEffect, "KingsCoreWeaponDamage", "AttributeFactor[" + IntToString(7) + "]", 12, "2");
        CatalogFieldValueSet(c_gameCatalogEffect, "KingsCoreWeaponSearch", "AreaArray[" + IntToString(0) + "].Radius", 11, ".0625");
        CatalogFieldValueSet(c_gameCatalogEffect, "KingsCoreWeaponSearch", "AreaArray[" + IntToString(0) + "].Radius", 12, ".0625");
        CatalogFieldValueSet(c_gameCatalogWeapon, "CatapultMinion", "Range", 11, "11");
        CatalogFieldValueSet(c_gameCatalogWeapon, "CatapultMinion", "Range", 12, "11");
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_D8B9060B"), true);
    }
    else {
        libGame_gv_townMidLateGamePowerTransitionOn = false;
        CatalogFieldValueSet(c_gameCatalogEffect, "KingsCoreWeaponDamage", "Amount", 11, CatalogFieldValueGet(c_gameCatalogUnit, "KingsCoreWeaponDamage", "Amount", 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "KingsCoreWeaponDamage", "Amount", 12, CatalogFieldValueGet(c_gameCatalogUnit, "KingsCoreWeaponDamage", "Amount", 0));
        CatalogFieldValueSet(c_gameCatalogWeapon, "KingsCore", "Period", 11, CatalogFieldValueGet(c_gameCatalogWeapon, "KingsCore", "Period", 0));
        CatalogFieldValueSet(c_gameCatalogWeapon, "KingsCore", "Period", 12, CatalogFieldValueGet(c_gameCatalogWeapon, "KingsCore", "Period", 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "KingsCoreWeaponDamage", "AttributeFactor[" + IntToString(2) + "]", 11, CatalogFieldValueGet(c_gameCatalogEffect, "KingsCoreWeaponDamage", "AttributeFactor[" + IntToString(2) + "]", 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "KingsCoreWeaponDamage", "AttributeFactor[" + IntToString(2) + "]", 12, CatalogFieldValueGet(c_gameCatalogEffect, "KingsCoreWeaponDamage", "AttributeFactor[" + IntToString(2) + "]", 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "KingsCoreWeaponDamage", "AttributeFactor[" + IntToString(10) + "]", 11, CatalogFieldValueGet(c_gameCatalogEffect, "KingsCoreWeaponDamage", "AttributeFactor[" + IntToString(10) + "]", 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "KingsCoreWeaponDamage", "AttributeFactor[" + IntToString(10) + "]", 12, CatalogFieldValueGet(c_gameCatalogEffect, "KingsCoreWeaponDamage", "AttributeFactor[" + IntToString(10) + "]", 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "KingsCoreWeaponDamage", "AttributeFactor[" + IntToString(7) + "]", 11, CatalogFieldValueGet(c_gameCatalogEffect, "KingsCoreWeaponDamage", "AttributeFactor[" + IntToString(7) + "]", 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "KingsCoreWeaponDamage", "AttributeFactor[" + IntToString(7) + "]", 12, CatalogFieldValueGet(c_gameCatalogEffect, "KingsCoreWeaponDamage", "AttributeFactor[" + IntToString(7) + "]", 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "KingsCoreWeaponSearch", "AreaArray[" + IntToString(0) + "].Radius", 11, CatalogFieldValueGet(c_gameCatalogEffect, "KingsCoreWeaponSearch", "AreaArray[" + IntToString(0) + "].Radius", 0));
        CatalogFieldValueSet(c_gameCatalogEffect, "KingsCoreWeaponSearch", "AreaArray[" + IntToString(0) + "].Radius", 12, CatalogFieldValueGet(c_gameCatalogEffect, "KingsCoreWeaponSearch", "AreaArray[" + IntToString(0) + "].Radius", 0));
        CatalogFieldValueSet(c_gameCatalogWeapon, "CatapultMinion", "Range", 11, CatalogFieldValueGet(c_gameCatalogWeapon, "CatapultMinion", "Range", 0));
        CatalogFieldValueSet(c_gameCatalogWeapon, "CatapultMinion", "Range", 12, CatalogFieldValueGet(c_gameCatalogWeapon, "CatapultMinion", "Range", 0));
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_Game_238C6FF6"), true);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_TownMidLateGamePowerTransitionOn_Init () {
    libGame_gt_TownMidLateGamePowerTransitionOn = TriggerCreate("libGame_gt_TownMidLateGamePowerTransitionOn_Func");
    TriggerAddEventChatMessage(libGame_gt_TownMidLateGamePowerTransitionOn, c_playerAny, "-morecore", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base - Repulser Field - Launch Missile
//--------------------------------------------------------------------------------------------------
bool libGame_gt_BaseRepulserFieldLaunchMissile_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_base;
    unit lv_targetUnit;
    fixed lv_abilityRange;
    fixed lv_distanceFromBasePlayerTargetPoint;
    fixed lv_baseRadius;
    point lv_targetPoint;
    point lv_actualTargetPoint;
    fixed lv_modifiedDistance;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_base = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_abilityRange = libGame_gv_baseRepulserFieldLaunchDistance;
    lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_base), libGame_gv_baseRepulserFieldLaunchDistance, UnitGetPosition(lv_targetUnit));
    lv_actualTargetPoint = lv_targetPoint;
    if ((PointPathingPassable(lv_actualTargetPoint) == false)) {
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_base))].lv_core), 7.5, UnitGetPosition(lv_base));
    }

    UnitCreateEffectPoint(lv_targetUnit, "RepulserFieldLaunchUnit", lv_actualTargetPoint);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_BaseRepulserFieldLaunchMissile_Init () {
    libGame_gt_BaseRepulserFieldLaunchMissile = TriggerCreate("libGame_gt_BaseRepulserFieldLaunchMissile_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_BaseRepulserFieldLaunchMissile, c_playerAny, "BaseRepulserFieldPuntDummySet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base - Safe Zone Punt
//--------------------------------------------------------------------------------------------------
bool libGame_gt_BaseSafeZonePunt_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitBehaviorCount(libGame_gf_UnitEntersSafeZonePuntRegionUnit(), "KillUnitOnRepulserFieldImpact") == 1)) {
        UnitKill(libGame_gf_UnitEntersSafeZonePuntRegionUnit());
    }
    else {
        if ((UnitGetType(libGame_gf_UnitEntersSafeZonePuntRegionUnit()) != "AbathurToxicNest")) {
            UnitCreateEffectPoint(libGame_gf_UnitEntersSafeZonePuntRegionUnit(), "RepulserFieldLaunchUnit", libGame_gf_UnitEntersSafeZonePuntRegionPuntPoint());
            PlayerCreateEffectUnit(UnitGetOwner(libGame_gf_UnitEntersSafeZonePuntRegionUnit()), "BaseRepulserFieldSet", libGame_gf_UnitEntersSafeZonePuntRegionUnit());
        }
        else {
            UnitKill(libGame_gf_UnitEntersSafeZonePuntRegionUnit());
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_BaseSafeZonePunt_Init () {
    libGame_gt_BaseSafeZonePunt = TriggerCreate("libGame_gt_BaseSafeZonePunt_Func");
    TriggerEnable(libGame_gt_BaseSafeZonePunt, false);
    libGame_gf_UnitEntersSafeZonePuntRegion(libGame_gt_BaseSafeZonePunt);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base - Unit Enters Safe Zone
//--------------------------------------------------------------------------------------------------
bool libGame_gt_BaseUnitEntersSafeZone_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitCreateEffectUnit(libGame_gf_UnitEntersSafeZoneRegionUnit(), "HealingPadSet", libGame_gf_UnitEntersSafeZoneRegionUnit());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_BaseUnitEntersSafeZone_Init () {
    libGame_gt_BaseUnitEntersSafeZone = TriggerCreate("libGame_gt_BaseUnitEntersSafeZone_Func");
    TriggerEnable(libGame_gt_BaseUnitEntersSafeZone, false);
    libGame_gf_UnitEntersSafeZoneRegion(libGame_gt_BaseUnitEntersSafeZone);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Base - Unit Exits Safe Zone
//--------------------------------------------------------------------------------------------------
bool libGame_gt_BaseUnitExitsSafeZone_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitBehaviorRemove(libGame_gf_UnitExitsSafeZoneRegionUnit(), "HomeShieldProtection", 1);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_BaseUnitExitsSafeZone_Init () {
    libGame_gt_BaseUnitExitsSafeZone = TriggerCreate("libGame_gt_BaseUnitExitsSafeZone_Func");
    TriggerEnable(libGame_gt_BaseUnitExitsSafeZone, false);
    libGame_gf_UnitExitsSafeZoneRegion(libGame_gt_BaseUnitExitsSafeZone);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vehicles - Use Vehicle
//--------------------------------------------------------------------------------------------------
bool libGame_gt_VehiclesUseVehicle_Func (bool testConds, bool runActions) {
    int auto50B57BB8_ae;
    int auto50B57BB8_ai;
    int autoCEADE6AD_ae;
    int autoCEADE6AD_ai;
    string autoB85FD23B_val;

    // Variable Declarations
    int lv_player;
    unit lv_hero;
    unit lv_vehicle;
    int lv_heroExperience;
    fixed lv_vehicleLifePercent;
    int lv_p;

    // Variable Initialization
    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_hero = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_vehicle = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_heroExperience = UnitLevel(lv_hero);

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_hero, "AbathurSymbioteHostBehavior") == true)) {
        UnitBehaviorRemove(lv_hero, "AbathurSymbioteHostBehavior", 1);
    }

    libGame_gv_players[lv_player].lv_activeVehicle = lv_vehicle;
    AIRemovePlayerUnit(lv_hero);
    AIAddPlayerUnit(lv_vehicle);
    if ((UnitTestState(lv_hero, c_unitStateHallucination) == true)) {
        lv_hero = libGame_gv_players[lv_player].lv_heroUnit;
        UnitCreateEffectUnit(lv_hero, "UseVehicleApplyCasterBehavior", lv_hero);
        UnitCreateEffectUnit(lv_hero, "UseVehicleTeleToBaseSearchForDestination", lv_hero);
        UnitGroupLoopBegin(UnitGroup(null, lv_player, RegionEntireMap(), UnitFilter(0, (1 << (c_targetFilterHallucination - 32)), (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitKill(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
    }

    if (((UnitGroupCount(libGame_gv_players[lv_player].lv_heroUnitGroup, c_unitCountAll) == 1) || (UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroRexxar") || (UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroSamuro") || (libNtve_gf_UnitIsInsideTransport(libGame_gv_players[lv_player].lv_heroUnit) == true))) {
        libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[lv_player].lv_activeVehicle);
        libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    }

    libUIUI_gf_UIHeroConsoleSetUpForPlayer(lv_vehicle, lv_player);
    libUIUI_gf_InitPathingLines(lv_vehicle, lv_player);
    libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(libGame_gv_players[lv_player].lv_activeVehicle, lv_player);
    libNtve_gf_StoreUnitSelection(lv_player, libNtve_ge_UnitSelectionStoreOption_ClearUnitSelection);
    UnitSelect(lv_vehicle, lv_player, true);
    lv_vehicleLifePercent = UnitGetPropertyFixed(lv_vehicle, c_unitPropLifePercent, c_unitPropCurrent);
    UnitSetOwner(lv_vehicle, lv_player, true);
    UnitCreateEffectUnit(lv_hero, "UseVehiclePropagateOrders", lv_vehicle);
    UnitBehaviorRemove(lv_vehicle, "GenericVehicleBehaviorEmpty", 1);
    libGame_gf_UpdateScalingForUnit(lv_vehicle, libGame_gv_scalingTicks, 0);
    libGame_gf_UpdateUpgradesForPlayer(lv_player, lv_vehicle, libGame_gv_scalingTicks);
    UnitStatusBarOverride(lv_vehicle, c_unitStatusGroupAll);
    UnitSetPropertyFixed(lv_vehicle, c_unitPropLifePercent, lv_vehicleLifePercent);
    libUIUI_gf_UIDamageFlashStopLowHPSoundAndScreenEffects(lv_player);
    libUIUI_gf_UIUpdateEventPlayerStatsChange(lv_player);
    libUIUI_gf_FullscreenOverlayStopandClearCutsceneQueueForPlayer(lv_player);
    auto50B57BB8_ae = libCore_gv_bALMaxPlayers;
    auto50B57BB8_ai = 1;
    lv_p = 1;
    for ( ; ( (auto50B57BB8_ai >= 0 && lv_p <= auto50B57BB8_ae) || (auto50B57BB8_ai <= 0 && lv_p >= auto50B57BB8_ae) ) ; lv_p += auto50B57BB8_ai ) {
        if ((libGame_gv_players[lv_p].lv_cameraAllyPlayerToTrack == lv_player)) {
            libGame_gf_CameraUpdateCameraForPlayer(lv_p);
        }

    }
    autoCEADE6AD_ae = libCore_gv_bALMaxPlayers;
    autoCEADE6AD_ai = 1;
    lv_p = 1;
    for ( ; ( (autoCEADE6AD_ai >= 0 && lv_p <= autoCEADE6AD_ae) || (autoCEADE6AD_ai <= 0 && lv_p >= autoCEADE6AD_ae) ) ; lv_p += autoCEADE6AD_ai ) {
        if ((libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lv_p] == lv_hero)) {
            libUIUI_gf_UITargetInfoPanelSetTargetForPlayer(libGame_gv_players[UnitGetOwner(lv_hero)].lv_activeVehicle, lv_p);
        }

    }
    autoB85FD23B_val = UnitGetType(lv_hero);
    if (autoB85FD23B_val == "HeroArthas") {
        UnitGroupLoopBegin(UnitGroup("ArthasArmyOfTheDeadGhoul", lv_player, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32))), 0));
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            UnitSetPosition(UnitGroupLoopCurrent(), UnitGetPosition(libGame_gv_players[lv_player].lv_heroUnit), false);
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "UsingVehicle", UnitGroupLoopCurrent(), 1);
        }
        UnitGroupLoopEnd();
    }
    else {
    }
    libGame_gf_SendEventCheckUnitForAbilityRedirect(lv_hero, lv_vehicle, false, UnitGetPosition(lv_hero));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_VehiclesUseVehicle_Init () {
    libGame_gt_VehiclesUseVehicle = TriggerCreate("libGame_gt_VehiclesUseVehicle_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_VehiclesUseVehicle, c_playerAny, "UseVehicleCastCompleteSet");
    TriggerAddEventPlayerEffectUsed(libGame_gt_VehiclesUseVehicle, c_playerAny, "CommandeerOdinVehicleCastCompleteSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vehicles - Leave Vehicle
//--------------------------------------------------------------------------------------------------
bool libGame_gt_VehiclesLeaveVehicle_Func (bool testConds, bool runActions) {
    int autoFD90636A_ae;
    int autoFD90636A_ai;
    int auto91294E51_ae;
    int auto91294E51_ai;

    // Variable Declarations
    int lv_p;
    int lv_q;
    int lv_player;
    unit lv_vehicle;
    fixed lv_vehicleLifePercent;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_vehicle = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    UnitBehaviorRemove(lv_vehicle, "GenericVehicleBehaviorOccupied", 1);
    if (((UnitGroupCount(libGame_gv_players[lv_player].lv_heroUnitGroup, c_unitCountAll) == 1) || (UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroRexxar"))) {
        if ((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroRexxar")) {
            libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[lv_player].lv_heroUnit);
        }
        else {
            libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[lv_player].lv_heroUnitGroup;
        }
        libGame_gf_CameraUpdateCameraForPlayer(lv_player);
    }

    if ((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) != "HeroLostVikingsController")) {
        libNtve_gf_RestoreUnitSelection(lv_player);
    }

    UnitSetPropertyFixed(lv_vehicle, c_unitPropLevel, 1.0);
    libGame_gf_VehiclesReturnPlayerFromVehicleAtPoint(lv_player, UnitGetPosition(lv_vehicle));
    lv_vehicleLifePercent = UnitGetPropertyFixed(lv_vehicle, c_unitPropLifePercent, c_unitPropCurrent);
    if ((libGame_gf_TeamNumberOfPlayer(lv_player) == 1)) {
        UnitSetOwner(lv_vehicle, libCore_gv_cOMPUTER_TeamOrder, true);
    }
    else {
        UnitSetOwner(lv_vehicle, libCore_gv_cOMPUTER_TeamChaos, true);
    }
    UnitSetPropertyFixed(lv_vehicle, c_unitPropLifePercent, lv_vehicleLifePercent);
    autoFD90636A_ae = libCore_gv_bALMaxPlayers;
    autoFD90636A_ai = 1;
    lv_q = 1;
    for ( ; ( (autoFD90636A_ai >= 0 && lv_q <= autoFD90636A_ae) || (autoFD90636A_ai <= 0 && lv_q >= autoFD90636A_ae) ) ; lv_q += autoFD90636A_ai ) {
        if ((libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lv_q] == lv_vehicle)) {
            libUIUI_gf_UITargetInfoPanelSetTargetForPlayer(libGame_gv_players[lv_player].lv_heroUnit, lv_q);
        }

    }
    AIRemovePlayerUnit(libGame_gv_players[lv_player].lv_activeVehicle);
    libGame_gv_players[lv_player].lv_activeVehicle = null;
    if ((UnitGetPropertyFixed(libGame_gv_players[lv_player].lv_heroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= libUIUI_gv_uIDamageFlashLowHPThreshold)) {
        libUIUI_gf_UIDamageFlashStartLowHPSoundAndScreenEffects(lv_player);
    }

    if ((libNtve_gf_UnitIsInsideTransport(libGame_gv_players[lv_player].lv_heroUnit) == true)) {
        libUIUI_gf_UIHeroConsoleSetUpForPlayer(UnitTransport(libGame_gv_players[lv_player].lv_heroUnit), lv_player);
        libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(UnitTransport(libGame_gv_players[lv_player].lv_heroUnit), lv_player);
    }
    else {
        libUIUI_gf_UIHeroConsoleSetUpForPlayer(libGame_gv_players[lv_player].lv_heroUnit, lv_player);
        libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(libGame_gv_players[lv_player].lv_heroUnit, lv_player);
    }
    libUIUI_gf_UIUpdateEventPlayerStatsChange(lv_player);
    auto91294E51_ae = libCore_gv_bALMaxPlayers;
    auto91294E51_ai = 1;
    lv_p = 1;
    for ( ; ( (auto91294E51_ai >= 0 && lv_p <= auto91294E51_ae) || (auto91294E51_ai <= 0 && lv_p >= auto91294E51_ae) ) ; lv_p += auto91294E51_ai ) {
        if ((libGame_gv_players[lv_p].lv_cameraAllyPlayerToTrack == lv_player)) {
            libGame_gf_CameraUpdateCameraForPlayer(lv_p);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_VehiclesLeaveVehicle_Init () {
    libGame_gt_VehiclesLeaveVehicle = TriggerCreate("libGame_gt_VehiclesLeaveVehicle_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_VehiclesLeaveVehicle, c_playerAny, "LeaveVehicleApplyTimedLife");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vehicles - Vehicle Dies
//--------------------------------------------------------------------------------------------------
bool libGame_gt_VehiclesVehicleDies_Func (bool testConds, bool runActions) {
    int autoEB417FA1_ae;
    int autoEB417FA1_ai;
    int auto7CCADAE5_ae;
    int auto7CCADAE5_ai;
    int auto6EB0E705_ae;
    int auto6EB0E705_ai;

    // Variable Declarations
    int lv_p;
    int lv_q;
    int lv_activeVehicleIndex;
    unit lv_vehicle;
    int lv_locationTypeIndex;
    int lv_locationIndex;
    int lv_vehiclePadIndex;
    unit lv_vehiclePad;
    int lv_player;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vehicle = EventPlayerEffectUsedUnit(c_effectUnitSource);
    autoEB417FA1_ae = libCore_gv_bALMaxPlayers;
    autoEB417FA1_ai = 1;
    lv_activeVehicleIndex = 1;
    for ( ; ( (autoEB417FA1_ai >= 0 && lv_activeVehicleIndex <= autoEB417FA1_ae) || (autoEB417FA1_ai <= 0 && lv_activeVehicleIndex >= autoEB417FA1_ae) ) ; lv_activeVehicleIndex += autoEB417FA1_ai ) {
        if ((lv_vehicle == libGame_gv_players[lv_activeVehicleIndex].lv_activeVehicle)) {
            lv_player = lv_activeVehicleIndex;
            if ((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) != "HeroLostVikingsController")) {
                libNtve_gf_RestoreUnitSelection(lv_player);
            }

            libGame_gf_VehiclesReturnPlayerFromVehicleAtPoint(lv_player, UnitGetPosition(lv_vehicle));
            auto7CCADAE5_ae = libCore_gv_bALMaxPlayers;
            auto7CCADAE5_ai = 1;
            lv_q = 1;
            for ( ; ( (auto7CCADAE5_ai >= 0 && lv_q <= auto7CCADAE5_ae) || (auto7CCADAE5_ai <= 0 && lv_q >= auto7CCADAE5_ae) ) ; lv_q += auto7CCADAE5_ai ) {
                if ((libUIUI_gv_uITargetInfoPanelCurrentTargetForPlayer[lv_q] == lv_vehicle)) {
                    libUIUI_gf_UITargetInfoPanelSetTargetForPlayer(libGame_gv_players[lv_player].lv_heroUnit, lv_q);
                }

            }
            AIRemovePlayerUnit(libGame_gv_players[lv_player].lv_activeVehicle);
            libGame_gv_players[lv_player].lv_activeVehicle = null;
            if ((UnitGetPropertyFixed(libGame_gv_players[lv_player].lv_heroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= libUIUI_gv_uIDamageFlashLowHPThreshold)) {
                libUIUI_gf_UIDamageFlashStartLowHPSoundAndScreenEffects(lv_player);
            }

            if ((libNtve_gf_UnitIsInsideTransport(libGame_gv_players[lv_player].lv_heroUnit) == true)) {
                libUIUI_gf_UIHeroConsoleSetUpForPlayer(UnitTransport(libGame_gv_players[lv_player].lv_heroUnit), lv_player);
                libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(UnitTransport(libGame_gv_players[lv_player].lv_heroUnit), lv_player);
            }
            else {
                libUIUI_gf_UIHeroConsoleSetUpForPlayer(libGame_gv_players[lv_player].lv_heroUnit, lv_player);
                libUIUI_gf_HeroConsoleUnitStatusBarsSetUnitForBars(libGame_gv_players[lv_player].lv_heroUnit, lv_player);
            }
            libUIUI_gf_UIUpdateEventPlayerStatsChange(lv_player);
            break;
        }

    }
    if ((lv_player != 0)) {
        if (((UnitGroupCount(libGame_gv_players[lv_player].lv_heroUnitGroup, c_unitCountAll) == 1) || (UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroRexxar"))) {
            if ((UnitGetType(libGame_gv_players[lv_player].lv_heroUnit) == "HeroRexxar")) {
                libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libNtve_gf_ConvertUnitToUnitGroup(libGame_gv_players[lv_player].lv_heroUnit);
            }
            else {
                libGame_gv_players[lv_player].lv_cameraPlayerUnitGroupToFocusOn = libGame_gv_players[lv_player].lv_heroUnitGroup;
            }
            libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_player, UnitGetPosition(libGame_gv_players[lv_player].lv_heroUnit), 0.0, -1, 0.0, false);
            libGame_gf_CameraUpdateCameraForPlayer(lv_player);
        }

        auto6EB0E705_ae = libCore_gv_bALMaxPlayers;
        auto6EB0E705_ai = 1;
        lv_p = 1;
        for ( ; ( (auto6EB0E705_ai >= 0 && lv_p <= auto6EB0E705_ae) || (auto6EB0E705_ai <= 0 && lv_p >= auto6EB0E705_ae) ) ; lv_p += auto6EB0E705_ai ) {
            if ((libGame_gv_players[lv_p].lv_cameraAllyPlayerToTrack == lv_player)) {
                libGame_gf_CameraUpdateCameraForPlayer(lv_p);
            }

        }
    }

    libGame_gf_SendEventCheckUnitForAbilityRedirect(lv_vehicle, libGame_gv_players[lv_player].lv_heroUnit, false, UnitGetPosition(lv_vehicle));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_VehiclesVehicleDies_Init () {
    libGame_gt_VehiclesVehicleDies = TriggerCreate("libGame_gt_VehiclesVehicleDies_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_VehiclesVehicleDies, c_playerAny, "UseVehicleFinalDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vehicles - Regen Globe
//--------------------------------------------------------------------------------------------------
bool libGame_gt_VehiclesRegenGlobe_Func (bool testConds, bool runActions) {
    unitgroup autoA11B91FF_g;
    int autoA11B91FF_u;

    // Variable Declarations
    int lv_vehiclePlayer;
    unit lv_iUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_vehiclePlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitTarget));
    autoA11B91FF_g = libGame_gv_players[lv_vehiclePlayer].lv_heroUnitGroup;
    autoA11B91FF_u = 1;
    for ( ; autoA11B91FF_u <= UnitGroupCount(autoA11B91FF_g, c_unitCountAll) ; autoA11B91FF_u += (lv_iUnit == UnitGroupUnit(autoA11B91FF_g, autoA11B91FF_u)) ) {
        lv_iUnit = UnitGroupUnit(autoA11B91FF_g, autoA11B91FF_u);
        if ((UnitHasBehavior2(lv_iUnit, "UsingVehicle") == true)) {
            UnitCreateEffectUnit(lv_iUnit, "RegenGlobeImpactSet", lv_iUnit);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_VehiclesRegenGlobe_Init () {
    libGame_gt_VehiclesRegenGlobe = TriggerCreate("libGame_gt_VehiclesRegenGlobe_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_VehiclesRegenGlobe, c_playerAny, "HeroGenericRegenGlobeVehicleDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Vehicle - Dragon Knight - Bull Rush
//--------------------------------------------------------------------------------------------------
bool libGame_gt_VehicleDragonKnightBullRush_Func (bool testConds, bool runActions) {
    fixed auto3D4EE29E_at;

    // Variable Declarations
    unit lv_dragonKnight;
    unit lv_targetUnit;
    fixed lv_abilityRange;
    fixed lv_distanceFromDragonKnightToPlayerTargetPoint;
    fixed lv_dragonKnightRadius;
    point lv_targetPoint;
    point lv_actualTargetPoint;
    fixed lv_modifiedDistance;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dragonKnight = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_abilityRange = libGame_gv_vehicleDragonKnightBullRushLaunchDistance;
    lv_targetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_targetUnit), libGame_gv_vehicleDragonKnightBullRushLaunchDistance, UnitGetPosition(lv_dragonKnight));
    lv_modifiedDistance = (lv_abilityRange + 0.0);
    lv_actualTargetPoint = lv_targetPoint;
    while ((PointPathingPassable(lv_actualTargetPoint) == false)) {
        lv_modifiedDistance += 0.125;
        lv_actualTargetPoint = libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_targetUnit), lv_modifiedDistance, UnitGetPosition(lv_dragonKnight));
        if ((lv_modifiedDistance >= libGame_gv_vehicleDragonKnightBullRushCutoffDistance)) {
            return true;
        }

    }
    UnitCreateEffectPoint(lv_targetUnit, "DragonKnightBullRushLaunchUnit", lv_actualTargetPoint);
    auto3D4EE29E_at = 0;
    while (!((UnitHasBehavior2(lv_targetUnit, "DragonKnightBullRushImpactDummy") == true)) && auto3D4EE29E_at <= 10.0) {
        Wait(0.0625, c_timeGame);
        auto3D4EE29E_at = auto3D4EE29E_at + 0.0625;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_VehicleDragonKnightBullRush_Init () {
    libGame_gt_VehicleDragonKnightBullRush = TriggerCreate("libGame_gt_VehicleDragonKnightBullRush_Func");
    TriggerAddEventPlayerEffectUsed(libGame_gt_VehicleDragonKnightBullRush, c_playerAny, "DragonKnightBullRushImpactSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Watch Towers
//--------------------------------------------------------------------------------------------------
bool libGame_gt_InitializeWatchTowers_Func (bool testConds, bool runActions) {
    unitgroup autoDB8A231F_g;
    int autoDB8A231F_u;
    playergroup autoE1888F5C_g;
    int autoE1888F5C_p;

    // Variable Declarations
    unit lv_u;
    int lv_player;
    int lv_i;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSJungleWatchTowers == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDB8A231F_g = UnitGroup("XelNagaWatchTower", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoDB8A231F_u = 1;
    for ( ; autoDB8A231F_u <= UnitGroupCount(autoDB8A231F_g, c_unitCountAll) ; autoDB8A231F_u += (lv_u == UnitGroupUnit(autoDB8A231F_g, autoDB8A231F_u)) ) {
        lv_u = UnitGroupUnit(autoDB8A231F_g, autoDB8A231F_u);
        libGame_gv_watchTowersCurrentCount += 1;
        libGame_gv_watchTowers[libGame_gv_watchTowersCurrentCount].lv_watchTowerUnit = lv_u;
        UnitSetCustomValue(lv_u, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_WatchTowerIndex), libGame_gv_watchTowersCurrentCount);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "WatchTowerCaptureBeacon", c_unitCreateIgnorePlacement, UnitGetOwner(lv_u), UnitGetPosition(lv_u));
        libGame_gf_CapturePointCreate(UnitLastCreated(), libCore_gv_data_WatchTower_CaptureRadius_C, libCore_gv_data_WatchTower_CaptureTime_C, 0.0, libGame_ge_CapturePointDecay_DoNotDecay, libGame_ge_CapturePointDecay_Owner, true);
        libGame_gv_watchTowers[libGame_gv_watchTowersCurrentCount].lv_capturePointIndex = libGame_gf_LastCreatedCapturePoint();
        autoE1888F5C_g = PlayerGroupAll(); 
        autoE1888F5C_p = 1;
        for ( ; autoE1888F5C_p <= PlayerGroupCount(autoE1888F5C_g) ; autoE1888F5C_p += (lv_player == PlayerGroupPlayer(autoE1888F5C_g, autoE1888F5C_p)) ) {
            lv_player = PlayerGroupPlayer(autoE1888F5C_g, autoE1888F5C_p);
            VisRevealArea(lv_player, RegionCircle(UnitGetPosition(lv_u), 0.75), 0.125, false);
        }
    }
    TriggerEnable(libGame_gt_WatchTowersOwnershipChanges, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_InitializeWatchTowers_Init () {
    libGame_gt_InitializeWatchTowers = TriggerCreate("libGame_gt_InitializeWatchTowers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Watch Towers - Ownership Changes
//--------------------------------------------------------------------------------------------------
bool libGame_gt_WatchTowersOwnershipChanges_Func (bool testConds, bool runActions) {
    int autoD9163F59_ae;
    playergroup auto1994BB0D_g;
    int auto1994BB0D_p;
    int autoBF467B1A_val;

    // Variable Declarations
    int lv_itWatchTower;
    int lv_itPlayer;
    int lv_capturePointIndex;
    int lv_capturePointOwner;

    // Variable Initialization
    lv_capturePointIndex = libGame_gf_CapturePointChangesOwnerCapturePointIndex();
    lv_capturePointOwner = libGame_gf_CapturePointChangesOwnerOwner();

    // Actions
    if (!runActions) {
        return true;
    }

    autoD9163F59_ae = libGame_gv_watchTowersMaxCount;
    lv_itWatchTower = 1;
    for ( ; lv_itWatchTower <= autoD9163F59_ae ; lv_itWatchTower += 1 ) {
        if ((libGame_gv_watchTowers[lv_itWatchTower].lv_capturePointIndex == lv_capturePointIndex)) {
            auto1994BB0D_g = libGame_gf_CapturePointChangesOwnerCapturingPlayers(); 
            auto1994BB0D_p = 1;
            for ( ; auto1994BB0D_p <= PlayerGroupCount(auto1994BB0D_g) ; auto1994BB0D_p += (lv_itPlayer == PlayerGroupPlayer(auto1994BB0D_g, auto1994BB0D_p)) ) {
                lv_itPlayer = PlayerGroupPlayer(auto1994BB0D_g, auto1994BB0D_p);
                libGame_gv_scoreValues[lv_itPlayer].lv_watchTowersCaptured += 1;
            }
            libGame_gf_WatchTowersChangeWatchTowerOwnership(lv_itWatchTower, lv_capturePointOwner);
            autoBF467B1A_val = lv_capturePointOwner;
            if (autoBF467B1A_val == libCore_gv_cOMPUTER_Neutral) {
            }
            else if (autoBF467B1A_val == libCore_gv_cOMPUTER_TeamChaos) {
                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_itWatchTower].lv_watchTowerUnit, "Signal OwnerChaos");
                UnitCreateEffectUnit(libGame_gv_watchTowers[lv_itWatchTower].lv_watchTowerUnit, "WatchtowerRevealDummy", libGame_gv_watchTowers[lv_itWatchTower].lv_watchTowerUnit);
            }
            else if (autoBF467B1A_val == libCore_gv_cOMPUTER_TeamOrder) {
                libNtve_gf_SendActorMessageToUnit(libGame_gv_watchTowers[lv_itWatchTower].lv_watchTowerUnit, "Signal OwnerOrder");
                UnitCreateEffectUnit(libGame_gv_watchTowers[lv_itWatchTower].lv_watchTowerUnit, "WatchtowerRevealDummy", libGame_gv_watchTowers[lv_itWatchTower].lv_watchTowerUnit);
            }
            else {
            }
            break;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libGame_gt_WatchTowersOwnershipChanges_Init () {
    libGame_gt_WatchTowersOwnershipChanges = TriggerCreate("libGame_gt_WatchTowersOwnershipChanges_Func");
    TriggerEnable(libGame_gt_WatchTowersOwnershipChanges, false);
    libGame_gf_CapturePointChangesOwner(libGame_gt_WatchTowersOwnershipChanges);
}

void libGame_InitTriggers () {
    libGame_gt_IncludeGame_Init();
    libGame_gt_InitializeBanks_Init();
    libGame_gt_InitializeGameSystems_Init();
    libGame_gt_InitializePlayers_Init();
    libGame_gt_InitializeVisibility_Init();
    libGame_gt_AfkInAltarDetection_Init();
    libGame_gt_AfkCheckPlayerScoreValuesForActivity_Init();
    libGame_gt_AfkCheckPlayerCloseToMapMechanic_Init();
    libGame_gt_AFKCheckPlayerEnteredVehicle_Init();
    libGame_gt_AfkPlayerAfkWarningTimerExpires_Init();
    libGame_gt_AfkPlayerAfkKickTimerExpires_Init();
    libGame_gt_AFKBrawlCheckPlayerUsedAbility_Init();
    libGame_gt_AFKBrawlCheckPlayerHealedUnit_Init();
    libGame_gt_AFKBrawlCheckPlayerDamagedUnit_Init();
    libGame_gt_AnnouncementMessageTimerExpires_Init();
    libGame_gt_InitializeBehaviorCategoryBitFlagValues_Init();
    libGame_gt_CapturePointLogic_Init();
    libGame_gt_DimCapturePoint_Init();
    libGame_gt_UnDimCapturePoint_Init();
    libGame_gt_TowerCoreIsUnderAttack_Init();
    libGame_gt_TowerCoreHasTakenDamage_Init();
    libGame_gt_CCRecognitionSlow_Init();
    libGame_gt_CCRecognitionBlind_Init();
    libGame_gt_CCRecognitionRoot_Init();
    libGame_gt_CCRecognitionStun_Init();
    libGame_gt_CCRecognitionSilenced_Init();
    libGame_gt_CCRecognitionStasis_Init();
    libGame_gt_CCRecognitionTimeStopOn_Init();
    libGame_gt_CCRecognitionTimeStopOff_Init();
    libGame_gt_DeathRecapHeroDies_Init();
    libGame_gt_DeathRecapHeroRespawn_Init();
    libGame_gt_DEBUGManualAssignAward_Init();
    libGame_gt_EndofMatchAwardsDisabledResponse_Init();
    libGame_gt_MapSpecificEventInitializeResponse_Init();
    libGame_gt_MapSpecificEventUpdateResponse_Init();
    libGame_gt_AddtoVengeanceTargets_Init();
    libGame_gt_EscapeTrackingLowHealthDetected_Init();
    libGame_gt_EventBasedAwardsDataReport_Init();
    libGame_gt_TrackIfDeathOutnumbered_Init();
    libGame_gt_TeamPlayerHeroDeathGracePeriod_Init();
    libGame_gt_AddCombatMedicHealing_Init();
    libGame_gt_TeamfightTracking_Init();
    libGame_gt_SilencerDataCollection_Init();
    libGame_gt_ProtectorDataCollection_Init();
    libGame_gt_StunnerDataCollection_Init();
    libGame_gt_TrapperDataCollection_Init();
    libGame_gt_ClutchHealerIncrement_Init();
    libGame_gt_HatTrickAwardCounter_Init();
    libGame_gt_InitializeSecondaryAwardList_Init();
    libGame_gt_StartGame_Init();
    libGame_gt_PickingHeroesNormalMode_Init();
    libGame_gt_StartGameShowTowerRadius_Init();
    libGame_gt_AnnounceCountdown_Init();
    libGame_gt_RunAnimations_Init();
    libGame_gt_OpenTheGatesOpenTheGatesTimerExpires_Init();
    libGame_gt_SpawnMinionsMinionSpawnStartTimerExpires_Init();
    libGame_gt_TurnOnXPTrickleXPTrickleStartTimerExpires_Init();
    libGame_gt_ConfineHeroesToBaseUntilCountdownEnds_Init();
    libGame_gt_ConfineOtherStuffToBaseUntilCountdownEnds_Init();
    libGame_gt_DetermineWinningTeam_Init();
    libGame_gt_HeroDeathUpdateStatsAwardXPMakeAnnouccementsCORE_Init();
    libGame_gt_HeroDeathDiabloParticipatedInTakedown_Init();
    libGame_gt_HeroDeathSeasonedMarksmanParticipatedInTakedown_Init();
    libGame_gt_HeroDeathHeroDies_Init();
    libGame_gt_HeroDeathHeroDeathToastTimerExpires_Init();
    libGame_gt_HeroDeathHeroRespawnSoundCueTimerExpires_Init();
    libGame_gt_HeroDeathHeroRespawnTimerExpires_Init();
    libGame_gt_HeroDeathTeamMultikillTimerExpires_Init();
    libGame_gt_HeroDeathPlayerMultikillTimerExpires_Init();
    libGame_gt_HeroDeathUpdateMultikillTimerUI_Init();
    libGame_gt_HeroDeathKillStingerTimerExpires_Init();
    libGame_gt_HeroDeathDiabloDiabloDies_Init();
    libGame_gt_HeroDeathUtherEternalDevotionProc_Init();
    libGame_gt_HeroDeathUtherRedemptionProc_Init();
    libGame_gt_HeroDeathTyraelArchangelsWrathProc_Init();
    libGame_gt_HeroDeathSpecialDeathStateDiesTyraelUther_Init();
    libGame_gt_HeroDeathGallDies_Init();
    libGame_gt_InitializeCodeLaneSystem_Init();
    libGame_gt_PlayerLeavesGame_Init();
    libGame_gt_PlayerRejoinsGame_Init();
    libGame_gt_TeamAbandonedTheGameTimerExpires_Init();
    libGame_gt_PlayerLeftAnnouncementTimerExpires_Init();
    libGame_gt_MinionSpawnCycle_Init();
    libGame_gt_HeroMoonwellCooldownOnOff_Init();
    libGame_gt_HeroMoonwellDurationTextTagUpdates_Init();
    libGame_gt_HeroMount_Init();
    libGame_gt_HeroDismount_Init();
    libGame_gt_HeroDismountOnAbilityUseAttack_Init();
    libGame_gt_HeroDismountOnCheerDanceTauntUsed_Init();
    libGame_gt_GameGeneralNPCProcListener_Init();
    libGame_gt_NPCUnitDies_Init();
    libGame_gt_TownStructureDies_Init();
    libGame_gt_CoreDiesGameOver_Init();
    libGame_gt_LevelUp_Init();
    libGame_gt_RecentDamageTimerExpires_Init();
    libGame_gt_HeroDamageTracking_Init();
    libGame_gt_HeroKillCreditProximityTracking_Init();
    libGame_gt_HeroXPChanges_Init();
    libGame_gt_XPTrickle_Init();
    libGame_gt_PlayerHomeShieldProtectionOn_Init();
    libGame_gt_PlayerHomeShieldProtectionOff_Init();
    libGame_gt_PlayerShrubProximityRevealProc_Init();
    libGame_gt_PlayerHeroDisplacementBehaviors_Init();
    libGame_gt_PlayerRegenGlobeDummyImpact_Init();
    libGame_gt_PlayerRegenGlobeNeutralDummySet_Init();
    libGame_gt_ScalingTimerExpiration_Init();
    libGame_gt_JungleScalingTimerExpires_Init();
    libGame_gt_CoreScalingTimerExpires_Init();
    libGame_gt_TownScalingTimerExpires_Init();
    libGame_gt_ScoreTrackingTimeCCdEnemyHeroes_Init();
    libGame_gt_ScoreTrackingRavenTributeCollected_Init();
    libGame_gt_ScoreTrackingDragonActivated_Init();
    libGame_gt_ScoreTrackingDragonShrineCaptured_Init();
    libGame_gt_ScoreTrackingSkullCollected_Init();
    libGame_gt_ScoreTrackingSeedCollected_Init();
    libGame_gt_TalentsChoiceSelected_Init();
    libGame_gt_TowerTowerDeadStateGateCheck_Init();
    libGame_gt_TowerTowerMorphToDeadStateStructureDies_Init();
    libGame_gt_TowerHeroTargetingWarningSounds_Init();
    libGame_gt_InitializeTownSystem_Init();
    libGame_gt_InitializeMoonwellIconsonTowns_Init();
    libGame_gt_TownMidLateGamePowerTransitionOn_Init();
    libGame_gt_BaseRepulserFieldLaunchMissile_Init();
    libGame_gt_BaseSafeZonePunt_Init();
    libGame_gt_BaseUnitEntersSafeZone_Init();
    libGame_gt_BaseUnitExitsSafeZone_Init();
    libGame_gt_VehiclesUseVehicle_Init();
    libGame_gt_VehiclesLeaveVehicle_Init();
    libGame_gt_VehiclesVehicleDies_Init();
    libGame_gt_VehiclesRegenGlobe_Init();
    libGame_gt_VehicleDragonKnightBullRush_Init();
    libGame_gt_InitializeWatchTowers_Init();
    libGame_gt_WatchTowersOwnershipChanges_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libGame_InitLib_completed = false;

void libGame_InitLib () {
    if (libGame_InitLib_completed) {
        return;
    }

    libGame_InitLib_completed = true;

    libGame_InitLibraries();
    libGame_InitVariables();
    libGame_InitTriggers();
}

include "TriggerLibs/HeroesLib"
include "TriggerLibs/MapMechanicsLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"
include "TriggerLibs/StartingExperienceLib"
include "TriggerLibs/SoundLib"
include "TriggerLibs/GameDataHelperLib"
include "TriggerLibs/SupportLib"

