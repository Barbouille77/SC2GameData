include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib_h"
include "TriggerLibs/GameLib_h"
include "TriggerLibs/AILib_h"
include "TriggerLibs/UILib_h"
include "TriggerLibs/StartingExperienceLib_h"
include "TriggerLibs/SoundLib_h"
include "TriggerLibs/GameDataHelperLib_h"
include "TriggerLibs/SupportLib_h"

include "TriggerLibs/MapMechanicsLib_h"

//--------------------------------------------------------------------------------------------------
// Library: Maps
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libMapM_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libAIAI_InitVariables();
    libUIUI_InitVariables();
    libStEx_InitVariables();
    libSond_InitVariables();
    libGDHL_InitVariables();
    libSprt_InitVariables();
}

// Variable Initialization
bool libMapM_InitVariables_completed = false;

void libMapM_InitVariables () {
    int init_i;
    int init_i1;

    if (libMapM_InitVariables_completed) {
        return;
    }

    libMapM_InitVariables_completed = true;

    libMapM_gv_bALJungleLeashRespawnTime = 45.0;
    libMapM_gv_bALJungleCampScalingTimerDuration = 60.0;
    libMapM_gv_bALJungleOgreMageAuraAbilityPowerPercentage = 0.2;
    for (init_i = 0; init_i <= libMapM_gv_dataJungleMaxNumberOfDefenderTypes; init_i += 1) {
        libMapM_gv_dataJungleCampDefenderData[init_i].lv_initialSpawnDelay = 10.0;
        libMapM_gv_dataJungleCampDefenderData[init_i].lv_respawnTime = 10.0;
    }
    for (init_i = 0; init_i <= libMapM_gv_jungleMaxCamps; init_i += 1) {
        libMapM_gv_jungleCreepCamps[init_i].lv_mapDataCampType = libMapM_ge_JungleCampTypes_MercCamp;
        libMapM_gv_jungleCreepCamps[init_i].lv_mapDataCampDefenderType = libMapM_ge_JungleCampDefenderTypes_Custom;
        libMapM_gv_jungleCreepCamps[init_i].lv_mapDataMinimapIconScale = 0.7;
        libMapM_gv_jungleCreepCamps[init_i].lv_mapDataMercSpawnType = libMapM_ge_JungleCampMercTypes_Custom;
        libMapM_gv_jungleCreepCamps[init_i].lv_mapDataBattleshipSpawnType = libMapM_ge_JungleCampMercTypes_Custom;
        libMapM_gv_jungleCreepCamps[init_i].lv_defenderCoweringUnitGroup = UnitGroupEmpty();
        for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxTeams; init_i1 += 1) {
            libMapM_gv_jungleCreepCamps[init_i].lv_mercMercCampHasSingleWaypoint[init_i1] = true;
        }
        libMapM_gv_jungleCreepCamps[init_i].lv_campHelperTextTag = c_textTagNone;
        libMapM_gv_jungleCreepCamps[init_i].lv_campRespawnTextTag = c_textTagNone;
        libMapM_gv_jungleCreepCamps[init_i].lv_campRespawnTextTagObs = c_textTagNone;
        libMapM_gv_jungleCreepCamps[init_i].lv_campSpecialTextTag = c_textTagNone;
        libMapM_gv_jungleCreepCamps[init_i].lv_campTextTagType = libMapM_ge_JungleCampTextTagTypes_Helper;
        libMapM_gv_jungleCreepCamps[init_i].lv_stateCreepBirthTimer = TimerCreate();
        libMapM_gv_jungleCreepCamps[init_i].lv_stateCreepRespawnTimer = TimerCreate();
        libMapM_gv_jungleCreepCamps[init_i].lv_stateCreepActiveTimer = TimerCreate();
        libMapM_gv_jungleCreepCamps[init_i].lv_aIState = libMapM_ge_JungleCampStates_Dead;
    }
    for (init_i = 0; init_i <= libMapM_gv_jungleMaxMercGroups; init_i += 1) {
        libMapM_gv_jungleMiniMapIconGroup[init_i] = UnitGroupEmpty();
    }
    for (init_i = 0; init_i <= libMapM_gv_mapMechanicsMaxCount_C; init_i += 1) {
        libMapM_gv_mapMechanics[init_i] = "";
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libMapM_gv_mMIntroCutscene[init_i] = c_cutsceneNone;
    }
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libMapM_gv_mMIntroCutsceneFinished[init_i] = true;
    }
    libMapM_gv_mMAnnouncementDialog = c_invalidDialogId;
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libMapM_gv_mMAnnouncementDialogsMultiple[init_i] = c_invalidDialogId;
    }
    libMapM_gv_mMRepulseRegionPunchedGroup = UnitGroupEmpty();
    libMapM_gv_mMRavenTributes = UnitGroupEmpty();
    libMapM_gv_mMRavenTributeWarnings = UnitGroupEmpty();
    libMapM_gv_mMRavenStartTime = 150.0;
    libMapM_gv_mMRavenTributeSpawnTimeVariance = 20;
    libMapM_gv_mMRavenTributePostCurseWaitTime = 70.0;
    libMapM_gv_mMRavenStartTimer = TimerCreate();
    libMapM_gv_mMRavenWarningTimer = TimerCreate();
    libMapM_gv_mMRavenTributeSpawnTimer = TimerCreate();
    libMapM_gv_mMRavenTributeSpawnCount = 1;
    libMapM_gv_mMRavenCurseTimer = TimerCreate();
    for (init_i = 0; init_i <= 5; init_i += 1) {
        libMapM_gv_mMRavenTimers[init_i] = TimerCreate();
    }
    libMapM_gv_mMRavenEventFirstTime = true;
    libMapM_gv_mMGardensDragonDragonballKnightNameC = StringExternal("Param/Value/lib_MapM_C1C93EA8");
    libMapM_gv_mMGardensDragonDragonballShrineNameC = StringExternal("Param/Value/lib_MapM_779CD885");
    libMapM_gv_mMGardensDragonStatueTextTag = c_textTagNone;
    libMapM_gv_mMGardensDragonStatueTextTagAllyOwned = c_textTagNone;
    libMapM_gv_mMGardensDragonStatueTextTagEnemyOwned = c_textTagNone;
    libMapM_gv_mMGardensDragonDragonKnightLifeTimer = TimerCreate();
    libMapM_gv_mMGardensDragonCurrentState = libMapM_ge_MMGardensDragonState_Idle;
    libMapM_gv_mMGardensDragonSpawnFirstTime = true;
    libMapM_gv_mMGardensDragonDragonTowerStartTimer = TimerCreate();
    libMapM_gv_mMGardensDragonDragonTowerRespawnTimer = TimerCreate();
    libMapM_gv_mMGardensDragonDragonTowerWarningTimer = TimerCreate();
    libMapM_gv_mMGardensDragonDragonStatueActiveReminderTimer = TimerCreate();
    for (init_i = 0; init_i <= libMapM_gv_mMGardensDragonDragonTowerMaxCount; init_i += 1) {
        libMapM_gv_mMGardensDragonDragonTowers[init_i].lv_enabled = true;
        libMapM_gv_mMGardensDragonDragonTowers[init_i].lv_helperText = c_textTagNone;
    }
    libMapM_gv_mMDragonballsTransmissionShrinesRechargeFirstTime = true;
    libMapM_gv_mMUnderworldGatesAbove = UnitGroupEmpty();
    libMapM_gv_mMUnderworldGatesBelow = UnitGroupEmpty();
    for (init_i = 0; init_i <= libCore_gv_bALMaxEnginePlayerCount; init_i += 1) {
        libMapM_gv_mMUnderworldPlayerPlane[init_i] = libMapM_ge_MMUnderworldGroundPlane_AboveGround;
    }
    for (init_i = 0; init_i <= 30; init_i += 1) {
        libMapM_gv_mMUnderworldMinionGroups[init_i].lv_units = UnitGroupEmpty();
    }
    libMapM_gv_mMUnderworldSkulls = UnitGroupEmpty();
    libMapM_gv_mMUnderworldMineTimer = TimerCreate();
    libMapM_gv_mMUnderworldMineSnapshotStartTime_C = (4 * 60);
    libMapM_gv_mMUnderworldOpenFirstTime = true;
    libMapM_gv_mMUnderworldPrepTimer = TimerCreate();
    libMapM_gv_mMUnderworldTransmissionUnderworldOpenFirstTime = true;
    libMapM_gv_mMHoCForestActiveAncients = UnitGroupEmpty();
}

// Presets
string libMapM_ge_JungleCampStates_Ident (int lp_val) {
         if (lp_val == libMapM_ge_JungleCampStates_Idle) { return "Idle"; }
    else if (lp_val == libMapM_ge_JungleCampStates_Busy) { return "Busy"; }
    else if (lp_val == libMapM_ge_JungleCampStates_Dead) { return "Dead"; }
    else if (lp_val == libMapM_ge_JungleCampStates_Paused) { return "Paused"; }
    else if (lp_val == libMapM_ge_JungleCampStates_Hibernating) { return "Hibernating"; }
    else if (lp_val == libMapM_ge_JungleCampStates_HibernatingReadyToRespawn) { return "HibernatingReadyToRespawn"; }
    return null;
}

// Functions
void libMapM_gf_DataInitializeScalingDataForDefender (int lp_defenderType, string lp_scalingBehavior) {
    // Variable Declarations
    int lv_itRank;
    int lv_defenderTypeIndex;

    // Variable Initialization

    // Implementation
    lv_defenderTypeIndex = (lp_defenderType);
    libMapM_gv_dataJungleCampDefenderData[lv_defenderTypeIndex].lv_numberOfRanks = MinI((CatalogFieldValueCount(c_gameCatalogBehavior, lp_scalingBehavior, "VeterancyLevelArray", c_playerAny) - 1), libCore_gv_dataScalingMaxScalingTicks);
}

void libMapM_gf_DataInitializeScalingDataForMerc (int lp_mercType, string lp_scalingBehavior) {
    // Variable Declarations
    int lv_itRank;
    int lv_mercTypeIndex;

    // Variable Initialization

    // Implementation
    lv_mercTypeIndex = (lp_mercType);
    libMapM_gv_dataJungleCampMercData[lv_mercTypeIndex].lv_numberOfRanks = MinI((CatalogFieldValueCount(c_gameCatalogBehavior, lp_scalingBehavior, "VeterancyLevelArray", c_playerAny) - 1), libCore_gv_dataScalingMaxScalingTicks);
}

void libMapM_gf_JungleInitializeDefenderData (int lp_camp) {
    int auto6AB4C519_ae;
    int auto6AB4C519_ai;
    int auto7D68F867_ae;
    int auto7D68F867_ai;
    int auto95FF0122_ae;
    int auto95FF0122_ai;

    // Variable Declarations
    int lv_i;
    int lv_campTypeIndex;
    int lv_missingPoints;

    // Variable Initialization

    // Implementation
    if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType != libMapM_ge_JungleCampDefenderTypes_Custom)) {
        lv_campTypeIndex = (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType);
        libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampIsSoloable = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_campIsSoloable;
        libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderDefendersCoweronDeath = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_defendersCoweronDeath;
        libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderInitialSpawnDelay = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_initialSpawnDelay;
        libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderRespawnTime = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_respawnTime;
        libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderNumberofCreeps = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_numberOfCreeps;
        libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_campTypeMinimapLabel;
        auto6AB4C519_ae = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_numberOfCreeps;
        auto6AB4C519_ai = 1;
        lv_i = 1;
        for ( ; ( (auto6AB4C519_ai >= 0 && lv_i <= auto6AB4C519_ae) || (auto6AB4C519_ai <= 0 && lv_i >= auto6AB4C519_ae) ) ; lv_i += auto6AB4C519_ai ) {
            libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderUnitTypes[lv_i] = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_creepUnitTypes[lv_i];
            libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCoweringUnit[lv_i] = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_defenderCoweringUnit[lv_i];
        }
        libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderNumberOfRanks = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_numberOfRanks;
        auto7D68F867_ae = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_numberOfRanks;
        auto7D68F867_ai = 1;
        lv_i = 0;
        for ( ; ( (auto7D68F867_ai >= 0 && lv_i <= auto7D68F867_ae) || (auto7D68F867_ai <= 0 && lv_i >= auto7D68F867_ae) ) ; lv_i += auto7D68F867_ai ) {
            libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampLevel[lv_i] = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_campLevel[lv_i];
        }
    }

    auto95FF0122_ae = libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderNumberofCreeps;
    auto95FF0122_ai = 1;
    lv_i = 1;
    for ( ; ( (auto95FF0122_ai >= 0 && lv_i <= auto95FF0122_ae) || (auto95FF0122_ai <= 0 && lv_i >= auto95FF0122_ae) ) ; lv_i += auto95FF0122_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataDefenderSpawnPoints[lv_i] == null)) {
            lv_missingPoints += 1;
        }

    }
    if ((lv_missingPoints > 0)) {
        TextExpressionSetToken("Param/Expression/lib_MapM_7AB5D588", "A", IntToText(lp_camp));
        TextExpressionSetToken("Param/Expression/lib_MapM_7AB5D588", "B", IntToText(lv_missingPoints));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_MapM_7AB5D588"), true);
    }

    libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCaptureXPValue = libMapM_gv_dataJungleCampDefenderData[lv_campTypeIndex].lv_xPAwardForCapture;
}

void libMapM_gf_JungleInitializeMercCampData (int lp_camp) {
    int autoD92817D3_ae;
    int autoD92817D3_ai;
    int auto3F7D2E74_ae;
    int auto3F7D2E74_ai;
    int autoC6A8DA7C_ae;
    int autoC6A8DA7C_ai;
    int auto2503891E_ae;
    int auto2503891E_ai;

    // Variable Declarations
    int lv_i;
    int lv_team;
    int lv_lane;
    int lv_waypoint;
    int lv_campTypeIndex;
    int lv_ownerPlayer;
    point lv_rallyPoint;
    bool lv_foundLane;
    int lv_spawnLane;
    int lv_spawnFirstWaypointIndex;

    // Variable Initialization

    // Implementation
    lv_campTypeIndex = (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataMercSpawnType);
    libMapM_gv_jungleCreepCamps[lp_camp].lv_mercNumberOfMinionsSpawned = libMapM_gv_dataJungleCampMercData[lv_campTypeIndex].lv_numberOfMinionsSpawned;
    autoD92817D3_ae = libMapM_gv_dataJungleCampMercData[lv_campTypeIndex].lv_numberOfMinionsSpawned;
    autoD92817D3_ai = 1;
    lv_i = 1;
    for ( ; ( (autoD92817D3_ai >= 0 && lv_i <= autoD92817D3_ae) || (autoD92817D3_ai <= 0 && lv_i >= autoD92817D3_ae) ) ; lv_i += autoD92817D3_ai ) {
        libMapM_gv_jungleCreepCamps[lp_camp].lv_mercSpawnedMinionUnitType[lv_i] = libMapM_gv_dataJungleCampMercData[lv_campTypeIndex].lv_spawnedMinionUnitTypes[lv_i];
    }
    libMapM_gv_jungleCreepCamps[lp_camp].lv_mercNumberOfRanks = libMapM_gv_dataJungleCampMercData[lv_campTypeIndex].lv_numberOfRanks;
    auto3F7D2E74_ae = 2;
    auto3F7D2E74_ai = 1;
    lv_team = 1;
    for ( ; ( (auto3F7D2E74_ai >= 0 && lv_team <= auto3F7D2E74_ae) || (auto3F7D2E74_ai <= 0 && lv_team >= auto3F7D2E74_ae) ) ; lv_team += auto3F7D2E74_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_mercMercCampHasSingleWaypoint[lv_team] == true)) {
            if ((lv_team == 1)) {
                lv_rallyPoint = libMapM_gv_jungleCreepCamps[lp_camp].lv_mercOrderMercCampPathing[1].lv_waypoint;
                lv_ownerPlayer = libCore_gv_cOMPUTER_TeamOrder;
            }
            else {
                lv_rallyPoint = libMapM_gv_jungleCreepCamps[lp_camp].lv_mercChaosMercCampPathing[1].lv_waypoint;
                lv_ownerPlayer = libCore_gv_cOMPUTER_TeamChaos;
            }
        }
        else {
            if ((lv_team == 1)) {
                lv_rallyPoint = libMapM_gf_JungleDetermineMercWaypoint(lv_team, lp_camp);
                lv_ownerPlayer = libCore_gv_cOMPUTER_TeamOrder;
            }
            else {
                lv_rallyPoint = libMapM_gf_JungleDetermineMercWaypoint(lv_team, lp_camp);
                lv_ownerPlayer = libCore_gv_cOMPUTER_TeamChaos;
            }
        }
        lv_foundLane = false;
        autoC6A8DA7C_ae = libGame_gv_laneCount;
        autoC6A8DA7C_ai = 1;
        lv_lane = 1;
        for ( ; ( (autoC6A8DA7C_ai >= 0 && lv_lane <= autoC6A8DA7C_ae) || (autoC6A8DA7C_ai <= 0 && lv_lane >= autoC6A8DA7C_ae) ) ; lv_lane += autoC6A8DA7C_ai ) {
            auto2503891E_ae = libGame_gv_laneData[lv_lane].lv_waypointCount;
            auto2503891E_ai = 1;
            lv_waypoint = 1;
            for ( ; ( (auto2503891E_ai >= 0 && lv_waypoint <= auto2503891E_ae) || (auto2503891E_ai <= 0 && lv_waypoint >= auto2503891E_ae) ) ; lv_waypoint += auto2503891E_ai ) {
                if ((libGame_gv_laneData[lv_lane].lv_waypoints[lv_waypoint] == lv_rallyPoint)) {
                    lv_spawnLane = lv_lane;
                    lv_spawnFirstWaypointIndex = lv_waypoint;
                    lv_foundLane = true;
                    break;
                }

            }
        }
        if ((lv_foundLane == false)) {
            libGame_gf_CalculateSpawnedMinionGoalPoints(lv_ownerPlayer, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint);
            lv_spawnLane = libGame_gv_spawnedMinionLane;
            lv_spawnFirstWaypointIndex = libGame_gv_spawnedMinionFirstWaypointIndex;
        }

        libMapM_gv_jungleCreepCamps[lp_camp].lv_mercLaneToSpawnIn[lv_team] = lv_spawnLane;
        libMapM_gv_jungleCreepCamps[lp_camp].lv_mercSpawnFirstWaypointIndex[lv_team] = lv_spawnFirstWaypointIndex;
    }
}

void libMapM_gf_JungleUpdateMercCampData (int lp_camp) {
    int auto14B3DEF5_ae;
    int auto14B3DEF5_ai;
    int autoAF4748C2_ae;
    int autoAF4748C2_ai;
    int autoFDA6A904_ae;
    int autoFDA6A904_ai;

    // Variable Declarations
    int lv_team;
    int lv_lane;
    int lv_waypoint;
    int lv_ownerPlayer;
    point lv_rallyPoint;
    bool lv_foundLane;
    int lv_spawnLane;
    int lv_spawnFirstWaypointIndex;

    // Variable Initialization

    // Implementation
    auto14B3DEF5_ae = 2;
    auto14B3DEF5_ai = 1;
    lv_team = 1;
    for ( ; ( (auto14B3DEF5_ai >= 0 && lv_team <= auto14B3DEF5_ae) || (auto14B3DEF5_ai <= 0 && lv_team >= auto14B3DEF5_ae) ) ; lv_team += auto14B3DEF5_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_mercMercCampHasSingleWaypoint[lv_team] == true)) {
            continue;
        }
        else {
            if ((lv_team == 1)) {
                lv_rallyPoint = libMapM_gf_JungleDetermineMercWaypoint(lv_team, lp_camp);
                lv_ownerPlayer = libCore_gv_cOMPUTER_TeamOrder;
            }
            else {
                lv_rallyPoint = libMapM_gf_JungleDetermineMercWaypoint(lv_team, lp_camp);
                lv_ownerPlayer = libCore_gv_cOMPUTER_TeamChaos;
            }
        }
        lv_foundLane = false;
        autoAF4748C2_ae = libGame_gv_laneCount;
        autoAF4748C2_ai = 1;
        lv_lane = 1;
        for ( ; ( (autoAF4748C2_ai >= 0 && lv_lane <= autoAF4748C2_ae) || (autoAF4748C2_ai <= 0 && lv_lane >= autoAF4748C2_ae) ) ; lv_lane += autoAF4748C2_ai ) {
            autoFDA6A904_ae = libGame_gv_laneData[lv_lane].lv_waypointCount;
            autoFDA6A904_ai = 1;
            lv_waypoint = 1;
            for ( ; ( (autoFDA6A904_ai >= 0 && lv_waypoint <= autoFDA6A904_ae) || (autoFDA6A904_ai <= 0 && lv_waypoint >= autoFDA6A904_ae) ) ; lv_waypoint += autoFDA6A904_ai ) {
                if ((libGame_gv_laneData[lv_lane].lv_waypoints[lv_waypoint] == lv_rallyPoint)) {
                    lv_spawnLane = lv_lane;
                    lv_spawnFirstWaypointIndex = lv_waypoint;
                    lv_foundLane = true;
                    break;
                }

            }
        }
        if ((lv_foundLane == false)) {
            libGame_gf_CalculateSpawnedMinionGoalPoints(lv_ownerPlayer, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint);
            lv_spawnLane = libGame_gv_spawnedMinionLane;
            lv_spawnFirstWaypointIndex = libGame_gv_spawnedMinionFirstWaypointIndex;
        }

        libMapM_gv_jungleCreepCamps[lp_camp].lv_mercLaneToSpawnIn[lv_team] = lv_spawnLane;
        libMapM_gv_jungleCreepCamps[lp_camp].lv_mercSpawnFirstWaypointIndex[lv_team] = lv_spawnFirstWaypointIndex;
    }
}

point libMapM_gf_JungleDetermineMercWaypoint (int lp_owningTeam, int lp_camp) {
    int auto6D5E303D_ae;
    int auto6D5E303D_ai;
    int autoD8182B22_ae;
    int autoD8182B22_ai;

    // Variable Declarations
    point lv_waypoint;
    int lv_itPath;
    int lv_enemyTeamPlayer;
    unitgroup lv_buildings;

    // Variable Initialization
    lv_buildings = UnitGroupEmpty();

    // Implementation
    if ((lp_owningTeam == libGame_gv_teamOrderIndex_C)) {
        lv_enemyTeamPlayer = libCore_gv_cOMPUTER_TeamChaos;
        auto6D5E303D_ae = libMapM_gv_dataJungleMaxNumberOfPaths;
        auto6D5E303D_ai = 1;
        lv_itPath = 1;
        for ( ; ( (auto6D5E303D_ai >= 0 && lv_itPath <= auto6D5E303D_ae) || (auto6D5E303D_ai <= 0 && lv_itPath >= auto6D5E303D_ae) ) ; lv_itPath += auto6D5E303D_ai ) {
            if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_mercOrderMercCampPathing[lv_itPath].lv_townRegion == null)) {
                lv_waypoint = libMapM_gv_jungleCreepCamps[lp_camp].lv_mercOrderMercCampPathing[lv_itPath].lv_waypoint;
                if ((lv_waypoint == null)) {
                    TextExpressionSetToken("Param/Expression/lib_MapM_2E7BBFDE", "A", IntToText(lp_camp));
                    TextExpressionSetToken("Param/Expression/lib_MapM_2E7BBFDE", "B", IntToText(lv_itPath));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_MapM_2E7BBFDE"), true);
                }

                return lv_waypoint;
            }
            else {
                lv_buildings = UnitGroup(null, lv_enemyTeamPlayer, libMapM_gv_jungleCreepCamps[lp_camp].lv_mercOrderMercCampPathing[lv_itPath].lv_townRegion, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((UnitGroupCount(lv_buildings, c_unitCountAlive) > 0)) {
                    lv_waypoint = libMapM_gv_jungleCreepCamps[lp_camp].lv_mercOrderMercCampPathing[lv_itPath].lv_waypoint;
                    return lv_waypoint;
                }

            }
        }
    }

    if ((lp_owningTeam == libGame_gv_teamChaosIndex_C)) {
        lv_enemyTeamPlayer = libCore_gv_cOMPUTER_TeamOrder;
        autoD8182B22_ae = libMapM_gv_dataJungleMaxNumberOfPaths;
        autoD8182B22_ai = 1;
        lv_itPath = 1;
        for ( ; ( (autoD8182B22_ai >= 0 && lv_itPath <= autoD8182B22_ae) || (autoD8182B22_ai <= 0 && lv_itPath >= autoD8182B22_ae) ) ; lv_itPath += autoD8182B22_ai ) {
            if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_mercChaosMercCampPathing[lv_itPath].lv_townRegion == null)) {
                lv_waypoint = libMapM_gv_jungleCreepCamps[lp_camp].lv_mercChaosMercCampPathing[lv_itPath].lv_waypoint;
                if ((lv_waypoint == null)) {
                    TextExpressionSetToken("Param/Expression/lib_MapM_72120814", "A", IntToText(lp_camp));
                    TextExpressionSetToken("Param/Expression/lib_MapM_72120814", "B", IntToText(lv_itPath));
                    TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_MapM_72120814"), true);
                }

                return lv_waypoint;
            }
            else {
                lv_buildings = UnitGroup(null, lv_enemyTeamPlayer, libMapM_gv_jungleCreepCamps[lp_camp].lv_mercChaosMercCampPathing[lv_itPath].lv_townRegion, UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((UnitGroupCount(lv_buildings, c_unitCountAlive) > 0)) {
                    lv_waypoint = libMapM_gv_jungleCreepCamps[lp_camp].lv_mercChaosMercCampPathing[lv_itPath].lv_waypoint;
                    return lv_waypoint;
                }

            }
        }
    }

    TriggerDebugOutput(1, StringExternal("Param/Value/lib_MapM_69AA4E42"), true);
    return lv_waypoint;
}

void libMapM_gf_JungleInitializeDoubloonCampData (int lp_camp) {
    // Variable Declarations
    int lv_i;
    int lv_spawnwave;
    int lv_lane;
    int lv_wapoint;
    int lv_campTypeIndex;
    point lv_rallyPoint;

    // Variable Initialization

    // Implementation
    lv_campTypeIndex = (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataBattleshipSpawnType);
    libMapM_gv_jungleCreepCamps[lp_camp].lv_piratesNumberOfRanks = libMapM_gv_dataJungleCampMercData[lv_campTypeIndex].lv_numberOfRanks;
}

void libMapM_gf_JungleInitializeDoubloonSmallCampData (int lp_camp) {
    // Variable Declarations
    int lv_campTypeIndex;

    // Variable Initialization

    // Implementation
    lv_campTypeIndex = (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataBattleshipSpawnType);
    libMapM_gv_jungleCreepCamps[lp_camp].lv_piratesNumberOfRanks = libMapM_gv_dataJungleCampMercData[lv_campTypeIndex].lv_numberOfRanks;
}

void libMapM_gf_JungleInitializeAshenvaleForestCampData (int lp_camp) {
    // Implementation
    libMapM_gf_MMHoCLivingTreesInitializeLivingTreesArray();
    libMapM_gf_MMHoCForestInitializeForestsArray();
    libMapM_gv_mMHoCForestJungleCamp = lp_camp;
    libMapM_gv_jungleCreepCamps[lp_camp].lv_mercNumberOfRanks = libMapM_gv_dataJungleCampMercData[(libMapM_ge_JungleCampMercTypes_AshenvaleAncients)].lv_numberOfRanks;
    libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataMercSpawnType = libMapM_ge_JungleCampMercTypes_AshenvaleAncients;
}

void libMapM_gf_JungleInitializeTryMeCampData (int lp_camp) {
}

void libMapM_gf_JungleInitializeCreepCamp (int lp_camp) {
    // Variable Declarations
    string lv_iconScaleString;
    string lv_iconUnitType;
    unit lv_iconUnit;
    string lv_icon;
    const int lv_textTagHeightOffset = 4;
    const fixed lv_iconScale = 0.7;
    string lv_timerString;

    // Variable Initialization
    lv_iconScaleString = "";
    lv_timerString = "";

    // Implementation
    libMapM_gv_jungleCreepCamps[lp_camp].lv_campOwnershipFlagUnit = UnitGroupUnit(UnitGroup("CampOwnershipFlag", c_playerAny, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataDefenderLeashRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_campOwnershipFlagUnit == null)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_MapM_59C36C74"), true);
        return ;
    }

    if (((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataMinimapIconUseTeamColor == true) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampType == libMapM_ge_JungleCampTypes_MercCamp))) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "JungleCampIconUnitTeamColor", c_unitCreateIgnorePlacement, 0, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint);
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "JungleCampIconUnit", c_unitCreateIgnorePlacement, 0, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint);
    }
    lv_iconUnit = UnitLastCreated();
    TextTagCreate(StringToText(""), 16, UnitGetPosition(libMapM_gv_jungleCreepCamps[lp_camp].lv_campOwnershipFlagUnit), lv_textTagHeightOffset, true, false, PlayerGroupAll());
    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), false);
    libMapM_gv_jungleCreepCamps[lp_camp].lv_campHelperTextTag = TextTagLastCreated();
    TextTagCreate(StringToText(""), 32, UnitGetPosition(libMapM_gv_jungleCreepCamps[lp_camp].lv_campOwnershipFlagUnit), 2.0, true, false, PlayerGroupAll());
    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), false);
    libMapM_gv_jungleCreepCamps[lp_camp].lv_campRespawnTextTag = TextTagLastCreated();
    TextTagCreate(StringToText(""), 40, UnitGetPosition(libMapM_gv_jungleCreepCamps[lp_camp].lv_campOwnershipFlagUnit), 2.0, true, false, PlayerGroupAll());
    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), false);
    libMapM_gv_jungleCreepCamps[lp_camp].lv_campRespawnTextTagObs = TextTagLastCreated();
    TextTagCreate(StringToText(""), 32, PointWithOffset(libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint, 1.0, 1.0), 0.0, true, false, PlayerGroupAll());
    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), false);
    libMapM_gv_jungleCreepCamps[lp_camp].lv_campSpecialTextTag = TextTagLastCreated();
    libNtve_gf_SendActorMessageToUnit(lv_iconUnit, "SetMinimapVisibility");
    lv_icon = libMapM_gf_JungleGetCurrentIconForJungleCamp(lp_camp, true);
    libNtve_gf_SendActorMessageToUnit(lv_iconUnit, "MinimapIcon " + lv_icon);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), (("MinimapIconScale " + FixedToString(libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataMinimapIconScale, c_fixedPrecisionAny))));
    libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit = lv_iconUnit;
    libMapM_gf_JungleInitializeCreepCampDelayMinimapIcons(lv_iconUnit, libMapM_gv_bALJungleBirthDelay);
}

trigger auto_libMapM_gf_JungleInitializeCreepCampDelayMinimapIcons_Trigger = null;
unit auto_libMapM_gf_JungleInitializeCreepCampDelayMinimapIcons_lp_unit;
fixed auto_libMapM_gf_JungleInitializeCreepCampDelayMinimapIcons_lp_delayTime;

void libMapM_gf_JungleInitializeCreepCampDelayMinimapIcons (unit lp_unit, fixed lp_delayTime) {
    auto_libMapM_gf_JungleInitializeCreepCampDelayMinimapIcons_lp_unit = lp_unit;
    auto_libMapM_gf_JungleInitializeCreepCampDelayMinimapIcons_lp_delayTime = lp_delayTime;

    if (auto_libMapM_gf_JungleInitializeCreepCampDelayMinimapIcons_Trigger == null) {
        auto_libMapM_gf_JungleInitializeCreepCampDelayMinimapIcons_Trigger = TriggerCreate("auto_libMapM_gf_JungleInitializeCreepCampDelayMinimapIcons_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_JungleInitializeCreepCampDelayMinimapIcons_Trigger, false, false);
}

bool auto_libMapM_gf_JungleInitializeCreepCampDelayMinimapIcons_TriggerFunc (bool testConds, bool runActions) {
    unit lp_unit = auto_libMapM_gf_JungleInitializeCreepCampDelayMinimapIcons_lp_unit;
    fixed lp_delayTime = auto_libMapM_gf_JungleInitializeCreepCampDelayMinimapIcons_lp_delayTime;

    // Implementation
    Wait(lp_delayTime, c_timeGame);
    libNtve_gf_SendActorMessageToUnit(lp_unit, "SetMinimapVisibility 1");
    return true;
}

int libMapM_gf_JungleGetJungleCampForUnit (unit lp_unit) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_JungleDefenderCreepCampIndex)));
}

int libMapM_gf_JungleGetJungleUnitIndexForUnit (unit lp_unit) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_JungleDefenderCreepUnitIndex)));
}

string libMapM_gf_JungleGetCurrentIconForJungleCamp (int lp_camp, bool lp_alive) {
    int autoC825EDFA_val;
    int autoDE822826_val;
    int autoC838F424_val;

    // Implementation
    if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataMinimapIcon != null)) {
        return libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataMinimapIcon;
    }

    autoC825EDFA_val = libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampType;
    if (autoC825EDFA_val == libMapM_ge_JungleCampTypes_MercCamp) {
        autoDE822826_val = libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType;
        if (autoDE822826_val == libMapM_ge_JungleCampDefenderTypes_SiegeGiants) {
            return "Assets\\Textures\\storm_ui_minimapicon_merccamp.dds";
        }
        else if (autoDE822826_val == libMapM_ge_JungleCampDefenderTypes_SiegeCamp1) {
            return "Assets\\Textures\\storm_ui_minimapicon_merccamp.dds";
        }
        else if (autoDE822826_val == libMapM_ge_JungleCampDefenderTypes_SiegeCamp2) {
            return "Assets\\Textures\\storm_ui_minimapicon_merccamp.dds";
        }
        else if (autoDE822826_val == libMapM_ge_JungleCampDefenderTypes_SiegeCamp3) {
            return "Assets\\Textures\\storm_ui_minimapicon_merccamp.dds";
        }
        else if (autoDE822826_val == libMapM_ge_JungleCampDefenderTypes_Knights) {
            return "Assets\\Textures\\storm_ui_minimapicon_elitemerccamp.dds";
        }
        else if (autoDE822826_val == libMapM_ge_JungleCampDefenderTypes_BruiserCamp1) {
            return "Assets\\Textures\\storm_ui_minimapicon_elitemerccamp.dds";
        }
        else if (autoDE822826_val == libMapM_ge_JungleCampDefenderTypes_BruiserCamp2) {
            return "Assets\\Textures\\storm_ui_minimapicon_elitemerccamp.dds";
        }
        else if (autoDE822826_val == libMapM_ge_JungleCampDefenderTypes_BruiserCamp3) {
            return "Assets\\Textures\\storm_ui_minimapicon_elitemerccamp.dds";
        }
        else if (autoDE822826_val == libMapM_ge_JungleCampDefenderTypes_GraveGolem) {
            return "Assets\\Textures\\storm_ui_minimapicon_golemmerccamp.dds";
        }
        else if (autoDE822826_val == libMapM_ge_JungleCampDefenderTypes_BossCamp1) {
            return "Assets\\Textures\\storm_ui_minimapicon_golemmerccamp.dds";
        }
        else if (autoDE822826_val == libMapM_ge_JungleCampDefenderTypes_BossCamp2) {
            return "Assets\\Textures\\storm_ui_minimapicon_golemmerccamp.dds";
        }
        else if (autoDE822826_val == libMapM_ge_JungleCampDefenderTypes_BossCamp3) {
            return "Assets\\Textures\\storm_ui_minimapicon_golemmerccamp.dds";
        }
        else {
            return "Assets\\Textures\\storm_ui_minimapicon_merccamp.dds";
        }
    }
    else if (autoC825EDFA_val == libMapM_ge_JungleCampTypes_DoubloonCamp) {
        if ((lp_alive == true)) {
            return "Assets\\Textures\\storm_ui_minimapicon_ogreking.dds";
        }
        else {
            return "Assets\\Textures\\storm_ui_minimapicon_ogreking_dead.dds";
        }
    }
    else if (autoC825EDFA_val == libMapM_ge_JungleCampTypes_DoubloonSmallCamp) {
        if ((lp_alive == true)) {
            return "Assets\\Textures\\storm_ui_minimapicon_piratecamp.dds";
        }
        else {
            return "Assets\\Textures\\storm_ui_minimapicon_piratecampempty.dds";
        }
    }
    else if (autoC825EDFA_val == libMapM_ge_JungleCampTypes_TryMeCamp) {
        autoC838F424_val = libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType;
        if (autoC838F424_val == libMapM_ge_JungleCampDefenderTypes_SiegeGiants) {
            return "Assets\\Textures\\storm_ui_minimapicon_merccamp.dds";
        }
        else if (autoC838F424_val == libMapM_ge_JungleCampDefenderTypes_Knights) {
            return "Assets\\Textures\\storm_ui_minimapicon_elitemerccamp.dds";
        }
        else if (autoC838F424_val == libMapM_ge_JungleCampDefenderTypes_GraveGolem) {
            return "Assets\\Textures\\storm_ui_minimapicon_golemmerccamp.dds";
        }
        else {
            return "Assets\\Textures\\storm_ui_minimapicon_merccamp.dds";
        }
    }
    else {
        if ((lp_alive == true)) {
            return "Assets\\Textures\\storm_ui_minimapicon_creepcamp_medium.dds";
        }
        else {
            return "Assets\\Textures\\storm_ui_minimapicon_creepcamp_medium_dead.dds";
        }
    }
}

string libMapM_gf_JungleGetPortraitForJungleCamp (int lp_camp) {
    int auto253F4BAC_val;
    int autoF6D62E55_val;

    // Implementation
    auto253F4BAC_val = libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampType;
    if (auto253F4BAC_val == libMapM_ge_JungleCampTypes_MercCamp) {
        autoF6D62E55_val = libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataMercSpawnType;
        if (autoF6D62E55_val == libMapM_ge_JungleCampMercTypes_SiegeGiants) {
        }
        else if (autoF6D62E55_val == libMapM_ge_JungleCampMercTypes_Ogres) {
        }
        else if (autoF6D62E55_val == libMapM_ge_JungleCampMercTypes_GraveGolem) {
        }
        else {
        }
    }
    else {
    }
    return null;
}

string libMapM_gf_JungleGetPortraitForUnitType (string lp_unitType) {
    string autoA489BFB7_val;

    // Implementation
    autoA489BFB7_val = lp_unitType;
    if (autoA489BFB7_val == "MercLanerSiegeGiant") {
        return "Assets\\Textures\\storm_temp_war3_btnberserk.dds";
    }
    else if (autoA489BFB7_val == "MercLanerMeleeKnight") {
        return "Assets\\Textures\\storm_temp_war3_btnrevenant.dds";
    }
    else if (autoA489BFB7_val == "MercLanerRangedMage") {
        return "Assets\\Textures\\storm_temp_war3_btnrevenant.dds";
    }
    else if (autoA489BFB7_val == "MercLanerDragon") {
        return "Assets\\Textures\\storm_temp_war3_btnbronzedragon.dds";
    }
    else if (autoA489BFB7_val == "JungleGraveGolemLaner") {
        return "Assets\\Textures\\storm_temp_war3_btngolemthunderclap.dds";
    }
    else {
    }
    return null;
}

text libMapM_gf_JungleGetNameTextForJungleCamp (int lp_camp) {
    int auto9A00953C_val;
    int auto4B152FD2_val;
    int auto78B4AE16_val;

    // Implementation
    auto9A00953C_val = libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampType;
    if (auto9A00953C_val == libMapM_ge_JungleCampTypes_MercCamp) {
        auto4B152FD2_val = libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataMercSpawnType;
        if (auto4B152FD2_val == libMapM_ge_JungleCampMercTypes_SiegeGiants) {
            return StringExternal("Param/Value/lib_MapM_71255AE7");
        }
        else if (auto4B152FD2_val == libMapM_ge_JungleCampMercTypes_Ogres) {
            return StringExternal("Param/Value/lib_MapM_D0F00D8A");
        }
        else if (auto4B152FD2_val == libMapM_ge_JungleCampMercTypes_GraveGolem) {
            return StringExternal("Param/Value/lib_MapM_B9B68899");
        }
        else {
            return StringExternal("Param/Value/lib_MapM_B37AEAAE");
        }
    }
    else if (auto9A00953C_val == libMapM_ge_JungleCampTypes_DoubloonCamp) {
        return StringExternal("Param/Value/lib_MapM_2AE79BAD");
    }
    else if (auto9A00953C_val == libMapM_ge_JungleCampTypes_DoubloonSmallCamp) {
        return StringExternal("Param/Value/lib_MapM_B72F24BC");
    }
    else if (auto9A00953C_val == libMapM_ge_JungleCampTypes_TryMeCamp) {
        auto78B4AE16_val = libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType;
        if (auto78B4AE16_val == libMapM_ge_JungleCampDefenderTypes_SiegeGiants) {
            return StringExternal("Param/Value/lib_MapM_65E8BE29");
        }
        else if (auto78B4AE16_val == libMapM_ge_JungleCampDefenderTypes_Knights) {
            return StringExternal("Param/Value/lib_MapM_93870F82");
        }
        else if (auto78B4AE16_val == libMapM_ge_JungleCampDefenderTypes_GraveGolem) {
            return StringExternal("Param/Value/lib_MapM_8C0F57BC");
        }
        else {
            return StringExternal("Param/Value/lib_MapM_5063E421");
        }
    }
    else {
    }
    return StringExternal("Param/Value/lib_MapM_6B5370A7");
}

unit libMapM_gf_JungleGetRandomEnemyHeroInRangeOfMinionWithMinimumRangeRequirements (unit lp_creep, point lp_position, fixed lp_minimumRange, fixed lp_maximumRange, unit lp_restrictedUnit) {
    unitgroup autoBBCB82D8_g;
    int autoBBCB82D8_u;

    // Variable Declarations
    unit lv_u;
    unitgroup lv_unitGroup;
    point lv_minionPosition;

    // Variable Initialization
    lv_unitGroup = UnitGroupEmpty();

    // Implementation
    autoBBCB82D8_g = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lp_creep), c_unitAllianceEnemy, RegionCircle(lp_position, lp_maximumRange), UnitFilter((1 << c_targetFilterHeroic) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoBBCB82D8_u = 1;
    for ( ; autoBBCB82D8_u <= UnitGroupCount(autoBBCB82D8_g, c_unitCountAll) ; autoBBCB82D8_u += (lv_u == UnitGroupUnit(autoBBCB82D8_g, autoBBCB82D8_u)) ) {
        lv_u = UnitGroupUnit(autoBBCB82D8_g, autoBBCB82D8_u);
        if ((DistanceBetweenPoints(lp_position, UnitGetPosition(lv_u)) >= lp_minimumRange) && (lv_u != lp_restrictedUnit)) {
            UnitGroupAdd(lv_unitGroup, lv_u);
        }

    }
    return UnitGroupUnit(lv_unitGroup, RandomInt(1, UnitGroupCount(lv_unitGroup, c_unitCountAll)));
}

int libMapM_gf_JungleGetCampIndexFromDefenderIndex (int lp_defenderIndex) {
    int autoFFD97303_ae;
    int autoFFD97303_ai;

    // Variable Declarations
    int lv_itCamp;

    // Variable Initialization

    // Implementation
    autoFFD97303_ae = libMapM_gv_jungleNumberOfCreepCamps;
    autoFFD97303_ai = 1;
    lv_itCamp = 1;
    for ( ; ( (autoFFD97303_ai >= 0 && lv_itCamp <= autoFFD97303_ae) || (autoFFD97303_ai <= 0 && lv_itCamp >= autoFFD97303_ae) ) ; lv_itCamp += autoFFD97303_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIDefenderAIIndex == lp_defenderIndex)) {
            return lv_itCamp;
        }

    }
    return 0;
}

void libMapM_gf_JungleUpdateTextTagForCamp (int lp_camp, int lp_type) {
    int auto9E3B2594_val;
    int auto12367E0F_val;
    int autoBC18E485_val;

    // Variable Declarations
    int lv_campType;
    int lv_campLevel;
    text lv_helperTextStart;

    // Variable Initialization

    // Implementation
    lv_campType = libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampType;
    auto9E3B2594_val = lp_type;
    if (auto9E3B2594_val == libMapM_ge_JungleCampTextTagTypes_Helper) {
        lv_campLevel = libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampLevel[libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCurrentDefenderScalingTicks];
        auto12367E0F_val = libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType;
        if (auto12367E0F_val == libMapM_ge_JungleCampDefenderTypes_Doubloons) {
            lv_helperTextStart = TextExpressionAssemble("Param/Expression/lib_MapM_D3749169");
        }
        else if (auto12367E0F_val == libMapM_ge_JungleCampDefenderTypes_SiegeGiants) {
            lv_helperTextStart = TextExpressionAssemble("Param/Expression/lib_MapM_9D23BB4E");
        }
        else if (auto12367E0F_val == libMapM_ge_JungleCampDefenderTypes_SiegeCamp1) {
            lv_helperTextStart = TextExpressionAssemble("Param/Expression/lib_MapM_B910EFDC");
        }
        else if (auto12367E0F_val == libMapM_ge_JungleCampDefenderTypes_SiegeCamp2) {
            lv_helperTextStart = TextExpressionAssemble("Param/Expression/lib_MapM_774A4076");
        }
        else if (auto12367E0F_val == libMapM_ge_JungleCampDefenderTypes_SiegeCamp3) {
            lv_helperTextStart = TextExpressionAssemble("Param/Expression/lib_MapM_8FD651D6");
        }
        else if (auto12367E0F_val == libMapM_ge_JungleCampDefenderTypes_Knights) {
            lv_helperTextStart = TextExpressionAssemble("Param/Expression/lib_MapM_E73FDC76");
        }
        else if (auto12367E0F_val == libMapM_ge_JungleCampDefenderTypes_BruiserCamp1) {
            lv_helperTextStart = TextExpressionAssemble("Param/Expression/lib_MapM_9200D9D4");
        }
        else if (auto12367E0F_val == libMapM_ge_JungleCampDefenderTypes_BruiserCamp2) {
            lv_helperTextStart = TextExpressionAssemble("Param/Expression/lib_MapM_C6893A6D");
        }
        else if (auto12367E0F_val == libMapM_ge_JungleCampDefenderTypes_BruiserCamp3) {
            lv_helperTextStart = TextExpressionAssemble("Param/Expression/lib_MapM_85EEBBFA");
        }
        else if (auto12367E0F_val == libMapM_ge_JungleCampDefenderTypes_GraveGolem) {
            lv_helperTextStart = TextExpressionAssemble("Param/Expression/lib_MapM_F8D83948");
        }
        else if (auto12367E0F_val == libMapM_ge_JungleCampDefenderTypes_BossCamp1) {
            lv_helperTextStart = TextExpressionAssemble("Param/Expression/lib_MapM_845F4238");
        }
        else if (auto12367E0F_val == libMapM_ge_JungleCampDefenderTypes_BossCamp2) {
            lv_helperTextStart = TextExpressionAssemble("Param/Expression/lib_MapM_F45C7B01");
        }
        else if (auto12367E0F_val == libMapM_ge_JungleCampDefenderTypes_BossCamp3) {
            lv_helperTextStart = TextExpressionAssemble("Param/Expression/lib_MapM_F5027175");
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_MapM_C98903E3", "A", IntToText(lv_campLevel));
            lv_helperTextStart = TextExpressionAssemble("Param/Expression/lib_MapM_C98903E3");
        }
        autoBC18E485_val = lv_campType;
        if (autoBC18E485_val == libMapM_ge_JungleCampTypes_MercCamp) {
            if (((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_Knights) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BruiserCamp1) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BruiserCamp2) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BruiserCamp3) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeGiants) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeCamp1) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeCamp2) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeCamp3))) {
                if (((libCore_gv_dEBUGDebuggingEnabled == false) || (libSprt_gv_dEBUGMapTextEnabled == false))) {
                    TextExpressionSetToken("Param/Expression/lib_MapM_2E1E0999", "A", lv_helperTextStart);
                    TextTagSetText(libMapM_gv_jungleCreepCamps[lp_camp].lv_campHelperTextTag, TextExpressionAssemble("Param/Expression/lib_MapM_2E1E0999"));
                }
                else {
                    TextExpressionSetToken("Param/Expression/lib_MapM_BB980679", "A", lv_helperTextStart);
                    TextExpressionSetToken("Param/Expression/lib_MapM_BB980679", "B", IntToText(FixedToInt(libMapM_gv_jungleCreepCamps[lp_camp].lv_statTrackingDamageDoneByLastCapture)));
                    TextTagSetText(libMapM_gv_jungleCreepCamps[lp_camp].lv_campHelperTextTag, TextExpressionAssemble("Param/Expression/lib_MapM_BB980679"));
                }
            }
            else {
                if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderDamagesCoreOnCapture == false) && ((libCore_gv_dEBUGDebuggingEnabled == false) || (libSprt_gv_dEBUGMapTextEnabled == false))) {
                    TextExpressionSetToken("Param/Expression/lib_MapM_151AD4C0", "A", lv_helperTextStart);
                    TextTagSetText(libMapM_gv_jungleCreepCamps[lp_camp].lv_campHelperTextTag, TextExpressionAssemble("Param/Expression/lib_MapM_151AD4C0"));
                }
                else {
                    if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderDamagesCoreOnCapture == true)) {
                        TextExpressionSetToken("Param/Expression/lib_MapM_4838F0E5", "A", lv_helperTextStart);
                        TextTagSetText(libMapM_gv_jungleCreepCamps[lp_camp].lv_campHelperTextTag, TextExpressionAssemble("Param/Expression/lib_MapM_4838F0E5"));
                    }
                    else {
                        TextExpressionSetToken("Param/Expression/lib_MapM_48B4D604", "A", lv_helperTextStart);
                        TextExpressionSetToken("Param/Expression/lib_MapM_48B4D604", "B", IntToText(FixedToInt(libMapM_gv_jungleCreepCamps[lp_camp].lv_statTrackingDamageDoneByLastCapture)));
                        TextTagSetText(libMapM_gv_jungleCreepCamps[lp_camp].lv_campHelperTextTag, TextExpressionAssemble("Param/Expression/lib_MapM_48B4D604"));
                    }
                }
            }
        }
        else if (autoBC18E485_val == libMapM_ge_JungleCampTypes_AshenvaleForestGuardians) {
            TextExpressionSetToken("Param/Expression/lib_MapM_417836B8", "A", lv_helperTextStart);
            TextTagSetText(libMapM_gv_jungleCreepCamps[lp_camp].lv_campHelperTextTag, TextExpressionAssemble("Param/Expression/lib_MapM_417836B8"));
        }
        else if (autoBC18E485_val == libMapM_ge_JungleCampTypes_DoubloonCamp) {
            TextExpressionSetToken("Param/Expression/lib_MapM_C04855C3", "A", lv_helperTextStart);
            TextTagSetText(libMapM_gv_jungleCreepCamps[lp_camp].lv_campHelperTextTag, TextExpressionAssemble("Param/Expression/lib_MapM_C04855C3"));
        }
        else if (autoBC18E485_val == libMapM_ge_JungleCampTypes_DoubloonSmallCamp) {
            TextExpressionSetToken("Param/Expression/lib_MapM_729CF307", "A", lv_helperTextStart);
            TextTagSetText(libMapM_gv_jungleCreepCamps[lp_camp].lv_campHelperTextTag, TextExpressionAssemble("Param/Expression/lib_MapM_729CF307"));
        }
        else if (autoBC18E485_val == libMapM_ge_JungleCampTypes_TryMeCamp) {
            if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_GraveGolem)) {
                TextExpressionSetToken("Param/Expression/lib_MapM_AF732623", "A", IntToText(libGame_gv_scalingTicks));
                TextTagSetText(libMapM_gv_jungleCreepCamps[lp_camp].lv_campHelperTextTag, (lv_helperTextStart + TextExpressionAssemble("Param/Expression/lib_MapM_AF732623")));
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_MapM_0BA95B7F", "A", IntToText(libGame_gv_scalingTicks));
                TextTagSetText(libMapM_gv_jungleCreepCamps[lp_camp].lv_campHelperTextTag, (lv_helperTextStart + TextExpressionAssemble("Param/Expression/lib_MapM_0BA95B7F")));
            }
        }
        else {
        }
    }
    else if (auto9E3B2594_val == libMapM_ge_JungleCampTextTagTypes_Respawn) {
        TextExpressionSetToken("Param/Expression/lib_MapM_CF390F62", "A", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCreepRespawnTimer))));
        TextTagSetText(libMapM_gv_jungleCreepCamps[lp_camp].lv_campRespawnTextTag, TextExpressionAssemble("Param/Expression/lib_MapM_CF390F62"));
        TextExpressionSetToken("Param/Expression/lib_MapM_B5404424", "A", TextTimeFormat(StringToText("<min2/>:<sec2/>"), FixedToInt(TimerGetRemaining(libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCreepRespawnTimer))));
        TextTagSetText(libMapM_gv_jungleCreepCamps[lp_camp].lv_campRespawnTextTagObs, TextExpressionAssemble("Param/Expression/lib_MapM_B5404424"));
    }
    else if (auto9E3B2594_val == libMapM_ge_JungleCampTextTagTypes_Special) {
    }
    else {
    }
}

void libMapM_gf_JungleSwitchToTextTagForCamp (int lp_camp, int lp_type) {
    int autoE48F464D_val;

    // Implementation
    TextTagShow(libMapM_gv_jungleCreepCamps[lp_camp].lv_campHelperTextTag, PlayerGroupAll(), false);
    TextTagShow(libMapM_gv_jungleCreepCamps[lp_camp].lv_campRespawnTextTag, PlayerGroupAll(), false);
    TextTagShow(libMapM_gv_jungleCreepCamps[lp_camp].lv_campRespawnTextTagObs, PlayerGroupAll(), false);
    TextTagShow(libMapM_gv_jungleCreepCamps[lp_camp].lv_campSpecialTextTag, PlayerGroupAll(), false);
    libMapM_gf_JungleUpdateTextTagForCamp(lp_camp, lp_type);
    libMapM_gv_jungleCreepCamps[lp_camp].lv_campTextTagType = lp_type;
    if (((libMapM_gv_jungleCreepCamps[lp_camp].lv_aIState == libMapM_ge_JungleCampStates_Hibernating) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_aIState == libMapM_ge_JungleCampStates_HibernatingReadyToRespawn))) {
        return ;
    }

    autoE48F464D_val = lp_type;
    if (autoE48F464D_val == libMapM_ge_JungleCampTextTagTypes_Helper) {
        TextTagShow(libMapM_gv_jungleCreepCamps[lp_camp].lv_campHelperTextTag, PlayerGroupAll(), true);
        TextTagShow(libMapM_gv_jungleCreepCamps[lp_camp].lv_campHelperTextTag, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    }
    else if (autoE48F464D_val == libMapM_ge_JungleCampTextTagTypes_Respawn) {
        TextTagShow(libMapM_gv_jungleCreepCamps[lp_camp].lv_campHelperTextTag, PlayerGroupAll(), true);
        TextTagShow(libMapM_gv_jungleCreepCamps[lp_camp].lv_campHelperTextTag, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        TextTagShow(libMapM_gv_jungleCreepCamps[lp_camp].lv_campRespawnTextTagObs, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], true);
        TextTagShow(libMapM_gv_jungleCreepCamps[lp_camp].lv_campRespawnTextTag, PlayerGroupAll(), true);
        TextTagShow(libMapM_gv_jungleCreepCamps[lp_camp].lv_campRespawnTextTag, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    }
    else if (autoE48F464D_val == libMapM_ge_JungleCampTextTagTypes_Special) {
        TextTagShow(libMapM_gv_jungleCreepCamps[lp_camp].lv_campSpecialTextTag, PlayerGroupAll(), true);
        TextTagShow(libMapM_gv_jungleCreepCamps[lp_camp].lv_campSpecialTextTag, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    }
    else {
    }
}

void libMapM_gf_JungleUpdateMinimapTooltipForCamp (int lp_camp) {
    int auto5F9910CC_val;

    // Variable Declarations
    int lv_campDisplayLevel;

    // Variable Initialization

    // Implementation
    lv_campDisplayLevel = libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampLevel[libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCurrentDefenderScalingTicks];
    auto5F9910CC_val = libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType;
    if (auto5F9910CC_val == libMapM_ge_JungleCampDefenderTypes_Doubloons) {
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel == null)) {
            TextExpressionSetToken("Param/Expression/lib_MapM_5B7D0143", "A", StringToText("MinimapTooltip"));
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_5B7D0143"));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_MapM_23DCA906", "A", StringToText("MinimapTooltip"));
            TextExpressionSetToken("Param/Expression/lib_MapM_23DCA906", "B", libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel);
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_23DCA906"));
        }
    }
    else if (auto5F9910CC_val == libMapM_ge_JungleCampDefenderTypes_SiegeGiants) {
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel == null)) {
            TextExpressionSetToken("Param/Expression/lib_MapM_47D2CC96", "A", StringToText("MinimapTooltip"));
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_47D2CC96"));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_MapM_F99104A3", "A", StringToText("MinimapTooltip"));
            TextExpressionSetToken("Param/Expression/lib_MapM_F99104A3", "B", libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel);
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_F99104A3"));
        }
    }
    else if (auto5F9910CC_val == libMapM_ge_JungleCampDefenderTypes_SiegeCamp1) {
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel == null)) {
            TextExpressionSetToken("Param/Expression/lib_MapM_1E7798EA", "A", StringToText("MinimapTooltip"));
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_1E7798EA"));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_MapM_7C16EC68", "A", StringToText("MinimapTooltip"));
            TextExpressionSetToken("Param/Expression/lib_MapM_7C16EC68", "B", libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel);
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_7C16EC68"));
        }
    }
    else if (auto5F9910CC_val == libMapM_ge_JungleCampDefenderTypes_SiegeCamp2) {
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel == null)) {
            TextExpressionSetToken("Param/Expression/lib_MapM_B86F2DBF", "A", StringToText("MinimapTooltip"));
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_B86F2DBF"));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_MapM_CF8652F2", "A", StringToText("MinimapTooltip"));
            TextExpressionSetToken("Param/Expression/lib_MapM_CF8652F2", "B", libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel);
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_CF8652F2"));
        }
    }
    else if (auto5F9910CC_val == libMapM_ge_JungleCampDefenderTypes_SiegeCamp3) {
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel == null)) {
            TextExpressionSetToken("Param/Expression/lib_MapM_B7DCA109", "A", StringToText("MinimapTooltip"));
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_B7DCA109"));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_MapM_00E3FED8", "A", StringToText("MinimapTooltip"));
            TextExpressionSetToken("Param/Expression/lib_MapM_00E3FED8", "B", libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel);
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_00E3FED8"));
        }
    }
    else if (auto5F9910CC_val == libMapM_ge_JungleCampDefenderTypes_Knights) {
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel == null)) {
            TextExpressionSetToken("Param/Expression/lib_MapM_DC6C4281", "A", StringToText("MinimapTooltip"));
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_DC6C4281"));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_MapM_164D95EC", "A", StringToText("MinimapTooltip"));
            TextExpressionSetToken("Param/Expression/lib_MapM_164D95EC", "B", libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel);
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_164D95EC"));
        }
    }
    else if (auto5F9910CC_val == libMapM_ge_JungleCampDefenderTypes_BruiserCamp1) {
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel == null)) {
            TextExpressionSetToken("Param/Expression/lib_MapM_05EA18A8", "A", StringToText("MinimapTooltip"));
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_05EA18A8"));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_MapM_0EC13CED", "A", StringToText("MinimapTooltip"));
            TextExpressionSetToken("Param/Expression/lib_MapM_0EC13CED", "B", libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel);
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_0EC13CED"));
        }
    }
    else if (auto5F9910CC_val == libMapM_ge_JungleCampDefenderTypes_BruiserCamp2) {
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel == null)) {
            TextExpressionSetToken("Param/Expression/lib_MapM_1DB0FBCB", "A", StringToText("MinimapTooltip"));
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_1DB0FBCB"));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_MapM_8852739C", "A", StringToText("MinimapTooltip"));
            TextExpressionSetToken("Param/Expression/lib_MapM_8852739C", "B", libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel);
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_8852739C"));
        }
    }
    else if (auto5F9910CC_val == libMapM_ge_JungleCampDefenderTypes_BruiserCamp3) {
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel == null)) {
            TextExpressionSetToken("Param/Expression/lib_MapM_ED1D323D", "A", StringToText("MinimapTooltip"));
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_ED1D323D"));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_MapM_E87BB9C8", "A", StringToText("MinimapTooltip"));
            TextExpressionSetToken("Param/Expression/lib_MapM_E87BB9C8", "B", libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel);
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_E87BB9C8"));
        }
    }
    else if (auto5F9910CC_val == libMapM_ge_JungleCampDefenderTypes_GraveGolem) {
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel == null)) {
            TextExpressionSetToken("Param/Expression/lib_MapM_0618A55E", "A", StringToText("MinimapTooltip"));
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_0618A55E"));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_MapM_4256C214", "A", StringToText("MinimapTooltip"));
            TextExpressionSetToken("Param/Expression/lib_MapM_4256C214", "B", libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel);
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_4256C214"));
        }
    }
    else if (auto5F9910CC_val == libMapM_ge_JungleCampDefenderTypes_BossCamp1) {
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel == null)) {
            TextExpressionSetToken("Param/Expression/lib_MapM_5AE214C3", "A", StringToText("MinimapTooltip"));
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_5AE214C3"));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_MapM_AD323EDA", "A", StringToText("MinimapTooltip"));
            TextExpressionSetToken("Param/Expression/lib_MapM_AD323EDA", "B", libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel);
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_AD323EDA"));
        }
    }
    else if (auto5F9910CC_val == libMapM_ge_JungleCampDefenderTypes_BossCamp2) {
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel == null)) {
            TextExpressionSetToken("Param/Expression/lib_MapM_C2C58FC2", "A", StringToText("MinimapTooltip"));
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_C2C58FC2"));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_MapM_D7A6B7E0", "A", StringToText("MinimapTooltip"));
            TextExpressionSetToken("Param/Expression/lib_MapM_D7A6B7E0", "B", libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel);
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_D7A6B7E0"));
        }
    }
    else if (auto5F9910CC_val == libMapM_ge_JungleCampDefenderTypes_BossCamp3) {
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel == null)) {
            TextExpressionSetToken("Param/Expression/lib_MapM_F61029A9", "A", StringToText("MinimapTooltip"));
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_F61029A9"));
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_MapM_C7CF6948", "A", StringToText("MinimapTooltip"));
            TextExpressionSetToken("Param/Expression/lib_MapM_C7CF6948", "B", libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCampTypeMinimapLabel);
            ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_C7CF6948"));
        }
    }
    else if (auto5F9910CC_val == libMapM_ge_JungleCampTypes_AshenvaleForestGuardians) {
        TextExpressionSetToken("Param/Expression/lib_MapM_8E46907F", "A", StringToText("MinimapTooltip"));
        ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_8E46907F"));
    }
    else {
        ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_7274346A"));
    }
}

trigger auto_libMapM_gf_JungleRespawnCreepsForCamp_Trigger = null;
int auto_libMapM_gf_JungleRespawnCreepsForCamp_lp_camp;

void libMapM_gf_JungleRespawnCreepsForCamp (int lp_camp) {
    auto_libMapM_gf_JungleRespawnCreepsForCamp_lp_camp = lp_camp;

    if (auto_libMapM_gf_JungleRespawnCreepsForCamp_Trigger == null) {
        auto_libMapM_gf_JungleRespawnCreepsForCamp_Trigger = TriggerCreate("auto_libMapM_gf_JungleRespawnCreepsForCamp_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_JungleRespawnCreepsForCamp_Trigger, false, false);
}

bool auto_libMapM_gf_JungleRespawnCreepsForCamp_TriggerFunc (bool testConds, bool runActions) {
    int lp_camp = auto_libMapM_gf_JungleRespawnCreepsForCamp_lp_camp;

    unitgroup auto10B8F53E_g;
    int auto10B8F53E_u;
    unitgroup autoB3DF04CC_g;
    int autoB3DF04CC_u;
    int auto9754AF77_ae;
    int auto9754AF77_ai;
    playergroup auto77130FE9_g;
    int auto77130FE9_p;
    playergroup auto8581218A_g;
    int auto8581218A_p;

    // Variable Declarations
    int lv_i;
    fixed lv_StaggeredBirth;
    unit lv_u;
    region lv_aggroRegion;
    string lv_icon;
    int lv_heightOffset;
    text lv_helperTextStart;
    unitgroup lv_defenderGroup;
    unit lv_newUnit;

    // Variable Initialization
    lv_heightOffset = 4;
    lv_defenderGroup = UnitGroupEmpty();

    // Implementation
    auto10B8F53E_g = libAIAI_gf_DefenderGroup(libMapM_gv_jungleCreepCamps[lp_camp].lv_aIDefenderAIIndex);
    auto10B8F53E_u = 1;
    for ( ; auto10B8F53E_u <= UnitGroupCount(auto10B8F53E_g, c_unitCountAll) ; auto10B8F53E_u += (lv_u == UnitGroupUnit(auto10B8F53E_g, auto10B8F53E_u)) ) {
        lv_u = UnitGroupUnit(auto10B8F53E_g, auto10B8F53E_u);
        UnitRemove(lv_u);
    }
    libNtve_gf_SendActorMessageToGameRegion(RegionCircle(libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint, 25.0), "Signal CreepCleanup");
    autoB3DF04CC_g = UnitGroup("MercCoweringDefenderOrientDummy", c_playerAny, RegionCircle(libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint, 25.0), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource), 0), 0);
    autoB3DF04CC_u = 1;
    for ( ; autoB3DF04CC_u <= UnitGroupCount(autoB3DF04CC_g, c_unitCountAll) ; autoB3DF04CC_u += (lv_u == UnitGroupUnit(autoB3DF04CC_g, autoB3DF04CC_u)) ) {
        lv_u = UnitGroupUnit(autoB3DF04CC_g, autoB3DF04CC_u);
        UnitRemove(lv_u);
    }
    libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderDefendersBribedCount = 0;
    Wait(0.125, c_timeGame);
    auto9754AF77_ae = libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderNumberofCreeps;
    auto9754AF77_ai = 1;
    lv_i = 1;
    for ( ; ( (auto9754AF77_ai >= 0 && lv_i <= auto9754AF77_ae) || (auto9754AF77_ai <= 0 && lv_i >= auto9754AF77_ae) ) ; lv_i += auto9754AF77_ai ) {
        libNtve_gf_CreateUnitsAtPoint2(1, libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderUnitTypes[lv_i], c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Hostile, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataDefenderSpawnPoints[lv_i]);
        lv_newUnit = UnitLastCreated();
        UnitGroupAdd(lv_defenderGroup, lv_newUnit);
        UnitSetCustomValue(lv_newUnit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_JungleDefenderCreepCampIndex), IntToFixed(lp_camp));
        UnitSetCustomValue(lv_newUnit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_JungleDefenderCreepUnitIndex), IntToFixed(lv_i));
        UnitBehaviorAdd(lv_newUnit, "JungleMercDefenderBirthInvulnerability", lv_newUnit, 1);
        libGame_gf_SendEventJungleCampDefenderCreated(lv_newUnit);
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCoweringUnit[lv_i] == true)) {
            UnitGroupAdd(libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderCoweringUnitGroup, lv_newUnit);
        }

        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderDefendersHaveStaggeredBirth == true)) {
            if ((libAIAI_gv_defenderAI[lp_camp].lv_aggoRegion == null)) {
                UnitBehaviorAdd(lv_newUnit, "JungleCreepBenign", lv_newUnit, 1);
            }

            UnitBehaviorAdd(lv_newUnit, "JungleCreepPassive", lv_newUnit, 1);
            UnitBehaviorSetDurationRemaining(lv_newUnit, "JungleMercDefenderBirthInvulnerability", (UnitBehaviorDuration(lv_newUnit, "JungleMercDefenderBirthInvulnerability") - lv_StaggeredBirth));
            lv_StaggeredBirth += libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderDefendersStaggeredBirthPeriod;
            Wait(libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderDefendersStaggeredBirthPeriod, c_timeGame);
        }

    }
    libAIAI_gf_StartDefenderAI(lv_defenderGroup, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataDefenderLeashRegion, lv_aggroRegion, true);
    libMapM_gv_jungleCreepCamps[lp_camp].lv_aIDefenderAIIndex = libAIAI_gf_LastCreatedDefenderAI();
    libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCurrentDefenderScalingTicks = 0;
    libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCurrentMercScalingTicks = 0;
    libGame_gf_JungleUpdateScalingForCamp(lp_camp, libGame_gv_scalingTicks);
    libGame_gf_SendEventJungleCampSpawning(lp_camp);
    Wait((libMapM_gv_bALJungleBirthDelay - lv_StaggeredBirth), c_timeGame);
    if (((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampType == libMapM_ge_JungleCampTypes_MercCamp) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampType == libMapM_ge_JungleCampTypes_DoubloonCamp))) {
        UnitSetOwner(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit, 0, true);
        UnitSetOwner(libMapM_gv_jungleCreepCamps[lp_camp].lv_campOwnershipFlagUnit, libCore_gv_cOMPUTER_Hostile, true);
        libNtve_gf_SendActorMessageToGameRegion(libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataDefenderLeashRegion, "Signal OwnerNeutral");
    }

    libMapM_gf_JungleTransitionCampIntoState(lp_camp, libMapM_ge_JungleCampStates_Idle);
    lv_icon = libMapM_gf_JungleGetCurrentIconForJungleCamp(lp_camp, true);
    libNtve_gf_SendActorMessageToUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit, "MinimapIcon " + lv_icon);
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), (("MinimapIconScale " + FixedToString(libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataMinimapIconScale, c_fixedPrecisionAny))));
    auto77130FE9_g = PlayerGroupAll(); 
    auto77130FE9_p = 1;
    for ( ; auto77130FE9_p <= PlayerGroupCount(auto77130FE9_g) ; auto77130FE9_p += (lv_i == PlayerGroupPlayer(auto77130FE9_g, auto77130FE9_p)) ) {
        lv_i = PlayerGroupPlayer(auto77130FE9_g, auto77130FE9_p);
        libNtve_gf_ShareVisionofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit, true, lv_i);
    }
    Wait(0.0625, c_timeGame);
    auto8581218A_g = PlayerGroupAll(); 
    auto8581218A_p = 1;
    for ( ; auto8581218A_p <= PlayerGroupCount(auto8581218A_g) ; auto8581218A_p += (lv_i == PlayerGroupPlayer(auto8581218A_g, auto8581218A_p)) ) {
        lv_i = PlayerGroupPlayer(auto8581218A_g, auto8581218A_p);
        libNtve_gf_ShareVisionofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit, false, lv_i);
    }
    libMapM_gf_JungleSwitchToTextTagForCamp(lp_camp, libMapM_ge_JungleCampTextTagTypes_Helper);
    libMapM_gf_JungleUpdateMinimapTooltipForCamp(lp_camp);
    libGame_gf_SendEventJungleCampSpawned(lp_camp);
    return true;
}

void libMapM_gf_JungleTransitionCampIntoState (int lp_camp, int lp_state) {
    int auto438F5FF1_val;
    unitgroup auto11B9D48C_g;
    int auto11B9D48C_u;
    unitgroup auto0136C2BD_g;
    int auto0136C2BD_u;

    // Variable Declarations
    unit lv_itUnit;
    string lv_icon;

    // Variable Initialization

    // Implementation
    libMapM_gv_jungleCreepCamps[lp_camp].lv_aIState = lp_state;
    libMapM_gf_JungleSwitchToTextTagForCamp(lp_camp, libMapM_gv_jungleCreepCamps[lp_camp].lv_campTextTagType);
    auto438F5FF1_val = lp_state;
    if (auto438F5FF1_val == libMapM_ge_JungleCampStates_Idle) {
        libGame_gf_JungleUpdateScalingForCamp(lp_camp, libGame_gv_scalingTicks);
    }
    else if (auto438F5FF1_val == libMapM_ge_JungleCampStates_Busy) {
        libMapM_gv_jungleCreepCamps[lp_camp].lv_statTrackingDamageDoneByLastCapture = 0.0;
        TimerPause(libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCreepRespawnTimer, true);
        TimerPause(libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCreepBirthTimer, true);
    }
    else if (auto438F5FF1_val == libMapM_ge_JungleCampStates_Dead) {
        libMapM_gf_JungleSwitchToTextTagForCamp(lp_camp, libMapM_ge_JungleCampTextTagTypes_Respawn);
        lv_icon = libMapM_gf_JungleGetCurrentIconForJungleCamp(lp_camp, false);
        libNtve_gf_SendActorMessageToUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit, "MinimapIcon " + lv_icon);
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), (("MinimapIconScale " + FixedToString(libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataMinimapIconScale, c_fixedPrecisionAny))));
        if ((libMapM_gv_jungleCampsShouldBeHibernating == true)) {
            libMapM_gf_JungleTransitionCampIntoState(lp_camp, libMapM_ge_JungleCampStates_Hibernating);
        }

    }
    else if (auto438F5FF1_val == libMapM_ge_JungleCampStates_Paused) {
        auto11B9D48C_g = libAIAI_gf_DefenderGroup(libMapM_gv_jungleCreepCamps[lp_camp].lv_aIDefenderAIIndex);
        auto11B9D48C_u = 1;
        for ( ; auto11B9D48C_u <= UnitGroupCount(auto11B9D48C_g, c_unitCountAll) ; auto11B9D48C_u += (lv_itUnit == UnitGroupUnit(auto11B9D48C_g, auto11B9D48C_u)) ) {
            lv_itUnit = UnitGroupUnit(auto11B9D48C_g, auto11B9D48C_u);
            UnitIssueOrder(lv_itUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }
    }
    else if (auto438F5FF1_val == libMapM_ge_JungleCampStates_Hibernating) {
        auto0136C2BD_g = libAIAI_gf_DefenderGroup(libMapM_gv_jungleCreepCamps[lp_camp].lv_aIDefenderAIIndex);
        auto0136C2BD_u = 1;
        for ( ; auto0136C2BD_u <= UnitGroupCount(auto0136C2BD_g, c_unitCountAll) ; auto0136C2BD_u += (lv_itUnit == UnitGroupUnit(auto0136C2BD_g, auto0136C2BD_u)) ) {
            lv_itUnit = UnitGroupUnit(auto0136C2BD_g, auto0136C2BD_u);
            libMapM_gf_JungleHibernateCampDefender(lv_itUnit);
        }
        ActorSend(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit), "SetMinimapVisibility");
        libMapM_gf_JungleSwitchToTextTagForCamp(lp_camp, libMapM_gv_jungleCreepCamps[lp_camp].lv_campTextTagType);
    }
    else if (auto438F5FF1_val == libMapM_ge_JungleCampStates_HibernatingReadyToRespawn) {
        libMapM_gf_JungleSwitchToTextTagForCamp(lp_camp, libMapM_gv_jungleCreepCamps[lp_camp].lv_campTextTagType);
    }
    else {
    }
}

trigger auto_libMapM_gf_JungleHibernateCampDefender_Trigger = null;
unit auto_libMapM_gf_JungleHibernateCampDefender_lp_defender;

void libMapM_gf_JungleHibernateCampDefender (unit lp_defender) {
    auto_libMapM_gf_JungleHibernateCampDefender_lp_defender = lp_defender;

    if (auto_libMapM_gf_JungleHibernateCampDefender_Trigger == null) {
        auto_libMapM_gf_JungleHibernateCampDefender_Trigger = TriggerCreate("auto_libMapM_gf_JungleHibernateCampDefender_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_JungleHibernateCampDefender_Trigger, false, false);
}

bool auto_libMapM_gf_JungleHibernateCampDefender_TriggerFunc (bool testConds, bool runActions) {
    unit lp_defender = auto_libMapM_gf_JungleHibernateCampDefender_lp_defender;

    // Implementation
    UnitIssueOrder(lp_defender, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libNtve_gf_MakeUnitInvulnerable(lp_defender, true);
    UnitSetState(lp_defender, c_unitStateTargetable, false);
    UnitSetState(lp_defender, c_unitStateStoppable, false);
    UnitSetState(lp_defender, c_unitStateStatusBar, false);
    UnitSetState(lp_defender, c_unitStateFidget, false);
    UnitBehaviorRemoveCategory(lp_defender, c_unitBehaviorFlagReveal);
    UnitBehaviorRemoveCategory(lp_defender, c_unitBehaviorFlagSlow);
    UnitBehaviorRemoveCategory(lp_defender, c_unitBehaviorFlagStun);
    UnitBehaviorRemoveCategory(lp_defender, c_unitBehaviorFlagUser14);
    UnitBehaviorAddPlayer(lp_defender, "GardensMercCampPreHibernator", UnitGetOwner(lp_defender), 1);
    libNtve_gf_SendActorMessageToUnit(lp_defender, "SetOpacity 0.000000 2.500000");
    Wait(0.0625, c_timeGame);
    libNtve_gf_PauseUnit(lp_defender, true);
    Wait(3.0, c_timeGame);
    if ((libMapM_gv_jungleCampsShouldBeHibernating == true)) {
        UnitBehaviorAddPlayer(lp_defender, "GardensMercCampHibernator", UnitGetOwner(lp_defender), 1);
    }

    return true;
}

trigger auto_libMapM_gf_JungleStopHibernatingCampDefender_Trigger = null;
unit auto_libMapM_gf_JungleStopHibernatingCampDefender_lp_defender;
point auto_libMapM_gf_JungleStopHibernatingCampDefender_lp_location;

void libMapM_gf_JungleStopHibernatingCampDefender (unit lp_defender, point lp_location) {
    auto_libMapM_gf_JungleStopHibernatingCampDefender_lp_defender = lp_defender;
    auto_libMapM_gf_JungleStopHibernatingCampDefender_lp_location = lp_location;

    if (auto_libMapM_gf_JungleStopHibernatingCampDefender_Trigger == null) {
        auto_libMapM_gf_JungleStopHibernatingCampDefender_Trigger = TriggerCreate("auto_libMapM_gf_JungleStopHibernatingCampDefender_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_JungleStopHibernatingCampDefender_Trigger, false, false);
}

bool auto_libMapM_gf_JungleStopHibernatingCampDefender_TriggerFunc (bool testConds, bool runActions) {
    unit lp_defender = auto_libMapM_gf_JungleStopHibernatingCampDefender_lp_defender;
    point lp_location = auto_libMapM_gf_JungleStopHibernatingCampDefender_lp_location;

    // Variable Declarations
    int lv_campDefenderType;

    // Variable Initialization
    lv_campDefenderType = libMapM_gv_jungleCreepCamps[libMapM_gf_JungleGetJungleCampForUnit(lp_defender)].lv_mapDataCampDefenderType;

    // Implementation
    libNtve_gf_PauseUnit(lp_defender, false);
    if ((UnitIsAlive(lp_defender) == true)) {
        UnitSetPosition(lp_defender, lp_location, false);
        UnitSetFacing(lp_defender, PointGetFacing(lp_location), 0.0);
    }

    UnitBehaviorRemove(lp_defender, "GardensMercCampHibernator", 1);
    UnitBehaviorRemove(lp_defender, "GardensMercCampPreHibernator", 1);
    libNtve_gf_SendActorMessageToUnit(lp_defender, "SetOpacity 1.000000 2.000000");
    Wait(2.0, c_timeGame);
    libNtve_gf_MakeUnitInvulnerable(lp_defender, false);
    UnitSetState(lp_defender, c_unitStateTargetable, true);
    if ((lv_campDefenderType != libMapM_ge_JungleCampDefenderTypes_BossCamp1) && (lv_campDefenderType != libMapM_ge_JungleCampDefenderTypes_BossCamp2) && (lv_campDefenderType != libMapM_ge_JungleCampDefenderTypes_BossCamp3) && (lv_campDefenderType != libMapM_ge_JungleCampDefenderTypes_GraveGolem)) {
        UnitSetState(lp_defender, c_unitStateStoppable, true);
    }

    UnitSetState(lp_defender, c_unitStateStatusBar, true);
    UnitSetState(lp_defender, c_unitStateFidget, true);
    return true;
}

void libMapM_gf_JungleStartHibernateCamps () {
    int autoF0D500E2_ae;
    int autoF0D500E2_ai;

    // Variable Declarations
    int lv_itCamp;

    // Variable Initialization

    // Implementation
    libMapM_gv_jungleCampsShouldBeHibernating = true;
    autoF0D500E2_ae = libMapM_gv_jungleNumberOfCreepCamps;
    autoF0D500E2_ai = 1;
    lv_itCamp = 1;
    for ( ; ( (autoF0D500E2_ai >= 0 && lv_itCamp <= autoF0D500E2_ae) || (autoF0D500E2_ai <= 0 && lv_itCamp >= autoF0D500E2_ae) ) ; lv_itCamp += autoF0D500E2_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIState != libMapM_ge_JungleCampStates_Busy) && (libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIState != libMapM_ge_JungleCampStates_Paused)) {
            libMapM_gf_JungleTransitionCampIntoState(lv_itCamp, libMapM_ge_JungleCampStates_Hibernating);
        }

    }
}

void libMapM_gf_JungleStopHibernateCamps () {
    int autoE0EA0DBF_ae;
    int autoE0EA0DBF_ai;
    int autoB7B3B98F_ae;
    int autoB7B3B98F_ai;

    // Variable Declarations
    int lv_itCamp;
    int lv_itDefenderIndex;
    unit lv_defenderUnit;

    // Variable Initialization

    // Implementation
    libMapM_gv_jungleCampsShouldBeHibernating = false;
    autoE0EA0DBF_ae = libMapM_gv_jungleNumberOfCreepCamps;
    autoE0EA0DBF_ai = 1;
    lv_itCamp = 1;
    for ( ; ( (autoE0EA0DBF_ai >= 0 && lv_itCamp <= autoE0EA0DBF_ae) || (autoE0EA0DBF_ai <= 0 && lv_itCamp >= autoE0EA0DBF_ae) ) ; lv_itCamp += autoE0EA0DBF_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIState == libMapM_ge_JungleCampStates_Hibernating)) {
            autoB7B3B98F_ae = libMapM_gv_jungleCreepCamps[lv_itCamp].lv_defenderNumberofCreeps;
            autoB7B3B98F_ai = 1;
            lv_itDefenderIndex = 1;
            for ( ; ( (autoB7B3B98F_ai >= 0 && lv_itDefenderIndex <= autoB7B3B98F_ae) || (autoB7B3B98F_ai <= 0 && lv_itDefenderIndex >= autoB7B3B98F_ae) ) ; lv_itDefenderIndex += autoB7B3B98F_ai ) {
                lv_defenderUnit = libAIAI_gf_DefenderUnit(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIDefenderAIIndex, lv_itDefenderIndex);
                libMapM_gf_JungleStopHibernatingCampDefender(lv_defenderUnit, libMapM_gv_jungleCreepCamps[lv_itCamp].lv_mapDataDefenderSpawnPoints[lv_itDefenderIndex]);
            }
            ActorSend(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_campIconUnit), "SetMinimapVisibility 1");
            if ((UnitGroupCount(libAIAI_gf_DefenderGroup(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIDefenderAIIndex), c_unitCountAlive) > 0)) {
                libMapM_gf_JungleTransitionCampIntoState(lv_itCamp, libMapM_ge_JungleCampStates_Idle);
            }
            else {
                libMapM_gf_JungleTransitionCampIntoState(lv_itCamp, libMapM_ge_JungleCampStates_Dead);
            }
            if ((UnitGroupCount(libAIAI_gf_DefenderGroup(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIDefenderAIIndex), c_unitCountAlive) > 0) && (UnitGroupCount(libAIAI_gf_DefenderGroup(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIDefenderAIIndex), c_unitCountAlive) < libMapM_gv_jungleCreepCamps[lv_itCamp].lv_defenderNumberofCreeps)) {
                TimerStart(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_stateCreepRespawnTimer, libMapM_gv_bALJungleLeashRespawnTime, false, c_timeGame);
            }

        }

        if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIState == libMapM_ge_JungleCampStates_HibernatingReadyToRespawn)) {
            ActorSend(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_campIconUnit), "SetMinimapVisibility 1");
            libMapM_gf_JungleRespawnCreepsForCamp(lv_itCamp);
        }

        libMapM_gf_JungleSwitchToTextTagForCamp(lv_itCamp, libMapM_gv_jungleCreepCamps[lv_itCamp].lv_campTextTagType);
    }
}

void libMapM_gf_JungleTurnOnCampCaptureBeacon (int lp_camp) {
    // Implementation
    libMapM_gv_jungleCreepCamps[lp_camp].lv_captureCaptureEnabled = true;
    UnitSetOwner(libMapM_gv_jungleCreepCamps[lp_camp].lv_campIconUnit, 0, true);
    UnitSetOwner(libMapM_gv_jungleCreepCamps[lp_camp].lv_campOwnershipFlagUnit, libCore_gv_cOMPUTER_Hostile, true);
    libGame_gf_CapturePointEnable(libMapM_gv_jungleCreepCamps[lp_camp].lv_captureCapturePointIndex);
    libMapM_gf_JungleTransitionCampIntoState(lp_camp, libMapM_ge_JungleCampStates_Paused);
}

void libMapM_gf_JungleTurnOffCampCaptureBeacon (int lp_camp, int lp_owner) {
    // Implementation
    libMapM_gv_jungleCreepCamps[lp_camp].lv_captureCaptureEnabled = false;
    UnitSetOwner(libMapM_gv_jungleCreepCamps[lp_camp].lv_captureCircleOfPowerUnit, lp_owner, true);
    libMapM_gf_JungleTransitionCampCaptureBeacontoHidden(lp_camp);
}

void libMapM_gf_JungleTransitionCampCaptureBeacontoHidden (int lp_camp) {
    // Implementation
    libGame_gf_CapturePointDisable(libMapM_gv_jungleCreepCamps[lp_camp].lv_captureCapturePointIndex);
}

void libMapM_gf_JungleGrantCaptureRewards (int lp_camp, int lp_owner, bool lp_hasMercLordTalent) {
    unitgroup auto65C1FEA2_g;
    int auto65C1FEA2_u;
    playergroup auto6FC0000D_g;
    int auto6FC0000D_p;
    playergroup auto92E53E49_g;
    int auto92E53E49_p;
    playergroup auto63642BED_g;
    int auto63642BED_p;
    int auto9C82785C_val;
    int auto55464B3F_n;
    int auto55464B3F_i;
    int autoEFA847D9_n;
    int autoEFA847D9_i;

    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;
    int lv_killingFaction;
    string lv_campPortrait;
    playergroup lv_creditGroup;

    // Variable Initialization
    lv_creditGroup = PlayerGroupEmpty();

    // Implementation
    if ((lp_owner == libCore_gv_cOMPUTER_TeamOrder)) {
        libMapM_gv_jungleCreepCamps[lp_camp].lv_statTrackingOrderCaptures += 1;
        lv_killingFaction = libGame_ge_Faction_Order;
    }
    else {
        libMapM_gv_jungleCreepCamps[lp_camp].lv_statTrackingChaosCaptures += 1;
        lv_killingFaction = libGame_ge_Faction_Chaos;
    }
    StatEventCreate("JungleCampCapture");
    StatEventAddDataInt(StatEventLastCreated(), "CampID", lp_camp);
    StatEventAddDataFixed(StatEventLastCreated(), "TeamID", libGame_gf_TeamNumberOfPlayer(lp_owner));
    if (((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_GraveGolem) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp1) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp2) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp3))) {
        StatEventAddDataString(StatEventLastCreated(), "CampType", "Boss Camp");
    }
    else if (((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_Knights) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BruiserCamp1) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BruiserCamp2) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BruiserCamp3))) {
        StatEventAddDataString(StatEventLastCreated(), "CampType", "Bruiser Camp");
    }
    else if (((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeGiants) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeCamp1) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeCamp2) || (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_SiegeCamp3))) {
        StatEventAddDataString(StatEventLastCreated(), "CampType", "Siege Camp");
    }
    else if (((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_Doubloons))) {
        StatEventAddDataString(StatEventLastCreated(), "CampType", "Doubloons Camp");
    }
    else if (((libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_Custom))) {
        StatEventAddDataString(StatEventLastCreated(), "CampType", "Custom");
    }
    else if (true) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_MapM_6D547B1E"), true);
        StatEventAddDataString(StatEventLastCreated(), "CampType", "Other");
    }
    StatEventSend(StatEventLastCreated());
    auto65C1FEA2_g = UnitGroupSearch(null, lp_owner, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint, libMapM_gv_bALJungleCampCaptureRadius, libCore_gv_filtersHeroicAllyorPlayerandnotHallucinationorBenign, 0);
    auto65C1FEA2_u = 1;
    for ( ; auto65C1FEA2_u <= UnitGroupCount(auto65C1FEA2_g, c_unitCountAll) ; auto65C1FEA2_u += (lv_itUnit == UnitGroupUnit(auto65C1FEA2_g, auto65C1FEA2_u)) ) {
        lv_itUnit = UnitGroupUnit(auto65C1FEA2_g, auto65C1FEA2_u);
        PlayerGroupAdd(lv_creditGroup, UnitGetOwner(lv_itUnit));
    }
    auto6FC0000D_g = lv_creditGroup; 
    auto6FC0000D_p = 1;
    for ( ; auto6FC0000D_p <= PlayerGroupCount(auto6FC0000D_g) ; auto6FC0000D_p += (lv_itPlayer == PlayerGroupPlayer(auto6FC0000D_g, auto6FC0000D_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto6FC0000D_g, auto6FC0000D_p);
        libGame_gf_AddtoAwardValue(lv_itPlayer, 1.0, libGame_ge_SecondaryAwards_Headhunter);
        libGame_gv_scoreValues[lv_itPlayer].lv_creepCampsCaptured += 1;
        libSond_gf_HeroVOStartCelebrateVOTimerForPlayer(lv_itPlayer, lv_creditGroup);
    }
    if ((libMapM_gv_dataJungleCampDefenderData[(libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType)].lv_xPAwardForCapture != 0.0)) {
        auto92E53E49_g = libGame_gf_PlayersOnTeamHeroes(libGame_gf_TeamNumberOfPlayer(lp_owner), false); 
        auto92E53E49_p = 1;
        for ( ; auto92E53E49_p <= PlayerGroupCount(auto92E53E49_g) ; auto92E53E49_p += (lv_itPlayer == PlayerGroupPlayer(auto92E53E49_g, auto92E53E49_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto92E53E49_g, auto92E53E49_p);
            libGame_gf_GrantXPToPlayer(libMapM_gv_dataJungleCampDefenderData[(libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType)].lv_xPAwardForCapture, lv_itPlayer, libGame_ge_XPSources_Creep);
            libUIUI_gf_UIFloatingCombatTextH16MidXP(lv_itPlayer, libMapM_gv_jungleCreepCamps[lp_camp].lv_captureCircleOfPowerUnit, libCore_ge_FloatingTextType_XPMedium, FixedToInt(libMapM_gv_dataJungleCampDefenderData[(libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType)].lv_xPAwardForCapture));
        }
        auto63642BED_g = lv_creditGroup; 
        auto63642BED_p = 1;
        for ( ; auto63642BED_p <= PlayerGroupCount(auto63642BED_g) ; auto63642BED_p += (lv_itPlayer == PlayerGroupPlayer(auto63642BED_g, auto63642BED_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto63642BED_g, auto63642BED_p);
            libGame_gf_ScoreValuesRecordXPContributionForPlayer(lv_itPlayer, (FixedToInt(libMapM_gv_dataJungleCampDefenderData[(libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampDefenderType)].lv_xPAwardForCapture) / PlayerGroupCount(lv_creditGroup)), false);
        }
    }

    if ((lp_owner == libCore_gv_cOMPUTER_TeamOrder)) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RegenGlobe", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_TeamOrder, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint);
    }
    else {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "RegenGlobe", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_TeamChaos, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint);
    }
    if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderDefendersBribedCount == libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderNumberofCreeps)) {
        TimerStart(libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCreepRespawnTimer, (libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderRespawnTime / 2.0), false, c_timeGame);
        TimerStart(libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCreepBirthTimer, ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderRespawnTime / 2) - libMapM_gv_bALJungleBirthDelay), false, c_timeGame);
    }
    else {
        TimerStart(libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCreepRespawnTimer, libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderRespawnTime, false, c_timeGame);
        TimerStart(libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCreepBirthTimer, (libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderRespawnTime - libMapM_gv_bALJungleBirthDelay), false, c_timeGame);
    }
    libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderDefendersBribedCount = 0;
    libMapM_gf_JungleTransitionCampIntoState(lp_camp, libMapM_ge_JungleCampStates_Dead);
    libGame_gf_SendEventMercCampRewardGranted(lp_owner, lp_camp);
    auto9C82785C_val = libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampType;
    if (auto9C82785C_val == libMapM_ge_JungleCampTypes_MercCamp) {
        libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(lp_owner)].lv_map_MercCampCaptures += 1;
        libMapM_gf_JungleMercCampCapturedAnnouncement(lp_camp, lp_owner);
        libMapM_gf_JungleSpawnMercMinions(lp_camp, lp_owner, lp_hasMercLordTalent);
    }
    else if (auto9C82785C_val == libMapM_ge_JungleCampTypes_AshenvaleForestGuardians) {
        libMapM_gf_MMHoCForestActivated(lp_camp, lp_owner);
    }
    else if (auto9C82785C_val == libMapM_ge_JungleCampTypes_DoubloonCamp) {
        libMapM_gf_JungleMercCampCapturedAnnouncement(lp_camp, lp_owner);
        auto55464B3F_n = 3;
        for (auto55464B3F_i = 1; auto55464B3F_i <= auto55464B3F_n; auto55464B3F_i += 1) {
            PlayerCreateEffectPoint(libCore_gv_cOMPUTER_Neutral, "DropCannonballsPersistent", libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint);
        }
    }
    else if (auto9C82785C_val == libMapM_ge_JungleCampTypes_DoubloonSmallCamp) {
        autoEFA847D9_n = 2;
        for (autoEFA847D9_i = 1; autoEFA847D9_i <= autoEFA847D9_n; autoEFA847D9_i += 1) {
            PlayerCreateEffectPoint(libCore_gv_cOMPUTER_Neutral, "DropCannonballsPersistent", libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint);
        }
    }
    else if (auto9C82785C_val == libMapM_ge_JungleCampTypes_TryMeCamp) {
    }
    else {
    }
}

void libMapM_gf_JungleMercCampCapturedAnnouncement (int lp_camp, int lp_owner) {
    // Variable Declarations
    int lv_mercType;

    // Variable Initialization

    // Implementation
    lv_mercType = libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataMercSpawnType;
    if ((lp_owner == libCore_gv_cOMPUTER_TeamOrder)) {
        MinimapPing(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint, 5.0, Color(0.00, 33.33, 100.00));
        MinimapPing(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint, 5.0, Color(100.00, 0.00, 0.00));
        MinimapPing(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint, 5.0, Color(0.00, 33.33, 100.00));
        SoundtrackPlay(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, c_soundtrackCategoryMusic, "MX_Stinger_MercCampTaken_Ally", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        SoundtrackPlay(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, c_soundtrackCategoryMusic, "MX_Stinger_MercCampTaken_Enemy", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        SoundPlayForPlayer(SoundLink("UI_Game_Ping_MercCampCaptured_Ally", -1), lp_owner, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("UI_Game_Ping_MercCampCaptured_Enemy", -1), lp_owner, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, 100.0, 0.0);
    }
    else {
        MinimapPing(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint, 5.0, Color(100.00, 0.00, 0.00));
        MinimapPing(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint, 5.0, Color(0.00, 33.33, 100.00));
        MinimapPing(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint, 5.0, Color(100.00, 0.00, 0.00));
        SoundtrackPlay(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, c_soundtrackCategoryMusic, "MX_Stinger_MercCampTaken_Enemy", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        SoundtrackPlay(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, c_soundtrackCategoryMusic, "MX_Stinger_MercCampTaken_Ally", c_soundtrackCueAny, c_soundtrackIndexAny, false);
        SoundPlayForPlayer(SoundLink("UI_Game_Ping_MercCampCaptured_Enemy", -1), lp_owner, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, 100.0, 0.0);
        SoundPlayForPlayer(SoundLink("UI_Game_Ping_MercCampCaptured_Ally", -1), lp_owner, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, 100.0, 0.0);
    }
}

void libMapM_gf_JungleSpawnMercMinions (int lp_camp, int lp_owner, bool lp_hasMercLordTalent) {
    int autoB70C7584_ae;
    int autoB70C7584_ai;
    string auto0937F60E_val;

    // Variable Declarations
    int lv_i;
    int lv_team;
    point lv_spawnPoint;
    int lv_mercTypeIndex;
    int lv_scalingTicks;
    unit lv_minion;
    int lv_waveIndex;
    int lv_lane;
    int lv_waypoint;
    unit lv_spawnHelperUnit;
    bool lv_knightHasAlreadyBeenCreated;
    fixed lv_staggeredBirthi;

    // Variable Initialization

    // Implementation
    lv_team = libGame_gf_TeamNumberOfPlayer(lp_owner);
    lv_spawnPoint = libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataCampCaptainSpawnPoint;
    lv_mercTypeIndex = (libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataMercSpawnType);
    lv_scalingTicks = libMapM_gv_jungleCreepCamps[lp_camp].lv_stateCurrentMercScalingTicks;
    libMapM_gv_jungleNumberOfActiveMercGroups += 1;
    libNtve_gf_SendActorMessageToGameRegion(RegionCircle(lv_spawnPoint, 25.0), "Signal CreepCleanup");
    autoB70C7584_ae = libMapM_gv_jungleCreepCamps[lp_camp].lv_mercNumberOfMinionsSpawned;
    autoB70C7584_ai = 1;
    lv_i = 1;
    for ( ; ( (autoB70C7584_ai >= 0 && lv_i <= autoB70C7584_ae) || (autoB70C7584_ai <= 0 && lv_i >= autoB70C7584_ae) ) ; lv_i += autoB70C7584_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lp_camp].lv_defenderDefendersCoweronDeath == true)) {
            lv_spawnHelperUnit = UnitGroupRandomUnit(UnitGroup("MercCoweringDefenderOrientDummy", c_playerAny, RegionCircle(lv_spawnPoint, 25.0), UnitFilter(0, 0, (1 << c_targetFilterRawResource) | (1 << c_targetFilterHarvestableResource), 0), 0), c_unitCountAlive);
            if ((UnitIsValid(lv_spawnHelperUnit) == true)) {
                UnitCreate(1, libMapM_gv_jungleCreepCamps[lp_camp].lv_mercSpawnedMinionUnitType[lv_i], c_unitCreateIgnorePlacement, lp_owner, UnitGetPosition(lv_spawnHelperUnit), UnitGetFacing(lv_spawnHelperUnit));
                UnitRemove(lv_spawnHelperUnit);
            }
            else {
                UnitCreate(1, libMapM_gv_jungleCreepCamps[lp_camp].lv_mercSpawnedMinionUnitType[lv_i], c_unitCreateIgnorePlacement, lp_owner, lv_spawnPoint, PointGetFacing(lv_spawnPoint));
            }
        }
        else {
            UnitCreate(1, libMapM_gv_jungleCreepCamps[lp_camp].lv_mercSpawnedMinionUnitType[lv_i], c_unitCreateIgnorePlacement, lp_owner, libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataDefenderSpawnPoints[lv_i], PointGetFacing(libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataDefenderSpawnPoints[lv_i]));
        }
        lv_minion = UnitLastCreated();
        libGame_gf_SendEventJungleCampLanerCreated(lv_minion);
        libGame_gf_UpdateScalingForUnit(lv_minion, lv_scalingTicks, 0);
        if ((lp_hasMercLordTalent == true)) {
            auto0937F60E_val = UnitGetType(lv_minion);
            if (auto0937F60E_val == "MercLanerSiegeGiant") {
                UnitBehaviorAdd(lv_minion, "TalentMercenaryLordGiantBuff", lv_minion, 1);
            }
            else if (auto0937F60E_val == "MercLanerMeleeKnight") {
                UnitBehaviorAdd(lv_minion, "TalentMercenaryLordKnightBuff", lv_minion, 1);
            }
            else if (auto0937F60E_val == "MercLanerRangedMage") {
                UnitBehaviorAdd(lv_minion, "TalentMercenaryLordKnightBuff", lv_minion, 1);
            }
            else {
            }
        }

        if ((UnitGetType(lv_minion) == "MercLanerRangedMage")) {
            libNtve_gf_SendActorMessageToUnit(lv_minion, "Signal Captured");
        }

        if ((UnitGetType(lv_minion) == "MercLanerMeleeKnight") && (lv_knightHasAlreadyBeenCreated == false)) {
            libNtve_gf_SendActorMessageToUnit(lv_minion, "Signal Captured");
            lv_knightHasAlreadyBeenCreated = true;
        }

        UnitSetCustomValue(lv_minion, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_JungleLanerCreepCampIndex), IntToFixed(lp_camp));
        UnitSetCustomValue(lv_minion, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_MercLanerGroupIndex), IntToFixed(libMapM_gv_jungleNumberOfActiveMercGroups));
        UnitGroupAdd(libMapM_gv_jungleMiniMapIconGroup[libMapM_gv_jungleNumberOfActiveMercGroups], lv_minion);
        lv_lane = libMapM_gv_jungleCreepCamps[lp_camp].lv_mercLaneToSpawnIn[lv_team];
        libMapM_gv_jungleCreepCamps[lp_camp].lv_mercLaneLastSpawnedIn[lv_team] = libMapM_gv_jungleCreepCamps[lp_camp].lv_mercLaneToSpawnIn[lv_team];
        lv_waypoint = libMapM_gv_jungleCreepCamps[lp_camp].lv_mercSpawnFirstWaypointIndex[lv_team];
        libAIAI_gf_MinionAIStartMinionAI(-1, lv_minion, lv_lane, lv_waypoint, true, false, false, 0, false);
    }
    libMapM_gf_JungleSetMiniMapIconForMercMinions(lp_camp, libMapM_gv_jungleNumberOfActiveMercGroups, libMapM_gf_JungleGetPortraitForJungleCamp(lp_camp), libMapM_gv_jungleMiniMapIconGroup[libMapM_gv_jungleNumberOfActiveMercGroups]);
    libMapM_gf_JungleCreateMercPath(libMapM_gv_jungleMiniMapLeader[libMapM_gv_jungleNumberOfActiveMercGroups], true);
}

int libMapM_gf_JungleGetMercCampForUnit (unit lp_unit) {
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_JungleLanerCreepCampIndex)));
}

int libMapM_gf_JungleGetMercLanerGroupForUnit (unit lp_unit) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_MercLanerGroupIndex)));
}

trigger auto_libMapM_gf_JungleSetMiniMapIconForMercMinions_Trigger = null;
int auto_libMapM_gf_JungleSetMiniMapIconForMercMinions_lp_camp;
int auto_libMapM_gf_JungleSetMiniMapIconForMercMinions_lp_mercGroupIndex;
string auto_libMapM_gf_JungleSetMiniMapIconForMercMinions_lp_mercUnitMiniMapModel;
unitgroup auto_libMapM_gf_JungleSetMiniMapIconForMercMinions_lp_mercUnitGroup;

void libMapM_gf_JungleSetMiniMapIconForMercMinions (int lp_camp, int lp_mercGroupIndex, string lp_mercUnitMiniMapModel, unitgroup lp_mercUnitGroup) {
    auto_libMapM_gf_JungleSetMiniMapIconForMercMinions_lp_camp = lp_camp;
    auto_libMapM_gf_JungleSetMiniMapIconForMercMinions_lp_mercGroupIndex = lp_mercGroupIndex;
    auto_libMapM_gf_JungleSetMiniMapIconForMercMinions_lp_mercUnitMiniMapModel = lp_mercUnitMiniMapModel;
    auto_libMapM_gf_JungleSetMiniMapIconForMercMinions_lp_mercUnitGroup = lp_mercUnitGroup;

    if (auto_libMapM_gf_JungleSetMiniMapIconForMercMinions_Trigger == null) {
        auto_libMapM_gf_JungleSetMiniMapIconForMercMinions_Trigger = TriggerCreate("auto_libMapM_gf_JungleSetMiniMapIconForMercMinions_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_JungleSetMiniMapIconForMercMinions_Trigger, false, false);
}

bool auto_libMapM_gf_JungleSetMiniMapIconForMercMinions_TriggerFunc (bool testConds, bool runActions) {
    int lp_camp = auto_libMapM_gf_JungleSetMiniMapIconForMercMinions_lp_camp;
    int lp_mercGroupIndex = auto_libMapM_gf_JungleSetMiniMapIconForMercMinions_lp_mercGroupIndex;
    string lp_mercUnitMiniMapModel = auto_libMapM_gf_JungleSetMiniMapIconForMercMinions_lp_mercUnitMiniMapModel;
    unitgroup lp_mercUnitGroup = auto_libMapM_gf_JungleSetMiniMapIconForMercMinions_lp_mercUnitGroup;

    int auto34E8BF10_val;

    // Variable Declarations
    string lv_image;
    bool lv_newLeaderFound;
    unit lv_minimapUnit;

    // Variable Initialization

    // Implementation
    UnitGroupLoopBegin(lp_mercUnitGroup);
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        lv_minimapUnit = UnitGroupLoopCurrent();
        if ((lv_newLeaderFound == false)) {
            lv_newLeaderFound = true;
            libMapM_gv_jungleMiniMapLeader[lp_mercGroupIndex] = UnitGroupLoopCurrent();
            UnitBehaviorAdd(UnitGroupLoopCurrent(), "MinionDeathMonitor", UnitGroupLoopCurrent(), 1);
            auto34E8BF10_val = libMapM_gv_jungleCreepCamps[lp_camp].lv_mapDataMercSpawnType;
            if (auto34E8BF10_val == libMapM_ge_JungleCampMercTypes_SiegeGiants) {
                libNtve_gf_SendActorMessageToUnit(lv_minimapUnit, "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_mercenary.dds");
                ActorSendAsText(libNtve_gf_MainActorofUnit(lv_minimapUnit), TextExpressionAssemble("Param/Expression/lib_MapM_8E3779D5"));
            }
            else if (auto34E8BF10_val == libMapM_ge_JungleCampMercTypes_SiegeCamp1) {
                libNtve_gf_SendActorMessageToUnit(lv_minimapUnit, "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_mercenary.dds");
                ActorSendAsText(libNtve_gf_MainActorofUnit(lv_minimapUnit), TextExpressionAssemble("Param/Expression/lib_MapM_7FB3A831"));
            }
            else if (auto34E8BF10_val == libMapM_ge_JungleCampMercTypes_SiegeCamp2) {
                libNtve_gf_SendActorMessageToUnit(lv_minimapUnit, "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_mercenary.dds");
                ActorSendAsText(libNtve_gf_MainActorofUnit(lv_minimapUnit), TextExpressionAssemble("Param/Expression/lib_MapM_F4E1C8D1"));
            }
            else if (auto34E8BF10_val == libMapM_ge_JungleCampDefenderTypes_SiegeCamp3) {
                libNtve_gf_SendActorMessageToUnit(lv_minimapUnit, "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_mercenary.dds");
                ActorSendAsText(libNtve_gf_MainActorofUnit(lv_minimapUnit), TextExpressionAssemble("Param/Expression/lib_MapM_CB9A9D3E"));
            }
            else if (auto34E8BF10_val == libMapM_ge_JungleCampDefenderTypes_Knights) {
                libNtve_gf_SendActorMessageToUnit(lv_minimapUnit, "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_elitemercenary.dds");
                ActorSendAsText(libNtve_gf_MainActorofUnit(lv_minimapUnit), TextExpressionAssemble("Param/Expression/lib_MapM_49D61AB4"));
            }
            else if (auto34E8BF10_val == libMapM_ge_JungleCampDefenderTypes_BruiserCamp1) {
                libNtve_gf_SendActorMessageToUnit(lv_minimapUnit, "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_elitemercenary.dds");
                ActorSendAsText(libNtve_gf_MainActorofUnit(lv_minimapUnit), TextExpressionAssemble("Param/Expression/lib_MapM_B9FDC66D"));
            }
            else if (auto34E8BF10_val == libMapM_ge_JungleCampDefenderTypes_BruiserCamp2) {
                libNtve_gf_SendActorMessageToUnit(lv_minimapUnit, "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_elitemercenary.dds");
                ActorSendAsText(libNtve_gf_MainActorofUnit(lv_minimapUnit), TextExpressionAssemble("Param/Expression/lib_MapM_5B2FAFC8"));
            }
            else if (auto34E8BF10_val == libMapM_ge_JungleCampDefenderTypes_BruiserCamp3) {
                libNtve_gf_SendActorMessageToUnit(lv_minimapUnit, "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_elitemercenary.dds");
                ActorSendAsText(libNtve_gf_MainActorofUnit(lv_minimapUnit), TextExpressionAssemble("Param/Expression/lib_MapM_CD9E7E1E"));
            }
            else if (auto34E8BF10_val == libMapM_ge_JungleCampDefenderTypes_GraveGolem) {
                ActorSendAsText(libNtve_gf_MainActorofUnit(lv_minimapUnit), TextExpressionAssemble("Param/Expression/lib_MapM_12A4DD82"));
            }
            else if (auto34E8BF10_val == libMapM_ge_JungleCampDefenderTypes_BossCamp1) {
                ActorSendAsText(libNtve_gf_MainActorofUnit(lv_minimapUnit), TextExpressionAssemble("Param/Expression/lib_MapM_D029BC7F"));
            }
            else if (auto34E8BF10_val == libMapM_ge_JungleCampDefenderTypes_BossCamp2) {
                ActorSendAsText(libNtve_gf_MainActorofUnit(lv_minimapUnit), TextExpressionAssemble("Param/Expression/lib_MapM_8D474A01"));
            }
            else if (auto34E8BF10_val == libMapM_ge_JungleCampDefenderTypes_BossCamp3) {
                ActorSendAsText(libNtve_gf_MainActorofUnit(lv_minimapUnit), TextExpressionAssemble("Param/Expression/lib_MapM_35E9B245"));
            }
            else {
            }
        }
        else {
            libNtve_gf_SendActorMessageToUnit(lv_minimapUnit, "MinimapIcon Assets\\Textures\\blank.dds");
            libNtve_gf_SendActorMessageToUnit(lv_minimapUnit, "MinimapIconBackground Assets\\Textures\\blank.dds");
        }
    }
    UnitGroupLoopEnd();
    return true;
}

void libMapM_gf_JungleCreateMercPath (unit lp_mercLeader, bool lp_newPath) {
    int autoB97B7772_val;

    // Variable Declarations
    int lv_mercLanerGroup;
    int lv_waveIndex;
    int lv_currentLane;
    int lv_itWaypoint;
    const fixed lv_pingDuration = 0.75;

    // Variable Initialization

    // Implementation
    lv_mercLanerGroup = libMapM_gf_JungleGetMercLanerGroupForUnit(lp_mercLeader);
    if ((libMapM_gv_jungleMiniMapOrderPath[lv_mercLanerGroup] != 0)) {
        PathClearWayPoints(libMapM_gv_jungleMiniMapOrderPath[lv_mercLanerGroup]);
        PathClearWayPoints(libMapM_gv_jungleMiniMapChaosPath[lv_mercLanerGroup]);
        PathClearWayPoints(libMapM_gv_jungleMiniMapObserverPath[lv_mercLanerGroup]);
        PathDestroy(libMapM_gv_jungleMiniMapOrderPath[lv_mercLanerGroup]);
        PathDestroy(libMapM_gv_jungleMiniMapChaosPath[lv_mercLanerGroup]);
        PathDestroy(libMapM_gv_jungleMiniMapObserverPath[lv_mercLanerGroup]);
        libMapM_gv_jungleMiniMapOrderPath[lv_mercLanerGroup] = 0;
        libMapM_gv_jungleMiniMapChaosPath[lv_mercLanerGroup] = 0;
        libMapM_gv_jungleMiniMapObserverPath[lv_mercLanerGroup] = 0;
    }

    if ((UnitIsAlive(lp_mercLeader) == false)) {
        return ;
    }

    PathCreateForUnit(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, lp_mercLeader);
    PathSetLineTexture(PathLastCreated(), c_pathLocationMinimap, "Assets\\Textures\\storm_waypointline.dds");
    libMapM_gv_jungleMiniMapOrderPath[lv_mercLanerGroup] = PathLastCreated();
    PathSetVisible(libMapM_gv_jungleMiniMapOrderPath[lv_mercLanerGroup], c_pathLocationWorld, false);
    PathCreateForUnit(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, lp_mercLeader);
    PathSetLineTexture(PathLastCreated(), c_pathLocationMinimap, "Assets\\Textures\\storm_waypointline.dds");
    libMapM_gv_jungleMiniMapChaosPath[lv_mercLanerGroup] = PathLastCreated();
    PathSetVisible(libMapM_gv_jungleMiniMapChaosPath[lv_mercLanerGroup], c_pathLocationWorld, false);
    PathCreateForUnit(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], lp_mercLeader);
    PathSetLineTexture(PathLastCreated(), c_pathLocationMinimap, "Assets\\Textures\\storm_waypointline.dds");
    libMapM_gv_jungleMiniMapObserverPath[lv_mercLanerGroup] = PathLastCreated();
    PathSetVisible(libMapM_gv_jungleMiniMapObserverPath[lv_mercLanerGroup], c_pathLocationWorld, false);
    lv_waveIndex = FixedToInt(UnitGetCustomValue(lp_mercLeader, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_MinionIndex)));
    lv_currentLane = libAIAI_gf_MinionAIGetLaneForMinion(lp_mercLeader);
    lv_itWaypoint = libAIAI_gf_MinionAIGetNextWaypointIndexForMinion(lp_mercLeader);
    autoB97B7772_val = libAIAI_gf_MinionAIGetTeamToAttackForMinion(lp_mercLeader);
    if (autoB97B7772_val == libGame_gv_teamChaosIndex_C) {
        PathSetColor(libMapM_gv_jungleMiniMapOrderPath[lv_mercLanerGroup], c_pathLocationAll, ColorWithAlpha(0.00, 50.20, 100.00, 89.41));
        PathSetColor(libMapM_gv_jungleMiniMapChaosPath[lv_mercLanerGroup], c_pathLocationAll, ColorWithAlpha(100.00, 24.71, 24.71, 89.41));
        PathSetColor(libMapM_gv_jungleMiniMapObserverPath[lv_mercLanerGroup], c_pathLocationAll, ColorWithAlpha(0.00, 50.20, 100.00, 89.41));
        PathSetDestinationUnit(libMapM_gv_jungleMiniMapOrderPath[lv_mercLanerGroup], libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core);
        PathSetDestinationUnit(libMapM_gv_jungleMiniMapChaosPath[lv_mercLanerGroup], libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core);
        PathSetDestinationUnit(libMapM_gv_jungleMiniMapObserverPath[lv_mercLanerGroup], libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core);
        while ((lv_itWaypoint < (libGame_gv_laneData[lv_currentLane].lv_waypointCount - 1))) {
            PathAddWayPoint(libMapM_gv_jungleMiniMapOrderPath[lv_mercLanerGroup], libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_itWaypoint]);
            PathAddWayPoint(libMapM_gv_jungleMiniMapChaosPath[lv_mercLanerGroup], libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_itWaypoint]);
            PathAddWayPoint(libMapM_gv_jungleMiniMapObserverPath[lv_mercLanerGroup], libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_itWaypoint]);
            if ((lp_newPath == true)) {
                libNtve_gf_CreatePingFacingAngleWithType(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, "StormPingArrow", libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_itWaypoint], ColorWithAlpha(0.00, 0.00, 100.00, 0.00), lv_pingDuration, AngleBetweenPoints(libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_itWaypoint], libGame_gv_laneData[lv_currentLane].lv_waypoints[(lv_itWaypoint + 1)]), -1, -1);
                PingSetScale(PingLastCreated(), 0.3);
                libNtve_gf_CreatePingFacingAngleWithType(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, "StormPingArrow", libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_itWaypoint], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), lv_pingDuration, AngleBetweenPoints(libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_itWaypoint], libGame_gv_laneData[lv_currentLane].lv_waypoints[(lv_itWaypoint + 1)]), -1, -1);
                PingSetScale(PingLastCreated(), 0.3);
                libNtve_gf_CreatePingFacingAngleWithType(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "StormPingArrow", libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_itWaypoint], ColorWithAlpha(0.00, 0.00, 100.00, 0.00), lv_pingDuration, AngleBetweenPoints(libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_itWaypoint], libGame_gv_laneData[lv_currentLane].lv_waypoints[(lv_itWaypoint + 1)]), -1, -1);
                PingSetScale(PingLastCreated(), 0.3);
            }

            lv_itWaypoint += 1;
        }
    }
    else if (autoB97B7772_val == libGame_gv_teamOrderIndex_C) {
        PathSetColor(libMapM_gv_jungleMiniMapOrderPath[lv_mercLanerGroup], c_pathLocationAll, ColorWithAlpha(100.00, 24.71, 24.71, 89.02));
        PathSetColor(libMapM_gv_jungleMiniMapChaosPath[lv_mercLanerGroup], c_pathLocationAll, ColorWithAlpha(0.00, 50.20, 100.00, 89.41));
        PathSetColor(libMapM_gv_jungleMiniMapObserverPath[lv_mercLanerGroup], c_pathLocationAll, ColorWithAlpha(100.00, 24.71, 24.71, 89.02));
        PathSetDestinationUnit(libMapM_gv_jungleMiniMapOrderPath[lv_mercLanerGroup], libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core);
        PathSetDestinationUnit(libMapM_gv_jungleMiniMapChaosPath[lv_mercLanerGroup], libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core);
        PathSetDestinationUnit(libMapM_gv_jungleMiniMapObserverPath[lv_mercLanerGroup], libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core);
        while ((lv_itWaypoint > 1)) {
            PathAddWayPoint(libMapM_gv_jungleMiniMapOrderPath[lv_mercLanerGroup], libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_itWaypoint]);
            PathAddWayPoint(libMapM_gv_jungleMiniMapChaosPath[lv_mercLanerGroup], libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_itWaypoint]);
            PathAddWayPoint(libMapM_gv_jungleMiniMapObserverPath[lv_mercLanerGroup], libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_itWaypoint]);
            if ((lp_newPath == true)) {
                libNtve_gf_CreatePingFacingAngleWithType(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, "StormPingArrow", libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_itWaypoint], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), lv_pingDuration, AngleBetweenPoints(libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_itWaypoint], libGame_gv_laneData[lv_currentLane].lv_waypoints[(lv_itWaypoint - 1)]), -1, -1);
                PingSetScale(PingLastCreated(), 0.3);
                libNtve_gf_CreatePingFacingAngleWithType(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, "StormPingArrow", libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_itWaypoint], ColorWithAlpha(0.00, 0.00, 100.00, 0.00), lv_pingDuration, AngleBetweenPoints(libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_itWaypoint], libGame_gv_laneData[lv_currentLane].lv_waypoints[(lv_itWaypoint - 1)]), -1, -1);
                PingSetScale(PingLastCreated(), 0.3);
                libNtve_gf_CreatePingFacingAngleWithType(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "StormPingArrow", libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_itWaypoint], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), lv_pingDuration, AngleBetweenPoints(libGame_gv_laneData[lv_currentLane].lv_waypoints[lv_itWaypoint], libGame_gv_laneData[lv_currentLane].lv_waypoints[(lv_itWaypoint - 1)]), -1, -1);
                PingSetScale(PingLastCreated(), 0.3);
            }

            lv_itWaypoint -= 1;
        }
    }
    else {
    }
}

void libMapM_gf_JungleUpdateMercDamageTracker (int lp_camp, fixed lp_damageDealt) {
    // Implementation
    libMapM_gv_jungleCreepCamps[lp_camp].lv_statTrackingDamageDoneByLastCapture += lp_damageDealt;
    libMapM_gf_JungleUpdateTextTagForCamp(lp_camp, libMapM_ge_JungleCampTextTagTypes_Helper);
}

void libMapM_gf_MapMechanicAdd (string lp_mechanic, trigger lp_initializeCallback) {
    // Implementation
    if ((GameTestConfigType() == 1)) {
        return ;
    }

    if ((libMapM_gv_mapMechanicControllerActor == null)) {
        libNtve_gf_CreateActorAtPoint("MMController", RegionGetCenter(RegionEntireMap()));
        libMapM_gv_mapMechanicControllerActor = libNtve_gf_ActorLastCreated();
    }

    if ((libMapM_gf_MapMechanicExistsOnMap(lp_mechanic) == true)) {
        return ;
    }

    libMapM_gv_mapMechanicsCount += 1;
    libMapM_gv_mapMechanics[libMapM_gv_mapMechanicsCount] = lp_mechanic;
    libMapM_gv_mapMechanicsInitCallbacks[libMapM_gv_mapMechanicsCount] = lp_initializeCallback;
    libGame_gf_SendEventMapMechanicInitialization(lp_mechanic);
}

int libMapM_gf_MapMechanicIndex (string lp_mechanic) {
    int auto332ED446_ae;
    int auto332ED446_ai;

    // Variable Declarations
    int lv_itMechanic;

    // Variable Initialization

    // Implementation
    auto332ED446_ae = libMapM_gv_mapMechanicsCount;
    auto332ED446_ai = 1;
    lv_itMechanic = 1;
    for ( ; ( (auto332ED446_ai >= 0 && lv_itMechanic <= auto332ED446_ae) || (auto332ED446_ai <= 0 && lv_itMechanic >= auto332ED446_ae) ) ; lv_itMechanic += auto332ED446_ai ) {
        if ((libMapM_gv_mapMechanics[lv_itMechanic] == lp_mechanic)) {
            return lv_itMechanic;
        }

    }
    return 0;
}

bool libMapM_gf_MapMechanicExistsOnMap (string lp_mechanic) {
    // Implementation
    return (libMapM_gf_MapMechanicIndex(lp_mechanic) > 0);
}

string libMapM_gf_PrimaryMapMechanic () {
    // Implementation
    return libMapM_gv_mapMechanics[1];
}

trigger auto_libMapM_gf_PlayMapMechanicIntroForPlayer_Trigger = null;
int auto_libMapM_gf_PlayMapMechanicIntroForPlayer_lp_player;
string auto_libMapM_gf_PlayMapMechanicIntroForPlayer_lp_cutscene;
string auto_libMapM_gf_PlayMapMechanicIntroForPlayer_lp_filter;

void libMapM_gf_PlayMapMechanicIntroForPlayer (int lp_player, string lp_cutscene, string lp_filter) {
    auto_libMapM_gf_PlayMapMechanicIntroForPlayer_lp_player = lp_player;
    auto_libMapM_gf_PlayMapMechanicIntroForPlayer_lp_cutscene = lp_cutscene;
    auto_libMapM_gf_PlayMapMechanicIntroForPlayer_lp_filter = lp_filter;

    if (auto_libMapM_gf_PlayMapMechanicIntroForPlayer_Trigger == null) {
        auto_libMapM_gf_PlayMapMechanicIntroForPlayer_Trigger = TriggerCreate("auto_libMapM_gf_PlayMapMechanicIntroForPlayer_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_PlayMapMechanicIntroForPlayer_Trigger, false, false);
}

bool auto_libMapM_gf_PlayMapMechanicIntroForPlayer_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libMapM_gf_PlayMapMechanicIntroForPlayer_lp_player;
    string lp_cutscene = auto_libMapM_gf_PlayMapMechanicIntroForPlayer_lp_cutscene;
    string lp_filter = auto_libMapM_gf_PlayMapMechanicIntroForPlayer_lp_filter;

    playergroup autoA1C853BF_g;
    int autoA1C853BF_p;
    playergroup auto341C65FA_g;
    int auto341C65FA_p;

    // Variable Declarations
    fixed lv_fadeDuration;
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    TriggerEnable(libMapM_gt_MMIntroCutsceneStart, true);
    TriggerEnable(libMapM_gt_MMIntroCutsceneEnd, true);
    libGame_gv_players[lp_player].lv_heroSpawnReady = true;
    libMapM_gv_mMIntroCutsceneFinished[lp_player] = false;
    libNtve_gf_CinematicMode(true, libCore_gv_playerGroupFromPlayer[lp_player], c_transitionDurationImmediate);
    SoundChannelMute(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryReady, true);
    SoundChannelMute(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryBuild, true);
    SoundChannelMute(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryVoice, true);
    SoundChannelMute(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryAlert, true);
    CutsceneFade(false, 0.0, Color(0,0,0), 0.0, libCore_gv_playerGroupFromPlayer[lp_player], true);
    libStEx_gf_TurnCinematicCameraOnOff(lp_player, true);
    autoA1C853BF_g = PlayerGroupAll(); 
    autoA1C853BF_p = 1;
    for ( ; autoA1C853BF_p <= PlayerGroupCount(autoA1C853BF_g) ; autoA1C853BF_p += (lv_itPlayer == PlayerGroupPlayer(autoA1C853BF_g, autoA1C853BF_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoA1C853BF_g, autoA1C853BF_p);
        if ((lv_itPlayer != lp_player) && (libNtve_gf_PlayerIsEnemy(lp_player, lv_itPlayer, libNtve_ge_PlayerRelation_Ally) == true)) {
            PlayerSetAlliance(lp_player, c_allianceIdVision, lv_itPlayer, false);
        }

    }
    VisRevealerCreate(lp_player, RegionEntireMap());
    CutsceneCreateNoPosition(lp_cutscene, libCore_gv_playerGroupFromPlayer[lp_player], false);
    libMapM_gv_mMIntroCutscene[lp_player] = CutsceneLastCreated();
    if ((StringLength(lp_filter) > 0)) {
        CutsceneAddFilter(CutsceneLastCreated(), lp_filter);
    }

    CutscenePlay(libMapM_gv_mMIntroCutscene[lp_player]);
    libMapM_gv_mMIntroCutscenePlayer = lp_player;
    TriggerExecute(libMapM_gt_MMIntroSkippable, true, true);
    if ((libMapM_gv_mMIntroCutsceneCompleted[lp_player] == false)) {
        lv_fadeDuration = 0.75;
        CutsceneFade(false, lv_fadeDuration, Color(0,0,0), 0.0, libCore_gv_playerGroupFromPlayer[lp_player], false);
        libStEx_gf_CinematicFade(false, lv_fadeDuration, Color(0.00, 0.00, 0.00), lp_player);
        Wait(lv_fadeDuration, c_timeGame);
    }

    CutsceneStop(libMapM_gv_mMIntroCutscene[lp_player]);
    VisRevealerEnable(VisRevealerLastCreated(), false);
    VisRevealerDestroy(VisRevealerLastCreated());
    libMapM_gv_mMIntroCutsceneFinished[lp_player] = true;
    libGame_gf_AnnouncementClearQueueForPlayer(lp_player);
    SoundChannelMute(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryReady, false);
    SoundChannelMute(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryBuild, false);
    SoundChannelMute(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryVoice, false);
    SoundChannelMute(libCore_gv_playerGroupFromPlayer[lp_player], c_soundCategoryAlert, false);
    auto341C65FA_g = PlayerGroupAll(); 
    auto341C65FA_p = 1;
    for ( ; auto341C65FA_p <= PlayerGroupCount(auto341C65FA_g) ; auto341C65FA_p += (lv_itPlayer == PlayerGroupPlayer(auto341C65FA_g, auto341C65FA_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto341C65FA_g, auto341C65FA_p);
        if ((lv_itPlayer != lp_player) && (libNtve_gf_PlayerIsEnemy(lp_player, lv_itPlayer, libNtve_ge_PlayerRelation_Ally) == true)) {
            PlayerSetAlliance(lp_player, c_allianceIdVision, lv_itPlayer, true);
        }

    }
    libStEx_gf_CinematicModeTutorial(false, libCore_gv_playerGroupFromPlayer[lp_player], 1.0);
    libStEx_gf_TurnCinematicCameraOnOff(lp_player, false);
    libUIUI_gf_UIGameUIShowHideConsolePanelForPlayer(false, lp_player);
    lv_fadeDuration = 1.5;
    if ((libNtve_gf_UnitGroupIsDead(libGame_gv_players[lp_player].lv_heroUnitGroup) == true)) {
        CutsceneFade(true, lv_fadeDuration, Color(0,0,0), 0.0, libCore_gv_playerGroupFromPlayer[lp_player], false);
        libStEx_gf_CinematicFade(true, lv_fadeDuration, Color(0.00, 0.00, 0.00), lp_player);
        Wait(lv_fadeDuration, c_timeGame);
    }
    else {
        UISetMode(libCore_gv_playerGroupFromPlayer[lp_player], c_uiModeConsole, lv_fadeDuration);
        CutsceneFade(true, lv_fadeDuration, Color(0,0,0), 0.0, libCore_gv_playerGroupFromPlayer[lp_player], false);
        libStEx_gf_CinematicFade(true, lv_fadeDuration, Color(0.00, 0.00, 0.00), lp_player);
        Wait(0.5, c_timeGame);
        UnitGroupSelect(libGame_gv_players[lp_player].lv_heroUnitGroup, lp_player, true);
        UISetMode(libCore_gv_playerGroupFromPlayer[lp_player], c_uiModeConsole, c_transitionDurationImmediate);
        libUIUI_gf_TopBarPanelShowHideForPlayer(true, lp_player);
        libUIUI_gf_UIGameUIShowHideConsolePanelForPlayer(true, lp_player);
        Wait((lv_fadeDuration - 0.5), c_timeGame);
    }
    libGame_gv_players[lp_player].lv_heroSpawnReady = true;
    return true;
}

bool libMapM_gf_MapMechanicIntroFinished (int lp_player) {
    // Implementation
    return libMapM_gv_mMIntroCutsceneFinished[lp_player];
}

trigger auto_libMapM_gf_MapMechanicDisplayAnnouncement_Trigger = null;
text auto_libMapM_gf_MapMechanicDisplayAnnouncement_lp_announcement;
bool auto_libMapM_gf_MapMechanicDisplayAnnouncement_lp_writeOut;
fixed auto_libMapM_gf_MapMechanicDisplayAnnouncement_lp_writeOutDuration;
fixed auto_libMapM_gf_MapMechanicDisplayAnnouncement_lp_duration;
int auto_libMapM_gf_MapMechanicDisplayAnnouncement_lp_allyOption;
playergroup auto_libMapM_gf_MapMechanicDisplayAnnouncement_lp_players;

void libMapM_gf_MapMechanicDisplayAnnouncement (text lp_announcement, bool lp_writeOut, fixed lp_writeOutDuration, fixed lp_duration, int lp_allyOption, playergroup lp_players) {
    auto_libMapM_gf_MapMechanicDisplayAnnouncement_lp_announcement = lp_announcement;
    auto_libMapM_gf_MapMechanicDisplayAnnouncement_lp_writeOut = lp_writeOut;
    auto_libMapM_gf_MapMechanicDisplayAnnouncement_lp_writeOutDuration = lp_writeOutDuration;
    auto_libMapM_gf_MapMechanicDisplayAnnouncement_lp_duration = lp_duration;
    auto_libMapM_gf_MapMechanicDisplayAnnouncement_lp_allyOption = lp_allyOption;
    auto_libMapM_gf_MapMechanicDisplayAnnouncement_lp_players = lp_players;

    if (auto_libMapM_gf_MapMechanicDisplayAnnouncement_Trigger == null) {
        auto_libMapM_gf_MapMechanicDisplayAnnouncement_Trigger = TriggerCreate("auto_libMapM_gf_MapMechanicDisplayAnnouncement_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MapMechanicDisplayAnnouncement_Trigger, false, false);
}

bool auto_libMapM_gf_MapMechanicDisplayAnnouncement_TriggerFunc (bool testConds, bool runActions) {
    text lp_announcement = auto_libMapM_gf_MapMechanicDisplayAnnouncement_lp_announcement;
    bool lp_writeOut = auto_libMapM_gf_MapMechanicDisplayAnnouncement_lp_writeOut;
    fixed lp_writeOutDuration = auto_libMapM_gf_MapMechanicDisplayAnnouncement_lp_writeOutDuration;
    fixed lp_duration = auto_libMapM_gf_MapMechanicDisplayAnnouncement_lp_duration;
    int lp_allyOption = auto_libMapM_gf_MapMechanicDisplayAnnouncement_lp_allyOption;
    playergroup lp_players = auto_libMapM_gf_MapMechanicDisplayAnnouncement_lp_players;

    int auto2C408549_val;

    // Variable Declarations
    text lv_msg;
    int lv_dlg;

    // Variable Initialization
    lv_dlg = c_invalidDialogId;

    // Implementation
    if ((libMapM_gv_mMAnnouncementDialog != c_invalidDialogId)) {
        DialogDestroy(libMapM_gv_mMAnnouncementDialog);
    }

    DialogCreate(1000, 200, c_anchorTop, 0, 175, false);
    libMapM_gv_mMAnnouncementDialog = DialogLastCreated();
    lv_dlg = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), lp_players, true);
    auto2C408549_val = lp_allyOption;
    if (auto2C408549_val == libMapM_ge_MapMechanicAnnouncementAllyOptions_Neutral) {
        lv_msg = (StringExternal("Param/Value/lib_MapM_4015ADE0") + lp_announcement + StringExternal("Param/Value/lib_MapM_56C0DA48"));
    }
    else if (auto2C408549_val == libMapM_ge_MapMechanicAnnouncementAllyOptions_Ally) {
        lv_msg = (StringExternal("Param/Value/lib_MapM_66ADAE20") + lp_announcement + StringExternal("Param/Value/lib_MapM_41E4D92B"));
    }
    else if (auto2C408549_val == libMapM_ge_MapMechanicAnnouncementAllyOptions_Enemy) {
        lv_msg = (StringExternal("Param/Value/lib_MapM_C0DA83FE") + lp_announcement + StringExternal("Param/Value/lib_MapM_FE1E01CF"));
    }
    else {
    }
    SoundPlay(SoundLink("UI_CampaignHintNotify", -1), lp_players, 100.0, 0.0);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, lv_msg, ColorWithAlpha(0,0,0,0), lp_writeOut, lp_writeOutDuration);
    DialogControlSetFullDialog(DialogControlLastCreated(), lp_players, true);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_Map_Announcement", lp_players);
    Wait(lp_duration, c_timeGame);
    if ((libMapM_gv_mMAnnouncementDialog != lv_dlg)) {
        return true;
    }

    DialogControlFadeTransparency(DialogControlLastCreated(), lp_players, 2.0, 100.0);
    Wait(2.0, c_timeGame);
    if ((libMapM_gv_mMAnnouncementDialog != lv_dlg)) {
        return true;
    }

    DialogDestroy(DialogLastCreated());
    libMapM_gv_mMAnnouncementDialog = c_invalidDialogId;
    return true;
}

void libMapM_gf_MapMechanicDisplayAnnouncementWait (text lp_announcement, bool lp_writeOut, fixed lp_writeOutDuration, fixed lp_duration, int lp_allyOption, playergroup lp_players, bool lp_waitOption) {
    int auto96FC6928_val;

    // Variable Declarations
    text lv_msg;
    int lv_dlg;

    // Variable Initialization
    lv_dlg = c_invalidDialogId;

    // Implementation
    DialogCreate(1000, 200, c_anchorTop, 0, 175, false);
    lv_dlg = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), lp_players, true);
    auto96FC6928_val = lp_allyOption;
    if (auto96FC6928_val == libMapM_ge_MapMechanicAnnouncementAllyOptions_Neutral) {
        TextExpressionSetToken("Param/Expression/lib_MapM_3C60D2C9", "A", lp_announcement);
        lv_msg = TextExpressionAssemble("Param/Expression/lib_MapM_3C60D2C9");
    }
    else if (auto96FC6928_val == libMapM_ge_MapMechanicAnnouncementAllyOptions_Ally) {
        TextExpressionSetToken("Param/Expression/lib_MapM_34434C06", "A", lp_announcement);
        lv_msg = TextExpressionAssemble("Param/Expression/lib_MapM_34434C06");
    }
    else if (auto96FC6928_val == libMapM_ge_MapMechanicAnnouncementAllyOptions_Enemy) {
        TextExpressionSetToken("Param/Expression/lib_MapM_BEB89D60", "A", lp_announcement);
        lv_msg = TextExpressionAssemble("Param/Expression/lib_MapM_BEB89D60");
    }
    else {
    }
    SoundPlay(SoundLink("UI_CampaignHintNotify", -1), lp_players, 100.0, 0.0);
    TextExpressionSetToken("Param/Expression/lib_MapM_3319AAA3", "A", lp_announcement);
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, TextExpressionAssemble("Param/Expression/lib_MapM_3319AAA3"), ColorWithAlpha(0,0,0,0), lp_writeOut, lp_writeOutDuration);
    DialogControlSetFullDialog(DialogControlLastCreated(), lp_players, true);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), "Storm_Map_Announcement", lp_players);
    libMapM_gf_MMAnnouncementClearnup(lv_dlg, DialogControlLastCreated(), lp_duration, lp_players);
}

trigger auto_libMapM_gf_MMAnnouncementClearnup_Trigger = null;
int auto_libMapM_gf_MMAnnouncementClearnup_lp_dlg;
int auto_libMapM_gf_MMAnnouncementClearnup_lp_label;
fixed auto_libMapM_gf_MMAnnouncementClearnup_lp_duration;
playergroup auto_libMapM_gf_MMAnnouncementClearnup_lp_players;

void libMapM_gf_MMAnnouncementClearnup (int lp_dlg, int lp_label, fixed lp_duration, playergroup lp_players) {
    auto_libMapM_gf_MMAnnouncementClearnup_lp_dlg = lp_dlg;
    auto_libMapM_gf_MMAnnouncementClearnup_lp_label = lp_label;
    auto_libMapM_gf_MMAnnouncementClearnup_lp_duration = lp_duration;
    auto_libMapM_gf_MMAnnouncementClearnup_lp_players = lp_players;

    if (auto_libMapM_gf_MMAnnouncementClearnup_Trigger == null) {
        auto_libMapM_gf_MMAnnouncementClearnup_Trigger = TriggerCreate("auto_libMapM_gf_MMAnnouncementClearnup_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMAnnouncementClearnup_Trigger, false, false);
}

bool auto_libMapM_gf_MMAnnouncementClearnup_TriggerFunc (bool testConds, bool runActions) {
    int lp_dlg = auto_libMapM_gf_MMAnnouncementClearnup_lp_dlg;
    int lp_label = auto_libMapM_gf_MMAnnouncementClearnup_lp_label;
    fixed lp_duration = auto_libMapM_gf_MMAnnouncementClearnup_lp_duration;
    playergroup lp_players = auto_libMapM_gf_MMAnnouncementClearnup_lp_players;

    // Implementation
    Wait(lp_duration, c_timeGame);
    DialogControlFadeTransparency(lp_label, lp_players, 2.0, 100.0);
    Wait(2.0, c_timeGame);
    DialogDestroy(lp_dlg);
    return true;
}

trigger auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_Trigger = null;
text auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_lp_announcement;
bool auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_lp_writeOut;
fixed auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_lp_writeOutDuration;
fixed auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_lp_duration;
int auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_lp_allyOption;
playergroup auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_lp_players;

void libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed (text lp_announcement, bool lp_writeOut, fixed lp_writeOutDuration, fixed lp_duration, int lp_allyOption, playergroup lp_players) {
    auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_lp_announcement = lp_announcement;
    auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_lp_writeOut = lp_writeOut;
    auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_lp_writeOutDuration = lp_writeOutDuration;
    auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_lp_duration = lp_duration;
    auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_lp_allyOption = lp_allyOption;
    auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_lp_players = lp_players;

    if (auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_Trigger == null) {
        auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_Trigger = TriggerCreate("auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_Trigger, false, false);
}

bool auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_TriggerFunc (bool testConds, bool runActions) {
    text lp_announcement = auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_lp_announcement;
    bool lp_writeOut = auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_lp_writeOut;
    fixed lp_writeOutDuration = auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_lp_writeOutDuration;
    fixed lp_duration = auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_lp_duration;
    int lp_allyOption = auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_lp_allyOption;
    playergroup lp_players = auto_libMapM_gf_MapMechanicDisplayAnnouncementMultipleAllowed_lp_players;

    playergroup autoD023F6D3_g;
    int autoD023F6D3_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    autoD023F6D3_g = lp_players; 
    autoD023F6D3_p = 1;
    for ( ; autoD023F6D3_p <= PlayerGroupCount(autoD023F6D3_g) ; autoD023F6D3_p += (lv_itPlayer == PlayerGroupPlayer(autoD023F6D3_g, autoD023F6D3_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoD023F6D3_g, autoD023F6D3_p);
        libMapM_gf_MMAnnouncementMultiplePerPlayer(lv_itPlayer, lp_announcement, lp_writeOut, lp_writeOutDuration, lp_duration, lp_allyOption);
    }
    return true;
}

trigger auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_Trigger = null;
int auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_lp_player;
text auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_lp_announcement;
bool auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_lp_writeOut;
fixed auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_lp_writeOutDuration;
fixed auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_lp_duration;
int auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_lp_allyOption;

void libMapM_gf_MMAnnouncementMultiplePerPlayer (int lp_player, text lp_announcement, bool lp_writeOut, fixed lp_writeOutDuration, fixed lp_duration, int lp_allyOption) {
    auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_lp_player = lp_player;
    auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_lp_announcement = lp_announcement;
    auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_lp_writeOut = lp_writeOut;
    auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_lp_writeOutDuration = lp_writeOutDuration;
    auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_lp_duration = lp_duration;
    auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_lp_allyOption = lp_allyOption;

    if (auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_Trigger == null) {
        auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_Trigger = TriggerCreate("auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_Trigger, false, false);
}

bool auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_TriggerFunc (bool testConds, bool runActions) {
    int lp_player = auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_lp_player;
    text lp_announcement = auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_lp_announcement;
    bool lp_writeOut = auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_lp_writeOut;
    fixed lp_writeOutDuration = auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_lp_writeOutDuration;
    fixed lp_duration = auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_lp_duration;
    int lp_allyOption = auto_libMapM_gf_MMAnnouncementMultiplePerPlayer_lp_allyOption;

    int auto02A880C7_val;

    // Variable Declarations
    string lv_style;

    // Variable Initialization

    // Implementation
    SoundPlay(SoundLink("UI_CampaignHintNotify", -1), libCore_gv_playerGroupFromPlayer[lp_player], 100.0, 0.0);
    if ((libMapM_gv_mMAnnouncementDialogsMultiple[lp_player] != c_invalidDialogId)) {
        DialogDestroy(libMapM_gv_mMAnnouncementDialogsMultiple[lp_player]);
    }

    DialogCreate(1000, 200, c_anchorTop, 0, 175, false);
    libMapM_gv_mMAnnouncementDialogsMultiple[lp_player] = DialogLastCreated();
    DialogSetImageVisible(DialogLastCreated(), false);
    DialogSetVisible(DialogLastCreated(), libCore_gv_playerGroupFromPlayer[lp_player], true);
    auto02A880C7_val = lp_allyOption;
    if (auto02A880C7_val == libMapM_ge_MapMechanicAnnouncementAllyOptions_Neutral) {
        lv_style = "Storm_Map_Announcement";
    }
    else if (auto02A880C7_val == libMapM_ge_MapMechanicAnnouncementAllyOptions_Ally) {
        lv_style = "Storm_Map_AnnouncementAlly";
    }
    else if (auto02A880C7_val == libMapM_ge_MapMechanicAnnouncementAllyOptions_Enemy) {
        lv_style = "Storm_Map_AnnouncementEnemy";
    }
    else if (auto02A880C7_val == libMapM_ge_MapMechanicAnnouncementAllyOptions_AllySmall) {
        lv_style = "Storm_Map_AnnouncementAlly_Small";
    }
    else {
        lv_style = "Storm_Map_Announcement";
    }
    libNtve_gf_CreateDialogItemLabel(DialogLastCreated(), 200, 50, c_anchorCenter, 0, 0, lp_announcement, ColorWithAlpha(0,0,0,0), lp_writeOut, lp_writeOutDuration);
    DialogControlSetFullDialog(DialogControlLastCreated(), libCore_gv_playerGroupFromPlayer[lp_player], true);
    libNtve_gf_SetDialogItemStyle(DialogControlLastCreated(), lv_style, libCore_gv_playerGroupFromPlayer[lp_player]);
    libMapM_gf_MMAnnouncementClearnup(DialogLastCreated(), DialogControlLastCreated(), lp_duration, libCore_gv_playerGroupFromPlayer[lp_player]);
    return true;
}

void libMapM_gf_MapMechanicRunConversation (string lp_convoOrder, string lp_convoChaos, string lp_convoObserver) {
    int autoC1B27D67_ae;
    int autoC1B27D67_ai;

    // Variable Declarations
    int lv_itIndex;

    // Variable Initialization

    // Implementation
    while (!((libMapM_gv_mMRunConversationDoneCount == 0))) {
        Wait(0.0625, c_timeGame);
    }
    libMapM_gf_MMRunConversationIndividual(lp_convoOrder, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false));
    libMapM_gf_MMRunConversationIndividual(lp_convoChaos, libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false));
    libMapM_gf_MMRunConversationIndividual(lp_convoObserver, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]);
    while (true) {
        Wait(0.125, c_timeGame);
        autoC1B27D67_ae = libMapM_gv_mMRunConversationDoneCount;
        autoC1B27D67_ai = 1;
        lv_itIndex = 1;
        for ( ; ( (autoC1B27D67_ai >= 0 && lv_itIndex <= autoC1B27D67_ae) || (autoC1B27D67_ai <= 0 && lv_itIndex >= autoC1B27D67_ae) ) ; lv_itIndex += autoC1B27D67_ai ) {
            if ((libMapM_gv_mMRunConversationDone[lv_itIndex] == false)) {
                continue;
            }

        }
        libMapM_gv_mMRunConversationDoneCount = 0;
        return ;
    }
}

trigger auto_libMapM_gf_MMRunConversationIndividual_Trigger = null;
string auto_libMapM_gf_MMRunConversationIndividual_lp_convo;
playergroup auto_libMapM_gf_MMRunConversationIndividual_lp_players;

void libMapM_gf_MMRunConversationIndividual (string lp_convo, playergroup lp_players) {
    auto_libMapM_gf_MMRunConversationIndividual_lp_convo = lp_convo;
    auto_libMapM_gf_MMRunConversationIndividual_lp_players = lp_players;

    if (auto_libMapM_gf_MMRunConversationIndividual_Trigger == null) {
        auto_libMapM_gf_MMRunConversationIndividual_Trigger = TriggerCreate("auto_libMapM_gf_MMRunConversationIndividual_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMRunConversationIndividual_Trigger, false, false);
}

bool auto_libMapM_gf_MMRunConversationIndividual_TriggerFunc (bool testConds, bool runActions) {
    string lp_convo = auto_libMapM_gf_MMRunConversationIndividual_lp_convo;
    playergroup lp_players = auto_libMapM_gf_MMRunConversationIndividual_lp_players;

    // Implementation
    libMapM_gv_mMRunConversationDoneCount += 1;
    libMapM_gv_mMRunConversationDone[libMapM_gv_mMRunConversationDoneCount] = false;
    ConversationDataRun(lp_convo, lp_players, c_conversationSkipNone, true);
    libMapM_gv_mMRunConversationDone[libMapM_gv_mMRunConversationDoneCount] = true;
    return true;
}

trigger auto_libMapM_gf_MapSetRepulseRegion_Trigger = null;
int auto_libMapM_gf_MapSetRepulseRegion_lp_team;
region auto_libMapM_gf_MapSetRepulseRegion_lp_pulseRegion;
point auto_libMapM_gf_MapSetRepulseRegion_lp_punchTargetLocation1;
point auto_libMapM_gf_MapSetRepulseRegion_lp_punchTargetLocation2;
point auto_libMapM_gf_MapSetRepulseRegion_lp_punchTargetLocation3;
point auto_libMapM_gf_MapSetRepulseRegion_lp_punchTargetLocation4;

void libMapM_gf_MapSetRepulseRegion (int lp_team, region lp_pulseRegion, point lp_punchTargetLocation1, point lp_punchTargetLocation2, point lp_punchTargetLocation3, point lp_punchTargetLocation4) {
    auto_libMapM_gf_MapSetRepulseRegion_lp_team = lp_team;
    auto_libMapM_gf_MapSetRepulseRegion_lp_pulseRegion = lp_pulseRegion;
    auto_libMapM_gf_MapSetRepulseRegion_lp_punchTargetLocation1 = lp_punchTargetLocation1;
    auto_libMapM_gf_MapSetRepulseRegion_lp_punchTargetLocation2 = lp_punchTargetLocation2;
    auto_libMapM_gf_MapSetRepulseRegion_lp_punchTargetLocation3 = lp_punchTargetLocation3;
    auto_libMapM_gf_MapSetRepulseRegion_lp_punchTargetLocation4 = lp_punchTargetLocation4;

    if (auto_libMapM_gf_MapSetRepulseRegion_Trigger == null) {
        auto_libMapM_gf_MapSetRepulseRegion_Trigger = TriggerCreate("auto_libMapM_gf_MapSetRepulseRegion_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MapSetRepulseRegion_Trigger, false, false);
}

bool auto_libMapM_gf_MapSetRepulseRegion_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libMapM_gf_MapSetRepulseRegion_lp_team;
    region lp_pulseRegion = auto_libMapM_gf_MapSetRepulseRegion_lp_pulseRegion;
    point lp_punchTargetLocation1 = auto_libMapM_gf_MapSetRepulseRegion_lp_punchTargetLocation1;
    point lp_punchTargetLocation2 = auto_libMapM_gf_MapSetRepulseRegion_lp_punchTargetLocation2;
    point lp_punchTargetLocation3 = auto_libMapM_gf_MapSetRepulseRegion_lp_punchTargetLocation3;
    point lp_punchTargetLocation4 = auto_libMapM_gf_MapSetRepulseRegion_lp_punchTargetLocation4;

    // Implementation
    TriggerEnable(libGame_gt_BaseRepulserFieldLaunchMissile, false);
    TriggerEnable(libGame_gt_BaseSafeZonePunt, true);
    libMapM_gv_mMRepulseRegions[lp_team] = lp_pulseRegion;
    libMapM_gv_mMRepulseRegionPunchTarget[lp_team][1] = lp_punchTargetLocation1;
    libMapM_gv_mMRepulseRegionPunchTarget[lp_team][2] = lp_punchTargetLocation2;
    libMapM_gv_mMRepulseRegionPunchTarget[lp_team][3] = lp_punchTargetLocation3;
    libMapM_gv_mMRepulseRegionPunchTarget[lp_team][4] = lp_punchTargetLocation4;
    Wait(2.0, c_timeGame);
    TriggerExecute(libMapM_gt_MMRepulseRegionPunchBehavior, true, false);
    return true;
}

trigger auto_libMapM_gf_MMRepulseRegionAddToPunchedGroup_Trigger = null;
unit auto_libMapM_gf_MMRepulseRegionAddToPunchedGroup_lp_punchedUnit;

void libMapM_gf_MMRepulseRegionAddToPunchedGroup (unit lp_punchedUnit) {
    auto_libMapM_gf_MMRepulseRegionAddToPunchedGroup_lp_punchedUnit = lp_punchedUnit;

    if (auto_libMapM_gf_MMRepulseRegionAddToPunchedGroup_Trigger == null) {
        auto_libMapM_gf_MMRepulseRegionAddToPunchedGroup_Trigger = TriggerCreate("auto_libMapM_gf_MMRepulseRegionAddToPunchedGroup_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMRepulseRegionAddToPunchedGroup_Trigger, false, false);
}

bool auto_libMapM_gf_MMRepulseRegionAddToPunchedGroup_TriggerFunc (bool testConds, bool runActions) {
    unit lp_punchedUnit = auto_libMapM_gf_MMRepulseRegionAddToPunchedGroup_lp_punchedUnit;

    // Implementation
    UnitGroupAdd(libMapM_gv_mMRepulseRegionPunchedGroup, lp_punchedUnit);
    Wait(1.0, c_timeGame);
    UnitGroupRemove(libMapM_gv_mMRepulseRegionPunchedGroup, lp_punchedUnit);
    return true;
}

void libMapM_gf_MapSetSafeRegion (int lp_team, region lp_safeRegion) {
    // Implementation
    TriggerEnable(libGame_gt_BaseUnitEntersSafeZone, true);
    libMapM_gv_mMSafeRegions[lp_team] = lp_safeRegion;
    TriggerExecute(libMapM_gt_MMSafeRegionBehavior, true, false);
}

void libMapM_gf_RestrictAbilitiesToRegionForUnit (unit lp_unit, region lp_region) {
    int auto068B7A70_ae;

    // Variable Declarations
    int lv_itAbility;
    string lv_ability;

    // Variable Initialization

    // Implementation
    auto068B7A70_ae = CatalogFieldValueCount(c_gameCatalogUnit, UnitGetType(lp_unit), "AbilArray", c_playerAny);
    lv_itAbility = 1;
    for ( ; lv_itAbility <= auto068B7A70_ae ; lv_itAbility += 1 ) {
        lv_ability = (CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_unit), "AbilArray[" + IntToString(lv_itAbility) + "].Link", c_playerAny));
        if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_ArenaMode)) {
            UnitAbilitySetRequiredRegion(lp_unit, lv_ability, lp_region, "");
        }

        if (((CatalogFieldValueGet(c_gameCatalogAbil, lv_ability, "AbilityCategories[TargetAcrossMapPlane]", c_playerAny) == "1") || ((lv_ability == "AbathurToxicNest") && (PlayerHasTalent(UnitGetOwner(lp_unit), "AbathurMasteryBallistospores") == true)))) {
        }
        else {
            UnitAbilitySetRequiredRegion(lp_unit, lv_ability, lp_region, "");
        }
    }
}

void libMapM_gf_MMRavenCurseAddTributeSpawnLocation (point lp_spawnLocation) {
    // Implementation
    if ((libMapM_gv_mMRavenTributeSpawnPointsCount >= libMapM_gv_mMRavenTributeSpawnPointsCountMax_C)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_MapM_55A9F5EA"), true);
        return ;
    }

    libMapM_gv_mMRavenTributeSpawnPointsCount += 1;
    libMapM_gv_mMRavenTributeSpawnPoints[libMapM_gv_mMRavenTributeSpawnPointsCount] = lp_spawnLocation;
}

bool libMapM_gf_MMRavenCurseStarted () {
    // Implementation
    return (libMapM_gv_mMRavenTeamStats[1].lv_cursed || libMapM_gv_mMRavenTeamStats[2].lv_cursed);
}

fixed libMapM_gf_MMRavenStartTime () {
    // Implementation
    return libMapM_gv_mMRavenStartTime;
}

fixed libMapM_gf_MMRavenTributeSpawnTime () {
    // Implementation
    return libMapM_gv_mMRavenTributeSpawnTime_C;
}

int libMapM_gf_MMRavenTributeThresholdAmount () {
    // Implementation
    return libMapM_gv_mMRavenTributeThreshold_C;
}

string libMapM_gf_MMRavenTributeUnitType () {
    // Implementation
    return "RavenLordTribute";
}

point libMapM_gf_MMRavenRandomSpawnPoint () {
    int auto3F8AF97C_ae;
    int auto3F8AF97C_ai;

    // Variable Declarations
    int lv_spawnIndex;
    int[libMapM_gv_mMRavenTributeSpawnPointsCountMax_C + 1] lv_availableSpawnPointIndex;
    int lv_availableSpawnPointsCount;
    int lv_index;
    int lv_sideIndex1;
    int lv_sideIndex2;
    int lv_sideIndex;
    bool lv_pointGood;
    int lv_firstPointIndex;

    // Variable Initialization

    // Implementation
    if ((libMapM_gv_mMRavenTributeSpawnPointsCount < 1)) {
        return null;
    }

    lv_sideIndex1 = libMapM_gf_MMRavenSpawnPointSide(libMapM_gv_mMRavenLastTributeSpawnIndex1);
    lv_sideIndex2 = libMapM_gf_MMRavenSpawnPointSide(libMapM_gv_mMRavenLastTributeSpawnIndex2);
    auto3F8AF97C_ae = libMapM_gv_mMRavenTributeSpawnPointsCount;
    auto3F8AF97C_ai = 1;
    lv_index = 1;
    for ( ; ( (auto3F8AF97C_ai >= 0 && lv_index <= auto3F8AF97C_ae) || (auto3F8AF97C_ai <= 0 && lv_index >= auto3F8AF97C_ae) ) ; lv_index += auto3F8AF97C_ai ) {
        if ((lv_index != libMapM_gv_mMRavenLastTributeSpawnIndex1) && (!(((libMapM_gv_mMRavenLastTributeSpawnIndex1 > 0) && (libMapM_gv_mMRavenLastTributeSpawnIndex2 > 0) && (ModI(libMapM_gv_mMRavenLastTributeSpawnIndex1, 2) == ModI(libMapM_gv_mMRavenLastTributeSpawnIndex2, 2)) && (ModI(lv_index, 2) == ModI(libMapM_gv_mMRavenLastTributeSpawnIndex1, 2)))))) {
            lv_pointGood = false;
            lv_sideIndex = libMapM_gf_MMRavenSpawnPointSide(lv_index);
            if ((libMapM_gv_mMRavenLastTributeSpawnIndex1 == 0)) {
                if (((lv_index == 1) || (lv_index == 2))) {
                    lv_pointGood = true;
                }

            }
            else if ((libMapM_gv_mMRavenLastTributeSpawnIndex2 == 0)) {
                if ((lv_sideIndex != lv_sideIndex1)) {
                    lv_pointGood = true;
                }

            }
            else if ((libMapM_gv_mMRavenTributeSpawnGroupIndex == 0)) {
                lv_pointGood = true;
            }
            else if ((libMapM_gv_mMRavenTributeSpawnGroupIndex == 1)) {
                if ((lv_sideIndex != lv_sideIndex1)) {
                    lv_pointGood = true;
                }

            }
            else if ((libMapM_gv_mMRavenTributeSpawnGroupIndex == 2)) {
                if ((lv_sideIndex != lv_sideIndex1) && (lv_sideIndex != lv_sideIndex2)) {
                    lv_pointGood = true;
                }

            }
            if ((lv_pointGood == true)) {
                lv_availableSpawnPointsCount += 1;
                lv_availableSpawnPointIndex[lv_availableSpawnPointsCount] = lv_index;
            }

        }

    }
    libMapM_gv_mMRavenLastTributeSpawnIndex2 = libMapM_gv_mMRavenLastTributeSpawnIndex1;
    libMapM_gv_mMRavenLastTributeSpawnIndex1 = lv_availableSpawnPointIndex[RandomInt(1, lv_availableSpawnPointsCount)];
    libMapM_gv_mMRavenTributeSpawnGroupIndex += 1;
    if ((libMapM_gv_mMRavenTributeSpawnGroupIndex == 3)) {
        libMapM_gv_mMRavenTributeSpawnGroupIndex = 0;
    }

    return libMapM_gv_mMRavenTributeSpawnPoints[libMapM_gv_mMRavenLastTributeSpawnIndex1];
}

int libMapM_gf_MMRavenSpawnPointSide (int lp_index) {
    // Implementation
    if (((lp_index == 1) || (lp_index == 2))) {
        return 0;
    }
    else if (((lp_index == 4) || (lp_index == 5))) {
        return 1;
    }
    else if (((lp_index == 3) || (lp_index == 6))) {
        return 2;
    }
    return 0;
}

void libMapM_gf_MMRavenStartSpawnTimer5090 () {
    // Variable Declarations
    fixed lv_spawnTime;

    // Variable Initialization

    // Implementation
    if ((libMapM_gv_mMRavenUseManualTributeSpawns == false)) {
        lv_spawnTime = (libMapM_gv_mMRavenTributeSpawnTime_C + RandomFixed((libMapM_gv_mMRavenTributeSpawnTimeVariance * -1), libMapM_gv_mMRavenTributeSpawnTimeVariance));
        TimerStart(libMapM_gv_mMRavenWarningTimer, (lv_spawnTime - libMapM_gv_mMRavenSpawnWarningTimerTime_C), false, c_timeGame);
    }

}

trigger auto_libMapM_gf_MMRavenSpawnRevealeratTribute_Trigger = null;
unit auto_libMapM_gf_MMRavenSpawnRevealeratTribute_lp_tributeWarningUnit;

void libMapM_gf_MMRavenSpawnRevealeratTribute (unit lp_tributeWarningUnit) {
    auto_libMapM_gf_MMRavenSpawnRevealeratTribute_lp_tributeWarningUnit = lp_tributeWarningUnit;

    if (auto_libMapM_gf_MMRavenSpawnRevealeratTribute_Trigger == null) {
        auto_libMapM_gf_MMRavenSpawnRevealeratTribute_Trigger = TriggerCreate("auto_libMapM_gf_MMRavenSpawnRevealeratTribute_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMRavenSpawnRevealeratTribute_Trigger, false, false);
}

bool auto_libMapM_gf_MMRavenSpawnRevealeratTribute_TriggerFunc (bool testConds, bool runActions) {
    unit lp_tributeWarningUnit = auto_libMapM_gf_MMRavenSpawnRevealeratTribute_lp_tributeWarningUnit;

    // Variable Declarations
    revealer lv_orderRevealer;
    revealer lv_chaosRevealer;
    point lv_revealedPoint;
    unit lv_tributeUnit;

    // Variable Initialization
    lv_revealedPoint = UnitGetPosition(lp_tributeWarningUnit);

    // Implementation
    VisRevealerCreate(libCore_gv_cOMPUTER_TeamOrder, RegionCircle(lv_revealedPoint, libMapM_gv_mMRavenRevealRadius_C));
    lv_orderRevealer = VisRevealerLastCreated();
    VisRevealerCreate(libCore_gv_cOMPUTER_TeamChaos, RegionCircle(lv_revealedPoint, libMapM_gv_mMRavenRevealRadius_C));
    lv_chaosRevealer = VisRevealerLastCreated();
    while (!((UnitIsAlive(lp_tributeWarningUnit) == false))) {
        Wait(1.0, c_timeGame);
    }
    Wait(2.0, c_timeGame);
    lv_tributeUnit = UnitGroupUnit(UnitGroup("RavenLordTribute", c_playerAny, RegionCircle(lv_revealedPoint, 1.0), UnitFilter(0, 0, 0, 0), 1), 1);
    while (!((UnitIsAlive(lv_tributeUnit) == false))) {
        Wait(0.5, c_timeGame);
    }
    VisRevealerDestroy(lv_orderRevealer);
    VisRevealerDestroy(lv_chaosRevealer);
    return true;
}

void libMapM_gf_MMRavenTributeCollectionThresholdReached (int lp_winningTeam) {
    // Implementation
    if ((lp_winningTeam == libGame_gf_TeamNumberOfPlayer(libCore_gv_cOMPUTER_TeamOrder))) {
        libMapM_gf_MMRavenCurseStart(libCore_gv_cOMPUTER_TeamChaos);
    }
    else {
        libMapM_gf_MMRavenCurseStart(libCore_gv_cOMPUTER_TeamOrder);
    }
}

void libMapM_gf_MMRavenCurseStart (int lp_cursedPlayer) {
    int auto1E839FCC_ae;
    int auto1E839FCC_ai;
    int autoCEB3961F_ae;
    int autoCEB3961F_ai;

    // Variable Declarations
    int lv_itPlayer;
    int lv_index;
    int lv_cursedTeam;
    int lv_enemyTeam;
    int lv_townIndex;
    int lv_structureIndex;
    unit lv_structureUnit;

    // Variable Initialization

    // Implementation
    lv_cursedTeam = libGame_gf_TeamNumberOfPlayer(lp_cursedPlayer);
    lv_enemyTeam = libGame_gf_EnemyTeam(lv_cursedTeam);
    libMapM_gf_MMRavenPlayCurseSound(lv_cursedTeam);
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_RavenKing_Cursed", PlayerGroupAll());
    libGame_gf_SendEventMapCursedHollowCurseStarts(lv_enemyTeam);
    ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal MM1On");
    ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal RainOn");
    libGame_gv_teams[lv_enemyTeam].lv_map_CursesPlacedOnEnemyTeam += 1;
    StatEventCreate("RavenCurseActivated");
    StatEventAddDataInt(StatEventLastCreated(), "Event", (libGame_gv_teams[1].lv_map_CursesPlacedOnEnemyTeam + libGame_gv_teams[2].lv_map_CursesPlacedOnEnemyTeam));
    StatEventAddDataFixed(StatEventLastCreated(), "TeamID", lv_enemyTeam);
    StatEventAddDataInt(StatEventLastCreated(), "TeamScore", libMapM_gv_mMRavenTeamStats[lv_enemyTeam].lv_triburteCollected);
    StatEventAddDataInt(StatEventLastCreated(), "OpponentScore", libMapM_gv_mMRavenTeamStats[lv_cursedTeam].lv_triburteCollected);
    StatEventSend(StatEventLastCreated());
    libMapM_gf_PreCurseSiegeDamageCache(lv_enemyTeam);
    libMapM_gv_mMRavenTeamStats[libGame_gf_TeamNumberOfPlayer(lp_cursedPlayer)].lv_cursed = true;
    auto1E839FCC_ae = libGame_gv_townTownCount;
    auto1E839FCC_ai = 1;
    lv_townIndex = 1;
    for ( ; ( (auto1E839FCC_ai >= 0 && lv_townIndex <= auto1E839FCC_ae) || (auto1E839FCC_ai <= 0 && lv_townIndex >= auto1E839FCC_ae) ) ; lv_townIndex += auto1E839FCC_ai ) {
        if ((libGame_gv_townTownData[lv_townIndex].lv_owner == lp_cursedPlayer)) {
            autoCEB3961F_ae = libGame_gv_townTownData[lv_townIndex].lv_structureCount;
            autoCEB3961F_ai = 1;
            lv_structureIndex = 1;
            for ( ; ( (autoCEB3961F_ai >= 0 && lv_structureIndex <= autoCEB3961F_ae) || (autoCEB3961F_ai <= 0 && lv_structureIndex >= autoCEB3961F_ae) ) ; lv_structureIndex += autoCEB3961F_ai ) {
                lv_structureUnit = libGame_gv_townTownData[lv_townIndex].lv_structureUnits[lv_structureIndex];
                if ((UnitIsAlive(libGame_gv_townTownData[lv_townIndex].lv_structureUnits[lv_structureIndex]) == true) && ((libGame_gf_TownGetTownStructurePresetFromUnit(libGame_gv_townTownData[lv_townIndex].lv_structureUnits[lv_structureIndex]) == libGame_ge_TownStructureTypes_TownHall) || (libGame_gf_TownGetTownStructurePresetFromUnit(libGame_gv_townTownData[lv_townIndex].lv_structureUnits[lv_structureIndex]) == libGame_ge_TownStructureTypes_CannonTower) || (libGame_gf_TownGetTownStructurePresetFromUnit(libGame_gv_townTownData[lv_townIndex].lv_structureUnits[lv_structureIndex]) == libGame_ge_TownStructureTypes_Gate))) {
                    UnitBehaviorAdd(lv_structureUnit, "RavenLordsCurseStructures", lv_structureUnit, 1);
                    UnitBehaviorSetDuration(lv_structureUnit, "RavenLordsCurseStructures", libMapM_gv_mMRavenCurseDuration_C);
                    UnitBehaviorAdd(lv_structureUnit, "RavenLordsCurseStructuresWarning", lv_structureUnit, 1);
                    UnitBehaviorSetDuration(lv_structureUnit, "RavenLordsCurseStructuresWarning", (libMapM_gv_mMRavenCurseDuration_C - 5.0));
                }

            }
        }

    }
    UnitGroupLoopBegin(UnitGroup(null, lp_cursedPlayer, RegionEntireMap(), libCore_gv_filtersMinionsTownMinions, 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libMapM_gf_MMRavenApplyCurseEffectOnMinion(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    TriggerExecute(libMapM_gt_MMRavenCurseStartLightTransition, true, false);
    TimerStart(libMapM_gv_mMRavenCurseTimer, libMapM_gv_mMRavenCurseDuration_C, false, c_timeGame);
}

void libMapM_gf_MMRavenApplyCurseEffectOnMinion (unit lp_unit) {
    // Implementation
    UnitBehaviorAdd(lp_unit, "RavenLordsCurseUnits", lp_unit, 1);
    UnitSetPropertyFixed(lp_unit, c_unitPropLife, 1.0);
    libNtve_gf_SendActorMessageToUnit(lp_unit, "SetTintColor 207,159,255");
}

void libMapM_gf_MMRavenRemoveCurseEffectOnMinion (unit lp_minion) {
    // Implementation
    if ((UnitIsAlive(lp_minion) == false)) {
        return ;
    }

    UnitSetPropertyFixed(lp_minion, c_unitPropLifePercent, 100.0);
    UnitBehaviorRemove(lp_minion, "RavenLordsCurseUnits", 1);
    libNtve_gf_SendActorMessageToUnit(lp_minion, "SetTintColor 255,255,255");
}

trigger auto_libMapM_gf_MMRavenPlayCurseSound_Trigger = null;
int auto_libMapM_gf_MMRavenPlayCurseSound_lp_cursedTeam;

void libMapM_gf_MMRavenPlayCurseSound (int lp_cursedTeam) {
    auto_libMapM_gf_MMRavenPlayCurseSound_lp_cursedTeam = lp_cursedTeam;

    if (auto_libMapM_gf_MMRavenPlayCurseSound_Trigger == null) {
        auto_libMapM_gf_MMRavenPlayCurseSound_Trigger = TriggerCreate("auto_libMapM_gf_MMRavenPlayCurseSound_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMRavenPlayCurseSound_Trigger, false, false);
}

bool auto_libMapM_gf_MMRavenPlayCurseSound_TriggerFunc (bool testConds, bool runActions) {
    int lp_cursedTeam = auto_libMapM_gf_MMRavenPlayCurseSound_lp_cursedTeam;

    // Variable Declarations
    int lv_enemyTeam;

    // Variable Initialization

    // Implementation
    SoundPlayForPlayer(SoundLink("Event_RavenCurse_CurseStart", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_RavenCurse_CurseMid", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libMapM_gv_mMRavenCurseSound = SoundLastPlayed();
    Wait(2.0, c_timeReal);
    lv_enemyTeam = libGame_gf_EnemyTeam(lp_cursedTeam);
    libMapM_gf_MMRavenTransmissionCurseActiveQ(lp_cursedTeam);
    return true;
}

void libMapM_gf_MMRavenObjectiveUIUpdateText () {
    // Variable Declarations
    int lv_indexTeam;
    int lv_indexTeamEnemy;

    // Variable Initialization

    // Implementation
    libUIUI_gf_MapMechanicsRavenCourtSetTributeCountForTeam(libMapM_gv_mMRavenTeamStats[libGame_gv_teamOrderIndex_C].lv_triburteCollected, libGame_gv_teamOrderIndex_C);
    libUIUI_gf_MapMechanicsRavenCourtSetTributeCountForTeam(libMapM_gv_mMRavenTeamStats[libGame_gv_teamChaosIndex_C].lv_triburteCollected, libGame_gv_teamChaosIndex_C);
}

void libMapM_gf_PreCurseSiegeDamageCache (int lp_cursingTeam) {
    int autoEDD9318E_ae;

    // Variable Declarations
    int lv_iterator;

    // Variable Initialization

    // Implementation
    autoEDD9318E_ae = libCore_gv_bALMaxPlayers;
    lv_iterator = 1;
    for ( ; lv_iterator <= autoEDD9318E_ae ; lv_iterator += 1 ) {
        if ((libGame_gf_TeamNumberOfPlayer(lv_iterator) == lp_cursingTeam)) {
            libMapM_gv_siegeDamagePreCurse[lv_iterator] = PlayerScoreValueGetAsFixed(lv_iterator, "SiegeDamage");
        }

    }
}

void libMapM_gf_CalculateCurseSiegeDamageDone (int lp_cursingTeam) {
    int autoC675CD57_ae;

    // Variable Declarations
    int lv_iterator;

    // Variable Initialization

    // Implementation
    autoC675CD57_ae = libCore_gv_bALMaxPlayers;
    lv_iterator = 1;
    for ( ; lv_iterator <= autoC675CD57_ae ; lv_iterator += 1 ) {
        if ((libGame_gf_TeamNumberOfPlayer(lv_iterator) == lp_cursingTeam)) {
            libMapM_gv_totalCurseSiegeDamage[lv_iterator] = (libMapM_gv_totalCurseSiegeDamage[lv_iterator] + (PlayerScoreValueGetAsFixed(lv_iterator, "SiegeDamage") - libMapM_gv_siegeDamagePreCurse[lv_iterator]));
            libGame_gf_ScoreValuesReportRealValueAndLog(lv_iterator, "CurseDamageDone", libMapM_gv_totalCurseSiegeDamage[lv_iterator]);
            libGame_gf_SendMapSpecificAwardEvent(lv_iterator, libMapM_gv_totalCurseSiegeDamage[lv_iterator], false);
        }

    }
}

void libMapM_gf_PauseUnpauseCurseHollowTimers (bool lp_pauseUnpause) {
    int auto23602211_ae;
    int auto23602211_ai;
    int auto62E41E9B_ae;
    int auto62E41E9B_ai;

    // Variable Declarations
    int lv_itIndex;

    // Variable Initialization

    // Implementation
    if ((lp_pauseUnpause == libMapM_gv_mMRavenTimers2)) {
        return ;
    }

    libMapM_gv_mMRavenTimers2 = lp_pauseUnpause;
    libMapM_gv_mMRavenTimers[1] = libMapM_gv_mMRavenStartTimer;
    libMapM_gv_mMRavenTimers[2] = libMapM_gv_mMRavenTributeSpawnTimer;
    libMapM_gv_mMRavenTimers[3] = libMapM_gv_mMRavenWarningTimer;
    libMapM_gv_mMRavenTimers[4] = libMapM_gv_mMRavenCurseTimer;
    libMapM_gv_mMRavenTimerCount = 4;
    if ((lp_pauseUnpause == true)) {
        auto62E41E9B_ae = libMapM_gv_mMRavenTimerCount;
        auto62E41E9B_ai = 1;
        lv_itIndex = 1;
        for ( ; ( (auto62E41E9B_ai >= 0 && lv_itIndex <= auto62E41E9B_ae) || (auto62E41E9B_ai <= 0 && lv_itIndex >= auto62E41E9B_ae) ) ; lv_itIndex += auto62E41E9B_ai ) {
            if ((TimerIsPaused(libMapM_gv_mMRavenTimers[lv_itIndex]) == false) && (TimerGetRemaining(libMapM_gv_mMRavenTimers[lv_itIndex]) > 0.0)) {
                libMapM_gv_mMRavenTimers3[lv_itIndex] = true;
                TimerPause(libMapM_gv_mMRavenTimers[lv_itIndex], true);
            }
            else {
                libMapM_gv_mMRavenTimers3[lv_itIndex] = false;
            }
        }
    }
    else {
        auto23602211_ae = libMapM_gv_mMRavenTimerCount;
        auto23602211_ai = 1;
        lv_itIndex = 1;
        for ( ; ( (auto23602211_ai >= 0 && lv_itIndex <= auto23602211_ae) || (auto23602211_ai <= 0 && lv_itIndex >= auto23602211_ae) ) ; lv_itIndex += auto23602211_ai ) {
            if ((libMapM_gv_mMRavenTimers3[lv_itIndex] == true)) {
                TimerPause(libMapM_gv_mMRavenTimers[lv_itIndex], false);
                libMapM_gv_mMRavenTimers3[lv_itIndex] = false;
            }

        }
    }
}

trigger auto_libMapM_gf_MMRavenTransmissionFirstEventStartQ_Trigger = null;

void libMapM_gf_MMRavenTransmissionFirstEventStartQ () {
    if (auto_libMapM_gf_MMRavenTransmissionFirstEventStartQ_Trigger == null) {
        auto_libMapM_gf_MMRavenTransmissionFirstEventStartQ_Trigger = TriggerCreate("auto_libMapM_gf_MMRavenTransmissionFirstEventStartQ_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMRavenTransmissionFirstEventStartQ_Trigger, false, false);
}

bool auto_libMapM_gf_MMRavenTransmissionFirstEventStartQ_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    UserDataSetInt("MapVOEvent", "Raven - Event First", "Value", 1, 1);
    ConversationDataRun("CursedHollow", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMapM_gf_MMRavenTransmissionRepeatEventStartQ_Trigger = null;

void libMapM_gf_MMRavenTransmissionRepeatEventStartQ () {
    if (auto_libMapM_gf_MMRavenTransmissionRepeatEventStartQ_Trigger == null) {
        auto_libMapM_gf_MMRavenTransmissionRepeatEventStartQ_Trigger = TriggerCreate("auto_libMapM_gf_MMRavenTransmissionRepeatEventStartQ_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMRavenTransmissionRepeatEventStartQ_Trigger, false, false);
}

bool auto_libMapM_gf_MMRavenTransmissionRepeatEventStartQ_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    UserDataSetInt("MapVOEvent", "Raven - Event Repeat", "Value", 1, 1);
    ConversationDataRun("CursedHollow", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMapM_gf_MMRavenTransmissionCurseActiveQ_Trigger = null;
int auto_libMapM_gf_MMRavenTransmissionCurseActiveQ_lp_cursedTeam;

void libMapM_gf_MMRavenTransmissionCurseActiveQ (int lp_cursedTeam) {
    auto_libMapM_gf_MMRavenTransmissionCurseActiveQ_lp_cursedTeam = lp_cursedTeam;

    if (auto_libMapM_gf_MMRavenTransmissionCurseActiveQ_Trigger == null) {
        auto_libMapM_gf_MMRavenTransmissionCurseActiveQ_Trigger = TriggerCreate("auto_libMapM_gf_MMRavenTransmissionCurseActiveQ_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMRavenTransmissionCurseActiveQ_Trigger, false, false);
}

bool auto_libMapM_gf_MMRavenTransmissionCurseActiveQ_TriggerFunc (bool testConds, bool runActions) {
    int lp_cursedTeam = auto_libMapM_gf_MMRavenTransmissionCurseActiveQ_lp_cursedTeam;

    // Variable Declarations
    playergroup lv_orderPlayerGroup;
    playergroup lv_chaosPlayerGroup;
    playergroup lv_observerPlayer;

    // Variable Initialization
    lv_orderPlayerGroup = PlayerGroupEmpty();
    lv_chaosPlayerGroup = PlayerGroupEmpty();
    lv_observerPlayer = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("CursedHollow", ("Left"));
    ConversationDataLineResetPlayers("CursedHollow", ("Right"));
    ConversationDataLineResetPlayers("CursedHollow", ("Observer"));
    if ((lp_cursedTeam == libGame_gv_teamOrderIndex_C)) {
        UserDataSetInt("MapVOEvent", "Raven - Left Team Cursed", "Value", 1, 1);
    }
    else {
        UserDataSetInt("MapVOEvent", "Raven - Right Team Cursed", "Value", 1, 1);
    }
    lv_orderPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_chaosPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_observerPlayer = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("CursedHollow", ("Left"), lv_orderPlayerGroup);
    ConversationDataLineSetPlayers("CursedHollow", ("Right"), lv_chaosPlayerGroup);
    ConversationDataLineSetPlayers("CursedHollow", ("Observer"), lv_observerPlayer);
    ConversationDataRun("CursedHollow", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMapM_gf_MMRavenTransmissionCurseEndsQ_Trigger = null;

void libMapM_gf_MMRavenTransmissionCurseEndsQ () {
    if (auto_libMapM_gf_MMRavenTransmissionCurseEndsQ_Trigger == null) {
        auto_libMapM_gf_MMRavenTransmissionCurseEndsQ_Trigger = TriggerCreate("auto_libMapM_gf_MMRavenTransmissionCurseEndsQ_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMRavenTransmissionCurseEndsQ_Trigger, false, false);
}

bool auto_libMapM_gf_MMRavenTransmissionCurseEndsQ_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    UserDataSetInt("MapVOEvent", "Raven - Curse Ends", "Value", 1, 1);
    ConversationDataRun("CursedHollow", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMapM_gf_MMGardensDragonInitTowers_Trigger = null;
unit auto_libMapM_gf_MMGardensDragonInitTowers_lp_towerMoon;
unit auto_libMapM_gf_MMGardensDragonInitTowers_lp_towerStar;

void libMapM_gf_MMGardensDragonInitTowers (unit lp_towerMoon, unit lp_towerStar) {
    auto_libMapM_gf_MMGardensDragonInitTowers_lp_towerMoon = lp_towerMoon;
    auto_libMapM_gf_MMGardensDragonInitTowers_lp_towerStar = lp_towerStar;

    if (auto_libMapM_gf_MMGardensDragonInitTowers_Trigger == null) {
        auto_libMapM_gf_MMGardensDragonInitTowers_Trigger = TriggerCreate("auto_libMapM_gf_MMGardensDragonInitTowers_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMGardensDragonInitTowers_Trigger, false, false);
}

bool auto_libMapM_gf_MMGardensDragonInitTowers_TriggerFunc (bool testConds, bool runActions) {
    unit lp_towerMoon = auto_libMapM_gf_MMGardensDragonInitTowers_lp_towerMoon;
    unit lp_towerStar = auto_libMapM_gf_MMGardensDragonInitTowers_lp_towerStar;

    unitgroup auto8A56646F_g;
    int auto8A56646F_u;
    playergroup autoAFCA884A_g;
    int autoAFCA884A_p;
    unitgroup auto254889A9_g;
    int auto254889A9_u;
    unitgroup auto4ED31F5E_g;
    int auto4ED31F5E_u;
    playergroup auto3D9EC4D4_g;
    int auto3D9EC4D4_p;
    unitgroup autoC3C6CAFA_g;
    int autoC3C6CAFA_u;
    playergroup autoAB2D3B75_g;
    int autoAB2D3B75_p;
    playergroup auto2BE87695_g;
    int auto2BE87695_p;

    // Variable Declarations
    unit lv_u;
    unit lv_utarget;
    int lv_player;
    fixed lv_beam_fulldistance;
    fixed lv_beam_count;
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    libMapM_gv_mMGardensDragonTowerMoon = lp_towerMoon;
    libMapM_gv_mMGardensDragonTowerStar = lp_towerStar;
    UnitGroupLoopBegin(UnitGroup("VehicleDragon", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libMapM_gv_mMGardensDragonDragonKnightRespawnPoint = UnitGetPosition(UnitGroupLoopCurrent());
        libMapM_gv_mMGardensDragonStatue = UnitGroupLoopCurrent();
        UnitSetState(libMapM_gv_mMGardensDragonStatue, c_unitStateStatusBar, false);
    }
    UnitGroupLoopEnd();
    auto8A56646F_g = UnitGroup("DragonShireShrineSun", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto8A56646F_u = 1;
    for ( ; auto8A56646F_u <= UnitGroupCount(auto8A56646F_g, c_unitCountAll) ; auto8A56646F_u += (lv_u == UnitGroupUnit(auto8A56646F_g, auto8A56646F_u)) ) {
        lv_u = UnitGroupUnit(auto8A56646F_g, auto8A56646F_u);
        libMapM_gv_mMGardensDragonDragonTowerCount += 1;
        libMapM_gv_mMGardensDragonDragonTowers[libMapM_gv_mMGardensDragonDragonTowerCount].lv_shrineUnit = lv_u;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DragonballCaptureBeacon", c_unitCreateIgnorePlacement, UnitGetOwner(lv_u), UnitGetPosition(lv_u));
        libGame_gf_CapturePointCreate(UnitLastCreated(), libMapM_gv_mMGardensDragonDragonballTowerCaptureRadius_C, libMapM_gv_mMGardensDragonDragonTowerCaptureTime_C, libMapM_gv_mMGardensDragonDragonTowerOverCaptureTime_C, libGame_ge_CapturePointDecay_DoNotDecay, libGame_ge_CapturePointDecay_Owner, true);
        libMapM_gv_mMGardensDragonDragonTowers[libMapM_gv_mMGardensDragonDragonTowerCount].lv_captureBeaconIndex = libGame_gf_LastCreatedCapturePoint();
        libGame_gf_CapturePointDisable(libMapM_gv_mMGardensDragonDragonTowers[libMapM_gv_mMGardensDragonDragonTowerCount].lv_captureBeaconIndex);
        autoAFCA884A_g = PlayerGroupAll(); 
        autoAFCA884A_p = 1;
        for ( ; autoAFCA884A_p <= PlayerGroupCount(autoAFCA884A_g) ; autoAFCA884A_p += (lv_player == PlayerGroupPlayer(autoAFCA884A_g, autoAFCA884A_p)) ) {
            lv_player = PlayerGroupPlayer(autoAFCA884A_g, autoAFCA884A_p);
            VisRevealArea(lv_player, RegionCircle(UnitGetPosition(lv_u), 0.75), 0.125, false);
        }
        auto254889A9_g = UnitGroup("GardensDragonShrineTargetSun", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
        auto254889A9_u = 1;
        for ( ; auto254889A9_u <= UnitGroupCount(auto254889A9_g, c_unitCountAll) ; auto254889A9_u += (lv_utarget == UnitGroupUnit(auto254889A9_g, auto254889A9_u)) ) {
            lv_utarget = UnitGroupUnit(auto254889A9_g, auto254889A9_u);
            libMapM_gv_mMGardensDragonDragonTowers[libMapM_gv_mMGardensDragonDragonTowerCount].lv_shrineBeamTargetUnit = lv_utarget;
        }
        libMapM_gv_mMGardensDragonSoundRegion = RegionCircle(UnitGetPosition(lv_u), 1.0);
        lv_beam_count = 0.0;
        lv_beam_fulldistance = DistanceBetweenPoints(UnitGetPosition(lv_u), UnitGetPosition(lv_utarget));
        while ((lv_beam_count < lv_beam_fulldistance)) {
            lv_beam_count += 1.0;
            RegionAddCircle(libMapM_gv_mMGardensDragonSoundRegion, true, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_u), lv_beam_count, UnitGetPosition(lv_utarget)), 1.0);
        }
    }
    auto4ED31F5E_g = UnitGroup("DragonShireShrineMoon", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
    auto4ED31F5E_u = 1;
    for ( ; auto4ED31F5E_u <= UnitGroupCount(auto4ED31F5E_g, c_unitCountAll) ; auto4ED31F5E_u += (lv_u == UnitGroupUnit(auto4ED31F5E_g, auto4ED31F5E_u)) ) {
        lv_u = UnitGroupUnit(auto4ED31F5E_g, auto4ED31F5E_u);
        libMapM_gv_mMGardensDragonDragonTowerCount += 1;
        libMapM_gv_mMGardensDragonDragonTowers[libMapM_gv_mMGardensDragonDragonTowerCount].lv_shrineUnit = lv_u;
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "DragonballCaptureBeacon", c_unitCreateIgnorePlacement, UnitGetOwner(lv_u), UnitGetPosition(lv_u));
        libGame_gf_CapturePointCreate(UnitLastCreated(), libMapM_gv_mMGardensDragonDragonballTowerCaptureRadius_C, libMapM_gv_mMGardensDragonDragonTowerCaptureTime_C, libMapM_gv_mMGardensDragonDragonTowerOverCaptureTime_C, libGame_ge_CapturePointDecay_DoNotDecay, libGame_ge_CapturePointDecay_Owner, true);
        libMapM_gv_mMGardensDragonDragonTowers[libMapM_gv_mMGardensDragonDragonTowerCount].lv_captureBeaconIndex = libGame_gf_LastCreatedCapturePoint();
        libGame_gf_CapturePointDisable(libMapM_gv_mMGardensDragonDragonTowers[libMapM_gv_mMGardensDragonDragonTowerCount].lv_captureBeaconIndex);
        auto3D9EC4D4_g = PlayerGroupAll(); 
        auto3D9EC4D4_p = 1;
        for ( ; auto3D9EC4D4_p <= PlayerGroupCount(auto3D9EC4D4_g) ; auto3D9EC4D4_p += (lv_player == PlayerGroupPlayer(auto3D9EC4D4_g, auto3D9EC4D4_p)) ) {
            lv_player = PlayerGroupPlayer(auto3D9EC4D4_g, auto3D9EC4D4_p);
            VisRevealArea(lv_player, RegionCircle(UnitGetPosition(lv_u), 0.75), 0.125, false);
        }
        autoC3C6CAFA_g = UnitGroup("GardensDragonShrineTargetMoon", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1);
        autoC3C6CAFA_u = 1;
        for ( ; autoC3C6CAFA_u <= UnitGroupCount(autoC3C6CAFA_g, c_unitCountAll) ; autoC3C6CAFA_u += (lv_utarget == UnitGroupUnit(autoC3C6CAFA_g, autoC3C6CAFA_u)) ) {
            lv_utarget = UnitGroupUnit(autoC3C6CAFA_g, autoC3C6CAFA_u);
            libMapM_gv_mMGardensDragonDragonTowers[libMapM_gv_mMGardensDragonDragonTowerCount].lv_shrineBeamTargetUnit = lv_utarget;
        }
        lv_beam_count = 0.0;
        lv_beam_fulldistance = DistanceBetweenPoints(UnitGetPosition(lv_u), UnitGetPosition(lv_utarget));
        while ((lv_beam_count < lv_beam_fulldistance)) {
            lv_beam_count += 1.0;
            RegionAddCircle(libMapM_gv_mMGardensDragonSoundRegion, true, libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(lv_u), lv_beam_count, UnitGetPosition(lv_utarget)), 1.0);
        }
    }
    if ((StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "UseVehiclePersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", 0)) == 0.0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_MapM_8D3E1C40"), true);
        auto2BE87695_g = PlayerGroupAll(); 
        auto2BE87695_p = 1;
        for ( ; auto2BE87695_p <= PlayerGroupCount(auto2BE87695_g) ; auto2BE87695_p += (lv_itPlayer == PlayerGroupPlayer(auto2BE87695_g, auto2BE87695_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(auto2BE87695_g, auto2BE87695_p);
            CatalogFieldValueSet(c_gameCatalogEffect, "UseVehiclePersistent", "PeriodCount", lv_itPlayer, IntToString(FixedToInt((libMapM_gv_mMGardensDragonDragonStatueChannelTime_C / 0.125))));
        }
    }
    else {
        autoAB2D3B75_g = PlayerGroupAll(); 
        autoAB2D3B75_p = 1;
        for ( ; autoAB2D3B75_p <= PlayerGroupCount(autoAB2D3B75_g) ; autoAB2D3B75_p += (lv_itPlayer == PlayerGroupPlayer(autoAB2D3B75_g, autoAB2D3B75_p)) ) {
            lv_itPlayer = PlayerGroupPlayer(autoAB2D3B75_g, autoAB2D3B75_p);
            CatalogFieldValueSet(c_gameCatalogEffect, "UseVehiclePersistent", "PeriodCount", lv_itPlayer, IntToString(FixedToInt((libMapM_gv_mMGardensDragonDragonStatueChannelTime_C / StringToFixed(CatalogFieldValueGet(c_gameCatalogEffect, "UseVehiclePersistent", "PeriodicPeriodArray[" + IntToString(0) + "]", 0))))));
        }
    }
    return true;
}

trigger auto_libMapM_gf_MMGardensDragonChangeDragonballTowerOwnership_Trigger = null;
int auto_libMapM_gf_MMGardensDragonChangeDragonballTowerOwnership_lp_dragonballTowerIndex;
int auto_libMapM_gf_MMGardensDragonChangeDragonballTowerOwnership_lp_newOwner;
playergroup auto_libMapM_gf_MMGardensDragonChangeDragonballTowerOwnership_lp_capturingPlayers;

void libMapM_gf_MMGardensDragonChangeDragonballTowerOwnership (int lp_dragonballTowerIndex, int lp_newOwner, playergroup lp_capturingPlayers) {
    auto_libMapM_gf_MMGardensDragonChangeDragonballTowerOwnership_lp_dragonballTowerIndex = lp_dragonballTowerIndex;
    auto_libMapM_gf_MMGardensDragonChangeDragonballTowerOwnership_lp_newOwner = lp_newOwner;
    auto_libMapM_gf_MMGardensDragonChangeDragonballTowerOwnership_lp_capturingPlayers = lp_capturingPlayers;

    if (auto_libMapM_gf_MMGardensDragonChangeDragonballTowerOwnership_Trigger == null) {
        auto_libMapM_gf_MMGardensDragonChangeDragonballTowerOwnership_Trigger = TriggerCreate("auto_libMapM_gf_MMGardensDragonChangeDragonballTowerOwnership_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMGardensDragonChangeDragonballTowerOwnership_Trigger, false, false);
}

bool auto_libMapM_gf_MMGardensDragonChangeDragonballTowerOwnership_TriggerFunc (bool testConds, bool runActions) {
    int lp_dragonballTowerIndex = auto_libMapM_gf_MMGardensDragonChangeDragonballTowerOwnership_lp_dragonballTowerIndex;
    int lp_newOwner = auto_libMapM_gf_MMGardensDragonChangeDragonballTowerOwnership_lp_newOwner;
    playergroup lp_capturingPlayers = auto_libMapM_gf_MMGardensDragonChangeDragonballTowerOwnership_lp_capturingPlayers;

    playergroup autoAAB21751_g;
    int autoAAB21751_p;

    // Variable Declarations
    int lv_player;
    unitgroup lv_pillarUnits;
    int lv_iterPlayer;

    // Variable Initialization
    lv_pillarUnits = UnitGroupEmpty();

    // Implementation
    if ((lp_newOwner == libCore_gv_cOMPUTER_Neutral)) {
        libNtve_gf_SendActorMessageToUnit(libMapM_gv_mMGardensDragonDragonTowers[lp_dragonballTowerIndex].lv_shrineUnit, "AnimBracketStop Capture");
    }
    else {
        libNtve_gf_SendActorMessageToUnit(libMapM_gv_mMGardensDragonDragonTowers[lp_dragonballTowerIndex].lv_shrineUnit, "AnimBracketStart Capture Stand,Work,Start Stand,Work Stand,Work,End");
    }
    UnitSetOwner(libMapM_gv_mMGardensDragonDragonTowers[lp_dragonballTowerIndex].lv_shrineUnit, lp_newOwner, true);
    libGame_gf_SendEventMapDragonShireObeliskOwnershipChange(lp_newOwner, libMapM_gv_mMGardensDragonDragonTowers[lp_dragonballTowerIndex].lv_shrineUnit, lp_capturingPlayers);
    ActorSend(libNtve_gf_MainActorofUnit(libMapM_gv_mMGardensDragonDragonTowers[lp_dragonballTowerIndex].lv_shrineUnit), "Signal ActiveSoundTog");
    TriggerExecute(libMapM_gt_MMGardensDragonDragonTowerCheckObeliskStatus, true, false);
    Wait(0.125, c_timeGame);
    autoAAB21751_g = PlayerGroupAll(); 
    autoAAB21751_p = 1;
    for ( ; autoAAB21751_p <= PlayerGroupCount(autoAAB21751_g) ; autoAAB21751_p += (lv_player == PlayerGroupPlayer(autoAAB21751_g, autoAAB21751_p)) ) {
        lv_player = PlayerGroupPlayer(autoAAB21751_g, autoAAB21751_p);
        VisRevealArea(lv_player, RegionCircle(UnitGetPosition(libMapM_gv_mMGardensDragonDragonTowers[lp_dragonballTowerIndex].lv_shrineUnit), 0.75), 0.125, false);
    }
    return true;
}

trigger auto_libMapM_gf_MMGardensDragonDeactivateStatue_Trigger = null;
int auto_libMapM_gf_MMGardensDragonDeactivateStatue_lp_team;

void libMapM_gf_MMGardensDragonDeactivateStatue (int lp_team) {
    auto_libMapM_gf_MMGardensDragonDeactivateStatue_lp_team = lp_team;

    if (auto_libMapM_gf_MMGardensDragonDeactivateStatue_Trigger == null) {
        auto_libMapM_gf_MMGardensDragonDeactivateStatue_Trigger = TriggerCreate("auto_libMapM_gf_MMGardensDragonDeactivateStatue_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMGardensDragonDeactivateStatue_Trigger, false, false);
}

bool auto_libMapM_gf_MMGardensDragonDeactivateStatue_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libMapM_gf_MMGardensDragonDeactivateStatue_lp_team;

    int autoCF060AB7_ae;
    int autoCF060AB7_ai;
    playergroup autoA4D903F6_g;
    int autoA4D903F6_p;

    // Variable Declarations
    int lv_player;
    int lv_towerIndex;

    // Variable Initialization

    // Implementation
    UnitSetOwner(libMapM_gv_mMGardensDragonStatue, 0, true);
    autoCF060AB7_ae = libMapM_gv_mMGardensDragonDragonTowerObeliskCount_C;
    autoCF060AB7_ai = 1;
    lv_towerIndex = 1;
    for ( ; ( (autoCF060AB7_ai >= 0 && lv_towerIndex <= autoCF060AB7_ae) || (autoCF060AB7_ai <= 0 && lv_towerIndex >= autoCF060AB7_ae) ) ; lv_towerIndex += autoCF060AB7_ai ) {
        UnitIssueOrder(libMapM_gv_mMGardensDragonDragonTowers[lv_towerIndex].lv_shrineUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }
    ActorScopeSend(ActorScopeFromActor(libMapM_gv_mMGardensDragonSoundRegionActor), "Signal StopSound");
    ActorRegionCreate(null, "DragonBeamEndRegion", libMapM_gv_mMGardensDragonSoundRegion);
    UnitBehaviorRemove(libMapM_gv_mMGardensDragonStatue, "GenericVehicleBehaviorEmpty", 1);
    UnitBehaviorAdd(libMapM_gv_mMGardensDragonStatue, "DragonShrineDeactivated", libMapM_gv_mMGardensDragonStatue, 1);
    UnitSetState(libMapM_gv_mMGardensDragonStatue, c_unitStateHighlightable, false);
    UnitSetState(libMapM_gv_mMGardensDragonStatue, c_unitStateTargetable, false);
    libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormWarning", UnitGetPosition(libMapM_gv_mMGardensDragonStatue), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 3.0);
    TextTagShow(libMapM_gv_mMGardensDragonStatueTextTag, PlayerGroupAll(), true);
    autoA4D903F6_g = libCore_gv_activeHumanPlayers; 
    autoA4D903F6_p = 1;
    for ( ; autoA4D903F6_p <= PlayerGroupCount(autoA4D903F6_g) ; autoA4D903F6_p += (lv_player == PlayerGroupPlayer(autoA4D903F6_g, autoA4D903F6_p)) ) {
        lv_player = PlayerGroupPlayer(autoA4D903F6_g, autoA4D903F6_p);
        if ((libMapM_gv_mapMechanicUsedTracker[lv_player].lv_dragonStatue == true)) {
            TextTagShow(libMapM_gv_mMGardensDragonStatueTextTag, libCore_gv_playerGroupFromPlayer[lv_player], false);
        }

    }
    TextTagShow(libMapM_gv_mMGardensDragonStatueTextTagAllyOwned, PlayerGroupAll(), false);
    TextTagShow(libMapM_gv_mMGardensDragonStatueTextTagEnemyOwned, PlayerGroupAll(), false);
    TextTagShow(libMapM_gv_mMGardensDragonStatueTextTag, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    TimerPause(libMapM_gv_mMGardensDragonDragonStatueActiveReminderTimer, true);
    return true;
}

trigger auto_libMapM_gf_MMGardensDragonActivateStatueForTeam_Trigger = null;
int auto_libMapM_gf_MMGardensDragonActivateStatueForTeam_lp_team;

void libMapM_gf_MMGardensDragonActivateStatueForTeam (int lp_team) {
    auto_libMapM_gf_MMGardensDragonActivateStatueForTeam_lp_team = lp_team;

    if (auto_libMapM_gf_MMGardensDragonActivateStatueForTeam_Trigger == null) {
        auto_libMapM_gf_MMGardensDragonActivateStatueForTeam_Trigger = TriggerCreate("auto_libMapM_gf_MMGardensDragonActivateStatueForTeam_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMGardensDragonActivateStatueForTeam_Trigger, false, false);
}

bool auto_libMapM_gf_MMGardensDragonActivateStatueForTeam_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libMapM_gf_MMGardensDragonActivateStatueForTeam_lp_team;

    int autoE85C092C_ae;
    int autoE85C092C_ai;
    playergroup auto57396F19_g;
    int auto57396F19_p;
    playergroup auto3B8E9622_g;
    int auto3B8E9622_p;
    playergroup autoA43C1C70_g;
    int autoA43C1C70_p;
    playergroup auto6728DB37_g;
    int auto6728DB37_p;

    // Variable Declarations
    int lv_camp;
    int lv_scalingcamp;
    int lv_defender;
    int lv_i;
    int lv_p;

    // Variable Initialization

    // Implementation
    UnitSetOwner(libMapM_gv_mMGardensDragonStatue, lp_team, true);
    autoE85C092C_ae = libMapM_gv_mMGardensDragonDragonTowerCount;
    autoE85C092C_ai = 1;
    lv_i = 1;
    for ( ; ( (autoE85C092C_ai >= 0 && lv_i <= autoE85C092C_ae) || (autoE85C092C_ai <= 0 && lv_i >= autoE85C092C_ae) ) ; lv_i += autoE85C092C_ai ) {
        UnitIssueOrder(libMapM_gv_mMGardensDragonDragonTowers[lv_i].lv_shrineUnit, OrderTargetingUnit(AbilityCommand("GardensObeliskActivate", 0), libMapM_gv_mMGardensDragonDragonTowers[lv_i].lv_shrineBeamTargetUnit), c_orderQueueReplace);
    }
    ActorRegionCreate(null, "DragonBeamStartRegion", libMapM_gv_mMGardensDragonSoundRegion);
    ActorRegionCreate(null, "DragonBeamLoopRegion", libMapM_gv_mMGardensDragonSoundRegion);
    libMapM_gv_mMGardensDragonSoundRegionActor = libNtve_gf_ActorLastCreated();
    UnitBehaviorAdd(libMapM_gv_mMGardensDragonStatue, "GenericVehicleBehaviorEmpty", libMapM_gv_mMGardensDragonStatue, 1);
    UnitBehaviorRemove(libMapM_gv_mMGardensDragonStatue, "DragonShrineDeactivated", 1);
    UnitSetState(libMapM_gv_mMGardensDragonStatue, c_unitStateHighlightable, true);
    auto57396F19_g = PlayerGroupAlliance(c_playerGroupAlly, lp_team); 
    auto57396F19_p = 1;
    for ( ; auto57396F19_p <= PlayerGroupCount(auto57396F19_g) ; auto57396F19_p += (lv_p == PlayerGroupPlayer(auto57396F19_g, auto57396F19_p)) ) {
        lv_p = PlayerGroupPlayer(auto57396F19_g, auto57396F19_p);
        UnitSetStateForPlayer(libMapM_gv_mMGardensDragonStatue, c_unitStateTargetable, lv_p, true);
    }
    auto3B8E9622_g = PlayerGroupAlliance(c_playerGroupEnemy, lp_team); 
    auto3B8E9622_p = 1;
    for ( ; auto3B8E9622_p <= PlayerGroupCount(auto3B8E9622_g) ; auto3B8E9622_p += (lv_p == PlayerGroupPlayer(auto3B8E9622_g, auto3B8E9622_p)) ) {
        lv_p = PlayerGroupPlayer(auto3B8E9622_g, auto3B8E9622_p);
        UnitSetStateForPlayer(libMapM_gv_mMGardensDragonStatue, c_unitStateTargetable, lv_p, false);
    }
    TextTagShow(libMapM_gv_mMGardensDragonStatueTextTag, PlayerGroupAll(), false);
    TextTagShow(libMapM_gv_mMGardensDragonStatueTextTagAllyOwned, PlayerGroupAlliance(c_playerGroupAlly, lp_team), true);
    autoA43C1C70_g = PlayerGroupAlliance(c_playerGroupAlly, lp_team); 
    autoA43C1C70_p = 1;
    for ( ; autoA43C1C70_p <= PlayerGroupCount(autoA43C1C70_g) ; autoA43C1C70_p += (lv_p == PlayerGroupPlayer(autoA43C1C70_g, autoA43C1C70_p)) ) {
        lv_p = PlayerGroupPlayer(autoA43C1C70_g, autoA43C1C70_p);
        if ((PlayerGroupHasPlayer(libCore_gv_activeHumanPlayers, lv_p) == true)) {
            if ((libMapM_gv_mapMechanicUsedTracker[lv_p].lv_dragonStatue == true)) {
                TextTagShow(libMapM_gv_mMGardensDragonStatueTextTagAllyOwned, libCore_gv_playerGroupFromPlayer[lv_p], false);
            }

        }

    }
    TextTagShow(libMapM_gv_mMGardensDragonStatueTextTagEnemyOwned, PlayerGroupAlliance(c_playerGroupEnemy, lp_team), true);
    auto6728DB37_g = PlayerGroupAlliance(c_playerGroupEnemy, lp_team); 
    auto6728DB37_p = 1;
    for ( ; auto6728DB37_p <= PlayerGroupCount(auto6728DB37_g) ; auto6728DB37_p += (lv_p == PlayerGroupPlayer(auto6728DB37_g, auto6728DB37_p)) ) {
        lv_p = PlayerGroupPlayer(auto6728DB37_g, auto6728DB37_p);
        if ((PlayerGroupHasPlayer(libCore_gv_activeHumanPlayers, lv_p) == true)) {
            if ((libMapM_gv_mapMechanicUsedTracker[lv_p].lv_dragonStatue == true)) {
                TextTagShow(libMapM_gv_mMGardensDragonStatueTextTagEnemyOwned, libCore_gv_playerGroupFromPlayer[lv_p], false);
            }

        }

    }
    TextTagShow(libMapM_gv_mMGardensDragonStatueTextTag, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    TimerStart(libMapM_gv_mMGardensDragonDragonStatueActiveReminderTimer, 1.0, false, c_timeGame);
    if ((lp_team == libCore_gv_cOMPUTER_TeamOrder)) {
    }

    return true;
}

fixed libMapM_gf_MMGardensDragonDragonDuration () {
    // Implementation
    return IntToFixed((FixedToInt(libMapM_gv_mMGardensDragonDragonKnightStartingTime_C)+2*FixedToInt(TimerGetElapsed(libGame_gv_gameTimer))/60));
}

bool libMapM_gf_MMGardensDragonObeliskFullyCaptured (unit lp_obeliskUnit) {
    int auto7B50E203_ae;

    // Variable Declarations
    int lv_obeliskIndex;

    // Variable Initialization

    // Implementation
    auto7B50E203_ae = libMapM_gv_mMGardensDragonDragonTowerObeliskCount_C;
    lv_obeliskIndex = 1;
    for ( ; lv_obeliskIndex <= auto7B50E203_ae ; lv_obeliskIndex += 1 ) {
        if ((libMapM_gv_mMGardensDragonDragonTowers[lv_obeliskIndex].lv_shrineUnit == lp_obeliskUnit)) {
            return libGame_gf_CapturePointFullyCaptured(libMapM_gv_mMGardensDragonDragonTowers[lv_obeliskIndex].lv_captureBeaconIndex);
        }

    }
    return false;
}

void libMapM_gf_MMGardensDragonDragonHasEnteredArtHooks () {
    // Implementation
    libGame_gf_SpecialLightingEventStart("StormDragonFire", PlayerGroupAll(), 3.0);
    ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal MM1On");
    SoundPlayForPlayer(SoundLink("Event_Gardens_Dragon_Ambient_Start", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    SoundPlayForPlayer(SoundLink("Event_Gardens_Dragon_Ambient_Loop", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    libMapM_gv_mMGardensDragonAmbientSound = SoundLastPlayed();
}

void libMapM_gf_MMGardensDragonDragonHasLeftArtHooks () {
    // Implementation
    libGame_gf_SpecialLightingEventEnd("StormDragonFire", PlayerGroupAll(), 3.0);
    ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal MM1Off");
    ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal MM2On");
    SoundStop(libMapM_gv_mMGardensDragonAmbientSound, true);
    SoundPlayForPlayer(SoundLink("Event_Gardens_Dragon_Ambient_End", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
}

trigger auto_libMapM_gf_MMDragonballsTransmissionObelisksChargingFirstQ_Trigger = null;

void libMapM_gf_MMDragonballsTransmissionObelisksChargingFirstQ () {
    if (auto_libMapM_gf_MMDragonballsTransmissionObelisksChargingFirstQ_Trigger == null) {
        auto_libMapM_gf_MMDragonballsTransmissionObelisksChargingFirstQ_Trigger = TriggerCreate("auto_libMapM_gf_MMDragonballsTransmissionObelisksChargingFirstQ_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMDragonballsTransmissionObelisksChargingFirstQ_Trigger, false, false);
}

bool auto_libMapM_gf_MMDragonballsTransmissionObelisksChargingFirstQ_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    UserDataSetInt("MapVOEvent", "DS - Shrines Charge First", "Value", 1, 1);
    ConversationDataRun("DragonShire", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMapM_gf_MMDragonballsTransmissionObelisksChargingRepeatQ_Trigger = null;

void libMapM_gf_MMDragonballsTransmissionObelisksChargingRepeatQ () {
    if (auto_libMapM_gf_MMDragonballsTransmissionObelisksChargingRepeatQ_Trigger == null) {
        auto_libMapM_gf_MMDragonballsTransmissionObelisksChargingRepeatQ_Trigger = TriggerCreate("auto_libMapM_gf_MMDragonballsTransmissionObelisksChargingRepeatQ_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMDragonballsTransmissionObelisksChargingRepeatQ_Trigger, false, false);
}

bool auto_libMapM_gf_MMDragonballsTransmissionObelisksChargingRepeatQ_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    UserDataSetInt("MapVOEvent", "DS - Shrines Charge Repeat", "Value", 1, 1);
    ConversationDataRun("DragonShire", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMapM_gf_MMDragonballsTransmissionObelisksSpawnFirstQ_Trigger = null;

void libMapM_gf_MMDragonballsTransmissionObelisksSpawnFirstQ () {
    if (auto_libMapM_gf_MMDragonballsTransmissionObelisksSpawnFirstQ_Trigger == null) {
        auto_libMapM_gf_MMDragonballsTransmissionObelisksSpawnFirstQ_Trigger = TriggerCreate("auto_libMapM_gf_MMDragonballsTransmissionObelisksSpawnFirstQ_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMDragonballsTransmissionObelisksSpawnFirstQ_Trigger, false, false);
}

bool auto_libMapM_gf_MMDragonballsTransmissionObelisksSpawnFirstQ_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    UserDataSetInt("MapVOEvent", "DS - Shrines Spawn First", "Value", 1, 1);
    ConversationDataRun("DragonShire", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMapM_gf_MMDragonballsTransmissionObelisksSpawnRepeatQ_Trigger = null;

void libMapM_gf_MMDragonballsTransmissionObelisksSpawnRepeatQ () {
    if (auto_libMapM_gf_MMDragonballsTransmissionObelisksSpawnRepeatQ_Trigger == null) {
        auto_libMapM_gf_MMDragonballsTransmissionObelisksSpawnRepeatQ_Trigger = TriggerCreate("auto_libMapM_gf_MMDragonballsTransmissionObelisksSpawnRepeatQ_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMDragonballsTransmissionObelisksSpawnRepeatQ_Trigger, false, false);
}

bool auto_libMapM_gf_MMDragonballsTransmissionObelisksSpawnRepeatQ_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    UserDataSetInt("MapVOEvent", "DS - Shrines Spawn Repeat", "Value", 1, 1);
    ConversationDataRun("DragonShire", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMapM_gf_MMDragonballsTransmissionDragonCapturableQ_Trigger = null;
int auto_libMapM_gf_MMDragonballsTransmissionDragonCapturableQ_lp_activeTeam;

void libMapM_gf_MMDragonballsTransmissionDragonCapturableQ (int lp_activeTeam) {
    auto_libMapM_gf_MMDragonballsTransmissionDragonCapturableQ_lp_activeTeam = lp_activeTeam;

    if (auto_libMapM_gf_MMDragonballsTransmissionDragonCapturableQ_Trigger == null) {
        auto_libMapM_gf_MMDragonballsTransmissionDragonCapturableQ_Trigger = TriggerCreate("auto_libMapM_gf_MMDragonballsTransmissionDragonCapturableQ_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMDragonballsTransmissionDragonCapturableQ_Trigger, false, false);
}

bool auto_libMapM_gf_MMDragonballsTransmissionDragonCapturableQ_TriggerFunc (bool testConds, bool runActions) {
    int lp_activeTeam = auto_libMapM_gf_MMDragonballsTransmissionDragonCapturableQ_lp_activeTeam;

    // Variable Declarations
    playergroup lv_orderPlayerGroup;
    playergroup lv_chaosPlayerGroup;
    playergroup lv_observerPlayer;

    // Variable Initialization
    lv_orderPlayerGroup = PlayerGroupEmpty();
    lv_chaosPlayerGroup = PlayerGroupEmpty();
    lv_observerPlayer = PlayerGroupEmpty();

    // Implementation
    return true;
}

trigger auto_libMapM_gf_MMDragonballsTransmissionDragonActiveQ_Trigger = null;
int auto_libMapM_gf_MMDragonballsTransmissionDragonActiveQ_lp_activeTeam;

void libMapM_gf_MMDragonballsTransmissionDragonActiveQ (int lp_activeTeam) {
    auto_libMapM_gf_MMDragonballsTransmissionDragonActiveQ_lp_activeTeam = lp_activeTeam;

    if (auto_libMapM_gf_MMDragonballsTransmissionDragonActiveQ_Trigger == null) {
        auto_libMapM_gf_MMDragonballsTransmissionDragonActiveQ_Trigger = TriggerCreate("auto_libMapM_gf_MMDragonballsTransmissionDragonActiveQ_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMDragonballsTransmissionDragonActiveQ_Trigger, false, false);
}

bool auto_libMapM_gf_MMDragonballsTransmissionDragonActiveQ_TriggerFunc (bool testConds, bool runActions) {
    int lp_activeTeam = auto_libMapM_gf_MMDragonballsTransmissionDragonActiveQ_lp_activeTeam;

    // Variable Declarations
    playergroup lv_orderPlayerGroup;
    playergroup lv_chaosPlayerGroup;
    playergroup lv_observerPlayer;

    // Variable Initialization
    lv_orderPlayerGroup = PlayerGroupEmpty();
    lv_chaosPlayerGroup = PlayerGroupEmpty();
    lv_observerPlayer = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("DragonShire", ("Left"));
    ConversationDataLineResetPlayers("DragonShire", ("Right"));
    ConversationDataLineResetPlayers("DragonShire", ("Observer"));
    if ((lp_activeTeam == libGame_gv_teamOrderIndex_C)) {
        UserDataSetInt("MapVOEvent", "DS - Dragon - Left", "Value", 1, 1);
    }
    else {
        UserDataSetInt("MapVOEvent", "DS - Dragon - Right", "Value", 1, 1);
    }
    lv_orderPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_chaosPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_observerPlayer = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("DragonShire", ("Left"), lv_orderPlayerGroup);
    ConversationDataLineSetPlayers("DragonShire", ("Right"), lv_chaosPlayerGroup);
    ConversationDataLineSetPlayers("DragonShire", ("Observer"), lv_observerPlayer);
    ConversationDataRun("DragonShire", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMapM_gf_MMDragonballsTransmissionDragonExpireQ_Trigger = null;

void libMapM_gf_MMDragonballsTransmissionDragonExpireQ () {
    if (auto_libMapM_gf_MMDragonballsTransmissionDragonExpireQ_Trigger == null) {
        auto_libMapM_gf_MMDragonballsTransmissionDragonExpireQ_Trigger = TriggerCreate("auto_libMapM_gf_MMDragonballsTransmissionDragonExpireQ_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMDragonballsTransmissionDragonExpireQ_Trigger, false, false);
}

bool auto_libMapM_gf_MMDragonballsTransmissionDragonExpireQ_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    UserDataSetInt("MapVOEvent", "DS - Dragon Death", "Value", 1, 1);
    ConversationDataRun("DragonShire", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMapM_gf_MMUnderworldInitWorld_Trigger = null;
region auto_libMapM_gf_MMUnderworldInitWorld_lp_aboveGroundPlayable;
region auto_libMapM_gf_MMUnderworldInitWorld_lp_aboveGroundCamera;
region auto_libMapM_gf_MMUnderworldInitWorld_lp_underGroundPlayable;
region auto_libMapM_gf_MMUnderworldInitWorld_lp_fullWorldCamera;
point auto_libMapM_gf_MMUnderworldInitWorld_lp_summonPos_Order;
point auto_libMapM_gf_MMUnderworldInitWorld_lp_summonPos_Chaos;

void libMapM_gf_MMUnderworldInitWorld (region lp_aboveGroundPlayable, region lp_aboveGroundCamera, region lp_underGroundPlayable, region lp_fullWorldCamera, point lp_summonPos_Order, point lp_summonPos_Chaos) {
    auto_libMapM_gf_MMUnderworldInitWorld_lp_aboveGroundPlayable = lp_aboveGroundPlayable;
    auto_libMapM_gf_MMUnderworldInitWorld_lp_aboveGroundCamera = lp_aboveGroundCamera;
    auto_libMapM_gf_MMUnderworldInitWorld_lp_underGroundPlayable = lp_underGroundPlayable;
    auto_libMapM_gf_MMUnderworldInitWorld_lp_fullWorldCamera = lp_fullWorldCamera;
    auto_libMapM_gf_MMUnderworldInitWorld_lp_summonPos_Order = lp_summonPos_Order;
    auto_libMapM_gf_MMUnderworldInitWorld_lp_summonPos_Chaos = lp_summonPos_Chaos;

    if (auto_libMapM_gf_MMUnderworldInitWorld_Trigger == null) {
        auto_libMapM_gf_MMUnderworldInitWorld_Trigger = TriggerCreate("auto_libMapM_gf_MMUnderworldInitWorld_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMUnderworldInitWorld_Trigger, false, false);
}

bool auto_libMapM_gf_MMUnderworldInitWorld_TriggerFunc (bool testConds, bool runActions) {
    region lp_aboveGroundPlayable = auto_libMapM_gf_MMUnderworldInitWorld_lp_aboveGroundPlayable;
    region lp_aboveGroundCamera = auto_libMapM_gf_MMUnderworldInitWorld_lp_aboveGroundCamera;
    region lp_underGroundPlayable = auto_libMapM_gf_MMUnderworldInitWorld_lp_underGroundPlayable;
    region lp_fullWorldCamera = auto_libMapM_gf_MMUnderworldInitWorld_lp_fullWorldCamera;
    point lp_summonPos_Order = auto_libMapM_gf_MMUnderworldInitWorld_lp_summonPos_Order;
    point lp_summonPos_Chaos = auto_libMapM_gf_MMUnderworldInitWorld_lp_summonPos_Chaos;

    playergroup auto5F9B2BAC_g;
    int auto5F9B2BAC_p;
    unitgroup auto3CAA9934_g;
    int auto3CAA9934_u;
    unitgroup autoA6C4D835_g;
    int autoA6C4D835_u;
    int auto892DBE2E_ae;
    int auto892DBE2E_ai;

    // Variable Declarations
    int lv_itPlayer;
    unit lv_itGate;
    unit lv_itBush;

    // Variable Initialization

    // Implementation
    libMapM_gv_mMUnderworldAboveGroundPlayable = lp_aboveGroundPlayable;
    libMapM_gv_mMUnderworldAboveGroundCamera = lp_aboveGroundCamera;
    libMapM_gv_mMUnderworldUnderGroundPlayable = lp_underGroundPlayable;
    libMapM_gv_mMUnderworldFullWorldCamera = lp_fullWorldCamera;
    libMapM_gv_mMUnderworldGatesAbove = UnitGroup("HoleLadderDown", libCore_gv_cOMPUTER_Neutral, lp_aboveGroundPlayable, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    libMapM_gv_mMUnderworldGatesBelow = UnitGroup("HoleLadderUp", libCore_gv_cOMPUTER_Neutral, lp_underGroundPlayable, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto5F9B2BAC_g = PlayerGroupAll(); 
    auto5F9B2BAC_p = 1;
    for ( ; auto5F9B2BAC_p <= PlayerGroupCount(auto5F9B2BAC_g) ; auto5F9B2BAC_p += (lv_itPlayer == PlayerGroupPlayer(auto5F9B2BAC_g, auto5F9B2BAC_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto5F9B2BAC_g, auto5F9B2BAC_p);
        VisRevealArea(lv_itPlayer, libMapM_gv_mMUnderworldUnderGroundPlayable, 1.0, true);
        CatalogFieldValueSet(c_gameCatalogAbil, "CaptureMacGuffin", "Activity", lv_itPlayer, "DOCSTR_MMUnderworld_MineEntrance");
        CatalogFieldValueSet(c_gameCatalogAbil, "CaptureMacGuffin", "Range[" + IntToString(0) + "]", lv_itPlayer, "2.5");
        CatalogLinkReplace(lv_itPlayer, c_gameCatalogModel, "CaptureMacGuffinBeamRavenCourt", "CaptureMacGuffinBeamUnderground");
        CatalogLinkReplace(lv_itPlayer, c_gameCatalogSound, "Event_RavenCurse_CollectTributeStart", "Event_Mines_EnterMinesStart");
        CatalogLinkReplace(lv_itPlayer, c_gameCatalogSound, "Event_RavenCurse_CollectTributeLoop", "Event_Mines_EnterMinesLoop");
        CatalogLinkReplace(lv_itPlayer, c_gameCatalogSound, "Event_RavenCurse_CollectTributeEnd", "StormNoSound");
    }
    libNtve_gf_ShowHideDoodadsInRegion(false, RegionEntireMap(), "UnderworldGateHelper");
    libMapM_gv_mMUnderworldSummonedBossLocation[1] = lp_summonPos_Order;
    libMapM_gv_mMUnderworldSummonedBossLocation[2] = lp_summonPos_Chaos;
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "UnderworldSummonedBossBody", c_unitCreateIgnorePlacement, libGame_gf_ComputerPlayerInTeam(libGame_gv_teamOrderIndex_C), libMapM_gv_mMUnderworldSummonedBossLocation[libGame_gv_teamOrderIndex_C]);
    libMapM_gv_mMUnderworldSummonedBossBody[libGame_gv_teamOrderIndex_C] = UnitLastCreated();
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "UnderworldSummonedBossBody", c_unitCreateIgnorePlacement, libGame_gf_ComputerPlayerInTeam(libGame_gv_teamChaosIndex_C), libMapM_gv_mMUnderworldSummonedBossLocation[libGame_gv_teamChaosIndex_C]);
    libMapM_gv_mMUnderworldSummonedBossBody[libGame_gv_teamChaosIndex_C] = UnitLastCreated();
    auto3CAA9934_g = libMapM_gv_mMUnderworldGatesAbove;
    auto3CAA9934_u = 1;
    for ( ; auto3CAA9934_u <= UnitGroupCount(auto3CAA9934_g, c_unitCountAll) ; auto3CAA9934_u += (lv_itGate == UnitGroupUnit(auto3CAA9934_g, auto3CAA9934_u)) ) {
        lv_itGate = UnitGroupUnit(auto3CAA9934_g, auto3CAA9934_u);
        libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_itGate), "Cover", "Cover", c_animFlagPlayForever, c_animTimeDefault);
        UnitSetState(lv_itGate, c_unitStateHighlightable, false);
        UnitSetState(lv_itGate, c_unitStateTargetable, false);
    }
    autoA6C4D835_g = libMapM_gv_mMUnderworldGatesBelow;
    autoA6C4D835_u = 1;
    for ( ; autoA6C4D835_u <= UnitGroupCount(autoA6C4D835_g, c_unitCountAll) ; autoA6C4D835_u += (lv_itGate == UnitGroupUnit(autoA6C4D835_g, autoA6C4D835_u)) ) {
        lv_itGate = UnitGroupUnit(autoA6C4D835_g, autoA6C4D835_u);
        if ((libCore_gf_TextTagStoredForUnit(lv_itGate, 1) == c_textTagNone)) {
            TextTagCreate(StringExternal("Param/Value/lib_MapM_CD21A1AF"), 16, UnitGetPosition(lv_itGate), 1.0, true, false, libCore_gv_activeHumanPlayers);
            libCore_gf_StoreTextTagForUnit(lv_itGate, 1, TextTagLastCreated());
            TextTagAttachToUnit(TextTagLastCreated(), lv_itGate, 3.0);
            TextTagShow(TextTagLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
        }

        libNtve_gf_SendActorMessageToUnit(lv_itGate, "SetMinimapVisibility");
        libNtve_gf_SendActorMessageToUnit(lv_itGate, "SetMinimapVisibilityAlways");
    }
    libMapM_gf_MMUnderworldTurnGroundHoleLightOnOff(false);
    libMapM_gf_MMUnderworldBossDroppingSkulls();
    TriggerEnable(libMapM_gt_MMUnderworldPlayerMovesCamera, true);
    auto892DBE2E_ae = libCore_gv_bALMaxPlayers;
    auto892DBE2E_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto892DBE2E_ai >= 0 && lv_itPlayer <= auto892DBE2E_ae) || (auto892DBE2E_ai <= 0 && lv_itPlayer >= auto892DBE2E_ae) ) ; lv_itPlayer += auto892DBE2E_ai ) {
        CameraSetChannel(lv_itPlayer, libMapM_gf_MMUnderworldGroundHoleCamera(libMapM_gf_MMUnderworldGroundHole(UnitGroupUnit(libMapM_gv_mMUnderworldGatesAbove, 1))), "SC2Camera001", 8, 1.0);
        CameraSetChannel(lv_itPlayer, libMapM_gf_MMUnderworldGroundHoleCamera(libMapM_gf_MMUnderworldGroundHole(UnitGroupUnit(libMapM_gv_mMUnderworldGatesAbove, 2))), "SC2Camera001", 1, 1.0);
    }
    CameraSetChannel(libCore_gv_oBSERVER_ObserverUIPlayer, libMapM_gf_MMUnderworldGroundHoleCamera(libMapM_gf_MMUnderworldGroundHole(UnitGroupUnit(libMapM_gv_mMUnderworldGatesAbove, 1))), "SC2Camera001", 8, 1.0);
    CameraSetChannel(libCore_gv_oBSERVER_ObserverUIPlayer, libMapM_gf_MMUnderworldGroundHoleCamera(libMapM_gf_MMUnderworldGroundHole(UnitGroupUnit(libMapM_gv_mMUnderworldGatesAbove, 2))), "SC2Camera001", 1, 1.0);
    SoundLengthQuery(SoundLink("Event_Mines_Boss_Summon_Start", -1));
    return true;
}

unit libMapM_gf_MMUnderworldPlayerHeroUnit (int lp_player) {
    // Implementation
    if ((libGame_gv_players[lp_player].lv_activeVehicle != null) && (UnitIsAlive(libGame_gv_players[lp_player].lv_activeVehicle) == true)) {
        return libGame_gv_players[lp_player].lv_activeVehicle;
    }

    return libGame_gv_players[lp_player].lv_heroUnit;
}

unitgroup libMapM_gf_MMUnderworldPlayerHeroUnitGroup (int lp_player) {
    // Variable Declarations
    unitgroup lv_heroGroup;

    // Variable Initialization
    lv_heroGroup = UnitGroupEmpty();

    // Implementation
    lv_heroGroup = libGame_gv_players[lp_player].lv_heroUnitGroup;
    if ((libGame_gv_players[lp_player].lv_activeVehicle != null) && (UnitIsAlive(libGame_gv_players[lp_player].lv_activeVehicle) == true)) {
        UnitGroupAdd(lv_heroGroup, libGame_gv_players[lp_player].lv_activeVehicle);
    }
    else {
        UnitGroupAdd(lv_heroGroup, libGame_gv_players[lp_player].lv_heroUnit);
    }
    return lv_heroGroup;
}

unit libMapM_gf_MMUnderworldGroundHole (unit lp_gate) {
    // Implementation
    return libCore_gf_UnitStoredForUnit(lp_gate, 1);
}

unit libMapM_gf_MMUnderworldGroundHoleVision (unit lp_hole) {
    // Implementation
    return libCore_gf_UnitStoredForUnit(lp_hole, 1);
}

unit libMapM_gf_MMUnderworldGroundHoleCamera (unit lp_hole) {
    // Implementation
    return libCore_gf_UnitStoredForUnit(lp_hole, 2);
}

unit libMapM_gf_MMUnderworldUndergroundLadder (unit lp_gate) {
    // Implementation
    return libCore_gf_UnitStoredForUnit(lp_gate, 2);
}

unit libMapM_gf_MMUnderworldUndergroundEntranceLight (unit lp_gate, int lp_team) {
    // Implementation
    return libCore_gf_UnitStoredForUnit(lp_gate, (lp_team + 2));
}

point libMapM_gf_MMUnderworldGateEnteringSpawnPoint (unit lp_gate) {
    // Implementation
    return libCore_gf_PointStoredForUnit(lp_gate, 1);
}

region libMapM_gf_HauntedMinePlayableRegion (int lp_plane) {
    int auto344090E9_val;

    // Implementation
    auto344090E9_val = lp_plane;
    if (auto344090E9_val == libMapM_ge_MMUnderworldGroundPlane_AboveGround) {
        return libMapM_gv_mMUnderworldAboveGroundPlayable;
    }
    else if (auto344090E9_val == libMapM_ge_MMUnderworldGroundPlane_UnderGround) {
        return libMapM_gv_mMUnderworldUnderGroundPlayable;
    }
    else {
    }
    return null;
}

void libMapM_gf_MMUnderworldChangePlaneForPlayer (int lp_player) {
    unitgroup autoEC490FA6_g;
    int autoEC490FA6_u;

    // Variable Declarations
    unit lv_itUnit;

    // Variable Initialization

    // Implementation
    if (((lp_player < 0) || (lp_player > libCore_gv_bALMaxEnginePlayerCount))) {
        return ;
    }

    autoEC490FA6_g = libMapM_gf_MMUnderworldPlayerHeroUnitGroup(lp_player);
    autoEC490FA6_u = 1;
    for ( ; autoEC490FA6_u <= UnitGroupCount(autoEC490FA6_g, c_unitCountAll) ; autoEC490FA6_u += (lv_itUnit == UnitGroupUnit(autoEC490FA6_g, autoEC490FA6_u)) ) {
        lv_itUnit = UnitGroupUnit(autoEC490FA6_g, autoEC490FA6_u);
        if ((UnitIsValid(lv_itUnit) == true)) {
            if ((libNtve_gf_UnitInRegion(lv_itUnit, libMapM_gv_mMUnderworldAboveGroundPlayable) == true)) {
                libMapM_gf_MMUnderworldChangePlaneForUnit(lv_itUnit, libMapM_ge_MMUnderworldGroundPlane_AboveGround);
            }
            else {
                libMapM_gf_MMUnderworldChangePlaneForUnit(lv_itUnit, libMapM_ge_MMUnderworldGroundPlane_UnderGround);
            }
        }

    }
}

void libMapM_gf_MMUnderworldChangePlaneForUnit (unit lp_heroUnit, int lp_groundPlane) {
    // Implementation
    if (((UnitGetOwner(lp_heroUnit) < 0) || (UnitGetOwner(lp_heroUnit) > libCore_gv_bALMaxEnginePlayerCount))) {
        return ;
    }

    if ((libCore_gf_IntegerStoredForUnit(lp_heroUnit, 1) == (lp_groundPlane))) {
        return ;
    }

    if ((libCore_gf_IntegerStoredForUnit(lp_heroUnit, 1) == libMapM_ge_MMUnderworldGroundPlane_AboveGround)) {
        libCore_gf_StoreIntegerForUnit(lp_heroUnit, 1, (libMapM_ge_MMUnderworldGroundPlane_UnderGround));
    }
    else {
        libCore_gf_StoreIntegerForUnit(lp_heroUnit, 1, (libMapM_ge_MMUnderworldGroundPlane_AboveGround));
    }
    libMapM_gf_MMUnderworldUpdateHeroUnitLighting(lp_heroUnit);
    libMapM_gf_MMUnderworldUpdateAmbience(UnitGetOwner(lp_heroUnit));
    libGame_gf_SendEventMapHauntedMinesPlayerChangesPlane(UnitGetOwner(lp_heroUnit), lp_heroUnit);
}

void libMapM_gf_MMUnderworldUpdateHeroUnitLighting (unit lp_heroUnit) {
    // Variable Declarations
    unit lv_hero;

    // Variable Initialization

    // Implementation
    lv_hero = lp_heroUnit;
    if ((lv_hero == null)) {
        return ;
    }

    if ((libNtve_gf_UnitInRegion(lv_hero, libMapM_gv_mMUnderworldUnderGroundPlayable) == true)) {
        if ((libCore_gf_ActorStoredForUnit(lv_hero, 1) == null)) {
            if ((UnitHasBehavior2(lv_hero, "LowIntensityLight") == true)) {
                libNtve_gf_AttachActorToUnit(lv_hero, "HeroLightLowIntensity", "Ref_Origin");
            }
            else {
                libNtve_gf_AttachActorToUnit(lv_hero, "UndergroundHeroLight", "Ref_Origin");
            }
            libCore_gf_StoreActorForUnit(lv_hero, 1, libNtve_gf_ActorLastCreated());
        }

    }
    else {
        if ((libCore_gf_ActorStoredForUnit(lv_hero, 1) != null)) {
            ActorSend(libCore_gf_ActorStoredForUnit(lv_hero, 1), "AnimBracketStop BSD");
            libCore_gf_StoreActorForUnit(lv_hero, 1, null);
        }

    }
}

void libMapM_gf_MMUnderworldTurnGroundHoleLightOnOff (bool lp_onOff) {
    unitgroup auto897E9816_g;
    int auto897E9816_u;
    unitgroup auto833BD99D_g;
    int auto833BD99D_u;
    unitgroup auto16C39F67_g;
    int auto16C39F67_u;
    unitgroup autoA5AA62EA_g;
    int autoA5AA62EA_u;

    // Variable Declarations
    unit lv_itGate;

    // Variable Initialization

    // Implementation
    if ((lp_onOff == true)) {
        auto16C39F67_g = libMapM_gv_mMUnderworldGatesAbove;
        auto16C39F67_u = 1;
        for ( ; auto16C39F67_u <= UnitGroupCount(auto16C39F67_g, c_unitCountAll) ; auto16C39F67_u += (lv_itGate == UnitGroupUnit(auto16C39F67_g, auto16C39F67_u)) ) {
            lv_itGate = UnitGroupUnit(auto16C39F67_g, auto16C39F67_u);
            libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lv_itGate), c_animNameDefault);
        }
        autoA5AA62EA_g = libMapM_gv_mMUnderworldGatesBelow;
        autoA5AA62EA_u = 1;
        for ( ; autoA5AA62EA_u <= UnitGroupCount(autoA5AA62EA_g, c_unitCountAll) ; autoA5AA62EA_u += (lv_itGate == UnitGroupUnit(autoA5AA62EA_g, autoA5AA62EA_u)) ) {
            lv_itGate = UnitGroupUnit(autoA5AA62EA_g, autoA5AA62EA_u);
            libNtve_gf_ClearAnimation(libNtve_gf_MainActorofUnit(lv_itGate), c_animNameDefault);
        }
    }
    else {
        auto897E9816_g = libMapM_gv_mMUnderworldGatesAbove;
        auto897E9816_u = 1;
        for ( ; auto897E9816_u <= UnitGroupCount(auto897E9816_g, c_unitCountAll) ; auto897E9816_u += (lv_itGate == UnitGroupUnit(auto897E9816_g, auto897E9816_u)) ) {
            lv_itGate = UnitGroupUnit(auto897E9816_g, auto897E9816_u);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_itGate), c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
        }
        auto833BD99D_g = libMapM_gv_mMUnderworldGatesBelow;
        auto833BD99D_u = 1;
        for ( ; auto833BD99D_u <= UnitGroupCount(auto833BD99D_g, c_unitCountAll) ; auto833BD99D_u += (lv_itGate == UnitGroupUnit(auto833BD99D_g, auto833BD99D_u)) ) {
            lv_itGate = UnitGroupUnit(auto833BD99D_g, auto833BD99D_u);
            libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(lv_itGate), c_animNameDefault, "Dead", c_animFlagPlayForever, c_animTimeDefault);
        }
    }
}

void libMapM_gf_MMUnderworldChangeAmbience (string lp_ambience, string lp_reverb, playergroup lp_players) {
    playergroup auto5C3964BA_g;
    int auto5C3964BA_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Implementation
    auto5C3964BA_g = lp_players; 
    auto5C3964BA_p = 1;
    for ( ; auto5C3964BA_p <= PlayerGroupCount(auto5C3964BA_g) ; auto5C3964BA_p += (lv_itPlayer == PlayerGroupPlayer(auto5C3964BA_g, auto5C3964BA_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto5C3964BA_g, auto5C3964BA_p);
        if ((libMapM_gv_mMUnderworldAmbience[lv_itPlayer] == lp_ambience)) {
            continue;
        }

        libMapM_gv_mMUnderworldAmbience[lv_itPlayer] = lp_ambience;
    }
    SoundtrackPlay(lp_players, c_soundtrackCategoryAmbience, lp_ambience, c_soundtrackCueAny, c_soundtrackIndexAny, true);
}

void libMapM_gf_MMUnderworldUpdateAmbience (int lp_player) {
    // Implementation
    if ((RegionContainsPoint(libMapM_gv_mMUnderworldAboveGroundPlayable, CameraGetTarget(lp_player)) == true)) {
        libMapM_gf_MMUnderworldChangeAmbience("RavenCourtAmbientDay", null, PlayerGroupSingle(lp_player));
    }
    else {
        libMapM_gf_MMUnderworldChangeAmbience("Ambient_Underworld_Mines", null, PlayerGroupSingle(lp_player));
    }
}

void libMapM_gf_MapMechanicUnderworldAddMinionGroup (region lp_groupArea) {
    unitgroup autoB712B1C0_g;
    int autoB712B1C0_u;

    // Variable Declarations
    int lv_groupIndex;
    unit lv_itMinion;
    int lv_minionIndex;

    // Variable Initialization

    // Implementation
    libMapM_gv_mMUnderworldMinionGroupCount += 1;
    lv_groupIndex = libMapM_gv_mMUnderworldMinionGroupCount;
    libMapM_gv_mMUnderworldMinionGroups[lv_groupIndex].lv_area = lp_groupArea;
    autoB712B1C0_g = UnitGroup(null, libCore_gv_cOMPUTER_Hostile, lp_groupArea, libCore_gv_filtersMercDefender, 0);
    autoB712B1C0_u = 1;
    for ( ; autoB712B1C0_u <= UnitGroupCount(autoB712B1C0_g, c_unitCountAll) ; autoB712B1C0_u += (lv_itMinion == UnitGroupUnit(autoB712B1C0_g, autoB712B1C0_u)) ) {
        lv_itMinion = UnitGroupUnit(autoB712B1C0_g, autoB712B1C0_u);
        libMapM_gv_mMUnderworldMinionGroups[lv_groupIndex].lv_minionCount += 1;
        lv_minionIndex = libMapM_gv_mMUnderworldMinionGroups[lv_groupIndex].lv_minionCount;
        libMapM_gv_mMUnderworldMinionGroups[lv_groupIndex].lv_minionType[lv_minionIndex] = UnitGetType(lv_itMinion);
        libMapM_gv_mMUnderworldMinionGroups[lv_groupIndex].lv_positions[lv_minionIndex] = UnitGetPosition(lv_itMinion);
        PointSetFacing(libMapM_gv_mMUnderworldMinionGroups[lv_groupIndex].lv_positions[lv_minionIndex], UnitGetFacing(lv_itMinion));
        UnitRemove(lv_itMinion);
    }
    libMapM_gv_mMUnderworldMinionGroups[lv_groupIndex].lv_units = UnitGroupEmpty();
    if ((libMapM_gv_mMUnderworldMinionGroups[lv_groupIndex].lv_minionCount >= 3)) {
        libMapM_gv_mMUnderworldMinionGroups[lv_groupIndex].lv_regenGlobeCount = 1;
    }
    else {
        libMapM_gv_mMUnderworldMinionGroups[lv_groupIndex].lv_regenGlobeCount = 0;
    }
}

void libMapM_gf_MapMechanicUnderworldAddBoss (region lp_bossRegion) {
    // Implementation
    libMapM_gv_mMUnderworldBossRegion = lp_bossRegion;
    libMapM_gv_mMUnderworldBoss = UnitGroupUnit(UnitGroup("UnderworldBoss", libCore_gv_cOMPUTER_Hostile, lp_bossRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 1), 1);
    libMapM_gv_mMUnderworldBossLocation = UnitGetPosition(libMapM_gv_mMUnderworldBoss);
    PointSetFacing(libMapM_gv_mMUnderworldBossLocation, UnitGetFacing(libMapM_gv_mMUnderworldBoss));
    UnitRemove(libMapM_gv_mMUnderworldBoss);
    libMapM_gv_mMUnderworldBoss = null;
}

int libMapM_gf_MMUnderworldBossSkullDropCount () {
    // Variable Declarations
    int lv_dropIndexMax;
    int lv_count;

    // Variable Initialization

    // Implementation
    lv_dropIndexMax = ((libMapM_gv_mMUnderworldDropSkullsBossStartHPPercent_C+FixedToInt(libMapM_gv_mMUnderworldDropSkullsBossPerHPPercent_C)-1)/FixedToInt(libMapM_gv_mMUnderworldDropSkullsBossPerHPPercent_C));
    lv_count = (lv_dropIndexMax * libMapM_gv_mMUnderworldDropSkullsBossPerHPDrop_C);
    lv_count += libMapM_gv_mMUnderworldDropSkullsBossFinalDrop_C;
    return lv_count;
}

int libMapM_gf_MMUnderworldMineMinionGroupIndex (unit lp_minion) {
    // Implementation
    return libCore_gf_IntegerStoredForUnit(lp_minion, 1);
}

trigger auto_libMapM_gf_MMUnderworldSpawnMonsters_Trigger = null;

void libMapM_gf_MMUnderworldSpawnMonsters () {
    if (auto_libMapM_gf_MMUnderworldSpawnMonsters_Trigger == null) {
        auto_libMapM_gf_MMUnderworldSpawnMonsters_Trigger = TriggerCreate("auto_libMapM_gf_MMUnderworldSpawnMonsters_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMUnderworldSpawnMonsters_Trigger, false, false);
}

bool auto_libMapM_gf_MMUnderworldSpawnMonsters_TriggerFunc (bool testConds, bool runActions) {
    int auto24787213_ae;
    int auto24787213_ai;
    int auto1C434AB5_ae;
    int auto1C434AB5_ai;

    // Variable Declarations
    int lv_itGroupIndex;
    unit lv_itMinion;
    int lv_itMinionIndex;
    int lv_defenderAIIndex;

    // Variable Initialization

    // Implementation
    libMapM_gv_mMUnderworldSkullTotal = 0;
    libMapM_gv_mMUnderworldBossSkullDroppedIndex = 0;
    libMapM_gv_mMUnderworldBossGlobeDroppedIndex = 0;
    auto24787213_ae = libMapM_gv_mMUnderworldMinionGroupCount;
    auto24787213_ai = 1;
    lv_itGroupIndex = 1;
    for ( ; ( (auto24787213_ai >= 0 && lv_itGroupIndex <= auto24787213_ae) || (auto24787213_ai <= 0 && lv_itGroupIndex >= auto24787213_ae) ) ; lv_itGroupIndex += auto24787213_ai ) {
        UnitGroupClear(libMapM_gv_mMUnderworldMinionGroups[lv_itGroupIndex].lv_units);
        auto1C434AB5_ae = libMapM_gv_mMUnderworldMinionGroups[lv_itGroupIndex].lv_minionCount;
        auto1C434AB5_ai = 1;
        lv_itMinionIndex = 1;
        for ( ; ( (auto1C434AB5_ai >= 0 && lv_itMinionIndex <= auto1C434AB5_ae) || (auto1C434AB5_ai <= 0 && lv_itMinionIndex >= auto1C434AB5_ae) ) ; lv_itMinionIndex += auto1C434AB5_ai ) {
            libNtve_gf_CreateUnitsAtPoint2(1, libMapM_gv_mMUnderworldMinionGroups[lv_itGroupIndex].lv_minionType[lv_itMinionIndex], 0, libCore_gv_cOMPUTER_Hostile, libMapM_gv_mMUnderworldMinionGroups[lv_itGroupIndex].lv_positions[lv_itMinionIndex]);
            lv_itMinion = UnitLastCreated();
            UnitGroupAdd(libMapM_gv_mMUnderworldMinionGroups[lv_itGroupIndex].lv_units, lv_itMinion);
            libCore_gf_StoreIntegerForUnit(lv_itMinion, 1, lv_itGroupIndex);
            libGame_gf_UpdateScalingForUnit(UnitLastCreated(), libGame_gv_scalingTicks, 0);
            libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetMinimapVisibilityAlways 1");
        }
        libNtve_gf_CreateUnitsAtPoint2(1, "JungleCampIconUnit", 0, libCore_gv_cOMPUTER_Hostile, RegionGetCenter(libMapM_gv_mMUnderworldMinionGroups[lv_itGroupIndex].lv_area));
        libMapM_gv_mMUnderworldMinionGroups[lv_itGroupIndex].lv_iconUnit = UnitLastCreated();
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_mineskeleton.dds");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetMinimapVisibility 1");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetMinimapVisibilityAlways 1");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "MinimapIconScale 0.675000");
        libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "MinimapIconTintColor 255,180,90,218");
        libAIAI_gf_StartDefenderAI(libMapM_gv_mMUnderworldMinionGroups[lv_itGroupIndex].lv_units, RegionCircle(RegionGetCenter(libMapM_gv_mMUnderworldMinionGroups[lv_itGroupIndex].lv_area), 14.0), null, false);
        libMapM_gv_mMUnderworldMinionGroups[lv_itGroupIndex].lv_defenderIndex = libAIAI_gf_LastCreatedDefenderAI();
        libMapM_gv_mMUnderworldSkullTotal += (libMapM_gv_mMUnderworldMinionGroups[lv_itGroupIndex].lv_minionCount * libMapM_gv_mMUnderworldDropSkullsMinion);
        libMapM_gv_mMUnderworldMinionGroups[lv_itGroupIndex].lv_regenGlobeDropped = false;
        Wait(0.0625, c_timeGame);
    }
    libNtve_gf_CreateUnitsAtPoint2(1, "JungleCampIconUnit", 0, libCore_gv_cOMPUTER_Hostile, RegionGetCenter(libMapM_gv_mMUnderworldBossRegion));
    libMapM_gv_mMUnderworldBossIconUnit = UnitLastCreated();
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "MinimapIcon Assets\\Textures\\storm_ui_minimapicon_minesgolem.dds");
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetMinimapVisibility 1");
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "SetMinimapVisibilityAlways 1");
    libNtve_gf_SendActorMessageToUnit(UnitLastCreated(), "MinimapIconTintColor 255,180,90,218");
    libNtve_gf_CreateUnitsAtPoint2(1, "UnderworldBoss", 0, libCore_gv_cOMPUTER_Hostile, libMapM_gv_mMUnderworldBossLocation);
    libMapM_gv_mMUnderworldBoss = UnitLastCreated();
    libMapM_gv_mMUnderworldSkullTotal += libMapM_gf_MMUnderworldBossSkullDropCount();
    libGame_gf_UpdateScalingForUnit(UnitLastCreated(), libGame_gv_scalingTicks, 0);
    libAIAI_gf_StartDefenderAI(libNtve_gf_ConvertUnitToUnitGroup(libMapM_gv_mMUnderworldBoss), RegionCircle(UnitGetPosition(libMapM_gv_mMUnderworldBoss), 13.0), null, false);
    TriggerEnable(libMapM_gt_MMUnderworldMonstersDies, true);
    libGame_gf_SendEventMapHauntedMinesUndeadSpawned(libMapM_gv_mMUnderworldGatesAbove, libMapM_gv_mMUnderworldUnderGroundPlayable, libMapM_gv_mMUnderworldSkullTotal);
    return true;
}

trigger auto_libMapM_gf_MMUnderworldBossDroppingSkulls_Trigger = null;

void libMapM_gf_MMUnderworldBossDroppingSkulls () {
    if (auto_libMapM_gf_MMUnderworldBossDroppingSkulls_Trigger == null) {
        auto_libMapM_gf_MMUnderworldBossDroppingSkulls_Trigger = TriggerCreate("auto_libMapM_gf_MMUnderworldBossDroppingSkulls_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMUnderworldBossDroppingSkulls_Trigger, false, false);
}

bool auto_libMapM_gf_MMUnderworldBossDroppingSkulls_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    while (true) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        if ((UnitIsAlive(libMapM_gv_mMUnderworldBoss) == true)) {
            libMapM_gf_MMUnderworldBossDropsSkulls();
        }

        Wait(0.25, c_timeGame);
    }
    return true;
}

void libMapM_gf_MMUnderworldBossDropsSkulls () {
    int auto4AB09B2F_ae;
    int auto4AB09B2F_ai;
    int auto120A2817_ae;
    int auto120A2817_ai;

    // Variable Declarations
    int lv_droppedIndex;
    int lv_dropIndex;
    int lv_dropIndexMax;
    int lv_itDrop;
    int lv_itSeed;
    fixed lv_percent;

    // Variable Initialization

    // Implementation
    lv_percent = UnitGetPropertyFixed(libMapM_gv_mMUnderworldBoss, c_unitPropLifePercent, c_unitPropCurrent);
    lv_droppedIndex = libMapM_gv_mMUnderworldBossSkullDroppedIndex;
    lv_dropIndexMax = ((libMapM_gv_mMUnderworldDropSkullsBossStartHPPercent_C+FixedToInt(libMapM_gv_mMUnderworldDropSkullsBossPerHPPercent_C)-1)/FixedToInt(libMapM_gv_mMUnderworldDropSkullsBossPerHPPercent_C));
    if ((UnitIsAlive(libMapM_gv_mMUnderworldBoss) == true)) {
        lv_dropIndex = ((libMapM_gv_mMUnderworldDropSkullsBossStartHPPercent_C+FixedToInt(libMapM_gv_mMUnderworldDropSkullsBossPerHPPercent_C)-1-FixedToInt(lv_percent))/FixedToInt(libMapM_gv_mMUnderworldDropSkullsBossPerHPPercent_C));
        lv_dropIndex = MinI(lv_dropIndex, lv_dropIndexMax);
    }
    else {
        lv_dropIndex = lv_dropIndexMax;
    }
    if ((lv_dropIndex > lv_droppedIndex)) {
        libMapM_gv_mMUnderworldBossSkullDroppedIndex = lv_dropIndex;
        auto4AB09B2F_ae = lv_dropIndex;
        auto4AB09B2F_ai = 1;
        lv_itDrop = (lv_droppedIndex + 1);
        for ( ; ( (auto4AB09B2F_ai >= 0 && lv_itDrop <= auto4AB09B2F_ae) || (auto4AB09B2F_ai <= 0 && lv_itDrop >= auto4AB09B2F_ae) ) ; lv_itDrop += auto4AB09B2F_ai ) {
            libMapM_gf_MMUnderworldDropSkulls(UnitGetPosition(libMapM_gv_mMUnderworldBoss), libMapM_gv_mMUnderworldDropSkullsBossPerHPDrop_C, true);
        }
    }

    lv_droppedIndex = libMapM_gv_mMUnderworldBossGlobeDroppedIndex;
    lv_dropIndexMax = 2;
    if ((UnitIsAlive(libMapM_gv_mMUnderworldBoss) == true)) {
        if ((lv_percent <= 30.0)) {
            lv_dropIndex = 2;
        }
        else if ((lv_percent <= 70.0)) {
            lv_dropIndex = 1;
        }
        else if (true) {
            lv_dropIndex = 0;
        }
    }
    else {
        lv_dropIndex = lv_dropIndexMax;
    }
    if ((lv_dropIndex > lv_droppedIndex)) {
        libMapM_gv_mMUnderworldBossGlobeDroppedIndex = lv_dropIndex;
        auto120A2817_ae = lv_dropIndex;
        auto120A2817_ai = 1;
        lv_itDrop = (lv_droppedIndex + 1);
        for ( ; ( (auto120A2817_ai >= 0 && lv_itDrop <= auto120A2817_ae) || (auto120A2817_ai <= 0 && lv_itDrop >= auto120A2817_ae) ) ; lv_itDrop += auto120A2817_ai ) {
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "RegenGlobeNeutral", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, PointWithOffsetPolar(UnitGetPosition(libMapM_gv_mMUnderworldBoss), RandomFixed(5.0, 6.5), libNtve_gf_RandomAngle()));
        }
    }

}

void libMapM_gf_MMUnderworldDropSkulls (point lp_location, int lp_count, bool lp_forBoss) {
    int autoCA11B253_n;
    int autoCA11B253_i;
    int auto904B67A2_n;
    int auto904B67A2_i;

    // Variable Declarations
    int lv_itSkull;

    // Variable Initialization

    // Implementation
    if ((lp_count <= 0)) {
        return ;
    }

    if ((lp_forBoss == true)) {
        autoCA11B253_n = lp_count;
        for (autoCA11B253_i = 1; autoCA11B253_i <= autoCA11B253_n; autoCA11B253_i += 1) {
            PlayerCreateEffectPoint(libCore_gv_cOMPUTER_Neutral, "DropUnderworldPowerupPersistentLargeArea", lp_location);
        }
    }
    else {
        auto904B67A2_n = lp_count;
        for (auto904B67A2_i = 1; auto904B67A2_i <= auto904B67A2_n; auto904B67A2_i += 1) {
            UnitCreate(1, "ItemUnderworldPowerup", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, RegionRandomPoint(RegionCircle(lp_location, 1.0)), libNtve_gf_RandomAngle());
        }
    }
}

int libMapM_gf_MMUnderworldSkullCollected () {
    // Variable Declarations
    int lv_itGroupIndex;

    // Variable Initialization

    // Implementation
    return (libMapM_gv_mMUnderworldSkullCollected[1] + libMapM_gv_mMUnderworldSkullCollected[2]);
}

bool libMapM_gf_MMUnderworldCleared () {
    // Implementation
    return (libMapM_gv_mMUnderworldSkullTotal <= libMapM_gf_MMUnderworldSkullCollected());
}

void libMapM_gf_MMUnderworldApplySummonedBossScaling (int lp_team, bool lp_displayNumber) {
    // Variable Declarations
    fixed lv_sizeScale;
    int lv_enemyTeam;

    // Variable Initialization

    // Implementation
    if ((libMapM_gv_mMUnderworldScalingTick == 0)) {
        libMapM_gv_mMUnderworldScalingTick = libGame_gv_scalingTicks;
    }

    libGame_gf_UpdateScalingForUnit(libMapM_gv_mMUnderworldSummonedBoss[lp_team], libMapM_gv_mMUnderworldScalingTick, 0);
    UnitBehaviorAdd(libMapM_gv_mMUnderworldSummonedBoss[lp_team], "UnderworldBossSkullStacks", libMapM_gv_mMUnderworldSummonedBoss[lp_team], FixedToInt((-0.0054*libMapM_gv_mMUnderworldSkullCollected[lp_team]*libMapM_gv_mMUnderworldSkullCollected[lp_team]+1.2913*libMapM_gv_mMUnderworldSkullCollected[lp_team])));
    lv_enemyTeam = libGame_gf_EnemyTeam(lp_team);
    if ((libMapM_gf_MMUnderworldSummonedBossBetter(lp_team) == true)) {
        libNtve_gf_SendActorMessageToUnit(libMapM_gv_mMUnderworldSummonedBoss[lp_team], "ModelSwap UnderworldSummonedBossBetter 1");
        lv_sizeScale = 120.0;
        UnitSetScale(libMapM_gv_mMUnderworldSummonedBoss[lp_team], lv_sizeScale, lv_sizeScale, lv_sizeScale);
    }
    else {
        if ((libMapM_gf_MMUnderworldSummonedBossBetter(lv_enemyTeam) == true)) {
            lv_sizeScale = 90.0;
            UnitSetScale(libMapM_gv_mMUnderworldSummonedBoss[lp_team], lv_sizeScale, lv_sizeScale, lv_sizeScale);
        }
        else {
            libNtve_gf_SendActorMessageToUnit(libMapM_gv_mMUnderworldSummonedBoss[lp_team], "ModelSwap UnderworldSummonedBossBetter 1");
            lv_sizeScale = 100.0;
            UnitSetScale(libMapM_gv_mMUnderworldSummonedBoss[lp_team], lv_sizeScale, lv_sizeScale, lv_sizeScale);
        }
    }
}

bool libMapM_gf_MMUnderworldSummonedBossBetter (int lp_team) {
    // Implementation
    if ((libMapM_gv_mMUnderworldSkullCollected[lp_team] > ((libMapM_gv_mMUnderworldSkullTotal + 0) / 2))) {
        return true;
    }

    return false;
}

void libMapM_gf_MMUnderworldSummonBoss () {
    int autoF5122FDC_ae;
    int autoF5122FDC_ai;

    // Variable Declarations
    int lv_itTeam;
    const int lv_xOffset_C = 500;
    const int lv_yOffset_C = 40;

    // Variable Initialization

    // Implementation
    autoF5122FDC_ae = 2;
    autoF5122FDC_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (autoF5122FDC_ai >= 0 && lv_itTeam <= autoF5122FDC_ae) || (autoF5122FDC_ai <= 0 && lv_itTeam >= autoF5122FDC_ae) ) ; lv_itTeam += autoF5122FDC_ai ) {
        libMapM_gf_MMUnderworldSummonBossForTeam(lv_itTeam);
    }
    TriggerExecute(libMapM_gt_MMUnderworldSummonedBossPingVisibility, true, false);
    TriggerExecute(libMapM_gt_MMUnderworldSummonedBossUIBar, true, false);
    while (!(((UnitIsAlive(libMapM_gv_mMUnderworldSummonedBoss[1]) == true) || (UnitIsAlive(libMapM_gv_mMUnderworldSummonedBoss[2]) == true)))) {
        Wait(0.0625, c_timeGame);
    }
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_Mines_Golems_Event", PlayerGroupAll());
    if ((libMapM_gv_mMUnderworldSummonedBossRevive == false)) {
        libMapM_gv_mMUnderworldSummonedBossRevive = true;
        if (((libMapM_gv_mMUnderworldSkullCollected[1] - libMapM_gv_mMUnderworldSkullCollected[2]) >= 5)) {
            libMapM_gf_MMUnderworldTransmissionGolemSummonedQ(1);
        }
        else if (((libMapM_gv_mMUnderworldSkullCollected[1] - libMapM_gv_mMUnderworldSkullCollected[2]) <= -5)) {
            libMapM_gf_MMUnderworldTransmissionGolemSummonedQ(2);
        }
        else if (true) {
            libMapM_gf_MMUnderworldTransmissionGolemSummonedQ(0);
        }
    }
    else {
        if (((libMapM_gv_mMUnderworldSkullCollected[1] - libMapM_gv_mMUnderworldSkullCollected[2]) >= 5)) {
            libMapM_gf_MMUnderworldTransmissionGolemRevivedQ(1);
        }
        else if (((libMapM_gv_mMUnderworldSkullCollected[1] - libMapM_gv_mMUnderworldSkullCollected[2]) <= -5)) {
            libMapM_gf_MMUnderworldTransmissionGolemRevivedQ(2);
        }
        else if (true) {
            libMapM_gf_MMUnderworldTransmissionGolemRevivedQ(0);
        }
    }
}

trigger auto_libMapM_gf_MMUnderworldSummonBossForTeam_Trigger = null;
int auto_libMapM_gf_MMUnderworldSummonBossForTeam_lp_team;

void libMapM_gf_MMUnderworldSummonBossForTeam (int lp_team) {
    auto_libMapM_gf_MMUnderworldSummonBossForTeam_lp_team = lp_team;

    if (auto_libMapM_gf_MMUnderworldSummonBossForTeam_Trigger == null) {
        auto_libMapM_gf_MMUnderworldSummonBossForTeam_Trigger = TriggerCreate("auto_libMapM_gf_MMUnderworldSummonBossForTeam_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMUnderworldSummonBossForTeam_Trigger, false, false);
}

bool auto_libMapM_gf_MMUnderworldSummonBossForTeam_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libMapM_gf_MMUnderworldSummonBossForTeam_lp_team;

    playergroup auto69420B69_g;
    int auto69420B69_p;
    int autoF2FABE67_val;
    int autoD5504BD3_val;

    // Variable Declarations
    int lv_itPlayer;
    int lv_pingPreSpawn1;
    int lv_pingPreSpawn2;
    int lv_pingPreSpawnObserver;
    int lv_enemyTeam;
    actor lv_effect;
    unit lv_itSummonedUnit;
    int lv_ownerPlayer;

    // Variable Initialization
    lv_pingPreSpawn1 = c_invalidPingId;
    lv_pingPreSpawn2 = c_invalidPingId;
    lv_pingPreSpawnObserver = c_invalidPingId;

    // Implementation
    lv_enemyTeam = libGame_gf_EnemyTeam(lp_team);
    auto69420B69_g = libGame_gf_PlayersOnTeamHeroes(lp_team, false); 
    auto69420B69_p = 1;
    for ( ; auto69420B69_p <= PlayerGroupCount(auto69420B69_g) ; auto69420B69_p += (lv_itPlayer == PlayerGroupPlayer(auto69420B69_g, auto69420B69_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto69420B69_g, auto69420B69_p);
        VisRevealArea(lv_itPlayer, RegionCircle(libMapM_gv_mMUnderworldSummonedBossLocation[lp_team], 10.0), (libMapM_gv_mMUnderworldSummonedBossDuration_C + 5.0), true);
    }
    libGame_gf_CalculateSpawnedMinionGoalPoints(libGame_gf_ComputerPlayerInTeam(lp_team), libMapM_gv_mMUnderworldSummonedBossLocation[lp_team]);
    libGame_gf_SendEventMapHauntedMinesBossStartSummoning(lp_team, libMapM_gv_mMUnderworldSummonedBossLocation[lp_team], libGame_gv_spawnedMinionLane);
    libNtve_gf_CreateActorAtPoint("UnderworldSummonedBossSummonEffect", libMapM_gv_mMUnderworldSummonedBossLocation[lp_team]);
    lv_effect = libNtve_gf_ActorLastCreated();
    libMapM_gf_MMUnderworldSummonBossForTeamSound(lp_team);
    SoundPlayAtPointForPlayer(SoundLink("Event_Mines_Boss_Summon_Start", -1), c_maxPlayers, PlayerGroupAll(), libMapM_gv_mMUnderworldSummonedBossLocation[lp_team], 0.0, 100.0, 0.0);
    libCore_gf_CreateMinimapPingStorm(libGame_gf_PlayersOnTeamHeroes(lp_team, false), "StormAlert", libMapM_gv_mMUnderworldSummonedBossLocation[lp_team], ColorWithAlpha(0.00, 100.00, 0.00, 0.00), 0.0);
    lv_pingPreSpawn1 = PingLastCreated();
    libCore_gf_CreateMinimapPingStorm(libGame_gf_PlayersOnTeamHeroes(lv_enemyTeam, false), "StormAlert", libMapM_gv_mMUnderworldSummonedBossLocation[lp_team], ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    lv_pingPreSpawn2 = PingLastCreated();
    autoF2FABE67_val = lp_team;
    if (autoF2FABE67_val == 1) {
        libCore_gf_CreateMinimapPingStorm(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "StormAlert", libMapM_gv_mMUnderworldSummonedBossLocation[lp_team], libCore_gv_cOLORAllyColor, 0.0);
        lv_pingPreSpawnObserver = PingLastCreated();
    }
    else if (autoF2FABE67_val == 2) {
        libCore_gf_CreateMinimapPingStorm(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "StormAlert", libMapM_gv_mMUnderworldSummonedBossLocation[lp_team], libCore_gv_cOLOREnemyColor, 0.0);
        lv_pingPreSpawnObserver = PingLastCreated();
    }
    else {
    }
    Wait(libMapM_gv_mMUnderworldSummonedBossDuration_C, c_timeGame);
    PingDestroy(lv_pingPreSpawn1);
    PingDestroy(lv_pingPreSpawn2);
    PingDestroy(lv_pingPreSpawnObserver);
    UnitRemove(libMapM_gv_mMUnderworldSummonedBossBody[lp_team]);
    libMapM_gv_mMUnderworldSummonedBossBody[lp_team] = null;
    libNtve_gf_UnitCreateFacingPoint(1, "UnderworldSummonedBoss", c_unitCreateIgnorePlacement, libGame_gf_ComputerPlayerInTeam(lp_team), libMapM_gv_mMUnderworldSummonedBossLocation[lp_team], UnitGetPosition(libGame_gv_teams[lv_enemyTeam].lv_core));
    libMapM_gv_mMUnderworldSummonedBoss[lp_team] = UnitLastCreated();
    libNtve_gf_PauseUnit(libMapM_gv_mMUnderworldSummonedBoss[lp_team], true);
    UnitSetState(libMapM_gv_mMUnderworldSummonedBoss[lp_team], c_unitStateTargetable, false);
    libNtve_gf_MakeUnitInvulnerable(libMapM_gv_mMUnderworldSummonedBoss[lp_team], true);
    UnitSetState(libMapM_gv_mMUnderworldSummonedBoss[lp_team], c_unitStateSelectable, false);
    UnitSetState(libMapM_gv_mMUnderworldSummonedBoss[lp_team], c_unitStateStatusBar, false);
    libNtve_gf_PlayAnimation(libNtve_gf_MainActorofUnit(UnitLastCreated()), c_animNameDefault, "Birth", c_animFlagNonLooping, c_animTimeDefault);
    libMapM_gf_MMUnderworldApplySummonedBossScaling(lp_team, false);
    libGame_gf_SendEventMapHauntedMinesBossSummoned(UnitLastCreated());
    StatEventCreate("GraveGolemSpawned");
    StatEventAddDataInt(StatEventLastCreated(), "Event", libMapM_gv_mMUnderworldBossSummonEventCounter);
    StatEventAddDataFixed(StatEventLastCreated(), "TeamID", lp_team);
    StatEventAddDataFixed(StatEventLastCreated(), "SkullCount", libMapM_gv_mMUnderworldSkullCollected[lp_team]);
    StatEventSend(StatEventLastCreated());
    Wait(1.0, c_timeGame);
    if ((lv_effect != null)) {
        libNtve_gf_KillModel(lv_effect);
    }

    PlayerCreateEffectPoint(UnitGetOwner(libMapM_gv_mMUnderworldSummonedBoss[lp_team]), "GolemSpawnKnockbackSearch", UnitGetPosition(libMapM_gv_mMUnderworldSummonedBoss[lp_team]));
    Wait(1.0, c_timeGame);
    UnitSetState(libMapM_gv_mMUnderworldSummonedBoss[lp_team], c_unitStateTargetable, true);
    libNtve_gf_MakeUnitInvulnerable(libMapM_gv_mMUnderworldSummonedBoss[lp_team], false);
    UnitSetState(libMapM_gv_mMUnderworldSummonedBoss[lp_team], c_unitStateSelectable, true);
    UnitSetState(libMapM_gv_mMUnderworldSummonedBoss[lp_team], c_unitStateStatusBar, true);
    lv_ownerPlayer = UnitGetOwner(libMapM_gv_mMUnderworldSummonedBoss[lp_team]);
    libGame_gf_CalculateSpawnedMinionGoalPoints(lv_ownerPlayer, UnitGetPosition(libMapM_gv_mMUnderworldSummonedBoss[lp_team]));
    libAIAI_gf_MinionAIStartMinionAI(-1, libMapM_gv_mMUnderworldSummonedBoss[lp_team], libGame_gv_spawnedMinionLane, libGame_gv_spawnedMinionFirstWaypointIndex, false, true, false, 0, false);
    libNtve_gf_PauseUnit(libMapM_gv_mMUnderworldSummonedBoss[lp_team], false);
    libCore_gf_CreateMinimapPingStorm(libGame_gf_PlayersOnTeamHeroes(lp_team, false), "StormBoss", UnitGetPosition(libMapM_gv_mMUnderworldSummonedBoss[lp_team]), ColorWithAlpha(0.00, 0.00, 100.00, 0.00), 0.0);
    PingSetUnit(PingLastCreated(), libMapM_gv_mMUnderworldSummonedBoss[lp_team]);
    PingSetScale(PingLastCreated(), 0.75);
    libCore_gf_StorePingForUnit(libMapM_gv_mMUnderworldSummonedBoss[lp_team], lp_team, PingLastCreated());
    libCore_gf_CreateMinimapPingStorm(libGame_gf_PlayersOnTeamHeroes(lv_enemyTeam, false), "StormBoss", UnitGetPosition(libMapM_gv_mMUnderworldSummonedBoss[lp_team]), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 0.0);
    PingSetUnit(PingLastCreated(), libMapM_gv_mMUnderworldSummonedBoss[lp_team]);
    PingSetScale(PingLastCreated(), 0.75);
    libCore_gf_StorePingForUnit(libMapM_gv_mMUnderworldSummonedBoss[lp_team], lv_enemyTeam, PingLastCreated());
    autoD5504BD3_val = lp_team;
    if (autoD5504BD3_val == 1) {
        libCore_gf_CreateMinimapPingStorm(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "StormBoss", UnitGetPosition(libMapM_gv_mMUnderworldSummonedBoss[lp_team]), libCore_gv_cOLORAllyColor, 0.0);
    }
    else if (autoD5504BD3_val == 2) {
        libCore_gf_CreateMinimapPingStorm(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], "StormBoss", UnitGetPosition(libMapM_gv_mMUnderworldSummonedBoss[lp_team]), libCore_gv_cOLOREnemyColor, 0.0);
    }
    else {
    }
    PingSetUnit(PingLastCreated(), libMapM_gv_mMUnderworldSummonedBoss[lp_team]);
    PingSetScale(PingLastCreated(), 0.75);
    libCore_gf_StorePingForUnit(libMapM_gv_mMUnderworldSummonedBoss[lp_team], libCore_gv_oBSERVER_ObserverUIPlayer, PingLastCreated());
    Wait(3.0, c_timeGame);
    UnitBehaviorAddPlayer(libMapM_gv_mMUnderworldSummonedBoss[lp_team], "UnderworldSummonedBossStunCastScan", UnitGetOwner(libMapM_gv_mMUnderworldSummonedBoss[lp_team]), 1);
    UnitBehaviorAddPlayer(libMapM_gv_mMUnderworldSummonedBoss[lp_team], "UnderworldSummonedBossRootsCastScan", UnitGetOwner(libMapM_gv_mMUnderworldSummonedBoss[lp_team]), 1);
    while (!((UnitIsAlive(libMapM_gv_mMUnderworldSummonedBoss[lp_team]) == false))) {
        Wait(1.0, c_timeGame);
    }
    PingDestroy(libCore_gf_PingStoredForUnit(libMapM_gv_mMUnderworldSummonedBoss[lp_team], 1));
    libCore_gf_StorePingForUnit(libMapM_gv_mMUnderworldSummonedBoss[lp_team], 1, c_invalidPingId);
    PingDestroy(libCore_gf_PingStoredForUnit(libMapM_gv_mMUnderworldSummonedBoss[lp_team], 2));
    libCore_gf_StorePingForUnit(libMapM_gv_mMUnderworldSummonedBoss[lp_team], 2, c_invalidPingId);
    PingDestroy(libCore_gf_PingStoredForUnit(libMapM_gv_mMUnderworldSummonedBoss[lp_team], libCore_gv_oBSERVER_ObserverUIPlayer));
    libCore_gf_StorePingForUnit(libMapM_gv_mMUnderworldSummonedBoss[lp_team], libCore_gv_oBSERVER_ObserverUIPlayer, c_invalidPingId);
    return true;
}

trigger auto_libMapM_gf_MMUnderworldSummonBossForTeamSound_Trigger = null;
int auto_libMapM_gf_MMUnderworldSummonBossForTeamSound_lp_team;

void libMapM_gf_MMUnderworldSummonBossForTeamSound (int lp_team) {
    auto_libMapM_gf_MMUnderworldSummonBossForTeamSound_lp_team = lp_team;

    if (auto_libMapM_gf_MMUnderworldSummonBossForTeamSound_Trigger == null) {
        auto_libMapM_gf_MMUnderworldSummonBossForTeamSound_Trigger = TriggerCreate("auto_libMapM_gf_MMUnderworldSummonBossForTeamSound_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMUnderworldSummonBossForTeamSound_Trigger, false, false);
}

bool auto_libMapM_gf_MMUnderworldSummonBossForTeamSound_TriggerFunc (bool testConds, bool runActions) {
    int lp_team = auto_libMapM_gf_MMUnderworldSummonBossForTeamSound_lp_team;

    // Implementation
    SoundPlayAtPointForPlayer(SoundLink("Event_Mines_Boss_Summon_Start", -1), c_maxPlayers, PlayerGroupAll(), libMapM_gv_mMUnderworldSummonedBossLocation[lp_team], 1.0, 100.0, 0.0);
    Wait(SoundLengthSync(SoundLink("Event_Mines_Boss_Summon_Start", -1)), c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("Event_Mines_Boss_Summon_Loop", -1), c_maxPlayers, PlayerGroupAll(), libMapM_gv_mMUnderworldSummonedBossLocation[lp_team], 1.0, 100.0, 0.0);
    Wait((libMapM_gv_mMUnderworldSummonedBossDuration_C - SoundLengthSync(SoundLink("Event_Mines_Boss_Summon_Start", -1))), c_timeGame);
    SoundStop(SoundLastPlayed(), true);
    SoundPlayForPlayer(SoundLink("Event_Mines_Boss_Summon_End", -1), c_maxPlayers, libGame_gf_PlayersOnTeamHeroes(lp_team, false), 100.0, 0.0);
    return true;
}

void libMapM_gf_MMUnderworldPrepare () {
    // Implementation
    TriggerEnable(libMapM_gt_MMUnderworldGatesOpened, false);
    TriggerExecute(libMapM_gt_MMUnderworldObjectiveUIHandler, true, false);
    if ((libMapM_gv_mMUnderworldTransmissionUnderworldOpenFirstTime == true)) {
        libMapM_gv_mMUnderworldTransmissionUnderworldOpenFirstTime = false;
        libMapM_gf_MMUnderworldTransmissionUnderworldOpeningFirstQ();
    }
    else {
        libMapM_gf_MMUnderworldTransmissionUnderworldOpeningRepeatQ();
    }
    libMapM_gv_mMUnderworldMineOpenTimes += 1;
    TimerStart(libMapM_gv_mMUnderworldPrepTimer, libMapM_gv_mMUnderworldPrepDuration_C, false, c_timeGame);
}

void libMapM_gf_MMUnderworldStart () {
    unitgroup auto2F8D95FF_g;
    int auto2F8D95FF_u;
    unitgroup auto4BC1A7FC_g;
    int auto4BC1A7FC_u;
    unitgroup auto9AC2EE0F_g;
    int auto9AC2EE0F_u;

    // Variable Declarations
    unit lv_itGate;
    unit lv_itBush;
    int lv_itPlayer;
    int lv_cameraBoundsIndex;

    // Variable Initialization

    // Implementation
    libMapM_gf_MMUnderworldTransmissionUnderworldStartQ();
    libMapM_gv_mMUnderworldOpened = true;
    TriggerExecute(libMapM_gt_MMUnderworldMineScalingSnapshot, true, false);
    if ((libMapM_gv_mMUnderworldOpenFirstTime == true)) {
        auto2F8D95FF_g = libMapM_gv_mMUnderworldGatesAbove;
        auto2F8D95FF_u = 1;
        for ( ; auto2F8D95FF_u <= UnitGroupCount(auto2F8D95FF_g, c_unitCountAll) ; auto2F8D95FF_u += (lv_itGate == UnitGroupUnit(auto2F8D95FF_g, auto2F8D95FF_u)) ) {
            lv_itGate = UnitGroupUnit(auto2F8D95FF_g, auto2F8D95FF_u);
            libNtve_gf_ShowHideDoodadsInRegion(false, RegionCircle(UnitGetPosition(libMapM_gf_MMUnderworldGroundHole(lv_itGate)), 5.0), "Storm_KingsCrest_Emblem_RavenCourt");
            libNtve_gf_SendActorMessageToUnit(lv_itGate, "Signal MinesOpen");
            libNtve_gf_SendActorMessageToUnit(libMapM_gf_MMUnderworldGroundHole(lv_itGate), "Signal MinesOpen");
            libUIUI_gf_AttachHelpButtonToUnit(lv_itGate, libMapM_gt_MMHelpbuttonClicked, StringExternal("Param/Value/lib_MapM_1B3EE760"), 0, 275);
            UnitSetState(lv_itGate, c_unitStateHighlightable, true);
            UnitSetState(lv_itGate, c_unitStateTargetable, true);
            libNtve_gf_CreateUnitsWithDefaultFacing(1, "UnderworldMineEntranceMinimapIcon", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, UnitGetPosition(lv_itGate));
        }
    }

    auto4BC1A7FC_g = libMapM_gv_mMUnderworldGatesAbove;
    auto4BC1A7FC_u = 1;
    for ( ; auto4BC1A7FC_u <= UnitGroupCount(auto4BC1A7FC_g, c_unitCountAll) ; auto4BC1A7FC_u += (lv_itGate == UnitGroupUnit(auto4BC1A7FC_g, auto4BC1A7FC_u)) ) {
        lv_itGate = UnitGroupUnit(auto4BC1A7FC_g, auto4BC1A7FC_u);
        ActorCreate(ActorScopeFromUnit(lv_itGate), "UI_Game_Ping_Mines_Ready", null, null, null);
    }
    auto9AC2EE0F_g = libMapM_gv_mMUnderworldGatesBelow;
    auto9AC2EE0F_u = 1;
    for ( ; auto9AC2EE0F_u <= UnitGroupCount(auto9AC2EE0F_g, c_unitCountAll) ; auto9AC2EE0F_u += (lv_itGate == UnitGroupUnit(auto9AC2EE0F_g, auto9AC2EE0F_u)) ) {
        lv_itGate = UnitGroupUnit(auto9AC2EE0F_g, auto9AC2EE0F_u);
        libNtve_gf_SendActorMessageToUnit(lv_itGate, "SetMinimapVisibility 1");
        libNtve_gf_SendActorMessageToUnit(lv_itGate, "SetMinimapVisibilityAlways 1");
    }
    libMapM_gf_MMUnderworldTurnGroundHoleLightOnOff(true);
    TriggerEnable(libMapM_gt_MMUnderworldGroundHoleVision, true);
    TriggerEnable(libMapM_gt_MMUnderworldSkullPositionValidation, true);
    TriggerExecute(libMapM_gt_MMUnderworldGatesPingHelper, true, false);
    libMapM_gv_mMUnderworldSkullCollected[1] = 0;
    libMapM_gv_mMUnderworldSkullCollected[2] = 0;
    libMapM_gf_MMUnderworldSpawnMonsters();
    TriggerEnable(libMapM_gt_MMUnderworldPlayerMovesCamera, true);
    TriggerExecute(libMapM_gt_MMUnderworldPlayerHeroLocationTracking, true, false);
    libMapM_gv_mMUnderworldOpenFirstTime = false;
    while (true) {
        if ((libMapM_gf_MMUnderworldCleared() == true)) {
            TriggerExecute(libMapM_gt_MMUnderworldCleared, true, false);
            return ;
        }

        Wait(0.5, c_timeGame);
    }
}

void libMapM_gf_MMUnderworldObjectiveUIUpdateText () {
    // Variable Declarations
    int lv_indexTeam;
    int lv_indexTeamEnemy;

    // Variable Initialization

    // Implementation
    libUIUI_gf_MapMechanicsHauntedMinesSetSkullCountForTeam(libMapM_gv_mMUnderworldSkullCollected[libGame_gv_teamOrderIndex_C], libGame_gv_teamOrderIndex_C);
    libUIUI_gf_MapMechanicsHauntedMinesSetSkullCountForTeam(libMapM_gv_mMUnderworldSkullCollected[libGame_gv_teamChaosIndex_C], libGame_gv_teamChaosIndex_C);
    libUIUI_gf_MapMechanicsHauntedMinesSetSkullsRemaining((libMapM_gv_mMUnderworldTotalSkulls_C - libMapM_gv_mMUnderworldSkullCollected[libGame_gv_teamOrderIndex_C] - libMapM_gv_mMUnderworldSkullCollected[libGame_gv_teamChaosIndex_C]));
}

trigger auto_libMapM_gf_MMUnderworldTransmissionUnderworldOpeningFirstQ_Trigger = null;

void libMapM_gf_MMUnderworldTransmissionUnderworldOpeningFirstQ () {
    if (auto_libMapM_gf_MMUnderworldTransmissionUnderworldOpeningFirstQ_Trigger == null) {
        auto_libMapM_gf_MMUnderworldTransmissionUnderworldOpeningFirstQ_Trigger = TriggerCreate("auto_libMapM_gf_MMUnderworldTransmissionUnderworldOpeningFirstQ_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMUnderworldTransmissionUnderworldOpeningFirstQ_Trigger, false, false);
}

bool auto_libMapM_gf_MMUnderworldTransmissionUnderworldOpeningFirstQ_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    UserDataSetInt("MapVOEvent", "Mines - Caverns Open First", "Value", 1, 1);
    ConversationDataRun("HauntedMines", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMapM_gf_MMUnderworldTransmissionUnderworldOpeningRepeatQ_Trigger = null;

void libMapM_gf_MMUnderworldTransmissionUnderworldOpeningRepeatQ () {
    if (auto_libMapM_gf_MMUnderworldTransmissionUnderworldOpeningRepeatQ_Trigger == null) {
        auto_libMapM_gf_MMUnderworldTransmissionUnderworldOpeningRepeatQ_Trigger = TriggerCreate("auto_libMapM_gf_MMUnderworldTransmissionUnderworldOpeningRepeatQ_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMUnderworldTransmissionUnderworldOpeningRepeatQ_Trigger, false, false);
}

bool auto_libMapM_gf_MMUnderworldTransmissionUnderworldOpeningRepeatQ_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    UserDataSetInt("MapVOEvent", "Mines - Caverns Open Repeat", "Value", 1, 1);
    ConversationDataRun("HauntedMines", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMapM_gf_MMUnderworldTransmissionUnderworldStartQ_Trigger = null;

void libMapM_gf_MMUnderworldTransmissionUnderworldStartQ () {
    if (auto_libMapM_gf_MMUnderworldTransmissionUnderworldStartQ_Trigger == null) {
        auto_libMapM_gf_MMUnderworldTransmissionUnderworldStartQ_Trigger = TriggerCreate("auto_libMapM_gf_MMUnderworldTransmissionUnderworldStartQ_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMUnderworldTransmissionUnderworldStartQ_Trigger, false, false);
}

bool auto_libMapM_gf_MMUnderworldTransmissionUnderworldStartQ_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    UserDataSetInt("MapVOEvent", "Mines - Undead Spawn", "Value", 1, 1);
    ConversationDataRun("HauntedMines", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMapM_gf_MMUnderworldTransmissionUnderworldClearedQ_Trigger = null;

void libMapM_gf_MMUnderworldTransmissionUnderworldClearedQ () {
    if (auto_libMapM_gf_MMUnderworldTransmissionUnderworldClearedQ_Trigger == null) {
        auto_libMapM_gf_MMUnderworldTransmissionUnderworldClearedQ_Trigger = TriggerCreate("auto_libMapM_gf_MMUnderworldTransmissionUnderworldClearedQ_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMUnderworldTransmissionUnderworldClearedQ_Trigger, false, false);
}

bool auto_libMapM_gf_MMUnderworldTransmissionUnderworldClearedQ_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    UserDataSetInt("MapVOEvent", "Mines - Undead Cleared", "Value", 1, 1);
    ConversationDataRun("HauntedMines", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMapM_gf_MMUnderworldTransmissionGolemSummonedQ_Trigger = null;
int auto_libMapM_gf_MMUnderworldTransmissionGolemSummonedQ_lp_strongerTeam;

void libMapM_gf_MMUnderworldTransmissionGolemSummonedQ (int lp_strongerTeam) {
    auto_libMapM_gf_MMUnderworldTransmissionGolemSummonedQ_lp_strongerTeam = lp_strongerTeam;

    if (auto_libMapM_gf_MMUnderworldTransmissionGolemSummonedQ_Trigger == null) {
        auto_libMapM_gf_MMUnderworldTransmissionGolemSummonedQ_Trigger = TriggerCreate("auto_libMapM_gf_MMUnderworldTransmissionGolemSummonedQ_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMUnderworldTransmissionGolemSummonedQ_Trigger, false, false);
}

bool auto_libMapM_gf_MMUnderworldTransmissionGolemSummonedQ_TriggerFunc (bool testConds, bool runActions) {
    int lp_strongerTeam = auto_libMapM_gf_MMUnderworldTransmissionGolemSummonedQ_lp_strongerTeam;

    int auto46508623_val;

    // Variable Declarations
    playergroup lv_orderPlayerGroup;
    playergroup lv_chaosPlayerGroup;
    playergroup lv_observerPlayer;

    // Variable Initialization
    lv_orderPlayerGroup = PlayerGroupEmpty();
    lv_chaosPlayerGroup = PlayerGroupEmpty();
    lv_observerPlayer = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("HauntedMines", ("Left"));
    ConversationDataLineResetPlayers("HauntedMines", ("Right"));
    ConversationDataLineResetPlayers("HauntedMines", ("Observer"));
    auto46508623_val = lp_strongerTeam;
    if (auto46508623_val == 0) {
        UserDataSetInt("MapVOEvent", "Mines - Golem First - Equal", "Value", 1, 1);
    }
    else if (auto46508623_val == libGame_gv_teamOrderIndex_C) {
        UserDataSetInt("MapVOEvent", "Mines - Golem First - Left Strong", "Value", 1, 1);
    }
    else if (auto46508623_val == libGame_gv_teamChaosIndex_C) {
        UserDataSetInt("MapVOEvent", "Mines - Golem First - Right Strong", "Value", 1, 1);
    }
    else {
    }
    lv_orderPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_chaosPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_observerPlayer = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("HauntedMines", ("Left"), lv_orderPlayerGroup);
    ConversationDataLineSetPlayers("HauntedMines", ("Right"), lv_chaosPlayerGroup);
    ConversationDataLineSetPlayers("HauntedMines", ("Observer"), lv_observerPlayer);
    ConversationDataRun("HauntedMines", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMapM_gf_MMUnderworldTransmissionGolemRevivedQ_Trigger = null;
int auto_libMapM_gf_MMUnderworldTransmissionGolemRevivedQ_lp_strongerTeam;

void libMapM_gf_MMUnderworldTransmissionGolemRevivedQ (int lp_strongerTeam) {
    auto_libMapM_gf_MMUnderworldTransmissionGolemRevivedQ_lp_strongerTeam = lp_strongerTeam;

    if (auto_libMapM_gf_MMUnderworldTransmissionGolemRevivedQ_Trigger == null) {
        auto_libMapM_gf_MMUnderworldTransmissionGolemRevivedQ_Trigger = TriggerCreate("auto_libMapM_gf_MMUnderworldTransmissionGolemRevivedQ_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMUnderworldTransmissionGolemRevivedQ_Trigger, false, false);
}

bool auto_libMapM_gf_MMUnderworldTransmissionGolemRevivedQ_TriggerFunc (bool testConds, bool runActions) {
    int lp_strongerTeam = auto_libMapM_gf_MMUnderworldTransmissionGolemRevivedQ_lp_strongerTeam;

    int autoC1CA195F_val;

    // Variable Declarations
    playergroup lv_orderPlayerGroup;
    playergroup lv_chaosPlayerGroup;
    playergroup lv_observerPlayer;

    // Variable Initialization
    lv_orderPlayerGroup = PlayerGroupEmpty();
    lv_chaosPlayerGroup = PlayerGroupEmpty();
    lv_observerPlayer = PlayerGroupEmpty();

    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    ConversationDataLineResetPlayers("HauntedMines", ("Left"));
    ConversationDataLineResetPlayers("HauntedMines", ("Right"));
    ConversationDataLineResetPlayers("HauntedMines", ("Observer"));
    autoC1CA195F_val = lp_strongerTeam;
    if (autoC1CA195F_val == 0) {
        UserDataSetInt("MapVOEvent", "Mines - Golem Repeat - Equal", "Value", 1, 1);
    }
    else if (autoC1CA195F_val == libGame_gv_teamOrderIndex_C) {
        UserDataSetInt("MapVOEvent", "Mines - Golem Repeat - Left Strong", "Value", 1, 1);
    }
    else if (autoC1CA195F_val == libGame_gv_teamChaosIndex_C) {
        UserDataSetInt("MapVOEvent", "Mines - Golem Repeat - Right Strong", "Value", 1, 1);
    }
    else {
    }
    lv_orderPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamOrderIndex_C, false);
    lv_chaosPlayerGroup = libGame_gf_PlayersOnTeamHeroes(libGame_gv_teamChaosIndex_C, false);
    lv_observerPlayer = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer];
    ConversationDataLineSetPlayers("HauntedMines", ("Left"), lv_orderPlayerGroup);
    ConversationDataLineSetPlayers("HauntedMines", ("Right"), lv_chaosPlayerGroup);
    ConversationDataLineSetPlayers("HauntedMines", ("Observer"), lv_observerPlayer);
    ConversationDataRun("HauntedMines", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

trigger auto_libMapM_gf_MMUnderworldTransmissionGolemDefeatedQ_Trigger = null;

void libMapM_gf_MMUnderworldTransmissionGolemDefeatedQ () {
    if (auto_libMapM_gf_MMUnderworldTransmissionGolemDefeatedQ_Trigger == null) {
        auto_libMapM_gf_MMUnderworldTransmissionGolemDefeatedQ_Trigger = TriggerCreate("auto_libMapM_gf_MMUnderworldTransmissionGolemDefeatedQ_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMUnderworldTransmissionGolemDefeatedQ_Trigger, false, false);
}

bool auto_libMapM_gf_MMUnderworldTransmissionGolemDefeatedQ_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    if ((libGame_gv_gameOver == true)) {
        return true;
    }

    TriggerQueueEnter();
    UserDataResetType("MapVOEvent");
    UserDataSetInt("MapVOEvent", "Mines - Golems Killed", "Value", 1, 1);
    ConversationDataRun("HauntedMines", PlayerGroupAll(), c_conversationSkipNone, false);
    libCore_gf_WaitForConversationToFinish();
    TriggerQueueExit();
    return true;
}

void libMapM_gf_MMHoCLivingTreesInitializeLivingTreesArray () {
    unitgroup auto466B25EA_g;
    int auto466B25EA_u;
    unitgroup autoA6DA5016_g;
    int autoA6DA5016_u;
    unitgroup auto4F880D75_g;
    int auto4F880D75_u;
    unitgroup auto916F650C_g;
    int auto916F650C_u;
    unitgroup auto7416F5E5_g;
    int auto7416F5E5_u;

    // Variable Declarations
    unit lv_tree;
    int lv_i;

    // Variable Initialization

    // Implementation
    libMapM_gv_mMHoCLivingTreesNumberofLivingTrees = 0;
    auto466B25EA_g = UnitGroup("StormAshenvaleForestBlocker1x1", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto466B25EA_u = 1;
    for ( ; auto466B25EA_u <= UnitGroupCount(auto466B25EA_g, c_unitCountAll) ; auto466B25EA_u += (lv_tree == UnitGroupUnit(auto466B25EA_g, auto466B25EA_u)) ) {
        lv_tree = UnitGroupUnit(auto466B25EA_g, auto466B25EA_u);
        lv_i += 1;
        libMapM_gv_mMHoCLivingTrees[lv_i].lv_treeUnit = lv_tree;
        libMapM_gv_mMHoCLivingTrees[lv_i].lv_treeType = UnitGetType(lv_tree);
        libMapM_gv_mMHoCLivingTrees[lv_i].lv_location = UnitGetPosition(lv_tree);
        libMapM_gv_mMHoCLivingTrees[lv_i].lv_facing = UnitGetFacing(lv_tree);
    }
    autoA6DA5016_g = UnitGroup("StormAshenvaleForestBlocker1x1Diagonal", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoA6DA5016_u = 1;
    for ( ; autoA6DA5016_u <= UnitGroupCount(autoA6DA5016_g, c_unitCountAll) ; autoA6DA5016_u += (lv_tree == UnitGroupUnit(autoA6DA5016_g, autoA6DA5016_u)) ) {
        lv_tree = UnitGroupUnit(autoA6DA5016_g, autoA6DA5016_u);
        lv_i += 1;
        libMapM_gv_mMHoCLivingTrees[lv_i].lv_treeUnit = lv_tree;
        libMapM_gv_mMHoCLivingTrees[lv_i].lv_treeType = UnitGetType(lv_tree);
        libMapM_gv_mMHoCLivingTrees[lv_i].lv_location = UnitGetPosition(lv_tree);
        libMapM_gv_mMHoCLivingTrees[lv_i].lv_facing = UnitGetFacing(lv_tree);
    }
    auto4F880D75_g = UnitGroup("StormAshenvaleForestBlocker2x2", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto4F880D75_u = 1;
    for ( ; auto4F880D75_u <= UnitGroupCount(auto4F880D75_g, c_unitCountAll) ; auto4F880D75_u += (lv_tree == UnitGroupUnit(auto4F880D75_g, auto4F880D75_u)) ) {
        lv_tree = UnitGroupUnit(auto4F880D75_g, auto4F880D75_u);
        lv_i += 1;
        libMapM_gv_mMHoCLivingTrees[lv_i].lv_treeUnit = lv_tree;
        libMapM_gv_mMHoCLivingTrees[lv_i].lv_treeType = UnitGetType(lv_tree);
        libMapM_gv_mMHoCLivingTrees[lv_i].lv_location = UnitGetPosition(lv_tree);
        libMapM_gv_mMHoCLivingTrees[lv_i].lv_facing = UnitGetFacing(lv_tree);
    }
    auto916F650C_g = UnitGroup("StormAshenvaleForestBlocker3x3", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto916F650C_u = 1;
    for ( ; auto916F650C_u <= UnitGroupCount(auto916F650C_g, c_unitCountAll) ; auto916F650C_u += (lv_tree == UnitGroupUnit(auto916F650C_g, auto916F650C_u)) ) {
        lv_tree = UnitGroupUnit(auto916F650C_g, auto916F650C_u);
        lv_i += 1;
        libMapM_gv_mMHoCLivingTrees[lv_i].lv_treeUnit = lv_tree;
        libMapM_gv_mMHoCLivingTrees[lv_i].lv_treeType = UnitGetType(lv_tree);
        libMapM_gv_mMHoCLivingTrees[lv_i].lv_location = UnitGetPosition(lv_tree);
        libMapM_gv_mMHoCLivingTrees[lv_i].lv_facing = UnitGetFacing(lv_tree);
    }
    auto7416F5E5_g = UnitGroup("StormAshenvaleForestBlocker6x6", c_playerAny, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto7416F5E5_u = 1;
    for ( ; auto7416F5E5_u <= UnitGroupCount(auto7416F5E5_g, c_unitCountAll) ; auto7416F5E5_u += (lv_tree == UnitGroupUnit(auto7416F5E5_g, auto7416F5E5_u)) ) {
        lv_tree = UnitGroupUnit(auto7416F5E5_g, auto7416F5E5_u);
        lv_i += 1;
        libMapM_gv_mMHoCLivingTrees[lv_i].lv_treeUnit = lv_tree;
        libMapM_gv_mMHoCLivingTrees[lv_i].lv_treeType = UnitGetType(lv_tree);
        libMapM_gv_mMHoCLivingTrees[lv_i].lv_location = UnitGetPosition(lv_tree);
        libMapM_gv_mMHoCLivingTrees[lv_i].lv_facing = UnitGetFacing(lv_tree);
    }
    libMapM_gv_mMHoCLivingTreesNumberofLivingTrees = lv_i;
}

void libMapM_gf_MMHoCForestInitializeForestsArray () {
    int autoA60ED65D_ae;
    int autoA60ED65D_ai;
    int autoA6C9A99D_ae;
    int autoA6C9A99D_ai;
    int auto8043FF30_ae;
    int auto8043FF30_ai;
    int auto296BE7CE_ae;
    int auto296BE7CE_ai;

    // Variable Declarations
    int lv_forest;
    int lv_ancient;
    int lv_lane;
    int lv_waypoint;

    // Variable Initialization

    // Implementation
    autoA60ED65D_ae = libMapM_gv_mMHoCForestNumberofForests;
    autoA60ED65D_ai = 1;
    lv_forest = 1;
    for ( ; ( (autoA60ED65D_ai >= 0 && lv_forest <= autoA60ED65D_ae) || (autoA60ED65D_ai <= 0 && lv_forest >= autoA60ED65D_ae) ) ; lv_forest += autoA60ED65D_ai ) {
        autoA6C9A99D_ae = libGame_gv_laneCount;
        autoA6C9A99D_ai = 1;
        lv_lane = 1;
        for ( ; ( (autoA6C9A99D_ai >= 0 && lv_lane <= autoA6C9A99D_ae) || (autoA6C9A99D_ai <= 0 && lv_lane >= autoA6C9A99D_ae) ) ; lv_lane += autoA6C9A99D_ai ) {
            auto8043FF30_ae = libGame_gv_laneData[lv_lane].lv_waypointCount;
            auto8043FF30_ai = 1;
            lv_waypoint = 1;
            for ( ; ( (auto8043FF30_ai >= 0 && lv_waypoint <= auto8043FF30_ae) || (auto8043FF30_ai <= 0 && lv_waypoint >= auto8043FF30_ae) ) ; lv_waypoint += auto8043FF30_ai ) {
                if ((libGame_gv_laneData[lv_lane].lv_waypoints[lv_waypoint] == libMapM_gv_mMHoCForests[lv_forest].lv_mapDataLaneAggroPointOrder)) {
                    libMapM_gv_mMHoCForests[lv_forest].lv_orderAggroLane = lv_lane;
                    libMapM_gv_mMHoCForests[lv_forest].lv_orderAggroWaypointIndex = lv_waypoint;
                }

                if ((libGame_gv_laneData[lv_lane].lv_waypoints[lv_waypoint] == libMapM_gv_mMHoCForests[lv_forest].lv_mapDataLaneAggroPointChaos)) {
                    libMapM_gv_mMHoCForests[lv_forest].lv_chaosAggroLane = lv_lane;
                    libMapM_gv_mMHoCForests[lv_forest].lv_chaosAggroWaypointIndex = lv_waypoint;
                }

            }
        }
        ActorRegionCreate(null, "TriggerRegion", libMapM_gv_mMHoCForests[lv_forest].lv_mapDataRegion);
        libMapM_gv_mMHoCForests[lv_forest].lv_actorRegion = libNtve_gf_ActorLastCreated();
        auto296BE7CE_ae = libMapM_gv_mMHoCForests[lv_forest].lv_mapDataNumberofAncients;
        auto296BE7CE_ai = 1;
        lv_ancient = 1;
        for ( ; ( (auto296BE7CE_ai >= 0 && lv_ancient <= auto296BE7CE_ae) || (auto296BE7CE_ai <= 0 && lv_ancient >= auto296BE7CE_ae) ) ; lv_ancient += auto296BE7CE_ai ) {
            libMapM_gv_mMHoCForests[lv_forest].lv_ancientsUnitTypes[lv_ancient] = UnitGetType(libMapM_gv_mMHoCForests[lv_forest].lv_mapDataAncients[lv_ancient]);
            libMapM_gv_mMHoCForests[lv_forest].lv_ancientsPoints[lv_ancient] = UnitGetPosition(libMapM_gv_mMHoCForests[lv_forest].lv_mapDataAncients[lv_ancient]);
            libMapM_gv_mMHoCForests[lv_forest].lv_ancientsFacings[lv_ancient] = UnitGetFacing(libMapM_gv_mMHoCForests[lv_forest].lv_mapDataAncients[lv_ancient]);
        }
    }
}

trigger auto_libMapM_gf_MMHoCLivingTreesRemoveAlltheTrees_Trigger = null;

void libMapM_gf_MMHoCLivingTreesRemoveAlltheTrees () {
    if (auto_libMapM_gf_MMHoCLivingTreesRemoveAlltheTrees_Trigger == null) {
        auto_libMapM_gf_MMHoCLivingTreesRemoveAlltheTrees_Trigger = TriggerCreate("auto_libMapM_gf_MMHoCLivingTreesRemoveAlltheTrees_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMHoCLivingTreesRemoveAlltheTrees_Trigger, false, false);
}

bool auto_libMapM_gf_MMHoCLivingTreesRemoveAlltheTrees_TriggerFunc (bool testConds, bool runActions) {
    int auto63BA1F33_ae;
    int auto63BA1F33_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    auto63BA1F33_ae = libMapM_gv_mMHoCLivingTreesNumberofLivingTrees;
    auto63BA1F33_ai = 1;
    lv_i = 1;
    for ( ; ( (auto63BA1F33_ai >= 0 && lv_i <= auto63BA1F33_ae) || (auto63BA1F33_ai <= 0 && lv_i >= auto63BA1F33_ae) ) ; lv_i += auto63BA1F33_ai ) {
        UnitRemove(libMapM_gv_mMHoCLivingTrees[lv_i].lv_treeUnit);
    }
    return true;
}

trigger auto_libMapM_gf_MMHoCForestRegrowth_Trigger = null;

void libMapM_gf_MMHoCForestRegrowth () {
    if (auto_libMapM_gf_MMHoCForestRegrowth_Trigger == null) {
        auto_libMapM_gf_MMHoCForestRegrowth_Trigger = TriggerCreate("auto_libMapM_gf_MMHoCForestRegrowth_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMHoCForestRegrowth_Trigger, false, false);
}

bool auto_libMapM_gf_MMHoCForestRegrowth_TriggerFunc (bool testConds, bool runActions) {
    // Implementation
    libMapM_gf_MMHoCLivingTreesRegrowthWarning();
    Wait(libMapM_gv_mMHoCForestRegrowthWarningTime, c_timeGame);
    libMapM_gf_MMHoCLivingTreesClearOuttheForestAreas();
    libMapM_gf_MMHoCLivingTreesRemaketheTreesandAncients();
    return true;
}

void libMapM_gf_MMHoCLivingTreesRegrowthWarning () {
    int autoE7085641_ae;
    int autoE7085641_ai;

    // Variable Declarations
    int lv_forest;

    // Variable Initialization

    // Implementation
    UIDisplayMessage(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, c_messageAreaDirective, TextExpressionAssemble("Param/Expression/lib_MapM_A8CDC3CE"));
    UIDisplayMessage(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, c_messageAreaDirective, TextExpressionAssemble("Param/Expression/lib_MapM_62CF8A7E"));
    UIDisplayMessage(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], c_messageAreaDirective, TextExpressionAssemble("Param/Expression/lib_MapM_77B68C17"));
    autoE7085641_ae = libMapM_gv_mMHoCForestNumberofForests;
    autoE7085641_ai = 1;
    lv_forest = 1;
    for ( ; ( (autoE7085641_ai >= 0 && lv_forest <= autoE7085641_ae) || (autoE7085641_ai <= 0 && lv_forest >= autoE7085641_ae) ) ; lv_forest += autoE7085641_ai ) {
        libNtve_gf_CreateActorAtPoint("StormAshenvaleForestRegrowthWarning", RegionGetCenter(libMapM_gv_mMHoCForests[lv_forest].lv_mapDataRegion));
    }
}

void libMapM_gf_MMHoCLivingTreesClearOuttheForestAreas () {
    int auto1221AED2_ae;
    int auto1221AED2_ai;
    unitgroup auto8500FAE7_g;
    int auto8500FAE7_u;

    // Variable Declarations
    int lv_forest;
    unit lv_u;
    point lv_pushOutPoint;

    // Variable Initialization

    // Implementation
    auto1221AED2_ae = libMapM_gv_mMHoCForestNumberofForests;
    auto1221AED2_ai = 1;
    lv_forest = 1;
    for ( ; ( (auto1221AED2_ai >= 0 && lv_forest <= auto1221AED2_ae) || (auto1221AED2_ai <= 0 && lv_forest >= auto1221AED2_ae) ) ; lv_forest += auto1221AED2_ai ) {
        auto8500FAE7_g = UnitGroup(null, c_playerAny, libMapM_gv_mMHoCForests[lv_forest].lv_mapDataRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        auto8500FAE7_u = 1;
        for ( ; auto8500FAE7_u <= UnitGroupCount(auto8500FAE7_g, c_unitCountAll) ; auto8500FAE7_u += (lv_u == UnitGroupUnit(auto8500FAE7_g, auto8500FAE7_u)) ) {
            lv_u = UnitGroupUnit(auto8500FAE7_g, auto8500FAE7_u);
            if ((UnitTypeTestAttribute(UnitGetType(lv_u), c_unitAttributeHeroic) == true)) {
                lv_pushOutPoint = UnitTypePlacementFromPoint(UnitGetType(lv_u), UnitGetOwner(lv_u), UnitGetPosition(lv_u), 100.0);
                UnitSetPosition(lv_u, lv_pushOutPoint, false);
            }
            else {
                UnitKill(lv_u);
            }
        }
    }
}

void libMapM_gf_MMHoCLivingTreesRemaketheTreesandAncients () {
    int auto9CC0B5BD_ae;
    int auto9CC0B5BD_ai;
    int auto28F0C959_ae;
    int auto28F0C959_ai;
    int auto2F4704C9_ae;
    int auto2F4704C9_ai;

    // Variable Declarations
    int lv_i;
    int lv_forest;
    int lv_ancient;

    // Variable Initialization

    // Implementation
    auto9CC0B5BD_ae = libMapM_gv_mMHoCLivingTreesNumberofLivingTrees;
    auto9CC0B5BD_ai = 1;
    lv_i = 1;
    for ( ; ( (auto9CC0B5BD_ai >= 0 && lv_i <= auto9CC0B5BD_ae) || (auto9CC0B5BD_ai <= 0 && lv_i >= auto9CC0B5BD_ae) ) ; lv_i += auto9CC0B5BD_ai ) {
        UnitCreate(1, libMapM_gv_mMHoCLivingTrees[lv_i].lv_treeType, c_unitCreateIgnorePlacement, 0, libMapM_gv_mMHoCLivingTrees[lv_i].lv_location, libMapM_gv_mMHoCLivingTrees[lv_i].lv_facing);
        libMapM_gv_mMHoCLivingTrees[lv_i].lv_treeUnit = UnitLastCreated();
    }
    auto28F0C959_ae = libMapM_gv_mMHoCForestNumberofForests;
    auto28F0C959_ai = 1;
    lv_forest = 1;
    for ( ; ( (auto28F0C959_ai >= 0 && lv_forest <= auto28F0C959_ae) || (auto28F0C959_ai <= 0 && lv_forest >= auto28F0C959_ae) ) ; lv_forest += auto28F0C959_ai ) {
        ActorRegionSend(libMapM_gv_mMHoCForests[lv_forest].lv_actorRegion, c_actorIntersectAgainstCenter, "AnimClear Death", "Doodad", "");
        ActorRegionSend(libMapM_gv_mMHoCForests[lv_forest].lv_actorRegion, c_actorIntersectAgainstCenter, "AnimPlay Birth Birth", "Doodad", "");
        auto2F4704C9_ae = libMapM_gv_mMHoCForests[lv_forest].lv_mapDataNumberofAncients;
        auto2F4704C9_ai = 1;
        lv_ancient = 1;
        for ( ; ( (auto2F4704C9_ai >= 0 && lv_ancient <= auto2F4704C9_ae) || (auto2F4704C9_ai <= 0 && lv_ancient >= auto2F4704C9_ae) ) ; lv_ancient += auto2F4704C9_ai ) {
            UnitCreate(1, libMapM_gv_mMHoCForests[lv_forest].lv_ancientsUnitTypes[lv_ancient], c_unitCreateIgnorePlacement, 0, libMapM_gv_mMHoCForests[lv_forest].lv_ancientsPoints[lv_ancient], libMapM_gv_mMHoCForests[lv_forest].lv_ancientsFacings[lv_ancient]);
            libMapM_gv_mMHoCForests[lv_forest].lv_mapDataAncients[lv_ancient] = UnitLastCreated();
        }
    }
}

void libMapM_gf_MMHoCForestActivated (int lp_camp, int lp_owner) {
    int auto1F6FD573_ae;
    int auto1F6FD573_ai;

    // Variable Declarations
    int lv_forest;

    // Variable Initialization

    // Implementation
    libMapM_gf_MMHoCLivingTreesRemoveAlltheTrees();
    SoundPlayForPlayer(SoundLink("StormAshenvaleHornofCenarius", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    if ((lp_owner == libCore_gv_cOMPUTER_TeamOrder)) {
        UIDisplayMessage(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, c_messageAreaDirective, TextExpressionAssemble("Param/Expression/lib_MapM_570123DA"));
        UIDisplayMessage(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, c_messageAreaDirective, TextExpressionAssemble("Param/Expression/lib_MapM_0B837E9D"));
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], c_messageAreaDirective, TextExpressionAssemble("Param/Expression/lib_MapM_7337ABBE"));
    }
    else {
        UIDisplayMessage(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup, c_messageAreaDirective, TextExpressionAssemble("Param/Expression/lib_MapM_0C957170"));
        UIDisplayMessage(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup, c_messageAreaDirective, TextExpressionAssemble("Param/Expression/lib_MapM_DB8BA93B"));
        UIDisplayMessage(libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], c_messageAreaDirective, TextExpressionAssemble("Param/Expression/lib_MapM_33B45634"));
    }
    libMapM_gv_mMHoCForestActiveAncients = UnitGroupEmpty();
    auto1F6FD573_ae = libMapM_gv_mMHoCForestNumberofForests;
    auto1F6FD573_ai = 1;
    lv_forest = 1;
    for ( ; ( (auto1F6FD573_ai >= 0 && lv_forest <= auto1F6FD573_ae) || (auto1F6FD573_ai <= 0 && lv_forest >= auto1F6FD573_ae) ) ; lv_forest += auto1F6FD573_ai ) {
        libMapM_gf_MMHoCForestDestroyForestsTrees(lv_forest);
        libMapM_gf_MMHoCForestActivateAncientsforForest(lp_camp, lp_owner, lv_forest);
    }
    TriggerEnable(libMapM_gt_MMHoCForestAncientDies, true);
}

trigger auto_libMapM_gf_MMHoCForestDestroyForestsTrees_Trigger = null;
int auto_libMapM_gf_MMHoCForestDestroyForestsTrees_lp_forest;

void libMapM_gf_MMHoCForestDestroyForestsTrees (int lp_forest) {
    auto_libMapM_gf_MMHoCForestDestroyForestsTrees_lp_forest = lp_forest;

    if (auto_libMapM_gf_MMHoCForestDestroyForestsTrees_Trigger == null) {
        auto_libMapM_gf_MMHoCForestDestroyForestsTrees_Trigger = TriggerCreate("auto_libMapM_gf_MMHoCForestDestroyForestsTrees_TriggerFunc");
    }

    TriggerExecute(auto_libMapM_gf_MMHoCForestDestroyForestsTrees_Trigger, false, false);
}

bool auto_libMapM_gf_MMHoCForestDestroyForestsTrees_TriggerFunc (bool testConds, bool runActions) {
    int lp_forest = auto_libMapM_gf_MMHoCForestDestroyForestsTrees_lp_forest;

    // Implementation
    ActorRegionSend(libMapM_gv_mMHoCForests[lp_forest].lv_actorRegion, c_actorIntersectAgainstCenter, "AnimPlay Death Death PlayForever,NonLooping", "Doodad", "");
    return true;
}

void libMapM_gf_MMHoCForestActivateAncientsforForest (int lp_camp, int lp_owner, int lp_forest) {
    int autoE968D45F_ae;
    int autoE968D45F_ai;

    // Variable Declarations
    int lv_i;
    int lv_team;
    point lv_rallyPoint;
    unit lv_ancient;
    unit lv_minion;
    int lv_aggroLane;
    int lv_aggroWaypointIndex;

    // Variable Initialization

    // Implementation
    lv_team = libGame_gf_TeamNumberOfPlayer(lp_owner);
    if ((lv_team == libGame_gv_teamOrderIndex_C)) {
        lv_rallyPoint = libMapM_gv_jungleCreepCamps[lp_camp].lv_mercOrderMercCampPathing[1].lv_waypoint;
    }
    else {
        lv_rallyPoint = libMapM_gv_jungleCreepCamps[lp_camp].lv_mercChaosMercCampPathing[1].lv_waypoint;
    }
    autoE968D45F_ae = libMapM_gv_mMHoCForests[lp_forest].lv_mapDataNumberofAncients;
    autoE968D45F_ai = 1;
    lv_i = 1;
    for ( ; ( (autoE968D45F_ai >= 0 && lv_i <= autoE968D45F_ae) || (autoE968D45F_ai <= 0 && lv_i >= autoE968D45F_ae) ) ; lv_i += autoE968D45F_ai ) {
        lv_ancient = libMapM_gv_mMHoCForests[lp_forest].lv_mapDataAncients[lv_i];
        UnitGroupAdd(libMapM_gv_mMHoCForestActiveAncients, lv_ancient);
        UnitSetOwner(lv_ancient, lp_owner, true);
        UnitBehaviorAdd(lv_ancient, "StormAshenvaleAncientWakeup", lv_ancient, 1);
        UnitCreateEffectUnit(lv_ancient, "StormAshenvaleRevealAncientEffect", lv_ancient);
        if ((lp_owner == libCore_gv_cOMPUTER_TeamOrder)) {
            lv_aggroLane = libMapM_gv_mMHoCForests[lp_forest].lv_orderAggroLane;
            lv_aggroWaypointIndex = libMapM_gv_mMHoCForests[lp_forest].lv_orderAggroWaypointIndex;
        }
        else {
            lv_aggroLane = libMapM_gv_mMHoCForests[lp_forest].lv_chaosAggroLane;
            lv_aggroWaypointIndex = libMapM_gv_mMHoCForests[lp_forest].lv_chaosAggroWaypointIndex;
        }
        lv_minion = lv_ancient;
        libAIAI_gf_MinionAIStartMinionAI(-1, lv_minion, lv_aggroLane, lv_aggroWaypointIndex, false, false, false, 0, false);
        UnitSetCustomValue(lv_minion, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_JungleLanerCreepCampIndex), IntToFixed(lp_camp));
    }
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include Map Mechanics
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_IncludeMapMechanics_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_IncludeMapMechanics_Init () {
    libMapM_gt_IncludeMapMechanics = TriggerCreate("libMapM_gt_IncludeMapMechanics_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Jungle Camp Defender Data
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_DataJungleCampDefenderData_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libMapM_gt_DataJungleCampDefenderKnights, true, true);
    TriggerExecute(libMapM_gt_DataJungleCampDefenderGraveGolem, true, true);
    TriggerExecute(libMapM_gt_DataJungleCampDefenderDoubloons, true, true);
    TriggerExecute(libMapM_gt_DataJungleCampDefenderSiegeGiants, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_DataJungleCampDefenderData_Init () {
    libMapM_gt_DataJungleCampDefenderData = TriggerCreate("libMapM_gt_DataJungleCampDefenderData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Jungle Camp Defender Doubloons
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_DataJungleCampDefenderDoubloons_Func (bool testConds, bool runActions) {
    int auto4811CEB5_ae;
    int auto4811CEB5_ai;

    // Variable Declarations
    int lv_campType;
    int lv_rank;
    int lv_rankToStartScaling;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campType = (libMapM_ge_JungleCampDefenderTypes_Doubloons);
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campIsSoloable = true;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_defendersCoweronDeath = false;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_initialSpawnDelay = 90.0;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_respawnTime = 150.0;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_numberOfCreeps = 2;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_creepUnitTypes[1] = "SkeletalPirate";
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_creepUnitTypes[2] = "SkeletalPirate";
    libMapM_gf_DataInitializeScalingDataForDefender(libMapM_ge_JungleCampDefenderTypes_Doubloons, "DoubloonDefenderScaling");
    lv_rankToStartScaling = 2;
    auto4811CEB5_ae = (lv_rankToStartScaling - 1);
    auto4811CEB5_ai = 1;
    lv_rank = 0;
    for ( ; ( (auto4811CEB5_ai >= 0 && lv_rank <= auto4811CEB5_ae) || (auto4811CEB5_ai <= 0 && lv_rank >= auto4811CEB5_ae) ) ; lv_rank += auto4811CEB5_ai ) {
        libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 5;
    }
    lv_rank = lv_rankToStartScaling;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 6;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 7;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 7;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 8;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 8;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 9;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 9;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 10;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 10;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 10;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 11;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 11;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 11;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 12;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 12;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 12;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 13;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 13;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 13;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 14;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 14;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 14;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 15;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 15;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 15;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 16;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 16;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 16;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 17;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 17;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_DataJungleCampDefenderDoubloons_Init () {
    libMapM_gt_DataJungleCampDefenderDoubloons = TriggerCreate("libMapM_gt_DataJungleCampDefenderDoubloons_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Jungle Camp Defender Siege Giants
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_DataJungleCampDefenderSiegeGiants_Func (bool testConds, bool runActions) {
    int autoAADE6A3C_ae;
    int autoAADE6A3C_ai;

    // Variable Declarations
    int lv_campType;
    int lv_rank;
    int lv_rankToStartScaling;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campType = (libMapM_ge_JungleCampDefenderTypes_SiegeGiants);
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campIsSoloable = true;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_defendersCoweronDeath = true;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_initialSpawnDelay = 120.0;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_respawnTime = 180.0;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_numberOfCreeps = 2;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_creepUnitTypes[1] = "MercDefenderSiegeGiant";
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_defenderCoweringUnit[1] = true;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_creepUnitTypes[2] = "MercDefenderSiegeGiant";
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_defenderCoweringUnit[2] = true;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_xPAwardForCapture = libCore_gv_data_XP_SiegeGiantCapture_C;
    libMapM_gf_DataInitializeScalingDataForDefender(libMapM_ge_JungleCampDefenderTypes_SiegeGiants, "SiegeGiantDefenderScaling");
    lv_rankToStartScaling = 2;
    autoAADE6A3C_ae = (lv_rankToStartScaling - 1);
    autoAADE6A3C_ai = 1;
    lv_rank = 0;
    for ( ; ( (autoAADE6A3C_ai >= 0 && lv_rank <= autoAADE6A3C_ae) || (autoAADE6A3C_ai <= 0 && lv_rank >= autoAADE6A3C_ae) ) ; lv_rank += autoAADE6A3C_ai ) {
        libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 6;
    }
    lv_rank = lv_rankToStartScaling;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 7;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 8;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 8;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 9;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 9;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 10;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 10;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 11;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 11;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 11;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 12;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 12;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 12;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 13;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 13;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 13;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 14;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 14;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 14;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 15;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 15;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 15;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 16;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 16;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 16;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 17;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 17;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 17;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 18;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_DataJungleCampDefenderSiegeGiants_Init () {
    libMapM_gt_DataJungleCampDefenderSiegeGiants = TriggerCreate("libMapM_gt_DataJungleCampDefenderSiegeGiants_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Jungle Camp Defender Knights
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_DataJungleCampDefenderKnights_Func (bool testConds, bool runActions) {
    int auto2880C3C4_ae;
    int auto2880C3C4_ai;

    // Variable Declarations
    int lv_campType;
    int lv_rank;
    int lv_rankToStartScaling;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campType = (libMapM_ge_JungleCampDefenderTypes_Knights);
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campIsSoloable = true;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_defendersCoweronDeath = false;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_initialSpawnDelay = 150.0;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_respawnTime = 240.0;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_numberOfCreeps = 4;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_creepUnitTypes[1] = "MercDefenderMeleeKnight";
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_creepUnitTypes[2] = "MercDefenderMeleeKnight";
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_creepUnitTypes[3] = "MercDefenderMeleeKnight";
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_creepUnitTypes[4] = "MercDefenderRangedMage";
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_xPAwardForCapture = libCore_gv_data_XP_OgreCapture_C;
    libMapM_gf_DataInitializeScalingDataForDefender(libMapM_ge_JungleCampDefenderTypes_Knights, "OgreDefenderScaling");
    lv_rankToStartScaling = 2;
    auto2880C3C4_ae = (lv_rankToStartScaling - 1);
    auto2880C3C4_ai = 1;
    lv_rank = 0;
    for ( ; ( (auto2880C3C4_ai >= 0 && lv_rank <= auto2880C3C4_ae) || (auto2880C3C4_ai <= 0 && lv_rank >= auto2880C3C4_ae) ) ; lv_rank += auto2880C3C4_ai ) {
        libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 11;
    }
    lv_rank = lv_rankToStartScaling;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 12;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 13;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 13;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 14;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 14;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 15;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 15;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 16;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 16;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 16;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 17;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 17;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 17;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 18;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 18;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 18;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 19;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 19;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 19;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 20;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 20;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 20;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 21;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 21;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 21;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 22;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 22;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 22;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 23;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_DataJungleCampDefenderKnights_Init () {
    libMapM_gt_DataJungleCampDefenderKnights = TriggerCreate("libMapM_gt_DataJungleCampDefenderKnights_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Jungle Camp Defender Grave Golem
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_DataJungleCampDefenderGraveGolem_Func (bool testConds, bool runActions) {
    int autoB335DA30_ae;
    int autoB335DA30_ai;

    // Variable Declarations
    int lv_campType;
    int lv_rank;
    int lv_rankToStartScaling;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campType = (libMapM_ge_JungleCampDefenderTypes_GraveGolem);
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campIsSoloable = true;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_defendersCoweronDeath = false;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_initialSpawnDelay = 180.0;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_respawnTime = 300.0;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_numberOfCreeps = 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_creepUnitTypes[1] = "JungleGraveGolemDefender";
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_xPAwardForCapture = libCore_gv_data_XP_GraveGolemCapture_C;
    libMapM_gf_DataInitializeScalingDataForDefender(libMapM_ge_JungleCampDefenderTypes_GraveGolem, "GraveGolemDefenderScaling");
    lv_rankToStartScaling = 2;
    autoB335DA30_ae = (lv_rankToStartScaling - 1);
    autoB335DA30_ai = 1;
    lv_rank = 0;
    for ( ; ( (autoB335DA30_ai >= 0 && lv_rank <= autoB335DA30_ae) || (autoB335DA30_ai <= 0 && lv_rank >= autoB335DA30_ae) ) ; lv_rank += autoB335DA30_ai ) {
        libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 14;
    }
    lv_rank = lv_rankToStartScaling;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 15;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 16;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 16;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 17;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 17;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 18;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 18;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 19;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 19;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 19;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 20;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 20;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 20;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 21;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 21;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 21;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 22;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 22;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 22;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 23;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 23;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 23;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 24;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 24;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 24;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 25;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 25;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 25;
    lv_rank += 1;
    libMapM_gv_dataJungleCampDefenderData[lv_campType].lv_campLevel[lv_rank] = 26;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_DataJungleCampDefenderGraveGolem_Init () {
    libMapM_gt_DataJungleCampDefenderGraveGolem = TriggerCreate("libMapM_gt_DataJungleCampDefenderGraveGolem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Jungle Camp Merc Data
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_DataJungleCampMercData_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libMapM_gt_DataJungleCampMercSiegeGiants, true, true);
    TriggerExecute(libMapM_gt_DataJungleCampMercOgres, true, true);
    TriggerExecute(libMapM_gt_DataJungleCampMercGraveGolem, true, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_DataJungleCampMercData_Init () {
    libMapM_gt_DataJungleCampMercData = TriggerCreate("libMapM_gt_DataJungleCampMercData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Jungle Camp Merc Siege Giants
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_DataJungleCampMercSiegeGiants_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_campType;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campType = (libMapM_ge_JungleCampMercTypes_SiegeGiants);
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_numberOfMinionsSpawned = 2;
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_spawnedMinionUnitTypes[1] = "MercLanerSiegeGiant";
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_spawnedMinionUnitTypes[2] = "MercLanerSiegeGiant";
    libMapM_gf_DataInitializeScalingDataForMerc(libMapM_ge_JungleCampMercTypes_SiegeGiants, "SiegeGiantMercScaling");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_DataJungleCampMercSiegeGiants_Init () {
    libMapM_gt_DataJungleCampMercSiegeGiants = TriggerCreate("libMapM_gt_DataJungleCampMercSiegeGiants_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Jungle Camp Merc Ogres
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_DataJungleCampMercOgres_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_campType;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campType = (libMapM_ge_JungleCampMercTypes_Ogres);
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_numberOfMinionsSpawned = 4;
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_spawnedMinionUnitTypes[1] = "MercLanerMeleeKnight";
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_spawnedMinionUnitTypes[2] = "MercLanerMeleeKnight";
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_spawnedMinionUnitTypes[3] = "MercLanerMeleeKnight";
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_spawnedMinionUnitTypes[4] = "MercLanerRangedMage";
    libMapM_gf_DataInitializeScalingDataForMerc(libMapM_ge_JungleCampMercTypes_Ogres, "OgreMercScaling");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_DataJungleCampMercOgres_Init () {
    libMapM_gt_DataJungleCampMercOgres = TriggerCreate("libMapM_gt_DataJungleCampMercOgres_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Data - Jungle Camp Merc Grave Golem
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_DataJungleCampMercGraveGolem_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_campType;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_campType = (libMapM_ge_JungleCampMercTypes_GraveGolem);
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_numberOfMinionsSpawned = 1;
    libMapM_gv_dataJungleCampMercData[lv_campType].lv_spawnedMinionUnitTypes[1] = "JungleGraveGolemLaner";
    libMapM_gf_DataInitializeScalingDataForMerc(libMapM_ge_JungleCampMercTypes_GraveGolem, "GraveGolemLanerScaling");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_DataJungleCampMercGraveGolem_Init () {
    libMapM_gt_DataJungleCampMercGraveGolem = TriggerCreate("libMapM_gt_DataJungleCampMercGraveGolem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Jungle Camps
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_InitializeJungleCamps_Func (bool testConds, bool runActions) {
    int auto7E730838_ae;
    int auto7E730838_ai;
    playergroup autoFBAAD7A0_g;
    int autoFBAAD7A0_p;

    // Variable Declarations
    int lv_i;
    int lv_camp;
    string lv_actorMessageString;

    // Variable Initialization
    lv_actorMessageString = "";

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSJungleCreepCamps == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7E730838_ae = libMapM_gv_jungleNumberOfCreepCamps;
    auto7E730838_ai = 1;
    lv_camp = 1;
    for ( ; ( (auto7E730838_ai >= 0 && lv_camp <= auto7E730838_ae) || (auto7E730838_ai <= 0 && lv_camp >= auto7E730838_ae) ) ; lv_camp += auto7E730838_ai ) {
        libMapM_gf_JungleInitializeDefenderData(lv_camp);
        if ((libMapM_gv_jungleCreepCamps[lv_camp].lv_mapDataCampType == libMapM_ge_JungleCampTypes_MercCamp)) {
            libMapM_gf_JungleInitializeMercCampData(lv_camp);
        }

        if ((libMapM_gv_jungleCreepCamps[lv_camp].lv_mapDataCampType == libMapM_ge_JungleCampTypes_DoubloonCamp)) {
            libMapM_gf_JungleInitializeDoubloonCampData(lv_camp);
        }

        if ((libMapM_gv_jungleCreepCamps[lv_camp].lv_mapDataCampType == libMapM_ge_JungleCampTypes_DoubloonSmallCamp)) {
            libMapM_gf_JungleInitializeDoubloonSmallCampData(lv_camp);
        }

        if ((libMapM_gv_jungleCreepCamps[lv_camp].lv_mapDataCampType == libMapM_ge_JungleCampTypes_AshenvaleForestGuardians)) {
            libMapM_gf_JungleInitializeAshenvaleForestCampData(lv_camp);
        }

        if ((libMapM_gv_jungleCreepCamps[lv_camp].lv_mapDataCampType == libMapM_ge_JungleCampTypes_TryMeCamp)) {
            libMapM_gf_JungleInitializeTryMeCampData(lv_camp);
        }

        TriggerAddEventTimer(libMapM_gt_JungleCreepCampRespawnTimerExpires, libMapM_gv_jungleCreepCamps[lv_camp].lv_stateCreepBirthTimer);
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "TownMercCampCaptureBeacon", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, libMapM_gv_jungleCreepCamps[lv_camp].lv_mapDataCampCaptainSpawnPoint);
        if ((libMapM_gv_jungleCreepCamps[lv_camp].lv_mapDataCapturePointSplatModel != null)) {
            UnitSetFacing(UnitLastCreated(), PointGetFacing(libMapM_gv_jungleCreepCamps[lv_camp].lv_mapDataCampCaptainSpawnPoint), 0.0);
            lv_actorMessageString = ("ModelSwap " + (libMapM_gv_jungleCreepCamps[lv_camp].lv_mapDataCapturePointSplatModel));
            ActorSendAsText(libNtve_gf_MainActorofUnit(UnitLastCreated()), StringToText(lv_actorMessageString));
        }

        libMapM_gv_jungleCreepCamps[lv_camp].lv_captureCircleOfPowerUnit = UnitLastCreated();
        libGame_gf_CapturePointCreate(UnitLastCreated(), libMapM_gv_bALJungleCampCaptureRadius, libMapM_gv_bALJungleCampCaptureTime, 0.0, libGame_ge_CapturePointDecay_DoNotDecay, libGame_ge_CapturePointDecay_Owner, false);
        libMapM_gv_jungleCreepCamps[lv_camp].lv_captureCapturePointIndex = libGame_gf_LastCreatedCapturePoint();
        libGame_gf_CapturePointDisable(libMapM_gv_jungleCreepCamps[lv_camp].lv_captureCapturePointIndex);
        autoFBAAD7A0_g = PlayerGroupAll(); 
        autoFBAAD7A0_p = 1;
        for ( ; autoFBAAD7A0_p <= PlayerGroupCount(autoFBAAD7A0_g) ; autoFBAAD7A0_p += (lv_i == PlayerGroupPlayer(autoFBAAD7A0_g, autoFBAAD7A0_p)) ) {
            lv_i = PlayerGroupPlayer(autoFBAAD7A0_g, autoFBAAD7A0_p);
            VisRevealArea(lv_i, RegionCircle(UnitGetPosition(libMapM_gv_jungleCreepCamps[lv_camp].lv_captureCircleOfPowerUnit), 0.75), 0.125, false);
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_InitializeJungleCamps_Init () {
    libMapM_gt_InitializeJungleCamps = TriggerCreate("libMapM_gt_InitializeJungleCamps_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Start Jungle Camp Timers
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_StartJungleCampTimers_Func (bool testConds, bool runActions) {
    int auto0E6C078D_ae;
    int auto0E6C078D_ai;

    // Variable Declarations
    int lv_itCamp;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSJungleCreepCamps == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto0E6C078D_ae = libMapM_gv_jungleNumberOfCreepCamps;
    auto0E6C078D_ai = 1;
    lv_itCamp = 1;
    for ( ; ( (auto0E6C078D_ai >= 0 && lv_itCamp <= auto0E6C078D_ae) || (auto0E6C078D_ai <= 0 && lv_itCamp >= auto0E6C078D_ae) ) ; lv_itCamp += auto0E6C078D_ai ) {
        TimerStart(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_stateCreepBirthTimer, (libMapM_gv_jungleCreepCamps[lv_itCamp].lv_defenderInitialSpawnDelay - libMapM_gv_bALJungleBirthDelay), false, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_StartJungleCampTimers_Init () {
    libMapM_gt_StartJungleCampTimers = TriggerCreate("libMapM_gt_StartJungleCampTimers_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Creep Camp Respawn Timer Expires
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleCreepCampRespawnTimerExpires_Func (bool testConds, bool runActions) {
    int autoAD45B80E_ae;
    int autoAD45B80E_ai;

    // Variable Declarations
    int lv_itCamp;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_sYSJungleCreepCamps == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libMapM_gv_jungleCreepCampsInitialized == false)) {
        libMapM_gv_jungleCreepCampsInitialized = true;
        TriggerEnable(libMapM_gt_JungleRespawnTimerTextTagCountdown, true);
        TriggerEnable(libAIAI_gt_DefenderAICreepsAttacked, true);
        TriggerEnable(libAIAI_gt_DefenderAIDefenderAILogic, true);
        TriggerEnable(libMapM_gt_JungleDefendersBeginFighting, true);
        TriggerEnable(libMapM_gt_JungleDefendersEndFighting, true);
        TriggerEnable(libMapM_gt_JungleAllDefendersKilled, true);
        if ((TriggerIsEnabled(libStEx_gt_SE_TrainingModeTipMercCamps) == true)) {
            TriggerExecute(libStEx_gt_SE_TrainingModeTipMercCamps, true, false);
        }

    }

    autoAD45B80E_ae = libMapM_gv_jungleNumberOfCreepCamps;
    autoAD45B80E_ai = 1;
    lv_itCamp = 1;
    for ( ; ( (autoAD45B80E_ai >= 0 && lv_itCamp <= autoAD45B80E_ae) || (autoAD45B80E_ai <= 0 && lv_itCamp >= autoAD45B80E_ae) ) ; lv_itCamp += autoAD45B80E_ai ) {
        if ((EventTimer() == libMapM_gv_jungleCreepCamps[lv_itCamp].lv_stateCreepBirthTimer)) {
            break;
        }

    }
    if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_campIconUnit == null) && ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_GraveGolem) || (libMapM_gv_jungleCreepCamps[lv_itCamp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp1) || (libMapM_gv_jungleCreepCamps[lv_itCamp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp2) || (libMapM_gv_jungleCreepCamps[lv_itCamp].lv_mapDataCampDefenderType == libMapM_ge_JungleCampDefenderTypes_BossCamp3))) {
        DialogControlSetEnabled(libUIUI_gv_uIDebugPanel.lv_spawnCreepCampsButton, PlayerGroupAll(), false);
    }

    if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_campIconUnit == null)) {
        libMapM_gf_JungleInitializeCreepCamp(lv_itCamp);
        libMapM_gf_JungleRespawnCreepsForCamp(lv_itCamp);
        return true;
    }

    if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_aIState == libMapM_ge_JungleCampStates_Hibernating)) {
        libMapM_gf_JungleTransitionCampIntoState(lv_itCamp, libMapM_ge_JungleCampStates_HibernatingReadyToRespawn);
    }
    else {
        libMapM_gf_JungleRespawnCreepsForCamp(lv_itCamp);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleCreepCampRespawnTimerExpires_Init () {
    libMapM_gt_JungleCreepCampRespawnTimerExpires = TriggerCreate("libMapM_gt_JungleCreepCampRespawnTimerExpires_Func");
    TriggerEnable(libMapM_gt_JungleCreepCampRespawnTimerExpires, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Respawn Timer Text Tag Countdown
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleRespawnTimerTextTagCountdown_Func (bool testConds, bool runActions) {
    int auto1C4F524B_ae;
    int auto1C4F524B_ai;
    int autoF3A60163_val;

    // Variable Declarations
    int lv_camp;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto1C4F524B_ae = libMapM_gv_jungleNumberOfCreepCamps;
    auto1C4F524B_ai = 1;
    lv_camp = 1;
    for ( ; ( (auto1C4F524B_ai >= 0 && lv_camp <= auto1C4F524B_ae) || (auto1C4F524B_ai <= 0 && lv_camp >= auto1C4F524B_ae) ) ; lv_camp += auto1C4F524B_ai ) {
        if ((TimerGetRemaining(libMapM_gv_jungleCreepCamps[lv_camp].lv_stateCreepRespawnTimer) > 0.0)) {
            autoF3A60163_val = libMapM_gv_jungleCreepCamps[lv_camp].lv_mapDataCampDefenderType;
            if (autoF3A60163_val == libMapM_ge_JungleCampDefenderTypes_Doubloons) {
                TextExpressionSetToken("Param/Expression/lib_MapM_98AD5020", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(libMapM_gv_jungleCreepCamps[lv_camp].lv_stateCreepRespawnTimer))));
                ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lv_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_98AD5020"));
            }
            else if (autoF3A60163_val == libMapM_ge_JungleCampDefenderTypes_SiegeGiants) {
                TextExpressionSetToken("Param/Expression/lib_MapM_B1D7E4F0", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(libMapM_gv_jungleCreepCamps[lv_camp].lv_stateCreepRespawnTimer))));
                ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lv_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_B1D7E4F0"));
            }
            else if (autoF3A60163_val == libMapM_ge_JungleCampDefenderTypes_SiegeCamp1) {
                TextExpressionSetToken("Param/Expression/lib_MapM_8FAD3766", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(libMapM_gv_jungleCreepCamps[lv_camp].lv_stateCreepRespawnTimer))));
                ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lv_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_8FAD3766"));
            }
            else if (autoF3A60163_val == libMapM_ge_JungleCampDefenderTypes_SiegeCamp2) {
                TextExpressionSetToken("Param/Expression/lib_MapM_2BAD7A81", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(libMapM_gv_jungleCreepCamps[lv_camp].lv_stateCreepRespawnTimer))));
                ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lv_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_2BAD7A81"));
            }
            else if (autoF3A60163_val == libMapM_ge_JungleCampDefenderTypes_SiegeCamp3) {
                TextExpressionSetToken("Param/Expression/lib_MapM_5706DC42", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(libMapM_gv_jungleCreepCamps[lv_camp].lv_stateCreepRespawnTimer))));
                ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lv_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_5706DC42"));
            }
            else if (autoF3A60163_val == libMapM_ge_JungleCampDefenderTypes_Knights) {
                TextExpressionSetToken("Param/Expression/lib_MapM_FE01BDDB", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(libMapM_gv_jungleCreepCamps[lv_camp].lv_stateCreepRespawnTimer))));
                ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lv_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_FE01BDDB"));
            }
            else if (autoF3A60163_val == libMapM_ge_JungleCampDefenderTypes_BruiserCamp1) {
                TextExpressionSetToken("Param/Expression/lib_MapM_826D76A4", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(libMapM_gv_jungleCreepCamps[lv_camp].lv_stateCreepRespawnTimer))));
                ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lv_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_826D76A4"));
            }
            else if (autoF3A60163_val == libMapM_ge_JungleCampDefenderTypes_BruiserCamp2) {
                TextExpressionSetToken("Param/Expression/lib_MapM_00E75A43", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(libMapM_gv_jungleCreepCamps[lv_camp].lv_stateCreepRespawnTimer))));
                ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lv_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_00E75A43"));
            }
            else if (autoF3A60163_val == libMapM_ge_JungleCampDefenderTypes_BruiserCamp3) {
                TextExpressionSetToken("Param/Expression/lib_MapM_42628059", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(libMapM_gv_jungleCreepCamps[lv_camp].lv_stateCreepRespawnTimer))));
                ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lv_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_42628059"));
            }
            else if (autoF3A60163_val == libMapM_ge_JungleCampDefenderTypes_GraveGolem) {
                TextExpressionSetToken("Param/Expression/lib_MapM_4BBC4773", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(libMapM_gv_jungleCreepCamps[lv_camp].lv_stateCreepRespawnTimer))));
                ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lv_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_4BBC4773"));
            }
            else if (autoF3A60163_val == libMapM_ge_JungleCampDefenderTypes_BossCamp1) {
                TextExpressionSetToken("Param/Expression/lib_MapM_44A23533", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(libMapM_gv_jungleCreepCamps[lv_camp].lv_stateCreepRespawnTimer))));
                ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lv_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_44A23533"));
            }
            else if (autoF3A60163_val == libMapM_ge_JungleCampDefenderTypes_BossCamp2) {
                TextExpressionSetToken("Param/Expression/lib_MapM_8C77E1BD", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(libMapM_gv_jungleCreepCamps[lv_camp].lv_stateCreepRespawnTimer))));
                ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lv_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_8C77E1BD"));
            }
            else if (autoF3A60163_val == libMapM_ge_JungleCampDefenderTypes_BossCamp3) {
                TextExpressionSetToken("Param/Expression/lib_MapM_3C9E7767", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(libMapM_gv_jungleCreepCamps[lv_camp].lv_stateCreepRespawnTimer))));
                ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lv_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_3C9E7767"));
            }
            else {
                TextExpressionSetToken("Param/Expression/lib_MapM_CD99455D", "A", TextTimeFormat(StringToText("<mintotal/>:<sec2/>"), FixedToInt(TimerGetRemaining(libMapM_gv_jungleCreepCamps[lv_camp].lv_stateCreepRespawnTimer))));
                ActorSendAsText(libNtve_gf_MainActorofUnit(libMapM_gv_jungleCreepCamps[lv_camp].lv_campIconUnit), TextExpressionAssemble("Param/Expression/lib_MapM_CD99455D"));
            }
            libMapM_gf_JungleUpdateTextTagForCamp(lv_camp, libMapM_ge_JungleCampTextTagTypes_Respawn);
        }

        if ((TimerGetRemaining(libMapM_gv_jungleCreepCamps[lv_camp].lv_stateCreepActiveTimer) > 0.0)) {
            libMapM_gf_JungleUpdateTextTagForCamp(lv_camp, libMapM_ge_JungleCampTextTagTypes_Special);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleRespawnTimerTextTagCountdown_Init () {
    libMapM_gt_JungleRespawnTimerTextTagCountdown = TriggerCreate("libMapM_gt_JungleRespawnTimerTextTagCountdown_Func");
    TriggerEnable(libMapM_gt_JungleRespawnTimerTextTagCountdown, false);
    TriggerAddEventTimePeriodic(libMapM_gt_JungleRespawnTimerTextTagCountdown, 1.0, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Defenders Begin Fighting
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleDefendersBeginFighting_Func (bool testConds, bool runActions) {
    int auto8BE37AE4_ae;
    int auto8BE37AE4_ai;

    // Variable Declarations
    int lv_defenderAIIndex;
    int lv_testIndex;
    int lv_camp;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_defenderAIIndex = libGame_gf_JungleDefenderAIDefendersBeginFightingIndex();
    auto8BE37AE4_ae = libMapM_gv_jungleMaxCamps;
    auto8BE37AE4_ai = 1;
    lv_testIndex = 1;
    for ( ; ( (auto8BE37AE4_ai >= 0 && lv_testIndex <= auto8BE37AE4_ae) || (auto8BE37AE4_ai <= 0 && lv_testIndex >= auto8BE37AE4_ae) ) ; lv_testIndex += auto8BE37AE4_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lv_testIndex].lv_aIDefenderAIIndex == lv_defenderAIIndex)) {
            lv_camp = lv_testIndex;
            break;
        }

    }
    if ((lv_camp > 0) && (libMapM_gv_jungleCreepCamps[lv_camp].lv_aIState != libMapM_ge_JungleCampStates_Hibernating) && (libMapM_gv_jungleCreepCamps[lv_camp].lv_aIState != libMapM_ge_JungleCampStates_HibernatingReadyToRespawn)) {
        libMapM_gf_JungleTransitionCampIntoState(lv_camp, libMapM_ge_JungleCampStates_Busy);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleDefendersBeginFighting_Init () {
    libMapM_gt_JungleDefendersBeginFighting = TriggerCreate("libMapM_gt_JungleDefendersBeginFighting_Func");
    TriggerEnable(libMapM_gt_JungleDefendersBeginFighting, false);
    libGame_gf_JungleDefenderAIDefendersBeginFighting(libMapM_gt_JungleDefendersBeginFighting);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Defenders End Fighting
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleDefendersEndFighting_Func (bool testConds, bool runActions) {
    int autoCE3EC7FE_ae;
    int autoCE3EC7FE_ai;

    // Variable Declarations
    int lv_defenderAIIndex;
    int lv_testIndex;
    int lv_camp;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_defenderAIIndex = libGame_gf_JungleDefenderAIDefendersEndFightingIndex();
    autoCE3EC7FE_ae = libMapM_gv_jungleMaxCamps;
    autoCE3EC7FE_ai = 1;
    lv_testIndex = 1;
    for ( ; ( (autoCE3EC7FE_ai >= 0 && lv_testIndex <= autoCE3EC7FE_ae) || (autoCE3EC7FE_ai <= 0 && lv_testIndex >= autoCE3EC7FE_ae) ) ; lv_testIndex += autoCE3EC7FE_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lv_testIndex].lv_aIDefenderAIIndex == lv_defenderAIIndex)) {
            lv_camp = lv_testIndex;
            break;
        }

    }
    if ((lv_camp > 0) && (libMapM_gv_jungleCreepCamps[lv_camp].lv_aIState != libMapM_ge_JungleCampStates_Hibernating) && (libMapM_gv_jungleCreepCamps[lv_camp].lv_aIState != libMapM_ge_JungleCampStates_HibernatingReadyToRespawn)) {
        libMapM_gf_JungleTransitionCampIntoState(lv_camp, libMapM_ge_JungleCampStates_Idle);
        if ((UnitGroupCount(libAIAI_gf_DefenderGroup(libMapM_gv_jungleCreepCamps[lv_camp].lv_aIDefenderAIIndex), c_unitCountAlive) < libMapM_gv_jungleCreepCamps[lv_camp].lv_defenderNumberofCreeps)) {
            TimerStart(libMapM_gv_jungleCreepCamps[lv_camp].lv_stateCreepRespawnTimer, libMapM_gv_bALJungleLeashRespawnTime, false, c_timeGame);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleDefendersEndFighting_Init () {
    libMapM_gt_JungleDefendersEndFighting = TriggerCreate("libMapM_gt_JungleDefendersEndFighting_Func");
    TriggerEnable(libMapM_gt_JungleDefendersEndFighting, false);
    libGame_gf_JungleDefenderAIDefendersEndFighting(libMapM_gt_JungleDefendersEndFighting);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - All Defenders Killed
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleAllDefendersKilled_Func (bool testConds, bool runActions) {
    int auto1D994751_ae;
    int auto1D994751_ai;

    // Variable Declarations
    int lv_defenderAIIndex;
    int lv_testIndex;
    int lv_camp;
    int lv_owner;
    int lv_killingUnitTeam;
    int lv_capturingPlayerIfNoCapturePoint;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_defenderAIIndex = libGame_gf_JungleDefenderAIAllDefendersKilledIndex();
    auto1D994751_ae = libMapM_gv_jungleMaxCamps;
    auto1D994751_ai = 1;
    lv_testIndex = 1;
    for ( ; ( (auto1D994751_ai >= 0 && lv_testIndex <= auto1D994751_ae) || (auto1D994751_ai <= 0 && lv_testIndex >= auto1D994751_ae) ) ; lv_testIndex += auto1D994751_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lv_testIndex].lv_aIDefenderAIIndex == lv_defenderAIIndex)) {
            lv_camp = lv_testIndex;
            break;
        }

    }
    if ((lv_camp > 0)) {
        if ((libMapM_gv_jungleCreepCamps[lv_camp].lv_mapDataCampType == libMapM_ge_JungleCampTypes_MercCamp)) {
            if ((libMapM_gv_jungleCreepCamps[lv_camp].lv_defenderCampInstantlyGrantsReward == false)) {
                libMapM_gf_JungleTurnOnCampCaptureBeacon(lv_camp);
            }
            else {
                lv_killingUnitTeam = libGame_gf_TeamNumberOfPlayer(libGame_gf_JungleDefenderAIAllDefendersKilledKillingPlayer());
                if ((lv_killingUnitTeam == libGame_gv_teamOrderIndex_C)) {
                    lv_capturingPlayerIfNoCapturePoint = libCore_gv_cOMPUTER_TeamOrder;
                }
                else {
                    if ((lv_killingUnitTeam == libGame_gv_teamChaosIndex_C)) {
                        lv_capturingPlayerIfNoCapturePoint = libCore_gv_cOMPUTER_TeamChaos;
                    }

                }
                libMapM_gf_JungleGrantCaptureRewards(lv_camp, lv_capturingPlayerIfNoCapturePoint, false);
                UnitSetOwner(libMapM_gv_jungleCreepCamps[lv_camp].lv_campIconUnit, lv_capturingPlayerIfNoCapturePoint, true);
                UnitSetOwner(libMapM_gv_jungleCreepCamps[lv_camp].lv_campOwnershipFlagUnit, lv_capturingPlayerIfNoCapturePoint, true);
            }
        }
        else {
            lv_killingUnitTeam = libGame_gf_TeamNumberOfPlayer(libGame_gf_JungleDefenderAIAllDefendersKilledKillingPlayer());
            if (((lv_killingUnitTeam == libGame_gv_teamOrderIndex_C) || (lv_killingUnitTeam == libGame_gv_teamChaosIndex_C))) {
                libMapM_gf_JungleGrantCaptureRewards(lv_camp, libGame_gv_teams[lv_killingUnitTeam].lv_nPCPlayer, false);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleAllDefendersKilled_Init () {
    libMapM_gt_JungleAllDefendersKilled = TriggerCreate("libMapM_gt_JungleAllDefendersKilled_Func");
    TriggerEnable(libMapM_gt_JungleAllDefendersKilled, false);
    libGame_gf_JungleDefenderAIAllDefendersKilled(libMapM_gt_JungleAllDefendersKilled);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Hibernate Camps Start
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleHibernateCampsStart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gf_JungleStartHibernateCamps();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleHibernateCampsStart_Init () {
    libMapM_gt_JungleHibernateCampsStart = TriggerCreate("libMapM_gt_JungleHibernateCampsStart_Func");
    libGame_gf_MapDragonShireDragonActivated(libMapM_gt_JungleHibernateCampsStart);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Hibernate Camps End
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleHibernateCampsEnd_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gf_JungleStopHibernateCamps();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleHibernateCampsEnd_Init () {
    libMapM_gt_JungleHibernateCampsEnd = TriggerCreate("libMapM_gt_JungleHibernateCampsEnd_Func");
    libGame_gf_MapDragonShireDragonEnds(libMapM_gt_JungleHibernateCampsEnd);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Hibernate Defenders That Leash
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleHibernateDefendersThatLeash_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_camp;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libMapM_gv_jungleCampsShouldBeHibernating == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_camp = libMapM_gf_JungleGetCampIndexFromDefenderIndex(libGame_gf_JungleDefenderAIDefendersEndFightingIndex());
    if ((lv_camp > 0)) {
        libMapM_gf_JungleTransitionCampIntoState(lv_camp, libMapM_ge_JungleCampStates_Hibernating);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleHibernateDefendersThatLeash_Init () {
    libMapM_gt_JungleHibernateDefendersThatLeash = TriggerCreate("libMapM_gt_JungleHibernateDefendersThatLeash_Func");
    libGame_gf_JungleDefenderAIDefendersEndFighting(libMapM_gt_JungleHibernateDefendersThatLeash);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Hibernate Defenders That Just Spawned
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleHibernateDefendersThatJustSpawned_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libMapM_gv_jungleCampsShouldBeHibernating == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gf_JungleTransitionCampIntoState(libGame_gf_JungleCampSpawnedIndex(), libMapM_ge_JungleCampStates_Hibernating);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleHibernateDefendersThatJustSpawned_Init () {
    libMapM_gt_JungleHibernateDefendersThatJustSpawned = TriggerCreate("libMapM_gt_JungleHibernateDefendersThatJustSpawned_Func");
    libGame_gf_JungleCampSpawned(libMapM_gt_JungleHibernateDefendersThatJustSpawned);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Camp Ownership Change
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleCampOwnershipChange_Func (bool testConds, bool runActions) {
    int auto1EEBCBD3_ae;

    // Variable Declarations
    int lv_itCamp;
    int lv_index;
    int lv_owner;
    bool lv_hasMercLordTalent;
    int lv_team;

    // Variable Initialization
    lv_index = libGame_gf_CapturePointChangesOwnerCapturePointIndex();
    lv_owner = libGame_gf_CapturePointChangesOwnerOwner();
    lv_hasMercLordTalent = libGame_gf_CapturePointChangesOwnerHasMercLordTalent();

    // Actions
    if (!runActions) {
        return true;
    }

    auto1EEBCBD3_ae = libMapM_gv_jungleNumberOfCreepCamps;
    lv_itCamp = 1;
    for ( ; lv_itCamp <= auto1EEBCBD3_ae ; lv_itCamp += 1 ) {
        if ((libMapM_gv_jungleCreepCamps[lv_itCamp].lv_captureCapturePointIndex == lv_index)) {
            libGame_gf_SendEventMercCampCaptured(lv_itCamp, lv_owner, libGame_gf_CapturePointChangesOwnerCapturingPlayers());
            if ((lv_owner == libCore_gv_cOMPUTER_TeamOrder)) {
                libNtve_gf_SendActorMessageToGameRegion(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_mapDataDefenderLeashRegion, "Signal OwnerOrder");
                UnitSetOwner(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_campIconUnit, libCore_gv_cOMPUTER_TeamOrder, true);
                UnitSetOwner(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_campOwnershipFlagUnit, libCore_gv_cOMPUTER_TeamOrder, true);
                libMapM_gf_JungleTurnOffCampCaptureBeacon(lv_itCamp, libCore_gv_cOMPUTER_TeamOrder);
                libMapM_gf_JungleGrantCaptureRewards(lv_itCamp, libCore_gv_cOMPUTER_TeamOrder, lv_hasMercLordTalent);
            }
            else if ((lv_owner == libCore_gv_cOMPUTER_TeamChaos)) {
                libNtve_gf_SendActorMessageToGameRegion(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_mapDataDefenderLeashRegion, "Signal OwnerChaos");
                UnitSetOwner(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_campIconUnit, libCore_gv_cOMPUTER_TeamChaos, true);
                UnitSetOwner(libMapM_gv_jungleCreepCamps[lv_itCamp].lv_campOwnershipFlagUnit, libCore_gv_cOMPUTER_TeamChaos, true);
                libMapM_gf_JungleTurnOffCampCaptureBeacon(lv_itCamp, libCore_gv_cOMPUTER_TeamChaos);
                libMapM_gf_JungleGrantCaptureRewards(lv_itCamp, libCore_gv_cOMPUTER_TeamChaos, lv_hasMercLordTalent);
            }
            if (((lv_owner == libCore_gv_cOMPUTER_TeamOrder) || (lv_owner == libCore_gv_cOMPUTER_TeamChaos))) {
                lv_team = libGame_gf_TeamNumberOfPlayer(lv_owner);
                SoundPlayForPlayer(SoundLink("Doodad_Merc_Camp_Capture_Ally", -1), libCore_gv_cOMPUTER_TeamOrder, libGame_gf_PlayersOnTeamHeroes(lv_team, false), 100.0, 0.0);
                SoundPlayForPlayer(SoundLink("Doodad_Merc_Camp_Capture_Enemy", -1), libCore_gv_cOMPUTER_TeamChaos, libGame_gf_PlayersOnTeamHeroes((3 - lv_team), false), 100.0, 0.0);
                SoundPlayForPlayer(SoundLink("Doodad_Merc_Camp_Capture_Ally", -1), libCore_gv_oBSERVER_ObserverUIPlayer, libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], 100.0, 0.0);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleCampOwnershipChange_Init () {
    libMapM_gt_JungleCampOwnershipChange = TriggerCreate("libMapM_gt_JungleCampOwnershipChange_Func");
    libGame_gf_CapturePointChangesOwner(libMapM_gt_JungleCampOwnershipChange);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Merc Leader Dies
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleMercLeaderDies_Func (bool testConds, bool runActions) {
    int auto9AC7B9FC_ae;
    int auto9AC7B9FC_ai;
    int auto473D11F7_ae;
    int auto473D11F7_ai;
    unitgroup autoF266B5E0_g;
    int autoF266B5E0_u;

    // Variable Declarations
    int lv_itMercGroup;
    unit lv_itUnit;
    bool lv_groupIsDead;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto9AC7B9FC_ae = libMapM_gv_jungleNumberOfActiveMercGroups;
    auto9AC7B9FC_ai = 1;
    lv_itMercGroup = 1;
    for ( ; ( (auto9AC7B9FC_ai >= 0 && lv_itMercGroup <= auto9AC7B9FC_ae) || (auto9AC7B9FC_ai <= 0 && lv_itMercGroup >= auto9AC7B9FC_ae) ) ; lv_itMercGroup += auto9AC7B9FC_ai ) {
        if ((UnitIsAlive(libMapM_gv_jungleMiniMapLeader[lv_itMercGroup]) == false)) {
            UnitGroupRemove(libMapM_gv_jungleMiniMapIconGroup[lv_itMercGroup], libMapM_gv_jungleMiniMapLeader[lv_itMercGroup]);
            if ((UnitGroupCount(libMapM_gv_jungleMiniMapIconGroup[lv_itMercGroup], c_unitCountAlive) > 0)) {
                libMapM_gf_JungleSetMiniMapIconForMercMinions(libMapM_gf_JungleGetMercCampForUnit(UnitGroupUnit(libMapM_gv_jungleMiniMapIconGroup[lv_itMercGroup], 1)), lv_itMercGroup, "Assets\\Textures\\blank.dds", libMapM_gv_jungleMiniMapIconGroup[lv_itMercGroup]);
            }
            else {
                lv_groupIsDead = true;
            }
            libMapM_gf_JungleCreateMercPath(libMapM_gv_jungleMiniMapLeader[lv_itMercGroup], false);
            break;
        }

    }
    if ((lv_groupIsDead == true)) {
        auto473D11F7_ae = 1;
        auto473D11F7_ai = -1;
        lv_itMercGroup = libMapM_gv_jungleNumberOfActiveMercGroups;
        for ( ; ( (auto473D11F7_ai >= 0 && lv_itMercGroup <= auto473D11F7_ae) || (auto473D11F7_ai <= 0 && lv_itMercGroup >= auto473D11F7_ae) ) ; lv_itMercGroup += auto473D11F7_ai ) {
            if ((libNtve_gf_UnitGroupIsDead(libMapM_gv_jungleMiniMapIconGroup[lv_itMercGroup]) == true)) {
                if ((libMapM_gv_jungleMiniMapOrderPath[lv_itMercGroup] != 0)) {
                    PathDestroy(libMapM_gv_jungleMiniMapOrderPath[lv_itMercGroup]);
                    PathDestroy(libMapM_gv_jungleMiniMapChaosPath[lv_itMercGroup]);
                    PathDestroy(libMapM_gv_jungleMiniMapObserverPath[lv_itMercGroup]);
                    libMapM_gv_jungleMiniMapOrderPath[lv_itMercGroup] = 0;
                    libMapM_gv_jungleMiniMapChaosPath[lv_itMercGroup] = 0;
                    libMapM_gv_jungleMiniMapObserverPath[lv_itMercGroup] = 0;
                }

                if ((lv_itMercGroup == libMapM_gv_jungleNumberOfActiveMercGroups)) {
                    libMapM_gv_jungleMiniMapLeader[libMapM_gv_jungleNumberOfActiveMercGroups] = null;
                    libMapM_gv_jungleMiniMapIconGroup[libMapM_gv_jungleNumberOfActiveMercGroups] = UnitGroupEmpty();
                    libMapM_gv_jungleNumberOfActiveMercGroups -= 1;
                }
                else {
                    libMapM_gv_jungleMiniMapLeader[lv_itMercGroup] = libMapM_gv_jungleMiniMapLeader[libMapM_gv_jungleNumberOfActiveMercGroups];
                    libMapM_gv_jungleMiniMapIconGroup[lv_itMercGroup] = libMapM_gv_jungleMiniMapIconGroup[libMapM_gv_jungleNumberOfActiveMercGroups];
                    libMapM_gv_jungleMiniMapOrderPath[lv_itMercGroup] = libMapM_gv_jungleMiniMapOrderPath[libMapM_gv_jungleNumberOfActiveMercGroups];
                    libMapM_gv_jungleMiniMapObserverPath[lv_itMercGroup] = libMapM_gv_jungleMiniMapObserverPath[libMapM_gv_jungleNumberOfActiveMercGroups];
                    libMapM_gv_jungleMiniMapChaosPath[lv_itMercGroup] = libMapM_gv_jungleMiniMapChaosPath[libMapM_gv_jungleNumberOfActiveMercGroups];
                    autoF266B5E0_g = libMapM_gv_jungleMiniMapIconGroup[lv_itMercGroup];
                    autoF266B5E0_u = 1;
                    for ( ; autoF266B5E0_u <= UnitGroupCount(autoF266B5E0_g, c_unitCountAll) ; autoF266B5E0_u += (lv_itUnit == UnitGroupUnit(autoF266B5E0_g, autoF266B5E0_u)) ) {
                        lv_itUnit = UnitGroupUnit(autoF266B5E0_g, autoF266B5E0_u);
                        UnitSetCustomValue(lv_itUnit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_MercLanerGroupIndex), IntToFixed(lv_itMercGroup));
                    }
                    libMapM_gv_jungleMiniMapLeader[libMapM_gv_jungleNumberOfActiveMercGroups] = null;
                    libMapM_gv_jungleMiniMapIconGroup[libMapM_gv_jungleNumberOfActiveMercGroups] = UnitGroupEmpty();
                    libMapM_gv_jungleMiniMapOrderPath[libMapM_gv_jungleNumberOfActiveMercGroups] = 0;
                    libMapM_gv_jungleMiniMapChaosPath[libMapM_gv_jungleNumberOfActiveMercGroups] = 0;
                    libMapM_gv_jungleMiniMapObserverPath[libMapM_gv_jungleNumberOfActiveMercGroups] = 0;
                    libMapM_gv_jungleNumberOfActiveMercGroups -= 1;
                }
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleMercLeaderDies_Init () {
    libMapM_gt_JungleMercLeaderDies = TriggerCreate("libMapM_gt_JungleMercLeaderDies_Func");
    TriggerAddEventUnitBehaviorChange(libMapM_gt_JungleMercLeaderDies, null, "MinionDeathMonitor", c_unitBehaviorChangeDestroy);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Merc - Ogre Shield Used (Ogre)
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleMercOgreShieldUsedOgre_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stackCount;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_stackCount = (FixedToInt(UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropLifeMax, c_unitPropCurrent)) / CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MercLanerOgreBuff", "DamageResponse.ModifyLimit", c_playerAny));
    UnitBehaviorAdd(EventUnitTargetUnit(), "MercLanerOgreBuff", EventUnit(), lv_stackCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleMercOgreShieldUsedOgre_Init () {
    libMapM_gt_JungleMercOgreShieldUsedOgre = TriggerCreate("libMapM_gt_JungleMercOgreShieldUsedOgre_Func");
    TriggerAddEventUnitAbility(libMapM_gt_JungleMercOgreShieldUsedOgre, null, AbilityCommand("MercLanerOgreBuffAbilityOgreOnly", 0), c_abilEffectStageFinish, false);
    TriggerAddEventUnitAbility(libMapM_gt_JungleMercOgreShieldUsedOgre, null, AbilityCommand("MercDefenderOgreBuffAbility", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Merc - Ogre Shield Used (Hero)
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleMercOgreShieldUsedHero_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_stackCount;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_stackCount = (FixedToInt(UnitGetPropertyFixed(EventUnitTargetUnit(), c_unitPropLifeMax, c_unitPropCurrent)) / CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MercLanerOgreBuff", "DamageResponse.ModifyLimit", c_playerAny));
    lv_stackCount = (lv_stackCount / 4);
    UnitBehaviorAdd(EventUnitTargetUnit(), "MercLanerOgreBuff", EventUnit(), lv_stackCount);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleMercOgreShieldUsedHero_Init () {
    libMapM_gt_JungleMercOgreShieldUsedHero = TriggerCreate("libMapM_gt_JungleMercOgreShieldUsedHero_Func");
    TriggerAddEventUnitAbility(libMapM_gt_JungleMercOgreShieldUsedHero, null, AbilityCommand("MercLanerOgreBuffAbilityHeroOnly", 0), c_abilEffectStageFinish, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Merc Damage Detection
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleMercDamageDetection_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_MercCamp;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libCore_gv_dEBUGDebuggingEnabled == true))) {
            return false;
        }

        if (!((libGame_gv_gameOver == false))) {
            return false;
        }

        if (!((libSprt_gv_dEBUGMapTextEnabled == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_MercCamp = libMapM_gf_JungleGetMercCampForUnit(EventUnitDamageSourceUnit());
    libMapM_gf_JungleUpdateMercDamageTracker(lv_MercCamp, EventUnitDamageAmount());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleMercDamageDetection_Init () {
    libMapM_gt_JungleMercDamageDetection = TriggerCreate("libMapM_gt_JungleMercDamageDetection_Func");
    TriggerAddEventUnitDamaged(libMapM_gt_JungleMercDamageDetection, null, c_unitDamageTypeAny, c_unitDamageEither, "MercLanerMeleeKnightDamage");
    TriggerAddEventUnitDamaged(libMapM_gt_JungleMercDamageDetection, null, c_unitDamageTypeAny, c_unitDamageEither, "MercLanerRangedMageWeaponDamage");
    TriggerAddEventUnitDamaged(libMapM_gt_JungleMercDamageDetection, null, c_unitDamageTypeAny, c_unitDamageEither, "MercLanerSiegeGiantConfusionDamage");
    TriggerAddEventUnitDamaged(libMapM_gt_JungleMercDamageDetection, null, c_unitDamageTypeAny, c_unitDamageEither, "MercLanerSiegeGiantDamage");
    TriggerAddEventUnitDamaged(libMapM_gt_JungleMercDamageDetection, null, c_unitDamageTypeAny, c_unitDamageEither, "OgreKingLanerWeaponDamage");
    TriggerAddEventUnitDamaged(libMapM_gt_JungleMercDamageDetection, null, c_unitDamageTypeAny, c_unitDamageEither, "MercLanerGoblinSapperNonStructureSuicideDamage");
    TriggerAddEventUnitDamaged(libMapM_gt_JungleMercDamageDetection, null, c_unitDamageTypeAny, c_unitDamageEither, "MercLanerGoblinSapperStructureSuicideDamage");
    TriggerAddEventUnitDamaged(libMapM_gt_JungleMercDamageDetection, null, c_unitDamageTypeAny, c_unitDamageEither, "MercLanerGoblinSapperDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Jungle - Siege Giant Taunt
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_JungleSiegeGiantTaunt_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_siegeGiant;
    unit lv_target;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_siegeGiant = EventPlayerEffectUsedUnit(c_effectUnitSource);
    lv_target = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    ActorLookAtTypeStart(libNtve_gf_MainActorofUnit(lv_siegeGiant), "MedHeadOnly", libNtve_gf_MainActorofUnit(lv_target));
    while (!(((UnitHasBehavior2(lv_siegeGiant, "MercDefenderSiegeGiantTauntProcLookAt") == false) || (UnitHasBehavior2(lv_siegeGiant, "JungleCreepPassive") == false)))) {
        Wait(1.0, c_timeGame);
    }
    libNtve_gf_SimpleLookAtStop(lv_siegeGiant, "MedHeadOnly");
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_JungleSiegeGiantTaunt_Init () {
    libMapM_gt_JungleSiegeGiantTaunt = TriggerCreate("libMapM_gt_JungleSiegeGiantTaunt_Func");
    TriggerAddEventPlayerEffectUsed(libMapM_gt_JungleSiegeGiantTaunt, c_playerAny, "MercDefenderSiegeGiantTauntDummy");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Map Mechanics
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_InitializeMapMechanics_Func (bool testConds, bool runActions) {
    int auto7C9A6F5C_ae;
    int auto7C9A6F5C_ai;

    // Variable Declarations
    int lv_itIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto7C9A6F5C_ae = libMapM_gv_mapMechanicsCount;
    auto7C9A6F5C_ai = 1;
    lv_itIndex = 1;
    for ( ; ( (auto7C9A6F5C_ai >= 0 && lv_itIndex <= auto7C9A6F5C_ae) || (auto7C9A6F5C_ai <= 0 && lv_itIndex >= auto7C9A6F5C_ae) ) ; lv_itIndex += auto7C9A6F5C_ai ) {
        if ((libMapM_gv_mapMechanicsInitCallbacks[lv_itIndex] != null)) {
            TriggerExecute(libMapM_gv_mapMechanicsInitCallbacks[lv_itIndex], true, false);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_InitializeMapMechanics_Init () {
    libMapM_gt_InitializeMapMechanics = TriggerCreate("libMapM_gt_InitializeMapMechanics_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Helpbutton Clicked
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMHelpbuttonClicked_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMHelpbuttonClicked_Init () {
    libMapM_gt_MMHelpbuttonClicked = TriggerCreate("libMapM_gt_MMHelpbuttonClicked_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Intro Cutscene Start
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMIntroCutsceneStart_Func (bool testConds, bool runActions) {
    int autoCD1759B6_ae;
    int autoCD1759B6_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoCD1759B6_ae = libCore_gv_bALMaxPlayers;
    autoCD1759B6_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (autoCD1759B6_ai >= 0 && lv_itPlayer <= autoCD1759B6_ae) || (autoCD1759B6_ai <= 0 && lv_itPlayer >= autoCD1759B6_ae) ) ; lv_itPlayer += autoCD1759B6_ai ) {
        if ((EventCutsceneId() == libMapM_gv_mMIntroCutscene[lv_itPlayer])) {
            libStEx_gf_CinematicFade(true, 1.5, Color(0.00, 0.00, 0.00), lv_itPlayer);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMIntroCutsceneStart_Init () {
    libMapM_gt_MMIntroCutsceneStart = TriggerCreate("libMapM_gt_MMIntroCutsceneStart_Func");
    TriggerEnable(libMapM_gt_MMIntroCutsceneStart, false);
    TriggerAddEventCutsceneBookmarkFired(libMapM_gt_MMIntroCutsceneStart, c_cutsceneNone, "SceneStart");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Intro Cutscene End
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMIntroCutsceneEnd_Func (bool testConds, bool runActions) {
    int auto41494892_ae;
    int auto41494892_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto41494892_ae = libCore_gv_bALMaxPlayers;
    auto41494892_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto41494892_ai >= 0 && lv_itPlayer <= auto41494892_ae) || (auto41494892_ai <= 0 && lv_itPlayer >= auto41494892_ae) ) ; lv_itPlayer += auto41494892_ai ) {
        if ((EventCutsceneId() == libMapM_gv_mMIntroCutscene[lv_itPlayer])) {
            libStEx_gf_CinematicFade(false, 0.0, Color(0.00, 0.00, 0.00), lv_itPlayer);
            return true;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMIntroCutsceneEnd_Init () {
    libMapM_gt_MMIntroCutsceneEnd = TriggerCreate("libMapM_gt_MMIntroCutsceneEnd_Func");
    TriggerEnable(libMapM_gt_MMIntroCutsceneEnd, false);
    TriggerAddEventCutsceneBookmarkFired(libMapM_gt_MMIntroCutsceneEnd, c_cutsceneNone, "SceneEnd");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Intro Skippable
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMIntroSkippable_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_cutscene;
    int lv_player;

    // Variable Initialization
    lv_cutscene = c_cutsceneNone;

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = libMapM_gv_mMIntroCutscenePlayer;
    lv_cutscene = libMapM_gv_mMIntroCutscene[lv_player];
    TriggerSkippableBegin(libCore_gv_playerGroupFromPlayer[lv_player], 0, null, true, false);
    libMapM_gv_mMIntroCutsceneCompleted[lv_player] = false;
    WaitForCutsceneToEnd(lv_cutscene);
    libMapM_gv_mMIntroCutsceneCompleted[lv_player] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMIntroSkippable_Init () {
    libMapM_gt_MMIntroSkippable = TriggerCreate("libMapM_gt_MMIntroSkippable_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Repulse Region Punch Behavior
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRepulseRegionPunchBehavior_Func (bool testConds, bool runActions) {
    int auto6774B061_ae;
    int auto6774B061_ai;
    unitgroup autoC80E67AA_g;
    int autoC80E67AA_u;
    int autoFEAFF3C0_ae;
    int autoFEAFF3C0_ai;

    // Variable Declarations
    int lv_itTeam;
    unit lv_itUnit;
    int lv_itPunchTargetIndex;
    point lv_pos;
    fixed lv_distance;
    fixed lv_distanceMin;
    int lv_punchTargetIndexMin;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        auto6774B061_ae = 2;
        auto6774B061_ai = 1;
        lv_itTeam = 1;
        for ( ; ( (auto6774B061_ai >= 0 && lv_itTeam <= auto6774B061_ae) || (auto6774B061_ai <= 0 && lv_itTeam >= auto6774B061_ae) ) ; lv_itTeam += auto6774B061_ai ) {
            autoC80E67AA_g = UnitGroup(null, c_playerAny, libMapM_gv_mMRepulseRegions[lv_itTeam], UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoC80E67AA_u = 1;
            for ( ; autoC80E67AA_u <= UnitGroupCount(autoC80E67AA_g, c_unitCountAll) ; autoC80E67AA_u += (lv_itUnit == UnitGroupUnit(autoC80E67AA_g, autoC80E67AA_u)) ) {
                lv_itUnit = UnitGroupUnit(autoC80E67AA_g, autoC80E67AA_u);
                if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_itUnit)) == libGame_gf_EnemyTeam(lv_itTeam)) && (UnitGroupHasUnit(libMapM_gv_mMRepulseRegionPunchedGroup, lv_itUnit) == false) && (UnitHasBehavior2(lv_itUnit, "UnitNotPuntableByRepulserField") == false) && ((UnitGetMoverLink(lv_itUnit) == "Ground") || (UnitTypeTestAttribute(UnitGetType(lv_itUnit), c_unitAttributeSummoned) == true))) {
                    lv_pos = UnitGetPosition(lv_itUnit);
                    lv_punchTargetIndexMin = 0;
                    autoFEAFF3C0_ae = libMapM_gv_mMRepulseRegionPunchTargetMax_C;
                    autoFEAFF3C0_ai = 1;
                    lv_itPunchTargetIndex = 1;
                    for ( ; ( (autoFEAFF3C0_ai >= 0 && lv_itPunchTargetIndex <= autoFEAFF3C0_ae) || (autoFEAFF3C0_ai <= 0 && lv_itPunchTargetIndex >= autoFEAFF3C0_ae) ) ; lv_itPunchTargetIndex += autoFEAFF3C0_ai ) {
                        if ((libMapM_gv_mMRepulseRegionPunchTarget[lv_itTeam][lv_itPunchTargetIndex] == null)) {
                            continue;
                        }

                        lv_distance = DistanceBetweenPoints(lv_pos, libMapM_gv_mMRepulseRegionPunchTarget[lv_itTeam][lv_itPunchTargetIndex]);
                        if (((lv_punchTargetIndexMin == 0) || (lv_distance < lv_distanceMin))) {
                            lv_punchTargetIndexMin = lv_itPunchTargetIndex;
                            lv_distanceMin = lv_distance;
                        }

                    }
                    if ((lv_punchTargetIndexMin > 0)) {
                        libGame_gf_SendEventUnitEntersSafeZonePuntRegion(lv_itUnit, libMapM_gv_mMRepulseRegionPunchTarget[lv_itTeam][lv_punchTargetIndexMin]);
                        libMapM_gf_MMRepulseRegionAddToPunchedGroup(lv_itUnit);
                    }

                }

            }
        }
        Wait(0.125, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRepulseRegionPunchBehavior_Init () {
    libMapM_gt_MMRepulseRegionPunchBehavior = TriggerCreate("libMapM_gt_MMRepulseRegionPunchBehavior_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Safe Region Behavior
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMSafeRegionBehavior_Func (bool testConds, bool runActions) {
    int auto94A0108F_ae;
    int auto94A0108F_ai;
    unitgroup auto9BBE802A_g;
    int auto9BBE802A_u;

    // Variable Declarations
    int lv_itTeam;
    unit lv_itUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        if ((libGame_gv_gameOver == true)) {
            return true;
        }

        auto94A0108F_ae = 2;
        auto94A0108F_ai = 1;
        lv_itTeam = 1;
        for ( ; ( (auto94A0108F_ai >= 0 && lv_itTeam <= auto94A0108F_ae) || (auto94A0108F_ai <= 0 && lv_itTeam >= auto94A0108F_ae) ) ; lv_itTeam += auto94A0108F_ai ) {
            if ((libMapM_gv_mMSafeRegions[lv_itTeam] == null)) {
                continue;
            }

            auto9BBE802A_g = UnitGroup(null, c_playerAny, libMapM_gv_mMSafeRegions[lv_itTeam], UnitFilter(0, 0, (1 << c_targetFilterStructure) | (1 << c_targetFilterWorker) | (1 << c_targetFilterMissile) | (1 << c_targetFilterDestructible), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            auto9BBE802A_u = 1;
            for ( ; auto9BBE802A_u <= UnitGroupCount(auto9BBE802A_g, c_unitCountAll) ; auto9BBE802A_u += (lv_itUnit == UnitGroupUnit(auto9BBE802A_g, auto9BBE802A_u)) ) {
                lv_itUnit = UnitGroupUnit(auto9BBE802A_g, auto9BBE802A_u);
                if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lv_itUnit)) == lv_itTeam)) {
                    libGame_gf_SendEventUnitEntersSafeZoneRegion(lv_itUnit);
                }

            }
        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMSafeRegionBehavior_Init () {
    libMapM_gt_MMSafeRegionBehavior = TriggerCreate("libMapM_gt_MMSafeRegionBehavior_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Remove Stacking Core Shield Mechanic
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRemoveStackingCoreShieldMechanic_Func (bool testConds, bool runActions) {
    int auto7AE22EB6_ae;
    int auto7AE22EB6_ai;

    // Variable Declarations
    int lv_teamIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto7AE22EB6_ae = libCore_gv_bALMaxTeams;
    auto7AE22EB6_ai = 1;
    lv_teamIndex = 1;
    for ( ; ( (auto7AE22EB6_ai >= 0 && lv_teamIndex <= auto7AE22EB6_ae) || (auto7AE22EB6_ai <= 0 && lv_teamIndex >= auto7AE22EB6_ae) ) ; lv_teamIndex += auto7AE22EB6_ai ) {
        UnitBehaviorRemove(libGame_gv_teams[lv_teamIndex].lv_core, "CoreShieldsLevel1", 1);
        UnitBehaviorRemove(libGame_gv_teams[lv_teamIndex].lv_core, "CoreShieldsLevel2", 1);
        UnitBehaviorRemove(libGame_gv_teams[lv_teamIndex].lv_core, "CoreShieldsLevel3", 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRemoveStackingCoreShieldMechanic_Init () {
    libMapM_gt_MMRemoveStackingCoreShieldMechanic = TriggerCreate("libMapM_gt_MMRemoveStackingCoreShieldMechanic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Curse Init
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenCurseInit_Func (bool testConds, bool runActions) {
    playergroup autoFAEFD69E_g;
    int autoFAEFD69E_p;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gf_MapMechanicInitializationMechanicType() == libMapM_gv_mMRavenMechanicName_C))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gv_mapMechanicsObserverCountLabelText = StringToText("");
    TriggerEnable(libMapM_gt_MMRavenCurseGateOpen, true);
    TriggerEnable(libMapM_gt_MMRavenTributeCollectStarted, true);
    TriggerEnable(libMapM_gt_MMRavenTributeCollectCanceled, true);
    TriggerEnable(libMapM_gt_MMRavenDebugStartWarning, true);
    TriggerEnable(libMapM_gt_MMRavenDebugStartElunees, true);
    TriggerEnable(libMapM_gt_MMRavenDebugStartNexten, true);
    TriggerEnable(libMapM_gt_MMRavenDebugStartCurseec, true);
    TriggerEnable(libMapM_gt_MMRavenDisableEvent, true);
    libAIAI_gv_heroAITeamMapLogicTrigger = libMapM_gt_MMRavenCurseHeroAITeamMapLogic;
    ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal MM1Off");
    libGame_gf_SendMapSpecificAwardInitializeEventwithUserData(null, "Master of the Curse");
    autoFAEFD69E_g = PlayerGroupAll(); 
    autoFAEFD69E_p = 1;
    for ( ; autoFAEFD69E_p <= PlayerGroupCount(autoFAEFD69E_g) ; autoFAEFD69E_p += (lv_itPlayer == PlayerGroupPlayer(autoFAEFD69E_g, autoFAEFD69E_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoFAEFD69E_g, autoFAEFD69E_p);
        CatalogFieldValueSet(c_gameCatalogAbil, "CaptureMacGuffin", "Activity", lv_itPlayer, "DOCSTR_MMRavenCurse_CapturingTribute");
        CatalogFieldValueSet(c_gameCatalogEffect, "CaptureMacGuffin", "PeriodCount", lv_itPlayer, "48");
    }
    libMapM_gv_mMRavenFirstEventTiming = (libMapM_gf_MMRavenStartTime() + RandomFixed((libMapM_gv_mMRavenTributeSpawnTimeVariance * -1), libMapM_gv_mMRavenTributeSpawnTimeVariance));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenCurseInit_Init () {
    libMapM_gt_MMRavenCurseInit = TriggerCreate("libMapM_gt_MMRavenCurseInit_Func");
    libGame_gf_MapMechanicInitialization(libMapM_gt_MMRavenCurseInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Curse - HeroAI - Team Map Logic
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenCurseHeroAITeamMapLogic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_HeroAICaptureTearOfEluneLogic(libAIAI_gv_heroAITeamMapLogicFaction);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenCurseHeroAITeamMapLogic_Init () {
    libMapM_gt_MMRavenCurseHeroAITeamMapLogic = TriggerCreate("libMapM_gt_MMRavenCurseHeroAITeamMapLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Curse Gate Open
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenCurseGateOpen_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libMapM_gt_MMRavenSpawnTribute, true);
    TriggerEnable(libMapM_gt_MMRavenTributeObtained, true);
    TimerStart(libMapM_gv_mMRavenStartTimer, libMapM_gv_mMRavenFirstEventTiming, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenCurseGateOpen_Init () {
    libMapM_gt_MMRavenCurseGateOpen = TriggerCreate("libMapM_gt_MMRavenCurseGateOpen_Func");
    TriggerEnable(libMapM_gt_MMRavenCurseGateOpen, false);
    TriggerAddEventTimer(libMapM_gt_MMRavenCurseGateOpen, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Start Spawning
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenStartSpawning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    if ((libMapM_gv_mMMapMechanicDisabled == true)) {
        TriggerEnable(libMapM_gt_MMRavenSpawnTribute, false);
        TriggerEnable(libMapM_gt_MMRavenTributeObtained, false);
        return true;
    }

    if ((libMapM_gv_mMRavenEventFirstTime == true)) {
        TimerStart(libMapM_gv_mMRavenWarningTimer, 0.125, false, c_timeGame);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenStartSpawning_Init () {
    libMapM_gt_MMRavenStartSpawning = TriggerCreate("libMapM_gt_MMRavenStartSpawning_Func");
    TriggerAddEventTimer(libMapM_gt_MMRavenStartSpawning, libMapM_gv_mMRavenStartTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Spawn Tribute
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenSpawnTribute_Func (bool testConds, bool runActions) {
    int autoA0826D15_val;
    playergroup autoF1C7D990_g;
    int autoF1C7D990_p;
    playergroup auto4CE6CAAB_g;
    int auto4CE6CAAB_p;

    // Variable Declarations
    point lv_spawnPoint;
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gv_mMRavenCurseLifted = false;
    if ((libCore_gv_sYSGameMode == libCore_ge_GameModes_TutorialMapMechanics)) {
        autoA0826D15_val = libMapM_gv_mMRavenTributeSpawnCount;
        if (autoA0826D15_val == 1) {
            libMapM_gv_mMRavenTributeSpawnCount += 1;
            libMapM_gv_mMRavenLastTributeSpawnIndex1 = 2;
            lv_spawnPoint = libMapM_gv_mMRavenTributeSpawnPoints[libMapM_gv_mMRavenLastTributeSpawnIndex1];
        }
        else if (autoA0826D15_val == 2) {
            libMapM_gv_mMRavenTributeSpawnCount += 1;
            libMapM_gv_mMRavenLastTributeSpawnIndex1 = 4;
            libMapM_gv_mMRavenLastTributeSpawnIndex2 = 2;
            lv_spawnPoint = libMapM_gv_mMRavenTributeSpawnPoints[libMapM_gv_mMRavenLastTributeSpawnIndex1];
        }
        else if (autoA0826D15_val == 3) {
            libMapM_gv_mMRavenTributeSpawnCount += 1;
            libMapM_gv_mMRavenLastTributeSpawnIndex1 = 3;
            libMapM_gv_mMRavenLastTributeSpawnIndex2 = 4;
            lv_spawnPoint = libMapM_gv_mMRavenTributeSpawnPoints[libMapM_gv_mMRavenLastTributeSpawnIndex1];
        }
        else {
            lv_spawnPoint = libMapM_gf_MMRavenRandomSpawnPoint();
        }
    }
    else {
        lv_spawnPoint = libMapM_gf_MMRavenRandomSpawnPoint();
    }
    if ((libMapM_gv_mMRavenEventFirstTime == false)) {
        libMapM_gf_MMRavenTransmissionRepeatEventStartQ();
    }
    else {
        libMapM_gf_MMRavenTransmissionFirstEventStartQ();
        TriggerExecute(libMapM_gt_MMRavenObjectiveUIHandler, true, false);
    }
    Wait(2.0, c_timeGame);
    SoundPlayAtPointForPlayer(SoundLink("Event_RavenCurse_TributeSpawn", -1), c_maxPlayers, PlayerGroupAll(), lv_spawnPoint, 2.0, 100.0, 0.0);
    libMapM_gv_mMRavenSpawnSound = SoundLastPlayed();
    libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormAlert", lv_spawnPoint, ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 6.0);
    libGame_gf_SendEventMapCursedHollowTributeWarning(lv_spawnPoint);
    libGame_gf_AfkResetMapMechanicLocations();
    libGame_gf_AfkAddMapMechanicLocation(lv_spawnPoint);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RavenLordTributeWarning", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, lv_spawnPoint);
    libMapM_gv_mMRavenTributeWarning = UnitLastCreated();
    UnitGroupAdd(libMapM_gv_mMRavenTributeWarnings, UnitLastCreated());
    libMapM_gf_MMRavenSpawnRevealeratTribute(UnitLastCreated());
    TimerStart(libMapM_gv_mMRavenTributeSpawnTimer, libMapM_gv_mMRavenSpawnWarningTimerTime_C, false, c_timeGame);
    libNtve_gf_WaitForTimer(libMapM_gv_mMRavenTributeSpawnTimer, 0.0, false);
    UnitKill(libMapM_gv_mMRavenTributeWarning);
    libNtve_gf_CreateModelAtPoint("RavenLordTributeSpawn", lv_spawnPoint);
    Wait(0.5, c_timeReal);
    libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormAlert", lv_spawnPoint, ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 3.0);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RavenLordTribute", c_unitCreateIgnorePlacement, libCore_gv_cOMPUTER_Neutral, lv_spawnPoint);
    ActorCreate(ActorScopeFromUnit(UnitLastCreated()), "UI_Game_Ping_Tribute_Ready", null, null, null);
    UnitGroupAddUnitGroup(libMapM_gv_mMRavenTributes, UnitLastCreatedGroup());
    TriggerEnable(libMapM_gt_MMRavenTributeObtained, true);
    libGame_gf_SendEventMapCursedHollowTributeSpawned(UnitLastCreated());
    libMapM_gv_mMRavenEventFirstTime = false;
    Wait(1.0, c_timeGame);
    libUIUI_gf_AttachHelpButtonToUnit(UnitLastCreated(), libMapM_gt_MMHelpbuttonClicked, StringExternal("Param/Value/lib_MapM_E2F763F8"), 110, 135);
    autoF1C7D990_g = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]; 
    autoF1C7D990_p = 1;
    for ( ; autoF1C7D990_p <= PlayerGroupCount(autoF1C7D990_g) ; autoF1C7D990_p += (lv_itPlayer == PlayerGroupPlayer(autoF1C7D990_g, autoF1C7D990_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(autoF1C7D990_g, autoF1C7D990_p);
        libUIUI_gf_ShowHideHelpButtonOnUnitForPlayer(lv_itPlayer, false, UnitLastCreated());
    }
    Wait(0.5, c_timeGame);
    auto4CE6CAAB_g = libCore_gv_activeHumanPlayers; 
    auto4CE6CAAB_p = 1;
    for ( ; auto4CE6CAAB_p <= PlayerGroupCount(auto4CE6CAAB_g) ; auto4CE6CAAB_p += (lv_itPlayer == PlayerGroupPlayer(auto4CE6CAAB_g, auto4CE6CAAB_p)) ) {
        lv_itPlayer = PlayerGroupPlayer(auto4CE6CAAB_g, auto4CE6CAAB_p);
        if ((libMapM_gv_mapMechanicUsedTracker[lv_itPlayer].lv_ravenTribute == true) && (libCore_gv_sYSGameMode != libCore_ge_GameModes_TutorialMapMechanics)) {
            libUIUI_gf_ShowHideHelpButtonOnUnitForPlayer(lv_itPlayer, false, UnitLastCreated());
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenSpawnTribute_Init () {
    libMapM_gt_MMRavenSpawnTribute = TriggerCreate("libMapM_gt_MMRavenSpawnTribute_Func");
    TriggerEnable(libMapM_gt_MMRavenSpawnTribute, false);
    TriggerAddEventTimer(libMapM_gt_MMRavenSpawnTribute, libMapM_gv_mMRavenWarningTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Tribute Collect Started
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenTributeCollectStarted_Func (bool testConds, bool runActions) {
    int autoB2ADE185_val;

    // Variable Declarations
    int lv_count;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitTargetUnit()) == "RavenLordTribute"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_count = (libCore_gf_IntegerStoredForUnit(EventUnitTargetUnit(), 1) + 1);
    libCore_gf_StoreIntegerForUnit(EventUnitTargetUnit(), 1, lv_count);
    libNtve_gf_TurnAnimationPropertiesOn(libNtve_gf_MainActorofUnit(EventUnitTargetUnit()), "Work");
    autoB2ADE185_val = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()));
    if (autoB2ADE185_val == libGame_gv_teamOrderIndex_C) {
        libNtve_gf_SendActorMessageToUnit(EventUnitTargetUnit(), "StatusIncrement TributeCaptureOrder");
    }
    else if (autoB2ADE185_val == libGame_gv_teamChaosIndex_C) {
        libNtve_gf_SendActorMessageToUnit(EventUnitTargetUnit(), "StatusIncrement TributeCaptureChaos");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenTributeCollectStarted_Init () {
    libMapM_gt_MMRavenTributeCollectStarted = TriggerCreate("libMapM_gt_MMRavenTributeCollectStarted_Func");
    TriggerEnable(libMapM_gt_MMRavenTributeCollectStarted, false);
    TriggerAddEventUnitAbility(libMapM_gt_MMRavenTributeCollectStarted, null, AbilityCommand("CaptureMacGuffin", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Tribute Collect Canceled
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenTributeCollectCanceled_Func (bool testConds, bool runActions) {
    int autoC5D651B5_val;

    // Variable Declarations
    int lv_count;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitTargetUnit()) == "RavenLordTribute"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_count = MaxI((libCore_gf_IntegerStoredForUnit(EventUnitTargetUnit(), 1) - 1), 0);
    libCore_gf_StoreIntegerForUnit(EventUnitTargetUnit(), 1, lv_count);
    if ((lv_count == 0)) {
        libNtve_gf_TurnAnimationPropertiesOff(libNtve_gf_MainActorofUnit(EventUnitTargetUnit()), "Work");
    }

    autoC5D651B5_val = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventUnit()));
    if (autoC5D651B5_val == libGame_gv_teamOrderIndex_C) {
        libNtve_gf_SendActorMessageToUnit(EventUnitTargetUnit(), "StatusDecrement TributeCaptureOrder");
    }
    else if (autoC5D651B5_val == libGame_gv_teamChaosIndex_C) {
        libNtve_gf_SendActorMessageToUnit(EventUnitTargetUnit(), "StatusDecrement TributeCaptureChaos");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenTributeCollectCanceled_Init () {
    libMapM_gt_MMRavenTributeCollectCanceled = TriggerCreate("libMapM_gt_MMRavenTributeCollectCanceled_Func");
    TriggerEnable(libMapM_gt_MMRavenTributeCollectCanceled, false);
    TriggerAddEventUnitAbility(libMapM_gt_MMRavenTributeCollectCanceled, null, AbilityCommand("CaptureMacGuffin", 0), c_unitAbilStageCancel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Tribute Collect Interrupted
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenTributeCollectInterrupted_Func (bool testConds, bool runActions) {
    int auto6A2ED71E_val;

    // Conditions
    if (testConds) {
        if (!((libMapM_gf_MapMechanicExistsOnMap(libMapM_gv_mMRavenMechanicName_C) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6A2ED71E_val = libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)));
    if (auto6A2ED71E_val == libGame_gv_teamOrderIndex_C) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupUnit(libMapM_gv_mMRavenTributes, 1), "StatusDecrement TributeCaptureOrder");
    }
    else if (auto6A2ED71E_val == libGame_gv_teamChaosIndex_C) {
        libNtve_gf_SendActorMessageToUnit(UnitGroupUnit(libMapM_gv_mMRavenTributes, 1), "StatusDecrement TributeCaptureChaos");
    }
    else {
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenTributeCollectInterrupted_Init () {
    libMapM_gt_MMRavenTributeCollectInterrupted = TriggerCreate("libMapM_gt_MMRavenTributeCollectInterrupted_Func");
    TriggerAddEventPlayerEffectUsed(libMapM_gt_MMRavenTributeCollectInterrupted, c_playerAny, "CaptureMacguffinDummyDamageResponse");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Tribute Obtained
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenTributeObtained_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_collectedPlayer;
    int lv_collectedTeam;
    int lv_collectedTeamEnemy;
    unit lv_macGuffinUnit;
    int lv_teamIterator;
    string lv_macGuffinCount;
    int lv_regenGlobeOwner;
    point lv_regenGlobePoint;

    // Variable Initialization
    lv_collectedPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    lv_collectedTeam = libGame_gf_TeamNumberOfPlayer(lv_collectedPlayer);
    lv_collectedTeamEnemy = libGame_gf_EnemyTeam(lv_collectedTeam);
    lv_macGuffinUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_macGuffinCount = "";
    lv_regenGlobePoint = UnitGetPosition(lv_macGuffinUnit);

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupHasUnit(libMapM_gv_mMRavenTributes, lv_macGuffinUnit) == false)) {
        libNtve_gf_SendActorMessageToUnit(lv_macGuffinUnit, "Signal TributeOwnerNeutral");
        libNtve_gf_SendActorMessageToUnit(lv_macGuffinUnit, "StatusSet TributeOwnerChaos 0");
        libNtve_gf_SendActorMessageToUnit(lv_macGuffinUnit, "StatusSet TributeOwnerOrder 0");
        UnitKill(lv_macGuffinUnit);
        return true;
    }

    UnitGroupRemove(libMapM_gv_mMRavenTributes, lv_macGuffinUnit);
    libMapM_gv_mMRavenTributesCollected += 1;
    libGame_gf_SendEventMapCursedHollowTributePickedUp(lv_collectedPlayer, UnitGetPosition(lv_macGuffinUnit));
    libGame_gf_SendEventMapObjectiveCapturedByUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    libNtve_gf_SendActorMessageToUnit(lv_macGuffinUnit, "Signal TributeOwnerNeutral");
    libNtve_gf_SendActorMessageToUnit(lv_macGuffinUnit, "StatusSet TributeOwnerChaos 0");
    libNtve_gf_SendActorMessageToUnit(lv_macGuffinUnit, "StatusSet TributeOwnerOrder 0");
    UnitKill(lv_macGuffinUnit);
    libMapM_gv_mMRavenTeamStats[lv_collectedTeam].lv_triburteCollected += 1;
    libMapM_gv_mapMechanicUsedTracker[lv_collectedPlayer].lv_ravenTribute = true;
    StatEventCreate("TributeCollected");
    StatEventAddDataInt(StatEventLastCreated(), "Event", libMapM_gv_mMRavenTributesCollected);
    StatEventAddDataFixed(StatEventLastCreated(), "TeamID", lv_collectedTeam);
    StatEventSend(StatEventLastCreated());
    libGame_gf_AfkResetMapMechanicLocations();
    if ((lv_collectedTeam == 1)) {
        lv_regenGlobeOwner = libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
        lv_regenGlobeOwner = libCore_gv_cOMPUTER_TeamChaos;
    }
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "RegenGlobe", c_unitCreateIgnorePlacement, lv_regenGlobeOwner, lv_regenGlobePoint);
    lv_macGuffinCount = IntToString(libMapM_gv_mMRavenTeamStats[lv_teamIterator].lv_triburteCollected);
    if ((libMapM_gv_mMRavenTeamStats[lv_collectedTeam].lv_triburteCollected == libMapM_gf_MMRavenTributeThresholdAmount())) {
        libMapM_gf_MMRavenTributeCollectionThresholdReached(lv_collectedTeam);
    }
    else {
        libMapM_gf_MMRavenStartSpawnTimer5090();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenTributeObtained_Init () {
    libMapM_gt_MMRavenTributeObtained = TriggerCreate("libMapM_gt_MMRavenTributeObtained_Func");
    TriggerEnable(libMapM_gt_MMRavenTributeObtained, false);
    TriggerAddEventPlayerEffectUsed(libMapM_gt_MMRavenTributeObtained, c_playerAny, "CaptureMacGuffinCastComplete");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Curse Start Light Transition
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenCurseStartLightTransition_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libGame_gf_SpecialLightingEventStart("StormRavenCourtCurseTransition", PlayerGroupAll(), 1.0);
    Wait(1.0, c_timeGame);
    libGame_gf_SpecialLightingEventStart("StormRavenCourtCurseFinal", PlayerGroupAll(), 2.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenCurseStartLightTransition_Init () {
    libMapM_gt_MMRavenCurseStartLightTransition = TriggerCreate("libMapM_gt_MMRavenCurseStartLightTransition_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Curse Finished
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenCurseFinished_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;
    int lv_cursedTeam;
    int lv_enemyTeam;
    int lv_cursedPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, false);
    SoundStop(libMapM_gv_mMRavenCurseSound, true);
    SoundPlayForPlayer(SoundLink("Event_RavenCurse_CurseEnd", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
    ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal MM1Off");
    ActorSend(libMapM_gv_mapMechanicControllerActor, "Signal RainOff");
    if ((libMapM_gv_mMRavenTeamStats[1].lv_cursed == true)) {
        lv_cursedTeam = 1;
        lv_cursedPlayer = libCore_gv_cOMPUTER_TeamOrder;
        libMapM_gv_mMRavenTeamStats[libGame_gv_teamChaosIndex_C].lv_triburteCollected -= libMapM_gv_mMRavenTributeThreshold_C;
    }
    else if ((libMapM_gv_mMRavenTeamStats[2].lv_cursed == true)) {
        lv_cursedTeam = 2;
        lv_cursedPlayer = libCore_gv_cOMPUTER_TeamChaos;
        libMapM_gv_mMRavenTeamStats[libGame_gv_teamOrderIndex_C].lv_triburteCollected -= libMapM_gv_mMRavenTributeThreshold_C;
    }
    else if (true) {
        return true;
    }
    libMapM_gf_MMRavenObjectiveUIUpdateText();
    lv_enemyTeam = libGame_gf_EnemyTeam(lv_cursedTeam);
    libMapM_gf_CalculateCurseSiegeDamageDone(lv_enemyTeam);
    libGame_gf_SendEventMapCursedHollowCurseEnds();
    libMapM_gf_MMRavenTransmissionCurseEndsQ();
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libSond_gf_SoundtrackPlayMapSoundtrackAsDefaultSoundtrackForAllPlayers();
    UnitGroupLoopBegin(UnitGroup(null, lv_cursedPlayer, RegionEntireMap(), libCore_gv_filtersMinionsTownMinions, 0));
    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
        libMapM_gf_MMRavenRemoveCurseEffectOnMinion(UnitGroupLoopCurrent());
    }
    UnitGroupLoopEnd();
    libMapM_gv_mMRavenTeamStats[1].lv_cursed = false;
    libMapM_gv_mMRavenTeamStats[2].lv_cursed = false;
    libMapM_gv_mMRavenCurseLifted = true;
    libGame_gf_SpecialLightingEventEnd("StormRavenCourtCurseFinal", PlayerGroupAll(), 2.0);
    Wait(libMapM_gv_mMRavenTributePostCurseWaitTime, c_timeGame);
    libMapM_gf_MMRavenStartSpawnTimer5090();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenCurseFinished_Init () {
    libMapM_gt_MMRavenCurseFinished = TriggerCreate("libMapM_gt_MMRavenCurseFinished_Func");
    TriggerAddEventTimer(libMapM_gt_MMRavenCurseFinished, libMapM_gv_mMRavenCurseTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Objective UI Handler
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenObjectiveUIHandler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_tipEffect;
    text lv_tip;
    text lv_tipCursed;
    int lv_indexTeam;
    int lv_indexTeamEnemy;
    int lv_state;
    int lv_lastState;

    // Variable Initialization
    lv_state = libMapM_ge_MMRavenCurseState_Starting;
    lv_lastState = libMapM_ge_MMRavenCurseState_Starting;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_tipEffect = StringExternal("Param/Value/lib_MapM_E2282CCF");
    TextExpressionSetToken("Param/Expression/lib_MapM_A249BD62", "A", IntToText(libMapM_gv_mMRavenTributeThreshold_C));
    TextExpressionSetToken("Param/Expression/lib_MapM_A249BD62", "B", lv_tipEffect);
    lv_tip = TextExpressionAssemble("Param/Expression/lib_MapM_A249BD62");
    lv_tipCursed = lv_tipEffect;
    while (true) {
        if ((libMapM_gv_mMRavenCurseLifted == true)) {
            lv_state = libMapM_ge_MMRavenCurseState_Lifted;
            libUIUI_gf_MapMechanicsRavenCourtSetModeForTeam(libUIUI_ge_MapMechanicsRavenCourtModes_NoActivity, 0);
            Wait(8.0, c_timeGame);
            while (!((libMapM_gv_mMRavenCurseLifted == false))) {
                Wait(0.25, c_timeGame);
            }
            lv_lastState = lv_state;
        }
        else if ((libMapM_gf_MMRavenCurseStarted() == true)) {
            lv_state = libMapM_ge_MMRavenCurseState_Cursed;
            if ((libMapM_gv_mMRavenTeamStats[1].lv_cursed == true)) {
                lv_indexTeam = 1;
                lv_indexTeamEnemy = 2;
            }
            else {
                lv_indexTeam = 2;
                lv_indexTeamEnemy = 1;
            }
            if ((lv_state != lv_lastState)) {
                libUIUI_gf_MapMechanicsRavenCourtSetModeForTeam(libUIUI_ge_MapMechanicsRavenCourtModes_Curse, lv_indexTeamEnemy);
                libUIUI_gf_MapMechanicsRavenCourtSetTributeCountForTeam(0, lv_indexTeamEnemy);
            }

            libUIUI_gf_MapMechanicsRavenCourtSetRemainingCurseTimeForTeam(FixedToInt(TimerGetRemaining(libMapM_gv_mMRavenCurseTimer)), lv_indexTeamEnemy);
            lv_lastState = lv_state;
        }
        else if ((TimerGetRemaining(libMapM_gv_mMRavenTributeSpawnTimer) > 0.0)) {
            lv_state = libMapM_ge_MMRavenCurseState_TributeSpawning;
            if ((lv_state != lv_lastState)) {
                libUIUI_gf_MapMechanicsRavenCourtSetModeForTeam(libUIUI_ge_MapMechanicsRavenCourtModes_TributeSpawning, 0);
            }

            libUIUI_gf_MapMechanicsRavenCourtSetRemainingTributeSpawnTime(FixedToInt(TimerGetRemaining(libMapM_gv_mMRavenTributeSpawnTimer)));
            lv_lastState = lv_state;
        }
        else if ((UnitGroupCount(libMapM_gv_mMRavenTributes, c_unitCountAlive) > 0)) {
            lv_state = libMapM_ge_MMRavenCurseState_TributeSpawned;
            if ((lv_state != lv_lastState)) {
                libUIUI_gf_MapMechanicsRavenCourtSetModeForTeam(libUIUI_ge_MapMechanicsRavenCourtModes_TributeSpawned, 0);
            }

            lv_lastState = lv_state;
        }
        else if (true) {
            lv_state = libMapM_ge_MMRavenCurseState_NoActivity;
            if ((lv_state != lv_lastState)) {
                libUIUI_gf_MapMechanicsRavenCourtSetModeForTeam(libUIUI_ge_MapMechanicsRavenCourtModes_NoActivity, 0);
                libUIUI_gf_MapMechanicsRavenCourtShowHidePanel(true);
            }

            lv_lastState = lv_state;
        }
        libMapM_gf_MMRavenObjectiveUIUpdateText();
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenObjectiveUIHandler_Init () {
    libMapM_gt_MMRavenObjectiveUIHandler = TriggerCreate("libMapM_gt_MMRavenObjectiveUIHandler_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven DisableEvent
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenDisableEvent_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((TimerGetRemaining(libMapM_gv_mMRavenStartTimer) > 0.0) || (TimerGetRemaining(libMapM_gv_mMRavenWarningTimer) > 0.0))) {
        TimerPause(libMapM_gv_mMRavenStartTimer, true);
        TimerPause(libMapM_gv_mMRavenWarningTimer, true);
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_MapM_0CC4D8C9"), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenDisableEvent_Init () {
    libMapM_gt_MMRavenDisableEvent = TriggerCreate("libMapM_gt_MMRavenDisableEvent_Func");
    TriggerEnable(libMapM_gt_MMRavenDisableEvent, false);
    TriggerAddEventChatMessage(libMapM_gt_MMRavenDisableEvent, c_playerAny, "DisableEvent", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Debug (Start Warning)
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenDebugStartWarning_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }

        if (!(((TimerGetRemaining(libMapM_gv_mMRavenStartTimer) > 0.0) || (TimerGetRemaining(libMapM_gv_mMRavenWarningTimer) > 0.0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TimerGetRemaining(libMapM_gv_mMRavenStartTimer) > 0.0)) {
        TimerStart(libMapM_gv_mMRavenStartTimer, 1.0, false, c_timeGame);
    }
    else {
        TimerStart(libMapM_gv_mMRavenWarningTimer, 1.0, false, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenDebugStartWarning_Init () {
    libMapM_gt_MMRavenDebugStartWarning = TriggerCreate("libMapM_gt_MMRavenDebugStartWarning_Func");
    TriggerEnable(libMapM_gt_MMRavenDebugStartWarning, false);
    TriggerAddEventChatMessage(libMapM_gt_MMRavenDebugStartWarning, c_playerAny, "WARNINGSTART", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Debug (Start Elune -es)
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenDebugStartElunees_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libMapM_gv_mMRavenStartTimer, 1.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenDebugStartElunees_Init () {
    libMapM_gt_MMRavenDebugStartElunees = TriggerCreate("libMapM_gt_MMRavenDebugStartElunees_Func");
    TriggerEnable(libMapM_gt_MMRavenDebugStartElunees, false);
    TriggerAddEventChatMessage(libMapM_gt_MMRavenDebugStartElunees, c_playerAny, "-es", true);
    TriggerAddEventChatMessage(libMapM_gt_MMRavenDebugStartElunees, c_playerAny, "EVENTSTART", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Debug (Start Next -en)
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenDebugStartNexten_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libMapM_gt_MMRavenStartSpawning) == true)) {
        TimerStart(libMapM_gv_mMRavenStartTimer, 1.0, false, c_timeGame);
        while (!((TriggerIsEnabled(libMapM_gt_MMRavenStartSpawning) == false))) {
            Wait(0.25, c_timeGame);
        }
    }

    TimerStart(libMapM_gv_mMRavenWarningTimer, 1.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenDebugStartNexten_Init () {
    libMapM_gt_MMRavenDebugStartNexten = TriggerCreate("libMapM_gt_MMRavenDebugStartNexten_Func");
    TriggerEnable(libMapM_gt_MMRavenDebugStartNexten, false);
    TriggerAddEventChatMessage(libMapM_gt_MMRavenDebugStartNexten, c_playerAny, "-en", true);
    TriggerAddEventChatMessage(libMapM_gt_MMRavenDebugStartNexten, c_playerAny, "TRIBUTENEXT", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Raven Debug (Start Curse -ec)
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMRavenDebugStartCurseec_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((TriggerIsEnabled(libMapM_gt_MMRavenStartSpawning) == true)) {
        TimerStart(libMapM_gv_mMRavenStartTimer, 1.0, false, c_timeGame);
        while (!((TriggerIsEnabled(libMapM_gt_MMRavenStartSpawning) == false))) {
            Wait(0.25, c_timeGame);
        }
    }

    libMapM_gv_mMRavenTeamStats[1].lv_triburteCollected = (libMapM_gv_mMRavenTributeThreshold_C - 1);
    TimerStart(libMapM_gv_mMRavenWarningTimer, 1.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMRavenDebugStartCurseec_Init () {
    libMapM_gt_MMRavenDebugStartCurseec = TriggerCreate("libMapM_gt_MMRavenDebugStartCurseec_Func");
    TriggerEnable(libMapM_gt_MMRavenDebugStartCurseec, false);
    TriggerAddEventChatMessage(libMapM_gt_MMRavenDebugStartCurseec, c_playerAny, "-ec", true);
    TriggerAddEventChatMessage(libMapM_gt_MMRavenDebugStartCurseec, c_playerAny, "TRIBUTELAST", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Gardens Dragon Init
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMGardensDragonInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gf_MapMechanicInitializationMechanicType() == libMapM_gv_mMGardensDragonMechanicName_C))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gv_mapMechanicsObserverCountLabelText = StringToText("");
    TriggerEnable(libMapM_gt_MMGardensDragonDebugCheatStartObelisksso, true);
    TriggerEnable(libMapM_gt_MMGardensDragonGateOpen, true);
    TriggerEnable(libMapM_gt_MMGardensDragonWarningTimerExpires, true);
    TriggerEnable(libMapM_gt_MMGardensDragonWarningTimerStart, true);
    TriggerEnable(libMapM_gt_MMGardensDragonDragonEventStarts, true);
    TriggerEnable(libMapM_gt_MMGardensDragonDragonEventEnds, true);
    TriggerEnable(libMapM_gt_MMGardensDragonTransformChannelFinish, true);
    TriggerEnable(libMapM_gt_MMGardensDragonDisableEvent, true);
    libGame_gf_SendMapSpecificAwardInitializeEventwithUserData(null, "Shriner");
    libAIAI_gv_heroAITeamMapLogicTrigger = libMapM_gt_MMGardensDragonHeroAITeamMapLogic;
    UnitSetState(libMapM_gv_mMGardensDragonStatue, c_unitStateHighlightable, false);
    UnitSetState(libMapM_gv_mMGardensDragonStatue, c_unitStateTargetable, false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMGardensDragonInit_Init () {
    libMapM_gt_MMGardensDragonInit = TriggerCreate("libMapM_gt_MMGardensDragonInit_Func");
    libGame_gf_MapMechanicInitialization(libMapM_gt_MMGardensDragonInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Gardens Dragon - HeroAI - Team Map Logic
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMGardensDragonHeroAITeamMapLogic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_HeroAICaptureObeliskLogic(libAIAI_gv_heroAITeamMapLogicFaction);
    libAIAI_gf_HeroAICaptureDragonLogic(libAIAI_gv_heroAITeamMapLogicFaction);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMGardensDragonHeroAITeamMapLogic_Init () {
    libMapM_gt_MMGardensDragonHeroAITeamMapLogic = TriggerCreate("libMapM_gt_MMGardensDragonHeroAITeamMapLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Gardens Dragon Gate Open
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMGardensDragonGateOpen_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(libMapM_gv_mMGardensDragonDragonTowerStartTimer, libMapM_gv_mMGardensDragonDragonTowerStartTime_C, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMGardensDragonGateOpen_Init () {
    libMapM_gt_MMGardensDragonGateOpen = TriggerCreate("libMapM_gt_MMGardensDragonGateOpen_Func");
    TriggerEnable(libMapM_gt_MMGardensDragonGateOpen, false);
    TriggerAddEventTimer(libMapM_gt_MMGardensDragonGateOpen, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Gardens Dragon Warning Timer Start
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMGardensDragonWarningTimerStart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libMapM_gt_MMGardensDragonObjectiveUIHandler, true, false);
    libMapM_gv_mMGardensDragonCurrentState = libMapM_ge_MMGardensDragonState_ObelisksWarning;
    TimerStart(libMapM_gv_mMGardensDragonDragonTowerWarningTimer, libMapM_gv_mMGardensDragonWarningTime_C, false, c_timeGame);
    if ((libMapM_gv_mMDragonballsTransmissionShrinesRechargeFirstTime == true)) {
        libMapM_gv_mMDragonballsTransmissionShrinesRechargeFirstTime = false;
        libMapM_gf_MMDragonballsTransmissionObelisksChargingFirstQ();
    }
    else {
        libMapM_gf_MMDragonballsTransmissionObelisksChargingRepeatQ();
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMGardensDragonWarningTimerStart_Init () {
    libMapM_gt_MMGardensDragonWarningTimerStart = TriggerCreate("libMapM_gt_MMGardensDragonWarningTimerStart_Func");
    TriggerEnable(libMapM_gt_MMGardensDragonWarningTimerStart, false);
    TriggerAddEventTimer(libMapM_gt_MMGardensDragonWarningTimerStart, libMapM_gv_mMGardensDragonDragonTowerStartTimer);
    TriggerAddEventTimer(libMapM_gt_MMGardensDragonWarningTimerStart, libMapM_gv_mMGardensDragonDragonTowerRespawnTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Gardens Dragon Warning Timer Expires
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMGardensDragonWarningTimerExpires_Func (bool testConds, bool runActions) {
    int autoE4D52634_ae;
    playergroup autoA3E49DEF_g;
    int autoA3E49DEF_p;
    playergroup auto94A62BD7_g;
    int auto94A62BD7_p;
    playergroup auto1E05FCEC_g;
    int auto1E05FCEC_p;

    // Variable Declarations
    int lv_itPlayer;
    int lv_obelisk;
    int lv_p;
    const int lv_fontSize = 15;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gv_mMGardensDragonCurrentState = libMapM_ge_MMGardensDragonState_ObelisksAvailable;
    if ((libMapM_gv_mMGardensDragonSpawnFirstTime == true)) {
        libMapM_gv_mMGardensDragonSpawnFirstTime = false;
        autoE4D52634_ae = libMapM_gv_mMGardensDragonDragonTowerObeliskCount_C;
        lv_obelisk = 1;
        for ( ; lv_obelisk <= autoE4D52634_ae ; lv_obelisk += 1 ) {
            libUIUI_gf_AttachHelpButtonToUnit(libMapM_gv_mMGardensDragonDragonTowers[lv_obelisk].lv_shrineUnit, libMapM_gt_MMHelpbuttonClicked, StringExternal("Param/Value/lib_MapM_C773195E"), 95, 370);
            autoA3E49DEF_g = libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer]; 
            autoA3E49DEF_p = 1;
            for ( ; autoA3E49DEF_p <= PlayerGroupCount(autoA3E49DEF_g) ; autoA3E49DEF_p += (lv_itPlayer == PlayerGroupPlayer(autoA3E49DEF_g, autoA3E49DEF_p)) ) {
                lv_itPlayer = PlayerGroupPlayer(autoA3E49DEF_g, autoA3E49DEF_p);
                libUIUI_gf_ShowHideHelpButtonOnUnitForPlayer(lv_itPlayer, false, libMapM_gv_mMGardensDragonDragonTowers[lv_obelisk].lv_shrineUnit);
            }
            auto94A62BD7_g = libCore_gv_activeHumanPlayers; 
            auto94A62BD7_p = 1;
            for ( ; auto94A62BD7_p <= PlayerGroupCount(auto94A62BD7_g) ; auto94A62BD7_p += (lv_p == PlayerGroupPlayer(auto94A62BD7_g, auto94A62BD7_p)) ) {
                lv_p = PlayerGroupPlayer(auto94A62BD7_g, auto94A62BD7_p);
                if ((libMapM_gv_mapMechanicUsedTracker[lv_p].lv_dragonShrine == true)) {
                    libUIUI_gf_ShowHideHelpButtonOnUnitForPlayer(lv_p, false, libMapM_gv_mMGardensDragonDragonTowers[lv_obelisk].lv_shrineUnit);
                }

            }
        }
        TriggerExecute(libMapM_gt_MMGardensDragonTurnOnDragonTowersFirstTime, true, false);
    }
    else {
        TriggerExecute(libMapM_gt_MMGardensDragonTurnOnDragonTowersAgain, true, false);
    }
    libGame_gf_AfkResetMapMechanicLocations();
    libGame_gf_AfkAddMapMechanicLocation(UnitGetPosition(libMapM_gv_mMGardensDragonTowerMoon));
    libGame_gf_AfkAddMapMechanicLocation(UnitGetPosition(libMapM_gv_mMGardensDragonTowerStar));
    libGame_gf_AfkAddMapMechanicLocation(UnitGetPosition(libMapM_gv_mMGardensDragonStatue));
    TextTagCreate(StringExternal("Param/Value/lib_MapM_60EE21E2"), lv_fontSize, UnitGetPosition(libMapM_gv_mMGardensDragonStatue), 0.0, true, false, PlayerGroupAll());
    libMapM_gv_mMGardensDragonStatueTextTag = TextTagLastCreated();
    TextTagAttachToUnit(TextTagLastCreated(), libMapM_gv_mMGardensDragonStatue, libMapM_gv_mMGardensDragonDragonStatueHelperTextTagHeightOffset_C);
    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), true);
    TextTagShow(TextTagLastCreated(), libCore_gv_playerGroupFromPlayer[libCore_gv_oBSERVER_ObserverUIPlayer], false);
    auto1E05FCEC_g = libCore_gv_activeHumanPlayers; 
    auto1E05FCEC_p = 1;
    for ( ; auto1E05FCEC_p <= PlayerGroupCount(auto1E05FCEC_g) ; auto1E05FCEC_p += (lv_p == PlayerGroupPlayer(auto1E05FCEC_g, auto1E05FCEC_p)) ) {
        lv_p = PlayerGroupPlayer(auto1E05FCEC_g, auto1E05FCEC_p);
        if ((libMapM_gv_mapMechanicUsedTracker[lv_p].lv_dragonStatue == true)) {
            TextTagShow(TextTagLastCreated(), libCore_gv_playerGroupFromPlayer[lv_p], false);
        }

    }
    TextTagCreate(StringExternal("Param/Value/lib_MapM_A60971D2"), lv_fontSize, UnitGetPosition(libMapM_gv_mMGardensDragonStatue), 0.0, true, false, PlayerGroupAll());
    libMapM_gv_mMGardensDragonStatueTextTagAllyOwned = TextTagLastCreated();
    TextTagAttachToUnit(TextTagLastCreated(), libMapM_gv_mMGardensDragonStatue, libMapM_gv_mMGardensDragonDragonStatueHelperTextTagHeightOffset_C);
    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), false);
    TextTagCreate(StringExternal("Param/Value/lib_MapM_EEE97929"), lv_fontSize, UnitGetPosition(libMapM_gv_mMGardensDragonStatue), 0.0, true, false, PlayerGroupAll());
    libMapM_gv_mMGardensDragonStatueTextTagEnemyOwned = TextTagLastCreated();
    TextTagAttachToUnit(TextTagLastCreated(), libMapM_gv_mMGardensDragonStatue, libMapM_gv_mMGardensDragonDragonStatueHelperTextTagHeightOffset_C);
    TextTagShow(TextTagLastCreated(), PlayerGroupAll(), false);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMGardensDragonWarningTimerExpires_Init () {
    libMapM_gt_MMGardensDragonWarningTimerExpires = TriggerCreate("libMapM_gt_MMGardensDragonWarningTimerExpires_Func");
    TriggerEnable(libMapM_gt_MMGardensDragonWarningTimerExpires, false);
    TriggerAddEventTimer(libMapM_gt_MMGardensDragonWarningTimerExpires, libMapM_gv_mMGardensDragonDragonTowerWarningTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Gardens Dragon Dragon Event Starts
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMGardensDragonDragonEventStarts_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gv_mMGardensDragonCurrentState = libMapM_ge_MMGardensDragonState_DragonRampaging;
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, true);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libSond_gf_SoundtrackApplyNewDefaultSoundtrackForPlayerGroup("Storm_Music_Dragonknight", PlayerGroupAll());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMGardensDragonDragonEventStarts_Init () {
    libMapM_gt_MMGardensDragonDragonEventStarts = TriggerCreate("libMapM_gt_MMGardensDragonDragonEventStarts_Func");
    TriggerEnable(libMapM_gt_MMGardensDragonDragonEventStarts, false);
    libGame_gf_MapDragonShireDragonActivated(libMapM_gt_MMGardensDragonDragonEventStarts);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Gardens Dragon Dragon Event Ends
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMGardensDragonDragonEventEnds_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gv_mMGardensDragonCurrentState = libMapM_ge_MMGardensDragonState_Idle;
    SoundChannelMute(PlayerGroupAll(), c_soundCategoryAmbient, false);
    SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
    libSond_gf_SoundtrackPlayMapSoundtrackAsDefaultSoundtrackForAllPlayers();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMGardensDragonDragonEventEnds_Init () {
    libMapM_gt_MMGardensDragonDragonEventEnds = TriggerCreate("libMapM_gt_MMGardensDragonDragonEventEnds_Func");
    TriggerEnable(libMapM_gt_MMGardensDragonDragonEventEnds, false);
    libGame_gf_MapDragonShireDragonEnds(libMapM_gt_MMGardensDragonDragonEventEnds);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Gardens Dragon Turn On Dragon Towers First Time
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMGardensDragonTurnOnDragonTowersFirstTime_Func (bool testConds, bool runActions) {
    int auto27701136_ae;
    int auto27701136_ai;
    int autoFF5452D1_ae;
    int autoFF5452D1_ai;

    // Variable Declarations
    int lv_indexTeam;
    int lv_obelisk;
    int lv_player;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    auto27701136_ae = libMapM_gv_mMGardensDragonDragonTowerCount;
    auto27701136_ai = 1;
    lv_obelisk = 1;
    for ( ; ( (auto27701136_ai >= 0 && lv_obelisk <= auto27701136_ae) || (auto27701136_ai <= 0 && lv_obelisk >= auto27701136_ae) ) ; lv_obelisk += auto27701136_ai ) {
        ActorSend(libNtve_gf_MainActorofUnit(libMapM_gv_mMGardensDragonDragonTowers[lv_obelisk].lv_shrineUnit), "SetMinimapVisibility 1");
        libGame_gf_SendEventMapDragonShireSpawned(libMapM_gv_mMGardensDragonDragonTowers[lv_obelisk].lv_shrineUnit);
        libGame_gf_CapturePointEnable(libMapM_gv_mMGardensDragonDragonTowers[lv_obelisk].lv_captureBeaconIndex);
        libNtve_gf_SendActorMessageToUnit(libMapM_gv_mMGardensDragonDragonTowers[lv_obelisk].lv_shrineUnit, "Signal OwnerNeutral");
    }
    TriggerEnable(libMapM_gt_MMGardensDragonDragonTowerChangeOwnershipEventFires, true);
    libMapM_gf_MMDragonballsTransmissionObelisksSpawnFirstQ();
    autoFF5452D1_ae = libMapM_gv_mMGardensDragonDragonTowerCount;
    autoFF5452D1_ai = 1;
    lv_obelisk = 1;
    for ( ; ( (autoFF5452D1_ai >= 0 && lv_obelisk <= autoFF5452D1_ae) || (autoFF5452D1_ai <= 0 && lv_obelisk >= autoFF5452D1_ae) ) ; lv_obelisk += autoFF5452D1_ai ) {
        libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormAlert", UnitGetPosition(libMapM_gv_mMGardensDragonDragonTowers[lv_obelisk].lv_shrineUnit), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 6.0);
        ActorCreate(ActorScopeFromUnit(libMapM_gv_mMGardensDragonDragonTowers[lv_obelisk].lv_shrineUnit), "UI_Game_Ping_Shrine_Ready", null, null, null);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMGardensDragonTurnOnDragonTowersFirstTime_Init () {
    libMapM_gt_MMGardensDragonTurnOnDragonTowersFirstTime = TriggerCreate("libMapM_gt_MMGardensDragonTurnOnDragonTowersFirstTime_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Gardens Dragon Turn On Dragon Towers Again
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMGardensDragonTurnOnDragonTowersAgain_Func (bool testConds, bool runActions) {
    int autoC4CF07E2_ae;
    int autoC4CF07E2_ai;
    playergroup auto82B36A20_g;
    int auto82B36A20_p;

    // Variable Declarations
    int lv_p;
    int lv_dragontower;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libMapM_gt_MMGardensDragonDragonTowerChangeOwnershipEventFires, true);
    UnitCreate(1, "VehicleDragon", c_unitCreateIgnorePlacement, 0, libMapM_gv_mMGardensDragonDragonKnightRespawnPoint, 270.0);
    libMapM_gv_mMGardensDragonStatue = UnitLastCreated();
    UnitSetState(libMapM_gv_mMGardensDragonStatue, c_unitStateStatusBar, false);
    TimerPause(libMapM_gv_mMGardensDragonDragonKnightLifeTimer, true);
    libMapM_gf_MMDragonballsTransmissionObelisksSpawnRepeatQ();
    autoC4CF07E2_ae = libMapM_gv_mMGardensDragonDragonTowerCount;
    autoC4CF07E2_ai = 1;
    lv_dragontower = 1;
    for ( ; ( (autoC4CF07E2_ai >= 0 && lv_dragontower <= autoC4CF07E2_ae) || (autoC4CF07E2_ai <= 0 && lv_dragontower >= autoC4CF07E2_ae) ) ; lv_dragontower += autoC4CF07E2_ai ) {
        UnitSetOwner(libMapM_gv_mMGardensDragonDragonTowers[lv_dragontower].lv_shrineUnit, libCore_gv_cOMPUTER_Neutral, true);
        ActorSend(libNtve_gf_MainActorofUnit(libMapM_gv_mMGardensDragonDragonTowers[lv_dragontower].lv_shrineUnit), "SetMinimapVisibility 1");
        libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormWarning", UnitGetPosition(libMapM_gv_mMGardensDragonDragonTowers[lv_dragontower].lv_shrineUnit), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 3.0);
        ActorCreate(ActorScopeFromUnit(libMapM_gv_mMGardensDragonDragonTowers[lv_dragontower].lv_shrineUnit), "UI_Game_Ping_Shrine_Ready", null, null, null);
        libGame_gf_CapturePointEnable(libMapM_gv_mMGardensDragonDragonTowers[lv_dragontower].lv_captureBeaconIndex);
        libNtve_gf_SendActorMessageToUnit(libMapM_gv_mMGardensDragonDragonTowers[lv_dragontower].lv_shrineUnit, "Signal OwnerNeutral");
        auto82B36A20_g = PlayerGroupAll(); 
        auto82B36A20_p = 1;
        for ( ; auto82B36A20_p <= PlayerGroupCount(auto82B36A20_g) ; auto82B36A20_p += (lv_p == PlayerGroupPlayer(auto82B36A20_g, auto82B36A20_p)) ) {
            lv_p = PlayerGroupPlayer(auto82B36A20_g, auto82B36A20_p);
            VisRevealArea(lv_p, RegionCircle(UnitGetPosition(libMapM_gv_mMGardensDragonDragonTowers[lv_dragontower].lv_shrineUnit), 0.75), 0.125, false);
        }
        libGame_gf_SendEventMapDragonShireSpawned(libMapM_gv_mMGardensDragonDragonTowers[lv_dragontower].lv_shrineUnit);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMGardensDragonTurnOnDragonTowersAgain_Init () {
    libMapM_gt_MMGardensDragonTurnOnDragonTowersAgain = TriggerCreate("libMapM_gt_MMGardensDragonTurnOnDragonTowersAgain_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Gardens Dragon Dragon Tower - Change Ownership Event Fires
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMGardensDragonDragonTowerChangeOwnershipEventFires_Func (bool testConds, bool runActions) {
    int auto8EAED812_ae;
    int auto16B91710_val;
    playergroup autoDA72EB8E_g;
    int autoDA72EB8E_p;

    // Variable Declarations
    int lv_index;
    int lv_owner;
    int lv_obelisk;
    int lv_p;

    // Variable Initialization
    lv_index = libGame_gf_CapturePointChangesOwnerCapturePointIndex();
    lv_owner = libGame_gf_CapturePointChangesOwnerOwner();

    // Actions
    if (!runActions) {
        return true;
    }

    auto8EAED812_ae = libMapM_gv_mMGardensDragonDragonTowerObeliskCount_C;
    lv_obelisk = 1;
    for ( ; lv_obelisk <= auto8EAED812_ae ; lv_obelisk += 1 ) {
        if ((libMapM_gv_mMGardensDragonDragonTowers[lv_obelisk].lv_captureBeaconIndex == lv_index)) {
            auto16B91710_val = lv_owner;
            if (auto16B91710_val == libCore_gv_cOMPUTER_TeamOrder) {
                libMapM_gf_MMGardensDragonChangeDragonballTowerOwnership(lv_obelisk, libCore_gv_cOMPUTER_TeamOrder, libGame_gf_CapturePointChangesOwnerCapturingPlayers());
                libNtve_gf_SendActorMessageToUnit(libMapM_gv_mMGardensDragonDragonTowers[lv_obelisk].lv_shrineUnit, "Signal OwnerOrder");
                libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormAlert", UnitGetPosition(libMapM_gv_mMGardensDragonDragonTowers[lv_obelisk].lv_shrineUnit), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 5.0);
            }
            else if (auto16B91710_val == libCore_gv_cOMPUTER_TeamChaos) {
                libMapM_gf_MMGardensDragonChangeDragonballTowerOwnership(lv_obelisk, libCore_gv_cOMPUTER_TeamChaos, libGame_gf_CapturePointChangesOwnerCapturingPlayers());
                libNtve_gf_SendActorMessageToUnit(libMapM_gv_mMGardensDragonDragonTowers[lv_obelisk].lv_shrineUnit, "Signal OwnerChaos");
                libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormAlert", UnitGetPosition(libMapM_gv_mMGardensDragonDragonTowers[lv_obelisk].lv_shrineUnit), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 5.0);
            }
            else if (auto16B91710_val == libCore_gv_cOMPUTER_Neutral) {
                libMapM_gf_MMGardensDragonChangeDragonballTowerOwnership(lv_obelisk, libCore_gv_cOMPUTER_Neutral, libGame_gf_CapturePointChangesOwnerCapturingPlayers());
                libNtve_gf_SendActorMessageToUnit(libMapM_gv_mMGardensDragonDragonTowers[lv_obelisk].lv_shrineUnit, "Signal OwnerNeutral");
            }
            else {
            }
            if ((lv_owner != libCore_gv_cOMPUTER_Neutral)) {
                autoDA72EB8E_g = PlayerGroupAlliance(c_playerGroupAlly, lv_owner); 
                autoDA72EB8E_p = 1;
                for ( ; autoDA72EB8E_p <= PlayerGroupCount(autoDA72EB8E_g) ; autoDA72EB8E_p += (lv_p == PlayerGroupPlayer(autoDA72EB8E_g, autoDA72EB8E_p)) ) {
                    lv_p = PlayerGroupPlayer(autoDA72EB8E_g, autoDA72EB8E_p);
                    if ((libNtve_gf_UnitInRegion(libGame_gv_players[lv_p].lv_heroUnit, RegionCircle(UnitGetPosition(libMapM_gv_mMGardensDragonDragonTowers[lv_obelisk].lv_shrineUnit), libMapM_gv_mMGardensDragonDragonballTowerCaptureRadius_C)) == true)) {
                        libMapM_gv_mapMechanicUsedTracker[lv_p].lv_dragonShrine = true;
                        libUIUI_gf_ShowHideHelpButtonOnUnitForPlayer(lv_p, false, libMapM_gv_mMGardensDragonDragonTowers[lv_obelisk].lv_shrineUnit);
                    }

                }
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMGardensDragonDragonTowerChangeOwnershipEventFires_Init () {
    libMapM_gt_MMGardensDragonDragonTowerChangeOwnershipEventFires = TriggerCreate("libMapM_gt_MMGardensDragonDragonTowerChangeOwnershipEventFires_Func");
    TriggerEnable(libMapM_gt_MMGardensDragonDragonTowerChangeOwnershipEventFires, false);
    libGame_gf_CapturePointChangesOwner(libMapM_gt_MMGardensDragonDragonTowerChangeOwnershipEventFires);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Gardens Dragon Dragon Tower - Check Obelisk Status
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMGardensDragonDragonTowerCheckObeliskStatus_Func (bool testConds, bool runActions) {
    int autoC86FE021_ae;
    int autoC86FE021_ai;

    // Variable Declarations
    int lv_orderTowersOwned;
    int lv_chaosTowersOwned;
    int lv_towerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    autoC86FE021_ae = libMapM_gv_mMGardensDragonDragonTowerObeliskCount_C;
    autoC86FE021_ai = 1;
    lv_towerIndex = 1;
    for ( ; ( (autoC86FE021_ai >= 0 && lv_towerIndex <= autoC86FE021_ae) || (autoC86FE021_ai <= 0 && lv_towerIndex >= autoC86FE021_ae) ) ; lv_towerIndex += autoC86FE021_ai ) {
        if ((UnitGetOwner(libMapM_gv_mMGardensDragonDragonTowers[lv_towerIndex].lv_shrineUnit) == libCore_gv_cOMPUTER_TeamOrder)) {
            lv_orderTowersOwned += 1;
        }

        if ((UnitGetOwner(libMapM_gv_mMGardensDragonDragonTowers[lv_towerIndex].lv_shrineUnit) == libCore_gv_cOMPUTER_TeamChaos)) {
            lv_chaosTowersOwned += 1;
        }

    }
    if (((lv_chaosTowersOwned == libMapM_gv_mMGardensDragonDragonTowerObeliskCount_C) || (lv_orderTowersOwned == libMapM_gv_mMGardensDragonDragonTowerObeliskCount_C))) {
        if ((lv_chaosTowersOwned == libMapM_gv_mMGardensDragonDragonTowerObeliskCount_C)) {
            libMapM_gf_MMGardensDragonActivateStatueForTeam(libCore_gv_cOMPUTER_TeamChaos);
            libMapM_gf_MMDragonballsTransmissionDragonCapturableQ(libGame_gv_teamChaosIndex_C);
        }
        else {
            libMapM_gf_MMGardensDragonActivateStatueForTeam(libCore_gv_cOMPUTER_TeamOrder);
            libMapM_gf_MMDragonballsTransmissionDragonCapturableQ(libGame_gv_teamOrderIndex_C);
        }
    }
    else {
        if ((UnitGetOwner(libMapM_gv_mMGardensDragonStatue) != 0)) {
            libMapM_gf_MMGardensDragonDeactivateStatue(UnitGetOwner(libMapM_gv_mMGardensDragonStatue));
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMGardensDragonDragonTowerCheckObeliskStatus_Init () {
    libMapM_gt_MMGardensDragonDragonTowerCheckObeliskStatus = TriggerCreate("libMapM_gt_MMGardensDragonDragonTowerCheckObeliskStatus_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Gardens Dragon Transform Channel Start
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMGardensDragonTransformChannelStart_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    UnitAbilitySpendExplicit(libMapM_gv_mMGardensDragonStatue, AbilityCommand("LeaveVehicle", 0), c_spendLocationAbility, 1.0, 1.0, 1.0, 1.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMGardensDragonTransformChannelStart_Init () {
    libMapM_gt_MMGardensDragonTransformChannelStart = TriggerCreate("libMapM_gt_MMGardensDragonTransformChannelStart_Func");
    TriggerEnable(libMapM_gt_MMGardensDragonTransformChannelStart, false);
    TriggerAddEventUnitAbility(libMapM_gt_MMGardensDragonTransformChannelStart, null, AbilityCommand("UseVehicle", 0), c_abilEffectStageChannel, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Gardens Dragon Transform Channel Finish
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMGardensDragonTransformChannelFinish_Func (bool testConds, bool runActions) {
    int auto632F3216_ae;
    int auto632F3216_ai;

    // Variable Declarations
    int lv_itObelisk;
    fixed lv_duration;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(libMapM_gt_MMGardensDragonDragonTowerChangeOwnershipEventFires, false);
    lv_duration = libMapM_gf_MMGardensDragonDragonDuration();
    libMapM_gv_mMGardensDragonDragonCaptures += 1;
    UnitBehaviorAdd(libMapM_gv_mMGardensDragonStatue, "VehicleDragonTimedLife", EventPlayerEffectUsedUnit(c_effectUnitCaster), 1);
    UnitBehaviorSetDuration(libMapM_gv_mMGardensDragonStatue, "VehicleDragonTimedLife", lv_duration);
    UnitBehaviorSetDurationRemaining(libMapM_gv_mMGardensDragonStatue, "VehicleDragonTimedLife", lv_duration);
    IntLoopBegin(1, libCore_gv_bALMaxPlayers);
    for ( ; !IntLoopDone() ; IntLoopStep() ) {
        UnitSetStateForPlayer(libMapM_gv_mMGardensDragonStatue, c_unitStateTargetable, IntLoopCurrent(), true);
    }
    IntLoopEnd();
    libGame_gf_SendEventMapObjectiveCapturedByUnit(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    libNtve_gf_UnitAbilityRemoveCooldown(libMapM_gv_mMGardensDragonStatue, "LeaveVehicle", "Abil/LeaveVehicle");
    UnitAbilityAddCooldown(libMapM_gv_mMGardensDragonStatue, "LeaveVehicle", "Abil/LeaveVehicle", 5.0);
    TimerPause(libMapM_gv_mMGardensDragonDragonStatueActiveReminderTimer, true);
    TimerStart(libMapM_gv_mMGardensDragonDragonKnightLifeTimer, lv_duration, false, c_timeGame);
    TriggerEnable(libMapM_gt_MMGardensDragonDragonKnightDiesorExpires, true);
    libMapM_gv_mMGardensDragonUnit = libGame_gv_players[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)].lv_activeVehicle;
    UnitSetPosition(libMapM_gv_mMGardensDragonUnit, PointWithOffset(UnitGetPosition(libMapM_gv_mMGardensDragonUnit), 0.0, -3.0), false);
    UnitSetState(libMapM_gv_mMGardensDragonUnit, c_unitStateStatusBar, true);
    libMapM_gv_mMGardensDragonPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster);
    StatEventCreate("DragonKnightActivated");
    StatEventAddDataInt(StatEventLastCreated(), "Event", libMapM_gv_mMGardensDragonDragonCaptures);
    StatEventAddDataFixed(StatEventLastCreated(), "TeamID", libGame_gf_TeamNumberOfPlayer(libMapM_gv_mMGardensDragonPlayer));
    StatEventSend(StatEventLastCreated());
    if ((libCore_gf_ActorStoredForUnit(libMapM_gv_mMGardensDragonUnit, 1) == null)) {
        libNtve_gf_AttachModelToUnit(libMapM_gv_mMGardensDragonUnit, "GardensDragonLight", "Ref_Center");
        libCore_gf_StoreActorForUnit(libMapM_gv_mMGardensDragonUnit, 1, libNtve_gf_ActorLastCreated());
    }

    auto632F3216_ae = libMapM_gv_mMGardensDragonDragonTowerCount;
    auto632F3216_ai = 1;
    lv_itObelisk = 1;
    for ( ; ( (auto632F3216_ai >= 0 && lv_itObelisk <= auto632F3216_ae) || (auto632F3216_ai <= 0 && lv_itObelisk >= auto632F3216_ae) ) ; lv_itObelisk += auto632F3216_ai ) {
        UnitSetOwner(libMapM_gv_mMGardensDragonDragonTowers[lv_itObelisk].lv_shrineUnit, libCore_gv_cOMPUTER_Neutral, true);
        UnitIssueOrder(libMapM_gv_mMGardensDragonDragonTowers[lv_itObelisk].lv_shrineUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libGame_gf_CapturePointDisable(libMapM_gv_mMGardensDragonDragonTowers[lv_itObelisk].lv_captureBeaconIndex);
        ActorSend(libNtve_gf_MainActorofUnit(libMapM_gv_mMGardensDragonDragonTowers[lv_itObelisk].lv_shrineUnit), "SetMinimapVisibility");
        libNtve_gf_SendActorMessageToUnit(libMapM_gv_mMGardensDragonDragonTowers[lv_itObelisk].lv_shrineUnit, "AnimBracketStop Capture");
        UnitStatusBarOverride(libMapM_gv_mMGardensDragonDragonTowers[lv_itObelisk].lv_shrineUnit, -1);
        TextTagDestroy(libMapM_gv_mMGardensDragonDragonTowers[lv_itObelisk].lv_helperText);
    }
    ActorScopeSend(ActorScopeFromActor(libMapM_gv_mMGardensDragonSoundRegionActor), "Signal StopSound");
    ActorRegionCreate(null, "DragonBeamEndRegion", libMapM_gv_mMGardensDragonSoundRegion);
    libGame_gf_SendEventMapDragonShireDragonActivated(libMapM_gv_mMGardensDragonStatue, libMapM_gv_mMGardensDragonPlayer);
    TextTagDestroy(libMapM_gv_mMGardensDragonStatueTextTag);
    TextTagDestroy(libMapM_gv_mMGardensDragonStatueTextTagAllyOwned);
    TextTagDestroy(libMapM_gv_mMGardensDragonStatueTextTagEnemyOwned);
    libMapM_gv_mapMechanicUsedTracker[EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)].lv_dragonStatue = true;
    libGame_gf_AfkResetMapMechanicLocations();
    libMapM_gf_MMGardensDragonDragonHasEnteredArtHooks();
    libMapM_gf_MMDragonballsTransmissionDragonActiveQ(libGame_gf_TeamNumberOfPlayer(EventPlayerEffectUsedUnitOwner(c_effectPlayerCaster)));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMGardensDragonTransformChannelFinish_Init () {
    libMapM_gt_MMGardensDragonTransformChannelFinish = TriggerCreate("libMapM_gt_MMGardensDragonTransformChannelFinish_Func");
    TriggerEnable(libMapM_gt_MMGardensDragonTransformChannelFinish, false);
    TriggerAddEventPlayerEffectUsed(libMapM_gt_MMGardensDragonTransformChannelFinish, c_playerAny, "UseVehicleCastCompleteSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Gardens Dragon Take Dragon Reminder Timer Expires
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMGardensDragonTakeDragonReminderTimerExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_obelisk;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libCore_gf_CreateMinimapPingStorm(PlayerGroupAll(), "StormWarning", UnitGetPosition(libMapM_gv_mMGardensDragonStatue), ColorWithAlpha(100.00, 0.00, 0.00, 0.00), 5.0);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMGardensDragonTakeDragonReminderTimerExpires_Init () {
    libMapM_gt_MMGardensDragonTakeDragonReminderTimerExpires = TriggerCreate("libMapM_gt_MMGardensDragonTakeDragonReminderTimerExpires_Func");
    TriggerAddEventTimer(libMapM_gt_MMGardensDragonTakeDragonReminderTimerExpires, libMapM_gv_mMGardensDragonDragonStatueActiveReminderTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Gardens Dragon Dragon Knight Dies or Expires
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMGardensDragonDragonKnightDiesorExpires_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_u;
    int lv_camp;
    int lv_i;
    int lv_player;

    // Variable Initialization
    lv_player = UnitGetOwner(EventUnit());

    // Actions
    if (!runActions) {
        return true;
    }

    if ((lv_player > libCore_gv_bALMaxPlayers)) {
        lv_player = libMapM_gv_mMGardensDragonPlayer;
    }

    TimerStart(libMapM_gv_mMGardensDragonDragonTowerRespawnTimer, libMapM_gv_mMGardensDragonDragonTowerRespawnTime_C, false, c_timeGame);
    TimerStart(libMapM_gv_mMGardensDragonDragonKnightLifeTimer, 0.0, false, c_timeGame);
    libGame_gf_SendEventMapDragonShireDragonEnds();
    ActorSend(libCore_gf_ActorStoredForUnit(libMapM_gv_mMGardensDragonUnit, 1), "Destroy");
    libMapM_gf_MMGardensDragonDragonHasLeftArtHooks();
    Wait(0.5, c_timeGame);
    libMapM_gf_MMDragonballsTransmissionDragonExpireQ();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMGardensDragonDragonKnightDiesorExpires_Init () {
    libMapM_gt_MMGardensDragonDragonKnightDiesorExpires = TriggerCreate("libMapM_gt_MMGardensDragonDragonKnightDiesorExpires_Func");
    TriggerEnable(libMapM_gt_MMGardensDragonDragonKnightDiesorExpires, false);
    TriggerAddEventUnitDied(libMapM_gt_MMGardensDragonDragonKnightDiesorExpires, UnitRefFromVariable("libMapM_gv_mMGardensDragonUnit"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Gardens Dragon Objective UI Handler
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMGardensDragonObjectiveUIHandler_Func (bool testConds, bool runActions) {
    int auto3C7A2C06_val;
    int auto01D05E00_val;

    // Variable Declarations
    text lv_tip;
    int lv_indexTeam;
    int lv_indexTeamEnemy;
    int lv_state;
    int lv_lastState;

    // Variable Initialization
    lv_state = libMapM_ge_MMGardensDragonState_Idle;
    lv_lastState = libMapM_ge_MMGardensDragonState_Idle;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_tip = TextExpressionAssemble("Param/Expression/lib_MapM_EE88F2AF");
    while (true) {
        if ((libMapM_gv_mMGardensDragonCurrentState == libMapM_ge_MMGardensDragonState_DragonRampaging)) {
            lv_state = libMapM_ge_MMGardensDragonState_DragonRampaging;
            if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(libMapM_gv_mMGardensDragonStatue)) == 1)) {
                lv_indexTeam = 1;
                lv_indexTeamEnemy = 2;
            }
            else {
                lv_indexTeam = 2;
                lv_indexTeamEnemy = 1;
            }
            if ((lv_state != lv_lastState)) {
                libUIUI_gf_MapMechanicsDragonShireSetUpDragonForTeam(libMapM_gv_mMGardensDragonUnit, lv_indexTeam);
                libUIUI_gf_MapMechanicsDragonShireSetMode(libUIUI_ge_MapMechanicsDragonShireModes_Dragon);
                if ((lv_indexTeam == 1)) {
                }

            }

            libUIUI_gf_MapMechanicsDragonShireSetRemainingDragonTime(FixedToInt(TimerGetRemaining(libMapM_gv_mMGardensDragonDragonKnightLifeTimer)));
            lv_lastState = lv_state;
        }
        else if ((libMapM_gv_mMGardensDragonCurrentState == libMapM_ge_MMGardensDragonState_ObelisksWarning)) {
            lv_state = libMapM_ge_MMGardensDragonState_ObelisksWarning;
            if ((lv_state != lv_lastState)) {
                libUIUI_gf_MapMechanicsDragonShireSetMode(libUIUI_ge_MapMechanicsDragonShireModes_ShrineTimer);
                libUIUI_gf_MapMechanicsDragonShireShowHidePanel(true);
            }

            libUIUI_gf_MapMechanicsDragonShireSetRemainingShrineWarningTime(FixedToInt(TimerGetRemaining(libMapM_gv_mMGardensDragonDragonTowerWarningTimer)));
            lv_lastState = lv_state;
        }
        else if ((libMapM_gv_mMGardensDragonCurrentState == libMapM_ge_MMGardensDragonState_ObelisksAvailable)) {
            lv_state = libMapM_ge_MMGardensDragonState_ObelisksAvailable;
            if ((lv_state != lv_lastState)) {
                libUIUI_gf_MapMechanicsDragonShireSetMode(libUIUI_ge_MapMechanicsDragonShireModes_Shrines);
            }

            libUIUI_gf_MapMechanicsDragonShireSetMoonShrineOwner(0);
            libUIUI_gf_MapMechanicsDragonShireSetStarShrineOwner(0);
            auto3C7A2C06_val = UnitGetOwner(libMapM_gv_mMGardensDragonTowerMoon);
            if (auto3C7A2C06_val == libCore_gv_cOMPUTER_TeamOrder) {
                libUIUI_gf_MapMechanicsDragonShireSetMoonShrineOwner(libGame_gv_teamOrderIndex_C);
            }
            else if (auto3C7A2C06_val == libCore_gv_cOMPUTER_TeamChaos) {
                libUIUI_gf_MapMechanicsDragonShireSetMoonShrineOwner(libGame_gv_teamChaosIndex_C);
            }
            else {
            }
            auto01D05E00_val = UnitGetOwner(libMapM_gv_mMGardensDragonTowerStar);
            if (auto01D05E00_val == libCore_gv_cOMPUTER_TeamOrder) {
                libUIUI_gf_MapMechanicsDragonShireSetStarShrineOwner(libGame_gv_teamOrderIndex_C);
            }
            else if (auto01D05E00_val == libCore_gv_cOMPUTER_TeamChaos) {
                libUIUI_gf_MapMechanicsDragonShireSetStarShrineOwner(libGame_gv_teamChaosIndex_C);
            }
            else {
            }
            lv_lastState = lv_state;
        }
        else if ((libMapM_gv_mMGardensDragonCurrentState == libMapM_ge_MMGardensDragonState_Idle)) {
            lv_state = libMapM_ge_MMGardensDragonState_Idle;
            if ((lv_state != lv_lastState)) {
                libUIUI_gf_MapMechanicsDragonShireShowHidePanel(false);
            }

            lv_lastState = lv_state;
        }
        Wait(0.25, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMGardensDragonObjectiveUIHandler_Init () {
    libMapM_gt_MMGardensDragonObjectiveUIHandler = TriggerCreate("libMapM_gt_MMGardensDragonObjectiveUIHandler_Func");
    TriggerAddEventChatMessage(libMapM_gt_MMGardensDragonObjectiveUIHandler, c_playerAny, "-eu", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Gardens Dragon DisableEvent
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMGardensDragonDisableEvent_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if (((TimerGetRemaining(libMapM_gv_mMGardensDragonDragonTowerStartTimer) > 0.0) || (TimerGetRemaining(libMapM_gv_mMGardensDragonDragonTowerRespawnTimer) > 0.0))) {
        TimerPause(libMapM_gv_mMGardensDragonDragonTowerStartTimer, true);
        TimerPause(libMapM_gv_mMGardensDragonDragonTowerRespawnTimer, true);
        TriggerEnable(TriggerGetCurrent(), false);
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_MapM_B8BF3BE0"), true);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMGardensDragonDisableEvent_Init () {
    libMapM_gt_MMGardensDragonDisableEvent = TriggerCreate("libMapM_gt_MMGardensDragonDisableEvent_Func");
    TriggerEnable(libMapM_gt_MMGardensDragonDisableEvent, false);
    TriggerAddEventChatMessage(libMapM_gt_MMGardensDragonDisableEvent, c_playerAny, "DisableEvent", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Gardens Dragon Debug Cheat (Start Obelisks -so)
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMGardensDragonDebugCheatStartObelisksso_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerExecute(libMapM_gt_MMGardensDragonObjectiveUIHandler, true, false);
    libMapM_gv_mMGardensDragonCurrentState = libMapM_ge_MMGardensDragonState_ObelisksWarning;
    TimerStart(libMapM_gv_mMGardensDragonDragonTowerWarningTimer, libMapM_gv_mMGardensDragonWarningTime_C, false, c_timeGame);
    TimerPause(libMapM_gv_mMGardensDragonDragonTowerStartTimer, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMGardensDragonDebugCheatStartObelisksso_Init () {
    libMapM_gt_MMGardensDragonDebugCheatStartObelisksso = TriggerCreate("libMapM_gt_MMGardensDragonDebugCheatStartObelisksso_Func");
    TriggerEnable(libMapM_gt_MMGardensDragonDebugCheatStartObelisksso, false);
    TriggerAddEventChatMessage(libMapM_gt_MMGardensDragonDebugCheatStartObelisksso, c_playerAny, "-so", true);
    TriggerAddEventChatMessage(libMapM_gt_MMGardensDragonDebugCheatStartObelisksso, c_playerAny, "EVENTSTART", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Init
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldInit_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((libGame_gf_MapMechanicInitializationMechanicType() == libMapM_gv_mMUnderworldMechanicName_C))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gv_mapMechanicsObserverCountLabelText = StringToText("");
    TriggerEnable(libMapM_gt_MMUnderworldStarttoEnterGates, true);
    TriggerEnable(libMapM_gt_MMUnderworldEnteringGates, true);
    TriggerEnable(libMapM_gt_MMUnderworldMonstersDies, true);
    TriggerEnable(libMapM_gt_MMUnderworldGatesOpened, true);
    TriggerEnable(libMapM_gt_MMUnderworldSkullPickup, true);
    TriggerEnable(libMapM_gt_MMUnderworldCameraPanned, true);
    TriggerEnable(libMapM_gt_MMUnderworldSkullDropped, true);
    TriggerEnable(libMapM_gt_MMUnderworldUntargetableAcrossPlane, true);
    TriggerEnable(libMapM_gt_MMUnderworldPlayerHeroLocationTracking, true);
    libAIAI_gv_heroAITeamMapLogicTrigger = libMapM_gt_MMUnderworldHeroAITeamMapLogic;
    TriggerEnable(libMapM_gt_MMUnderworldDebugStart, true);
    TriggerEnable(libMapM_gt_MMUnderworldDebugStart1, true);
    TriggerEnable(libMapM_gt_MMUnderworldDebugUnderworldClear, true);
    TriggerEnable(libMapM_gt_MMUnderworldDebugSummonBossScaling, true);
    TriggerEnable(libMapM_gt_MMUnderworldDebugPushEffect, true);
    TriggerEnable(libMapM_gt_MMUnderworldDebugSpawnSkulls, true);
    TriggerEnable(libMapM_gt_MMUnderworldDisableEvent, true);
    libMapM_gv_mMUnderworldTeleportingUnitTypes[1] = "ArthasArmyOfTheDeadGhoul";
    libMapM_gv_mMUnderworldTeleportingUnitTypes[2] = "JainaWaterElemental";
    libMapM_gv_mMUnderworldTeleportingUnitTypes[3] = "StitchesStinkling";
    libMapM_gv_mMUnderworldTeleportingUnitTypes[4] = "WitchDoctorGargantuan";
    libMapM_gv_mMUnderworldTeleportingUnitTypes[5] = "RaynorRaynorsBanshee";
    libMapM_gv_mMUnderworldTeleportingUnitTypes[6] = "KerriganUltralisk";
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldInit_Init () {
    libMapM_gt_MMUnderworldInit = TriggerCreate("libMapM_gt_MMUnderworldInit_Func");
    libGame_gf_MapMechanicInitialization(libMapM_gt_MMUnderworldInit);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld - HeroAI - Team Map Logic
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldHeroAITeamMapLogic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_HeroAICleanupUnderworldLogic(libAIAI_gv_heroAITeamMapLogicFaction);
    libAIAI_gf_HeroAIEnterUnderworldLogic(libAIAI_gv_heroAITeamMapLogicFaction);
    libAIAI_gf_HeroAIPickupSkullsLogic(libAIAI_gv_heroAITeamMapLogicFaction);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldHeroAITeamMapLogic_Init () {
    libMapM_gt_MMUnderworldHeroAITeamMapLogic = TriggerCreate("libMapM_gt_MMUnderworldHeroAITeamMapLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Start to Enter Gates
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldStarttoEnterGates_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_heroUnit;
    int lv_player;
    int lv_macguffinPeriod;
    fixed lv_durationNotUnstoppable;
    int lv_localCastIndex;
    string lv_mountCooldownLink;

    // Variable Initialization
    lv_heroUnit = EventUnit();
    lv_player = UnitGetOwner(lv_heroUnit);
    lv_macguffinPeriod = CatalogFieldValueGetAsInt(c_gameCatalogEffect, "CaptureMacGuffin", "PeriodCount", UnitGetOwner(EventUnit()));
    lv_durationNotUnstoppable = (lv_macguffinPeriod - 0.5);
    lv_mountCooldownLink = "";

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitHasBehavior2(lv_heroUnit, "Mounted") == true)) {
        libGame_gv_players[lv_player].lv_remountHeroAfterTeleport = true;
        UnitBehaviorRemove(lv_heroUnit, "Mounted", 1);
    }
    else {
        libGame_gv_players[lv_player].lv_remountHeroAfterTeleport = false;
    }
    libMapM_gv_mMUnderworldEnterGateIndex[lv_player] += 1;
    lv_localCastIndex = libMapM_gv_mMUnderworldEnterGateIndex[lv_player];
    Wait((lv_durationNotUnstoppable * 0.125), c_timeGame);
    if ((UnitHasBehavior2(lv_heroUnit, "MacGuffinDummy") == true) && (libMapM_gv_mMUnderworldEnterGateIndex[lv_player] == lv_localCastIndex)) {
        UnitBehaviorAdd(lv_heroUnit, "HauntedMinesUnstoppableDummy", lv_heroUnit, 1);
        libMapM_gv_mMUnderworldEnterGateIndex[lv_player] = 0;
    }

    if ((UnitHasBehavior2(lv_heroUnit, "DecloakedSuppressHoldFire") == true)) {
        UnitBehaviorRemove(lv_heroUnit, "DecloakedSuppressHoldFire", 1);
    }

    lv_mountCooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, "Mount", "Cost.Cooldown.Link", lv_player);
    libNtve_gf_UnitRemoveCooldown(lv_heroUnit, lv_mountCooldownLink);
    libNtve_gf_PlayerRemoveCooldown(lv_player, lv_mountCooldownLink);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldStarttoEnterGates_Init () {
    libMapM_gt_MMUnderworldStarttoEnterGates = TriggerCreate("libMapM_gt_MMUnderworldStarttoEnterGates_Func");
    TriggerEnable(libMapM_gt_MMUnderworldStarttoEnterGates, false);
    TriggerAddEventUnitAbility(libMapM_gt_MMUnderworldStarttoEnterGates, null, AbilityCommand("CaptureMacGuffin", 0), c_abilEffectStageCast, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Entering Gates
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldEnteringGates_Func (bool testConds, bool runActions) {
    unitgroup autoEAA00391_g;
    int autoEAA00391_u;
    unitgroup autoFD0B3F2D_g;
    int autoFD0B3F2D_u;
    unitgroup auto5528651F_g;
    int auto5528651F_u;
    int auto06A9C682_ae;
    int auto06A9C682_ai;

    // Variable Declarations
    int lv_computerTeam;
    unit lv_heroUnit;
    point lv_heroPreTeleportPosition;
    int lv_owningPlayer;
    unit lv_usedGateUnit;
    unit lv_gate;
    int lv_abathurPlayer;
    actor lv_teleportEffect1;
    actor lv_teleportEffect2;
    int lv_teleportingUnitTypeIndex;
    unit lv_teleportingUnit;

    // Variable Initialization
    lv_heroUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    lv_heroPreTeleportPosition = UnitGetPosition(lv_heroUnit);
    lv_owningPlayer = UnitGetOwner(lv_heroUnit);
    lv_usedGateUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);

    // Conditions
    if (testConds) {
        if (!((libGame_gf_UnitIsHero(EventPlayerEffectUsedUnit(c_effectUnitCaster)) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libGame_gf_TeamNumberOfPlayer(UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster))) == 1)) {
        lv_computerTeam = libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
        lv_computerTeam = libCore_gv_cOMPUTER_TeamChaos;
    }
    libGame_gf_SendEventMapHauntedMinesPlayerUsesGate(lv_owningPlayer, lv_heroUnit);
    UnitCreateEffectPoint(lv_heroUnit, "TeleportVisualDummyEffect", UnitGetPosition(lv_heroUnit));
    UnitSetState(lv_heroUnit, c_unitStateStunned, true);
    libNtve_gf_SendActorMessageToUnit(lv_heroUnit, "Signal InvisibleModel");
    UnitBehaviorAdd(lv_heroUnit, "HauntedMinesMineShaftInvulnerableUnstoppableBehavior", lv_heroUnit, 1);
    UnitSetState(lv_heroUnit, c_unitStateTargetable, false);
    UnitCreateEffectPoint(lv_heroUnit, "UnderworldTeleport", libMapM_gf_MMUnderworldGateEnteringSpawnPoint(lv_usedGateUnit));
    if ((libGame_gv_players[lv_owningPlayer].lv_remountHeroAfterTeleport == true)) {
        libGame_gf_ApplyMountBehaviorToHero(lv_heroUnit);
    }

    if ((UnitGroupHasUnit(libMapM_gv_mMUnderworldGatesAbove, lv_usedGateUnit) == true)) {
        autoFD0B3F2D_g = libMapM_gv_mMUnderworldGatesAbove;
        autoFD0B3F2D_u = 1;
        for ( ; autoFD0B3F2D_u <= UnitGroupCount(autoFD0B3F2D_g, c_unitCountAll) ; autoFD0B3F2D_u += (lv_gate == UnitGroupUnit(autoFD0B3F2D_g, autoFD0B3F2D_u)) ) {
            lv_gate = UnitGroupUnit(autoFD0B3F2D_g, autoFD0B3F2D_u);
            libUIUI_gf_ShowHideHelpButtonOnUnitForPlayer(lv_owningPlayer, false, lv_gate);
            libUIUI_gf_ShowHideHelpButtonOnUnitForPlayer(libCore_gv_oBSERVER_ObserverUIPlayer, false, lv_gate);
        }
    }
    else {
        if ((UnitGroupHasUnit(libMapM_gv_mMUnderworldGatesBelow, lv_usedGateUnit) == true)) {
            autoEAA00391_g = libMapM_gv_mMUnderworldGatesBelow;
            autoEAA00391_u = 1;
            for ( ; autoEAA00391_u <= UnitGroupCount(autoEAA00391_g, c_unitCountAll) ; autoEAA00391_u += (lv_gate == UnitGroupUnit(autoEAA00391_g, autoEAA00391_u)) ) {
                lv_gate = UnitGroupUnit(autoEAA00391_g, autoEAA00391_u);
                TextTagShow(libCore_gf_TextTagStoredForUnit(lv_gate, 1), libCore_gv_playerGroupFromPlayer[lv_owningPlayer], false);
            }
        }

    }
    if ((UnitIsValid(libGDHL_gv_rexxarMishaUnit[lv_owningPlayer]) == true)) {
        UnitSetPosition(libGDHL_gv_rexxarMishaUnit[lv_owningPlayer], UnitGetPosition(lv_heroUnit), false);
        UnitIssueOrder(libGDHL_gv_rexxarMishaUnit[lv_owningPlayer], Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }

    auto5528651F_g = libGame_gv_players[lv_owningPlayer].lv_summonedUnitGroup;
    auto5528651F_u = 1;
    for ( ; auto5528651F_u <= UnitGroupCount(auto5528651F_g, c_unitCountAll) ; auto5528651F_u += (lv_teleportingUnit == UnitGroupUnit(auto5528651F_g, auto5528651F_u)) ) {
        lv_teleportingUnit = UnitGroupUnit(auto5528651F_g, auto5528651F_u);
        auto06A9C682_ae = libMapM_gv_mMUnderworldTeleportingUnitTypeCount_C;
        auto06A9C682_ai = 1;
        lv_teleportingUnitTypeIndex = 1;
        for ( ; ( (auto06A9C682_ai >= 0 && lv_teleportingUnitTypeIndex <= auto06A9C682_ae) || (auto06A9C682_ai <= 0 && lv_teleportingUnitTypeIndex >= auto06A9C682_ae) ) ; lv_teleportingUnitTypeIndex += auto06A9C682_ai ) {
            if ((UnitIsValid(lv_teleportingUnit) == true) && (UnitGetType(lv_teleportingUnit) == libMapM_gv_mMUnderworldTeleportingUnitTypes[lv_teleportingUnitTypeIndex]) && (DistanceBetweenPoints(UnitGetPosition(lv_teleportingUnit), lv_heroPreTeleportPosition) <= 8.0)) {
                UnitSetPosition(lv_teleportingUnit, UnitGetPosition(lv_heroUnit), false);
                UnitIssueOrder(lv_teleportingUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            }

        }
    }
    UnitSetFacing(lv_heroUnit, PointGetFacing(libMapM_gf_MMUnderworldGateEnteringSpawnPoint(lv_usedGateUnit)), 0.0);
    if ((UnitBehaviorCount(lv_heroUnit, "AbathurSymbioteHostBehavior") == 1)) {
        lv_abathurPlayer = UnitGetOwner(UnitBehaviorEffectUnit(lv_heroUnit, "AbathurSymbioteHostBehavior", c_effectUnitCaster, 0));
        libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_abathurPlayer, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 0.0, -1, 0.0, false);
    }

    libGame_gf_CameraPanCameraForPlayerAndUpdateMapBoundsIfNecessary(lv_owningPlayer, UnitGetPosition(EventPlayerEffectUsedUnit(c_effectUnitCaster)), 0.0, -1, 0.0, false);
    libNtve_gf_AttachModelToUnit(lv_heroUnit, "TeleportChargeFinal", "Ref_Origin");
    lv_teleportEffect1 = libNtve_gf_ActorLastCreated();
    libNtve_gf_AttachModelToUnit(lv_heroUnit, "TeleportTargetEffect", "Ref_Origin");
    lv_teleportEffect2 = libNtve_gf_ActorLastCreated();
    SoundPlayOnUnitForPlayer(SoundLink("Event_Mines_EnterMinesEnd", -1), c_maxPlayers, PlayerGroupAll(), lv_heroUnit, 0.0, 100.0, 0.0);
    Wait(0.125, c_timeGame);
    UnitSetState(lv_heroUnit, c_unitStateStunned, false);
    UnitBehaviorRemove(lv_heroUnit, "HauntedMinesMineShaftInvulnerableUnstoppableBehavior", 1);
    UnitSetState(lv_heroUnit, c_unitStateTargetable, true);
    libNtve_gf_SendActorMessageToUnit(lv_heroUnit, "Signal RestoreModel");
    PathSetSourceUnit(libGame_gv_players[lv_owningPlayer].lv_pathDisplay, lv_heroUnit);
    libGame_gf_SendEventCheckUnitForAbilityRedirect(lv_heroUnit, lv_heroUnit, true, lv_heroPreTeleportPosition);
    Wait(0.75, c_timeGame);
    libNtve_gf_KillModel(lv_teleportEffect1);
    libNtve_gf_KillModel(lv_teleportEffect2);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldEnteringGates_Init () {
    libMapM_gt_MMUnderworldEnteringGates = TriggerCreate("libMapM_gt_MMUnderworldEnteringGates_Func");
    TriggerEnable(libMapM_gt_MMUnderworldEnteringGates, false);
    TriggerAddEventPlayerEffectUsed(libMapM_gt_MMUnderworldEnteringGates, c_playerAny, "CaptureMacGuffinCastComplete");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Camera Panned
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldCameraPanned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;
    point lv_target;
    int lv_abathurPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = libGame_gf_CameraPannedFromScriptPlayer();
    lv_target = libGame_gf_CameraPannedFromScriptPoint();
    libMapM_gf_MMUnderworldChangePlaneForPlayer(lv_player);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldCameraPanned_Init () {
    libMapM_gt_MMUnderworldCameraPanned = TriggerCreate("libMapM_gt_MMUnderworldCameraPanned_Func");
    TriggerEnable(libMapM_gt_MMUnderworldCameraPanned, false);
    libGame_gf_CameraPannedFromScript(libMapM_gt_MMUnderworldCameraPanned);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Player Hero Location Tracking
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldPlayerHeroLocationTracking_Func (bool testConds, bool runActions) {
    int auto7E7B0D56_ae;
    int auto7E7B0D56_ai;

    // Variable Declarations
    int lv_itPlayer;
    unit lv_itUnit;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        auto7E7B0D56_ae = libCore_gv_bALMaxPlayers;
        auto7E7B0D56_ai = 1;
        lv_itPlayer = 1;
        for ( ; ( (auto7E7B0D56_ai >= 0 && lv_itPlayer <= auto7E7B0D56_ae) || (auto7E7B0D56_ai <= 0 && lv_itPlayer >= auto7E7B0D56_ae) ) ; lv_itPlayer += auto7E7B0D56_ai ) {
            if ((libGame_gv_players[lv_itPlayer].lv_playerStatus == libGame_ge_PlayerStatusStorm_Unused)) {
                continue;
            }

            if ((UnitIsAlive(libGame_gv_players[lv_itPlayer].lv_heroUnit) == true)) {
                libMapM_gf_MMUnderworldChangePlaneForPlayer(lv_itPlayer);
            }

        }
        Wait(0.0625, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldPlayerHeroLocationTracking_Init () {
    libMapM_gt_MMUnderworldPlayerHeroLocationTracking = TriggerCreate("libMapM_gt_MMUnderworldPlayerHeroLocationTracking_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Update Hero Unit Lighting on Respawn
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldUpdateHeroUnitLightingonRespawn_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libMapM_gf_PrimaryMapMechanic() == libMapM_gv_mMUnderworldMechanicName_C))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    ActorSend(libCore_gf_ActorStoredForUnit(libGame_gv_players[libGame_gf_HeroRespawnPlayer()].lv_heroUnit, 1), "AnimBracketStop BSD");
    libCore_gf_StoreActorForUnit(libGame_gv_players[libGame_gf_HeroRespawnPlayer()].lv_heroUnit, 1, null);
    libMapM_gf_MMUnderworldUpdateHeroUnitLighting(libGame_gv_players[libGame_gf_HeroRespawnPlayer()].lv_heroUnit);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldUpdateHeroUnitLightingonRespawn_Init () {
    libMapM_gt_MMUnderworldUpdateHeroUnitLightingonRespawn = TriggerCreate("libMapM_gt_MMUnderworldUpdateHeroUnitLightingonRespawn_Func");
    libGame_gf_HeroRespawn(libMapM_gt_MMUnderworldUpdateHeroUnitLightingonRespawn);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Ground Hole Vision
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldGroundHoleVision_Func (bool testConds, bool runActions) {
    int auto746458D9_ae;
    int auto746458D9_ai;
    unitgroup auto65A1C578_g;
    int auto65A1C578_u;

    // Variable Declarations
    int lv_itPlayer;
    unit lv_itGate;
    unit lv_itHole;
    int lv_lightIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto746458D9_ae = libCore_gv_cOMPUTER_TeamChaos;
    auto746458D9_ai = 1;
    lv_itPlayer = libCore_gv_cOMPUTER_TeamOrder;
    for ( ; ( (auto746458D9_ai >= 0 && lv_itPlayer <= auto746458D9_ae) || (auto746458D9_ai <= 0 && lv_itPlayer >= auto746458D9_ae) ) ; lv_itPlayer += auto746458D9_ai ) {
        auto65A1C578_g = libMapM_gv_mMUnderworldGatesAbove;
        auto65A1C578_u = 1;
        for ( ; auto65A1C578_u <= UnitGroupCount(auto65A1C578_g, c_unitCountAll) ; auto65A1C578_u += (lv_itGate == UnitGroupUnit(auto65A1C578_g, auto65A1C578_u)) ) {
            lv_itGate = UnitGroupUnit(auto65A1C578_g, auto65A1C578_u);
            lv_itHole = libMapM_gf_MMUnderworldGroundHole(lv_itGate);
            if ((libNtve_gf_UnitIsVisibleToPlayer(libMapM_gf_MMUnderworldGroundHoleVision(lv_itHole), lv_itPlayer) == true)) {
                if ((libCore_gf_IntegerStoredForUnit(lv_itHole, lv_itPlayer) == 0)) {
                    libNtve_gf_ShareVisionofUnit(libMapM_gf_MMUnderworldUndergroundLadder(lv_itGate), true, lv_itPlayer);
                    libCore_gf_StoreIntegerForUnit(lv_itHole, lv_itPlayer, 1);
                }

            }
            else {
                if ((libCore_gf_IntegerStoredForUnit(lv_itHole, lv_itPlayer) == 1)) {
                    libNtve_gf_ShareVisionofUnit(libMapM_gf_MMUnderworldUndergroundLadder(lv_itGate), false, lv_itPlayer);
                    libCore_gf_StoreIntegerForUnit(lv_itHole, lv_itPlayer, 0);
                }

            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldGroundHoleVision_Init () {
    libMapM_gt_MMUnderworldGroundHoleVision = TriggerCreate("libMapM_gt_MMUnderworldGroundHoleVision_Func");
    TriggerEnable(libMapM_gt_MMUnderworldGroundHoleVision, false);
    TriggerAddEventTimePeriodic(libMapM_gt_MMUnderworldGroundHoleVision, 0.25, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Player Moves Camera
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldPlayerMovesCamera_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gf_MMUnderworldUpdateAmbience(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldPlayerMovesCamera_Init () {
    libMapM_gt_MMUnderworldPlayerMovesCamera = TriggerCreate("libMapM_gt_MMUnderworldPlayerMovesCamera_Func");
    TriggerEnable(libMapM_gt_MMUnderworldPlayerMovesCamera, false);
    TriggerAddEventCameraMove(libMapM_gt_MMUnderworldPlayerMovesCamera, 1, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libMapM_gt_MMUnderworldPlayerMovesCamera, 2, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libMapM_gt_MMUnderworldPlayerMovesCamera, 3, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libMapM_gt_MMUnderworldPlayerMovesCamera, 4, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libMapM_gt_MMUnderworldPlayerMovesCamera, 5, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libMapM_gt_MMUnderworldPlayerMovesCamera, 6, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libMapM_gt_MMUnderworldPlayerMovesCamera, 7, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libMapM_gt_MMUnderworldPlayerMovesCamera, 8, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libMapM_gt_MMUnderworldPlayerMovesCamera, 9, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libMapM_gt_MMUnderworldPlayerMovesCamera, 10, c_cameraMoveReasonAny);
    TriggerAddEventCameraMove(libMapM_gt_MMUnderworldPlayerMovesCamera, libCore_gv_oBSERVER_ObserverUIPlayer, c_cameraMoveReasonAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Untargetable Across Plane
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldUntargetableAcrossPlane_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_orderUnit;
    point lv_targetPoint;
    unit lv_targetUnit;
    int lv_itSlot;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(OrderGetAbilityCommand(EventUnitOrder())), "AbilityCategories[TargetAcrossMapPlane]", c_playerAny) != "1"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_orderUnit = EventUnit();
    if ((OrderGetFlag(EventUnitOrder(), c_cmdQueued) == true)) {
        if (((AbilityCommandGetAbility(OrderGetAbilityCommand(EventUnitOrder())) != "FalstadFlight") && (AbilityCommandGetAbility(OrderGetAbilityCommand(EventUnitOrder())) != "AbathurDeepTunnel"))) {
            return true;
        }

    }

    if ((UnitGetType(lv_orderUnit) == "HeroAbathur") && (EventPlayer() >= 1) && (EventPlayer() <= libCore_gv_bALMaxPlayers)) {
        if ((UnitIsAlive(libGame_gv_players[EventPlayer()].lv_activeVehicle) == true)) {
            return true;
        }

        lv_orderUnit = libMapM_gf_MMUnderworldPlayerHeroUnit(EventPlayer());
    }

    if ((AbilityCommandGetAbility(OrderGetAbilityCommand(EventUnitOrder())) == "StormInventory") && ((UnitGetType(OrderGetTargetItem(EventUnitOrder())) == "TalentBucketCalldownMule") || (UnitGetType(OrderGetTargetItem(EventUnitOrder())) == "TalentBucketClairvoyance"))) {
        return true;
    }

    lv_targetPoint = OrderGetTargetPoint(EventUnitOrder());
    if ((lv_targetPoint != null)) {
        if ((libNtve_gf_UnitInRegion(lv_orderUnit, libMapM_gv_mMUnderworldAboveGroundPlayable) == true) && (RegionContainsPoint(libMapM_gv_mMUnderworldUnderGroundPlayable, lv_targetPoint) == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/lib_MapM_F73CFDCD"));
            UnitIssueOrder(lv_orderUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            return true;
        }

        if ((libNtve_gf_UnitInRegion(lv_orderUnit, libMapM_gv_mMUnderworldUnderGroundPlayable) == true) && (RegionContainsPoint(libMapM_gv_mMUnderworldAboveGroundPlayable, lv_targetPoint) == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/lib_MapM_3C9A30E8"));
            UnitIssueOrder(lv_orderUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            return true;
        }

    }

    lv_targetUnit = OrderGetTargetUnit(EventUnitOrder());
    if ((UnitIsValid(lv_targetUnit) == true)) {
        if ((libNtve_gf_UnitInRegion(lv_orderUnit, libMapM_gv_mMUnderworldAboveGroundPlayable) == true) && (libNtve_gf_UnitInRegion(lv_targetUnit, libMapM_gv_mMUnderworldUnderGroundPlayable) == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/lib_MapM_1E2B7F04"));
            UnitIssueOrder(lv_orderUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            return true;
        }

        if ((libNtve_gf_UnitInRegion(lv_orderUnit, libMapM_gv_mMUnderworldUnderGroundPlayable) == true) && (libNtve_gf_UnitInRegion(lv_targetUnit, libMapM_gv_mMUnderworldAboveGroundPlayable) == true)) {
            UIDisplayMessage(PlayerGroupSingle(EventPlayer()), c_messageAreaError, StringExternal("Param/Value/lib_MapM_2FCBB15A"));
            UnitIssueOrder(lv_orderUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            return true;
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldUntargetableAcrossPlane_Init () {
    libMapM_gt_MMUnderworldUntargetableAcrossPlane = TriggerCreate("libMapM_gt_MMUnderworldUntargetableAcrossPlane_Func");
    TriggerEnable(libMapM_gt_MMUnderworldUntargetableAcrossPlane, false);
    TriggerAddEventUnitOrder(libMapM_gt_MMUnderworldUntargetableAcrossPlane, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Monsters Dies
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldMonstersDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_groupIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!(((UnitGetType(EventUnit()) == "UnderworldMinion") || (UnitGetType(EventUnit()) == "UnderworldRangedMinion") || (UnitGetType(EventUnit()) == "UnderworldBoss")))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(EventUnit()) == "UnderworldBoss")) {
        libMapM_gf_MMUnderworldBossDropsSkulls();
        libMapM_gf_MMUnderworldDropSkulls(UnitGetPosition(EventUnit()), libMapM_gv_mMUnderworldDropSkullsBossFinalDrop_C, true);
        UnitRemove(libMapM_gv_mMUnderworldBossIconUnit);
    }
    else {
        libMapM_gf_MMUnderworldDropSkulls(UnitGetPosition(EventUnit()), libMapM_gv_mMUnderworldDropSkullsMinion, false);
        lv_groupIndex = libMapM_gf_MMUnderworldMineMinionGroupIndex(EventUnit());
        if ((libNtve_gf_UnitGroupIsDead(libMapM_gv_mMUnderworldMinionGroups[lv_groupIndex].lv_units) == true)) {
            UnitRemove(libMapM_gv_mMUnderworldMinionGroups[lv_groupIndex].lv_iconUnit);
            libMapM_gv_mMUnderworldMinionGroups[lv_groupIndex].lv_iconUnit = null;
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldMonstersDies_Init () {
    libMapM_gt_MMUnderworldMonstersDies = TriggerCreate("libMapM_gt_MMUnderworldMonstersDies_Func");
    TriggerEnable(libMapM_gt_MMUnderworldMonstersDies, false);
    TriggerAddEventUnitDied(libMapM_gt_MMUnderworldMonstersDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Skull Dropped
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldSkullDropped_Func (bool testConds, bool runActions) {
    int auto7E2477BE_n;
    int auto7E2477BE_i;
    int auto5B2A74DC_ae;
    int auto5B2A74DC_ai;
    int auto81D43B5E_ae;
    int auto81D43B5E_ai;
    int auto279681DE_ae;
    int auto279681DE_ai;

    // Variable Declarations
    int lv_itPlayer;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnitCreatedUnit()) == "ItemUnderworldPowerup"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto7E2477BE_n = 5;
    for (auto7E2477BE_i = 1; auto7E2477BE_i <= auto7E2477BE_n; auto7E2477BE_i += 1) {
        if ((UnitIsAlive(EventUnitCreatedUnit()) == false)) {
            return true;
        }

        auto5B2A74DC_ae = libCore_gv_bALMaxPlayers;
        auto5B2A74DC_ai = 1;
        lv_itPlayer = 1;
        for ( ; ( (auto5B2A74DC_ai >= 0 && lv_itPlayer <= auto5B2A74DC_ae) || (auto5B2A74DC_ai <= 0 && lv_itPlayer >= auto5B2A74DC_ae) ) ; lv_itPlayer += auto5B2A74DC_ai ) {
            if ((libNtve_gf_UnitIsVisibleToPlayer(EventUnitCreatedUnit(), lv_itPlayer) == true)) {
                libNtve_gf_ShareVisionofUnit(EventUnitCreatedUnit(), true, lv_itPlayer);
            }

        }
        Wait(2.0, c_timeGame);
    }
    auto81D43B5E_ae = libCore_gv_bALMaxPlayers;
    auto81D43B5E_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto81D43B5E_ai >= 0 && lv_itPlayer <= auto81D43B5E_ae) || (auto81D43B5E_ai <= 0 && lv_itPlayer >= auto81D43B5E_ae) ) ; lv_itPlayer += auto81D43B5E_ai ) {
        libNtve_gf_ShareVisionofUnit(EventUnitCreatedUnit(), true, lv_itPlayer);
    }
    while (!((UnitIsAlive(EventUnitCreatedUnit()) == false))) {
        Wait(1.0, c_timeGame);
    }
    auto279681DE_ae = libCore_gv_bALMaxPlayers;
    auto279681DE_ai = 1;
    lv_itPlayer = 1;
    for ( ; ( (auto279681DE_ai >= 0 && lv_itPlayer <= auto279681DE_ae) || (auto279681DE_ai <= 0 && lv_itPlayer >= auto279681DE_ae) ) ; lv_itPlayer += auto279681DE_ai ) {
        libNtve_gf_ShareVisionofUnit(EventUnitCreatedUnit(), false, lv_itPlayer);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldSkullDropped_Init () {
    libMapM_gt_MMUnderworldSkullDropped = TriggerCreate("libMapM_gt_MMUnderworldSkullDropped_Func");
    TriggerEnable(libMapM_gt_MMUnderworldSkullDropped, false);
    TriggerAddEventUnitCreated(libMapM_gt_MMUnderworldSkullDropped, null, null, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Skull Position Validation
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldSkullPositionValidation_Func (bool testConds, bool runActions) {
    unitgroup auto6C1E4622_g;
    int auto6C1E4622_u;
    int auto616CD7FB_ae;
    int auto616CD7FB_ai;

    // Variable Declarations
    unit lv_itSkull;
    point lv_posSkull;
    point lv_posSkullNew;
    fixed lv_distanceMin;
    fixed lv_distance;
    int lv_itMinionRegion;
    point lv_posMin;
    fixed lv_direction;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto6C1E4622_g = UnitGroup("ItemUnderworldPowerup", libCore_gv_cOMPUTER_Neutral, libMapM_gv_mMUnderworldUnderGroundPlayable, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto6C1E4622_u = 1;
    for ( ; auto6C1E4622_u <= UnitGroupCount(auto6C1E4622_g, c_unitCountAll) ; auto6C1E4622_u += (lv_itSkull == UnitGroupUnit(auto6C1E4622_g, auto6C1E4622_u)) ) {
        lv_itSkull = UnitGroupUnit(auto6C1E4622_g, auto6C1E4622_u);
        lv_posSkull = UnitGetPosition(lv_itSkull);
        if ((PointPathingPassable(lv_posSkull) == false)) {
            lv_posMin = RegionGetCenter(libMapM_gv_mMUnderworldBossRegion);
            lv_distanceMin = DistanceBetweenPoints(lv_posSkull, lv_posMin);
            auto616CD7FB_ae = libMapM_gv_mMUnderworldMinionGroupCount;
            auto616CD7FB_ai = 1;
            lv_itMinionRegion = 1;
            for ( ; ( (auto616CD7FB_ai >= 0 && lv_itMinionRegion <= auto616CD7FB_ae) || (auto616CD7FB_ai <= 0 && lv_itMinionRegion >= auto616CD7FB_ae) ) ; lv_itMinionRegion += auto616CD7FB_ai ) {
                lv_distance = DistanceBetweenPoints(lv_posSkull, RegionGetCenter(libMapM_gv_mMUnderworldMinionGroups[lv_itMinionRegion].lv_area));
                if ((lv_distance < lv_distanceMin)) {
                    lv_posMin = RegionGetCenter(libMapM_gv_mMUnderworldMinionGroups[lv_itMinionRegion].lv_area);
                    lv_distanceMin = lv_distance;
                }

            }
            lv_direction = AngleBetweenPoints(lv_posSkull, lv_posMin);
            lv_distance = 0.0;
            while (true) {
                lv_distance += 0.25;
                lv_posSkullNew = PointWithOffsetPolar(lv_posSkull, lv_distance, lv_direction);
                if ((PointPathingPassable(lv_posSkullNew) == true)) {
                    UnitSetPosition(lv_itSkull, lv_posSkullNew, false);
                    break;
                }

            }
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldSkullPositionValidation_Init () {
    libMapM_gt_MMUnderworldSkullPositionValidation = TriggerCreate("libMapM_gt_MMUnderworldSkullPositionValidation_Func");
    TriggerEnable(libMapM_gt_MMUnderworldSkullPositionValidation, false);
    TriggerAddEventTimePeriodic(libMapM_gt_MMUnderworldSkullPositionValidation, 0.5, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Skull Pickup
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldSkullPickup_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_collectingUnit;
    point lv_collectingUnitPosition;
    int lv_collectingPlayer;
    playergroup lv_textTagPlayers;
    int lv_alliedSkullCount;

    // Variable Initialization
    lv_textTagPlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_collectingUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
    lv_collectingUnitPosition = UnitGetPosition(lv_collectingUnit);
    lv_collectingPlayer = EventPlayerEffectUsedUnitOwner(c_effectPlayerTarget);
    libMapM_gv_mMUnderworldSkullCollected[libGame_gf_TeamNumberOfPlayer(lv_collectingPlayer)] += 1;
    lv_alliedSkullCount = libMapM_gv_mMUnderworldSkullCollected[libGame_gf_TeamNumberOfPlayer(lv_collectingPlayer)];
    SoundPlayAtPointForPlayer(SoundLink("UI_Game_Skull_Pickup", -1), c_maxPlayers, PlayerGroupAll(), lv_collectingUnitPosition, 0.5, 100.0, 0.0);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libGame_gf_AlliedPlayerGroupOfPlayer(lv_collectingPlayer), lv_textTagPlayers);
    PlayerGroupAdd(lv_textTagPlayers, libCore_gv_oBSERVER_ObserverUIPlayer);
    TextTagCreate(StringExternal("Param/Value/lib_MapM_D67F880C"), 24, lv_collectingUnitPosition, 1.0, true, true, lv_textTagPlayers);
    TextTagSetVelocity(TextTagLastCreated(), 1.5, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    TextTagCreate(StringExternal("Param/Value/lib_MapM_2BA9782F"), 24, lv_collectingUnitPosition, 1.0, true, true, libGame_gf_EnemyPlayerGroupOfPlayer(lv_collectingPlayer));
    TextTagSetVelocity(TextTagLastCreated(), 1.5, 90.0);
    TextTagSetTime(TextTagLastCreated(), c_textTagTimeDuration, 3.0);
    TextTagSetFogVisibility(TextTagLastCreated(), c_visTypeFog);
    libGame_gf_SendEventMapHauntedMinesSkullCollected(libMapM_gv_mMUnderworldSkullCollected[1], libMapM_gv_mMUnderworldSkullCollected[2], lv_collectingPlayer);
    if (((libMapM_gv_mMUnderworldSkullCollected[1] + libMapM_gv_mMUnderworldSkullCollected[2]) >= libMapM_gv_mMUnderworldSkullTotal) && (lv_alliedSkullCount >= 80)) {
        Wait(6.0, c_timeGame);
        libGame_gf_SendEventMapObjectiveCapturedByUnit(lv_collectingUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldSkullPickup_Init () {
    libMapM_gt_MMUnderworldSkullPickup = TriggerCreate("libMapM_gt_MMUnderworldSkullPickup_Func");
    TriggerEnable(libMapM_gt_MMUnderworldSkullPickup, false);
    TriggerAddEventPlayerEffectUsed(libMapM_gt_MMUnderworldSkullPickup, c_playerAny, "SkullPickupSet");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Mine Scaling Snapshot
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldMineScalingSnapshot_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gv_mMUnderworldScalingTick = 0;
    TimerStart(libMapM_gv_mMUnderworldMineTimer, c_timerDurationInfinite, false, c_timeGame);
    while (true) {
        if ((libMapM_gv_mMUnderworldOpened == false)) {
            TimerPause(libMapM_gv_mMUnderworldMineTimer, true);
            return true;
        }

        if ((TimerGetElapsed(libMapM_gv_mMUnderworldMineTimer) >= libMapM_gv_mMUnderworldMineSnapshotStartTime_C) && (libMapM_gf_MMUnderworldSkullCollected() >= libMapM_gv_mMUnderworldMineSnapshotSkullCount_C)) {
            libMapM_gv_mMUnderworldScalingTick = libGame_gv_scalingTicks;
            TimerPause(libMapM_gv_mMUnderworldMineTimer, true);
            return true;
        }

        Wait(1.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldMineScalingSnapshot_Init () {
    libMapM_gt_MMUnderworldMineScalingSnapshot = TriggerCreate("libMapM_gt_MMUnderworldMineScalingSnapshot_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Summoned Boss Ping Visibility
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldSummonedBossPingVisibility_Func (bool testConds, bool runActions) {
    int auto6DFD38D5_ae;
    int auto6DFD38D5_ai;
    playergroup auto9316B709_g;
    int auto9316B709_p;
    playergroup autoF4FEC896_g;
    int autoF4FEC896_p;

    // Variable Declarations
    int lv_itPlayer;
    int lv_itTeam;
    playergroup lv_pingPlayers;

    // Variable Initialization
    lv_pingPlayers = PlayerGroupEmpty();

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    while (true) {
        auto6DFD38D5_ae = 2;
        auto6DFD38D5_ai = 1;
        lv_itTeam = 1;
        for ( ; ( (auto6DFD38D5_ai >= 0 && lv_itTeam <= auto6DFD38D5_ae) || (auto6DFD38D5_ai <= 0 && lv_itTeam >= auto6DFD38D5_ae) ) ; lv_itTeam += auto6DFD38D5_ai ) {
            if ((UnitIsAlive(libMapM_gv_mMUnderworldSummonedBoss[lv_itTeam]) == true)) {
                if ((libCore_gf_PingStoredForUnit(libMapM_gv_mMUnderworldSummonedBoss[lv_itTeam], 1) != c_invalidPingId)) {
                    lv_pingPlayers = PlayerGroupEmpty();
                    auto9316B709_g = libGame_gf_PlayersOnTeamHeroes(1, false); 
                    auto9316B709_p = 1;
                    for ( ; auto9316B709_p <= PlayerGroupCount(auto9316B709_g) ; auto9316B709_p += (lv_itPlayer == PlayerGroupPlayer(auto9316B709_g, auto9316B709_p)) ) {
                        lv_itPlayer = PlayerGroupPlayer(auto9316B709_g, auto9316B709_p);
                        if ((PlayerStatus(lv_itPlayer) == c_playerStatusActive)) {
                            PlayerGroupAdd(lv_pingPlayers, lv_itPlayer);
                        }

                    }
                    PingSetPlayerGroup(libCore_gf_PingStoredForUnit(libMapM_gv_mMUnderworldSummonedBoss[lv_itTeam], 1), lv_pingPlayers);
                }

                if ((libCore_gf_PingStoredForUnit(libMapM_gv_mMUnderworldSummonedBoss[lv_itTeam], 2) != c_invalidPingId)) {
                    lv_pingPlayers = PlayerGroupEmpty();
                    autoF4FEC896_g = libGame_gf_PlayersOnTeamHeroes(2, false); 
                    autoF4FEC896_p = 1;
                    for ( ; autoF4FEC896_p <= PlayerGroupCount(autoF4FEC896_g) ; autoF4FEC896_p += (lv_itPlayer == PlayerGroupPlayer(autoF4FEC896_g, autoF4FEC896_p)) ) {
                        lv_itPlayer = PlayerGroupPlayer(autoF4FEC896_g, autoF4FEC896_p);
                        if ((PlayerStatus(lv_itPlayer) == c_playerStatusActive)) {
                            PlayerGroupAdd(lv_pingPlayers, lv_itPlayer);
                        }

                    }
                    PingSetPlayerGroup(libCore_gf_PingStoredForUnit(libMapM_gv_mMUnderworldSummonedBoss[lv_itTeam], 2), lv_pingPlayers);
                }

            }

        }
        Wait(0.2, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldSummonedBossPingVisibility_Init () {
    libMapM_gt_MMUnderworldSummonedBossPingVisibility = TriggerCreate("libMapM_gt_MMUnderworldSummonedBossPingVisibility_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Summoned Bosses Died
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldSummonedBossesDied_Func (bool testConds, bool runActions) {
    unit auto86A40564_val;

    // Variable Declarations
    int lv_team;
    int lv_enemyTeam;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto86A40564_val = EventUnit();
    if (auto86A40564_val == libMapM_gv_mMUnderworldSummonedBoss[1]) {
        lv_team = 1;
    }
    else if (auto86A40564_val == libMapM_gv_mMUnderworldSummonedBoss[2]) {
        lv_team = 2;
    }
    else {
        return true;
    }
    lv_enemyTeam = libGame_gf_EnemyTeam(lv_team);
    libMapM_gv_mMUnderworldSummonedBossLocation[lv_team] = UnitGetPosition(EventUnit());
    PingDestroy(libCore_gf_PingStoredForUnit(libMapM_gv_mMUnderworldSummonedBoss[lv_team], 1));
    libCore_gf_StorePingForUnit(libMapM_gv_mMUnderworldSummonedBoss[lv_team], 1, c_invalidPingId);
    PingDestroy(libCore_gf_PingStoredForUnit(libMapM_gv_mMUnderworldSummonedBoss[lv_team], 2));
    libCore_gf_StorePingForUnit(libMapM_gv_mMUnderworldSummonedBoss[lv_team], 2, c_invalidPingId);
    Wait(1.5, c_timeGame);
    libNtve_gf_CreateUnitsWithDefaultFacing(1, "UnderworldSummonedBossBody", c_unitCreateIgnorePlacement, libGame_gf_ComputerPlayerInTeam(lv_team), libMapM_gv_mMUnderworldSummonedBossLocation[lv_team]);
    libMapM_gv_mMUnderworldSummonedBossBody[lv_team] = UnitLastCreated();
    if ((UnitIsAlive(libMapM_gv_mMUnderworldSummonedBoss[1]) == false) && (UnitIsAlive(libMapM_gv_mMUnderworldSummonedBoss[2]) == false)) {
        libMapM_gf_MMUnderworldTransmissionGolemDefeatedQ();
        SoundtrackStop(PlayerGroupAll(), c_soundtrackCategoryMusic, true);
        libSond_gf_SoundtrackPlayMapSoundtrackAsDefaultSoundtrackForAllPlayers();
        Wait((libMapM_gv_mMUnderworldEventCooldown_C - 12.0), c_timeGame);
        SoundPlayForPlayer(SoundLink("Event_GraveGolem_Awaken", -1), c_maxPlayers, PlayerGroupAll(), 100.0, 0.0);
        Wait(12.0, c_timeGame);
        libMapM_gf_MMUnderworldPrepare();
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldSummonedBossesDied_Init () {
    libMapM_gt_MMUnderworldSummonedBossesDied = TriggerCreate("libMapM_gt_MMUnderworldSummonedBossesDied_Func");
    TriggerEnable(libMapM_gt_MMUnderworldSummonedBossesDied, false);
    TriggerAddEventUnitDied(libMapM_gt_MMUnderworldSummonedBossesDied, UnitRefFromVariable("libMapM_gv_mMUnderworldSummonedBoss[1]"));
    TriggerAddEventUnitDied(libMapM_gt_MMUnderworldSummonedBossesDied, UnitRefFromVariable("libMapM_gv_mMUnderworldSummonedBoss[2]"));
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Gates Opened
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldGatesOpened_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    Wait(libMapM_gv_mMUnderworldStartTime_C, c_timeGame);
    if ((TriggerIsEnabled(TriggerGetCurrent()) == false)) {
        return true;
    }

    libMapM_gf_MMUnderworldPrepare();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldGatesOpened_Init () {
    libMapM_gt_MMUnderworldGatesOpened = TriggerCreate("libMapM_gt_MMUnderworldGatesOpened_Func");
    TriggerEnable(libMapM_gt_MMUnderworldGatesOpened, false);
    TriggerAddEventTimer(libMapM_gt_MMUnderworldGatesOpened, libGame_gv_openTheGatesTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Underworld Opened
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldUnderworldOpened_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gf_MMUnderworldStart();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldUnderworldOpened_Init () {
    libMapM_gt_MMUnderworldUnderworldOpened = TriggerCreate("libMapM_gt_MMUnderworldUnderworldOpened_Func");
    TriggerAddEventTimer(libMapM_gt_MMUnderworldUnderworldOpened, libMapM_gv_mMUnderworldPrepTimer);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Gates Ping & Helper
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldGatesPingHelper_Func (bool testConds, bool runActions) {
    unitgroup auto1CED1C49_g;
    int auto1CED1C49_u;
    int autoDFA7F455_ae;
    int autoDFA7F455_ai;
    unitgroup auto524930BF_g;
    int auto524930BF_u;
    int auto33581FD7_val;
    int auto7CD0990F_n;
    int auto7CD0990F_i;
    unitgroup autoD3BA7307_g;
    int autoD3BA7307_u;
    int auto2E5EA7E1_ae;
    int auto2E5EA7E1_ai;
    unitgroup autoF9E752AD_g;
    int autoF9E752AD_u;
    unitgroup auto78BAAB89_g;
    int auto78BAAB89_u;

    // Variable Declarations
    int lv_timeIndex;
    unit lv_itGate;
    int lv_itPlayer;
    playergroup lv_pingPlayers;

    // Variable Initialization
    lv_pingPlayers = PlayerGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    while (true) {
        lv_timeIndex += 1;
        if ((libMapM_gv_mMUnderworldOpened == false)) {
            auto1CED1C49_g = libMapM_gv_mMUnderworldGatesAbove;
            auto1CED1C49_u = 1;
            for ( ; auto1CED1C49_u <= UnitGroupCount(auto1CED1C49_g, c_unitCountAll) ; auto1CED1C49_u += (lv_itGate == UnitGroupUnit(auto1CED1C49_g, auto1CED1C49_u)) ) {
                lv_itGate = UnitGroupUnit(auto1CED1C49_g, auto1CED1C49_u);
                PingDestroy(libCore_gf_PingStoredForUnit(lv_itGate, 1));
                libCore_gf_StorePingForUnit(lv_itGate, 1, c_invalidPingId);
            }
            return true;
        }

        PlayerGroupClear(lv_pingPlayers);
        autoDFA7F455_ae = libCore_gv_bALMaxPlayers;
        autoDFA7F455_ai = 1;
        lv_itPlayer = 1;
        for ( ; ( (autoDFA7F455_ai >= 0 && lv_itPlayer <= autoDFA7F455_ae) || (autoDFA7F455_ai <= 0 && lv_itPlayer >= autoDFA7F455_ae) ) ; lv_itPlayer += autoDFA7F455_ai ) {
            if ((UnitIsAlive(libMapM_gf_MMUnderworldPlayerHeroUnit(lv_itPlayer)) == true) && (libNtve_gf_UnitInRegion(libMapM_gf_MMUnderworldPlayerHeroUnit(lv_itPlayer), libMapM_gv_mMUnderworldUnderGroundPlayable) == false)) {
                PlayerGroupAdd(lv_pingPlayers, lv_itPlayer);
            }

        }
        auto524930BF_g = libMapM_gv_mMUnderworldGatesAbove;
        auto524930BF_u = 1;
        for ( ; auto524930BF_u <= UnitGroupCount(auto524930BF_g, c_unitCountAll) ; auto524930BF_u += (lv_itGate == UnitGroupUnit(auto524930BF_g, auto524930BF_u)) ) {
            lv_itGate = UnitGroupUnit(auto524930BF_g, auto524930BF_u);
            auto33581FD7_val = ModI(lv_timeIndex, 4);
            if (auto33581FD7_val == 1) {
                libCore_gf_CreateMinimapPingStorm(lv_pingPlayers, "StormAlert", UnitGetPosition(lv_itGate), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0);
            }
            else if (auto33581FD7_val == 2) {
                libCore_gf_CreateMinimapPingStorm(lv_pingPlayers, "StormAlert2", UnitGetPosition(lv_itGate), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0);
            }
            else if (auto33581FD7_val == 3) {
                libCore_gf_CreateMinimapPingStorm(lv_pingPlayers, "StormAlert3", UnitGetPosition(lv_itGate), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0);
            }
            else if (auto33581FD7_val == 0) {
                libCore_gf_CreateMinimapPingStorm(lv_pingPlayers, "StormAlert4", UnitGetPosition(lv_itGate), ColorWithAlpha(100.00, 100.00, 0.00, 0.00), 0.0);
            }
            else {
            }
            libCore_gf_StorePingForUnit(lv_itGate, 1, PingLastCreated());
        }
        auto7CD0990F_n = 6;
        for (auto7CD0990F_i = 1; auto7CD0990F_i <= auto7CD0990F_n; auto7CD0990F_i += 1) {
            if ((libMapM_gv_mMUnderworldOpened == false)) {
                autoD3BA7307_g = libMapM_gv_mMUnderworldGatesAbove;
                autoD3BA7307_u = 1;
                for ( ; autoD3BA7307_u <= UnitGroupCount(autoD3BA7307_g, c_unitCountAll) ; autoD3BA7307_u += (lv_itGate == UnitGroupUnit(autoD3BA7307_g, autoD3BA7307_u)) ) {
                    lv_itGate = UnitGroupUnit(autoD3BA7307_g, autoD3BA7307_u);
                    PingDestroy(libCore_gf_PingStoredForUnit(lv_itGate, 1));
                    libCore_gf_StorePingForUnit(lv_itGate, 1, c_invalidPingId);
                }
                return true;
            }

            PlayerGroupClear(lv_pingPlayers);
            auto2E5EA7E1_ae = libCore_gv_bALMaxPlayers;
            auto2E5EA7E1_ai = 1;
            lv_itPlayer = 1;
            for ( ; ( (auto2E5EA7E1_ai >= 0 && lv_itPlayer <= auto2E5EA7E1_ae) || (auto2E5EA7E1_ai <= 0 && lv_itPlayer >= auto2E5EA7E1_ae) ) ; lv_itPlayer += auto2E5EA7E1_ai ) {
                if ((UnitIsAlive(libMapM_gf_MMUnderworldPlayerHeroUnit(lv_itPlayer)) == true) && (libNtve_gf_UnitInRegion(libMapM_gf_MMUnderworldPlayerHeroUnit(lv_itPlayer), libMapM_gv_mMUnderworldUnderGroundPlayable) == false)) {
                    PlayerGroupAdd(lv_pingPlayers, lv_itPlayer);
                }

            }
            autoF9E752AD_g = libMapM_gv_mMUnderworldGatesAbove;
            autoF9E752AD_u = 1;
            for ( ; autoF9E752AD_u <= UnitGroupCount(autoF9E752AD_g, c_unitCountAll) ; autoF9E752AD_u += (lv_itGate == UnitGroupUnit(autoF9E752AD_g, autoF9E752AD_u)) ) {
                lv_itGate = UnitGroupUnit(autoF9E752AD_g, autoF9E752AD_u);
                PingSetPlayerGroup(libCore_gf_PingStoredForUnit(lv_itGate, 1), lv_pingPlayers);
            }
            Wait(1.0, c_timeGame);
        }
        auto78BAAB89_g = libMapM_gv_mMUnderworldGatesAbove;
        auto78BAAB89_u = 1;
        for ( ; auto78BAAB89_u <= UnitGroupCount(auto78BAAB89_g, c_unitCountAll) ; auto78BAAB89_u += (lv_itGate == UnitGroupUnit(auto78BAAB89_g, auto78BAAB89_u)) ) {
            lv_itGate = UnitGroupUnit(auto78BAAB89_g, auto78BAAB89_u);
            PingDestroy(libCore_gf_PingStoredForUnit(lv_itGate, 1));
            libCore_gf_StorePingForUnit(lv_itGate, 1, c_invalidPingId);
        }
        Wait(9.0, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldGatesPingHelper_Init () {
    libMapM_gt_MMUnderworldGatesPingHelper = TriggerCreate("libMapM_gt_MMUnderworldGatesPingHelper_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Cleared
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldCleared_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_itGroupIndex;
    unit lv_itMinion;
    unit lv_itSkull;
    unit lv_itGate;
    unit lv_itBush;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gf_MMUnderworldTransmissionUnderworldClearedQ();
    libMapM_gf_MMUnderworldTurnGroundHoleLightOnOff(false);
    libGame_gf_SendEventMapHauntedMinesCleared();
    Wait(3.0, c_timeGame);
    libMapM_gv_mMUnderworldOpened = false;
    libMapM_gv_mMUnderworldBossSummonEventCounter += 1;
    libMapM_gf_MMUnderworldSummonBoss();
    while (!(((UnitIsAlive(libMapM_gv_mMUnderworldSummonedBoss[1]) == true) || (UnitIsAlive(libMapM_gv_mMUnderworldSummonedBoss[2]) == true)))) {
        Wait(1.0, c_timeGame);
    }
    TriggerEnable(libMapM_gt_MMUnderworldSummonedBossesDied, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldCleared_Init () {
    libMapM_gt_MMUnderworldCleared = TriggerCreate("libMapM_gt_MMUnderworldCleared_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld ObjectiveUI Handler
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldObjectiveUIHandler_Func (bool testConds, bool runActions) {
    // Variable Declarations
    text lv_tip;
    int lv_indexTeam;
    int lv_indexTeamEnemy;
    int lv_state;
    int lv_lastState;

    // Variable Initialization
    lv_state = libMapM_ge_MMUnderworldState_CollectingSkulls;
    lv_lastState = libMapM_ge_MMUnderworldState_CollectingSkulls;

    // Conditions
    if (testConds) {
        if (!((TriggerIsEnabled(TriggerGetCurrent()) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    lv_tip = StringExternal("Param/Value/lib_MapM_558DD799");
    while (true) {
        if ((TimerGetRemaining(libMapM_gv_mMUnderworldPrepTimer) > 0.0)) {
            lv_state = libMapM_ge_MMUnderworldState_Preparing;
            if ((lv_state != lv_lastState)) {
                libUIUI_gf_MapMechanicsHauntedMinesSetMode(libUIUI_ge_MapMechanicsHauntedMinesModes_MinesTimer);
                libUIUI_gf_MapMechanicsHauntedMinesShowHidePanel(true);
            }

            libUIUI_gf_MapMechanicsHauntedMinesSetRemainingMinesWarningTime(FixedToInt(TimerGetRemaining(libMapM_gv_mMUnderworldPrepTimer)));
            lv_lastState = lv_state;
        }
        else if ((libMapM_gv_mMUnderworldOpened == true)) {
            lv_state = libMapM_ge_MMUnderworldState_CollectingSkulls;
            if ((lv_state != lv_lastState)) {
                libUIUI_gf_MapMechanicsHauntedMinesSetMode(libUIUI_ge_MapMechanicsHauntedMinesModes_Skulls);
                libUIUI_gf_MapMechanicsHauntedMinesShowHidePanel(true);
            }

            libMapM_gf_MMUnderworldObjectiveUIUpdateText();
            lv_lastState = lv_state;
        }
        else if (((UnitIsAlive(libMapM_gv_mMUnderworldSummonedBoss[1]) == true) || (UnitIsAlive(libMapM_gv_mMUnderworldSummonedBoss[2]) == true))) {
            lv_state = libMapM_ge_MMUnderworldState_BossSummoned;
            lv_lastState = lv_state;
        }
        else if (true) {
            if (((lv_lastState == libMapM_ge_MMUnderworldState_Preparing) || (lv_lastState == libMapM_ge_MMUnderworldState_CollectingSkulls))) {
                Wait(0.5, c_timeGame);
                continue;
            }

            lv_state = libMapM_ge_MMUnderworldState_Idle;
            if ((lv_state != lv_lastState)) {
                Wait(4.0, c_timeGame);
                libUIUI_gf_MapMechanicsHauntedMinesShowHidePanel(false);
            }

            lv_lastState = lv_state;
        }
        Wait(0.5, c_timeGame);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldObjectiveUIHandler_Init () {
    libMapM_gt_MMUnderworldObjectiveUIHandler = TriggerCreate("libMapM_gt_MMUnderworldObjectiveUIHandler_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Summoned Boss UI Bar
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldSummonedBossUIBar_Func (bool testConds, bool runActions) {
    int auto2D617A3B_ae;
    int auto2D617A3B_ai;

    // Variable Declarations
    int lv_itTeam;
    fixed lv_current;
    timer lv_summonTimer;
    unit[3] lv_tempGolems;

    // Variable Initialization
    lv_summonTimer = TimerCreate();

    // Actions
    if (!runActions) {
        return true;
    }

    TimerStart(lv_summonTimer, libMapM_gv_mMUnderworldSummonedBossDuration_C, false, c_timeGame);
    auto2D617A3B_ae = 2;
    auto2D617A3B_ai = 1;
    lv_itTeam = 1;
    for ( ; ( (auto2D617A3B_ai >= 0 && lv_itTeam <= auto2D617A3B_ae) || (auto2D617A3B_ai <= 0 && lv_itTeam >= auto2D617A3B_ae) ) ; lv_itTeam += auto2D617A3B_ai ) {
        libNtve_gf_CreateUnitsWithDefaultFacing(1, "UnderworldSummonedBoss", c_unitCreateIgnorePlacement, libGame_gf_ComputerPlayerInTeam(lv_itTeam), Point(0.0, 0.0));
        lv_tempGolems[lv_itTeam] = UnitLastCreated();
        libNtve_gf_ShowHideUnit(UnitLastCreated(), false);
        libNtve_gf_MakeUnitInvulnerable(UnitLastCreated(), true);
        libNtve_gf_PauseUnit(UnitLastCreated(), true);
        UnitSetState(UnitLastCreated(), c_unitStateTargetable, false);
        UnitSetState(UnitLastCreated(), c_unitStateRadarable, false);
        UnitSetState(UnitLastCreated(), c_unitStateStatusBar, false);
        UnitSetState(UnitLastCreated(), c_unitStateSelectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateHighlightable, false);
        UnitSetState(UnitLastCreated(), c_unitStateDetectable, false);
        UnitSetState(UnitLastCreated(), c_unitStateCursorable, false);
        UnitSetPropertyFixed(UnitLastCreated(), c_unitPropLifeMax, 2000.0);
    }
    UnitSetPropertyFixed(lv_tempGolems[1], c_unitPropLifePercent, 0.1);
    UnitSetPropertyFixed(lv_tempGolems[2], c_unitPropLifePercent, 0.1);
    libUIUI_gf_MapMechanicsHauntedMinesSetUpGolemForTeam(lv_tempGolems[libGame_gv_teamOrderIndex_C], libMapM_gv_mMUnderworldSkullCollected[libGame_gv_teamOrderIndex_C], libGame_gv_teamOrderIndex_C);
    libUIUI_gf_MapMechanicsHauntedMinesSetUpGolemForTeam(lv_tempGolems[libGame_gv_teamChaosIndex_C], libMapM_gv_mMUnderworldSkullCollected[libGame_gv_teamChaosIndex_C], libGame_gv_teamChaosIndex_C);
    libUIUI_gf_MapMechanicsHauntedMinesSetUpGolemForObserver(lv_tempGolems[libGame_gv_teamOrderIndex_C], lv_tempGolems[libGame_gv_teamChaosIndex_C], libMapM_gv_mMUnderworldSkullCollected[libGame_gv_teamOrderIndex_C], libMapM_gv_mMUnderworldSkullCollected[libGame_gv_teamChaosIndex_C]);
    libUIUI_gf_MapMechanicsHauntedMinesSetMode(libUIUI_ge_MapMechanicsHauntedMinesModes_Golem);
    while (true) {
        lv_current = (TimerGetElapsed(lv_summonTimer)*100/TimerGetDuration(lv_summonTimer));
        if ((lv_current > 0.1)) {
            UnitSetPropertyFixed(lv_tempGolems[1], c_unitPropLifePercent, lv_current);
            UnitSetPropertyFixed(lv_tempGolems[2], c_unitPropLifePercent, lv_current);
        }

        Wait(0.125, c_timeGame);
        if ((TimerGetRemaining(lv_summonTimer) == 0.0)) {
            break;
        }

    }
    while (!(((UnitIsAlive(libMapM_gv_mMUnderworldSummonedBoss[1]) == true) && (UnitIsAlive(libMapM_gv_mMUnderworldSummonedBoss[2]) == true)))) {
        Wait(0.25, c_timeGame);
    }
    libUIUI_gf_MapMechanicsHauntedMinesSetUpGolemForTeam(libMapM_gv_mMUnderworldSummonedBoss[libGame_gv_teamOrderIndex_C], libMapM_gv_mMUnderworldSkullCollected[libGame_gv_teamOrderIndex_C], libGame_gv_teamOrderIndex_C);
    libUIUI_gf_MapMechanicsHauntedMinesSetUpGolemForTeam(libMapM_gv_mMUnderworldSummonedBoss[libGame_gv_teamChaosIndex_C], libMapM_gv_mMUnderworldSkullCollected[libGame_gv_teamChaosIndex_C], libGame_gv_teamChaosIndex_C);
    libUIUI_gf_MapMechanicsHauntedMinesSetUpGolemForObserver(libMapM_gv_mMUnderworldSummonedBoss[libGame_gv_teamOrderIndex_C], libMapM_gv_mMUnderworldSummonedBoss[libGame_gv_teamChaosIndex_C], libMapM_gv_mMUnderworldSkullCollected[libGame_gv_teamOrderIndex_C], libMapM_gv_mMUnderworldSkullCollected[libGame_gv_teamChaosIndex_C]);
    UnitRemove(lv_tempGolems[1]);
    UnitRemove(lv_tempGolems[2]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldSummonedBossUIBar_Init () {
    libMapM_gt_MMUnderworldSummonedBossUIBar = TriggerCreate("libMapM_gt_MMUnderworldSummonedBossUIBar_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld DisableEvent
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldDisableEvent_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    TriggerEnable(libMapM_gt_MMUnderworldGatesOpened, false);
    libMapM_gv_mMUnderworldMapEventDisabled = true;
    TriggerDebugOutput(1, StringExternal("Param/Value/lib_MapM_6BF06941"), true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldDisableEvent_Init () {
    libMapM_gt_MMUnderworldDisableEvent = TriggerCreate("libMapM_gt_MMUnderworldDisableEvent_Func");
    TriggerEnable(libMapM_gt_MMUnderworldDisableEvent, false);
    TriggerAddEventChatMessage(libMapM_gt_MMUnderworldDisableEvent, c_playerAny, "DisableEvent", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Debug Start
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldDebugStart_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gf_MMUnderworldPrepare();
    TimerStart(libMapM_gv_mMUnderworldPrepTimer, 1.0, false, c_timeGame);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldDebugStart_Init () {
    libMapM_gt_MMUnderworldDebugStart = TriggerCreate("libMapM_gt_MMUnderworldDebugStart_Func");
    TriggerEnable(libMapM_gt_MMUnderworldDebugStart, false);
    TriggerAddEventChatMessage(libMapM_gt_MMUnderworldDebugStart, c_playerAny, "-us", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Debug Start 1
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldDebugStart1_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libMapM_gf_MMUnderworldPrepare();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldDebugStart1_Init () {
    libMapM_gt_MMUnderworldDebugStart1 = TriggerCreate("libMapM_gt_MMUnderworldDebugStart1_Func");
    TriggerEnable(libMapM_gt_MMUnderworldDebugStart1, false);
    TriggerAddEventChatMessage(libMapM_gt_MMUnderworldDebugStart1, c_playerAny, "-uss", true);
    TriggerAddEventChatMessage(libMapM_gt_MMUnderworldDebugStart1, c_playerAny, "EVENTSTART", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Debug Underworld Clear
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldDebugUnderworldClear_Func (bool testConds, bool runActions) {
    int autoC0DA8949_ae;
    int autoC0DA8949_ai;

    // Variable Declarations
    int lv_itGroupIndex;
    int lv_team;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoC0DA8949_ae = libMapM_gv_mMUnderworldMinionGroupCount;
    autoC0DA8949_ai = 1;
    lv_itGroupIndex = 1;
    for ( ; ( (autoC0DA8949_ai >= 0 && lv_itGroupIndex <= autoC0DA8949_ae) || (autoC0DA8949_ai <= 0 && lv_itGroupIndex >= autoC0DA8949_ae) ) ; lv_itGroupIndex += autoC0DA8949_ai ) {
        UnitGroupLoopBegin(libMapM_gv_mMUnderworldMinionGroups[lv_itGroupIndex].lv_units);
        for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
            PingDestroy(libCore_gf_PingStoredForUnit(UnitGroupLoopCurrent(), 1));
            UnitRemove(UnitGroupLoopCurrent());
        }
        UnitGroupLoopEnd();
        UnitRemove(libMapM_gv_mMUnderworldBoss);
        PingDestroy(libCore_gf_PingStoredForUnit(libMapM_gv_mMUnderworldBoss, 1));
    }
    lv_team = libGame_gf_TeamNumberOfPlayer(EventPlayer());
    if (((lv_team < 1) || (lv_team > 2))) {
        lv_team = 1;
    }

    libMapM_gv_mMUnderworldSkullCollected[lv_team] = StringToInt(StringWord(EventChatMessage(false), 2));
    libMapM_gv_mMUnderworldSkullCollected[libGame_gf_EnemyTeam(lv_team)] = (libMapM_gv_mMUnderworldSkullTotal - libMapM_gv_mMUnderworldSkullCollected[lv_team]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldDebugUnderworldClear_Init () {
    libMapM_gt_MMUnderworldDebugUnderworldClear = TriggerCreate("libMapM_gt_MMUnderworldDebugUnderworldClear_Func");
    TriggerEnable(libMapM_gt_MMUnderworldDebugUnderworldClear, false);
    TriggerAddEventChatMessage(libMapM_gt_MMUnderworldDebugUnderworldClear, c_playerAny, "MINECLEAR", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Debug Summon Boss Scaling
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldDebugSummonBossScaling_Func (bool testConds, bool runActions) {
    int auto68B48C87_ae;
    int auto68B48C87_ai;

    // Variable Declarations
    int lv_indexMin;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libMapM_gv_mMUnderworldSummonedBoss[1] = UnitGroupUnit(UnitGroupSelected(1), 1);
    auto68B48C87_ae = StringToInt(StringWord(EventChatMessage(false), 2));
    auto68B48C87_ai = 1;
    lv_indexMin = 1;
    for ( ; ( (auto68B48C87_ai >= 0 && lv_indexMin <= auto68B48C87_ae) || (auto68B48C87_ai <= 0 && lv_indexMin >= auto68B48C87_ae) ) ; lv_indexMin += auto68B48C87_ai ) {
    }
    libMapM_gv_mMUnderworldSkullCollected[1] = StringToInt(StringWord(EventChatMessage(false), 3));
    libMapM_gv_mMUnderworldSkullCollected[2] = (100 - libMapM_gv_mMUnderworldSkullCollected[1]);
    libMapM_gf_MMUnderworldApplySummonedBossScaling(1, true);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldDebugSummonBossScaling_Init () {
    libMapM_gt_MMUnderworldDebugSummonBossScaling = TriggerCreate("libMapM_gt_MMUnderworldDebugSummonBossScaling_Func");
    TriggerEnable(libMapM_gt_MMUnderworldDebugSummonBossScaling, false);
    TriggerAddEventChatMessage(libMapM_gt_MMUnderworldDebugSummonBossScaling, c_playerAny, "-ubs", false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Debug Push Effect
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldDebugPushEffect_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    PlayerCreateEffectPoint(1, "GolemSpawnKnockbackSearch", CameraGetTarget(1));
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldDebugPushEffect_Init () {
    libMapM_gt_MMUnderworldDebugPushEffect = TriggerCreate("libMapM_gt_MMUnderworldDebugPushEffect_Func");
    TriggerEnable(libMapM_gt_MMUnderworldDebugPushEffect, false);
    TriggerAddEventChatMessage(libMapM_gt_MMUnderworldDebugPushEffect, c_playerAny, "-pe", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM Underworld Debug Spawn Skulls
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMUnderworldDebugSpawnSkulls_Func (bool testConds, bool runActions) {
    int auto9D49D0DD_n;
    int auto9D49D0DD_i;

    // Conditions
    if (testConds) {
        if (!((GameCheatsEnabled(c_gameCheatCategoryDevelopment) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    auto9D49D0DD_n = 30;
    for (auto9D49D0DD_i = 1; auto9D49D0DD_i <= auto9D49D0DD_n; auto9D49D0DD_i += 1) {
        PlayerCreateEffectPoint(libCore_gv_cOMPUTER_Neutral, "DropUnderworldPowerupPersistentLargeArea", CameraGetTarget(1));
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMUnderworldDebugSpawnSkulls_Init () {
    libMapM_gt_MMUnderworldDebugSpawnSkulls = TriggerCreate("libMapM_gt_MMUnderworldDebugSpawnSkulls_Func");
    TriggerEnable(libMapM_gt_MMUnderworldDebugSpawnSkulls, false);
    TriggerAddEventChatMessage(libMapM_gt_MMUnderworldDebugSpawnSkulls, c_playerAny, "-sk", true);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MM HoC Forest - Ancient Dies
//--------------------------------------------------------------------------------------------------
bool libMapM_gt_MMHoCForestAncientDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!(((UnitGroupHasUnit(libMapM_gv_mMHoCForestActiveAncients, EventUnit()) == true) && (UnitGroupCount(libMapM_gv_mMHoCForestActiveAncients, c_unitCountAlive) == 0)))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerEnable(TriggerGetCurrent(), false);
    libMapM_gf_MMHoCForestRegrowth();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libMapM_gt_MMHoCForestAncientDies_Init () {
    libMapM_gt_MMHoCForestAncientDies = TriggerCreate("libMapM_gt_MMHoCForestAncientDies_Func");
    TriggerEnable(libMapM_gt_MMHoCForestAncientDies, false);
    TriggerAddEventUnitDied(libMapM_gt_MMHoCForestAncientDies, null);
}

void libMapM_InitTriggers () {
    libMapM_gt_IncludeMapMechanics_Init();
    libMapM_gt_DataJungleCampDefenderData_Init();
    libMapM_gt_DataJungleCampDefenderDoubloons_Init();
    libMapM_gt_DataJungleCampDefenderSiegeGiants_Init();
    libMapM_gt_DataJungleCampDefenderKnights_Init();
    libMapM_gt_DataJungleCampDefenderGraveGolem_Init();
    libMapM_gt_DataJungleCampMercData_Init();
    libMapM_gt_DataJungleCampMercSiegeGiants_Init();
    libMapM_gt_DataJungleCampMercOgres_Init();
    libMapM_gt_DataJungleCampMercGraveGolem_Init();
    libMapM_gt_InitializeJungleCamps_Init();
    libMapM_gt_StartJungleCampTimers_Init();
    libMapM_gt_JungleCreepCampRespawnTimerExpires_Init();
    libMapM_gt_JungleRespawnTimerTextTagCountdown_Init();
    libMapM_gt_JungleDefendersBeginFighting_Init();
    libMapM_gt_JungleDefendersEndFighting_Init();
    libMapM_gt_JungleAllDefendersKilled_Init();
    libMapM_gt_JungleHibernateCampsStart_Init();
    libMapM_gt_JungleHibernateCampsEnd_Init();
    libMapM_gt_JungleHibernateDefendersThatLeash_Init();
    libMapM_gt_JungleHibernateDefendersThatJustSpawned_Init();
    libMapM_gt_JungleCampOwnershipChange_Init();
    libMapM_gt_JungleMercLeaderDies_Init();
    libMapM_gt_JungleMercOgreShieldUsedOgre_Init();
    libMapM_gt_JungleMercOgreShieldUsedHero_Init();
    libMapM_gt_JungleMercDamageDetection_Init();
    libMapM_gt_JungleSiegeGiantTaunt_Init();
    libMapM_gt_InitializeMapMechanics_Init();
    libMapM_gt_MMHelpbuttonClicked_Init();
    libMapM_gt_MMIntroCutsceneStart_Init();
    libMapM_gt_MMIntroCutsceneEnd_Init();
    libMapM_gt_MMIntroSkippable_Init();
    libMapM_gt_MMRepulseRegionPunchBehavior_Init();
    libMapM_gt_MMSafeRegionBehavior_Init();
    libMapM_gt_MMRemoveStackingCoreShieldMechanic_Init();
    libMapM_gt_MMRavenCurseInit_Init();
    libMapM_gt_MMRavenCurseHeroAITeamMapLogic_Init();
    libMapM_gt_MMRavenCurseGateOpen_Init();
    libMapM_gt_MMRavenStartSpawning_Init();
    libMapM_gt_MMRavenSpawnTribute_Init();
    libMapM_gt_MMRavenTributeCollectStarted_Init();
    libMapM_gt_MMRavenTributeCollectCanceled_Init();
    libMapM_gt_MMRavenTributeCollectInterrupted_Init();
    libMapM_gt_MMRavenTributeObtained_Init();
    libMapM_gt_MMRavenCurseStartLightTransition_Init();
    libMapM_gt_MMRavenCurseFinished_Init();
    libMapM_gt_MMRavenObjectiveUIHandler_Init();
    libMapM_gt_MMRavenDisableEvent_Init();
    libMapM_gt_MMRavenDebugStartWarning_Init();
    libMapM_gt_MMRavenDebugStartElunees_Init();
    libMapM_gt_MMRavenDebugStartNexten_Init();
    libMapM_gt_MMRavenDebugStartCurseec_Init();
    libMapM_gt_MMGardensDragonInit_Init();
    libMapM_gt_MMGardensDragonHeroAITeamMapLogic_Init();
    libMapM_gt_MMGardensDragonGateOpen_Init();
    libMapM_gt_MMGardensDragonWarningTimerStart_Init();
    libMapM_gt_MMGardensDragonWarningTimerExpires_Init();
    libMapM_gt_MMGardensDragonDragonEventStarts_Init();
    libMapM_gt_MMGardensDragonDragonEventEnds_Init();
    libMapM_gt_MMGardensDragonTurnOnDragonTowersFirstTime_Init();
    libMapM_gt_MMGardensDragonTurnOnDragonTowersAgain_Init();
    libMapM_gt_MMGardensDragonDragonTowerChangeOwnershipEventFires_Init();
    libMapM_gt_MMGardensDragonDragonTowerCheckObeliskStatus_Init();
    libMapM_gt_MMGardensDragonTransformChannelStart_Init();
    libMapM_gt_MMGardensDragonTransformChannelFinish_Init();
    libMapM_gt_MMGardensDragonTakeDragonReminderTimerExpires_Init();
    libMapM_gt_MMGardensDragonDragonKnightDiesorExpires_Init();
    libMapM_gt_MMGardensDragonObjectiveUIHandler_Init();
    libMapM_gt_MMGardensDragonDisableEvent_Init();
    libMapM_gt_MMGardensDragonDebugCheatStartObelisksso_Init();
    libMapM_gt_MMUnderworldInit_Init();
    libMapM_gt_MMUnderworldHeroAITeamMapLogic_Init();
    libMapM_gt_MMUnderworldStarttoEnterGates_Init();
    libMapM_gt_MMUnderworldEnteringGates_Init();
    libMapM_gt_MMUnderworldCameraPanned_Init();
    libMapM_gt_MMUnderworldPlayerHeroLocationTracking_Init();
    libMapM_gt_MMUnderworldUpdateHeroUnitLightingonRespawn_Init();
    libMapM_gt_MMUnderworldGroundHoleVision_Init();
    libMapM_gt_MMUnderworldPlayerMovesCamera_Init();
    libMapM_gt_MMUnderworldUntargetableAcrossPlane_Init();
    libMapM_gt_MMUnderworldMonstersDies_Init();
    libMapM_gt_MMUnderworldSkullDropped_Init();
    libMapM_gt_MMUnderworldSkullPositionValidation_Init();
    libMapM_gt_MMUnderworldSkullPickup_Init();
    libMapM_gt_MMUnderworldMineScalingSnapshot_Init();
    libMapM_gt_MMUnderworldSummonedBossPingVisibility_Init();
    libMapM_gt_MMUnderworldSummonedBossesDied_Init();
    libMapM_gt_MMUnderworldGatesOpened_Init();
    libMapM_gt_MMUnderworldUnderworldOpened_Init();
    libMapM_gt_MMUnderworldGatesPingHelper_Init();
    libMapM_gt_MMUnderworldCleared_Init();
    libMapM_gt_MMUnderworldObjectiveUIHandler_Init();
    libMapM_gt_MMUnderworldSummonedBossUIBar_Init();
    libMapM_gt_MMUnderworldDisableEvent_Init();
    libMapM_gt_MMUnderworldDebugStart_Init();
    libMapM_gt_MMUnderworldDebugStart1_Init();
    libMapM_gt_MMUnderworldDebugUnderworldClear_Init();
    libMapM_gt_MMUnderworldDebugSummonBossScaling_Init();
    libMapM_gt_MMUnderworldDebugPushEffect_Init();
    libMapM_gt_MMUnderworldDebugSpawnSkulls_Init();
    libMapM_gt_MMHoCForestAncientDies_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libMapM_InitLib_completed = false;

void libMapM_InitLib () {
    if (libMapM_InitLib_completed) {
        return;
    }

    libMapM_InitLib_completed = true;

    libMapM_InitLibraries();
    libMapM_InitVariables();
    libMapM_InitTriggers();
}

include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/AILib"
include "TriggerLibs/UILib"
include "TriggerLibs/StartingExperienceLib"
include "TriggerLibs/SoundLib"
include "TriggerLibs/GameDataHelperLib"
include "TriggerLibs/SupportLib"

