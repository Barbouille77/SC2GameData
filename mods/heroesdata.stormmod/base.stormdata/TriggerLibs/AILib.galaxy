include "TriggerLibs/NativeLib"
include "TriggerLibs/HeroesLib_h"
include "TriggerLibs/GameLib_h"
include "TriggerLibs/MapMechanicsLib_h"
include "TriggerLibs/UILib_h"
include "TriggerLibs/SoundLib_h"
include "TriggerLibs/GameDataHelperLib_h"
include "TriggerLibs/SupportLib_h"

include "TriggerLibs/AILib_h"

//--------------------------------------------------------------------------------------------------
// Library: AI
//--------------------------------------------------------------------------------------------------
// External Library Initialization
void libAIAI_InitLibraries () {
    libNtve_InitVariables();
    libCore_InitVariables();
    libGame_InitVariables();
    libMapM_InitVariables();
    libUIUI_InitVariables();
    libSond_InitVariables();
    libGDHL_InitVariables();
    libSprt_InitVariables();
}

// Variable Initialization
bool libAIAI_InitVariables_completed = false;

void libAIAI_InitVariables () {
    int init_i;
    int init_i1;

    if (libAIAI_InitVariables_completed) {
        return;
    }

    libAIAI_InitVariables_completed = true;

    libAIAI_gv_aIMinionRangedMinionWeaponRange = StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "RangedMinion", "Range", c_playerAny));
    libAIAI_gv_aIMinionEnemyMinionAttackRange = (StringToFixed(CatalogFieldValueGet(c_gameCatalogWeapon, "RangedMinion", "Range", c_playerAny)) + 1.0);
    libAIAI_gv_aIMinionAttackHeroDistance = (libAIAI_gv_aIMinionRangedMinionWeaponRange + 0.5);
    libAIAI_gv_aIHeroCloseToLaneDistance = 8.0;
    libAIAI_gv_aIHeroLaneBucketWidth = ((libAIAI_gv_aIHeroMaximumLaneOffset * 2.0) / libAIAI_gv_aIHeroNumberofLaneBuckets);
    libAIAI_gv_aIHeroMapMechanicStackMaximum = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "MapMechanicStack", "MaxStackCount", c_playerAny);
    for (init_i = 0; init_i <= libAIAI_gv_minionAIMaxActiveMinions_C; init_i += 1) {
        libAIAI_gv_minionAIActiveMinions[init_i].lv_state = libAIAI_ge_MinionAIStates_Advancing;
        libAIAI_gv_minionAIActiveMinions[init_i].lv_debugLabel = c_invalidDialogControlId;
    }
    libAIAI_gv_minionAIDebugSpamTimer = TimerCreate();
    libAIAI_gv_uF_MinionAI_AnyEnemyMinions = UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libAIAI_gv_uF_MinionAI_AnyEnemySummoned = UnitFilter((1 << c_targetFilterVisible), (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterHeroic) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libAIAI_gv_uF_MinionAI_GetNearestEnemyStructure = UnitFilter((1 << c_targetFilterVisible), (1 << (c_targetFilterAITargetableStructure - 32)), (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterBiological) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterSummoned - 32)));
    libAIAI_gv_uF_MinionAI_GetNearestAttackableEnemyStructure = UnitFilter((1 << c_targetFilterVisible), (1 << (c_targetFilterAITargetableStructure - 32)), (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterBiological) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterSummoned - 32)));
    libAIAI_gv_uF_MinionAI_GetNearestEnemyHero = UnitFilter((1 << c_targetFilterHeroic) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterBiological) | (1 << c_targetFilterPsionic) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libAIAI_gv_uF_TowerAI_Scan_Group = UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libAIAI_gv_uF_TowerAI_Scan_Group_Biological = UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libAIAI_gv_uF_TowerAI_Scan_Group_Summoned = UnitFilter((1 << c_targetFilterVisible), (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterMechanical) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)));
    libAIAI_gv_uF_TowerAI_Required_Summoned = UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0);
    libAIAI_gv_uF_TowerAI_Required_Heroic = UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0);
    libAIAI_gv_uF_TowerAI_Required_Biological = UnitFilter((1 << c_targetFilterBiological), 0, 0, 0);
    libAIAI_gv_uF_TowerAI_Required_Invulnerable = UnitFilter(0, (1 << (c_targetFilterInvulnerable - 32)), 0, 0);
    libAIAI_gv_uF_TowerAI_Required_Stasis = UnitFilter(0, (1 << (c_targetFilterStasis - 32)), 0, 0);
    libAIAI_gv_uF_TowerAI_Required_Visible = UnitFilter((1 << c_targetFilterVisible), 0, 0, 0);
    for (init_i = 0; init_i <= libAIAI_gv_defenderAIMaxNumberOfDefenderAI; init_i += 1) {
        libAIAI_gv_defenderAI[init_i].lv_defendersGroup = UnitGroupEmpty();
        libAIAI_gv_defenderAI[init_i].lv_showLeashedText = true;
        libAIAI_gv_defenderAI[init_i].lv_state = libAIAI_ge_DefenderAIState_Idle;
        libAIAI_gv_defenderAI[init_i].lv_validTargets = UnitGroupEmpty();
        libAIAI_gv_defenderAI[init_i].lv_debugLabel = c_invalidDialogControlId;
    }
    libAIAI_gv_defenderAILastCreatedDefenderAIIndex = "DefenderAILastCreatedDefenderAI";
    for (init_i = 0; init_i <= libCore_gv_bALMaxPlayers; init_i += 1) {
        libAIAI_gv_heroAIDamageTracking[init_i].lv_lastTimeAttacked = -60.0;
    }
    libAIAI_gv_heroAITeamMapLogicFaction = libGame_ge_Faction_Order;
    libAIAI_gv_heroAIAlliesFollowPlayerWhenPinged = true;
    for (init_i = 0; init_i <= libMapM_gv_jungleMaxCamps; init_i += 1) {
        libAIAI_gv_heroAIOrderMercCampList[init_i] = -1;
    }
    for (init_i = 0; init_i <= libMapM_gv_jungleMaxCamps; init_i += 1) {
        libAIAI_gv_heroAIChaosMercCampList[init_i] = -1;
    }
    for (init_i = 0; init_i <= libMapM_gv_jungleMaxCamps; init_i += 1) {
        libAIAI_gv_heroAIMiddleMercCampList[init_i] = -1;
    }
    libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeState = libAIAI_ge_HeroAIRavenLordTributeState_None;
    libAIAI_gv_heroAIDragonShireObelisks = UnitGroupEmpty();
    libAIAI_gv_heroAIUnderworldStatus.lv_entrances = UnitGroupEmpty();
    libAIAI_gv_heroAIUnderworldStatus.lv_exits = UnitGroupEmpty();
    libAIAI_gv_aIHeroWaitForGameToStartMoveToGateTime = 15.0;
    for (init_i = 0; init_i <= libAIAI_gv_heroAI_MaxItemCount_C; init_i += 1) {
        libAIAI_gv_heroAIItemData[init_i].lv_item = "";
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libAIAI_gv_heroAITeamData[init_i].lv_difficulty = libAIAI_ge_HeroAIDifficulty_Null;
        for (init_i1 = 0; init_i1 <= libGame_gv_laneMaxCount_C; init_i1 += 1) {
            libAIAI_gv_heroAITeamData[init_i].lv_laneData[init_i1].lv_allyHeroes = PlayerGroupEmpty();
            libAIAI_gv_heroAITeamData[init_i].lv_laneData[init_i1].lv_contentionPointLanePosition = 1.0;
            libAIAI_gv_heroAITeamData[init_i].lv_laneData[init_i1].lv_frontTowerPosition = 1.0;
            libAIAI_gv_heroAITeamData[init_i].lv_laneData[init_i1].lv_frontMinionPosition = 1.0;
            libAIAI_gv_heroAITeamData[init_i].lv_laneData[init_i1].lv_frontEnemyMinionPosition = 1.0;
            libAIAI_gv_heroAITeamData[init_i].lv_laneData[init_i1].lv_frontHumanAllyPosition = 1.0;
            libAIAI_gv_heroAITeamData[init_i].lv_laneData[init_i1].lv_coreDefensePosition = 1.0;
            libAIAI_gv_heroAITeamData[init_i].lv_laneData[init_i1].lv_lastTimeHumanAllyEnteredLane = -1.0;
        }
        for (init_i1 = 0; init_i1 <= libCore_gv_bALMaxPlayers; init_i1 += 1) {
            libAIAI_gv_heroAITeamData[init_i].lv_heroTrackingData[init_i1].lv_lastSeenVelocity = Point(0.0, 0.0);
            libAIAI_gv_heroAITeamData[init_i].lv_heroTrackingData[init_i1].lv_lastSeenTime = -100.0;
            libAIAI_gv_heroAITeamData[init_i].lv_heroTrackingData[init_i1].lv_lastSeenLocation = Point(0.0, 0.0);
        }
        libAIAI_gv_heroAITeamData[init_i].lv_weakestLane = 1;
    }
    for (init_i = 0; init_i <= 2; init_i += 1) {
        libAIAI_gv_heroAITeamPlayerData[init_i].lv_players = PlayerGroupEmpty();
        libAIAI_gv_heroAITeamPlayerData[init_i].lv_humanPlayers = PlayerGroupEmpty();
        libAIAI_gv_heroAITeamPlayerData[init_i].lv_aIPlayers = PlayerGroupEmpty();
    }
    for (init_i = 0; init_i <= 12; init_i += 1) {
        libAIAI_gv_aIHeroes[init_i].lv_heroState = libAIAI_ge_HeroAIStates_HSUnused;
        libAIAI_gv_aIHeroes[init_i].lv_difficulty = libAIAI_ge_HeroAIDifficulty_Null;
        libAIAI_gv_aIHeroes[init_i].lv_startOffensiveHealth = 60.0;
        libAIAI_gv_aIHeroes[init_i].lv_endOffensiveHealth = 40.0;
        libAIAI_gv_aIHeroes[init_i].lv_returnToSpawnHealth = 20.0;
        libAIAI_gv_aIHeroes[init_i].lv_canPortHome = true;
        libAIAI_gv_aIHeroes[init_i].lv_savedPriority = libAIAI_ge_HeroAIPriority_Idle;
        libAIAI_gv_aIHeroes[init_i].lv_goalPriority = libAIAI_ge_HeroAIPriority_Idle;
        libAIAI_gv_aIHeroes[init_i].lv_independence = 1.0;
        libAIAI_gv_aIHeroes[init_i].lv_attackAbility = AbilityCommand("attack", 0);
        libAIAI_gv_aIHeroes[init_i].lv_hasMount = true;
        libAIAI_gv_aIHeroes[init_i].lv_mountAbility = AbilityCommand("Mount", 0);
        libAIAI_gv_aIHeroes[init_i].lv_dismountAbility = AbilityCommand("Dismount", 0);
        libAIAI_gv_aIHeroes[init_i].lv_mountBehavior = "Mounted";
        libAIAI_gv_aIHeroes[init_i].lv_castTacticalEndIfIdleOrVeryInjured = true;
        libAIAI_gv_aIHeroes[init_i].lv_statePriority = libAIAI_ge_HeroAIPriority_CustomMapRegular;
        libAIAI_gv_aIHeroes[init_i].lv_hSMapStatePriority = libAIAI_ge_HeroAIPriority_CustomMapRegular;
        libAIAI_gv_aIHeroes[init_i].lv_aIBehaviorsEnabled = true;
        libAIAI_gv_aIHeroes[init_i].lv_enemyEvalMultiplier = 1.0;
        libAIAI_gv_aIHeroes[init_i].lv_enemies = UnitGroupEmpty();
        libAIAI_gv_aIHeroes[init_i].lv_enemyHeroes = UnitGroupEmpty();
        libAIAI_gv_aIHeroes[init_i].lv_enemyMinionsSummons = UnitGroupEmpty();
        libAIAI_gv_aIHeroes[init_i].lv_enemyTowers = UnitGroupEmpty();
        libAIAI_gv_aIHeroes[init_i].lv_allies = UnitGroupEmpty();
        libAIAI_gv_aIHeroes[init_i].lv_allyHeroes = UnitGroupEmpty();
        libAIAI_gv_aIHeroes[init_i].lv_allyMinionsSummons = UnitGroupEmpty();
        libAIAI_gv_aIHeroes[init_i].lv_allyTowers = UnitGroupEmpty();
        libAIAI_gv_aIHeroes[init_i].lv_visibleEnemyHeroes = UnitGroupEmpty();
    }
    libAIAI_gv_aIMoveAbil = AbilityCommand("move", 0);
    libAIAI_gv_aITurnAbil = AbilityCommand("move", 4);
    libAIAI_gv_aIAttackAbil = AbilityCommand("attack", 0);
    libAIAI_gv_aIAttackAllyAbil = AbilityCommand("AttackAlly", 0);
    libAIAI_gv_aIStopAbil = AbilityCommand("stop", 0);
}

// Custom Script
//--------------------------------------------------------------------------------------------------
// Custom Script: #Include Tactical Hero AI
//--------------------------------------------------------------------------------------------------
include "StormTactical.galaxy"
include "RehgarTactical.galaxy"
include "AzmodanTactical.galaxy"
include "ZagaraTactical.galaxy"
include "ChenTactical.galaxy"
include "MurkyTactical.galaxy"
include "AnubarakTactical.galaxy"
include "KaelthasTactical.galaxy"
include "JainaTactical.galaxy"
include "CrusaderTactical.galaxy"
include "ThrallTactical.galaxy"
include "ButcherTactical.galaxy"
include "SylvanasTactical.galaxy"
include "LostVikingsTactical.galaxy"
include "LeoricTactical.galaxy"
include "MonkTactical.galaxy"
include "RexxarTactical.galaxy"
include "ArtanisTactical.galaxy"
include "MedicTactical.galaxy"
include "DryadTactical.galaxy"
include "GreymaneTactical.galaxy"
include "WizardTactical.galaxy"
include "NecromancerTactical.galaxy"

//--------------------------------------------------------------------------------------------------
// Custom Script: #Include Tactical Hero AI 2
//--------------------------------------------------------------------------------------------------
include "HeroAILaneWave.galaxy"

void libAIAI_InitCustomScript () {
}

// Presets
string libAIAI_ge_MinionAIStates_Ident (int lp_val) {
         if (lp_val == libAIAI_ge_MinionAIStates_Advancing) { return "Advancing"; }
    else if (lp_val == libAIAI_ge_MinionAIStates_AttackingMinions) { return "AttackingMinions"; }
    else if (lp_val == libAIAI_ge_MinionAIStates_AttackingStructure) { return "AttackingStructure"; }
    else if (lp_val == libAIAI_ge_MinionAIStates_AttackingHero) { return "AttackingHero"; }
    else if (lp_val == libAIAI_ge_MinionAIStates_FollowHero) { return "FollowHero"; }
    else if (lp_val == libAIAI_ge_MinionAIStates_HoldPosition) { return "HoldPosition"; }
    return null;
}

string libAIAI_ge_DefenderAIState_Ident (int lp_val) {
         if (lp_val == libAIAI_ge_DefenderAIState_Idle) { return "Idle"; }
    else if (lp_val == libAIAI_ge_DefenderAIState_Fighting) { return "Fighting"; }
    else if (lp_val == libAIAI_ge_DefenderAIState_Leashing) { return "Leashing"; }
    return null;
}

string libAIAI_ge_HeroAIDifficulty_Ident (int lp_val) {
         if (lp_val == libAIAI_ge_HeroAIDifficulty_Null) { return "Null"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy) { return "HeroAITutorial1Enemy"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally) { return "HeroAITutorial1Ally"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy) { return "HeroAITutorialMapMechanicEnemy"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly) { return "HeroAITutorialMapMechanicAlly"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode) { return "HeroAITryMeMode"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly) { return "HeroAITryMeModeAlly"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy) { return "HeroAIVeryEasy"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly) { return "HeroAIVeryEasyWithHumanAlly"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAIEasy) { return "HeroAIEasy"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly) { return "HeroAIEasyWithHumanAlly"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAIMedium) { return "HeroAIMedium"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard) { return "HeroAIVeryHard"; }
    else if (lp_val == libAIAI_ge_HeroAIDifficulty_HeroAIElite) { return "HeroAIElite"; }
    return null;
}

string libAIAI_ge_HeroAIObjective_Ident (int lp_val) {
         if (lp_val == libAIAI_ge_HeroAIObjective_PushLane) { return "PushLane"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_WaitInSpawn) { return "WaitInSpawn"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_CaptureDragon) { return "CaptureDragon"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_DefendCore) { return "DefendCore"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_TakeCamp) { return "TakeCamp"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_CaptureWatchTower) { return "CaptureWatchTower"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_CaptureTearOfElune) { return "CaptureTearOfElune"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_CaptureObelisk) { return "CaptureObelisk"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_FollowHero) { return "FollowHero"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_CollectSkulls) { return "CollectSkulls"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_UseAbathurLogic) { return "UseAbathurLogic"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_CustomMapObj) { return "CustomMapObj"; }
    else if (lp_val == libAIAI_ge_HeroAIObjective_Goal) { return "Goal"; }
    return null;
}

string libAIAI_ge_HeroAIPriority_Ident (int lp_val) {
         if (lp_val == libAIAI_ge_HeroAIPriority_GenericUninterruptable) { return "GenericUninterruptable"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_CustomMapVital) { return "CustomMapVital"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_WaitInSpawnAnyState) { return "WaitInSpawnAnyState"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_AbathurLogicAnyState) { return "AbathurLogicAnyState"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_FollowHeroFollowState) { return "FollowHeroFollowState"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_FollowHeroOtherState) { return "FollowHeroOtherState"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneAttackCore) { return "PushLaneAttackCore"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_DefendCoreAnyState) { return "DefendCoreAnyState"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_CollectSkullsInUnderworld) { return "CollectSkullsInUnderworld"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_CustomMapHigh) { return "CustomMapHigh"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_TakeCampTakingCamp) { return "TakeCampTakingCamp"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneDefendingBase) { return "PushLaneDefendingBase"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_CaptureTearOfEluneHeadingToTribute) { return "CaptureTearOfEluneHeadingToTribute"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_TakeCampMoveToCampWithHuman) { return "TakeCampMoveToCampWithHuman"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_CollectSkullsHeadingToUnderworld) { return "CollectSkullsHeadingToUnderworld"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_CaptureObeliskOrDragon) { return "CaptureObeliskOrDragon"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_CustomMapRegular) { return "CustomMapRegular"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLanePushWithTeam) { return "PushLanePushWithTeam"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneTeamFightLikely) { return "PushLaneTeamFightLikely"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneDefendTown) { return "PushLaneDefendTown"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneAttackTown) { return "PushLaneAttackTown"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneRavenKingsCurseActive) { return "PushLaneRavenKingsCurseActive"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneUnderworldBossActive) { return "PushLaneUnderworldBossActive"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLanePushWithAllyMercs) { return "PushLanePushWithAllyMercs"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneClearEnemyMercs) { return "PushLaneClearEnemyMercs"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneNearActiveObelisk) { return "PushLaneNearActiveObelisk"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_CustomMapLow) { return "CustomMapLow"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_TakeCampMoveToCampOnlyAI) { return "TakeCampMoveToCampOnlyAI"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_GenericPreformTeamStrategy) { return "GenericPreformTeamStrategy"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneInMinionBattle) { return "PushLaneInMinionBattle"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneChangingLanes) { return "PushLaneChangingLanes"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_CaptureWatchTowerAnyState) { return "CaptureWatchTowerAnyState"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_PushLaneNormalLogic) { return "PushLaneNormalLogic"; }
    else if (lp_val == libAIAI_ge_HeroAIPriority_Idle) { return "Idle"; }
    return null;
}

string libAIAI_ge_HeroAIStates_Ident (int lp_val) {
         if (lp_val == libAIAI_ge_HeroAIStates_HSUnused) { return "HSUnused"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSDead) { return "HSDead"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSAfterDeathAttack) { return "HSAfterDeathAttack"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSAfterDeathHeal) { return "HSAfterDeathHeal"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSReturnToSpawn) { return "HSReturnToSpawn"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSWaitForGameToStart) { return "HSWaitForGameToStart"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSWaitToHeal) { return "HSWaitToHeal"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSWaitInSpawn) { return "HSWaitInSpawn"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSAdvance) { return "HSAdvance"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSRetreat) { return "HSRetreat"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSAvoidAOE) { return "HSAvoidAOE"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSCastTactical) { return "HSCastTactical"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSMinionBattleRetreat) { return "HSMinionBattleRetreat"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSMinionBattleReposition) { return "HSMinionBattleReposition"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSMinionBattleAttack) { return "HSMinionBattleAttack"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSMinionBattleHarass) { return "HSMinionBattleHarass"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSHarassSiegeEnemy) { return "HSHarassSiegeEnemy"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSWaitForMinions) { return "HSWaitForMinions"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSReturnToLane) { return "HSReturnToLane"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSPickUpHealthGlobeJungle) { return "HSPickUpHealthGlobeJungle"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSFocusHero) { return "HSFocusHero"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSFocusCore) { return "HSFocusCore"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSDefendCoreAttack) { return "HSDefendCoreAttack"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSDefendCoreLeash) { return "HSDefendCoreLeash"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSVehicleReturnToLane) { return "HSVehicleReturnToLane"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSVehicleAdvanceInLane) { return "HSVehicleAdvanceInLane"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSCaptureWatchTower) { return "HSCaptureWatchTower"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSPortHomeLane) { return "HSPortHomeLane"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSDrinkMoonwell) { return "HSDrinkMoonwell"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSTearOfEluneMoveToTear) { return "HSTearOfEluneMoveToTear"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSTearOfEluneCapture) { return "HSTearOfEluneCapture"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSTearOfEluneGuard) { return "HSTearOfEluneGuard"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSTearOfEluneDefend) { return "HSTearOfEluneDefend"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSMCampInit) { return "HSMCampInit"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSMoveToCamp) { return "HSMoveToCamp"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSWaitAtCamp) { return "HSWaitAtCamp"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSAttackSoloCamp) { return "HSAttackSoloCamp"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSCaptureCampBeacon) { return "HSCaptureCampBeacon"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSDefendCampAttack) { return "HSDefendCampAttack"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSDefendCampLeash) { return "HSDefendCampLeash"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSFleeInJungle) { return "HSFleeInJungle"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSPortHomeJungle) { return "HSPortHomeJungle"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSHarassInJungle) { return "HSHarassInJungle"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSPaceAround) { return "HSPaceAround"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSObeliskCapture) { return "HSObeliskCapture"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSDragonHarass) { return "HSDragonHarass"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSDragonCapture) { return "HSDragonCapture"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSFollowerGuardLeader) { return "HSFollowerGuardLeader"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSFollowerGuardLeaderLeash) { return "HSFollowerGuardLeaderLeash"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSUnderworldEnter) { return "HSUnderworldEnter"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSUnderworldKillMinions) { return "HSUnderworldKillMinions"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSUnderworldFocusHero) { return "HSUnderworldFocusHero"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSUnderworldPickupSkull) { return "HSUnderworldPickupSkull"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSUnderworldMoveToExit) { return "HSUnderworldMoveToExit"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSUnderworldTeleportHome) { return "HSUnderworldTeleportHome"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSUnderworldExit) { return "HSUnderworldExit"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSAbathurAdvanceInLane) { return "HSAbathurAdvanceInLane"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSAbathurRetreatInLane) { return "HSAbathurRetreatInLane"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSAbathurHideInTown) { return "HSAbathurHideInTown"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSAbathurChangeLanes) { return "HSAbathurChangeLanes"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSEnterTransport) { return "HSEnterTransport"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSCustomMapState) { return "HSCustomMapState"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSDefendObjective) { return "HSDefendObjective"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSObjectiveStaging) { return "HSObjectiveStaging"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSBusy) { return "HSBusy"; }
    else if (lp_val == libAIAI_ge_HeroAIStates_HSDefault) { return "HSDefault"; }
    return null;
}

// Functions
int libAIAI_gf_MinionAINewMinionIndex () {
    int autoA2EF3213_ae;
    int autoA2EF3213_ai;

    // Variable Declarations
    int lv_minionIndex;

    // Variable Initialization

    // Implementation
    autoA2EF3213_ae = libAIAI_gv_minionAIMaxActiveMinions_C;
    autoA2EF3213_ai = 1;
    lv_minionIndex = 1;
    for ( ; ( (autoA2EF3213_ai >= 0 && lv_minionIndex <= autoA2EF3213_ae) || (autoA2EF3213_ai <= 0 && lv_minionIndex >= autoA2EF3213_ae) ) ; lv_minionIndex += autoA2EF3213_ai ) {
        if ((libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_isAlive == false)) {
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_isAlive = true;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_state = libAIAI_ge_MinionAIStates_Advancing;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_nextWaypoint = 0;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_unitPosition = null;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_targetUnit = null;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_leashing = false;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_forceStateTransition = false;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_battleStandardPoint = null;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_battleStandardLastUpdate = 0.0;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_ownerPlayer = 0;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_teamToAttack = 0;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_lane = 0;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_minionUnit = null;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_minionUnitType = null;
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_initialWaypoint = 0;
            libAIAI_gv_minionAIActiveMinionsUpperBound = MaxI(lv_minionIndex, libAIAI_gv_minionAIActiveMinionsUpperBound);
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_prefersStructureTargets = false;
            return lv_minionIndex;
        }

    }
    return (libAIAI_gv_minionAIMaxActiveMinions_C + 1);
}

point libAIAI_gf_MinionAIGetPreviousWaypointForMinionIndex (int lp_minionIndex) {
    // Implementation
    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_teamToAttack == libGame_gv_teamChaosIndex_C)) {
        return libAIAI_gf_MinionAIGetWaypointForMinionIndex(lp_minionIndex, (libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_nextWaypoint - 1));
    }
    else {
        return libAIAI_gf_MinionAIGetWaypointForMinionIndex(lp_minionIndex, (libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_nextWaypoint + 1));
    }
}

int libAIAI_gf_MinionAIGetWaypointCountForMinionIndex (int lp_minionIndex) {
    // Variable Declarations
    int lv_itWp;
    point lv_wp;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane > 0)) {
        return libGame_gv_laneData[libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane].lv_waypointCount;
    }

    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane == libGame_gv_laneCustomLane)) {
        lv_itWp = 0;
        while (true) {
            lv_itWp += 1;
            lv_wp = libAIAI_gf_MinionAIGetWaypointForMinionIndex(lp_minionIndex, lv_itWp);
            if ((lv_wp == null)) {
                return (lv_itWp - 1);
            }

        }
    }

    return 0;
}

point libAIAI_gf_MinionAIGetWaypointForMinionIndex (int lp_minionIndex, int lp_waypointIndex) {
    // Implementation
    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane > 0)) {
        return libGame_gv_laneData[libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane].lv_waypoints[lp_waypointIndex];
    }

    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane == libGame_gv_laneCustomLane)) {
        return libCore_gf_PointStoredForUnit(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, lp_waypointIndex);
    }

    return null;
}

point libAIAI_gf_MinionAIGetNextWaypointForMinionIndex (int lp_minionIndex) {
    // Implementation
    return libAIAI_gf_MinionAIGetWaypointForMinionIndex(lp_minionIndex, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_nextWaypoint);
}

unit libAIAI_gf_MinionAIGetHeroToFollowForMinionIndex (int lp_minionIndex) {
    // Variable Declarations
    int lv_owningPlayer;

    // Variable Initialization

    // Implementation
    if ((UnitGetOwner(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit) <= libCore_gv_bALMaxPlayers)) {
        lv_owningPlayer = UnitGetOwner(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit);
        if ((UnitIsValid(libGame_gv_players[lv_owningPlayer].lv_activeVehicle) == true)) {
            return libGame_gv_players[lv_owningPlayer].lv_activeVehicle;
        }
        else {
            if ((UnitIsValid(libAIAI_gv_aIHeroes[lv_owningPlayer].lv_currentHeroUnit) == true)) {
                return libAIAI_gv_aIHeroes[lv_owningPlayer].lv_currentHeroUnit;
            }

        }
    }

    return null;
}

bool libAIAI_gf_MinionAIIsValidTargetForMinionIndex (int lp_minionIndex, unit lp_targetUnit) {
    // Variable Declarations
    order lv_order;

    // Variable Initialization

    // Implementation
    lv_order = OrderTargetingUnit(libAIAI_gv_aIAttackAllyAbil, lp_targetUnit);
    if ((UnitOrderIsValid(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, lv_order) == true)) {
        return true;
    }
    else {
        return false;
    }
}

unit libAIAI_gf_MinionAIGetNearestEnemyMinionSummonedInRangeOfMinion (int lp_minionIndex, fixed lp_range) {
    // Variable Declarations
    unitgroup lv_enemyMinions;
    unitgroup lv_enemySummoned;
    unit lv_enemyMinion;

    // Variable Initialization

    // Implementation
    lv_enemyMinions = UnitGroupSearch(null, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition, lp_range, libAIAI_gv_uF_MinionAI_AnyEnemyMinions, 0);
    lv_enemySummoned = UnitGroupSearch(null, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition, lp_range, libAIAI_gv_uF_MinionAI_AnyEnemySummoned, 0);
    UnitGroupAddUnitGroup(lv_enemyMinions, lv_enemySummoned);
    lv_enemyMinion = UnitGroupClosestToPoint(lv_enemyMinions, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition);
    if ((UnitIsAlive(lv_enemyMinion) == true) && (libAIAI_gf_MinionAIIsValidTargetForMinionIndex(lp_minionIndex, lv_enemyMinion) == true) && (libAIAI_gf_AIIsPointBehindEnemyGateEstimate(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer, UnitGetPosition(lv_enemyMinion)) == false)) {
        return lv_enemyMinion;
    }

    return null;
}

unit libAIAI_gf_MinionAIGetNearestEnemyStructureInRangeOfMinion (int lp_minionIndex, fixed lp_range) {
    unitgroup auto8B70D728_g;
    int auto8B70D728_u;

    // Variable Declarations
    point lv_minionPosition;
    unit lv_u;
    unitgroup lv_nearbyAttackableStructues;
    unitgroup lv_nearbyInvalidStructures;
    int lv_townIndex;

    // Variable Initialization
    lv_nearbyInvalidStructures = UnitGroupEmpty();

    // Implementation
    lv_minionPosition = libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition;
    lv_nearbyAttackableStructues = UnitGroupSearch(null, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer, lv_minionPosition, lp_range, libAIAI_gv_uF_MinionAI_GetNearestEnemyStructure, 0);
    auto8B70D728_g = lv_nearbyAttackableStructues;
    auto8B70D728_u = 1;
    for ( ; auto8B70D728_u <= UnitGroupCount(auto8B70D728_g, c_unitCountAll) ; auto8B70D728_u += (lv_u == UnitGroupUnit(auto8B70D728_g, auto8B70D728_u)) ) {
        lv_u = UnitGroupUnit(auto8B70D728_g, auto8B70D728_u);
        lv_townIndex = libGame_gf_TownGetTownForUnit(lv_u);
        if (((UnitHasBehavior2(lv_u, "CoreInvulnerability") == true) || (UnitHasBehavior2(lv_u, "RagnarosMoltenCoreStructureStasis") == true))) {
            UnitGroupRemove(lv_nearbyAttackableStructues, lv_u);
            continue;
        }

        if ((lv_townIndex > 0) && (libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane > 0) && (libGame_gv_townTownData[lv_townIndex].lv_lane != libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane) && (libAIAI_gv_minionAIMinionsIgnoreLaneRequirements == false)) {
            UnitGroupRemove(lv_nearbyAttackableStructues, lv_u);
        }
        else {
            if ((lv_townIndex <= 0) && (lv_u != libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core) && (lv_u != libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core) && (UnitFilterMatch(lv_u, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer, libCore_gv_filtersHeroic) == false) && (UnitHasBehavior2(lv_u, "MinionAIAttackableStructureNotPartOfDefinedTown") == false)) {
                UnitGroupRemove(lv_nearbyAttackableStructues, lv_u);
            }
            else {
                if (((UnitFilterMatch(lv_u, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer, libAIAI_gv_uF_MinionAI_GetNearestAttackableEnemyStructure) == false) || (libAIAI_gf_MinionAIIsValidTargetForMinionIndex(lp_minionIndex, lv_u) == false))) {
                    UnitGroupRemove(lv_nearbyAttackableStructues, lv_u);
                    UnitGroupAdd(lv_nearbyInvalidStructures, lv_u);
                }

            }
        }
    }
    lv_u = UnitGroupClosestToPoint(lv_nearbyAttackableStructues, lv_minionPosition);
    if ((lv_u == null)) {
        lv_u = UnitGroupClosestToPoint(lv_nearbyInvalidStructures, lv_minionPosition);
    }

    return lv_u;
}

unit libAIAI_gf_MinionAIGetNearestEnemyHeroInRangeOfMinion (int lp_minionIndex, fixed lp_range) {
    unitgroup autoD6362878_g;
    int autoD6362878_u;

    // Variable Declarations
    point lv_minionPosition;
    unit lv_hero;
    unitgroup lv_scanGroup;
    fixed lv_minionDistancetoLane;
    unitgroup lv_enemySummoned;
    fixed lv_enemyHeroDistancetoLane;

    // Variable Initialization

    // Implementation
    lv_minionPosition = libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition;
    lv_scanGroup = UnitGroupSearch(null, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer, lv_minionPosition, lp_range, libAIAI_gv_uF_MinionAI_GetNearestEnemyHero, 0);
    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_leashing == true)) {
        libAIAI_gf_MinionAIUpdateBattleStandardDataForMinion(lp_minionIndex);
        lv_minionDistancetoLane = DistanceBetweenPoints(lv_minionPosition, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardPoint);
    }

    autoD6362878_g = lv_scanGroup;
    autoD6362878_u = 1;
    for ( ; autoD6362878_u <= UnitGroupCount(autoD6362878_g, c_unitCountAll) ; autoD6362878_u += (lv_hero == UnitGroupUnit(autoD6362878_g, autoD6362878_u)) ) {
        lv_hero = UnitGroupUnit(autoD6362878_g, autoD6362878_u);
        if ((libAIAI_gf_MinionAIIsValidTargetForMinionIndex(lp_minionIndex, lv_hero) == false)) {
            UnitGroupRemove(lv_scanGroup, lv_hero);
        }
        else {
            if ((UnitFilterMatch(lv_hero, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer, UnitFilter(0, (1 << (c_targetFilterPassive - 32)), 0, 0)) == true) && (UnitHasBehavior2(lv_hero, "Mounted") == false) && (UnitHasBehavior2(lv_hero, "MountedFlyer") == false)) {
                UnitGroupRemove(lv_scanGroup, lv_hero);
            }
            else {
                if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_leashing == true) && (UnitInRangeAndAbleToAttackTarget(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, lv_hero) == false)) {
                    lv_enemyHeroDistancetoLane = DistanceBetweenPoints(UnitGetPosition(lv_hero), libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardPoint);
                    if ((lv_enemyHeroDistancetoLane >= lv_minionDistancetoLane)) {
                        UnitGroupRemove(lv_scanGroup, lv_hero);
                    }

                }

            }
        }
    }
    return UnitGroupClosestToPoint(lv_scanGroup, lv_minionPosition);
}

bool libAIAI_gf_MinionAIWithinLeashingDistanceofLane (int lp_minionIndex) {
    // Variable Declarations
    fixed lv_distanceToBattleStandard;

    // Variable Initialization

    // Implementation
    libAIAI_gf_MinionAIUpdateBattleStandardDataForMinion(lp_minionIndex);
    lv_distanceToBattleStandard = DistanceBetweenPoints(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardPoint);
    if ((lv_distanceToBattleStandard <= libAIAI_gv_aIMinionLeashingOffDistance)) {
        return true;
    }
    else {
        return false;
    }
}

void libAIAI_gf_MinionAIUpdateBattleStandardDataForMinion (int lp_minionIndex) {
    // Variable Declarations
    fixed lv_missionTime;
    point lv_minionPosition;
    point lv_nextWaypoint;
    point lv_previousWaypoint;
    fixed lv_distanceBetweenWaypoints;
    fixed lv_angleBetweenPreviousPointandMinionPosition;
    fixed lv_battleStandardDistance;

    // Variable Initialization

    // Implementation
    if ((libGame_gf_LaneIndexIsValid(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane) == false)) {
        return ;
    }

    lv_missionTime = GameGetMissionTime();
    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardLastUpdate >= lv_missionTime)) {
        return ;
    }

    lv_minionPosition = libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition;
    lv_nextWaypoint = libAIAI_gf_MinionAIGetNextWaypointForMinionIndex(lp_minionIndex);
    lv_previousWaypoint = libAIAI_gf_MinionAIGetPreviousWaypointForMinionIndex(lp_minionIndex);
    lv_distanceBetweenWaypoints = DistanceBetweenPoints(lv_previousWaypoint, lv_nextWaypoint);
    lv_angleBetweenPreviousPointandMinionPosition = (AngleBetweenPoints(lv_previousWaypoint, lv_minionPosition) - AngleBetweenPoints(lv_previousWaypoint, lv_nextWaypoint));
    lv_battleStandardDistance = (Cos(lv_angleBetweenPreviousPointandMinionPosition) * DistanceBetweenPoints(lv_previousWaypoint, lv_minionPosition));
    if ((lv_battleStandardDistance < 0.0)) {
        lv_battleStandardDistance = 0.0;
    }

    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardPoint = libNtve_gf_PointOffsetTowardsPoint(lv_previousWaypoint, lv_battleStandardDistance, lv_nextWaypoint);
    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardLastUpdate = lv_missionTime;
}

bool libAIAI_gf_MinionAITestPastNextWaypoint (int lp_minionIndex) {
    // Variable Declarations
    point lv_minionPosition;
    point lv_nextWaypoint;
    point lv_previousWaypoint;

    // Variable Initialization

    // Implementation
    lv_minionPosition = libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition;
    lv_nextWaypoint = libAIAI_gf_MinionAIGetNextWaypointForMinionIndex(lp_minionIndex);
    lv_previousWaypoint = libAIAI_gf_MinionAIGetPreviousWaypointForMinionIndex(lp_minionIndex);
    return (DistanceSquaredBetweenPoints(lv_minionPosition, lv_previousWaypoint) >= (DistanceSquaredBetweenPoints(lv_minionPosition, lv_nextWaypoint) + DistanceSquaredBetweenPoints(lv_previousWaypoint, lv_nextWaypoint)));
}

void libAIAI_gf_MinionAIAdvanceMinionToNextWaypoint (int lp_minionIndex) {
    // Variable Declarations
    int lv_mercGroupIndex;
    int lv_nextWaypoint;
    int lv_waypointCount;

    // Variable Initialization

    // Implementation
    lv_nextWaypoint = libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_nextWaypoint;
    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardPoint = libAIAI_gf_MinionAIGetNextWaypointForMinionIndex(lp_minionIndex);
    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardLastUpdate = GameGetMissionTime();
    lv_waypointCount = libAIAI_gf_MinionAIGetWaypointCountForMinionIndex(lp_minionIndex);
    if ((libCore_gv_mAPUsesCirclingAI == false)) {
        if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_teamToAttack == libGame_gv_teamChaosIndex_C)) {
            if (((lv_nextWaypoint < (lv_waypointCount - 2)) || ((lv_nextWaypoint == (lv_waypointCount - 2)) && (UnitHasBehavior2(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core, "CoreInvulnerability") == false)))) {
                lv_nextWaypoint += 1;
                libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_nextWaypoint = lv_nextWaypoint;
            }

        }
        else {
            if ((lv_nextWaypoint == 0)) {
                libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_nextWaypoint = lv_waypointCount;
            }
            else {
                if (((lv_nextWaypoint > 3) || ((lv_nextWaypoint == 3) && (UnitHasBehavior2(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core, "CoreInvulnerability") == false)))) {
                    lv_nextWaypoint -= 1;
                    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_nextWaypoint = lv_nextWaypoint;
                }
            }
        }
    }
    else {
        if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_teamToAttack == libGame_gv_teamChaosIndex_C)) {
            if ((lv_nextWaypoint < (lv_waypointCount - libCore_gv_mAPPathNodesBeforeLooping))) {
                lv_nextWaypoint += 1;
                libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_nextWaypoint = lv_nextWaypoint;
            }
            else {
                libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_teamToAttack = 1;
                if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane == 3)) {
                    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane = 1;
                }
                else if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane == 1)) {
                    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane = 3;
                }
                else if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane == 2)) {
                    if ((ModI(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_waveNumber, 2) == 0)) {
                        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane = 3;
                    }
                    else {
                        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane = 1;
                    }
                }
                lv_waypointCount = libAIAI_gf_MinionAIGetWaypointCountForMinionIndex(lp_minionIndex);
                libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_nextWaypoint = (lv_waypointCount - 1);
                libAIAI_gf_MinionAIAdvanceMinionToNextWaypoint(lp_minionIndex);
            }
        }
        else {
            if ((lv_nextWaypoint == 0)) {
                libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_nextWaypoint = lv_waypointCount;
            }
            else {
                if ((lv_nextWaypoint > (libCore_gv_mAPPathNodesBeforeLooping + 1))) {
                    lv_nextWaypoint -= 1;
                    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_nextWaypoint = lv_nextWaypoint;
                }
                else {
                    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_teamToAttack = 2;
                    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane == 3)) {
                        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane = 1;
                    }
                    else if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane == 1)) {
                        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane = 3;
                    }
                    else if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane == 2)) {
                        if ((ModI(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_waveNumber, 2) == 0)) {
                            libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane = 3;
                        }
                        else {
                            libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane = 1;
                        }
                    }
                    libAIAI_gf_MinionAIAdvanceMinionToNextWaypoint(lp_minionIndex);
                }
            }
        }
    }
    lv_mercGroupIndex = libMapM_gf_JungleGetMercLanerGroupForUnit(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit);
    if ((lv_mercGroupIndex != 0)) {
        libMapM_gf_JungleCreateMercPath(libMapM_gv_jungleMiniMapLeader[lv_mercGroupIndex], false);
    }

}

int libAIAI_gf_MinionAIDetermineState (int lp_minionIndex, int lp_oldState, order lp_minionOrder) {
    int auto11561EA4_val;

    // Variable Declarations
    fixed lv_distanceToBattleStandard;
    unit lv_heroToFollow;
    int lv_attackState;

    // Variable Initialization

    // Implementation
    auto11561EA4_val = lp_oldState;
    if (auto11561EA4_val == libAIAI_ge_MinionAIStates_Advancing) {
        lv_attackState = libAIAI_gf_MinionAIDetermineAttackStateAndTarget(lp_minionIndex, lp_minionOrder);
        return lv_attackState;
    }
    else if (auto11561EA4_val == libAIAI_ge_MinionAIStates_AttackingMinions) {
        lv_attackState = libAIAI_gf_MinionAIDetermineAttackStateAndTarget(lp_minionIndex, lp_minionOrder);
        return lv_attackState;
    }
    else if (auto11561EA4_val == libAIAI_ge_MinionAIStates_AttackingStructure) {
        lv_attackState = libAIAI_gf_MinionAIDetermineAttackStateAndTarget(lp_minionIndex, lp_minionOrder);
        return lv_attackState;
    }
    else if (auto11561EA4_val == libAIAI_ge_MinionAIStates_AttackingHero) {
        lv_attackState = libAIAI_gf_MinionAIDetermineAttackStateAndTarget(lp_minionIndex, lp_minionOrder);
        return lv_attackState;
    }
    else if (auto11561EA4_val == libAIAI_ge_MinionAIStates_FollowHero) {
        if ((libGame_gf_LaneIndexIsValid(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane) == true) && ((PointPathingIsConnected(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition, libAIAI_gf_MinionAIGetNextWaypointForMinionIndex(lp_minionIndex)) == true) || (libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ignoresPathing == true))) {
            return libAIAI_ge_MinionAIStates_Advancing;
        }

        lv_heroToFollow = libAIAI_gf_MinionAIGetHeroToFollowForMinionIndex(lp_minionIndex);
        if (((UnitIsValid(lv_heroToFollow) == false) || ((PointPathingIsConnected(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition, UnitGetPosition(lv_heroToFollow)) == false) || (libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ignoresPathing == true)))) {
            return libAIAI_ge_MinionAIStates_HoldPosition;
        }

    }
    else if (auto11561EA4_val == libAIAI_ge_MinionAIStates_HoldPosition) {
        if ((libGame_gf_LaneIndexIsValid(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane) == true) && ((PointPathingIsConnected(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition, libAIAI_gf_MinionAIGetNextWaypointForMinionIndex(lp_minionIndex)) == true) || (libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ignoresPathing == true))) {
            return libAIAI_ge_MinionAIStates_Advancing;
        }

        lv_heroToFollow = libAIAI_gf_MinionAIGetHeroToFollowForMinionIndex(lp_minionIndex);
        if ((UnitIsValid(lv_heroToFollow) == true) && ((PointPathingIsConnected(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition, UnitGetPosition(lv_heroToFollow)) == true) || (libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ignoresPathing == true))) {
            return libAIAI_ge_MinionAIStates_FollowHero;
        }

    }
    else {
    }
    return lp_oldState;
}

int libAIAI_gf_MinionAIDetermineAttackStateAndTarget (int lp_minionIndex, order lp_minionOrder) {
    // Variable Declarations
    unit lv_currentTarget;

    // Variable Initialization

    // Implementation
    if ((lp_minionOrder != null) && ((OrderGetAbilityCommand(lp_minionOrder) == libAIAI_gv_aIAttackAbil) || (OrderGetAbilityCommand(lp_minionOrder) == libAIAI_gv_aIAttackAllyAbil)) && (OrderGetTargetType(lp_minionOrder) == c_orderTargetUnit)) {
        lv_currentTarget = OrderGetTargetUnit(lp_minionOrder);
    }

    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_prefersHeroTargets == true)) {
        if ((libAIAI_gf_MinionAIShouldAttackHero(lp_minionIndex, lv_currentTarget) == true)) {
            return libAIAI_ge_MinionAIStates_AttackingHero;
        }
        else if ((libAIAI_gf_MinionAIShouldAttackMinions(lp_minionIndex, lv_currentTarget) == true)) {
            return libAIAI_ge_MinionAIStates_AttackingMinions;
        }
        if ((libAIAI_gf_MinionAIShouldAttackStructure(lp_minionIndex, lv_currentTarget) == true)) {
            return libAIAI_ge_MinionAIStates_AttackingStructure;
        }
        else {
            return libAIAI_ge_MinionAIStates_Advancing;
        }
    }
    else if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_prefersStructureTargets == true)) {
        if ((libAIAI_gf_MinionAIShouldAttackStructure(lp_minionIndex, lv_currentTarget) == true)) {
            return libAIAI_ge_MinionAIStates_AttackingStructure;
        }
        else {
            if ((libAIAI_gf_MinionAIShouldAttackMinions(lp_minionIndex, lv_currentTarget) == true)) {
                return libAIAI_ge_MinionAIStates_AttackingMinions;
            }
            else {
                return libAIAI_gf_MinionAIAttackHeroState(lp_minionIndex, lv_currentTarget);
            }
        }
    }
    if ((libAIAI_gf_MinionAIShouldAttackMinions(lp_minionIndex, lv_currentTarget) == true)) {
        return libAIAI_ge_MinionAIStates_AttackingMinions;
    }
    else {
        if ((libAIAI_gf_MinionAIShouldAttackStructure(lp_minionIndex, lv_currentTarget) == true)) {
            return libAIAI_ge_MinionAIStates_AttackingStructure;
        }
        else {
            return libAIAI_gf_MinionAIAttackHeroState(lp_minionIndex, lv_currentTarget);
        }
    }
}

bool libAIAI_gf_MinionAIShouldAttackMinions (int lp_minionIndex, unit lp_currentTarget) {
    // Variable Declarations
    unit lv_targetMinion;
    fixed lv_pathingCostToBattleStandard;

    // Variable Initialization

    // Implementation
    if ((UnitIsValid(lp_currentTarget) == true) && (libGame_gf_LaneIndexIsValid(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane) == true) && (libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_leashing == false)) {
        libAIAI_gf_MinionAIUpdateBattleStandardDataForMinion(lp_minionIndex);
        lv_pathingCostToBattleStandard = IntToFixed(PointPathingCost(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardPoint));
        if ((lv_pathingCostToBattleStandard >= libAIAI_gv_aIMaxPathDistance)) {
            lv_pathingCostToBattleStandard = DistanceBetweenPoints(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardPoint);
        }

        if ((lv_pathingCostToBattleStandard >= libAIAI_gv_aIMinionLeashingOnDistance)) {
            lv_targetMinion = null;
            libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_leashing = true;
            libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_forceStateTransition = true;
            return false;
        }

    }

    if ((UnitIsValid(lp_currentTarget) == true) && ((UnitTypeTestAttribute(UnitGetType(lp_currentTarget), c_unitAttributeBiological) == true) || (UnitTypeTestAttribute(UnitGetType(lp_currentTarget), c_unitAttributeSummoned) == true) || (UnitTypeTestAttribute(UnitGetType(lp_currentTarget), c_unitAttributeLight) == true)) && (UnitInRangeAndAbleToAttackTarget(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, lp_currentTarget) == true)) {
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit = lp_currentTarget;
        return true;
    }

    lv_targetMinion = libAIAI_gf_MinionAIGetNearestEnemyMinionSummonedInRangeOfMinion(lp_minionIndex, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_attackRange);
    if ((UnitIsAlive(lv_targetMinion) == true)) {
        if ((lp_currentTarget != lv_targetMinion)) {
            libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_forceStateTransition = true;
        }

        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit = lv_targetMinion;
        return true;
    }

    if ((UnitIsValid(lp_currentTarget) == true) && ((UnitTypeTestAttribute(UnitGetType(lp_currentTarget), c_unitAttributeBiological) == true) || (UnitTypeTestAttribute(UnitGetType(lp_currentTarget), c_unitAttributeSummoned) == true) || (UnitTypeTestAttribute(UnitGetType(lp_currentTarget), c_unitAttributeLight) == true)) && (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit), UnitGetPosition(lp_currentTarget)) <= libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_attackRange) && (libAIAI_gf_AIIsPointBehindEnemyGateEstimate(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer, UnitGetPosition(lp_currentTarget)) == false)) {
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit = lp_currentTarget;
        return true;
    }

    return false;
}

bool libAIAI_gf_MinionAIShouldAttackStructure (int lp_minionIndex, unit lp_currentTarget) {
    // Variable Declarations
    unit lv_targetStructure;

    // Variable Initialization

    // Implementation
    if ((UnitIsValid(lp_currentTarget) == true) && (UnitFilterMatch(lp_currentTarget, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer, libAIAI_gv_uF_MinionAI_GetNearestAttackableEnemyStructure) == true) && (libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_attackRange > 0.0)) {
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit = lp_currentTarget;
        return true;
    }

    lv_targetStructure = libAIAI_gf_MinionAIGetNearestEnemyStructureInRangeOfMinion(lp_minionIndex, MaxF(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_attackRange, (libAIAI_gv_aIMinionEnemyMinionAttackRange + libAIAI_gv_aIMinionAttackStructureBonusScanRange)));
    if ((UnitIsAlive(lv_targetStructure) == true) && (libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_attackRange > 0.0)) {
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_forceStateTransition = true;
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit = lv_targetStructure;
        return true;
    }

    return false;
}

bool libAIAI_gf_MinionAIShouldAttackHero (int lp_minionIndex, unit lp_currentTarget) {
    // Variable Declarations
    unit lv_targetHero;
    fixed lv_searchRadius;
    unitgroup lv_blockingMinions;

    // Variable Initialization
    lv_blockingMinions = UnitGroupEmpty();

    // Implementation
    lv_searchRadius = (StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit), "Radius", c_playerAny)) + 1.0);
    if ((UnitIsValid(lp_currentTarget) == true) && (UnitFilterMatch(lp_currentTarget, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer, libAIAI_gv_uF_MinionAI_GetNearestEnemyHero) == true) && (libAIAI_gf_AIUnitBehindEnemyGateEstimate(UnitGetPosition(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit), UnitGetOwner(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit), lp_currentTarget) == false) && (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit), c_unitAllianceEnemy, RegionCircle(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit), lv_searchRadius, UnitGetPosition(lp_currentTarget)), lv_searchRadius), libCore_gv_filtersMinionsAllLaners, 0), c_unitCountAlive) <= 1)) {
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit = lp_currentTarget;
        return true;
    }

    lv_targetHero = libAIAI_gf_MinionAIGetNearestEnemyHeroInRangeOfMinion(lp_minionIndex, MaxF(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_attackRange, (libAIAI_gv_aIMinionEnemyMinionAttackRange + libAIAI_gv_aIMinionAttackStructureBonusScanRange)));
    if ((UnitIsAlive(lv_targetHero) == true) && (libAIAI_gf_AIUnitBehindEnemyGateEstimate(UnitGetPosition(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit), UnitGetOwner(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit), lv_targetHero) == false) && (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit), c_unitAllianceEnemy, RegionCircle(libNtve_gf_PointOffsetTowardsPoint(UnitGetPosition(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit), lv_searchRadius, UnitGetPosition(lv_targetHero)), lv_searchRadius), libCore_gv_filtersMinionsAllLaners, 0), c_unitCountAlive) <= 1)) {
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_forceStateTransition = true;
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit = lv_targetHero;
        return true;
    }

    return false;
}

int libAIAI_gf_MinionAIAttackHeroState (int lp_minionIndex, unit lp_currentTarget) {
    // Variable Declarations
    point lv_minionPosition;
    fixed lv_pathingCostToBattleStandard;
    unit lv_targetHero;
    unit lv_heroToFollow;

    // Variable Initialization

    // Implementation
    lv_minionPosition = libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_unitPosition;
    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_leashing == false) && (UnitIsValid(lp_currentTarget) == true) && (UnitFilterMatch(lp_currentTarget, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer, libAIAI_gv_uF_MinionAI_GetNearestEnemyHero) == true) && (DistanceBetweenPoints(lv_minionPosition, UnitGetPosition(lp_currentTarget)) < (libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_attackHeroRange + libAIAI_gv_aIMinionAttackHeroBufferDistance))) {
        lv_targetHero = lp_currentTarget;
    }
    else {
        lv_targetHero = libAIAI_gf_MinionAIGetNearestEnemyHeroInRangeOfMinion(lp_minionIndex, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_attackHeroRange);
    }
    if ((UnitIsValid(lv_targetHero) == true) && (libGame_gf_LaneIndexIsValid(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane) == true) && (libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_leashing == false)) {
        libAIAI_gf_MinionAIUpdateBattleStandardDataForMinion(lp_minionIndex);
        lv_pathingCostToBattleStandard = IntToFixed(PointPathingCost(lv_minionPosition, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardPoint));
        if ((lv_pathingCostToBattleStandard >= libAIAI_gv_aIMaxPathDistance)) {
            lv_pathingCostToBattleStandard = DistanceBetweenPoints(lv_minionPosition, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardPoint);
        }

        if ((lv_pathingCostToBattleStandard >= libAIAI_gv_aIMinionLeashingOnDistance)) {
            lv_targetHero = null;
            libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_leashing = true;
            libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_forceStateTransition = true;
        }

    }

    if ((UnitIsValid(lv_targetHero) == false)) {
        if ((libGame_gf_LaneIndexIsValid(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_lane) == true)) {
            if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_leashing == false) && (UnitIsValid(lp_currentTarget) == true) && (UnitTypeTestAttribute(UnitGetType(lp_currentTarget), c_unitAttributeHeroic) == true) && (libAIAI_gf_MinionAIWithinLeashingDistanceofLane(lp_minionIndex) == false)) {
                libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_leashing = true;
                libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_forceStateTransition = true;
            }

            return libAIAI_ge_MinionAIStates_Advancing;
        }
        else {
            lv_heroToFollow = libAIAI_gf_MinionAIGetHeroToFollowForMinionIndex(lp_minionIndex);
            if ((UnitIsValid(lv_heroToFollow) == true) && (PointPathingIsConnected(lv_minionPosition, UnitGetPosition(lv_heroToFollow)) == true)) {
                return libAIAI_ge_MinionAIStates_FollowHero;
            }

        }
        return libAIAI_ge_MinionAIStates_HoldPosition;
    }

    if ((lv_targetHero != lp_currentTarget)) {
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_forceStateTransition = true;
    }

    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit = lv_targetHero;
    return libAIAI_ge_MinionAIStates_AttackingHero;
}

void libAIAI_gf_MinionAITransitionMinionIntoState (int lp_minionIndex, int lp_state) {
    int auto4E1F7705_val;

    // Variable Declarations
    int lv_newState;
    point lv_previousWaypoint;
    point lv_nextWaypoint;
    unit lv_heroToFollow;
    point lv_heroPosition;
    point lv_offsetHeroPosition;
    order lv_heroOrder;

    // Variable Initialization

    // Implementation
    auto4E1F7705_val = lp_state;
    if (auto4E1F7705_val == libAIAI_ge_MinionAIStates_Advancing) {
        if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_leashing == true)) {
            UnitIssueOrder(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, OrderTargetingPoint(libAIAI_gv_aIMoveAbil, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_battleStandardPoint), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, OrderTargetingPoint(libAIAI_gv_aIAttackAllyAbil, libAIAI_gf_MinionAIGetNextWaypointForMinionIndex(lp_minionIndex)), c_orderQueueReplace);
        }
    }
    else if (auto4E1F7705_val == libAIAI_ge_MinionAIStates_AttackingMinions) {
        UnitIssueOrder(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, OrderTargetingUnit(libAIAI_gv_aIAttackAllyAbil, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit), c_orderQueueReplace);
    }
    else if (auto4E1F7705_val == libAIAI_ge_MinionAIStates_AttackingStructure) {
        if ((UnitFilterMatch(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_ownerPlayer, libAIAI_gv_uF_MinionAI_GetNearestAttackableEnemyStructure) == true) && (libAIAI_gf_MinionAIIsValidTargetForMinionIndex(lp_minionIndex, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit) == true)) {
            UnitIssueOrder(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, OrderTargetingUnit(libAIAI_gv_aIAttackAllyAbil, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit), c_orderQueueReplace);
        }
        else {
            if ((OrderGetAbilityCommand(UnitOrder(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, 0)) != AbilityCommand("move", 2))) {
                UnitIssueOrder(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, Order(AbilityCommand("move", 2)), c_orderQueueReplace);
            }

        }
    }
    else if (auto4E1F7705_val == libAIAI_ge_MinionAIStates_AttackingHero) {
        UnitIssueOrder(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, OrderTargetingUnit(libAIAI_gv_aIAttackAllyAbil, libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit), c_orderQueueReplace);
    }
    else if (auto4E1F7705_val == libAIAI_ge_MinionAIStates_FollowHero) {
        lv_heroToFollow = libAIAI_gf_MinionAIGetHeroToFollowForMinionIndex(lp_minionIndex);
        lv_heroPosition = UnitGetPosition(lv_heroToFollow);
        lv_heroOrder = UnitOrder(lv_heroToFollow, 0);
        if ((OrderGetAbilityCommand(UnitOrder(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, 0)) != libAIAI_gv_aIAttackAbil) && (OrderGetAbilityCommand(lv_heroOrder) == AbilityCommand("attack", 0))) {
            if ((UnitIsValid(OrderGetTargetUnit(lv_heroOrder)) == true)) {
                UnitIssueOrder(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, OrderTargetingUnit(libAIAI_gv_aIAttackAbil, OrderGetTargetUnit(lv_heroOrder)), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, OrderTargetingPoint(libAIAI_gv_aIAttackAbil, OrderGetTargetPosition(lv_heroOrder)), c_orderQueueReplace);
            }
        }
        else {
            if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit), lv_heroPosition) > 2.5)) {
                lv_offsetHeroPosition = libNtve_gf_PointOffsetTowardsPoint(lv_heroPosition, 2.0, UnitGetPosition(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit));
                UnitIssueOrder(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit, OrderTargetingPoint(libAIAI_gv_aIAttackAbil, lv_offsetHeroPosition), c_orderQueueReplace);
            }

        }
    }
    else if (auto4E1F7705_val == libAIAI_ge_MinionAIStates_HoldPosition) {
    }
    else {
    }
    if ((lp_state != libAIAI_ge_MinionAIStates_Advancing)) {
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_initialWaypoint = 0;
    }

}

int libAIAI_gf_MinionAIGetIndexForMinion (unit lp_minion) {
    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_minion, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_MinionIndex)));
}

point libAIAI_gf_MinionAIGetNextWaypointForMinion (unit lp_minion) {
    // Variable Declarations
    int lv_minionIndex;
    int lv_laneIndex;
    int lv_nextWaypointIndex;

    // Variable Initialization

    // Implementation
    lv_minionIndex = libAIAI_gf_MinionAIGetIndexForMinion(lp_minion);
    if ((lv_minionIndex > 0)) {
        return libAIAI_gf_MinionAIGetWaypointForMinionIndex(lv_minionIndex, libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_nextWaypoint);
    }

    lv_laneIndex = FixedToInt(UnitGetCustomValue(lp_minion, (libCore_ge_CustomValueIndexes_LaneIndex)));
    if ((lv_laneIndex > 0)) {
        lv_nextWaypointIndex = FixedToInt(UnitGetCustomValue(lp_minion, (libCore_ge_CustomValueIndexes_NextWaypointIndex)));
        return libGame_gv_laneData[lv_laneIndex].lv_waypoints[lv_nextWaypointIndex];
    }

    return null;
}

int libAIAI_gf_MinionAIGetNextWaypointIndexForMinion (unit lp_minion) {
    // Variable Declarations
    int lv_nextWaypoint;

    // Variable Initialization

    // Implementation
    lv_nextWaypoint = FixedToInt(UnitGetCustomValue(lp_minion, (libCore_ge_CustomValueIndexes_NextWaypointIndex)));
    if ((lv_nextWaypoint != 0)) {
        return lv_nextWaypoint;
    }

    return libAIAI_gv_minionAIActiveMinions[libAIAI_gf_MinionAIGetIndexForMinion(lp_minion)].lv_nextWaypoint;
}

int libAIAI_gf_MinionAIGetLaneForMinion (unit lp_minion) {
    // Variable Declarations
    int lv_lane;

    // Variable Initialization

    // Implementation
    lv_lane = FixedToInt(UnitGetCustomValue(lp_minion, (libCore_ge_CustomValueIndexes_LaneIndex)));
    if ((lv_lane != 0)) {
        return lv_lane;
    }
    else {
        return libAIAI_gv_minionAIActiveMinions[libAIAI_gf_MinionAIGetIndexForMinion(lp_minion)].lv_lane;
    }
}

int libAIAI_gf_MinionAIGetTeamToAttackForMinion (unit lp_minion) {
    // Variable Declarations
    int lv_minionIndex;

    // Variable Initialization

    // Implementation
    lv_minionIndex = libAIAI_gf_MinionAIGetIndexForMinion(lp_minion);
    if ((lv_minionIndex > 0)) {
        return libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_teamToAttack;
    }

    return libGame_gf_EnemyTeamNumberOfPlayer(UnitGetOwner(lp_minion));
}

int libAIAI_gf_MinionAIGetWaveNumberForMinion (int lp_minionIndex) {
    // Implementation
    return libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_waveNumber;
}

void libAIAI_gf_MinionAIFreeMinionIndex (int lp_minionIndex) {
    int autoA196110F_ae;
    int autoA196110F_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    if ((lp_minionIndex <= 0)) {
        return ;
    }

    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_isAlive = false;
    if ((lp_minionIndex == libAIAI_gv_minionAIActiveMinionsUpperBound)) {
        autoA196110F_ae = 1;
        autoA196110F_ai = -1;
        lv_i = (libAIAI_gv_minionAIActiveMinionsUpperBound - 1);
        for ( ; ( (autoA196110F_ai >= 0 && lv_i <= autoA196110F_ae) || (autoA196110F_ai <= 0 && lv_i >= autoA196110F_ae) ) ; lv_i += autoA196110F_ai ) {
            if ((libAIAI_gv_minionAIActiveMinions[lv_i].lv_isAlive == true)) {
                libAIAI_gv_minionAIActiveMinionsUpperBound = lv_i;
                break;
            }

        }
    }

}

void libAIAI_gf_MinionAIUnhookUnitFromMinionAI (unit lp_unit) {
    // Variable Declarations
    int lv_minionIndex;

    // Variable Initialization

    // Implementation
    if ((UnitDestroyAIThinkTree(lp_unit) == true)) {
        UnitIssueOrder(lp_unit, Order(libAIAI_gv_aIStopAbil), c_orderQueueReplace);
        return ;
    }

    lv_minionIndex = libAIAI_gf_MinionAIGetIndexForMinion(lp_unit);
    if ((lv_minionIndex <= 0)) {
        return ;
    }

    libAIAI_gf_MinionAIFreeMinionIndex(lv_minionIndex);
    UnitSetCustomValue(lp_unit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_MinionIndex), 0.0);
    UnitIssueOrder(lp_unit, Order(libAIAI_gv_aIStopAbil), c_orderQueueReplace);
}

void libAIAI_gf_MinionAIStartMinionAI (int lp_waveNumberOveride, unit lp_unit, int lp_lane, int lp_nextWaypoint, bool lp_pathToInitialWaypoint, bool lp_aggresiveLeashing, bool lp_ignoresPathing, int lp_teamToAttack, bool lp_prefersStructureTargets) {
    // Variable Declarations
    int lv_minionIndex;
    unit lv_heroToFollow;
    fixed lv_weaponRange;

    // Variable Initialization

    // Implementation
    if ((lp_unit == null)) {
        return ;
    }

    if (((UnitRestartAIThinkTree(lp_unit) == true) || (UnitCreateAIThinkTree(lp_unit) == true))) {
        UnitSetCustomValue(lp_unit, (libCore_ge_CustomValueIndexes_LaneIndex), lp_lane);
        UnitSetCustomValue(lp_unit, (libCore_ge_CustomValueIndexes_NextWaypointIndex), lp_nextWaypoint);
        return ;
    }
    else {
        if ((TimerGetRemaining(libAIAI_gv_minionAIDebugSpamTimer) > 0.0)) {
        }
        else {
            TextExpressionSetToken("Param/Expression/lib_AIAI_AA5C7EF7", "A", StringToText((UnitGetType(lp_unit))));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_AIAI_AA5C7EF7"), true);
            TimerStart(libAIAI_gv_minionAIDebugSpamTimer, 10.0, false, c_timeGame);
        }
    }
    libAIAI_gf_MinionAIUnhookUnitFromMinionAI(lp_unit);
    lv_minionIndex = libAIAI_gf_MinionAINewMinionIndex();
    if ((lv_minionIndex > libAIAI_gv_minionAIMaxActiveMinions_C)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_AIAI_EFC06AFC"), true);
        return ;
    }

    libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_minionUnit = lp_unit;
    UnitSetCustomValue(lp_unit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_MinionIndex), IntToFixed(lv_minionIndex));
    libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_minionUnitType = UnitGetType(lp_unit);
    libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_ownerPlayer = UnitGetOwner(lp_unit);
    libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_lane = lp_lane;
    libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_nextWaypoint = lp_nextWaypoint;
    libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_unitPosition = UnitGetPosition(lp_unit);
    libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_prefersStructureTargets = lp_prefersStructureTargets;
    libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_ignoresPathing = lp_ignoresPathing;
    lv_weaponRange = libAIAI_gf_AIGetAnyWeaponRangeIncludesNonActive(lp_unit);
    if ((lp_waveNumberOveride == -1)) {
        libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_waveNumber = libGame_gv_minionWaveSpawnCounter;
    }
    else {
        libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_waveNumber = lp_waveNumberOveride;
    }
    if ((lp_pathToInitialWaypoint == true)) {
        libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_initialWaypoint = lp_nextWaypoint;
    }
    else {
        libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_initialWaypoint = 0;
    }
    if ((lv_weaponRange < libAIAI_gv_aIMinionEnemyMinionAttackRange)) {
        libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_attackRange = libAIAI_gv_aIMinionEnemyMinionAttackRange;
    }
    else {
        libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_attackRange = lv_weaponRange;
    }
    libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_attackHeroRange = libAIAI_gv_aIMinionAttackHeroDistance;
    if (((lp_teamToAttack <= 0) || (lp_teamToAttack > libCore_gv_bALMaxTeams))) {
        libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_teamToAttack = libGame_gf_EnemyTeamNumberOfPlayer(libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_ownerPlayer);
        if ((libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_teamToAttack == 0)) {
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_teamToAttack = 1;
        }

    }
    else {
        libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_teamToAttack = lp_teamToAttack;
    }
    libAIAI_gf_MinionAIUpdateBattleStandardDataForMinion(lv_minionIndex);
    if ((lp_lane > 0) && ((PointPathingIsConnected(UnitGetPosition(lp_unit), libAIAI_gf_MinionAIGetNextWaypointForMinionIndex(lv_minionIndex)) == true) || (UnitMoverExists(lp_unit, "Fly") == true))) {
        libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_state = libAIAI_ge_MinionAIStates_Advancing;
        libAIAI_gf_MinionAITransitionMinionIntoState(lv_minionIndex, libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_state);
        return ;
    }

    lv_heroToFollow = libAIAI_gf_MinionAIGetHeroToFollowForMinionIndex(lv_minionIndex);
    if ((UnitIsValid(lv_heroToFollow) == true) && (PointPathingIsConnected(UnitGetPosition(lp_unit), UnitGetPosition(lv_heroToFollow)) == true)) {
        libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_state = libAIAI_ge_MinionAIStates_FollowHero;
        libAIAI_gf_MinionAITransitionMinionIntoState(lv_minionIndex, libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_state);
        return ;
    }

    libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_state = libAIAI_ge_MinionAIStates_HoldPosition;
    libAIAI_gf_MinionAITransitionMinionIntoState(lv_minionIndex, libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_state);
}

void libAIAI_gf_MinionAIStartMinionAIPriotizingHeroTargets (int lp_waveNumberOveride, unit lp_unit, int lp_lane, int lp_nextWaypoint, bool lp_pathToInitialWaypoint, bool lp_aggresiveLeashing, bool lp_ignoresPathing, int lp_teamToAttack, bool lp_prefersStructureTargets) {
    // Variable Declarations
    int lv_minionIndex;
    unit lv_heroToFollow;
    fixed lv_weaponRange;

    // Variable Initialization

    // Implementation
    if ((lp_unit == null)) {
        return ;
    }

    libAIAI_gf_MinionAIStartMinionAI(lp_waveNumberOveride, lp_unit, lp_lane, lp_nextWaypoint, lp_pathToInitialWaypoint, lp_aggresiveLeashing, lp_ignoresPathing, lp_teamToAttack, lp_prefersStructureTargets);
    libAIAI_gv_minionAIActiveMinions[libAIAI_gf_MinionAIGetIndexForMinion(lp_unit)].lv_prefersHeroTargets = true;
}

void libAIAI_gf_MinionAIStartMinionAISimple (unit lp_unit) {
    // Variable Declarations
    int lv_minionIndex;

    // Variable Initialization

    // Implementation
    libGame_gf_CalculateSpawnedMinionGoalPoints(UnitGetOwner(lp_unit), UnitGetPosition(lp_unit));
    libAIAI_gf_MinionAIStartMinionAI(-1, lp_unit, libGame_gv_spawnedMinionLane, libGame_gv_spawnedMinionFirstWaypointIndex, false, false, false, 0, false);
}

void libAIAI_gf_MinionAITurnMinionAISystemOnOff (bool lp_onOff) {
    int auto59C8C76E_ae;
    int auto59C8C76E_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    if ((lp_onOff == true)) {
        TriggerEnable(libAIAI_gt_MinionAIAIRoutine, true);
        TriggerEnable(libAIAI_gt_MinionAIUpdateMercPath, true);
    }
    else {
        TriggerEnable(libAIAI_gt_MinionAIAIRoutine, false);
        TriggerEnable(libAIAI_gt_MinionAIUpdateMercPath, false);
        auto59C8C76E_ae = libAIAI_gv_minionAIMaxActiveMinions_C;
        auto59C8C76E_ai = 1;
        lv_i = 1;
        for ( ; ( (auto59C8C76E_ai >= 0 && lv_i <= auto59C8C76E_ae) || (auto59C8C76E_ai <= 0 && lv_i >= auto59C8C76E_ae) ) ; lv_i += auto59C8C76E_ai ) {
            if ((libAIAI_gv_minionAIActiveMinions[lv_i].lv_isAlive == true)) {
                UnitRemove(libAIAI_gv_minionAIActiveMinions[lv_i].lv_minionUnit);
                libAIAI_gv_minionAIActiveMinions[lv_i].lv_isAlive = false;
            }

        }
        libAIAI_gv_minionAIActiveMinionsUpperBound = 0;
    }
}

void libAIAI_gf_MinionAIPauseUnpauseMinionAISystem (bool lp_pauseUnpause) {
    int autoC07AA3FF_ae;
    int autoC07AA3FF_ai;
    int autoD1EAA4C0_ae;
    int autoD1EAA4C0_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    if ((lp_pauseUnpause == true)) {
        TriggerEnable(libAIAI_gt_MinionAIAIRoutine, false);
        TriggerEnable(libAIAI_gt_MinionAIUpdateMercPath, false);
        autoD1EAA4C0_ae = libAIAI_gv_minionAIMaxActiveMinions_C;
        autoD1EAA4C0_ai = 1;
        lv_i = 1;
        for ( ; ( (autoD1EAA4C0_ai >= 0 && lv_i <= autoD1EAA4C0_ae) || (autoD1EAA4C0_ai <= 0 && lv_i >= autoD1EAA4C0_ae) ) ; lv_i += autoD1EAA4C0_ai ) {
            if ((libAIAI_gv_minionAIActiveMinions[lv_i].lv_isAlive == true)) {
                libNtve_gf_PauseUnit(libAIAI_gv_minionAIActiveMinions[lv_i].lv_minionUnit, true);
            }

        }
    }
    else {
        autoC07AA3FF_ae = libAIAI_gv_minionAIMaxActiveMinions_C;
        autoC07AA3FF_ai = 1;
        lv_i = 1;
        for ( ; ( (autoC07AA3FF_ai >= 0 && lv_i <= autoC07AA3FF_ae) || (autoC07AA3FF_ai <= 0 && lv_i >= autoC07AA3FF_ae) ) ; lv_i += autoC07AA3FF_ai ) {
            if ((libAIAI_gv_minionAIActiveMinions[lv_i].lv_isAlive == true)) {
                libNtve_gf_PauseUnit(libAIAI_gv_minionAIActiveMinions[lv_i].lv_minionUnit, false);
            }

        }
        TriggerEnable(libAIAI_gt_MinionAIAIRoutine, true);
        TriggerEnable(libAIAI_gt_MinionAIUpdateMercPath, true);
    }
}

void libAIAI_gf_MinionAIMinionsIgnoreLaneRequirements (bool lp_trueFalse) {
    // Implementation
    libAIAI_gv_minionAIMinionsIgnoreLaneRequirements = lp_trueFalse;
}

void libAIAI_gf_MinionAISetRangeToFindUnitsFrom (int lp_minionIndex, fixed lp_attackRange) {
    // Implementation
    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_attackRange = lp_attackRange;
    libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_attackHeroRange = lp_attackRange;
}

void libAIAI_gf_MinionAISetMinionTargetUnit (unit lp_minionUnit, unit lp_targetUnit) {
    // Implementation
    libAIAI_gv_minionAIActiveMinions[libAIAI_gf_MinionAIGetIndexForMinion(lp_minionUnit)].lv_targetUnit = lp_targetUnit;
}

bool libAIAI_gf_MinionAIIsUnitLaneTheSameAsOtherUnit (unit lp_unit1, unit lp_unit2) {
    // Variable Declarations
    int lv_unit1Lane;
    int lv_unit2Lane;

    // Variable Initialization

    // Implementation
    lv_unit1Lane = FixedToInt(UnitGetCustomValue(lp_unit1, (libCore_ge_CustomValueIndexes_LaneIndex)));
    lv_unit2Lane = FixedToInt(UnitGetCustomValue(lp_unit2, (libCore_ge_CustomValueIndexes_LaneIndex)));
    if ((lv_unit1Lane == 0)) {
        lv_unit1Lane = libAIAI_gv_minionAIActiveMinions[libAIAI_gf_MinionAIGetIndexForMinion(lp_unit1)].lv_lane;
    }

    if ((lv_unit2Lane == 0)) {
        lv_unit2Lane = libAIAI_gv_minionAIActiveMinions[libAIAI_gf_MinionAIGetIndexForMinion(lp_unit2)].lv_lane;
    }

    return (lv_unit1Lane == lv_unit2Lane);
}

unit libAIAI_gf_MinionAIGetTargetForMinion (int lp_minionIndex) {
    // Implementation
    return libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_targetUnit;
}

int libAIAI_gf_MinionAIGetStateForMinion (int lp_minionIndex) {
    // Implementation
    return libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_state;
}

void libAIAI_gf_MinionAIUpdateAIStatus (int lp_minionIndex) {
    // Variable Declarations
    int lv_loopIndex;
    text lv_botStatus;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_debugUnit != libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit) && (libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_debugLabel != c_invalidDialogControlId)) {
        DialogControlDestroy(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_debugLabel);
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_debugLabel = c_invalidDialogControlId;
    }

    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_debugLabel == c_invalidDialogControlId)) {
        DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "BotStatusLabel", libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_debugLabel = DialogControlLastCreated();
        libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_debugUnit = libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_minionUnit;
    }

    lv_botStatus = (lv_botStatus + StringToText(libAIAI_ge_MinionAIStates_Ident(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_state)));
    if ((libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_leashing == true)) {
        lv_botStatus = (lv_botStatus + StringExternal("Param/Value/lib_AIAI_1530CA81"));
    }

    libNtve_gf_SetDialogItemText(libAIAI_gv_minionAIActiveMinions[lp_minionIndex].lv_debugLabel, lv_botStatus, PlayerGroupAll());
}

void libAIAI_gf_MinionAIToggleAIStatus (bool lp_show) {
    int auto007CBC2F_ae;

    // Variable Declarations
    int lv_minionAIIndex;

    // Variable Initialization

    // Implementation
    auto007CBC2F_ae = libAIAI_gv_minionAIActiveMinionsUpperBound;
    lv_minionAIIndex = 1;
    for ( ; lv_minionAIIndex <= auto007CBC2F_ae ; lv_minionAIIndex += 1 ) {
        if ((libAIAI_gv_minionAIActiveMinions[lv_minionAIIndex].lv_debugLabel != c_invalidDialogControlId)) {
            if ((lp_show == true)) {
                DialogControlSetVisible(libAIAI_gv_minionAIActiveMinions[lv_minionAIIndex].lv_debugLabel, PlayerGroupAll(), true);
            }
            else {
                DialogControlSetVisible(libAIAI_gv_minionAIActiveMinions[lv_minionAIIndex].lv_debugLabel, PlayerGroupAll(), false);
            }
        }

    }
}

void libAIAI_gf_DestroyTowerTargetPersistent (int lp_towerIndex) {
    // Implementation
    if ((libAIAI_gv_towerTowers[lp_towerIndex].lv_hasTarget == true)) {
        libAIAI_gv_towerTowers[lp_towerIndex].lv_hasTarget = false;
        UnitCreateEffectUnit(libAIAI_gv_towerTowers[lp_towerIndex].lv_towerUnit, "TowerTargetingLaserDestroyPersistent", libAIAI_gv_towerTowers[lp_towerIndex].lv_targetUnit);
    }

}

void libAIAI_gf_TowerTurnTowerSystemOnOff (bool lp_onOff) {
    int auto505CB3D7_ae;
    int auto505CB3D7_ai;
    int auto829B6BA0_ae;
    int auto829B6BA0_ai;

    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    if ((lp_onOff == true)) {
        libAIAI_gv_towerSystemOn = true;
        TriggerExecute(libAIAI_gt_InitializeTowerAISystem, true, true);
        TriggerEnable(libAIAI_gt_TowerAIRoutine, true);
    }
    else {
        libAIAI_gv_towerSystemOn = false;
        TriggerEnable(libAIAI_gt_TowerAIRoutine, false);
        TriggerStop(libAIAI_gt_TowerAIRoutine);
        auto505CB3D7_ae = libAIAI_gv_towerTowerCount;
        auto505CB3D7_ai = 1;
        lv_i = 1;
        for ( ; ( (auto505CB3D7_ai >= 0 && lv_i <= auto505CB3D7_ae) || (auto505CB3D7_ai <= 0 && lv_i >= auto505CB3D7_ae) ) ; lv_i += auto505CB3D7_ai ) {
            if ((libAIAI_gv_towerTowers[lv_i].lv_towerUnit != null)) {
                ActorSendTo(libNtve_gf_MainActorofUnit(libAIAI_gv_towerTowers[lv_i].lv_towerUnit), "TowerAttackRange", "Destroy");
                libNtve_gf_MakeUnitInvulnerable(libAIAI_gv_towerTowers[lv_i].lv_towerUnit, false);
                if ((libAIAI_gv_towerTowers[lv_i].lv_targetUnit != null)) {
                    UnitCreateEffectUnit(libAIAI_gv_towerTowers[lv_i].lv_towerUnit, "TowerTargetingLaserDestroyPersistent", libAIAI_gv_towerTowers[lv_i].lv_targetUnit);
                }

            }

        }
        auto829B6BA0_ae = libAIAI_gv_towerTowerCount;
        auto829B6BA0_ai = 1;
        lv_i = 1;
        for ( ; ( (auto829B6BA0_ai >= 0 && lv_i <= auto829B6BA0_ae) || (auto829B6BA0_ai <= 0 && lv_i >= auto829B6BA0_ae) ) ; lv_i += auto829B6BA0_ai ) {
            libAIAI_gv_towerTowers[lv_i].lv_towerUnit = null;
            libAIAI_gv_towerTowers[lv_i].lv_targetUnit = null;
        }
    }
}

int libAIAI_gf_DefenderAIDetermineState (int lp_defenderAIIndex, int lp_oldState) {
    int autoE8A1792A_val;
    int autoAE389E8B_ae;
    int autoAE389E8B_ai;
    int autoE80965AF_ae;
    int autoE80965AF_ai;

    // Variable Declarations
    int lv_unitIndex;
    unit lv_defenderUnit;
    int lv_camp;
    bool lv_defendersFinishedLeashing;
    int lv_playerIndex;
    int lv_numberofValidTargets;

    // Variable Initialization
    lv_defendersFinishedLeashing = true;

    // Implementation
    autoE8A1792A_val = lp_oldState;
    if (autoE8A1792A_val == libAIAI_ge_DefenderAIState_Idle) {
        if ((UnitGroupCount(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_validTargets, c_unitCountAlive) > 0)) {
            return libAIAI_ge_DefenderAIState_Fighting;
        }

        lv_camp = libMapM_gf_JungleGetCampIndexFromDefenderIndex(lp_defenderAIIndex);
        if (((lv_camp <= 0) || ((libMapM_gv_jungleCreepCamps[lv_camp].lv_aIState != libMapM_ge_JungleCampStates_Hibernating) && (libMapM_gv_jungleCreepCamps[lv_camp].lv_aIState != libMapM_ge_JungleCampStates_HibernatingReadyToRespawn)))) {
            autoAE389E8B_ae = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderCount;
            autoAE389E8B_ai = 1;
            lv_unitIndex = 1;
            for ( ; ( (autoAE389E8B_ai >= 0 && lv_unitIndex <= autoAE389E8B_ae) || (autoAE389E8B_ai <= 0 && lv_unitIndex >= autoAE389E8B_ae) ) ; lv_unitIndex += autoAE389E8B_ai ) {
                lv_defenderUnit = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderUnits[lv_unitIndex];
                if ((UnitIsAlive(lv_defenderUnit) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_defenderUnit), libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_unitIndex]) > libAIAI_gv_aIDefenderFarFromLeashPosition)) {
                    return libAIAI_ge_DefenderAIState_Leashing;
                }

            }
        }

    }
    else if (autoE8A1792A_val == libAIAI_ge_DefenderAIState_Fighting) {
        lv_numberofValidTargets = UnitGroupCount(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_validTargets, c_unitCountAlive);
        if ((lv_numberofValidTargets != 0)) {
            libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_minAgroTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIDefenderNoTargetsExtraAgroTime);
        }

        if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_minAgroTime > TimerGetElapsed(libGame_gv_gameTimer)) && (libAIAI_gf_DefendersAnyOutsideLeashRegion(lp_defenderAIIndex) == false)) {
            return libAIAI_ge_DefenderAIState_Fighting;
        }

        if ((lv_numberofValidTargets == 0)) {
            libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_minLeashTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIDefenderMinLeashTime);
            return libAIAI_ge_DefenderAIState_Leashing;
        }

    }
    else if (autoE8A1792A_val == libAIAI_ge_DefenderAIState_Leashing) {
        lv_defendersFinishedLeashing = true;
        if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_minLeashTime > TimerGetElapsed(libGame_gv_gameTimer))) {
            lv_defendersFinishedLeashing = false;
        }
        else {
            autoE80965AF_ae = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderCount;
            autoE80965AF_ai = 1;
            lv_unitIndex = 1;
            for ( ; ( (autoE80965AF_ai >= 0 && lv_unitIndex <= autoE80965AF_ae) || (autoE80965AF_ai <= 0 && lv_unitIndex >= autoE80965AF_ae) ) ; lv_unitIndex += autoE80965AF_ai ) {
                lv_defenderUnit = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderUnits[lv_unitIndex];
                if ((UnitIsAlive(lv_defenderUnit) == true) && ((UnitTestState(lv_defenderUnit, c_unitStateIdle) == false) || (DistanceBetweenPoints(UnitGetPosition(lv_defenderUnit), libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_unitIndex]) > libAIAI_gv_aIDefenderCloseEnoughDistance) || ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_healOnLeash == true) && (UnitGetPropertyFixed(lv_defenderUnit, c_unitPropLifePercent, c_unitPropCurrent) <= 95.0)))) {
                    lv_defendersFinishedLeashing = false;
                    break;
                }

            }
        }
        if ((lv_defendersFinishedLeashing == true)) {
            return libAIAI_ge_DefenderAIState_Idle;
        }
        else {
            if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_showLeashedText == true) && (libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_lastAnnouncedLeashing < (TimerGetElapsed(libGame_gv_gameTimer) - libAIAI_gv_aIDefenderLeashReAnnounceTime))) {
                libUIUI_gf_UIFloatingCombatTextLeashing(lv_defenderUnit);
                libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_lastAnnouncedLeashing = TimerGetElapsed(libGame_gv_gameTimer);
            }

        }
    }
    else {
    }
    return lp_oldState;
}

void libAIAI_gf_DefenderAIStateLogic (int lp_defenderAIIndex) {
    int auto05ED653C_val;
    int auto81C95978_ae;
    int auto81C95978_ai;
    int autoA93EBE50_ae;
    int autoA93EBE50_ai;

    // Variable Declarations
    int lv_unitIndex;
    unit lv_defenderUnit;
    order lv_currentOrder;
    abilcmd lv_currentAbilityCommand;

    // Variable Initialization

    // Implementation
    auto05ED653C_val = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_state;
    if (auto05ED653C_val == libAIAI_ge_DefenderAIState_Idle) {
    }
    else if (auto05ED653C_val == libAIAI_ge_DefenderAIState_Fighting) {
        auto81C95978_ae = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderCount;
        auto81C95978_ai = 1;
        lv_unitIndex = 1;
        for ( ; ( (auto81C95978_ai >= 0 && lv_unitIndex <= auto81C95978_ae) || (auto81C95978_ai <= 0 && lv_unitIndex >= auto81C95978_ae) ) ; lv_unitIndex += auto81C95978_ai ) {
            if ((UnitIsAlive(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderUnits[lv_unitIndex]) == true)) {
                libAIAI_gf_DefenderAIIssueFightingOrderToCreep(lp_defenderAIIndex, lv_unitIndex);
            }

        }
    }
    else if (auto05ED653C_val == libAIAI_ge_DefenderAIState_Leashing) {
        autoA93EBE50_ae = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderCount;
        autoA93EBE50_ai = 1;
        lv_unitIndex = 1;
        for ( ; ( (autoA93EBE50_ai >= 0 && lv_unitIndex <= autoA93EBE50_ae) || (autoA93EBE50_ai <= 0 && lv_unitIndex >= autoA93EBE50_ae) ) ; lv_unitIndex += autoA93EBE50_ai ) {
            lv_defenderUnit = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderUnits[lv_unitIndex];
            if ((UnitIsAlive(lv_defenderUnit) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_defenderUnit), libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_unitIndex]) > libAIAI_gv_aIDefenderCloseEnoughDistance)) {
                lv_currentOrder = UnitOrder(lv_defenderUnit, 0);
                lv_currentAbilityCommand = OrderGetAbilityCommand(lv_currentOrder);
                if (((lv_currentOrder == null) || (lv_currentAbilityCommand != libAIAI_gv_aIMoveAbil) || (OrderGetTargetType(lv_currentOrder) != c_orderTargetPoint) || (OrderGetTargetPoint(lv_currentOrder) != libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_unitIndex]))) {
                    UnitIssueOrder(lv_defenderUnit, OrderTargetingPoint(libAIAI_gv_aIMoveAbil, libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_unitIndex]), c_orderQueueReplace);
                    UnitIssueOrder(lv_defenderUnit, OrderTargetingPoint(libAIAI_gv_aITurnAbil, PointWithOffsetPolar(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_unitIndex], 1.0, PointGetFacing(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_unitIndex]))), c_orderQueueAddToEnd);
                }

            }

        }
    }
    else {
    }
}

void libAIAI_gf_DefenderAIUpdateValidTargetList (int lp_defenderAIIndex) {
    unitgroup auto58C3FB91_g;
    int auto58C3FB91_u;

    // Variable Declarations
    unit lv_u;
    int lv_defenderOwner;
    int lv_unitOwner;
    region lv_attackRegion;

    // Variable Initialization

    // Implementation
    libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_validTargets = UnitGroupEmpty();
    if ((UnitGroupCount(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defendersGroup, c_unitCountAlive) == 0)) {
        return ;
    }

    lv_defenderOwner = UnitGetOwner(UnitGroupRandomUnit(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defendersGroup, c_unitCountAlive));
    auto58C3FB91_g = UnitGroup(null, c_playerAny, libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashRegion, UnitFilter(0, 0, (1 << c_targetFilterPsionic) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterBuried), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
    auto58C3FB91_u = 1;
    for ( ; auto58C3FB91_u <= UnitGroupCount(auto58C3FB91_g, c_unitCountAll) ; auto58C3FB91_u += (lv_u == UnitGroupUnit(auto58C3FB91_g, auto58C3FB91_u)) ) {
        lv_u = UnitGroupUnit(auto58C3FB91_g, auto58C3FB91_u);
        lv_unitOwner = UnitGetOwner(lv_u);
        if ((((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_aggroOnComputerPlayers == false) && (lv_unitOwner > libCore_gv_bALMaxPlayers)) || (libNtve_gf_PlayerIsEnemy(lv_defenderOwner, lv_unitOwner, libNtve_ge_PlayerRelation_Enemy) == false) || (UnitTypeTestFlag(UnitGetType(lv_u), c_unitFlagUntargetable) == true))) {
            continue;
        }

        if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_canSeeCloaked == false) && (UnitTestState(lv_u, c_unitStateCloaked) == true)) {
            continue;
        }

        if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_playerIsThreat[lv_unitOwner] == false) && (libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_aggoRegion != null) && (libNtve_gf_UnitInRegion(lv_u, libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_aggoRegion) == true)) {
            libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_playerIsThreat[lv_unitOwner] = true;
        }

        if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_playerIsThreat[lv_unitOwner] == true)) {
            UnitGroupAdd(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_validTargets, lv_u);
        }

    }
}

void libAIAI_gf_DefenderAITransitionDefenderAIIntoState (int lp_defenderAIIndex, int lp_state) {
    int autoBA9F3ACA_val;
    unitgroup auto6D316A15_g;
    int auto6D316A15_u;
    unitgroup autoEC56D37D_g;
    int autoEC56D37D_u;
    int auto43FE2DF2_ae;
    int auto43FE2DF2_ai;
    int autoD540A8BC_ae;
    int autoD540A8BC_ai;
    unitgroup autoA8B474AC_g;
    int autoA8B474AC_u;

    // Variable Declarations
    int lv_i;
    unit lv_u;
    string lv_creepUnitType;
    string lv_icon;
    int lv_oldState;

    // Variable Initialization

    // Implementation
    lv_oldState = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_state;
    libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_state = lp_state;
    autoBA9F3ACA_val = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_state;
    if (autoBA9F3ACA_val == libAIAI_ge_DefenderAIState_Idle) {
        auto6D316A15_g = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defendersGroup;
        auto6D316A15_u = 1;
        for ( ; auto6D316A15_u <= UnitGroupCount(auto6D316A15_g, c_unitCountAll) ; auto6D316A15_u += (lv_u == UnitGroupUnit(auto6D316A15_g, auto6D316A15_u)) ) {
            lv_u = UnitGroupUnit(auto6D316A15_g, auto6D316A15_u);
            UnitBehaviorRemove(lv_u, "JungleCreepHardLeashing", 1);
            UnitBehaviorRemove(lv_u, "JungleCreepSoftLeashing", 1);
            UnitBehaviorRemove(lv_u, "JungleCreepSoftLeashingNoHeal", 1);
            UnitIssueOrder(lv_u, Order(libAIAI_gv_aIStopAbil), c_orderQueueReplace);
        }
        libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashCount = 0;
    }
    else if (autoBA9F3ACA_val == libAIAI_ge_DefenderAIState_Fighting) {
        libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_fightStartTime = TimerGetElapsed(libGame_gv_gameTimer);
        autoEC56D37D_g = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defendersGroup;
        autoEC56D37D_u = 1;
        for ( ; autoEC56D37D_u <= UnitGroupCount(autoEC56D37D_g, c_unitCountAll) ; autoEC56D37D_u += (lv_u == UnitGroupUnit(autoEC56D37D_g, autoEC56D37D_u)) ) {
            lv_u = UnitGroupUnit(autoEC56D37D_g, autoEC56D37D_u);
            if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_aggoRegion == null)) {
                UnitBehaviorRemove(lv_u, "JungleCreepBenign", 1);
            }

            UnitBehaviorRemove(lv_u, "JungleCreepPassive", 1);
            UnitBehaviorRemove(lv_u, "JungleCreepHardLeashing", 1);
            UnitBehaviorRemove(lv_u, "JungleCreepSoftLeashing", 1);
            UnitBehaviorRemove(lv_u, "JungleCreepSoftLeashingNoHeal", 1);
            if ((UnitGetType(lv_u) == "MercDefenderSiegeGiant") && (libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashCount == 0)) {
                UnitBehaviorAddPlayer(lv_u, "JungleCreepPrepAggro", libCore_gv_cOMPUTER_Hostile, 1);
            }

        }
    }
    else if (autoBA9F3ACA_val == libAIAI_ge_DefenderAIState_Leashing) {
        if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashCount < libAIAI_gv_aIDefenderMaxLeashCount)) {
            libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashCount += 1;
        }

        auto43FE2DF2_ae = libCore_gv_bALMaxGamePlayers;
        auto43FE2DF2_ai = 1;
        lv_i = 1;
        for ( ; ( (auto43FE2DF2_ai >= 0 && lv_i <= auto43FE2DF2_ae) || (auto43FE2DF2_ai <= 0 && lv_i >= auto43FE2DF2_ae) ) ; lv_i += auto43FE2DF2_ai ) {
            libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_playerIsThreat[lv_i] = false;
        }
        autoD540A8BC_ae = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderCount;
        autoD540A8BC_ai = 1;
        lv_i = 1;
        for ( ; ( (autoD540A8BC_ai >= 0 && lv_i <= autoD540A8BC_ae) || (autoD540A8BC_ai <= 0 && lv_i >= autoD540A8BC_ae) ) ; lv_i += autoD540A8BC_ai ) {
            lv_u = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderUnits[lv_i];
            if ((UnitIsAlive(lv_u) == true)) {
                if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_healOnLeash == true)) {
                    UnitBehaviorAddPlayer(lv_u, "JungleCreepSoftLeashing", libCore_gv_cOMPUTER_Hostile, 1);
                    if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashCount >= libAIAI_gv_aIDefenderMaxLeashCount)) {
                        UnitSetPropertyFixed(lv_u, c_unitPropLifePercent, 100.0);
                    }

                }
                else {
                    UnitBehaviorAddPlayer(lv_u, "JungleCreepSoftLeashingNoHeal", libCore_gv_cOMPUTER_Hostile, 1);
                }
                if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashCount >= libAIAI_gv_aIDefenderMaxLeashCount)) {
                    UnitBehaviorAddPlayer(lv_u, "JungleCreepHardLeashing", libCore_gv_cOMPUTER_Hostile, 1);
                }

                if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_aggoRegion == null)) {
                    UnitBehaviorAddPlayer(lv_u, "JungleCreepBenign", libCore_gv_cOMPUTER_Hostile, 1);
                }

                UnitBehaviorAddPlayer(lv_u, "JungleCreepPassive", libCore_gv_cOMPUTER_Hostile, 1);
                UnitIssueOrder(lv_u, OrderTargetingPoint(libAIAI_gv_aIMoveAbil, libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_i]), c_orderQueueReplace);
                UnitIssueOrder(lv_u, OrderTargetingPoint(libAIAI_gv_aITurnAbil, PointWithOffsetPolar(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_i], 1.0, PointGetFacing(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_i]))), c_orderQueueAddToEnd);
            }

        }
    }
    else {
    }
    if (((lv_oldState == libAIAI_ge_DefenderAIState_Idle) || (lv_oldState == libAIAI_ge_DefenderAIState_Leashing)) && (lp_state == libAIAI_ge_DefenderAIState_Fighting)) {
        libGame_gf_SendEventJungleDefenderAIDefendersBeginFightingFromIdleOrLeashing(lp_defenderAIIndex);
    }

    if ((lv_oldState == libAIAI_ge_DefenderAIState_Idle) && (lp_state == libAIAI_ge_DefenderAIState_Fighting)) {
        libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_minAgroTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIDefenderMinAgroTime);
        libGame_gf_SendEventJungleDefenderAIDefendersBeginFighting(lp_defenderAIIndex);
    }

    if ((lv_oldState == libAIAI_ge_DefenderAIState_Leashing) && (lp_state == libAIAI_ge_DefenderAIState_Idle)) {
        libGame_gf_SendEventJungleDefenderAIDefendersEndFighting(lp_defenderAIIndex);
    }

    if ((lv_oldState == libAIAI_ge_DefenderAIState_Fighting) && (lp_state == libAIAI_ge_DefenderAIState_Leashing) && (libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_showLeashedText == true)) {
        autoA8B474AC_g = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defendersGroup;
        autoA8B474AC_u = 1;
        for ( ; autoA8B474AC_u <= UnitGroupCount(autoA8B474AC_g, c_unitCountAll) ; autoA8B474AC_u += (lv_u == UnitGroupUnit(autoA8B474AC_g, autoA8B474AC_u)) ) {
            lv_u = UnitGroupUnit(autoA8B474AC_g, autoA8B474AC_u);
            libUIUI_gf_UIFloatingCombatTextLeashing(lv_u);
        }
        libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_lastAnnouncedLeashing = TimerGetElapsed(libGame_gv_gameTimer);
    }

}

void libAIAI_gf_DefenderAIIssueFightingOrderToCreep (int lp_defenderAIIndex, int lp_creep) {
    // Variable Declarations
    unit lv_u;
    unit lv_creepUnit;
    order lv_currentOrder;
    unit lv_currentOrderTarget;
    unit lv_newOrderTarget;
    fixed lv_newOrderTargetHealth;
    int lv_graveGolemBindingRootsValidTargets;
    unitgroup lv_enemyGroup;

    // Variable Initialization
    lv_newOrderTargetHealth = 3000.0;
    lv_enemyGroup = UnitGroupEmpty();

    // Implementation
    lv_creepUnit = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderUnits[lp_creep];
    lv_currentOrderTarget = OrderGetTargetUnit(UnitOrder(lv_creepUnit, 0));
    libAIAI_gv_defenderAICreepNeedsNewOrder = true;
    if ((UnitWeaponPeriodRemaining(lv_creepUnit, 1) > 2.0)) {
        libAIAI_gv_defenderAICreepNeedsNewOrder = false;
    }

    if ((libAIAI_gf_DefendersAreFighting(lp_defenderAIIndex) == true) && ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_fightStartTime + libAIAI_gv_aIDefenderMinTimeBeforeCasting) < TimerGetElapsed(libGame_gv_gameTimer))) {
        if ((UnitGetType(lv_creepUnit) == "MercDefenderRangedMage")) {
            if ((UnitGetCooldown(lv_creepUnit, "Abil/KnightMagicVolley") <= 0.0) && (UnitIsValid(lv_currentOrderTarget) == true) && (libNtve_gf_UnitIsVisibleToPlayer(lv_currentOrderTarget, UnitGetOwner(lv_creepUnit)) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_creepUnit), UnitGetPosition(lv_currentOrderTarget)) <= 7.0)) {
                UnitIssueOrder(lv_creepUnit, OrderTargetingUnit(AbilityCommand("KnightMagicVolley", 0), lv_currentOrderTarget), c_orderQueueReplace);
                libAIAI_gv_defenderAICreepNeedsNewOrder = false;
            }

        }
        else {
            if (((UnitGetType(lv_creepUnit) == "JungleGraveGolemDefender") || (UnitGetType(lv_creepUnit) == "UnderworldBoss") || (UnitGetType(lv_creepUnit) == "JunglePlantHorror"))) {
                if ((UnitGetCooldown(lv_creepUnit, "Abil/UnderworldBossStun") <= 0.0)) {
                    lv_enemyGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lv_creepUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_creepUnit), 5.0), UnitFilter((1 << c_targetFilterHeroic) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                    if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
                        UnitIssueOrder(lv_creepUnit, Order(AbilityCommand("UnderworldBossStun", 0)), c_orderQueueReplace);
                        UnitAddCooldown(lv_creepUnit, "Abil/UnderworldBossStun", 1.5);
                        libAIAI_gv_defenderAICreepNeedsNewOrder = false;
                    }
                    else {
                        lv_enemyGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lv_creepUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_creepUnit), 5.0), UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                        if ((UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 3)) {
                            UnitIssueOrder(lv_creepUnit, Order(AbilityCommand("UnderworldBossStun", 0)), c_orderQueueReplace);
                            UnitAddCooldown(lv_creepUnit, "Abil/UnderworldBossStun", 1.5);
                            libAIAI_gv_defenderAICreepNeedsNewOrder = false;
                        }

                    }
                }

                lv_enemyGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lv_creepUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_creepUnit), 8.0), UnitFilter((1 << c_targetFilterHeroic) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
                if ((UnitGetCooldown(lv_creepUnit, "Abil/UnderworldBossRoots") <= 0.0) && (UnitGroupCount(lv_enemyGroup, c_unitCountAlive) >= 1)) {
                    UnitGroupLoopBegin(lv_enemyGroup);
                    for ( ; !UnitGroupLoopDone() ; UnitGroupLoopStep() ) {
                        if ((UnitGroupLoopCurrent() != lv_currentOrderTarget) && (DistanceBetweenPoints(UnitGetPosition(UnitGroupLoopCurrent()), UnitGetPosition(lv_creepUnit)) >= 2.0)) {
                            lv_graveGolemBindingRootsValidTargets += 1;
                        }

                    }
                    UnitGroupLoopEnd();
                    if ((lv_graveGolemBindingRootsValidTargets >= 1)) {
                        UnitIssueOrder(lv_creepUnit, OrderTargetingPoint(AbilityCommand("UnderworldBossRoots", 0), UnitGetPosition(libMapM_gf_JungleGetRandomEnemyHeroInRangeOfMinionWithMinimumRangeRequirements(lv_creepUnit, UnitGetPosition(lv_creepUnit), 0.0, 8.0, lv_currentOrderTarget))), c_orderQueueReplace);
                        UnitAddCooldown(lv_creepUnit, "Abil/UnderworldBossRoots", 0.25);
                        libAIAI_gv_defenderAICreepNeedsNewOrder = false;
                    }
                    else {
                        UnitAddCooldown(lv_creepUnit, "Abil/UnderworldBossRoots", 0.5);
                    }
                }

            }

        }
    }

    libCore_gv_segTriggerUnit = lv_creepUnit;
    libCore_gv_segTriggerIndex = lp_defenderAIIndex;
    libCore_gf_CallRegisteredSegregationTriggers(libCore_ge_SegregationTriggerTypes_DefenderAIIssueOrdersToCreep);
    if ((libAIAI_gv_defenderAICreepNeedsNewOrder == true)) {
        lv_currentOrder = UnitOrder(lv_creepUnit, 0);
        if (((lv_currentOrder == null) || (OrderGetAbilityCommand(lv_currentOrder) == libAIAI_gv_aIMoveAbil) || (OrderGetAbilityCommand(lv_currentOrder) == libAIAI_gv_aITurnAbil) || (OrderGetAbilityCommand(lv_currentOrder) == libAIAI_gv_aIAttackAbil) || (OrderGetAbilityCommand(lv_currentOrder) == libAIAI_gv_aIAttackAllyAbil))) {
            lv_newOrderTarget = UnitGroupClosestToPoint(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_validTargets, UnitGetPosition(lv_creepUnit));
            if ((lv_newOrderTarget == null)) {
                UnitIssueOrder(lv_creepUnit, OrderTargetingPoint(libAIAI_gv_aIAttackAbil, libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lp_creep]), c_orderQueueReplace);
                UnitIssueOrder(lv_creepUnit, OrderTargetingPoint(libAIAI_gv_aITurnAbil, PointWithOffsetPolar(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lp_creep], 1.0, PointGetFacing(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lp_creep]))), c_orderQueueAddToEnd);
            }
            else {
                if (((lv_newOrderTarget != lv_currentOrderTarget) || ((OrderGetAbilityCommand(lv_currentOrder) != libAIAI_gv_aIAttackAbil) && (OrderGetAbilityCommand(lv_currentOrder) != libAIAI_gv_aIAttackAllyAbil)))) {
                    UnitIssueOrder(lv_creepUnit, OrderTargetingUnit(libAIAI_gv_aIAttackAbil, lv_newOrderTarget), c_orderQueueReplace);
                }

            }
        }

    }

}

void libAIAI_gf_DefenderAICreepDies (int lp_defenderAIIndex, unit lp_unit, int lp_killingPlayer) {
    // Implementation
    libGame_gf_SendEventJungleDefenderAIDefenderKilled(lp_defenderAIIndex, lp_unit, lp_killingPlayer);
    if ((UnitGroupCount(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defendersGroup, c_unitCountAlive) == 0) && (libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_campDeathEventDispatched == false)) {
        libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_campDeathEventDispatched = true;
        libGame_gf_SendEventJungleDefenderAIAllDefendersKilled(lp_defenderAIIndex, lp_killingPlayer);
    }

}

int libAIAI_gf_DefenderAINewIndex () {
    int autoD5805ED0_ae;
    int autoD5805ED0_ai;
    int autoA8796576_ae;
    int autoA8796576_ai;

    // Variable Declarations
    int lv_defenderAIIndex;
    int lv_bestIndex;
    fixed lv_bestIndexTime;

    // Variable Initialization
    lv_bestIndexTime = 524287.0;

    // Implementation
    autoD5805ED0_ae = libAIAI_gv_defenderAIMaxNumberOfDefenderAI;
    autoD5805ED0_ai = 1;
    lv_defenderAIIndex = 1;
    for ( ; ( (autoD5805ED0_ai >= 0 && lv_defenderAIIndex <= autoD5805ED0_ae) || (autoD5805ED0_ai <= 0 && lv_defenderAIIndex >= autoD5805ED0_ae) ) ; lv_defenderAIIndex += autoD5805ED0_ai ) {
        if ((libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_used == false)) {
            libAIAI_gv_defenderAIDefenderAIUpperBound = lv_defenderAIIndex;
            return lv_defenderAIIndex;
        }

    }
    autoA8796576_ae = libAIAI_gv_defenderAIMaxNumberOfDefenderAI;
    autoA8796576_ai = 1;
    lv_defenderAIIndex = 1;
    for ( ; ( (autoA8796576_ai >= 0 && lv_defenderAIIndex <= autoA8796576_ae) || (autoA8796576_ai <= 0 && lv_defenderAIIndex >= autoA8796576_ae) ) ; lv_defenderAIIndex += autoA8796576_ai ) {
        if ((UnitGroupCount(libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_defendersGroup, c_unitCountAlive) == 0) && (libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_timeStarted < lv_bestIndexTime)) {
            lv_bestIndex = lv_defenderAIIndex;
            lv_bestIndexTime = libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_timeStarted;
        }

    }
    return lv_bestIndex;
}

void libAIAI_gf_StartDefenderAI (unitgroup lp_defenders, region lp_leashRegion, region lp_aggroRegion, bool lp_healOnLeash) {
    unitgroup auto5BE89C99_g;
    int auto5BE89C99_u;

    // Variable Declarations
    int lv_defenderAIIndex;
    unit lv_unit;
    int lv_unitIndex;

    // Variable Initialization

    // Implementation
    lv_defenderAIIndex = libAIAI_gf_DefenderAINewIndex();
    if ((lv_defenderAIIndex <= 0)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_AIAI_F84235F3"), true);
        return ;
    }

    if ((UnitGroupCount(lp_defenders, c_unitCountAll) > libAIAI_gv_defenderAIMaxNumberOfDefendersPerGroup)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_AIAI_4ACB7326"), true);
        return ;
    }

    if ((TriggerIsEnabled(libAIAI_gt_DefenderAIDefenderAILogic) == false)) {
        TriggerEnable(libAIAI_gt_DefenderAIDefenderAILogic, true);
        TriggerEnable(libAIAI_gt_DefenderAICreepsAttacked, true);
    }

    libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_used = true;
    libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_timeStarted = TimerGetElapsed(libGame_gv_gameTimer);
    libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_leashRegion = lp_leashRegion;
    libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_aggoRegion = lp_aggroRegion;
    libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_healOnLeash = lp_healOnLeash;
    libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_defendersGroup = UnitGroupEmpty();
    libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_defenderCount = 0;
    libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_canSeeCloaked = false;
    auto5BE89C99_g = lp_defenders;
    auto5BE89C99_u = 1;
    for ( ; auto5BE89C99_u <= UnitGroupCount(auto5BE89C99_g, c_unitCountAll) ; auto5BE89C99_u += (lv_unit == UnitGroupUnit(auto5BE89C99_g, auto5BE89C99_u)) ) {
        lv_unit = UnitGroupUnit(auto5BE89C99_g, auto5BE89C99_u);
        UnitGroupAdd(libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_defendersGroup, lv_unit);
        if ((libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_aggoRegion == null)) {
            UnitBehaviorAdd(lv_unit, "JungleCreepBenign", lv_unit, 1);
        }

        UnitBehaviorAdd(lv_unit, "JungleCreepPassive", lv_unit, 1);
        UnitStatusBarOverride(lv_unit, c_unitStatusGroupAll);
        UnitSetCustomValue(lv_unit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_JungleDefenderAIIndex), IntToFixed(lv_defenderAIIndex));
        libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_defenderCount += 1;
        lv_unitIndex = libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_defenderCount;
        libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_defenderUnits[lv_unitIndex] = lv_unit;
        if ((libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_aggoRegion != null) && (RegionContainsPoint(libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_aggoRegion, UnitGetPosition(lv_unit)) == false)) {
            libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_leashPositions[lv_unitIndex] = libAIAI_gf_DefenderMovePointIntoRegion(UnitGetPosition(lv_unit), libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_aggoRegion);
        }
        else {
            libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_leashPositions[lv_unitIndex] = UnitGetPosition(lv_unit);
        }
        if ((UnitHasBehavior2(lv_unit, "Truesight") == true)) {
            libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_canSeeCloaked = true;
        }

    }
    libAIAI_gf_DefenderAITransitionDefenderAIIntoState(lv_defenderAIIndex, libAIAI_ge_DefenderAIState_Idle);
    DataTableSetInt(false, libAIAI_gv_defenderAILastCreatedDefenderAIIndex, lv_defenderAIIndex);
}

void libAIAI_gf_AddUnitsToDefenderAI (int lp_defenderAIIndex, unitgroup lp_defenders) {
    unitgroup auto8682ED07_g;
    int auto8682ED07_u;
    int autoCFA266D0_ae;
    int autoCFA266D0_ai;

    // Variable Declarations
    unit lv_unit;
    int lv_unitIndex;
    int lv_itDefenderIndex;

    // Variable Initialization

    // Implementation
    if (((lp_defenderAIIndex <= 0) || (lp_defenderAIIndex > libAIAI_gv_defenderAIDefenderAIUpperBound))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_AIAI_4E2C26EF"), true);
        return ;
    }

    if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_used == false)) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_AIAI_1E6AC297"), true);
        return ;
    }

    auto8682ED07_g = lp_defenders;
    auto8682ED07_u = 1;
    for ( ; auto8682ED07_u <= UnitGroupCount(auto8682ED07_g, c_unitCountAll) ; auto8682ED07_u += (lv_unit == UnitGroupUnit(auto8682ED07_g, auto8682ED07_u)) ) {
        lv_unit = UnitGroupUnit(auto8682ED07_g, auto8682ED07_u);
        UnitGroupAdd(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defendersGroup, lv_unit);
        if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_state != libAIAI_ge_DefenderAIState_Fighting)) {
            if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_aggoRegion == null)) {
                UnitBehaviorAdd(lv_unit, "JungleCreepBenign", lv_unit, 1);
            }

            UnitBehaviorAdd(lv_unit, "JungleCreepPassive", lv_unit, 1);
        }

        UnitStatusBarOverride(lv_unit, c_unitStatusGroupAll);
        UnitSetCustomValue(lv_unit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_JungleDefenderAIIndex), IntToFixed(lp_defenderAIIndex));
        lv_unitIndex = 0;
        autoCFA266D0_ae = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderCount;
        autoCFA266D0_ai = 1;
        lv_itDefenderIndex = 1;
        for ( ; ( (autoCFA266D0_ai >= 0 && lv_itDefenderIndex <= autoCFA266D0_ae) || (autoCFA266D0_ai <= 0 && lv_itDefenderIndex >= autoCFA266D0_ae) ) ; lv_itDefenderIndex += autoCFA266D0_ai ) {
            if (((UnitIsValid(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderUnits[lv_itDefenderIndex]) == false) || (UnitIsAlive(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderUnits[lv_itDefenderIndex]) == false))) {
                lv_unitIndex = lv_itDefenderIndex;
                break;
            }

        }
        if ((lv_unitIndex == 0)) {
            if (((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderCount + 1) > libAIAI_gv_defenderAIMaxNumberOfDefendersPerGroup)) {
                TriggerDebugOutput(1, StringExternal("Param/Value/lib_AIAI_51CA9C30"), true);
                return ;
            }

            libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderCount += 1;
            lv_unitIndex = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderCount;
        }

        libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderUnits[lv_unitIndex] = lv_unit;
        if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_aggoRegion != null) && (RegionContainsPoint(libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_aggoRegion, UnitGetPosition(lv_unit)) == false)) {
            libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_unitIndex] = libAIAI_gf_DefenderMovePointIntoRegion(UnitGetPosition(lv_unit), libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_aggoRegion);
        }
        else {
            libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lv_unitIndex] = UnitGetPosition(lv_unit);
        }
        if ((UnitHasBehavior2(lv_unit, "Truesight") == true)) {
            libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_canSeeCloaked = true;
        }

    }
}

void libAIAI_gf_SetDefendersAggroOnComputerPlayers (int lp_aIIndex, bool lp_aggro) {
    // Implementation
    libAIAI_gv_defenderAI[lp_aIIndex].lv_aggroOnComputerPlayers = lp_aggro;
}

void libAIAI_gf_SetDefendersShowLeashedText (int lp_aIIndex, bool lp_show) {
    // Implementation
    libAIAI_gv_defenderAI[lp_aIIndex].lv_showLeashedText = lp_show;
}

int libAIAI_gf_LastCreatedDefenderAI () {
    // Implementation
    return DataTableGetInt(false, libAIAI_gv_defenderAILastCreatedDefenderAIIndex);
}

int libAIAI_gf_DefenderAIIndexOfUnit (unit lp_unit) {
    // Variable Declarations
    int lv_i;

    // Variable Initialization

    // Implementation
    return FixedToInt(UnitGetCustomValue(lp_unit, libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_JungleDefenderAIIndex)));
}

unitgroup libAIAI_gf_DefenderGroup (int lp_defenderAIIndex) {
    // Implementation
    if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_used == false)) {
        return UnitGroupEmpty();
    }
    else {
        return libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defendersGroup;
    }
}

unit libAIAI_gf_DefenderUnit (int lp_defenderAIIndex, int lp_index) {
    // Implementation
    if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_used == false)) {
        return null;
    }
    else {
        return libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderUnits[lp_index];
    }
}

int libAIAI_gf_DefenderUnitCount (int lp_defenderAIIndex) {
    // Implementation
    if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_used == false)) {
        return 0;
    }
    else {
        return libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderCount;
    }
}

region libAIAI_gf_DefenderAgroRegion (int lp_defenderAIIndex) {
    // Implementation
    if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_used == false)) {
        return RegionEmpty();
    }
    else {
        return libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_aggoRegion;
    }
}

region libAIAI_gf_DefenderLeashRegion (int lp_defenderAIIndex) {
    // Implementation
    if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_used == false)) {
        return RegionEmpty();
    }
    else {
        return libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashRegion;
    }
}

unitgroup libAIAI_gf_DefenderValidTargets (int lp_defenderAIIndex) {
    // Implementation
    if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_used == false)) {
        return UnitGroupEmpty();
    }
    else {
        return libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_validTargets;
    }
}

bool libAIAI_gf_DefendersAreFighting (int lp_defenderAIIndex) {
    // Implementation
    if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_used == true) && (libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_state == libAIAI_ge_DefenderAIState_Fighting)) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_DefendersAreLeashing (int lp_defenderAIIndex) {
    // Implementation
    if ((libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_used == true) && (libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_state == libAIAI_ge_DefenderAIState_Leashing)) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_DefendersAnyOutsideLeashRegion (int lp_defenderAIIndex) {
    int autoB3E0A531_ae;
    int autoB3E0A531_ai;

    // Variable Declarations
    int lv_unitIndex;
    unit lv_defenderUnit;

    // Variable Initialization

    // Implementation
    autoB3E0A531_ae = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderCount;
    autoB3E0A531_ai = 1;
    lv_unitIndex = 1;
    for ( ; ( (autoB3E0A531_ai >= 0 && lv_unitIndex <= autoB3E0A531_ae) || (autoB3E0A531_ai <= 0 && lv_unitIndex >= autoB3E0A531_ae) ) ; lv_unitIndex += autoB3E0A531_ai ) {
        lv_defenderUnit = libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_defenderUnits[lv_unitIndex];
        if ((UnitIsAlive(lv_defenderUnit) == true) && (libNtve_gf_UnitInRegion(lv_defenderUnit, libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashRegion) == false)) {
            return true;
        }

    }
    return false;
}

point libAIAI_gf_DefenderMovePointIntoRegion (point lp_point, region lp_region) {
    // Variable Declarations
    point lv_center;
    point lv_dir;
    point lv_newPoint;

    // Variable Initialization

    // Implementation
    lv_center = RegionGetCenter(lp_region);
    lv_dir = AIGetDirection(lv_center, lp_point);
    lv_newPoint = Point((PointGetX(lv_center) + (PointGetX(lv_dir) * 3.0)), (PointGetY(lv_center) + (PointGetY(lv_dir) * 3.0)));
    if ((RegionContainsPoint(lp_region, lv_newPoint) == true)) {
        return lv_newPoint;
    }

    return lv_center;
}

void libAIAI_gf_SetDefenderLeashLocation (int lp_defenderAIIndex, int lp_index, point lp_loc) {
    // Implementation
    libAIAI_gv_defenderAI[lp_defenderAIIndex].lv_leashPositions[lp_index] = lp_loc;
}

void libAIAI_gf_DefenderAIUpdateAIStatus (int lp_defenderIndex) {
    int auto60BAD1CD_ae;

    // Variable Declarations
    int lv_loopIndex;
    unit lv_leader;
    text lv_botStatus;

    // Variable Initialization

    // Implementation
    auto60BAD1CD_ae = libAIAI_gv_defenderAI[lp_defenderIndex].lv_defenderCount;
    lv_loopIndex = 1;
    for ( ; lv_loopIndex <= auto60BAD1CD_ae ; lv_loopIndex += 1 ) {
        lv_leader = libAIAI_gf_DefenderUnit(lp_defenderIndex, lv_loopIndex);
        if ((UnitIsAlive(lv_leader) == true)) {
            break;
        }

    }
    if ((UnitIsAlive(lv_leader) == false)) {
        return ;
    }
    else {
        if ((libAIAI_gv_defenderAI[lp_defenderIndex].lv_debugUnit != lv_leader) && (libAIAI_gv_defenderAI[lp_defenderIndex].lv_debugLabel != c_invalidDialogControlId)) {
            DialogControlDestroy(libAIAI_gv_defenderAI[lp_defenderIndex].lv_debugLabel);
            libAIAI_gv_defenderAI[lp_defenderIndex].lv_debugLabel = c_invalidDialogControlId;
        }

    }
    if ((libAIAI_gv_defenderAI[lp_defenderIndex].lv_debugLabel == c_invalidDialogControlId)) {
        DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "BotStatusLabel", lv_leader);
        DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
        libAIAI_gv_defenderAI[lp_defenderIndex].lv_debugLabel = DialogControlLastCreated();
        libAIAI_gv_defenderAI[lp_defenderIndex].lv_debugUnit = lv_leader;
    }

    lv_botStatus = (lv_botStatus + StringToText(libAIAI_ge_DefenderAIState_Ident(libAIAI_gv_defenderAI[lp_defenderIndex].lv_state)));
    lv_botStatus = (lv_botStatus + StringExternal("Param/Value/lib_AIAI_83BA5515"));
    lv_botStatus = (lv_botStatus + IntToText(libAIAI_gv_defenderAI[lp_defenderIndex].lv_leashCount));
    lv_botStatus = (lv_botStatus + StringExternal("Param/Value/lib_AIAI_2900CD77"));
    lv_botStatus = (lv_botStatus + IntToText(UnitGroupCount(libAIAI_gv_defenderAI[lp_defenderIndex].lv_defendersGroup, c_unitCountAlive)));
    lv_botStatus = (lv_botStatus + StringExternal("Param/Value/lib_AIAI_35755A26"));
    lv_botStatus = (lv_botStatus + IntToText(libAIAI_gv_defenderAI[lp_defenderIndex].lv_defenderCount));
    lv_botStatus = (lv_botStatus + StringExternal("Param/Value/lib_AIAI_133394D4"));
    lv_botStatus = (lv_botStatus + IntToText(UnitGroupCount(libAIAI_gv_defenderAI[lp_defenderIndex].lv_validTargets, c_unitCountAlive)));
    libNtve_gf_SetDialogItemText(libAIAI_gv_defenderAI[lp_defenderIndex].lv_debugLabel, lv_botStatus, PlayerGroupAll());
}

void libAIAI_gf_DefenderAIToggleAIStatus (bool lp_show) {
    int autoE413478E_ae;

    // Variable Declarations
    int lv_defenderAIIndex;

    // Variable Initialization

    // Implementation
    autoE413478E_ae = libAIAI_gv_defenderAIDefenderAIUpperBound;
    lv_defenderAIIndex = 1;
    for ( ; lv_defenderAIIndex <= autoE413478E_ae ; lv_defenderAIIndex += 1 ) {
        if ((libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_debugLabel != c_invalidDialogControlId)) {
            if ((lp_show == true)) {
                DialogControlSetVisible(libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_debugLabel, PlayerGroupAll(), true);
            }
            else {
                DialogControlSetVisible(libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_debugLabel, PlayerGroupAll(), false);
            }
        }

    }
}

void libAIAI_gf_HeroAICleanupAllAIData () {
    int autoF783F05D_ae;
    int auto049F8BAC_ae;
    int autoF81BD9F6_ae;
    int autoE4650178_ae;
    int auto69403840_ae;
    int autoE5F9996F_ae;
    int auto69E69327_ae;
    int auto8F53BD22_ae;

    // Variable Declarations
    int lv_teamIndex;
    int lv_laneIndex;
    int lv_playerIndex;
    int lv_pingIndex;

    // Variable Initialization

    // Implementation
    AIReset();
    libAIAI_gf_HeroAIUnregisterAllAOEfromWatchTrigger();
    autoF783F05D_ae = libCore_gv_bALMaxTeams;
    lv_teamIndex = 0;
    for ( ; lv_teamIndex <= autoF783F05D_ae ; lv_teamIndex += 1 ) {
        libAIAI_gv_heroAITeamCampData[lv_teamIndex].lv_joinCampCheckTimer = 0.0;
        libAIAI_gv_heroAITeamCampData[lv_teamIndex].lv_startCampCheckTimer = 0.0;
        libAIAI_gv_heroAITeamCampData[lv_teamIndex].lv_numberofCampPings = 0;
        libAIAI_gv_heroAITeamData[lv_teamIndex].lv_numberofAvoidAreas = 0;
        libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextWatchTowerConsiderTime = 0.0;
        libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextUseDragonVehicleConsiderTime = 0.0;
        libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextUnderworldConsiderTime = 0.0;
        libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextTearOfEluneConsiderTime = 0.0;
        libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextTeamStrategyTime = 0.0;
        libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextMapObjectiveConsiderTime = 0.0;
        libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextMapMechanicConsiderTime = 0.0;
        libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextLaneEvalUpdateTime = 0.0;
        libAIAI_gv_heroAITeamData[lv_teamIndex].lv_lastTimePlayedAttackVO = 0.0;
        auto049F8BAC_ae = libGame_gv_laneMaxCount_C;
        lv_laneIndex = 0;
        for ( ; lv_laneIndex <= auto049F8BAC_ae ; lv_laneIndex += 1 ) {
            libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_lastTimeHumanAllyEnteredLane = 0.0;
        }
        autoF81BD9F6_ae = libCore_gv_bALMaxPlayers;
        lv_playerIndex = 0;
        for ( ; lv_playerIndex <= autoF81BD9F6_ae ; lv_playerIndex += 1 ) {
            libAIAI_gv_heroAITeamData[lv_teamIndex].lv_heroTrackingData[lv_playerIndex].lv_lastSeenTime = -100.0;
            libAIAI_gv_heroAITeamData[lv_teamIndex].lv_heroTrackingData[lv_playerIndex].lv_lastSeenLocation = Point(0.0, 0.0);
            libAIAI_gv_heroAITeamData[lv_teamIndex].lv_heroTrackingData[lv_playerIndex].lv_lastSeenVelocity = Point(0.0, 0.0);
        }
        autoE4650178_ae = libAIAI_gv_heroAIMaxTownPingCount;
        lv_pingIndex = 0;
        for ( ; lv_pingIndex <= autoE4650178_ae ; lv_pingIndex += 1 ) {
            libAIAI_gv_heroAITeamDefendTownPingData[lv_teamIndex].lv_townPings[lv_pingIndex].lv_pingExpireTime = 0.0;
        }
        libAIAI_gv_heroAITeamDefendCorePingData[lv_teamIndex].lv_pingExpireTime = 0.0;
        libAIAI_gv_heroAITeamFocusCorePingData[lv_teamIndex].lv_pingExpireTime = 0.0;
        auto69403840_ae = libAIAI_gv_heroAIMaxHeroPingCount;
        lv_pingIndex = 0;
        for ( ; lv_pingIndex <= auto69403840_ae ; lv_pingIndex += 1 ) {
            libAIAI_gv_heroAITeamHeroPingData[lv_teamIndex].lv_heroPings[lv_pingIndex].lv_pingExpireTime = 0.0;
        }
        autoE5F9996F_ae = libAIAI_gv_heroAIMaxLanerMercPingCount;
        lv_pingIndex = 0;
        for ( ; lv_pingIndex <= autoE5F9996F_ae ; lv_pingIndex += 1 ) {
            libAIAI_gv_heroAITeamLanerMercPingData[lv_teamIndex].lv_lanerMercPings[lv_pingIndex].lv_pingExpireTime = 0.0;
        }
        auto69E69327_ae = libAIAI_gv_heroAIMaxTownPingCount;
        lv_pingIndex = 0;
        for ( ; lv_pingIndex <= auto69E69327_ae ; lv_pingIndex += 1 ) {
            libAIAI_gv_heroAITeamPushTownPingData[lv_teamIndex].lv_townPings[lv_pingIndex].lv_pingExpireTime = 0.0;
        }
        libAIAI_gv_heroAIPortalCount[lv_teamIndex] = 0;
    }
    auto8F53BD22_ae = libCore_gv_bALMaxPlayers;
    lv_playerIndex = 0;
    for ( ; lv_playerIndex <= auto8F53BD22_ae ; lv_playerIndex += 1 ) {
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_allowedToChooseTalentsTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_arrivedAtCampTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_avoidAOETimeout = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_castTacticalTimeout = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_focusHeroTimeout = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_harassInJungleTimeout = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_hSMapStateNextConsiderTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_lastRetreatStartTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_leaveSpawnTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_minionBattleAttackTimeout = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_minionBattleHarassTimeout = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_minionBattleRetreatTimeout = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_moveStepNextConsiderTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_moveToCampStartTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_nextChangeLanesConsiderTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_nextFocusHeroCheckTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_nextHarassInJungleCheckTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_nextHumanPlayerAssistingDistanceCheckTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_nextLaneOffsetChangeTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_nextMinionBattleAttackTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_nextMinionBattleRepositionRecalculateTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_nextPaceAroundRepositionTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_nextTearGuardPositionUpdateTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_nextWaitForGameToStartRepositionTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_nextWaitingRepositionTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_nextCloakRevealTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_nextEvalUpdateTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_nextOffensiveSpellCheckTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_paceAroundTimeout = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_safeInJungleStartTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_safeInLaneStartTime = 0.0;
        libAIAI_gv_aIHeroes[lv_playerIndex].lv_timeEnteredState = 0.0;
        libAIAI_gv_heroAIDamageTracking[lv_playerIndex].lv_lastTimeAttacked = -60.0;
    }
}

void libAIAI_gf_HeroAIInitializeItemData () {
    // Variable Declarations
    int lv_index;

    // Variable Initialization
    lv_index = 1;

    // Implementation
    libAIAI_gv_heroAIItemData[lv_index].lv_item = "TalentFirstAid";
    libAIAI_gv_heroAIItemData[lv_index].lv_itemType = libAIAI_ge_HeroAISpellType_SelfBuff;
    lv_index = (lv_index + 1);
    libAIAI_gv_heroAIItemData[lv_index].lv_item = "TalentStoneskin";
    libAIAI_gv_heroAIItemData[lv_index].lv_itemType = libAIAI_ge_HeroAISpellType_SelfBuff;
    lv_index = (lv_index + 1);
    libAIAI_gv_heroAIItemData[lv_index].lv_item = "TalentBloodForBlood";
    libAIAI_gv_heroAIItemData[lv_index].lv_itemType = libAIAI_ge_HeroAISpellType_TargetEnemy;
    lv_index = (lv_index + 1);
    libAIAI_gv_heroAIItemData[lv_index].lv_item = "TalentDash";
    libAIAI_gv_heroAIItemData[lv_index].lv_itemType = libAIAI_ge_HeroAISpellType_SelfBuff;
    lv_index = (lv_index + 1);
    libAIAI_gv_heroAIItemData[lv_index].lv_item = "TalentDeafeningRoar";
    libAIAI_gv_heroAIItemData[lv_index].lv_itemType = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
    lv_index = (lv_index + 1);
    libAIAI_gv_heroAIItemData[lv_index].lv_item = "TalentRewind";
    libAIAI_gv_heroAIItemData[lv_index].lv_itemType = libAIAI_ge_HeroAISpellType_Other;
    lv_index = (lv_index + 1);
}

void libAIAI_gf_HeroAIRegisterPortalPair (int lp_player, unit lp_portalIn, unit lp_portalOut, fixed lp_useTime, fixed lp_duration, string lp_portalAbility) {
    // Variable Declarations
    int lv_teamIndex;

    // Variable Initialization

    // Implementation
    AIAddPortal(lp_player, false, lp_portalIn, lp_portalOut, lp_useTime, lp_duration, lp_portalAbility);
    lv_teamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_player);
    if ((libAIAI_gv_heroAIPortalCount[lv_teamIndex] < libAIAI_gv_heroAIMaxPortalPairs)) {
        libAIAI_gv_heroAIPortals[lv_teamIndex][libAIAI_gv_heroAIPortalCount[lv_teamIndex]].lv_portalIn = lp_portalIn;
        libAIAI_gv_heroAIPortals[lv_teamIndex][libAIAI_gv_heroAIPortalCount[lv_teamIndex]].lv_portalInPosition = UnitGetPosition(lp_portalIn);
        libAIAI_gv_heroAIPortals[lv_teamIndex][libAIAI_gv_heroAIPortalCount[lv_teamIndex]].lv_portalOut = lp_portalOut;
        libAIAI_gv_heroAIPortals[lv_teamIndex][libAIAI_gv_heroAIPortalCount[lv_teamIndex]].lv_portalOutPosition = UnitGetPosition(lp_portalOut);
        libAIAI_gv_heroAIPortals[lv_teamIndex][libAIAI_gv_heroAIPortalCount[lv_teamIndex]].lv_portalAbility = AbilityCommand(lp_portalAbility, 0);
        libAIAI_gv_heroAIPortalCount[lv_teamIndex] += 1;
    }

}

void libAIAI_gf_HeroAIUnregisterPortalPair (int lp_player, unit lp_portalIn) {
    int autoB527C57F_ae;

    // Variable Declarations
    int lv_teamIndex;
    int lv_portalIndex;

    // Variable Initialization

    // Implementation
    AIRemovePortal(lp_portalIn);
    lv_teamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_player);
    autoB527C57F_ae = (libAIAI_gv_heroAIPortalCount[lv_teamIndex] - 1);
    lv_portalIndex = 0;
    for ( ; lv_portalIndex <= autoB527C57F_ae ; lv_portalIndex += 1 ) {
        if ((lp_portalIn == libAIAI_gv_heroAIPortals[lv_teamIndex][lv_portalIndex].lv_portalIn)) {
            libAIAI_gv_heroAIPortalCount[lv_teamIndex] -= 1;
            libAIAI_gv_heroAIPortals[lv_teamIndex][lv_portalIndex].lv_portalIn = libAIAI_gv_heroAIPortals[lv_teamIndex][libAIAI_gv_heroAIPortalCount[lv_teamIndex]].lv_portalIn;
            libAIAI_gv_heroAIPortals[lv_teamIndex][lv_portalIndex].lv_portalInPosition = libAIAI_gv_heroAIPortals[lv_teamIndex][libAIAI_gv_heroAIPortalCount[lv_teamIndex]].lv_portalInPosition;
            libAIAI_gv_heroAIPortals[lv_teamIndex][lv_portalIndex].lv_portalOut = libAIAI_gv_heroAIPortals[lv_teamIndex][libAIAI_gv_heroAIPortalCount[lv_teamIndex]].lv_portalOut;
            libAIAI_gv_heroAIPortals[lv_teamIndex][lv_portalIndex].lv_portalOutPosition = libAIAI_gv_heroAIPortals[lv_teamIndex][libAIAI_gv_heroAIPortalCount[lv_teamIndex]].lv_portalOutPosition;
            libAIAI_gv_heroAIPortals[lv_teamIndex][lv_portalIndex].lv_portalAbility = libAIAI_gv_heroAIPortals[lv_teamIndex][libAIAI_gv_heroAIPortalCount[lv_teamIndex]].lv_portalAbility;
            break;
        }

    }
}

int libAIAI_gf_HeroAIFindPortalToDestination (int lp_trigPlayer, point lp_destination, fixed lp_distanceToDestination) {
    int autoF7E7952B_ae;

    // Variable Declarations
    int lv_teamIndex;
    point lv_playerPosition;
    int lv_loopPortalIndex;
    fixed lv_loopPortalDistanceTotal;
    int lv_bestPortalIndex;
    fixed lv_bestPortalDistanceTotal;

    // Variable Initialization
    lv_bestPortalIndex = -1;
    lv_bestPortalDistanceTotal = (lp_distanceToDestination - libAIAI_gv_heroAIPortalUsageDistancePenalty);

    // Implementation
    lv_teamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer);
    lv_playerPosition = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    autoF7E7952B_ae = (libAIAI_gv_heroAIPortalCount[lv_teamIndex] - 1);
    lv_loopPortalIndex = 0;
    for ( ; lv_loopPortalIndex <= autoF7E7952B_ae ; lv_loopPortalIndex += 1 ) {
        lv_loopPortalDistanceTotal = (DistanceBetweenPoints(lv_playerPosition, libAIAI_gv_heroAIPortals[lv_teamIndex][lv_loopPortalIndex].lv_portalInPosition) + DistanceBetweenPoints(libAIAI_gv_heroAIPortals[lv_teamIndex][lv_loopPortalIndex].lv_portalOutPosition, lp_destination));
        if ((lv_loopPortalDistanceTotal < lv_bestPortalDistanceTotal)) {
            lv_bestPortalDistanceTotal = lv_loopPortalDistanceTotal;
            lv_bestPortalIndex = lv_loopPortalIndex;
        }

    }
    return lv_bestPortalIndex;
}

text libAIAI_gf_HeroAIDifficultyDisplayText (int lp_player) {
    int autoAFC95489_val;

    // Implementation
    autoAFC95489_val = libAIAI_gv_aIHeroes[lp_player].lv_difficulty;
    if (autoAFC95489_val == libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy) {
        return StringExternal("Param/Value/lib_AIAI_F3DEE6F6");
    }
    else if (autoAFC95489_val == libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally) {
        return StringExternal("Param/Value/lib_AIAI_F94BE010");
    }
    else if (autoAFC95489_val == libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy) {
        return StringExternal("Param/Value/lib_AIAI_2E625D66");
    }
    else if (autoAFC95489_val == libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly) {
        return StringExternal("Param/Value/lib_AIAI_846F1ECA");
    }
    else if (autoAFC95489_val == libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode) {
        return StringExternal("Param/Value/lib_AIAI_40C01A05");
    }
    else if (autoAFC95489_val == libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy) {
        return StringExternal("Param/Value/lib_AIAI_25BF051E");
    }
    else if (autoAFC95489_val == libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly) {
        return StringExternal("Param/Value/lib_AIAI_001484B6");
    }
    else if (autoAFC95489_val == libAIAI_ge_HeroAIDifficulty_HeroAIEasy) {
        return StringExternal("Param/Value/lib_AIAI_95BDCE78");
    }
    else if (autoAFC95489_val == libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly) {
        return StringExternal("Param/Value/lib_AIAI_7D80355C");
    }
    else if (autoAFC95489_val == libAIAI_ge_HeroAIDifficulty_HeroAIMedium) {
        return StringExternal("Param/Value/lib_AIAI_0B6F66E6");
    }
    else if (autoAFC95489_val == libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard) {
        return StringExternal("Param/Value/lib_AIAI_D85DF7F9");
    }
    else if (autoAFC95489_val == libAIAI_ge_HeroAIDifficulty_HeroAIElite) {
        return StringExternal("Param/Value/lib_AIAI_1F45ECCF");
    }
    else {
        return StringExternal("Param/Value/lib_AIAI_D45E7A83");
    }
}

void libAIAI_gf_HeroAIInitializeHeroTierData () {
    // Variable Declarations
    int lv_tierIndex;
    int lv_arrayIndex;

    // Variable Initialization

    // Implementation
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierLow, "Diablo");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierLow, "DemonHunter");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierLow, "Kerrigan");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierLow, "Malfurion");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierLow, "Muradin");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierLow, "Tychus");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierLow, "Uther");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierLow, "Raynor");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierLow, "LiLi");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "Arthas");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "Stitches");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "Tassadar");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "Tyrande");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "SgtHammer");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "WitchDoctor");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "Barbarian");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "L90ETC");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "Falstad");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "Nova");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "Illidan");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "Tinker");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "Tyrael");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "Zeratul");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "Abathur");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "FaerieDragon");
    libCore_gf_CallRegisteredSegregationTriggers(libCore_ge_SegregationTriggerTypes_HeroAIInitializeHeroTierData);
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "Rehgar");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "Azmodan");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "Zagara");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "Chen");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "Murky");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "Anubarak");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "Kaelthas");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "Jaina");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "Crusader");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "Thrall");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "Butcher");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "Sylvanas");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "LostVikings");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "Leoric");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "Rexxar");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "Monk");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "Artanis");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "Medic");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "Dryad");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierMid, "Greymane");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "Wizard");
    libAIAI_gf_HeroAIAddHeroToTierData(libAIAI_ge_HeroAIHeroTiers_TierHigh, "Necromancer");
}

void libAIAI_gf_HeroAIAddHeroToTierData (int lp_tier, string lp_hero) {
    // Variable Declarations
    int lv_index;
    int lv_aITierHeroIndex;

    // Variable Initialization

    // Implementation
    DataTableSetInt(true, ("HeroIndex_" + IntToString(libCore_gf_GetIndexFromHero(lp_hero)) + "_HeroAITier"), (lp_tier));
}

void libAIAI_gf_HeroAIGeneralPreInit () {
    int auto65D01E62_ae;
    int auto622CE5EF_ae;
    int auto622CE5EF_ai;
    int auto24B01FD4_val;
    int auto0C98E68B_ae;
    int auto0C98E68B_ai;
    int autoBBF9ABE8_ae;
    int autoBBF9ABE8_ai;
    int auto6712195B_ae;
    int auto6712195B_ai;
    int auto523DE555_ae;
    int auto523DE555_ai;

    // Variable Declarations
    int lv_loopIndex;
    int lv_currentPlayer;
    int lv_mainCampIndex;
    int lv_insertCampIndex;

    // Variable Initialization

    // Implementation
    libAIAI_gf_HeroAIInitializeItemData();
    libAIAI_gf_HeroAIInitializeHeroTierData();
    TriggerEnable(libAIAI_gt_HeroAITakeOverHero, true);
    TriggerEnable(libAIAI_gt_HeroAIReleaseHeroControl, true);
    auto65D01E62_ae = libCore_gv_bALMaxPlayers;
    lv_currentPlayer = 1;
    for ( ; lv_currentPlayer <= auto65D01E62_ae ; lv_currentPlayer += 1 ) {
        PlayerSetAllowAIControl(lv_currentPlayer, true);
    }
    auto622CE5EF_ae = libCore_gv_bALMaxPlayers;
    auto622CE5EF_ai = 1;
    lv_currentPlayer = 1;
    for ( ; ( (auto622CE5EF_ai >= 0 && lv_currentPlayer <= auto622CE5EF_ae) || (auto622CE5EF_ai <= 0 && lv_currentPlayer >= auto622CE5EF_ae) ) ; lv_currentPlayer += auto622CE5EF_ai ) {
        if ((PlayerStatus(lv_currentPlayer) != c_playerStatusUnused)) {
            if ((PlayerType(lv_currentPlayer) != c_playerTypeComputer) && (PlayerStatus(lv_currentPlayer) != c_playerStatusLeft)) {
            }
            else {
                if ((libAIAI_gv_aIHeroes[lv_currentPlayer].lv_difficulty == libAIAI_ge_HeroAIDifficulty_Null)) {
                    auto24B01FD4_val = PlayerDifficulty(lv_currentPlayer);
                    if (auto24B01FD4_val == 1) {
                        if ((libAIAI_gf_HeroAIPreInitHasAlliedHuman(libGame_gv_players[lv_currentPlayer].lv_faction) == true)) {
                            libAIAI_gv_aIHeroes[lv_currentPlayer].lv_difficulty = libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly;
                        }
                        else {
                            libAIAI_gv_aIHeroes[lv_currentPlayer].lv_difficulty = libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy;
                        }
                    }
                    else if (auto24B01FD4_val == 2) {
                        if ((libAIAI_gf_HeroAIPreInitHasAlliedHuman(libGame_gv_players[lv_currentPlayer].lv_faction) == true)) {
                            libAIAI_gv_aIHeroes[lv_currentPlayer].lv_difficulty = libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly;
                        }
                        else {
                            libAIAI_gv_aIHeroes[lv_currentPlayer].lv_difficulty = libAIAI_ge_HeroAIDifficulty_HeroAIEasy;
                        }
                    }
                    else if (auto24B01FD4_val == 3) {
                        libAIAI_gv_aIHeroes[lv_currentPlayer].lv_difficulty = libAIAI_ge_HeroAIDifficulty_HeroAIMedium;
                    }
                    else if (auto24B01FD4_val == 6) {
                        libAIAI_gv_aIHeroes[lv_currentPlayer].lv_difficulty = libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard;
                    }
                    else if (auto24B01FD4_val == 7) {
                        libAIAI_gv_aIHeroes[lv_currentPlayer].lv_difficulty = libAIAI_ge_HeroAIDifficulty_HeroAIElite;
                    }
                    else {
                        libAIAI_gv_aIHeroes[lv_currentPlayer].lv_difficulty = libAIAI_ge_HeroAIDifficulty_HeroAIElite;
                    }
                }

            }
        }

    }
    libAIAI_gf_HeroAIUpdateTeamDifficulty(libGame_ge_Faction_Order);
    libAIAI_gf_HeroAIUpdateTeamDifficulty(libGame_ge_Faction_Chaos);
    libAIAI_gv_aIHeroCampNumAttackersBonus[2] = libAIAI_gv_aIHeroCampTwoAttackerBonus;
    libAIAI_gv_aIHeroCampNumAttackersBonus[3] = libAIAI_gv_aIHeroCampThreeAttackerBonus;
    libAIAI_gv_aIHeroCampNumAttackersBonus[4] = libAIAI_gv_aIHeroCampFourAttackerBonus;
    libAIAI_gv_aIHeroCampNumAttackersBonus[5] = libAIAI_gv_aIHeroCampFiveAttackerBonus;
    auto0C98E68B_ae = libMapM_gv_jungleNumberOfCreepCamps;
    auto0C98E68B_ai = 1;
    lv_mainCampIndex = 1;
    for ( ; ( (auto0C98E68B_ai >= 0 && lv_mainCampIndex <= auto0C98E68B_ae) || (auto0C98E68B_ai <= 0 && lv_mainCampIndex >= auto0C98E68B_ae) ) ; lv_mainCampIndex += auto0C98E68B_ai ) {
        if ((libMapM_gv_jungleCreepCamps[lv_mainCampIndex].lv_mapDataCampCaptainSpawnPoint != null) && ((libMapM_gv_jungleCreepCamps[lv_mainCampIndex].lv_mapDataCampType == libMapM_ge_JungleCampTypes_MercCamp) || (libMapM_gv_jungleCreepCamps[lv_mainCampIndex].lv_mapDataCampType == libMapM_ge_JungleCampTypes_DoubloonSmallCamp))) {
            if ((libCore_gf_TestLocationClosertoFactionSide(libMapM_gv_jungleCreepCamps[lv_mainCampIndex].lv_mapDataCampCaptainSpawnPoint, libGame_ge_Faction_Order, 0.8) == true)) {
                autoBBF9ABE8_ae = libMapM_gv_jungleNumberOfCreepCamps;
                autoBBF9ABE8_ai = 1;
                lv_insertCampIndex = 1;
                for ( ; ( (autoBBF9ABE8_ai >= 0 && lv_insertCampIndex <= autoBBF9ABE8_ae) || (autoBBF9ABE8_ai <= 0 && lv_insertCampIndex >= autoBBF9ABE8_ae) ) ; lv_insertCampIndex += autoBBF9ABE8_ai ) {
                    if ((libAIAI_gv_heroAIOrderMercCampList[lv_insertCampIndex] <= 0)) {
                        libAIAI_gv_heroAIOrderMercCampList[lv_insertCampIndex] = lv_mainCampIndex;
                        break;
                    }

                }
            }
            else {
                if ((libCore_gf_TestLocationClosertoFactionSide(libMapM_gv_jungleCreepCamps[lv_mainCampIndex].lv_mapDataCampCaptainSpawnPoint, libGame_ge_Faction_Chaos, 0.8) == true)) {
                    auto523DE555_ae = libMapM_gv_jungleNumberOfCreepCamps;
                    auto523DE555_ai = 1;
                    lv_insertCampIndex = 1;
                    for ( ; ( (auto523DE555_ai >= 0 && lv_insertCampIndex <= auto523DE555_ae) || (auto523DE555_ai <= 0 && lv_insertCampIndex >= auto523DE555_ae) ) ; lv_insertCampIndex += auto523DE555_ai ) {
                        if ((libAIAI_gv_heroAIChaosMercCampList[lv_insertCampIndex] <= 0)) {
                            libAIAI_gv_heroAIChaosMercCampList[lv_insertCampIndex] = lv_mainCampIndex;
                            break;
                        }

                    }
                }
                else {
                    auto6712195B_ae = libMapM_gv_jungleNumberOfCreepCamps;
                    auto6712195B_ai = 1;
                    lv_insertCampIndex = 1;
                    for ( ; ( (auto6712195B_ai >= 0 && lv_insertCampIndex <= auto6712195B_ae) || (auto6712195B_ai <= 0 && lv_insertCampIndex >= auto6712195B_ae) ) ; lv_insertCampIndex += auto6712195B_ai ) {
                        if ((libAIAI_gv_heroAIMiddleMercCampList[lv_insertCampIndex] <= 0)) {
                            libAIAI_gv_heroAIMiddleMercCampList[lv_insertCampIndex] = lv_mainCampIndex;
                            break;
                        }

                    }
                }
            }
        }

    }
    libAIAI_gf_HeroAITalentPreInit();
    libCore_gf_RegisterSegregationTrigger(libCore_ge_SegregationTriggerTypes_HeroAIDebuggingUpdateStatus, libAIAI_gt_HeroAILostVikingsDebuggingUpdate);
    AIAddTeamRepresentative(libCore_gv_cOMPUTER_TeamOrder);
    AIAddTeamRepresentative(libCore_gv_cOMPUTER_TeamChaos);
}

void libAIAI_gf_HeroAIInitAbilities (int lp_player) {
    int auto2A636CB7_ae;
    string auto8FA3803F_val;

    // Variable Declarations
    int lv_idx;

    // Variable Initialization

    // Implementation
    libAIAI_gv_aIHeroes[lp_player].lv_postStateUpdate = null;
    libAIAI_gv_aIHeroes[lp_player].lv_startOffensiveHealth = libAIAI_gv_aIHeroMinOffensiveHealth[(libAIAI_gv_aIHeroes[lp_player].lv_difficulty)];
    libAIAI_gv_aIHeroes[lp_player].lv_endOffensiveHealth = (libAIAI_gv_aIHeroes[lp_player].lv_startOffensiveHealth - 10.0);
    libAIAI_gv_aIHeroes[lp_player].lv_returnToSpawnHealth = libAIAI_gv_aIHeroTeleportPercent[(libAIAI_gv_aIHeroes[lp_player].lv_difficulty)];
    libAIAI_gv_aIHeroes[lp_player].lv_enemyEvalMultiplier = 1.0;
    libAIAI_gv_aIHeroes[lp_player].lv_attackAbility = AbilityCommand("attack", 0);
    libAIAI_gv_aIHeroes[lp_player].lv_hasMount = true;
    libAIAI_gv_aIHeroes[lp_player].lv_mountAbility = AbilityCommand("Mount", 0);
    libAIAI_gv_aIHeroes[lp_player].lv_dismountAbility = AbilityCommand("Dismount", 0);
    libAIAI_gv_aIHeroes[lp_player].lv_mountBehavior = "Mounted";
    libAIAI_gv_aIHeroes[lp_player].lv_speedAbility = null;
    libAIAI_gv_aIHeroes[lp_player].lv_teleportAbility = null;
    libAIAI_gv_aIHeroes[lp_player].lv_maxTeleportDistance = 0.0;
    libAIAI_gv_aIHeroes[lp_player].lv_teleportRequiresVisibility = false;
    libAIAI_gv_aIHeroes[lp_player].lv_teleportRequiresShrub = false;
    libAIAI_gv_aIHeroes[lp_player].lv_teleportToAllyAbility = null;
    libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = false;
    libAIAI_gv_aIHeroes[lp_player].lv_buffGlobeGivesEnergy = false;
    libAIAI_gv_aIHeroes[lp_player].lv_buffGlobeGivesHealth = false;
    libAIAI_gv_aIHeroes[lp_player].lv_buffGlobeMustBeOwned = false;
    libAIAI_gv_aIHeroes[lp_player].lv_buffGlobeSecondaryType = null;
    libAIAI_gv_aIHeroes[lp_player].lv_buffGlobeStackBehavior = null;
    libAIAI_gv_aIHeroes[lp_player].lv_buffGlobeStackEffectValidation = null;
    libAIAI_gv_aIHeroes[lp_player].lv_buffGlobeStackMax = 0;
    libAIAI_gv_aIHeroes[lp_player].lv_buffGlobeType = null;
    libAIAI_gv_aIHeroes[lp_player].lv_independence = libAIAI_gv_aIHeroNormalIndependenceLevel;
    libAIAI_gv_aIHeroes[lp_player].lv_aIBehaviorsEnabled = true;
    auto2A636CB7_ae = libCore_gv_dataHeroesMaxAbilitiesPerHero;
    lv_idx = 0;
    for ( ; lv_idx <= auto2A636CB7_ae ; lv_idx += 1 ) {
        libAIAI_gv_aIHeroes[lp_player].lv_abilities[lv_idx].lv_useOnlyToRevealCloaked = false;
    }
    auto8FA3803F_val = UnitGetType(libAIAI_gv_aIHeroes[lp_player].lv_currentHeroUnit);
    if (auto8FA3803F_val == "HeroMuradin") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("MuradinStormBolt", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[0] = 8.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("MuradinThunderclap", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("MuradinDwarfToss", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("MuradinAvatar", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("MuradinHaymaker", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_TargetEnemy;
    }
    else if (auto8FA3803F_val == "HeroStitches") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = null;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("StitchesSlam", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[1] = 8.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("StitchesDevour", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[2] = 3.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("StitchesPutridBile", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("StitchesGorge", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_TargetEnemy;
    }
    else if (auto8FA3803F_val == "HeroNova") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("NovaSnipeStorm", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[0] = 10.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("NovaPinningShot", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("NovaHoloDecoy", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("NovaTripleTap", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("NovaPrecisionStrike", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointEnemy;
    }
    else if (auto8FA3803F_val == "HeroKerrigan") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("KerriganRavage", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("KerriganCrushingGrip", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("KerriganPrimalGrasp", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[2] = 7.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("KerriganSummonUltralisk", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("KerriganMaelstrom", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
    }
    else if (auto8FA3803F_val == "HeroZeratul") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("ZeratulCleave", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("ZeratulSingularitySpike", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[1] = 9.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("ZeratulBlinkStorm", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PointFriendly;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("ZeratulShadowAssault", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("ZeratulVoidPrison", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointEnemy;
    }
    else if (auto8FA3803F_val == "HeroSgtHammer") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasMount = false;
        libAIAI_gv_aIHeroes[lp_player].lv_speedAbility = AbilityCommand("Thrusters", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("SgtHammerSiegeMode", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_Null;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("SgtHammerConcussiveBlast", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[1] = 5.5;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("SgtHammerMineField", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("SgtHammerNapalmStrike", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("SgtHammerBluntForceGun", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointEnemy;
    }
    else if (auto8FA3803F_val == "HeroUther") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("UtherHolyLight", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_TargetFriendly;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("UtherHolyRadiance", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[1] = 11.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("UtherHammerOfJustice", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("UtherDivineIntervention", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_TargetFriendly;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("UtherDivineStorm", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_SelfBuff;
    }
    else if (auto8FA3803F_val == "HeroTassadar") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("TassadarPlasmaShield", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_TargetFriendly;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("TassadarPsionicStorm", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("TassadarDimensionalShift", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("TassadarArchon", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("TassadarForceWall", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointEnemy;
    }
    else if (auto8FA3803F_val == "HeroArthas") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("ArthasDeathCoil", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("ArthasHowlingBlast", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("ArthasFrozenTempest", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("ArthasArmyOfTheDead", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("ArthasSummonSindragosa", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointEnemy;
    }
    else if (auto8FA3803F_val == "HeroTinker") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_buffGlobeType = "TinkerSalvageScrap";
        libAIAI_gv_aIHeroes[lp_player].lv_buffGlobeMustBeOwned = true;
        libAIAI_gv_aIHeroes[lp_player].lv_buffGlobeGivesEnergy = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("TinkerRockItTurret", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointFriendly;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("TinkerDethLazorCharged", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_Null;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("TinkerXplodiumBomb", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("TinkerGravOBomb3000", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = null;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_Null;
    }
    else if (auto8FA3803F_val == "HeroWitchDoctor") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("WitchDoctorCorpseSpiders", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("WitchDoctorZombieWall", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("WitchDoctorPlagueofToads", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[2] = 10.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("WitchDoctorGargantuan", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("WitchDoctorRavenousSpirit", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointEnemy;
    }
    else if (auto8FA3803F_val == "HeroL90ETC") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("L90ETCPowerslide", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[0] = 7.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("L90ETCFaceMelt", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("L90ETCGuitarSolo", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("L90ETCStageDive", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("L90ETCMoshPit", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
    }
    else if (auto8FA3803F_val == "HeroIllidan") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("IllidanDive", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("IllidanSweepingStrike", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[1] = 6.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("IllidanEvasion", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("IllidanTheHunt", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("IllidanMetamorphosisTargeted", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointEnemy;
    }
    else if (auto8FA3803F_val == "HeroMalfurion") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("MalfurionRegrowth", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_TargetFriendly;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("MalfurionMoonfire", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("MalfurionEntanglingRoots", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("MalfurionTranquility", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PBaoeFriendly;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("MalfurionTwilightDream", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
    }
    else if (auto8FA3803F_val == "HeroFalstad") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasMount = false;
        libAIAI_gv_aIHeroes[lp_player].lv_teleportAbility = AbilityCommand("FalstadFlight", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("FalstadHammerang", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[0] = 10.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("FalstadLightningRod", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("FalstadBarrelRoll", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_Null;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[2] = 11.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("FalstadHinterlandBlast", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("FalstadMightyGust", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointEnemy;
    }
    else if (auto8FA3803F_val == "HeroDiablo") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("DiabloShadowCharge", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("DiabloFireStomp", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("DiabloOverpower", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[2] = 3.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("DiabloLightningBreath", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("DiabloApocalypse", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_SelfBuff;
    }
    else if (auto8FA3803F_val == "HeroTychus") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("TychusGrenade", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("TychusRunAndGun", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[1] = 9.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("TychusOverkillTargeted", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("TychusOdin", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("TychusDrakkenLaserDrill", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointEnemy;
    }
    else if (auto8FA3803F_val == "HeroDemonHunter") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("DemonHunterHungeringArrow", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[0] = 8.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("DemonHunterMultishot", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[1] = 10.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("DemonHunterVault", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_Other;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("DemonHunterStrafe", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("DemonHunterRainOfVengeance", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointEnemy;
    }
    else if (auto8FA3803F_val == "HeroTyrande") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("TyrandeLightofElune", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_TargetFriendly;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("TyrandeSentinelShot", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointHeroEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[1] = 200.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("TyrandeLunarFlare", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("TyrandeShadowstalk", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("TyrandeStarfall", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointEnemy;
    }
    else if (auto8FA3803F_val == "HeroTyrael") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("TyraelElDruinsMight", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("TyraelRighteousness", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("TyraelSmite", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("TyraelJudgement", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("TyraelSanctificationUpdated", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_SelfBuff;
    }
    else if (auto8FA3803F_val == "HeroBarbarian") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("BarbarianAncientSpear", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[0] = 8.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("BarbarianSeismicSlam", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[1] = 3.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("BarbarianWhirlwind", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("BarbarianWhirlwindCancel", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("BarbarianLeap", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("BarbarianWrathoftheBerserker", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_SelfBuff;
    }
    else if (auto8FA3803F_val == "HeroRaynor") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("RaynorPenetratingRound", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[0] = 10.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("RaynorInspire", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("RaynorAdrenalineRush", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_Other;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("RaynorHyperion", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("RaynorRaynorsBanshee", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_SelfBuff;
    }
    else if (auto8FA3803F_val == "HeroFaerieDragon") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasMount = false;
        libAIAI_gv_aIHeroes[lp_player].lv_teleportToAllyAbility = AbilityCommand("FaerieDragonPhaseShiftFlight", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("FaerieDragonArcaneFlare", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("FaerieDragonPolymorph", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("FaerieDragonPixieDust", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_TargetFriendly;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("FaerieDragonBlinkHeal", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("FaerieDragonEmeraldWind", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
    }
    else if (auto8FA3803F_val == "HeroLiLi") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("LiLiHealingBrew", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_TargetFriendly;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("LiLiCloudSerpent", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_TargetFriendly;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("LiLiBlindingWind", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("LiLiJugof1000Cups", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("LiLiWaterDragon", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_TargetEnemy;
    }
    else if (auto8FA3803F_val == "HeroAbathur") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasMount = false;
        libAIAI_gv_aIHeroes[lp_player].lv_teleportAbility = AbilityCommand("AbathurDeepTunnel", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_teleportRequiresVisibility = true;
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("AbathurNeuralParasite", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_Other;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("AbathurSymbiote", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_Other;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("AbathurToxicNest", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_Other;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("AbathurUltimateEvolution", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_Other;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("AbathurEvolveMonstrosity", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_Other;
    }
    else if (auto8FA3803F_val == "HeroRehgar") {
        libAIAI_gv_aIHeroes[lp_player].lv_mountAbility = AbilityCommand("RehgarGhostWolfActivate", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_dismountAbility = null;
        libAIAI_gv_aIHeroes[lp_player].lv_mountBehavior = "RehgarGhostWolfBuff";
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("RehgarChainHeal", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_TargetFriendly;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("RehgarLightningShield", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_TargetFriendly;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("RehgarEarthbindTotem", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("RehgarBloodlust", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("RehgarAncestralHealing", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_TargetFriendly;
    }
    else if (auto8FA3803F_val == "HeroAzmodan") {
        libAIAI_gv_aIHeroes[lp_player].lv_mountAbility = AbilityCommand("Mount", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_dismountAbility = AbilityCommand("Dismount", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_mountBehavior = "Mounted";
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("AzmodanGlobeOfAnnihilation", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("AzmodanSummonDemonWarrior", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[1] = 12.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("AzmodanAllShallBurn", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("AzmodanBlackPool", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("AzmodanDemonicInvasion", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointEnemy;
    }
    else if (auto8FA3803F_val == "HeroZagara") {
        libAIAI_gv_aIHeroes[lp_player].lv_mountAbility = AbilityCommand("Mount", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_dismountAbility = AbilityCommand("Dismount", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_mountBehavior = "Mounted";
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("ZagaraBanelingBarrage", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[0] = 15.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("ZagaraSummonHydralisk", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("ZagaraInfestedDrop", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("ZagaraDevouringMaw", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("ZagaraSummonNydusWorm", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointFriendly;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("ZagaraSummonCreepTumor", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointFriendly;
    }
    else if (auto8FA3803F_val == "HeroChen") {
        libAIAI_gv_aIHeroes[lp_player].lv_mountAbility = AbilityCommand("Mount", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_dismountAbility = AbilityCommand("Dismount", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_mountBehavior = "Mounted";
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("ChenFlyingKick", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("ChenKegSmash", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("ChenBreathOfFire", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[2] = 7.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("ChenWanderingKeg", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("ChenStormEarthFire", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_SelfBuff;
    }
    else if (auto8FA3803F_val == "HeroMurky") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("MurkySlime", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("MurkyPufferfish", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("MurkySafetyBubble", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("MurkyMarchoftheMurlocs", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("MurkyOctoGrab", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_TargetEnemy;
    }
    else if (auto8FA3803F_val == "HeroAnubarak") {
        libAIAI_gv_aIHeroes[lp_player].lv_mountAbility = AbilityCommand("Mount", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_dismountAbility = AbilityCommand("Dismount", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_mountBehavior = "Mounted";
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("AnubarakImpale", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[0] = 11.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("AnubarakHardenCarapace", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("AnubarakBurrowCharge", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[2] = 11.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("AnubarakCarrionSwarm", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("AnubarakCocoon", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_TargetEnemy;
    }
    else if (auto8FA3803F_val == "HeroKaelthas") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("KaelthasFlamestrike", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("KaelthasLivingBomb", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("KaelthasGravityLapse", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[2] = 8.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("KaelthasPhoenix", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("KaelthasPyroblast", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_TargetEnemy;
    }
    else if (auto8FA3803F_val == "HeroJaina") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("JainaFrostbolt", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[0] = 14.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("JainaBlizzard", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("JainaConeOfCold", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[2] = 7.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("JainaRingOfFrost", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("JainaSummonWaterElemental", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointFriendly;
    }
    else if (auto8FA3803F_val == "HeroCrusader") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("CrusaderPunish", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[0] = 3.5;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("CrusaderCondemn", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("CrusaderShieldGlare", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[2] = 10.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("CrusaderFallingSword", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("CrusaderBlessedShield", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointEnemy;
    }
    else if (auto8FA3803F_val == "HeroThrall") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("ThrallChainLightning", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("ThrallFeralSpirit", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[1] = 10.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("ThrallWindfury", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("ThrallEarthquake", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("ThrallSundering", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointEnemy;
    }
    else if (auto8FA3803F_val == "HeroButcher") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_buffGlobeType = "ButcherFreshMeat5Stack";
        libAIAI_gv_aIHeroes[lp_player].lv_buffGlobeSecondaryType = "ButcherFreshMeat1Stack";
        libAIAI_gv_aIHeroes[lp_player].lv_buffGlobeMustBeOwned = true;
        libAIAI_gv_aIHeroes[lp_player].lv_buffGlobeGivesHealth = PlayerHasTalent(libCore_gv_segTriggerPlayer, "ButcherMasteryFreshMeatVictuals");
        libAIAI_gv_aIHeroes[lp_player].lv_buffGlobeStackEffectValidation = "ButcherFreshMeatApplyOneStack";
        libAIAI_gv_aIHeroes[lp_player].lv_buffGlobeStackBehavior = "FreshMeatStack";
        libAIAI_gv_aIHeroes[lp_player].lv_buffGlobeStackMax = CatalogFieldValueGetAsInt(c_gameCatalogBehavior, "FreshMeatStack", "MaxStackCount", c_playerAny);
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("ButcherHamstring", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[0] = 7.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("ButcherButchersBrand", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[1] = 3.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("ButcherRuthlessOnslaught", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("ButcherLambToTheSlaughter", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("ButcherFurnaceBlast", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
    }
    else if (auto8FA3803F_val == "HeroSylvanas") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("SylvanasWitheringFire", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("SylvanasShadowDagger", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("SylvanasHauntingWave", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[2] = 14.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("SylvanasWailingArrow", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("SylvanasPossession", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_TargetEnemy;
    }
    else if (auto8FA3803F_val == "HeroLostVikingsController") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasMount = false;
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_speedAbility = AbilityCommand("LostVikingsGoGoGo", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("LostVikingsPressA", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("LostVikingsSpinToWin", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("LostVikingsNordicAttackSquad", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("LostVikingsLongboatRaidNewer", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = null;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_Null;
    }
    else if (auto8FA3803F_val == "HeroLeoric") {
        libAIAI_gv_aIHeroes[lp_player].lv_postStateUpdate = libAIAI_gt_HeroAILeoricPostUpdate;
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_enemyEvalMultiplier = 0.8;
        libAIAI_gv_aIHeroes[lp_player].lv_startOffensiveHealth -= 10.0;
        libAIAI_gv_aIHeroes[lp_player].lv_endOffensiveHealth -= 10.0;
        libAIAI_gv_aIHeroes[lp_player].lv_returnToSpawnHealth -= 10.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("LeoricSkeletalSwingTargetedReady", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[0] = 5.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("LeoricDrainHope", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointHeroEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[1] = 9.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("LeoricWraithWalk", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("LeoricMarchoftheBlackKing", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("LeoricEntomb", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_hSDeadStateTrigger = libAIAI_gt_HeroAIDeadStateLeoric;
    }
    else if (auto8FA3803F_val == "HeroMonk") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("MonkRadiantDash", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("MonkBreathOfHeaven", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PBaoeFriendly;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("MonkDeadlyReach", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("MonkSevenSidedStrike", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("MonkDivinePalm", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_TargetFriendly;
    }
    else if (auto8FA3803F_val == "HeroRexxar") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("RexxarSpiritSwoop", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[0] = 10.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("RexxarMishaChargeRedirect", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[1] = 6.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("RexxarMendPet", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("RexxarBestialWrath", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("RexxarUnleashTheBoars", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointEnemy;
    }
    else if (auto8FA3803F_val == "HeroArtanis") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("ArtanisTwinBlades", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("ArtanisBladeDash", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[2] = 8.0;
        libAIAI_gv_aIHeroes[lp_player].lv_abilities[2].lv_useOnlyToRevealCloaked = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("ArtanisSpearofAdunPurifierBeam", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_TargetHeroEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("ArtanisSpearofAdunSuppressionPulse", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointHeroEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_startOffensiveHealth -= 10.0;
        libAIAI_gv_aIHeroes[lp_player].lv_endOffensiveHealth -= 10.0;
        libAIAI_gv_aIHeroes[lp_player].lv_returnToSpawnHealth -= 10.0;
    }
    else if (auto8FA3803F_val == "HeroMedic") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_teleportAbility = AbilityCommand("MedicMedivacDropship", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_maxTeleportDistance = 100.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("MedicHealingBeam", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointFriendly;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[0] = 6.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("MedicSafeguard", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointFriendly;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("MedicDisplacementGrenade", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[2] = 15.0;
        libAIAI_gv_aIHeroes[lp_player].lv_abilities[2].lv_useOnlyToRevealCloaked = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("MedicStimDrone", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_TargetFriendly;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("MedicMedivacDropship", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_Other;
        libAIAI_gv_aIHeroes[lp_player].lv_independence = libAIAI_gv_aIHeroShouldntGoItAlone;
    }
    else if (auto8FA3803F_val == "HeroDryad") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_hasMount = false;
        libAIAI_gv_aIHeroes[lp_player].lv_speedAbility = AbilityCommand("DryadGallopingGait", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("DryadNoxiousBlossom", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[0] = 7.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("DryadCripplingSpores", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[1] = 500.0;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_Other;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("DryadWisp", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_Null;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("DryadThornwoodVine", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[3] = 10.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("DryadLeapingStrike", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[4] = 5.5;
    }
    else if (auto8FA3803F_val == "HeroGreymane") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_hasMount = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("GreymaneGilneanCocktail", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[0] = 9.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("GreymaneInnerBeast", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("GreymaneGoForTheThroat", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[3] = 5.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("GreymaneCursedBullet", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[4] = 16.0;
    }
    else if (auto8FA3803F_val == "HeroNecromancer") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_hasMount = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("NecromancerSpectralScythe", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[0] = 8.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("NecromancerCursedStrikes", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_SelfBuff;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[2] = AbilityCommand("NecromancerBonePrison", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_TargetEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[2] = 3.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("NecromancerSkeletalMages", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[3] = 12.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("NecromancerPoisonNovaInstant", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PBaoeEnemy;
    }
    else if (auto8FA3803F_val == "HeroWizard") {
        libAIAI_gv_aIHeroes[lp_player].lv_hasTactical = true;
        libAIAI_gv_aIHeroes[lp_player].lv_hasMount = true;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[0] = AbilityCommand("WizardMagicMissiles", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[0] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[0] = 12.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[1] = AbilityCommand("WizardArcaneOrb", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[1] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[1] = 15.0;
        libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_castAbility[2] = null;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[2] = libAIAI_ge_HeroAISpellType_Other;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3] = AbilityCommand("WizardDisintegrate", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[3] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[3] = 16.0;
        libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4] = AbilityCommand("WizardWaveOfForce", 0);
        libAIAI_gv_aIHeroes[lp_player].lv_abilityType[4] = libAIAI_ge_HeroAISpellType_PointEnemy;
        libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[4] = 9.0;
    }
    else {
        libAIAI_gv_heroAIInitAbilitesHeroFound = false;
        libCore_gv_segTriggerPlayer = lp_player;
        libCore_gv_segTriggerUnit = libAIAI_gv_aIHeroes[lp_player].lv_currentHeroUnit;
        libCore_gf_CallRegisteredSegregationTriggers(libCore_ge_SegregationTriggerTypes_HeroAIInitAbilities);
        if ((libAIAI_gv_heroAIInitAbilitesHeroFound == false)) {
            TextExpressionSetToken("Param/Expression/lib_AIAI_D20C6DD4", "A", UnitTypeGetName(UnitGetType(libAIAI_gv_aIHeroes[lp_player].lv_currentHeroUnit)));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_AIAI_D20C6DD4"), true);
        }
        else {
            libAIAI_gv_heroAIInitAbilitesHeroFound = false;
        }
    }
}

void libAIAI_gf_HeroAIEnableAIForPlayer (int lp_trigPlayer) {
    // Variable Declarations
    int lv_heroIndex;

    // Variable Initialization

    // Implementation
    if (((lp_trigPlayer < 1) || (lp_trigPlayer > libCore_gv_bALMaxPlayers))) {
        TextExpressionSetToken("Param/Expression/lib_AIAI_0F071560", "A", IntToText(lp_trigPlayer));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_AIAI_0F071560"), true);
        return ;
    }

    PlayerSetUnderAIControl(lp_trigPlayer, true);
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState != libAIAI_ge_HeroAIStates_HSUnused)) {
        return ;
    }

    if ((libAIAI_gv_heroAIActive == false)) {
        libAIAI_gf_HeroAIStartAI();
    }

    if ((TriggerActiveCount(libAIAI_gt_HeroAIRunMainGroupLoop) == 0)) {
        TriggerExecute(libAIAI_gt_HeroAIRunMainGroupLoop, true, false);
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty == libAIAI_ge_HeroAIDifficulty_Null)) {
        libAIAI_gf_HeroAISetAIDifficultyLevel(lp_trigPlayer, libAIAI_ge_HeroAIDifficulty_HeroAIMedium);
    }

    libAIAI_gf_HeroAIInitAbilities(lp_trigPlayer);
    libAIAI_gf_HeroAIInitTalentBuilds(lp_trigPlayer);
    libCore_gv_segTriggerPlayer = lp_trigPlayer;
    libCore_gv_segTriggerUnit = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit;
    libCore_gf_CallRegisteredSegregationTriggers(libCore_ge_SegregationTriggerTypes_HeroAIEnableAIForPlayer);
    UnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_aIBehaviorsEnabled == false)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSBusy);
    }
    else {
        if (((libAIAI_gf_HeroAIHasGameStarted() == false) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit == null))) {
            libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSWaitForGameToStart);
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextWaitForGameToStartRepositionTime = TimerGetElapsed(libGame_gv_totalTime);
        }
        else if (((libGame_gv_laneCount == 0) || (UnitIsValid(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core) == false) || (UnitIsValid(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core) == false))) {
            libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSDefault);
        }
        else if ((libGame_gv_players[lp_trigPlayer].lv_isDead == true)) {
            libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSDead);
        }
        else if ((UnitIsValid(libGame_gv_players[lp_trigPlayer].lv_activeVehicle) == true)) {
            libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        }
        else if ((libAIAI_gv_heroAIUnderworldStatus.lv_opened == true) && (libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) == true)) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToCollectSkulls = true;
            libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSUnderworldKillMinions);
        }
        else if ((libAIAI_gf_HeroAIIsPlayerAtSpawn(lp_trigPlayer) == true) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_canPortHome == true)) {
            libAIAI_gf_HeroAIStartWaitToHeal(lp_trigPlayer);
        }
        else if (true) {
            libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        }
    }
    libAIAI_gf_HeroAIUpdateAIStatus(lp_trigPlayer);
    libAIAI_gf_HeroAIUpdateTeamPlayerData(libGame_gv_players[lp_trigPlayer].lv_faction);
    AIEnableForPlayer(lp_trigPlayer, (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty));
}

void libAIAI_gf_HeroAIDisableAIForPlayer (int lp_trigPlayer) {
    // Implementation
    if (((lp_trigPlayer < 1) || (lp_trigPlayer > libCore_gv_bALMaxPlayers))) {
        TextExpressionSetToken("Param/Expression/lib_AIAI_60CE667E", "A", IntToText(lp_trigPlayer));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_AIAI_60CE667E"), true);
        return ;
    }

    PlayerSetUnderAIControl(lp_trigPlayer, false);
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSUnused)) {
        return ;
    }

    libAIAI_gf_HeroAILeaveCurrentObjective(lp_trigPlayer);
    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSUnused);
    UnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    if ((UnitIsValid(libGame_gv_players[lp_trigPlayer].lv_activeVehicle) == true)) {
        UnitIssueOrder(libGame_gv_players[lp_trigPlayer].lv_activeVehicle, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }

    if ((libAIAI_gf_MinionAIGetIndexForMinion(libGame_gv_players[lp_trigPlayer].lv_activeVehicle) > 0)) {
        libAIAI_gf_MinionAIUnhookUnitFromMinionAI(libGame_gv_players[lp_trigPlayer].lv_activeVehicle);
    }
    else {
        if ((UnitDestroyAIThinkTree(libGame_gv_players[lp_trigPlayer].lv_activeVehicle) == false)) {
        }

    }
    libAIAI_gf_HeroAIUpdateAIStatus(lp_trigPlayer);
    libAIAI_gf_HeroAIUpdateTeamPlayerData(libGame_gv_players[lp_trigPlayer].lv_faction);
    AIDisableForPlayer(lp_trigPlayer);
}

void libAIAI_gf_HeroAISetAIDifficultyLevel (int lp_player, int lp_difficulty) {
    // Implementation
    libAIAI_gv_aIHeroes[lp_player].lv_difficulty = lp_difficulty;
    if ((libGame_gv_players[lp_player].lv_faction == libGame_ge_Faction_Order)) {
        libAIAI_gf_HeroAIUpdateTeamDifficulty(libGame_ge_Faction_Order);
    }
    else {
        libAIAI_gf_HeroAIUpdateTeamDifficulty(libGame_ge_Faction_Chaos);
    }
}

void libAIAI_gf_HeroAISetupUnitDangerTracking (unit lp_unit) {
    // Implementation
    if ((libAIAI_gv_heroAIActive == true)) {
        AITrackUnitDanger(lp_unit);
    }

}

bool libAIAI_gf_HeroAIPreInitHasAlliedHuman (int lp_faction) {
    int autoF78DF6E2_ae;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    autoF78DF6E2_ae = libCore_gv_bALMaxPlayers;
    lv_playerIndex = 1;
    for ( ; lv_playerIndex <= autoF78DF6E2_ae ; lv_playerIndex += 1 ) {
        if ((libGame_gv_players[lv_playerIndex].lv_faction == lp_faction) && (PlayerStatus(lv_playerIndex) == c_playerStatusActive) && (PlayerType(lv_playerIndex) == c_playerTypeUser)) {
            return true;
        }

    }
    return false;
}

void libAIAI_gf_HeroAISetStartingLane (int lp_trigPlayer, int lp_laneIndex) {
    // Implementation
    if ((lp_laneIndex > 0) && (lp_laneIndex <= libGame_gv_laneCount)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_startingLane = lp_laneIndex;
    }

}

void libAIAI_gf_HeroAIAssistPlayerInLane (int lp_trigPlayer, int lp_playerToAssist) {
    // Implementation
    if ((libAIAI_gf_HeroAIIsPlayerActive(lp_trigPlayer, 0) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_tutorialForceFollowPlayer = lp_playerToAssist;
    }

}

trigger auto_libAIAI_gf_HeroAIAssistHumanPlayerWithCamp_Trigger = null;
playergroup auto_libAIAI_gf_HeroAIAssistHumanPlayerWithCamp_lp_players;
int auto_libAIAI_gf_HeroAIAssistHumanPlayerWithCamp_lp_humanPlayer;
int auto_libAIAI_gf_HeroAIAssistHumanPlayerWithCamp_lp_campIndex;

void libAIAI_gf_HeroAIAssistHumanPlayerWithCamp (playergroup lp_players, int lp_humanPlayer, int lp_campIndex) {
    auto_libAIAI_gf_HeroAIAssistHumanPlayerWithCamp_lp_players = lp_players;
    auto_libAIAI_gf_HeroAIAssistHumanPlayerWithCamp_lp_humanPlayer = lp_humanPlayer;
    auto_libAIAI_gf_HeroAIAssistHumanPlayerWithCamp_lp_campIndex = lp_campIndex;

    if (auto_libAIAI_gf_HeroAIAssistHumanPlayerWithCamp_Trigger == null) {
        auto_libAIAI_gf_HeroAIAssistHumanPlayerWithCamp_Trigger = TriggerCreate("auto_libAIAI_gf_HeroAIAssistHumanPlayerWithCamp_TriggerFunc");
    }

    TriggerExecute(auto_libAIAI_gf_HeroAIAssistHumanPlayerWithCamp_Trigger, false, false);
}

bool auto_libAIAI_gf_HeroAIAssistHumanPlayerWithCamp_TriggerFunc (bool testConds, bool runActions) {
    playergroup lp_players = auto_libAIAI_gf_HeroAIAssistHumanPlayerWithCamp_lp_players;
    int lp_humanPlayer = auto_libAIAI_gf_HeroAIAssistHumanPlayerWithCamp_lp_humanPlayer;
    int lp_campIndex = auto_libAIAI_gf_HeroAIAssistHumanPlayerWithCamp_lp_campIndex;

    playergroup autoC6D6DBE2_g;
    int autoC6D6DBE2_p;
    playergroup auto10971D9D_g;
    int auto10971D9D_p;
    playergroup autoAC095C4A_g;
    int autoAC095C4A_p;

    // Variable Declarations
    bool lv_campCaptured;
    int lv_playerIndex;
    playergroup lv_aIPlayers;
    bool lv_aIBusy;
    fixed lv_timeout;
    const fixed lv_considerFrequency = 3.0;
    const fixed lv_considerTimeout = 120.0;

    // Variable Initialization
    lv_aIPlayers = PlayerGroupEmpty();

    // Implementation
    lv_campCaptured = (libMapM_gv_jungleCreepCamps[lp_campIndex].lv_aIState == libMapM_ge_JungleCampStates_Dead);
    if ((lv_campCaptured == true)) {
        return true;
    }

    if ((libAIAI_gf_HeroAIIsPlayerActive(lp_humanPlayer, 1) == false)) {
        return true;
    }

    autoC6D6DBE2_g = lp_players; 
    autoC6D6DBE2_p = 1;
    for ( ; autoC6D6DBE2_p <= PlayerGroupCount(autoC6D6DBE2_g) ; autoC6D6DBE2_p += (lv_playerIndex == PlayerGroupPlayer(autoC6D6DBE2_g, autoC6D6DBE2_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoC6D6DBE2_g, autoC6D6DBE2_p);
        if ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 2) == true)) {
            PlayerGroupAdd(lv_aIPlayers, lv_playerIndex);
        }

    }
    if ((PlayerGroupCount(lv_aIPlayers) == 0)) {
        return true;
    }

    lv_timeout = (TimerGetElapsed(libGame_gv_gameTimer) + lv_considerTimeout);
    while (true) {
        if ((TimerGetElapsed(libGame_gv_gameTimer) >= lv_timeout)) {
            return true;
        }

        lv_aIBusy = false;
        auto10971D9D_g = lv_aIPlayers; 
        auto10971D9D_p = 1;
        for ( ; auto10971D9D_p <= PlayerGroupCount(auto10971D9D_g) ; auto10971D9D_p += (lv_playerIndex == PlayerGroupPlayer(auto10971D9D_g, auto10971D9D_p)) ) {
            lv_playerIndex = PlayerGroupPlayer(auto10971D9D_g, auto10971D9D_p);
            if ((libAIAI_gf_HeroAIIsHigherPriority(lv_playerIndex, libAIAI_ge_HeroAIPriority_TakeCampMoveToCampWithHuman) == false)) {
                lv_aIBusy = true;
                break;
            }

        }
        if ((lv_aIBusy == false)) {
            break;
        }

        Wait(lv_considerFrequency, c_timeGame);
    }
    autoAC095C4A_g = lv_aIPlayers; 
    autoAC095C4A_p = 1;
    for ( ; autoAC095C4A_p <= PlayerGroupCount(autoAC095C4A_g) ; autoAC095C4A_p += (lv_playerIndex == PlayerGroupPlayer(autoAC095C4A_g, autoAC095C4A_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoAC095C4A_g, autoAC095C4A_p);
        libAIAI_gf_HeroAIStartTakeCamp(lv_playerIndex, lp_campIndex, lp_humanPlayer);
    }
    return true;
}

void libAIAI_gf_HeroAIStartWaitInSpawn (int lp_trigPlayer) {
    // Implementation
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_shouldWaitInSpawn = true;
}

void libAIAI_gf_HeroAIStopWaitInSpawn (int lp_trigPlayer) {
    // Implementation
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_shouldWaitInSpawn = false;
}

void libAIAI_gf_HeroAIUpdatePlayer (int lp_trigPlayer) {
    int auto702BFC85_val;

    // Variable Declarations
    int lv_timeSpent;
    string lv_goalName;

    // Variable Initialization
    lv_goalName = "";

    // Implementation
    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSUnused) || (UnitIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) == false) || (UnitIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) == false) || (AIIsTacticalDisabled(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) == true))) {
        return ;
    }

    lv_goalName = libAIAI_gf_HeroAIGetGoalName(libGame_gv_players[lp_trigPlayer].lv_activeVehicle);
    if ((lv_goalName != null) && (lv_goalName != libAIAI_gv_heroAILegacyGoal)) {
        libAIAI_gf_HeroAIUnitGoalExecution(lp_trigPlayer, libGame_gv_players[lp_trigPlayer].lv_activeVehicle, lv_goalName);
    }
    else {
        lv_goalName = libAIAI_gf_HeroAIGetGoalName(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
        if ((lv_goalName != null) && (lv_goalName != libAIAI_gv_heroAILegacyGoal)) {
            libAIAI_gf_HeroAIUnitGoalExecution(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_goalName);
        }
        else {
            if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_goalAssigned == true)) {
                libAIAI_gf_HeroAILeaveCurrentObjective(lp_trigPlayer);
            }

            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_savedPriority = libAIAI_ge_HeroAIPriority_Idle;
            auto702BFC85_val = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState;
            if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSDead) {
                if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hSDeadStateTrigger != null)) {
                    libAIAI_gv_heroAICustomStateCurrentPlayer = lp_trigPlayer;
                    TriggerExecute(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hSDeadStateTrigger, true, true);
                    lv_timeSpent = (lv_timeSpent + libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hSCustomStateTimeSpent);
                }
                else {
                    lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIDead(lp_trigPlayer));
                }
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSAfterDeathAttack) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIAfterDeathAttack(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSAfterDeathHeal) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIAfterDeathHeal(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSReturnToSpawn) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIReturnToSpawn(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSWaitForGameToStart) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIWaitForGameToStart(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSWaitToHeal) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIWaitToHeal(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSWaitInSpawn) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIWaitInSpawn(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSAdvance) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIAdvanceInLane(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSRetreat) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIRetreatInLane(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSAvoidAOE) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIAvoidAOE(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSCastTactical) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAICastTactical(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSMinionBattleRetreat) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIMinionBattleRetreat(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSMinionBattleReposition) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIMinionBattleReposition(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSMinionBattleAttack) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIMinionBattleAttack(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSMinionBattleHarass) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIMinionBattleHarass(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSHarassSiegeEnemy) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIHarassSiegeEnemy(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSWaitForMinions) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIWaitForMinions(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSReturnToLane) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIReturnToLane(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSPickUpHealthGlobeJungle) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIPickUpHealthGlobeJungle(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSFocusHero) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIFocusHero(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSFocusCore) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIFocusCore(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSDefendCoreAttack) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIDefendCoreAttack(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSDefendCoreLeash) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIDefendCoreLeash(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSVehicleReturnToLane) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIVehicleReturnToLane(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSVehicleAdvanceInLane) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIVehicleAdvanceInLane(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSCaptureWatchTower) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAICaptureWatchTower(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSPortHomeLane) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAITeleportHomeLane(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSDrinkMoonwell) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIDrinkMoonwell(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSTearOfEluneMoveToTear) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAITearOfEluneMoveToTear(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSTearOfEluneGuard) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAITearOfEluneGuard(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSTearOfEluneCapture) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAITearOfEluneCapture(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSTearOfEluneDefend) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAITearOfEluneDefend(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSMCampInit) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIMinionCampInit(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSMoveToCamp) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIMoveToCamp(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSWaitAtCamp) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIWaitAtCamp(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSAttackSoloCamp) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIAttackSoloCamp(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSCaptureCampBeacon) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAICaptureCampBeacon(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSDefendCampAttack) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIDefendCampAttack(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSDefendCampLeash) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIDefendCampLeash(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSFleeInJungle) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIFleeInJungle(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSPortHomeJungle) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAITeleportHomeJungle(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSHarassInJungle) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIHarassInJungle(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSPaceAround) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIPaceAround(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSObeliskCapture) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIObeliskCapture(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSDragonCapture) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIDragonCapture(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSDragonHarass) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIDragonHarass(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSFollowerGuardLeader) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIFollowerGuardLeader(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSFollowerGuardLeaderLeash) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIFollowerGuardLeaderLeash(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSUnderworldEnter) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIUnderworldEnter(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSUnderworldKillMinions) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIUnderworldKillMinions(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSUnderworldFocusHero) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIUnderworldFocusHero(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSUnderworldPickupSkull) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIUnderworldPickupSkull(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSUnderworldMoveToExit) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIUnderworldMoveToExit(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSUnderworldTeleportHome) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIUnderworldTeleportHome(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSUnderworldExit) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIUnderworldExit(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSAbathurAdvanceInLane) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIAbathurAdvanceInLane(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSAbathurRetreatInLane) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIAbathurRetreatInLane(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSAbathurHideInTown) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIAbathurHideInTown(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSAbathurChangeLanes) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIAbathurChangeLanes(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSEnterTransport) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIEnterTransport(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSCustomMapState) {
                libAIAI_gv_heroAICustomStateCurrentPlayer = lp_trigPlayer;
                TriggerExecute(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hSMapStateTrigger, true, true);
                lv_timeSpent = (lv_timeSpent + libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hSCustomStateTimeSpent);
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSDefault) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIDefault(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSDefendObjective) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIDefendObjective(lp_trigPlayer));
            }
            else if (auto702BFC85_val == libAIAI_ge_HeroAIStates_HSObjectiveStaging) {
                lv_timeSpent = (lv_timeSpent + libAIAI_gf_HeroAIObjectiveStaging(lp_trigPlayer));
            }
            else {
            }
            if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_postStateUpdate != null)) {
                libAIAI_gv_heroAITriggerCurrentPlayer = lp_trigPlayer;
                TriggerExecute(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_postStateUpdate, true, true);
            }

        }
    }
    if ((libAIAI_gv_heroAIDisplayAIStatus == true)) {
        libAIAI_gf_HeroAIUpdateAIStatus(lp_trigPlayer);
    }

}

void libAIAI_gf_HeroAIStartAI () {
    // Variable Declarations
    int lv_playerIndex;
    int lv_townIndex;
    int lv_structureIndex;

    // Variable Initialization

    // Implementation
    libAIAI_gv_heroAIActive = true;
    libAIAI_gv_heroAITeamCampData[0].lv_startCampCheckTimer = (TimerGetElapsed(libGame_gv_gameTimer) + RandomFixed((libAIAI_gv_aIHeroCampConsiderFrequency - 3.0), (libAIAI_gv_aIHeroCampConsiderFrequency + 3.0)));
    libAIAI_gv_heroAITeamCampData[1].lv_startCampCheckTimer = (TimerGetElapsed(libGame_gv_gameTimer) + RandomFixed((libAIAI_gv_aIHeroCampConsiderFrequency - 3.0), (libAIAI_gv_aIHeroCampConsiderFrequency + 3.0)));
    if ((libAIAI_gv_heroAICustomRegisterDangerUnitsTrigger != null)) {
        TriggerExecute(libAIAI_gv_heroAICustomRegisterDangerUnitsTrigger, true, true);
    }

    libAIAI_gf_HeroAISetupTeamData();
    libAIAI_gf_HeroAIRegisterDataModAOEEffects();
    TriggerEnable(libAIAI_gt_HeroAIWatchForAOEAbilityCasted, true);
    TriggerEnable(libAIAI_gt_HeroAITownDataInitialized, true);
    TriggerEnable(libAIAI_gt_HeroAITowerDies, true);
    TriggerEnable(libAIAI_gt_HeroAIFollowerCommand, true);
    TriggerEnable(libAIAI_gt_HeroAIHeroTakesDamage, true);
    TriggerEnable(libAIAI_gt_HeroAIHeroEntersAfterDeathAttackState, true);
    TriggerEnable(libAIAI_gt_HeroAIHeroEntersAfterDeathHealState, true);
    TriggerEnable(libAIAI_gt_HeroAIHeroDies, true);
    TriggerEnable(libAIAI_gt_HeroAIHumanAllyInitiatesFight, true);
}

void libAIAI_gf_HeroAISetupTeamData () {
    // Implementation
    libAIAI_gf_HeroAIUpdateTeamPlayerData(libGame_ge_Faction_Order);
    libAIAI_gf_HeroAIUpdateTeamPlayerData(libGame_ge_Faction_Chaos);
    if ((libGame_gv_laneCount > 0)) {
        if ((UnitIsValid(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core) == true)) {
            libAIAI_gf_HeroAICalcCoreDefensePosition(0);
        }

        if ((UnitIsValid(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core) == true)) {
            libAIAI_gf_HeroAICalcCoreDefensePosition(1);
        }

    }

    libAIAI_gf_HeroAISetupTownData();
    if ((libGame_gv_laneCount > 0)) {
        libAIAI_gf_HeroAIEvalLanes(0);
        libAIAI_gf_HeroAIEvalLanes(1);
        libAIAI_gv_heroAITeamData[0].lv_nextLaneEvalUpdateTime = -1.0;
        libAIAI_gf_HeroAIEvalLanes(0);
    }

}

void libAIAI_gf_HeroAISetupTownData () {
    int auto6775C45A_ae;
    int auto6775C45A_ai;
    int auto12EF4BF9_ae;
    int auto12EF4BF9_ai;

    // Variable Declarations
    int lv_townIndex;
    int lv_structureIndex;

    // Variable Initialization

    // Implementation
    if ((UnitIsValid(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core) == true)) {
        libAIAI_gf_HeroAISetupUnitDangerTracking(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core);
    }

    if ((UnitIsValid(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core) == true)) {
        libAIAI_gf_HeroAISetupUnitDangerTracking(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core);
    }

    auto6775C45A_ae = libGame_gv_townTownCount;
    auto6775C45A_ai = 1;
    lv_townIndex = 1;
    for ( ; ( (auto6775C45A_ai >= 0 && lv_townIndex <= auto6775C45A_ae) || (auto6775C45A_ai <= 0 && lv_townIndex >= auto6775C45A_ae) ) ; lv_townIndex += auto6775C45A_ai ) {
        auto12EF4BF9_ae = libGame_gv_townTownData[lv_townIndex].lv_structureCount;
        auto12EF4BF9_ai = 1;
        lv_structureIndex = 1;
        for ( ; ( (auto12EF4BF9_ai >= 0 && lv_structureIndex <= auto12EF4BF9_ae) || (auto12EF4BF9_ai <= 0 && lv_structureIndex >= auto12EF4BF9_ae) ) ; lv_structureIndex += auto12EF4BF9_ai ) {
            if ((UnitIsValid(libGame_gv_townTownData[lv_townIndex].lv_structureUnits[lv_structureIndex]) == true) && ((libGame_gv_townTownData[lv_townIndex].lv_structureTypes[lv_structureIndex] == libGame_ge_TownStructureTypes_CannonTower) || (libGame_gv_townTownData[lv_townIndex].lv_structureTypes[lv_structureIndex] == libGame_ge_TownStructureTypes_TownHall))) {
                libAIAI_gf_HeroAISetupUnitDangerTracking(libGame_gv_townTownData[lv_townIndex].lv_structureUnits[lv_structureIndex]);
            }

        }
    }
    libAIAI_gf_HeroAIUpdateFrontTower(0);
    libAIAI_gf_HeroAIUpdateFrontTower(1);
}

void libAIAI_gf_HeroAITakeOverHeroForPlayer (int lp_player) {
    // Variable Declarations
    int lv_enemyFaction;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_players[lp_player].lv_faction == libGame_ge_Faction_Order)) {
        lv_enemyFaction = libGame_ge_Faction_Chaos;
    }
    else {
        lv_enemyFaction = libGame_ge_Faction_Order;
    }
    if ((libAIAI_gf_HeroAITeamHasHumanPlayers(lv_enemyFaction) == true)) {
        libAIAI_gf_HeroAISetAIDifficultyLevel(lp_player, libAIAI_ge_HeroAIDifficulty_HeroAIElite);
    }
    else {
        libAIAI_gf_HeroAISetAIDifficultyLevel(lp_player, libAIAI_ge_HeroAIDifficulty_HeroAIElite);
    }
    if ((libAIAI_gv_aIHeroes[lp_player].lv_currentHeroUnit == null)) {
        return ;
    }
    else {
        libAIAI_gf_HeroAIEnableAIForPlayer(lp_player);
    }
}

void libAIAI_gf_HeroAIReleaseHeroControl (int lp_player) {
    // Variable Declarations
    int lv_enemyFaction;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_player].lv_currentHeroUnit != null)) {
        libAIAI_gf_HeroAIDisableAIForPlayer(lp_player);
    }

}

void libAIAI_gf_HeroAINotifyHeroDamaged (int lp_trigPlayer, unit lp_damagingUnit) {
    int auto9FE443AF_val;

    // Variable Declarations
    fixed lv_distance;
    fixed lv_weaponRange;
    fixed lv_delayTime;
    bool lv_shouldRetreatFromAttacker;

    // Variable Initialization

    // Implementation
    if (((UnitIsValid(lp_damagingUnit) == false) || (UnitTypeTestAttribute(UnitGetType(lp_damagingUnit), c_unitAttributeHeroic) == false))) {
        return ;
    }

    lv_delayTime = libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty];
    auto9FE443AF_val = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState;
    if (auto9FE443AF_val == libAIAI_ge_HeroAIStates_HSMinionBattleAttack) {
        lv_shouldRetreatFromAttacker = libAIAI_gf_HeroAIShouldRetreatFromAttacker(lp_trigPlayer);
        lv_weaponRange = libAIAI_gf_AIGetActiveWeaponRange(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
        lv_distance = DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), UnitGetPosition(lp_damagingUnit));
        if ((lv_shouldRetreatFromAttacker == false) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) && (libNtve_gf_RandomPercent() < libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[(libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_difficulty)]) && (lv_distance <= (lv_weaponRange + 2.0))) {
            libAIAI_gf_HeroAIStartMinionBattleHarass(lp_trigPlayer, lp_damagingUnit);
        }
        else {
            if ((lv_shouldRetreatFromAttacker == true)) {
                Wait(lv_delayTime, c_timeGame);
                if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSMinionBattleAttack) && (libAIAI_gf_HeroAITimeInCurrentState(lp_trigPlayer) > lv_delayTime)) {
                    libAIAI_gf_HeroAIStartMinionBattleRetreat(lp_trigPlayer, libAIAI_gv_aIHeroMinionBattleMinDamagedRetreatDuration);
                }

            }

        }
    }
    else if (auto9FE443AF_val == libAIAI_ge_HeroAIStates_HSAdvance) {
        if ((libAIAI_gf_HeroAIShouldRetreatFromAttacker(lp_trigPlayer) == false)) {
            return ;
        }

        Wait(lv_delayTime, c_timeGame);
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSAdvance) && (libAIAI_gf_HeroAITimeInCurrentState(lp_trigPlayer) > lv_delayTime)) {
            libAIAI_gf_HeroAIStartRetreatLane(lp_trigPlayer);
        }

    }
    else {
    }
}

string libAIAI_gf_HeroAIGetGoalName (unit lp_unit) {
    // Implementation
    if ((UnitHasAIController(lp_unit) == false)) {
        return null;
    }

    return GetUnitGoal(lp_unit);
}

void libAIAI_gf_HeroAIUnitGoalExecution (int lp_trigPlayer, unit lp_unit, string lp_goalName) {
    // Implementation
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_goalAssigned = true;
}

int libAIAI_gf_HeroAIGetCurrentPriority (int lp_trigPlayer) {
    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_savedPriority == libAIAI_ge_HeroAIPriority_Idle)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_savedPriority = libAIAI_gf_HeroAIGetCurrentPriorityInternal(lp_trigPlayer);
    }

    return libAIAI_gv_aIHeroes[lp_trigPlayer].lv_savedPriority;
}

int libAIAI_gf_HeroAIGetCurrentPriorityInternal (int lp_trigPlayer) {
    int auto035B7B9E_val;

    // Variable Declarations
    int lv_currentObjective;
    point lv_contentionPoint;
    region lv_nearbyRegion;
    unitgroup lv_enemyHeroes;
    unitgroup lv_allyHeroes;
    point lv_campPosition;
    point lv_heroPosition;
    order lv_heroOrder;

    // Variable Initialization
    lv_enemyHeroes = UnitGroupEmpty();
    lv_allyHeroes = UnitGroupEmpty();

    // Implementation
    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSUnused) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSBusy))) {
        return libAIAI_ge_HeroAIPriority_GenericUninterruptable;
    }

    if (((libGame_gv_players[lp_trigPlayer].lv_isDead == true) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSAfterDeathAttack) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSAfterDeathHeal))) {
        return libAIAI_ge_HeroAIPriority_GenericUninterruptable;
    }

    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSDefault) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSWaitForGameToStart))) {
        return libAIAI_ge_HeroAIPriority_Idle;
    }

    if ((libAIAI_gf_HeroAIIsPlayerAtSpawn(lp_trigPlayer) == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) < 95.0)) {
        return libAIAI_ge_HeroAIPriority_GenericUninterruptable;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSAvoidAOE)) {
        return libAIAI_ge_HeroAIPriority_GenericUninterruptable;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSCastTactical)) {
        return libAIAI_ge_HeroAIPriority_GenericUninterruptable;
    }

    if ((UnitIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetMoonwell) == true)) {
        return libAIAI_ge_HeroAIPriority_GenericUninterruptable;
    }

    if ((UnitIsAlive(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero) == true)) {
        return libAIAI_ge_HeroAIPriority_GenericUninterruptable;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSEnterTransport)) {
        return libAIAI_ge_HeroAIPriority_GenericUninterruptable;
    }

    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSMinionBattleHarass) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSHarassInJungle))) {
        return libAIAI_ge_HeroAIPriority_GenericUninterruptable;
    }

    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSUnderworldPickupSkull))) {
        return libAIAI_ge_HeroAIPriority_GenericUninterruptable;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSCustomMapState)) {
        return libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hSMapStatePriority;
    }

    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSDefendObjective) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSObjectiveStaging))) {
        return libAIAI_gv_aIHeroes[lp_trigPlayer].lv_statePriority;
    }

    if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) < 100.0) && (libMapM_gv_mMSafeRegions[libGame_gf_TeamNumberOfPlayer(lp_trigPlayer)] != null) && (libNtve_gf_UnitInRegion(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, libMapM_gv_mMSafeRegions[libGame_gf_TeamNumberOfPlayer(lp_trigPlayer)]) == true)) {
        return libAIAI_ge_HeroAIPriority_GenericUninterruptable;
    }

    lv_currentObjective = libAIAI_gf_HeroAIGetCurrentObjective(lp_trigPlayer);
    auto035B7B9E_val = lv_currentObjective;
    if (auto035B7B9E_val == libAIAI_ge_HeroAIObjective_PushLane) {
        if ((UnitIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetHealthGlobe) == true)) {
            return libAIAI_ge_HeroAIPriority_GenericUninterruptable;
        }

        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane > 0) && (libAIAI_gf_HeroAIIsPlayerInsideEnemyBase(lp_trigPlayer) == true) && (libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_numEnemyTowns == 0)) {
            return libAIAI_ge_HeroAIPriority_PushLaneAttackCore;
        }

        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane > 0)) {
            lv_contentionPoint = libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane].lv_contentionPoint;
            if ((libCore_gf_TestLocationClosertoFactionSide(lv_contentionPoint, libGame_gv_players[lp_trigPlayer].lv_faction, 0.65) == true)) {
                return libAIAI_ge_HeroAIPriority_PushLaneDefendingBase;
            }

        }

        lv_heroPosition = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
        lv_nearbyRegion = RegionCircle(lv_heroPosition, 14.0);
        lv_allyHeroes = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceAlly, lv_nearbyRegion, libCore_gv_filtersHeroic, 0);
        lv_enemyHeroes = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, lv_nearbyRegion, libCore_gv_filtersHeroic, 0);
        if ((libCore_gf_TestLocationClosertoFactionSide(lv_heroPosition, libGame_gv_players[lp_trigPlayer].lv_faction, 1.0) == false) && (UnitGroupCount(lv_allyHeroes, c_unitCountAlive) >= 4) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty != libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally)) {
            return libAIAI_ge_HeroAIPriority_PushLanePushWithTeam;
        }

        if ((UnitGroupCount(lv_enemyHeroes, c_unitCountAlive) >= 2) && (UnitGroupCount(lv_allyHeroes, c_unitCountAlive) >= 2)) {
            return libAIAI_ge_HeroAIPriority_PushLaneTeamFightLikely;
        }

        if ((libAIAI_gf_HeroAIIsPlayerDefendingTown(lp_trigPlayer) == true)) {
            return libAIAI_ge_HeroAIPriority_PushLaneDefendTown;
        }

        if ((libAIAI_gf_HeroAIIsPlayerAttackingTown(lp_trigPlayer) == true)) {
            return libAIAI_ge_HeroAIPriority_PushLaneAttackTown;
        }

        if ((libAIAI_gv_heroAIRavenLordCurseStatus.lv_curseActive == true)) {
            return libAIAI_ge_HeroAIPriority_PushLaneRavenKingsCurseActive;
        }

        if (((libAIAI_gv_heroAIUnderworldBossStatus[(0)].lv_state == libAIAI_ge_HeroAIUnderworldBossState_Warning) || (libAIAI_gv_heroAIUnderworldBossStatus[(0)].lv_state == libAIAI_ge_HeroAIUnderworldBossState_Spawned) || (libAIAI_gv_heroAIUnderworldBossStatus[(1)].lv_state == libAIAI_ge_HeroAIUnderworldBossState_Warning) || (libAIAI_gv_heroAIUnderworldBossStatus[(1)].lv_state == libAIAI_ge_HeroAIUnderworldBossState_Spawned))) {
            return libAIAI_ge_HeroAIPriority_PushLaneUnderworldBossActive;
        }

        if ((libAIAI_gf_HeroAIInLaneWithAllyMercs(lp_trigPlayer) == true)) {
            return libAIAI_ge_HeroAIPriority_PushLanePushWithAllyMercs;
        }

        if ((libAIAI_gf_HeroAIInLaneWithEnemyMercs(lp_trigPlayer) == true)) {
            return libAIAI_ge_HeroAIPriority_PushLaneClearEnemyMercs;
        }

        if ((libAIAI_gf_HeroAIIsNearActiveObelisk(lp_trigPlayer) == true)) {
            return libAIAI_ge_HeroAIPriority_PushLaneNearActiveObelisk;
        }

        if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSMinionBattleRetreat) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSMinionBattleReposition) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSMinionBattleHarass) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSMinionBattleAttack))) {
            return libAIAI_ge_HeroAIPriority_PushLaneInMinionBattle;
        }

        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane != libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane)) {
            return libAIAI_ge_HeroAIPriority_PushLaneChangingLanes;
        }

        return libAIAI_ge_HeroAIPriority_PushLaneNormalLogic;
    }
    else if (auto035B7B9E_val == libAIAI_ge_HeroAIObjective_WaitInSpawn) {
        return libAIAI_ge_HeroAIPriority_WaitInSpawnAnyState;
    }
    else if (auto035B7B9E_val == libAIAI_ge_HeroAIObjective_CaptureDragon) {
        if ((UnitIsValid(libGame_gv_players[lp_trigPlayer].lv_activeVehicle) == true)) {
            return libAIAI_ge_HeroAIPriority_GenericUninterruptable;
        }

        return libAIAI_ge_HeroAIPriority_CaptureObeliskOrDragon;
    }
    else if (auto035B7B9E_val == libAIAI_ge_HeroAIObjective_DefendCore) {
        return libAIAI_ge_HeroAIPriority_DefendCoreAnyState;
    }
    else if (auto035B7B9E_val == libAIAI_ge_HeroAIObjective_TakeCamp) {
        lv_campPosition = libMapM_gv_jungleCreepCamps[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp].lv_mapDataCampCaptainSpawnPoint;
        libAIAI_gf_HeroAIEval(lp_trigPlayer);
        if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_campPosition) <= libAIAI_gv_aIHeroLeashDistance) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalEnemyEval == 0.0) && (libMapM_gv_jungleCreepCamps[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp].lv_captureCaptureEnabled == true)) {
            return libAIAI_ge_HeroAIPriority_GenericUninterruptable;
        }

        if ((((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_campPosition) <= libAIAI_gv_aIHeroLeashDistance) && (libAIAI_gf_HeroAICampEval(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp) < libAIAI_gv_aIHeroHighCampEval)) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSDefendCampAttack) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSDefendCampLeash))) {
            return libAIAI_ge_HeroAIPriority_TakeCampTakingCamp;
        }

        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_humanPlayerAssisting > 0)) {
            return libAIAI_ge_HeroAIPriority_TakeCampMoveToCampWithHuman;
        }

        return libAIAI_ge_HeroAIPriority_TakeCampMoveToCampOnlyAI;
    }
    else if (auto035B7B9E_val == libAIAI_ge_HeroAIObjective_CaptureWatchTower) {
        return libAIAI_ge_HeroAIPriority_CaptureWatchTowerAnyState;
    }
    else if (auto035B7B9E_val == libAIAI_ge_HeroAIObjective_CaptureTearOfElune) {
        lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
        if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeWarningPosition) <= 6.0) && (lv_heroOrder != null) && (OrderGetAbilityCommand(lv_heroOrder) == AbilityCommand("CaptureMacGuffin", 0))) {
            return libAIAI_ge_HeroAIPriority_GenericUninterruptable;
        }

        return libAIAI_ge_HeroAIPriority_CaptureTearOfEluneHeadingToTribute;
    }
    else if (auto035B7B9E_val == libAIAI_ge_HeroAIObjective_FollowHero) {
        if ((libAIAI_gf_HeroAIIsInFollowerState(lp_trigPlayer) == true)) {
            return libAIAI_ge_HeroAIPriority_FollowHeroFollowState;
        }
        else {
            return libAIAI_ge_HeroAIPriority_FollowHeroOtherState;
        }
    }
    else if (auto035B7B9E_val == libAIAI_ge_HeroAIObjective_CaptureObelisk) {
        return libAIAI_ge_HeroAIPriority_CaptureObeliskOrDragon;
    }
    else if (auto035B7B9E_val == libAIAI_ge_HeroAIObjective_CollectSkulls) {
        if ((libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) == true)) {
            return libAIAI_ge_HeroAIPriority_CollectSkullsInUnderworld;
        }
        else {
            return libAIAI_ge_HeroAIPriority_CollectSkullsHeadingToUnderworld;
        }
    }
    else if (auto035B7B9E_val == libAIAI_ge_HeroAIObjective_UseAbathurLogic) {
        return libAIAI_ge_HeroAIPriority_AbathurLogicAnyState;
    }
    else {
        return libAIAI_ge_HeroAIPriority_PushLaneNormalLogic;
    }
}

int libAIAI_gf_HeroAIGetCurrentObjective (int lp_trigPlayer) {
    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToWaitInSpawn == true)) {
        return libAIAI_ge_HeroAIObjective_WaitInSpawn;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp > 0)) {
        return libAIAI_ge_HeroAIObjective_TakeCamp;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToUseAbathurLogic == true)) {
        return libAIAI_ge_HeroAIObjective_UseAbathurLogic;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToCaptureTearOfElune == true)) {
        return libAIAI_ge_HeroAIObjective_CaptureTearOfElune;
    }

    if (((UnitIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetDragonStatue) == true) || (UnitIsValid(libGame_gv_players[lp_trigPlayer].lv_activeVehicle) == true))) {
        return libAIAI_ge_HeroAIObjective_CaptureDragon;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToDefendCore == true)) {
        return libAIAI_ge_HeroAIObjective_DefendCore;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToDoCustomMapLogic == true)) {
        return libAIAI_ge_HeroAIObjective_CustomMapObj;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetWatchTower > 0)) {
        return libAIAI_ge_HeroAIObjective_CaptureWatchTower;
    }

    if ((UnitIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetObelisk) == true)) {
        return libAIAI_ge_HeroAIObjective_CaptureObelisk;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_pingFollowPlayer > 0)) {
        return libAIAI_ge_HeroAIObjective_FollowHero;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToCollectSkulls == true)) {
        return libAIAI_ge_HeroAIObjective_CollectSkulls;
    }

    return libAIAI_ge_HeroAIObjective_PushLane;
}

bool libAIAI_gf_HeroAIIsHigherPriority (int lp_trigPlayer, int lp_priority) {
    // Variable Declarations
    int lv_currentPriority;

    // Variable Initialization

    // Implementation
    lv_currentPriority = libAIAI_gf_HeroAIGetCurrentPriority(lp_trigPlayer);
    return (((lp_priority) < (lv_currentPriority)) && ((lp_priority) < (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_goalPriority)));
}

void libAIAI_gf_HeroAILeaveCurrentObjective (int lp_trigPlayer) {
    int auto516C8740_val;

    // Variable Declarations
    int lv_currentObjective;

    // Variable Initialization

    // Implementation
    lv_currentObjective = libAIAI_gf_HeroAIGetCurrentObjective(lp_trigPlayer);
    auto516C8740_val = lv_currentObjective;
    if (auto516C8740_val == libAIAI_ge_HeroAIObjective_TakeCamp) {
        libAIAI_gf_HeroAIHeroStoppingCampAttack(lp_trigPlayer);
    }
    else {
    }
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_goalAssigned = false;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero = null;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetTransport = null;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hSMapStateCurrentTargetUnit = null;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_onReturnToCurrentObjective = null;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetMoonwell = null;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome = false;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_siegeHarassTarget = null;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetHealthGlobe = null;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp = 0;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToWaitInSpawn = false;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetDragonStatue = null;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToDefendCore = false;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetWatchTower = 0;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToCaptureTearOfElune = false;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetObelisk = null;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToCollectSkulls = false;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetUnderworldEntrance = null;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetUnderworldExit = null;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToUseAbathurLogic = false;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hSMapStateTrigger = null;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hSMapStatePriority = libAIAI_ge_HeroAIPriority_CustomMapLow;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToDoCustomMapLogic = false;
    if ((libGame_gv_players[lp_trigPlayer].lv_isDead == true)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSDead);
    }
    else {
        libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
    }
}

void libAIAI_gf_HeroAIReturnToCurrentObjective (int lp_trigPlayer) {
    int auto3C6E12D4_val;

    // Variable Declarations
    int lv_currentObjective;
    point lv_campLocation;
    int lv_teamNumber;

    // Variable Initialization

    // Implementation
    lv_teamNumber = libGame_gf_TeamNumberOfPlayer(lp_trigPlayer);
    if ((UnitIsAlive(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero) == true)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSFocusHero);
        return ;
    }

    if ((UnitIsAlive(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetMoonwell) == true)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSDrinkMoonwell);
        return ;
    }

    if ((UnitIsAlive(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetHero) == true)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSUnderworldFocusHero);
        return ;
    }

    lv_currentObjective = libAIAI_gf_HeroAIGetCurrentObjective(lp_trigPlayer);
    auto3C6E12D4_val = lv_currentObjective;
    if (auto3C6E12D4_val == libAIAI_ge_HeroAIObjective_PushLane) {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane > 0)) {
            libAIAI_gf_HeroAIStartRetreatLane(lp_trigPlayer);
        }
        else {
            libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        }
    }
    else if (auto3C6E12D4_val == libAIAI_ge_HeroAIObjective_WaitInSpawn) {
        if ((libAIAI_gf_HeroAIIsPlayerAtSpawn(lp_trigPlayer) == true)) {
            libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSWaitInSpawn);
        }
        else {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome = true;
            if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane > 0)) {
                libAIAI_gf_HeroAIStartRetreatLane(lp_trigPlayer);
            }
            else {
                libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
            }
        }
    }
    else if (auto3C6E12D4_val == libAIAI_ge_HeroAIObjective_CaptureDragon) {
        if ((libNtve_gf_PlayerIsEnemy(lp_trigPlayer, UnitGetOwner(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetDragonStatue), libNtve_ge_PlayerRelation_Ally) == true)) {
            libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSDragonCapture);
        }
        else {
            libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSDragonHarass);
        }
    }
    else if (auto3C6E12D4_val == libAIAI_ge_HeroAIObjective_DefendCore) {
        if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), UnitGetPosition(libGame_gv_teams[lv_teamNumber].lv_core)) < libAIAI_gv_aIHeroDefendFarFromCoreDistance)) {
            libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSDefendCoreAttack);
        }
        else {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome = true;
            libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        }
    }
    else if (auto3C6E12D4_val == libAIAI_ge_HeroAIObjective_TakeCamp) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSMoveToCamp);
    }
    else if (auto3C6E12D4_val == libAIAI_ge_HeroAIObjective_CaptureWatchTower) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSCaptureWatchTower);
    }
    else if (auto3C6E12D4_val == libAIAI_ge_HeroAIObjective_CaptureTearOfElune) {
        if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeWarningPosition) < libAIAI_gv_aIHeroFarFromTearOfEluneDistance)) {
            libAIAI_gf_HeroAIStartGuardTear(lp_trigPlayer);
        }
        else {
            libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSTearOfEluneMoveToTear);
        }
    }
    else if (auto3C6E12D4_val == libAIAI_ge_HeroAIObjective_CaptureObelisk) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSObeliskCapture);
    }
    else if (auto3C6E12D4_val == libAIAI_ge_HeroAIObjective_FollowHero) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSFollowerGuardLeader);
    }
    else if (auto3C6E12D4_val == libAIAI_ge_HeroAIObjective_CollectSkulls) {
        if ((UnitIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetUnderworldEntrance) == true)) {
            libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSUnderworldEnter);
        }
        else {
            if ((UnitIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetUnderworldExit) == true)) {
                libAIAI_gf_HeroAIUpdateUnderworldExitTargetPosition(lp_trigPlayer);
                libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSUnderworldMoveToExit);
            }
            else {
                libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSUnderworldKillMinions);
            }
        }
    }
    else if (auto3C6E12D4_val == libAIAI_ge_HeroAIObjective_UseAbathurLogic) {
        if ((libAIAI_gf_HeroAIIsPlayerAtSpawn(lp_trigPlayer) == true)) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane;
            libAIAI_gf_HeroAIStartAbathurAdvanceLane(lp_trigPlayer);
        }
        else {
            if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane > 0)) {
                libAIAI_gf_HeroAIStartAbathurRetreatLane(lp_trigPlayer);
            }
            else {
                libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome = true;
                libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
            }
        }
    }
    else if (auto3C6E12D4_val == libAIAI_ge_HeroAIObjective_CustomMapObj) {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_onReturnToCurrentObjective != null)) {
            libAIAI_gv_heroAICustomStateCurrentPlayer = lp_trigPlayer;
            TriggerExecute(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_onReturnToCurrentObjective, true, true);
        }
        else {
            libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSCustomMapState);
        }
    }
    else {
        libAIAI_gf_HeroAILeaveCurrentObjective(lp_trigPlayer);
    }
}

int libAIAI_gf_HeroAIDead (int lp_trigPlayer) {
    // Implementation
    if ((libGame_gv_players[lp_trigPlayer].lv_isDead == false)) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_leaveSpawnTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroExtraWaitAfterRespawn[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)]);
        libAIAI_gf_HeroAIStartWaitToHeal(lp_trigPlayer);
    }

    return 1;
}

int libAIAI_gf_HeroAIAfterDeathAttack (int lp_trigPlayer) {
    // Variable Declarations
    unit lv_bestTarget;

    // Variable Initialization

    // Implementation
    lv_bestTarget = libAIAI_gf_HeroAIAfterDeathAttackChooseTarget(lp_trigPlayer);
    if ((UnitIsValid(lv_bestTarget) == false)) {
        return 8;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextOffensiveSpellCheckTime <= TimerGetElapsed(libGame_gv_gameTimer)) && (libAIAI_gf_HeroAIRandomlyCastAbilityOnTarget(lp_trigPlayer, lv_bestTarget) == true)) {
        return 8;
    }

    HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingUnit(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility, lv_bestTarget), c_orderQueueReplace);
    return 8;
}

int libAIAI_gf_HeroAIAfterDeathHeal (int lp_trigPlayer) {
    // Variable Declarations
    unit lv_bestTarget;
    fixed lv_distanceSquaredToTarget;
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_players[lp_trigPlayer].lv_isDead == false)) {
        libAIAI_gf_HeroAILeaveCurrentObjective(lp_trigPlayer);
        return 8;
    }

    lv_bestTarget = libAIAI_gf_HeroAIAfterDeathHealChooseTarget(lp_trigPlayer);
    if ((UnitIsValid(lv_bestTarget) == false)) {
        return 8;
    }

    lv_distanceSquaredToTarget = DistanceSquaredBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), UnitGetPosition(lv_bestTarget));
    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if ((lv_distanceSquaredToTarget < 9.0)) {
        if ((lv_heroOrder != null)) {
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }

    }
    else {
        if ((lv_distanceSquaredToTarget > 36.0) && ((lv_heroOrder == null) || (lv_orderTargetPosition == null) || (DistanceBetweenPoints(lv_orderTargetPosition, UnitGetPosition(lv_bestTarget)) >= libAIAI_gv_aIHeroCloseEnoughDist))) {
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_bestTarget)), c_orderQueueReplace);
        }

    }
    return 8;
}

int libAIAI_gf_HeroAIReturnToSpawn (int lp_trigPlayer) {
    // Variable Declarations
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization

    // Implementation
    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libGame_gv_players[lp_trigPlayer].lv_spawnPoint) <= libAIAI_gv_aIHeroCloseEnoughDist)) {
        libAIAI_gf_HeroAIStartWaitToHeal(lp_trigPlayer);
        return 1;
    }

    if ((libAIAI_gf_HeroAIDrinkMoonwellLogic(lp_trigPlayer, RegionCircle(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroLaneLeashDistance)) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIMoveTo2(lp_trigPlayer, null, libGame_gv_players[lp_trigPlayer].lv_spawnPoint, libAIAI_gv_aIHeroCloseEnoughDist, libAIAI_gv_aIHeroCloseEnoughDist, false, false, false, true) == true)) {
        return 8;
    }

    return 8;
}

int libAIAI_gf_HeroAIWaitForGameToStart (int lp_trigPlayer) {
    // Variable Declarations
    int lv_startingLane;
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit == null)) {
        return 8;
    }

    if (((UnitIsValid(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core) == false) || (UnitIsValid(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core) == false))) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSDefault);
        return 8;
    }

    if ((libAIAI_gf_HeroAIHasGameStarted() == true) && (libGame_gv_laneCount > 0)) {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane == 0)) {
            lv_startingLane = libAIAI_gf_HeroAIChooseLaneLogic(lp_trigPlayer);
            libAIAI_gf_HeroAIChangeDesiredLane(lp_trigPlayer, lv_startingLane);
        }

        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane;
        libAIAI_gf_HeroAIStartAdvanceLane(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIMountLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_pingFollowPlayer > 0)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane = 0;
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane = 0;
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSFollowerGuardLeaderLeash);
        return 8;
    }

    if ((libGame_gv_laneCount > 0) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane == 0) && (TimerGetRemaining(libGame_gv_openTheGatesTimer) < libAIAI_gv_aIHeroWaitForGameToStartMoveToGateTime)) {
        lv_startingLane = libAIAI_gf_HeroAIChooseLaneLogic(lp_trigPlayer);
        libAIAI_gf_HeroAIChangeDesiredLane(lp_trigPlayer, lv_startingLane);
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextWaitForGameToStartRepositionTime = (TimerGetElapsed(libGame_gv_totalTime) + RandomFixed(0.0, 2.5));
    }

    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextWaitForGameToStartRepositionTime < TimerGetElapsed(libGame_gv_totalTime)) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_waitForGameToStartPosition == null))) {
        libAIAI_gf_HeroAIChooseWaitForGameToStartPosition(lp_trigPlayer, (TimerGetRemaining(libGame_gv_openTheGatesTimer) < libAIAI_gv_aIHeroWaitForGameToStartMoveToGateTime));
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextWaitForGameToStartRepositionTime = (TimerGetElapsed(libGame_gv_totalTime) + libAIAI_gv_aIHeroWaitForGameToStartRepositionFrequency + RandomFixed(-1.0, 1.0));
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_waitForGameToStartPosition) > 0.5) && ((lv_heroOrder == null) || ((OrderGetAbilityCommand(lv_heroOrder) == AbilityCommand("move", 0)) && (lv_orderTargetPosition != null) && (DistanceBetweenPoints(lv_orderTargetPosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_waitForGameToStartPosition) > 0.5)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_waitForGameToStartPosition), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIWaitToHeal (int lp_trigPlayer) {
    // Variable Declarations
    int lv_desiredLane;

    // Variable Initialization

    // Implementation
    if (((libGame_gv_laneCount == 0) || (UnitIsValid(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core) == false) || (UnitIsValid(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core) == false))) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSDefault);
        return 1;
    }

    if ((libAIAI_gf_HeroAIMountLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if (((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) < 90.0) || ((UnitHasBehavior2(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, "NotManaUserDummy") == false) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropEnergyPercent, c_unitPropCurrent) < 90.0)))) {
        if ((libAIAI_gf_HeroAIIsPlayerAtSpawn(lp_trigPlayer) == false)) {
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), libGame_gv_players[lp_trigPlayer].lv_spawnPoint), c_orderQueueReplace);
        }

        return 1;
    }

    if ((TimerGetElapsed(libGame_gv_gameTimer) < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_leaveSpawnTime)) {
        return 1;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane <= 0)) {
        lv_desiredLane = libAIAI_gf_HeroAIChooseLaneLogic(lp_trigPlayer);
        libAIAI_gf_HeroAIChangeDesiredLane(lp_trigPlayer, lv_desiredLane);
    }

    libAIAI_gf_HeroAIReturnToCurrentObjective(lp_trigPlayer);
    return 1;
}

int libAIAI_gf_HeroAIAdvanceInLane (int lp_trigPlayer) {
    // Variable Declarations
    order lv_heroOrder;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIShouldRetreatLane(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIStartRetreatLane(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAILaneChangingLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIShouldRetreatToClearLane(lp_trigPlayer) == true) && (libAIAI_gf_HeroAIMoveTo2(lp_trigPlayer, null, libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_contentionPoint, libAIAI_gv_aIHeroStopClearLaneDistance, libAIAI_gv_aIHeroStartClearLaneDistance, false, false, false, true) == true)) {
        return 8;
    }

    libAIAI_gf_HeroAIEval(lp_trigPlayer);
    if ((DistanceBetweenPoints(libGame_gv_players[lp_trigPlayer].lv_spawnPoint, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) > 30.0) && (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroClosestLanePoint) > libAIAI_gv_aIHeroLaneLeashDistance)) {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane > 0)) {
            libAIAI_gf_HeroAIStartRetreatLane(lp_trigPlayer);
        }
        else {
            libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        }
        return 8;
    }

    if ((libAIAI_gf_HeroAIShouldEnterMinionBattle(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIStartMinionBattleAttack(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIShouldWaitForMinions(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIStartWaitForMinions(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextLaneOffsetChangeTime < TimerGetElapsed(libGame_gv_gameTimer))) {
        libAIAI_gf_HeroAIChangeLaneOffset(lp_trigPlayer, libAIAI_gf_HeroAIChooseNewLaneOffset(lp_trigPlayer, libAIAI_gf_HeroAIAllyHeroesinArea(lp_trigPlayer, libAIAI_gv_aIHeroAvoidAllyHeroesSearchRadius), libAIAI_gf_HeroAIEnemyTowersInRange(lp_trigPlayer, libAIAI_gv_aIHeroAvoidNearbyEnemyTowerSearchRadius, true)));
        libAIAI_gf_HeroAIUpdateLaneTargetPosition(lp_trigPlayer, true);
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextLaneOffsetChangeTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroAdvanceChangeLaneOffsetFrequency);
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIMountLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIAssistFollowLeader(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIHarassSiegeEnemyLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAILaneChangeTarget(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAttackingWeakHumanHero(lp_trigPlayer, 50.0) == true)) {
        libAIAI_gf_HeroAIStartRetreatLane(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIAggroEnemyCore(lp_trigPlayer) == true)) {
        return 8;
    }

    if (((libAIAI_gf_HeroAIHealthGlobeLogic(lp_trigPlayer) == true) || (libAIAI_gf_HeroAIBuffGlobeLogic(lp_trigPlayer) == true))) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIAttackingBadTarget(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIUpdateLaneTargetPosition(lp_trigPlayer, true);
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition), c_orderQueueReplace);
        return 8;
    }

    if (((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition) <= libAIAI_gv_aIHeroCloseEnoughDist) || (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition) > libAIAI_gv_aIHeroMoveStepDistance))) {
        libAIAI_gf_HeroAIUpdateLaneTargetPosition(lp_trigPlayer, true);
    }

    if ((UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0) == null)) {
        libAIAI_gv_heroAISegTriggerHeroIsAttacking = false;
        libCore_gv_segTriggerPlayer = lp_trigPlayer;
        libCore_gv_segTriggerUnit = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit;
        libCore_gf_CallRegisteredSegregationTriggers(libCore_ge_SegregationTriggerTypes_HeroAIIsCurrentlyAttacking);
        if ((libAIAI_gv_heroAISegTriggerHeroIsAttacking == false)) {
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition), c_orderQueueReplace);
        }
        else {
            libAIAI_gv_heroAISegTriggerHeroIsAttacking = false;
        }
    }

    return 8;
}

int libAIAI_gf_HeroAIRetreatInLane (int lp_trigPlayer) {
    // Variable Declarations
    fixed lv_heroToHomeDistance;
    fixed lv_retreatPositionToHomeDistance;
    point lv_retreatPosition;
    order lv_heroOrder;
    point lv_orderTargetPosition;
    unitgroup lv_heroesToAvoid;

    // Variable Initialization
    lv_heroesToAvoid = UnitGroupEmpty();

    // Implementation
    if ((libAIAI_gf_HeroAIDrinkMoonwellLogic(lp_trigPlayer, RegionCircle(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroLaneLeashDistance)) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIIsSafeLane(lp_trigPlayer) == true)) {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_safeInLaneRetreating == false)) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_safeInLaneRetreating = true;
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_safeInLaneStartTime = TimerGetElapsed(libGame_gv_gameTimer);
        }

        if ((libAIAI_gf_HeroAISafeWhileRetreatingInLaneLogic(lp_trigPlayer) == true)) {
            return 8;
        }

    }
    else {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_safeInLaneRetreating = false;
    }
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextLaneOffsetChangeTime < TimerGetElapsed(libGame_gv_gameTimer))) {
        lv_heroesToAvoid = libAIAI_gf_HeroAIGetEnemyHeroesInRetreatPath(lp_trigPlayer);
        if ((UnitGroupCount(lv_heroesToAvoid, c_unitCountAlive) == 0)) {
            lv_heroesToAvoid = libAIAI_gf_HeroAIAllyHeroesinArea(lp_trigPlayer, libAIAI_gv_aIHeroAvoidAllyHeroesSearchRadius);
        }

        libAIAI_gf_HeroAIChangeLaneOffset(lp_trigPlayer, libAIAI_gf_HeroAIChooseNewLaneOffset(lp_trigPlayer, lv_heroesToAvoid, libAIAI_gf_HeroAIEnemyTowersInRange(lp_trigPlayer, libAIAI_gv_aIHeroAvoidNearbyEnemyTowerSearchRadius, true)));
        libAIAI_gf_HeroAIUpdateLaneTargetPosition(lp_trigPlayer, false);
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextLaneOffsetChangeTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroRetreatChangeLaneOffsetFrequency);
    }

    libAIAI_gf_HeroAIEval(lp_trigPlayer);
    if ((DistanceBetweenPoints(libGame_gv_players[lp_trigPlayer].lv_spawnPoint, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) > 30.0) && (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroClosestLanePoint) > libAIAI_gv_aIHeroLaneLeashDistance)) {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane > 0)) {
            libAIAI_gf_HeroAIStartRetreatLane(lp_trigPlayer);
        }
        else {
            libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        }
        return 8;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition) <= libAIAI_gv_aIHeroCloseEnoughDist)) {
        libAIAI_gf_HeroAIUpdateLaneTargetPosition(lp_trigPlayer, false);
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if (((lv_heroOrder == null) || (UnitOrderIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_heroOrder) == false) || ((lv_orderTargetPosition != null) && (DistanceBetweenPoints(lv_orderTargetPosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition) >= libAIAI_gv_aIHeroCloseEnoughDist)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIAvoidAOE (int lp_trigPlayer) {
    // Variable Declarations
    bool lv_stillInAOE;
    point lv_heroPosition;
    order lv_heroOrder;
    point lv_orderTargetPosition;
    abilcmd lv_orderAbility;

    // Variable Initialization

    // Implementation
    lv_heroPosition = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    if ((lv_heroOrder != null)) {
        lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
        lv_orderAbility = OrderGetAbilityCommand(lv_heroOrder);
    }

    if (((TimerGetElapsed(libGame_gv_gameTimer) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_avoidAOETimeout) || ((libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 1.0) == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToSpawnHealth)))) {
        libAIAI_gf_HeroAIReturnToCurrentObjective(lp_trigPlayer);
        return 8;
    }

    lv_stillInAOE = libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer);
    if ((lv_heroOrder != null) && (lv_orderAbility == libAIAI_gv_aIMoveAbil) && (lv_orderTargetPosition != null) && (DistanceBetweenPoints(lv_orderTargetPosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition) < libAIAI_gv_aIHeroSamePositionDist)) {
        return 8;
    }

    if (((lv_stillInAOE == true) || (DistanceBetweenPoints(lv_heroPosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition) >= libAIAI_gv_aIHeroAvoidAOERetreatExtraDistance))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition), c_orderQueueReplace);
        return 8;
    }

    libAIAI_gf_HeroAIReturnToCurrentObjective(lp_trigPlayer);
    return 8;
}

int libAIAI_gf_HeroAICastTactical (int lp_trigPlayer) {
    // Variable Declarations
    bool lv_stillInAOE;
    point lv_heroPosition;
    order lv_heroOrder;
    point lv_orderTargetPosition;
    abilcmd lv_orderAbility;

    // Variable Initialization

    // Implementation
    if ((TimerGetElapsed(libGame_gv_gameTimer) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_castTacticalTimeout)) {
        libAIAI_gf_HeroAIReturnToCurrentObjective(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_castTacticalEndIfIdleOrVeryInjured == true) && ((UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0) == null) || ((libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 1.0) == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToSpawnHealth)))) {
        libAIAI_gf_HeroAIReturnToCurrentObjective(lp_trigPlayer);
        return 8;
    }

    return 8;
}

int libAIAI_gf_HeroAIHarassSiegeEnemy (int lp_trigPlayer) {
    // Variable Declarations
    order lv_heroOrder;
    unit lv_lastAttacker;

    // Variable Initialization

    // Implementation
    libAIAI_gf_HeroAIEval(lp_trigPlayer);
    lv_lastAttacker = libAIAI_gv_heroAIDamageTracking[lp_trigPlayer].lv_lastAttacker;
    if (((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) || (UnitIsAlive(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_siegeHarassTarget) == false) || (libAIAI_gf_AIGetActiveWeaponRange(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_siegeHarassTarget) < libAIAI_gv_aIHeroSiegeEnemyMinWeaponRange) || (libAIAI_gf_HeroAIEnemyEvalInCircle(lp_trigPlayer, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_siegeHarassTarget), libAIAI_gv_aIHeroCloseToSiegeEnemyDistance, true, true, true) > (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_selfEval + 100.0)) || ((libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 1.0) == true) && (UnitTypeTestAttribute(UnitGetType(lv_lastAttacker), c_unitAttributeHeroic) == true) && (lv_lastAttacker != libAIAI_gv_aIHeroes[lp_trigPlayer].lv_siegeHarassTarget)))) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_siegeHarassTarget = null;
        libAIAI_gf_HeroAIStartRetreatLane(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextOffensiveSpellCheckTime <= TimerGetElapsed(libGame_gv_gameTimer)) && (libAIAI_gf_HeroAIRandomlyCastAbilityOnTarget(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_siegeHarassTarget) == true)) {
        return 8;
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    if (((lv_heroOrder == null) || ((OrderGetAbilityCommand(lv_heroOrder) == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility) && (OrderGetTargetUnit(lv_heroOrder) != libAIAI_gv_aIHeroes[lp_trigPlayer].lv_siegeHarassTarget)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingUnit(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_siegeHarassTarget), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIWaitForMinions (int lp_trigPlayer) {
    // Variable Declarations
    point lv_contentionPoint;
    fixed lv_frontTowerPosition;
    fixed lv_frontMinionPosition;
    fixed lv_contentionPointLanePosition;
    bool lv_allyMinionsHaveArrived;
    fixed lv_laneOffset;
    fixed lv_distanceBehindContentionPoint;
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if (((libAIAI_gf_HeroAIShouldRetreatLane(lp_trigPlayer) == true) || (libAIAI_gf_HeroAIShouldRetreatFromAttacker(lp_trigPlayer) == true))) {
        libAIAI_gf_HeroAIStartRetreatLane(lp_trigPlayer);
        return 8;
    }

    lv_contentionPoint = libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_contentionPoint;
    lv_frontMinionPosition = libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_frontMinionPosition;
    lv_contentionPointLanePosition = libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_contentionPointLanePosition;
    if (((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_contentionPoint) > 10.0) || ((lv_contentionPointLanePosition == lv_frontMinionPosition) && (libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_numNonSiegeAllyMinionsNearContentionPoint > 0)) || (libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_numEnemyHeroesNearContentionPoint > 0) || (libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_numEnemyMinionsNearContentionPoint > 0))) {
        libAIAI_gf_HeroAIStartAdvanceLane(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIHarassSiegeEnemyLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextWaitingRepositionTime < TimerGetElapsed(libGame_gv_gameTimer))) {
        libAIAI_gf_HeroAIChooseNewWaitingPosition(lp_trigPlayer);
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if (((lv_heroOrder == null) || ((lv_orderTargetPosition != null) && (DistanceBetweenPoints(lv_orderTargetPosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition) >= libAIAI_gv_aIHeroCloseEnoughDist)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIReturnToLane (int lp_trigPlayer) {
    // Variable Declarations
    int lv_targetLane;
    int lv_closestLane;
    point lv_closestPointToLane;
    point lv_campLoc;
    int lv_closestIndex;
    int lv_secondaryIndex;
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    lv_targetLane = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToLaneLane;
    libGame_gf_CalculateClosestLaneDataForLane(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_targetLane);
    lv_closestPointToLane = libGame_gv_closestLaneData.lv_laneData[lv_targetLane].lv_closestPoint;
    if (((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_closestPointToLane) <= libAIAI_gv_aIHeroCloseToLaneDistance) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_canPortHome == false))) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane = lv_targetLane;
        libAIAI_gf_HeroAIStartAdvanceLane(lp_trigPlayer);
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition), c_orderQueueReplace);
        return 8;
    }

    if ((libAIAI_gf_HeroAIShouldRetreatJungle(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIStartFleeInJungle(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIMountLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIHarassInJungleLogic(lp_trigPlayer, true) == true)) {
        return 8;
    }

    if (((libAIAI_gf_HeroAIPickUpHealthGlobeJungleLogic(lp_trigPlayer) == true) || (libAIAI_gf_HeroAIPickUpBuffGlobeJungleLogic(lp_trigPlayer) == true))) {
        return 8;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_jungleTargetPosition) <= libAIAI_gv_aIHeroCloseEnoughDist)) {
        libAIAI_gf_HeroAIUpdateJungleTargetPosition(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToLanePosition);
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if (((lv_heroOrder == null) || (UnitOrderIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_heroOrder) == false) || ((lv_orderTargetPosition != null) && (DistanceBetweenPoints(lv_orderTargetPosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_jungleTargetPosition) > 1.0)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_jungleTargetPosition), c_orderQueueReplace);
    }

    return 1;
}

int libAIAI_gf_HeroAIPickUpHealthGlobeJungle (int lp_trigPlayer) {
    // Implementation
    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hasFlyingMount == true) && (libAIAI_gf_HeroAIDismount(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((UnitIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetHealthGlobe) == false)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetHealthGlobe = null;
        libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        return 8;
    }

    libAIAI_gf_HeroAIEnsureOrderMovePoint(lp_trigPlayer, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetHealthGlobe));
    return 8;
}

int libAIAI_gf_HeroAIFocusHero (int lp_trigPlayer) {
    // Variable Declarations
    unit lv_hero;
    fixed lv_targetEval;
    fixed lv_bestTargetEval;
    unit lv_bestTarget;
    int lv_closestIndex;
    int lv_secondaryIndex;
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization
    lv_bestTargetEval = 524287.0;

    // Implementation
    if ((UnitIsAlive(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero) == false)) {
        lv_bestTarget = libAIAI_gf_HeroAIFindBestFocusHeroTarget(lp_trigPlayer);
        if ((lv_bestTarget != null)) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero = lv_bestTarget;
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHeroCheckPosition = null;
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_focusHeroTimeout = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroFocusHeroMaxChaseTime);
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingUnit(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero), c_orderQueueReplace);
            return 8;
        }
        else {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero = null;
            libAIAI_gf_HeroAIReturnToCurrentObjective(lp_trigPlayer);
            return 8;
        }
    }

    if ((libAIAI_gf_HeroAIShouldGiveUpOnFocusHero(lp_trigPlayer) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero = null;
        libAIAI_gf_HeroAIReturnToCurrentObjective(lp_trigPlayer);
        return 8;
    }

    if ((libNtve_gf_UnitIsVisibleToPlayer(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero, lp_trigPlayer) == false)) {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHeroCheckPosition == null)) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHeroCheckPosition = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero);
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_focusHeroTimeout = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroFocusHeroMaxChaseTime);
        }

    }
    else {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHeroCheckPosition = null;
    }
    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    if ((lv_heroOrder == null) && (libNtve_gf_UnitIsVisibleToPlayer(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero, lp_trigPlayer) == false) && (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHeroCheckPosition) < 1.0)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero = null;
        libAIAI_gf_HeroAIReturnToCurrentObjective(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_focusHeroTimeout < TimerGetElapsed(libGame_gv_gameTimer))) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextFocusHeroCheckTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroFocusHeroDelayAfterGivingUp);
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero = null;
        libAIAI_gf_HeroAIReturnToCurrentObjective(lp_trigPlayer);
        return 8;
    }

    if ((libNtve_gf_UnitIsVisibleToPlayer(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero, lp_trigPlayer) == true) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextOffensiveSpellCheckTime <= TimerGetElapsed(libGame_gv_gameTimer)) && (libAIAI_gf_HeroAIRandomlyCastAbilityOnTarget(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_focusHeroTimeout = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroFocusHeroMaxChaseTime);
        return 8;
    }

    if ((libAIAI_gf_HeroAIInWeaponRangeOfTarget(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero, 1.0) == true) && (libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(UnitGetOwner(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero), 1.0) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_focusHeroTimeout = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroFocusHeroMaxChaseTime);
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHeroCheckPosition != null)) {
        lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
        if (((lv_heroOrder == null) || (OrderGetAbilityCommand(lv_heroOrder) == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility) || ((lv_orderTargetPosition != null) && (DistanceBetweenPoints(lv_orderTargetPosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHeroCheckPosition) >= 1.0)))) {
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHeroCheckPosition), c_orderQueueReplace);
        }

    }
    else {
        if (((lv_heroOrder == null) || (OrderGetAbilityCommand(lv_heroOrder) == AbilityCommand("move", 0)) || ((OrderGetAbilityCommand(lv_heroOrder) == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility) && (OrderGetTargetUnit(lv_heroOrder) != libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero)))) {
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingUnit(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero), c_orderQueueReplace);
        }

    }
    return 8;
}

int libAIAI_gf_HeroAIFocusCore (int lp_trigPlayer) {
    // Variable Declarations
    unit lv_enemyCore;
    unit lv_hero;
    fixed lv_targetEval;
    fixed lv_bestTargetEval;
    unit lv_bestTarget;
    int lv_closestIndex;
    int lv_secondaryIndex;
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization
    lv_bestTargetEval = 524287.0;

    // Implementation
    if ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order)) {
        lv_enemyCore = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core;
    }
    else {
        lv_enemyCore = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core;
    }
    if ((libAIAI_gf_HeroAIShouldGiveUpOnFocusCore(lp_trigPlayer, lv_enemyCore) == true)) {
        libAIAI_gf_HeroAIStartRetreatLane(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextOffensiveSpellCheckTime <= TimerGetElapsed(libGame_gv_gameTimer)) && (libAIAI_gf_HeroAIRandomlyCastAbilityOnTarget(lp_trigPlayer, lv_enemyCore) == true)) {
        return 8;
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if (((lv_heroOrder == null) || ((lv_orderTargetPosition != null) && (DistanceBetweenPoints(lv_orderTargetPosition, UnitGetPosition(lv_enemyCore)) >= 1.0)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingUnit(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility, lv_enemyCore), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAITeleportHomeLane (int lp_trigPlayer) {
    unitgroup auto09A62E51_g;
    int auto09A62E51_u;

    // Variable Declarations
    region lv_homeRegion;
    unit lv_allyHero;
    unitgroup lv_nearbyAllyHeroes;
    playergroup lv_nearbyAllyPlayers;
    fixed lv_safeDistanceBehindFrontTower;

    // Variable Initialization
    lv_nearbyAllyHeroes = UnitGroupEmpty();
    lv_nearbyAllyPlayers = PlayerGroupEmpty();

    // Implementation
    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order)) {
        lv_homeRegion = libCore_gv_mAPOrderBaseRegion;
    }
    else {
        lv_homeRegion = libCore_gv_mAPChaosBaseRegion;
    }
    if ((libNtve_gf_UnitInRegion(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_homeRegion) == false) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_announcedRetreat == false)) {
        lv_nearbyAllyHeroes = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceAlly, RegionCircle(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), 15.0), libCore_gv_filtersHeroic, 0);
        auto09A62E51_g = lv_nearbyAllyHeroes;
        auto09A62E51_u = 1;
        for ( ; auto09A62E51_u <= UnitGroupCount(auto09A62E51_g, c_unitCountAll) ; auto09A62E51_u += (lv_allyHero == UnitGroupUnit(auto09A62E51_g, auto09A62E51_u)) ) {
            lv_allyHero = UnitGroupUnit(auto09A62E51_g, auto09A62E51_u);
            PlayerGroupAdd(lv_nearbyAllyPlayers, UnitGetOwner(lv_allyHero));
        }
        libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_AIRetreat, lp_trigPlayer, lv_nearbyAllyPlayers);
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_announcedRetreat = true;
    }

    if ((RegionContainsPoint(lv_homeRegion, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) == true) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_canPortHome == true)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSReturnToSpawn);
        return 1;
    }

    lv_safeDistanceBehindFrontTower = libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_frontTowerPosition;
    lv_safeDistanceBehindFrontTower = libAIAI_gf_AIRetreatLanePosition(libGame_gv_players[lp_trigPlayer].lv_faction, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane, lv_safeDistanceBehindFrontTower, libAIAI_gv_aIHeroSafeDistanceBehindTower);
    if (((libAIAI_gf_HeroAIIsSafeLane(lp_trigPlayer) == true) || ((UnitGroupCount(UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroSafeDistanceBehindTower), libCore_gv_filtersHeroic, 1), c_unitCountAlive) == 0) && (libAIAI_gf_HeroAIIsPlayerBehindLanePosition(lp_trigPlayer, lv_safeDistanceBehindFrontTower) == true)) || ((OrderGetAbilityCommand(UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0)) == AbilityCommand("PortBackToBase", 0)) && (UnitOrderGetProgress(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) > 80.0))) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_canPortHome == true)) {
        if ((OrderGetAbilityCommand(UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0)) != AbilityCommand("PortBackToBase", 0))) {
            if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToUseAbathurLogic == true) && (UnitHasBehavior2(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, "AssumingDirectControlBehavior") == true))) {
                if ((libAIAI_gf_AbathurForceAssumingDirectControl(lp_trigPlayer) == true)) {
                    HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, Order(AbilityCommand("PortBackToBase", 0)), c_orderQueueReplace);
                }

            }
            else {
                HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, Order(AbilityCommand("PortBackToBase", 0)), c_orderQueueReplace);
            }
        }

        return 8;
    }

    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSRetreat);
    HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition), c_orderQueueReplace);
    return 8;
}

int libAIAI_gf_HeroAIDrinkMoonwell (int lp_trigPlayer) {
    // Variable Declarations
    fixed lv_currentHealthPercent;
    order lv_order;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    lv_currentHealthPercent = UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent);
    if (((lv_currentHealthPercent >= 99.0) || (UnitHasBehavior2(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, "HealingFountainCooldown") == true) || (UnitIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetMoonwell) == false) || (libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 1.0) == true))) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetMoonwell = null;
        libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        return 8;
    }

    if (((UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0) == null) || (OrderGetAbilityCommand(UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0)) != AbilityCommand("FountainDrink", 0)))) {
        lv_order = OrderTargetingUnit(AbilityCommand("FountainDrink", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetMoonwell);
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_order, c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIFleeInJungle (int lp_trigPlayer) {
    // Variable Declarations
    region lv_homeRegion;
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order)) {
        lv_homeRegion = libCore_gv_mAPOrderBaseRegion;
    }
    else {
        lv_homeRegion = libCore_gv_mAPChaosBaseRegion;
    }
    if ((RegionContainsPoint(lv_homeRegion, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) == true)) {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_canPortHome == true)) {
            libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSReturnToSpawn);
        }
        else {
            libAIAI_gf_HeroAILeaveCurrentObjective(lp_trigPlayer);
        }
        return 1;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIDrinkMoonwellLogic(lp_trigPlayer, RegionCircle(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroLaneLeashDistance)) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIIsSafeJungle(lp_trigPlayer) == true)) {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_safeInJungleRetreating == false)) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_safeInJungleRetreating = true;
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_safeInJungleStartTime = TimerGetElapsed(libGame_gv_gameTimer);
        }

        if ((libAIAI_gf_HeroAISafeWhileRetreatingInJungleLogic(lp_trigPlayer) == true)) {
            return 8;
        }

    }
    else {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_safeInJungleRetreating = false;
    }
    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_jungleTargetPosition) <= libAIAI_gv_aIHeroCloseEnoughDist)) {
        libAIAI_gf_HeroAIUpdateJungleTargetPosition(lp_trigPlayer, libGame_gv_players[lp_trigPlayer].lv_spawnPoint);
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if (((lv_heroOrder == null) || (UnitOrderIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_heroOrder) == false) || ((lv_orderTargetPosition != null) && (DistanceBetweenPoints(lv_orderTargetPosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_jungleTargetPosition) > libAIAI_gv_aIHeroCloseEnoughDist)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_jungleTargetPosition), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAITeleportHomeJungle (int lp_trigPlayer) {
    // Variable Declarations
    region lv_homeRegion;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order)) {
        lv_homeRegion = libCore_gv_mAPOrderBaseRegion;
    }
    else {
        lv_homeRegion = libCore_gv_mAPChaosBaseRegion;
    }
    if ((RegionContainsPoint(lv_homeRegion, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) == true) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_canPortHome == true)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSReturnToSpawn);
        return 1;
    }

    if (((libAIAI_gf_HeroAIIsSafeJungle(lp_trigPlayer) == true) || ((OrderGetAbilityCommand(UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0)) == AbilityCommand("PortBackToBase", 0)) && (UnitOrderGetProgress(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) > 80.0))) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_canPortHome == true)) {
        if ((OrderGetAbilityCommand(UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0)) != AbilityCommand("PortBackToBase", 0))) {
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, Order(AbilityCommand("PortBackToBase", 0)), c_orderQueueReplace);
        }

        return 8;
    }

    libAIAI_gf_HeroAIStartFleeInJungle(lp_trigPlayer);
    return 8;
}

int libAIAI_gf_HeroAIHarassInJungle (int lp_trigPlayer) {
    // Variable Declarations
    fixed lv_allyEval;
    fixed lv_enemyEval;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if (((UnitIsAlive(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_harassInJungleTarget) == false) || ((libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 1.0) == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth)) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_harassInJungleTimeout < TimerGetElapsed(libGame_gv_gameTimer)))) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_harassInJungleTarget = null;
        libAIAI_gf_HeroAIReturnToCurrentObjective(lp_trigPlayer);
        return 8;
    }

    lv_allyEval = libAIAI_gf_HeroAIAllyEvalInCircle(lp_trigPlayer, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroSightRange, true, false, false);
    lv_enemyEval = libAIAI_gf_HeroAIEnemyEvalInCircle(lp_trigPlayer, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroSightRange, true, false, false);
    if ((lv_enemyEval > ((lv_allyEval * 1.1) + 100.0))) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_harassInJungleTarget = null;
        libAIAI_gf_HeroAIReturnToCurrentObjective(lp_trigPlayer);
        return 8;
    }

    libAIAI_gf_HeroAIEnsureOrderAttackUnit(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_harassInJungleTarget);
    return 8;
}

int libAIAI_gf_HeroAIPaceAround (int lp_trigPlayer) {
    // Variable Declarations
    point lv_pacePosition;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_paceAroundTimeout < TimerGetElapsed(libGame_gv_gameTimer))) {
        libAIAI_gf_HeroAIReturnToCurrentObjective(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextPaceAroundRepositionTime < TimerGetElapsed(libGame_gv_gameTimer))) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextPaceAroundRepositionTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroPaceAroundRepositionFrequency);
        lv_pacePosition = RegionRandomPoint(RegionCircle(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_paceAroundStartPosition, libAIAI_gv_aIHeroPaceAroundRadius));
        UnitBehaviorAdd(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, "TemporarilyHoldFire", libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 1);
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_pacePosition), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIDefendObjective (int lp_trigPlayer) {
    unitgroup autoDA463A4F_g;
    int autoDA463A4F_u;
    unitgroup auto5D72124F_g;
    int auto5D72124F_u;

    // Variable Declarations
    point lv_objectivePosition;
    unitgroup lv_enemies;
    unitgroup lv_enemyTargets;
    unit lv_enemy;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_enemyTargets = UnitGroupEmpty();

    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_stateExitConditionTrigger != null)) {
        libAIAI_gv_heroAICustomStateCurrentPlayer = lp_trigPlayer;
        libAIAI_gv_heroAICustomStateReturnBoolean = false;
        TriggerExecute(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_stateExitConditionTrigger, true, true);
        if ((libAIAI_gv_heroAICustomStateReturnBoolean == true)) {
            return 8;
        }

    }

    if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToSpawnHealth)) {
        libAIAI_gf_HeroAILeaveCurrentObjective(lp_trigPlayer);
        return 8;
    }

    if ((UnitIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hSMapStateCurrentTargetUnit) == true)) {
        lv_objectivePosition = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hSMapStateCurrentTargetUnit);
    }
    else {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hSMapStateCurrentTargetPoint != null)) {
            lv_objectivePosition = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hSMapStateCurrentTargetPoint;
        }
        else {
            libAIAI_gf_HeroAILeaveCurrentObjective(lp_trigPlayer);
            return 8;
        }
    }
    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIMoveTo2(lp_trigPlayer, null, lv_objectivePosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_moveStopRange, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_moveStartRange, false, false, false, true) == true)) {
        return 8;
    }

    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_defendObjectiveCaptureAbility == null) || (UnitIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hSMapStateCurrentTargetUnit) == false) || (libAIAI_gf_HeroAIIsPlayerAlmostFinishedCapturingMacGuffin(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hSMapStateCurrentTargetUnit) == false))) {
        lv_enemies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, RegionCircle(lv_objectivePosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_defendObjectiveGuardTargetingRange), UnitFilter(0, 0, (1 << c_targetFilterMassive) | (1 << c_targetFilterStructure) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
        lv_enemyTargets = UnitGroupFilter(null, c_playerAny, lv_enemies, libCore_gv_filtersHeroic, 0);
        autoDA463A4F_g = lv_enemyTargets;
        autoDA463A4F_u = 1;
        for ( ; autoDA463A4F_u <= UnitGroupCount(autoDA463A4F_g, c_unitCountAll) ; autoDA463A4F_u += (lv_enemy == UnitGroupUnit(autoDA463A4F_g, autoDA463A4F_u)) ) {
            lv_enemy = UnitGroupUnit(autoDA463A4F_g, autoDA463A4F_u);
            if ((libNtve_gf_UnitIsVisibleToPlayer(lv_enemy, lp_trigPlayer) == false)) {
                UnitGroupRemove(lv_enemyTargets, lv_enemy);
            }

        }
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_defendObjectiveCaptureAbility != null) && (UnitIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hSMapStateCurrentTargetUnit) == true)) {
            auto5D72124F_g = lv_enemyTargets;
            auto5D72124F_u = 1;
            for ( ; auto5D72124F_u <= UnitGroupCount(auto5D72124F_g, c_unitCountAll) ; auto5D72124F_u += (lv_enemy == UnitGroupUnit(auto5D72124F_g, auto5D72124F_u)) ) {
                lv_enemy = UnitGroupUnit(auto5D72124F_g, auto5D72124F_u);
                if ((OrderGetAbilityCommand(UnitOrder(lv_enemy, 0)) == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_defendObjectiveCaptureAbility)) {
                    libAIAI_gf_HeroAIEnsureOrderAttackUnit(lp_trigPlayer, lv_enemy);
                    return 8;
                }

            }
        }

        lv_enemy = libAIAI_gf_HeroAIFindBestTarget(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_enemyTargets, lv_enemies, 0.0, libAIAI_gv_aIHeroVisionRange, c_Storm_AI_PreferCloserTargets, 0.0, 0.0, c_Storm_AI_StronglyPreferUnhealthyTargets, 0.0);
        if ((UnitIsAlive(lv_enemy) == true)) {
            libAIAI_gf_HeroAIEnsureOrderAttackUnit(lp_trigPlayer, lv_enemy);
            return 8;
        }

        lv_enemyTargets = UnitGroupFilterRegion(lv_enemies, RegionCircle(lv_objectivePosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_defendObjectiveGuardPositionRange), 0);
        if ((UnitGroupCount(lv_enemyTargets, c_unitCountAlive) > 0)) {
            if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_defendObjectiveGuardPositionRange > 0.0)) {
                if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_objectivePosition) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_defendObjectiveGuardPositionRange)) {
                    libAIAI_gf_HeroAIEnsureOrderMovePointCloseEnough(lp_trigPlayer, lv_objectivePosition);
                    return 8;
                }

            }

            lv_enemy = libAIAI_gf_HeroAIFindBestTarget(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_enemyTargets, lv_enemies, 0.0, libAIAI_gv_aIHeroVisionRange, c_Storm_AI_PreferCloserTargets, 0.0, 0.0, c_Storm_AI_StronglyPreferUnhealthyTargets, 0.0);
            if ((UnitIsAlive(lv_enemy) == true)) {
                libAIAI_gf_HeroAIEnsureOrderAttackUnit(lp_trigPlayer, lv_enemy);
                return 8;
            }

        }

    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_defendObjectiveCaptureAbility != null) && (UnitIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hSMapStateCurrentTargetUnit) == true) && (UnitTestState(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hSMapStateCurrentTargetUnit, c_unitStateTargetable) == true) && (libAIAI_gf_HeroAIIsAllyCapturingMacGuffin(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hSMapStateCurrentTargetUnit) == false)) {
        libAIAI_gf_HeroAIEnsureCaptureMacGuffin(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hSMapStateCurrentTargetUnit);
        return 8;
    }

    lv_enemy = libAIAI_gf_HeroAIFindBestTarget(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_enemies, lv_enemies, 0.0, libAIAI_gv_aIHeroVisionRange, c_Storm_AI_PreferCloserTargets, 0.0, 0.0, c_Storm_AI_StronglyPreferUnhealthyTargets, 0.0);
    if ((UnitIsAlive(lv_enemy) == true)) {
        libAIAI_gf_HeroAIEnsureOrderAttackUnit(lp_trigPlayer, lv_enemy);
        return 8;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_defendObjectiveGuardPositionRange == 0.0)) {
        libAIAI_gf_HeroAIEnsureOrderMovePointCloseEnough(lp_trigPlayer, lv_objectivePosition);
    }
    else {
        if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_objectivePosition) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_defendObjectiveGuardPositionRange)) {
            libAIAI_gf_HeroAIEnsureOrderMovePointCloseEnough(lp_trigPlayer, lv_objectivePosition);
        }
        else {
            if ((UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0) == null)) {
                HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lv_objectivePosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_defendObjectiveGuardPositionRange, libNtve_gf_RandomAngle())), c_orderQueueReplace);
            }

        }
    }
    return 8;
}

int libAIAI_gf_HeroAIObjectiveStaging (int lp_trigPlayer) {
    // Variable Declarations
    point lv_objectivePosition;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_stateExitConditionTrigger != null)) {
        libAIAI_gv_heroAICustomStateCurrentPlayer = lp_trigPlayer;
        libAIAI_gv_heroAICustomStateReturnBoolean = false;
        TriggerExecute(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_stateExitConditionTrigger, true, true);
        if ((libAIAI_gv_heroAICustomStateReturnBoolean == true)) {
            return 8;
        }

    }

    if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToSpawnHealth)) {
        libAIAI_gf_HeroAILeaveCurrentObjective(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIDrinkMoonwellLogic(lp_trigPlayer, RegionCircle(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroMoonwellSearchRadius)) == true)) {
        return 8;
    }

    lv_objectivePosition = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_objectiveStagingPoint;
    if ((libAIAI_gf_HeroAIMoveTo2(lp_trigPlayer, null, lv_objectivePosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_moveStopRange, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_moveStartRange, false, false, false, true) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIStagingChooseTarget(lp_trigPlayer, lv_objectivePosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_defendObjectiveGuardTargetingRange) == true)) {
        return 8;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_defendObjectiveGuardPositionRange == 0.0)) {
        libAIAI_gf_HeroAIEnsureOrderMovePointCloseEnough(lp_trigPlayer, lv_objectivePosition);
    }
    else {
        if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_objectivePosition) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_defendObjectiveGuardPositionRange)) {
            libAIAI_gf_HeroAIEnsureOrderMovePointCloseEnough(lp_trigPlayer, lv_objectivePosition);
        }
        else {
            if ((UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0) == null)) {
                HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lv_objectivePosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_defendObjectiveGuardPositionRange, libNtve_gf_RandomAngle())), c_orderQueueReplace);
            }

        }
    }
    return 8;
}

int libAIAI_gf_HeroAIWaitInSpawn (int lp_trigPlayer) {
    // Variable Declarations
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_shouldWaitInSpawn == false)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToWaitInSpawn = false;
        libAIAI_gf_HeroAIReturnToCurrentObjective(lp_trigPlayer);
        return 1;
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libGame_gv_players[lp_trigPlayer].lv_spawnPoint) > 0.5) && ((lv_heroOrder == null) || ((lv_orderTargetPosition != null) && (DistanceBetweenPoints(lv_orderTargetPosition, libGame_gv_players[lp_trigPlayer].lv_spawnPoint) > 0.5)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), libGame_gv_players[lp_trigPlayer].lv_spawnPoint), c_orderQueueReplace);
    }

    return 1;
}

int libAIAI_gf_HeroAIDefault (int lp_trigPlayer) {
    // Variable Declarations
    point lv_point;
    order lv_heroOrder;
    point lv_orderTargetPosition;
    fixed lv_currentHealthPercent;
    int lv_desiredHealth;
    int lv_healingNeeded;
    unitgroup lv_nearbyMoonwells;

    // Variable Initialization
    lv_nearbyMoonwells = UnitGroupEmpty();

    // Implementation
    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    lv_currentHealthPercent = UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent);
    if (((libAIAI_gv_aIHeroUseMoonwells[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_canPortHome == false)) && (lv_currentHealthPercent < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_startOffensiveHealth) && (UnitHasBehavior2(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, "HealingFountainCooldown") == false) && (libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 1.0) == false)) {
        lv_nearbyMoonwells = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("TownMoonwell", "TownMoonwellL2", "TownMoonwellL3", lp_trigPlayer, c_unitAllianceAlly, RegionCircle(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroMoonwellSearchRadius), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_nearbyMoonwells, c_unitCountAlive) > 0)) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetMoonwell = UnitGroupClosestToPoint(lv_nearbyMoonwells, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit));
            libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSDrinkMoonwell);
            return 8;
        }

    }

    if ((libAIAI_gf_HeroAIHarassInJungleLogic(lp_trigPlayer, true) == true)) {
        return 8;
    }

    if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifeExpectedPercent, c_unitPropCurrent) < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_startOffensiveHealth) && (libAIAI_gf_HeroAIMoveTo2(lp_trigPlayer, null, libGame_gv_players[lp_trigPlayer].lv_spawnPoint, libAIAI_gv_aIHeroCloseEnoughDist, libAIAI_gv_aIHeroCloseEnoughDist, false, false, false, true) == true)) {
        return 8;
    }

    return 8;
}

int libAIAI_gf_HeroAICaptureWatchTower (int lp_trigPlayer) {
    // Variable Declarations
    int lv_teamPlayer;
    int lv_teamIndex;
    order lv_heroOrder;
    unit lv_watchTower;
    point lv_watchTowerLocation;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
        lv_teamPlayer = libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
        lv_teamIndex = (1);
        lv_teamPlayer = libCore_gv_cOMPUTER_TeamChaos;
    }
    if ((libAIAI_gf_HeroAIMountLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    libAIAI_gf_HeroAIEval(lp_trigPlayer);
    lv_watchTower = libGame_gv_watchTowers[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetWatchTower].lv_watchTowerUnit;
    if (((lv_teamPlayer == UnitGetOwner(lv_watchTower)) || (UnitGroupCount(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroes, c_unitCountAlive) > 0) || (libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 3.0) == true))) {
        libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextWatchTowerConsiderTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroWatchTowerDelay);
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetWatchTower = 0;
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane > 0)) {
            libAIAI_gf_HeroAIStartReturnToLane(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane);
        }
        else {
            libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        }
        return 8;
    }

    lv_watchTowerLocation = UnitGetPosition(lv_watchTower);
    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_watchTowerLocation) > libCore_gv_data_WatchTower_CaptureRadius_C)) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_watchTowerLocation), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIVehicleReturnToLane (int lp_trigPlayer) {
    // Variable Declarations
    int lv_targetLane;
    int lv_closestLane;
    point lv_closestPointToLane;
    point lv_campLoc;
    int lv_closestIndex;
    int lv_secondaryIndex;
    order lv_vehicleOrder;
    point lv_orderTargetPosition;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    lv_targetLane = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToLaneLane;
    libGame_gf_CalculateClosestLaneDataForLane(UnitGetPosition(libGame_gv_players[lp_trigPlayer].lv_activeVehicle), lv_targetLane);
    lv_closestPointToLane = libGame_gv_closestLaneData.lv_laneData[lv_targetLane].lv_closestPoint;
    if ((DistanceBetweenPoints(UnitGetPosition(libGame_gv_players[lp_trigPlayer].lv_activeVehicle), lv_closestPointToLane) <= libAIAI_gv_aIHeroCloseToLaneDistance)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane = lv_targetLane;
        libAIAI_gf_HeroAIStartAdvanceLane(lp_trigPlayer);
        HeroAIUnitIssueOrder(libGame_gv_players[lp_trigPlayer].lv_activeVehicle, OrderTargetingPoint(AbilityCommand("attack", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition), c_orderQueueReplace);
        return 8;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(libGame_gv_players[lp_trigPlayer].lv_activeVehicle), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_jungleTargetPosition) <= libAIAI_gv_aIHeroCloseEnoughDist)) {
        libAIAI_gf_HeroAIUpdateJungleTargetPosition(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToLanePosition);
    }

    lv_vehicleOrder = UnitOrder(libGame_gv_players[lp_trigPlayer].lv_activeVehicle, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_vehicleOrder);
    if (((lv_vehicleOrder == null) || (UnitOrderIsValid(libGame_gv_players[lp_trigPlayer].lv_activeVehicle, lv_vehicleOrder) == false) || ((lv_orderTargetPosition != null) && (DistanceBetweenPoints(lv_orderTargetPosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_jungleTargetPosition) > 1.0)))) {
        HeroAIUnitIssueOrder(libGame_gv_players[lp_trigPlayer].lv_activeVehicle, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_jungleTargetPosition), c_orderQueueReplace);
    }

    return 1;
}

int libAIAI_gf_HeroAIVehicleAdvanceInLane (int lp_trigPlayer) {
    // Implementation
    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((UnitIsValid(libGame_gv_players[lp_trigPlayer].lv_activeVehicle) == false)) {
        libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIVehicleAggroEnemyCore(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAILaneChangeTarget(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIAttackingBadTarget(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIUpdateLaneTargetPosition(lp_trigPlayer, true);
        HeroAIUnitIssueOrder(libGame_gv_players[lp_trigPlayer].lv_activeVehicle, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition), c_orderQueueReplace);
        return 8;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(libGame_gv_players[lp_trigPlayer].lv_activeVehicle), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition) <= libAIAI_gv_aIHeroCloseEnoughDist)) {
        libAIAI_gf_HeroAIUpdateLaneTargetPosition(lp_trigPlayer, true);
        return 8;
    }

    if ((UnitOrder(libGame_gv_players[lp_trigPlayer].lv_activeVehicle, 0) == null)) {
        libAIAI_gf_HeroAIUpdateLaneTargetPosition(lp_trigPlayer, true);
        return 8;
    }

    return 8;
}

int libAIAI_gf_HeroAIDefendCoreAttack (int lp_trigPlayer) {
    // Variable Declarations
    point lv_corePosition;
    unit lv_currentTarget;
    int lv_currentTargetOwner;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order)) {
        lv_corePosition = UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core);
    }
    else {
        lv_corePosition = UnitGetPosition(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core);
    }
    if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_startOffensiveHealth)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome = true;
        libAIAI_gf_HeroAIStartFleeInJungle(lp_trigPlayer);
        return 1;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_corePosition) > libAIAI_gv_aIHeroDefendFarFromCoreDistance)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSDefendCoreLeash);
        return 1;
    }

    if ((libAIAI_gf_HeroAIMountLogic(lp_trigPlayer) == true)) {
        return 1;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    lv_currentTarget = libAIAI_gf_HeroAIDefendCoreChooseTarget(lp_trigPlayer, libAIAI_gv_aIHeroDefendCloseToCoreDistance);
    if ((UnitIsValid(lv_currentTarget) == false)) {
        lv_currentTarget = libAIAI_gf_HeroAIDefendCoreChooseTarget(lp_trigPlayer, libAIAI_gv_aIHeroDefendFarFromCoreDistance);
        if ((UnitIsValid(lv_currentTarget) == false)) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToDefendCore = false;
            libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
            return 8;
        }
        else {
            lv_currentTargetOwner = UnitGetOwner(lv_currentTarget);
            if ((lv_currentTargetOwner >= 1) && (lv_currentTargetOwner <= libCore_gv_bALMaxPlayers) && (UnitGetDamageTakenTime(lv_currentTarget) > 5.0) && ((TimerGetElapsed(libGame_gv_gameTimer) - libAIAI_gv_aIHeroes[lp_trigPlayer].lv_timeTargetAcquired) > 10.0)) {
                libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSDefendCoreLeash);
                return 8;
            }

        }
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextOffensiveSpellCheckTime <= TimerGetElapsed(libGame_gv_gameTimer))) {
        if ((libAIAI_gf_HeroAIRandomlyCastAbilityOnTarget(lp_trigPlayer, lv_currentTarget) == true)) {
            return 8;
        }

    }

    libAIAI_gf_HeroAIEnsureOrderAttackUnit(lp_trigPlayer, lv_currentTarget);
    return 8;
}

int libAIAI_gf_HeroAIDefendCoreLeash (int lp_trigPlayer) {
    // Variable Declarations
    point lv_corePosition;
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order)) {
        lv_corePosition = UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core);
    }
    else {
        lv_corePosition = UnitGetPosition(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core);
    }
    if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_startOffensiveHealth)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome = true;
        libAIAI_gf_HeroAIStartFleeInJungle(lp_trigPlayer);
        return 8;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_corePosition) <= libAIAI_gv_aIHeroDefendCloseToCoreDistance)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSDefendCoreAttack);
        return 8;
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if (((lv_heroOrder == null) || ((lv_orderTargetPosition != null) && (DistanceBetweenPoints(lv_orderTargetPosition, lv_corePosition) >= libAIAI_gv_aIHeroCloseEnoughDist)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_corePosition), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIMinionBattleRetreat (int lp_trigPlayer) {
    // Variable Declarations
    fixed lv_laneOffset;
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIMinionBattleFinished(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIStartAdvanceLane(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAILaneChangingLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIIsSafeLane(lp_trigPlayer) == true) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_minionBattleRetreatTimeout < TimerGetElapsed(libGame_gv_gameTimer))) {
        libAIAI_gf_HeroAIStartMinionBattleReposition(lp_trigPlayer);
        return 8;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition) <= libAIAI_gv_aIHeroCloseEnoughDist)) {
        libAIAI_gf_HeroAIUpdateLaneTargetPosition(lp_trigPlayer, false);
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if (((lv_heroOrder == null) || ((lv_orderTargetPosition != null) && (DistanceBetweenPoints(lv_orderTargetPosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition) >= libAIAI_gv_aIHeroCloseEnoughDist)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIMinionBattleReposition (int lp_trigPlayer) {
    // Variable Declarations
    fixed lv_laneOffset;
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIMinionBattleFinished(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIStartAdvanceLane(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAILaneChangingLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if (((libAIAI_gf_HeroAIShouldRetreatLane(lp_trigPlayer) == true) || (libAIAI_gf_HeroAIShouldRetreatFromAttacker(lp_trigPlayer) == true))) {
        libAIAI_gf_HeroAIStartRetreatLane(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextMinionBattleAttackTime < TimerGetElapsed(libGame_gv_gameTimer))) {
        libAIAI_gf_HeroAIStartMinionBattleAttack(lp_trigPlayer);
        return 8;
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextMinionBattleRepositionRecalculateTime <= TimerGetElapsed(libGame_gv_gameTimer)) || (lv_heroOrder == null))) {
        libAIAI_gf_HeroAIUpdateMinionBattleRepositionPosition(lp_trigPlayer);
    }

    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if (((lv_heroOrder == null) || ((lv_orderTargetPosition != null) && (DistanceBetweenPoints(lv_orderTargetPosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition) >= 1.0)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIMinionBattleAttack (int lp_trigPlayer) {
    // Variable Declarations
    unit lv_lastAttacker;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIMinionBattleFinished(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIStartAdvanceLane(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIShouldRetreatLane(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIStartRetreatLane(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_minionBattleAttackTimeout < TimerGetElapsed(libGame_gv_gameTimer))) {
        libAIAI_gf_HeroAIStartMinionBattleRetreat(lp_trigPlayer, libAIAI_gv_aIHeroMinionBattleMinRepositionRetreatDuration);
        return 8;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIAssistFollowLeader(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIHarassSiegeEnemyLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAILaneChangeTarget(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition) <= libAIAI_gv_aIHeroCloseEnoughDist)) {
        libAIAI_gf_HeroAIUpdateLaneTargetPosition(lp_trigPlayer, true);
    }

    if ((UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0) == null)) {
        libAIAI_gv_heroAISegTriggerHeroIsAttacking = false;
        libCore_gv_segTriggerPlayer = lp_trigPlayer;
        libCore_gv_segTriggerUnit = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit;
        libCore_gf_CallRegisteredSegregationTriggers(libCore_ge_SegregationTriggerTypes_HeroAIIsCurrentlyAttacking);
        if ((libAIAI_gv_heroAISegTriggerHeroIsAttacking == false)) {
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition), c_orderQueueReplace);
        }
        else {
            libAIAI_gv_heroAISegTriggerHeroIsAttacking = false;
        }
    }

    return 8;
}

int libAIAI_gf_HeroAIMinionBattleHarass (int lp_trigPlayer) {
    // Variable Declarations
    order lv_heroOrder;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIShouldRetreatLane(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIStartRetreatLane(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_minionBattleHarassTimeout < TimerGetElapsed(libGame_gv_gameTimer))) {
        libAIAI_gf_HeroAIStartRetreatLane(lp_trigPlayer);
        return 8;
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    if (((lv_heroOrder == null) || ((OrderGetAbilityCommand(lv_heroOrder) == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility) && (OrderGetTargetUnit(lv_heroOrder) != libAIAI_gv_aIHeroes[lp_trigPlayer].lv_minionBattleHarassTarget)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingUnit(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_minionBattleHarassTarget), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIMinionCampInit (int lp_trigPlayer) {
    // Variable Declarations
    point lv_campLoc;
    region lv_homeRegion;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order)) {
        lv_homeRegion = libCore_gv_mAPOrderBaseRegion;
    }
    else {
        lv_homeRegion = libCore_gv_mAPChaosBaseRegion;
    }
    lv_campLoc = libMapM_gv_jungleCreepCamps[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp].lv_mapDataCampCaptainSpawnPoint;
    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_campLoc) < (libAIAI_gv_aIHeroHeadStraightToCampDist + 5.0)) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > 60.0)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane = 0;
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSMoveToCamp);
        return 8;
    }
    else {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome = true;
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane <= 0)) {
            libAIAI_gf_HeroAIStartFleeInJungle(lp_trigPlayer);
            return 8;
        }
        else {
            libAIAI_gf_HeroAIStartRetreatLane(lp_trigPlayer);
            return 8;
        }
    }
}

int libAIAI_gf_HeroAIMoveToCamp (int lp_trigPlayer) {
    // Variable Declarations
    int lv_campIndex;
    point lv_campLoc;
    bool lv_allDefendersKilled;
    bool lv_campCaptured;
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization

    // Implementation
    lv_campIndex = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp;
    lv_campLoc = libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mapDataCampCaptainSpawnPoint;
    lv_allDefendersKilled = libMapM_gv_jungleCreepCamps[lv_campIndex].lv_captureCaptureEnabled;
    lv_campCaptured = (libMapM_gv_jungleCreepCamps[lv_campIndex].lv_aIState == libMapM_ge_JungleCampStates_Dead);
    if ((lv_campCaptured == true)) {
        libAIAI_gf_HeroAIHeroStoppingCampAttack(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIShouldCancelCampAttack(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAICancelCampAttack(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp, libGame_gv_players[lp_trigPlayer].lv_faction);
    }

    if ((libAIAI_gf_HeroAIShouldRetreatJungle(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIStartFleeInJungle(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIMountLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_campLoc) <= libAIAI_gv_aIHeroNearCampDistance)) {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_arrivedAtCampTime <= 0.0)) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_arrivedAtCampTime = TimerGetElapsed(libGame_gv_gameTimer);
        }

        if ((lv_allDefendersKilled == true)) {
            libAIAI_gf_HeroAIStartCaptureCampBeacon(lp_trigPlayer);
            return 8;
        }
        else {
            if ((libAIAI_gf_HeroAIShouldInitiateCamp(lp_trigPlayer) == true)) {
                libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSAttackSoloCamp);
                return 8;
            }
            else {
                libAIAI_gf_HeroAIStartWaitAtCamp(lp_trigPlayer);
                return 8;
            }
        }
    }

    if ((lv_allDefendersKilled == false) && (TimerGetElapsed(libGame_gv_gameTimer) > (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_moveToCampStartTime + libAIAI_gv_aIHeroMoveToCampTimeout))) {
        libAIAI_gf_HeroAIHeroStoppingCampAttack(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIHarassInJungleLogic(lp_trigPlayer, true) == true)) {
        return 8;
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if (((lv_heroOrder == null) || ((lv_orderTargetPosition != null) && (DistanceBetweenPoints(lv_orderTargetPosition, lv_campLoc) >= libAIAI_gv_aIHeroCampCloseEnoughDist)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_campLoc), c_orderQueueReplace);
    }

    return 1;
}

int libAIAI_gf_HeroAIWaitAtCamp (int lp_trigPlayer) {
    // Variable Declarations
    int lv_campIndex;
    point lv_campLoc;
    bool lv_campCaptured;
    point lv_humanPlayerAssistingLocation;
    int lv_humanPlayerAssistingDistance;
    point lv_standPosition;
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    lv_campIndex = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp;
    lv_campLoc = libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mapDataCampCaptainSpawnPoint;
    lv_campCaptured = (libMapM_gv_jungleCreepCamps[lv_campIndex].lv_aIState == libMapM_ge_JungleCampStates_Dead);
    if ((lv_campCaptured == true)) {
        libAIAI_gf_HeroAIHeroStoppingCampAttack(lp_trigPlayer);
        return 8;
    }

    if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroStopCampAttackPercent)) {
        libAIAI_gf_HeroAIHeroStoppingCampAttack(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIShouldCancelCampAttack(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAICancelCampAttack(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp, libGame_gv_players[lp_trigPlayer].lv_faction);
        return 8;
    }

    if ((libAIAI_gf_HeroAIShouldDefendCamp(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSDefendCampAttack);
        return 8;
    }

    if ((libAIAI_gf_HeroAIShouldInitiateCamp(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSAttackSoloCamp);
        return 8;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_humanPlayerAssisting > 0) && (libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)] == true)) {
    }
    else {
        if ((TimerGetElapsed(libGame_gv_gameTimer) >= (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_arrivedAtCampTime + libAIAI_gv_aIHeroCampWaitTimeout[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)]))) {
            libAIAI_gf_HeroAICancelCampAttack(lv_campIndex, libGame_gv_players[lp_trigPlayer].lv_faction);
            return 8;
        }

        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_humanPlayerAssisting > 0) && (libAIAI_gf_HeroAIAllRecruitedAIHaveArrivedAtCamp(libGame_gv_players[lp_trigPlayer].lv_faction, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp) == true)) {
            lv_humanPlayerAssistingLocation = UnitGetPosition(libAIAI_gv_aIHeroes[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_humanPlayerAssisting].lv_currentHeroUnit);
            lv_humanPlayerAssistingDistance = PointPathingCost(lv_humanPlayerAssistingLocation, lv_campLoc);
            if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_humanPlayerAssistingDistance == -1)) {
                libAIAI_gv_aIHeroes[lp_trigPlayer].lv_humanPlayerAssistingDistance = lv_humanPlayerAssistingDistance;
                libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextHumanPlayerAssistingDistanceCheckTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroHumanPlayerAssistingCheckFrequency);
                libAIAI_gv_aIHeroes[lp_trigPlayer].lv_cancelCampAttackCounter = 0;
                return 8;
            }

            if ((lv_humanPlayerAssistingDistance != -1) && (TimerGetElapsed(libGame_gv_gameTimer) >= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextHumanPlayerAssistingDistanceCheckTime)) {
                if ((lv_humanPlayerAssistingDistance < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_humanPlayerAssistingDistance)) {
                    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_cancelCampAttackCounter = 0;
                    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_humanPlayerAssistingDistance = lv_humanPlayerAssistingDistance;
                }
                else {
                    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_cancelCampAttackCounter += 1;
                }
                if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_cancelCampAttackCounter > 2)) {
                    libAIAI_gf_HeroAICancelCampAttack(lv_campIndex, libGame_gv_players[lp_trigPlayer].lv_faction);
                    return 8;
                }

                libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextHumanPlayerAssistingDistanceCheckTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroHumanPlayerAssistingCheckFrequency);
            }

        }

    }
    lv_standPosition = libAIAI_gf_HeroAIChooseCampGuardPosition(lp_trigPlayer);
    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if (((lv_heroOrder == null) || ((lv_orderTargetPosition != null) && (DistanceBetweenPoints(lv_orderTargetPosition, lv_standPosition) >= libAIAI_gv_aIHeroCampCloseEnoughDist)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_standPosition), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIAttackSoloCamp (int lp_trigPlayer) {
    // Variable Declarations
    int lv_campIndex;
    point lv_campLoc;
    bool lv_allDefendersKilled;
    bool lv_campCaptured;
    unit lv_bestTarget;

    // Variable Initialization

    // Implementation
    lv_campIndex = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp;
    lv_campLoc = libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mapDataCampCaptainSpawnPoint;
    lv_allDefendersKilled = libMapM_gv_jungleCreepCamps[lv_campIndex].lv_captureCaptureEnabled;
    lv_campCaptured = (libMapM_gv_jungleCreepCamps[lv_campIndex].lv_aIState == libMapM_ge_JungleCampStates_Dead);
    if ((lv_campCaptured == true)) {
        libAIAI_gf_HeroAIHeroStoppingCampAttack(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIShouldCancelCampAttack(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAICancelCampAttack(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp, libGame_gv_players[lp_trigPlayer].lv_faction);
        return 8;
    }

    if ((libAIAI_gf_HeroAIShouldDefendCamp(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSDefendCampAttack);
        return 8;
    }

    if ((libAIAI_gf_HeroAIShouldRetreatJungle(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIStartFleeInJungle(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    libAIAI_gf_HeroAIEval(lp_trigPlayer);
    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_campLoc) > libAIAI_gv_aIHeroLeashDistance)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSMoveToCamp);
        return 8;
    }

    if ((lv_allDefendersKilled == true) && (lv_campCaptured == false)) {
        libAIAI_gf_HeroAIStartCaptureCampBeacon(lp_trigPlayer);
        return 8;
    }

    lv_bestTarget = libAIAI_gf_HeroAIAttackCampChooseTarget(lp_trigPlayer);
    if ((lv_bestTarget == null)) {
        libAIAI_gf_HeroAIHeroStoppingCampAttack(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIRandomlyCastAbilityOnTarget(lp_trigPlayer, lv_bestTarget) == true)) {
        return 8;
    }

    if ((libNtve_gf_UnitInRegion(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, libAIAI_gv_defenderAI[libMapM_gv_jungleCreepCamps[lv_campIndex].lv_aIDefenderAIIndex].lv_leashRegion) == false) && (UnitHasBehavior2(lv_bestTarget, "JungleCreepPassive") == true)) {
        if (((UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0) == null) || (OrderGetAbilityCommand(UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0)) != AbilityCommand("move", 0)))) {
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingUnit(AbilityCommand("move", 0), lv_bestTarget), c_orderQueueReplace);
        }

        return 8;
    }

    libAIAI_gf_HeroAIEnsureOrderAttackUnit(lp_trigPlayer, lv_bestTarget);
    return 8;
}

int libAIAI_gf_HeroAICaptureCampBeacon (int lp_trigPlayer) {
    // Variable Declarations
    int lv_campIndex;
    point lv_campLoc;
    bool lv_campCaptured;
    point lv_standPosition;
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization

    // Implementation
    lv_campIndex = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp;
    lv_campLoc = libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mapDataCampCaptainSpawnPoint;
    lv_campCaptured = (libMapM_gv_jungleCreepCamps[lv_campIndex].lv_aIState == libMapM_ge_JungleCampStates_Dead);
    if ((lv_campCaptured == true)) {
        libAIAI_gf_HeroAIHeroStoppingCampAttack(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIShouldCancelCampAttack(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAICancelCampAttack(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp, libGame_gv_players[lp_trigPlayer].lv_faction);
        return 8;
    }

    if ((libAIAI_gf_HeroAIShouldDefendCamp(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSDefendCampAttack);
        return 8;
    }

    lv_standPosition = libAIAI_gf_HeroAIChooseCampCaptureStandPosition(lp_trigPlayer);
    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if (((lv_heroOrder == null) || ((lv_orderTargetPosition != null) && (DistanceBetweenPoints(lv_orderTargetPosition, lv_standPosition) >= libAIAI_gv_aIHeroCampCloseEnoughDist)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_standPosition), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIDefendCampAttack (int lp_trigPlayer) {
    // Variable Declarations
    int lv_campIndex;
    point lv_campLoc;
    bool lv_campCaptured;

    // Variable Initialization

    // Implementation
    lv_campIndex = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp;
    lv_campLoc = libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mapDataCampCaptainSpawnPoint;
    lv_campCaptured = ((UnitGroupCount(libAIAI_gf_DefenderGroup(libMapM_gv_jungleCreepCamps[lv_campIndex].lv_aIDefenderAIIndex), c_unitCountAlive) <= 0) && !(libMapM_gv_jungleCreepCamps[lv_campIndex].lv_captureCaptureEnabled));
    if ((lv_campCaptured == true)) {
        libAIAI_gf_HeroAIHeroStoppingCampAttack(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIShouldCancelCampAttack(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAICancelCampAttack(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp, libGame_gv_players[lp_trigPlayer].lv_faction);
        return 8;
    }

    if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroStopCampAttackPercent)) {
        libAIAI_gf_HeroAIHeroStoppingCampAttack(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_campLoc) > libAIAI_gv_aIHeroFarFromCampDistance)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSDefendCampLeash);
        return 8;
    }

    if ((libAIAI_gf_HeroAIPaceAroundLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIJungleChooseTarget(lp_trigPlayer, lv_campLoc, libAIAI_gv_aIHeroFarFromCampDistance) == true)) {
        return 8;
    }

    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSMoveToCamp);
    return 8;
}

int libAIAI_gf_HeroAIDefendCampLeash (int lp_trigPlayer) {
    // Variable Declarations
    point lv_campLoc;
    int lv_campIndex;
    bool lv_campCaptured;
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization

    // Implementation
    lv_campIndex = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp;
    lv_campLoc = libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mapDataCampCaptainSpawnPoint;
    lv_campCaptured = ((UnitGroupCount(libAIAI_gf_DefenderGroup(libMapM_gv_jungleCreepCamps[lv_campIndex].lv_aIDefenderAIIndex), c_unitCountAlive) <= 0) && !(libMapM_gv_jungleCreepCamps[lv_campIndex].lv_captureCaptureEnabled));
    if ((lv_campCaptured == true)) {
        libAIAI_gf_HeroAIHeroStoppingCampAttack(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIShouldCancelCampAttack(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAICancelCampAttack(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp, libGame_gv_players[lp_trigPlayer].lv_faction);
        return 8;
    }

    if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroStopCampAttackPercent)) {
        libAIAI_gf_HeroAIHeroStoppingCampAttack(lp_trigPlayer);
        return 8;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_campLoc) <= libAIAI_gv_aIHeroCampCloseEnoughDist)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSDefendCampAttack);
        return 8;
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if (((lv_heroOrder == null) || ((lv_orderTargetPosition != null) && (DistanceBetweenPoints(lv_orderTargetPosition, lv_campLoc) >= libAIAI_gv_aIHeroCloseEnoughDist)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_campLoc), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIFollowerGuardLeader (int lp_trigPlayer) {
    // Variable Declarations
    point lv_leaderPosition;
    fixed lv_leaderDistance;
    order lv_heroOrder;
    order lv_leaderOrder;
    region lv_moonwellRegion;
    unit lv_selfHeroUnit;
    unit lv_leaderUnit;
    unitgroup lv_nearbyEnemyStructures;
    order lv_mountOrder;

    // Variable Initialization
    lv_nearbyEnemyStructures = UnitGroupEmpty();

    // Implementation
    if ((libAIAI_gf_HeroAIShouldStopFollowingLeader(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIStopFollowingLeader(lp_trigPlayer);
        if ((libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) == true)) {
            libAIAI_gf_HeroAIStartUnderworldKillMinions(lp_trigPlayer);
        }
        else {
            libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        }
        return 8;
    }

    if ((UnitIsValid(libGame_gv_players[lp_trigPlayer].lv_activeVehicle) == false) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToSpawnHealth)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome = true;
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSPortHomeJungle);
        return 8;
    }

    lv_selfHeroUnit = libAIAI_gf_HeroAIGetHeroOrVehicle(lp_trigPlayer);
    lv_leaderUnit = libAIAI_gf_HeroAIGetUnitToFollow(lp_trigPlayer);
    lv_leaderPosition = UnitGetPosition(lv_leaderUnit);
    lv_leaderDistance = DistanceBetweenPoints(UnitGetPosition(lv_selfHeroUnit), lv_leaderPosition);
    if ((lv_leaderDistance > libAIAI_gv_aIHeroFollowerLeashDistance)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSFollowerGuardLeaderLeash);
        return 8;
    }

    lv_moonwellRegion = RegionCircle(lv_leaderPosition, libAIAI_gv_aIHeroFollowerNearbyDistance);
    if ((UnitIsValid(libGame_gv_players[lp_trigPlayer].lv_activeVehicle) == false) && (libAIAI_gf_HeroAIDrinkMoonwellLogic(lp_trigPlayer, lv_moonwellRegion) == true)) {
        return 8;
    }

    libAIAI_gv_heroAIFollowerNearbyMapObjectiveFound = false;
    libCore_gv_segTriggerPlayer = lp_trigPlayer;
    libCore_gf_CallRegisteredSegregationTriggers(libCore_ge_SegregationTriggerTypes_HeroAIFollowerNearbyMapObjective);
    if (((libAIAI_gv_heroAIFollowerNearbyMapObjectiveFound == true))) {
        return 8;
    }

    libGame_gf_CalculateClosestLaneData(lv_leaderPosition);
    libAIAI_gf_HeroAIEval(lp_trigPlayer);
    if ((libGame_gv_closestLaneData.lv_laneData[libGame_gv_closestLaneData.lv_closestLane].lv_closestDist < libAIAI_gv_aIHeroFollowerWithinLaneDistance) && (UnitGroupCount(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyMinionsSummons, c_unitCountAlive) > 0)) {
        libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIAssistFollowLeader(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((OrderGetAbilityCommand(lv_leaderOrder) == AbilityCommand("PortBackToBase", 0))) {
        if (((UnitOrder(lv_selfHeroUnit, 0) == null) || (OrderGetAbilityCommand(UnitOrder(lv_selfHeroUnit, 0)) != AbilityCommand("PortBackToBase", 0)))) {
            HeroAIUnitIssueOrder(lv_selfHeroUnit, Order(AbilityCommand("PortBackToBase", 0)), c_orderQueueReplace);
        }

    }
    else {
        if ((OrderGetAbilityCommand(UnitOrder(lv_selfHeroUnit, 0)) == AbilityCommand("PortBackToBase", 0)) && (DistanceSquaredBetweenPoints(lv_leaderPosition, libGame_gv_players[lp_trigPlayer].lv_spawnPoint) > DistanceSquaredBetweenPoints(lv_leaderPosition, UnitGetPosition(lv_selfHeroUnit)))) {
            HeroAIUnitIssueOrder(lv_selfHeroUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }

    }
    lv_heroOrder = UnitOrder(lv_selfHeroUnit, 0);
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hasMount == true) && (libAIAI_gf_HeroAIFollowingMountedPlayer(lp_trigPlayer) == true) && (libAIAI_gf_HeroAIIsMountedorMounting(lp_trigPlayer) == false) && (libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 3.0) == false) && (libAIAI_gf_HeroAIEnemyEvalInCircle(lp_trigPlayer, UnitGetPosition(lv_selfHeroUnit), libAIAI_gv_aIHeroMountingFarFromEnemies, true, true, true) == 0.0)) {
        lv_mountOrder = Order(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_mountAbility);
        if ((UnitOrderIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_mountOrder) == true)) {
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_mountOrder, c_orderQueueReplace);
            return 8;
        }

    }

    if ((lv_leaderDistance > libAIAI_gv_aIHeroFollowerCloseEnoughDistance) && ((lv_heroOrder == null) || (OrderGetAbilityCommand(lv_heroOrder) == AbilityCommand("move", 0)))) {
        HeroAIUnitIssueOrder(lv_selfHeroUnit, OrderTargetingPoint(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility, lv_leaderPosition), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIFollowerGuardLeaderLeash (int lp_trigPlayer) {
    // Variable Declarations
    bool lv_enterUnderworld;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIShouldStopFollowingLeader(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIStopFollowingLeader(lp_trigPlayer);
        if ((libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) == true)) {
            libAIAI_gf_HeroAIStartUnderworldKillMinions(lp_trigPlayer);
        }
        else {
            libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        }
        return 8;
    }

    if ((UnitIsValid(libGame_gv_players[lp_trigPlayer].lv_activeVehicle) == false) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToSpawnHealth)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome = true;
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSPortHomeJungle);
        return 8;
    }

    if ((libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gf_HeroAIGetUnitToFollow(lp_trigPlayer)) == true) && (libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) == false)) {
        lv_enterUnderworld = libAIAI_gf_HeroAIStartEnterUnderworld(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gf_HeroAIGetUnitToFollow(lp_trigPlayer)) == false) && (libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) == true)) {
        libAIAI_gf_HeroAIStartExitUnderworld(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIMoveTo2(lp_trigPlayer, libAIAI_gf_HeroAIGetUnitToFollow(lp_trigPlayer), null, libAIAI_gv_aIHeroFollowerCloseEnoughDistance, libAIAI_gv_aIHeroFollowerCloseEnoughDistance, false, false, false, true) == true)) {
        return 8;
    }

    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSFollowerGuardLeader);
    return 8;
}

int libAIAI_gf_HeroAITearOfEluneMoveToTear (int lp_trigPlayer) {
    // Variable Declarations
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIShouldGiveUpOnTearOfElune(lp_trigPlayer) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToCaptureTearOfElune = false;
        libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        return 8;
    }

    if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToCaptureTearOfElune = false;
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome = true;
        libAIAI_gf_HeroAIStartFleeInJungle(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIHarassInJungleLogic(lp_trigPlayer, true) == true)) {
        return 8;
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if ((libAIAI_gf_HeroAIMoveTo2(lp_trigPlayer, libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeUnit, libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeWarningPosition, (libAIAI_gv_aIHeroCloseToTearOfEluneDistance - 2.0), libAIAI_gv_aIHeroCloseToTearOfEluneDistance, false, false, false, true) == true)) {
        return 8;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeWarningPosition) <= libAIAI_gv_aIHeroCloseToTearOfEluneDistance)) {
        if ((libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeState == libAIAI_ge_HeroAIRavenLordTributeState_Spawned) && (libAIAI_gf_HeroAIIsAllyCapturingTear(lp_trigPlayer) == false)) {
            libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSTearOfEluneCapture);
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingUnit(AbilityCommand("CaptureMacGuffin", 0), libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeUnit), c_orderQueueReplace);
            return 8;
        }
        else {
            libAIAI_gf_HeroAIStartGuardTear(lp_trigPlayer);
            return 8;
        }
    }

    return 8;
}

int libAIAI_gf_HeroAITearOfEluneGuard (int lp_trigPlayer) {
    // Variable Declarations
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIShouldGiveUpOnTearOfElune(lp_trigPlayer) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToCaptureTearOfElune = false;
        libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        return 8;
    }

    if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToCaptureTearOfElune = false;
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome = true;
        libAIAI_gf_HeroAIStartFleeInJungle(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIShouldDefendTearOfElune(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSTearOfEluneDefend);
        return 8;
    }

    if ((libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeState == libAIAI_ge_HeroAIRavenLordTributeState_Spawned) && (libAIAI_gf_HeroAIIsAllyCapturingTear(lp_trigPlayer) == false)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSTearOfEluneCapture);
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingUnit(AbilityCommand("CaptureMacGuffin", 0), libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeUnit), c_orderQueueReplace);
        return 8;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextTearGuardPositionUpdateTime < TimerGetElapsed(libGame_gv_gameTimer))) {
        libAIAI_gf_HeroAIChooseTearOfEluneGuardPostion(lp_trigPlayer);
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if (((lv_heroOrder == null) || ((lv_orderTargetPosition != null) && (DistanceBetweenPoints(lv_orderTargetPosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_tearGuardPosition) >= 1.0)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_tearGuardPosition), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAITearOfEluneCapture (int lp_trigPlayer) {
    // Variable Declarations
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIShouldGiveUpOnTearOfElune(lp_trigPlayer) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToCaptureTearOfElune = false;
        libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        return 8;
    }

    if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToCaptureTearOfElune = false;
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome = true;
        libAIAI_gf_HeroAIStartFleeInJungle(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIShouldDefendTearOfElune(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSTearOfEluneDefend);
        return 8;
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    if (((lv_heroOrder == null) || (OrderGetAbilityCommand(lv_heroOrder) != AbilityCommand("CaptureMacGuffin", 0)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingUnit(AbilityCommand("CaptureMacGuffin", 0), libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeUnit), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAITearOfEluneDefend (int lp_trigPlayer) {
    // Implementation
    if ((libAIAI_gf_HeroAIShouldGiveUpOnTearOfElune(lp_trigPlayer) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToCaptureTearOfElune = false;
        libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        return 8;
    }

    if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToCaptureTearOfElune = false;
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome = true;
        libAIAI_gf_HeroAIStartFleeInJungle(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeWarningPosition) > libAIAI_gv_aIHeroFarFromTearOfEluneDistance)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSTearOfEluneMoveToTear);
        return 8;
    }

    if ((libAIAI_gf_HeroAIPaceAroundLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIJungleChooseTarget(lp_trigPlayer, libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeWarningPosition, libAIAI_gv_aIHeroFarFromTearOfEluneDistance) == true)) {
        return 8;
    }

    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSTearOfEluneMoveToTear);
    return 8;
}

int libAIAI_gf_HeroAIObeliskCapture (int lp_trigPlayer) {
    // Variable Declarations
    point lv_obeliskPosition;
    int lv_obeliskOwner;
    region lv_areaAroundObelisk;
    unitgroup lv_enemies;
    unitgroup lv_enemyHeroes;
    unitgroup lv_enemySummons;
    unit lv_enemy;
    order lv_heroOrder;
    point lv_orderTargetPosition;
    point lv_dragonShrineGuardPosition;
    unitgroup lv_enemyTargets;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_enemyHeroes = UnitGroupEmpty();
    lv_enemySummons = UnitGroupEmpty();
    lv_enemyTargets = UnitGroupEmpty();

    // Implementation
    lv_obeliskPosition = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetObelisk);
    lv_obeliskOwner = UnitGetOwner(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetObelisk);
    if ((libAIAI_gf_HeroAIShouldGiveUpOnObelisk(lp_trigPlayer) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetObelisk = null;
        libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        return 1;
    }

    lv_areaAroundObelisk = RegionCircle(lv_obeliskPosition, libAIAI_gv_aIHeroFarFromObeliskDistance);
    lv_enemies = libAIAI_gf_AIGetVisibleUnitsFromGroup(lp_trigPlayer, UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, lv_areaAroundObelisk, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0));
    lv_enemyHeroes = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
    lv_enemySummons = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0), 0);
    if ((UnitGroupCount(lv_enemyHeroes, c_unitCountAlive) == 0) && (UnitGroupCount(lv_enemySummons, c_unitCountAlive) == 0) && (libNtve_gf_PlayerIsEnemy(lp_trigPlayer, lv_obeliskOwner, libNtve_ge_PlayerRelation_Ally) == true) && (libMapM_gf_MMGardensDragonObeliskFullyCaptured(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetObelisk) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetObelisk = null;
        libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        return 1;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIMoveTo2(lp_trigPlayer, null, lv_obeliskPosition, libAIAI_gv_aIHeroCloseToObeliskDistance, libAIAI_gv_aIHeroFarFromObeliskDistance, false, false, false, true) == true)) {
        return 8;
    }

    lv_enemy = libAIAI_gf_HeroAIFindBestTarget(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_enemyHeroes, lv_enemies, 0.0, libAIAI_gv_aIHeroVisionRange, 0.0, 0.0, 0.0, c_Storm_AI_PreferUnhealthyTargets, 0.0);
    if ((UnitIsAlive(lv_enemy) == true)) {
        libAIAI_gf_HeroAIEnsureOrderAttackUnit(lp_trigPlayer, lv_enemy);
        return 8;
    }

    lv_enemyTargets = UnitGroupFilterRegion(lv_enemies, RegionCircle(lv_obeliskPosition, libAIAI_gv_aIHeroObeliskGuardDistance), 0);
    if ((UnitGroupCount(lv_enemyTargets, c_unitCountAlive) > 0)) {
        if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_obeliskPosition) > libAIAI_gv_aIHeroObeliskGuardDistance)) {
            libAIAI_gf_HeroAIEnsureOrderMovePointCloseEnough(lp_trigPlayer, lv_obeliskPosition);
            return 8;
        }

        lv_enemy = libAIAI_gf_HeroAIFindBestTarget(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_enemyTargets, lv_enemies, 0.0, libAIAI_gv_aIHeroVisionRange, 0.0, 0.0, 0.0, c_Storm_AI_PreferUnhealthyTargets, 0.0);
        if ((UnitIsAlive(lv_enemy) == true)) {
            libAIAI_gf_HeroAIEnsureOrderAttackUnit(lp_trigPlayer, lv_enemy);
            return 8;
        }

    }

    if ((libAIAI_gf_HeroAIPaceAroundLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if (((lv_heroOrder == null) || ((lv_orderTargetPosition != null) && (DistanceBetweenPoints(lv_orderTargetPosition, lv_obeliskPosition) >= libAIAI_gv_aIHeroObeliskGuardDistance)))) {
        lv_dragonShrineGuardPosition = libAIAI_gf_HeroAIChooseDragonShrineGuardPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetObelisk);
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_dragonShrineGuardPosition), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIDragonCapture (int lp_trigPlayer) {
    // Variable Declarations
    point lv_dragonStatueUsePosition;
    point lv_guardPosition;
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIShouldGiveUpOnDragon(lp_trigPlayer, false) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetDragonStatue = null;
        libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    lv_dragonStatueUsePosition = PointWithOffset(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetDragonStatue), 0.0, -4.5);
    if ((libAIAI_gf_HeroAIMoveTo2(lp_trigPlayer, null, lv_dragonStatueUsePosition, libAIAI_gv_aIHeroCloseToDragonStatueDistance, libAIAI_gv_aIHeroFarFromDragonStatueDistance, false, false, false, true) == true)) {
        return 8;
    }

    if (((OrderGetAbilityCommand(UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0)) != AbilityCommand("UseVehicle", 0)) || (UnitOrderGetProgress(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) < 40.0)) && (libAIAI_gf_HeroAIJungleChooseTarget(lp_trigPlayer, lv_dragonStatueUsePosition, libAIAI_gv_aIHeroCloseToDragonStatueDistance) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIIsAllyEnteringDragon(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetDragonStatue) == false)) {
        if ((OrderGetAbilityCommand(UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0)) != AbilityCommand("UseVehicle", 0))) {
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingUnit(AbilityCommand("UseVehicle", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetDragonStatue), c_orderQueueReplace);
        }

        return 8;
    }

    if ((libAIAI_gf_HeroAIStagingChooseTarget(lp_trigPlayer, lv_dragonStatueUsePosition, libAIAI_gv_aIHeroFarFromDragonStatueDistance) == true)) {
        return 8;
    }

    lv_guardPosition = PointWithOffset(lv_dragonStatueUsePosition, 0.0, (0.0 - libAIAI_gv_aIHeroDragonStatueGuardOffset));
    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if (((lv_heroOrder == null) || (DistanceBetweenPoints(lv_orderTargetPosition, lv_guardPosition) > libAIAI_gv_aIHeroDragonStatueGuardOffset) || (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_orderTargetPosition) < libAIAI_gv_aIHeroCloseEnoughDist))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lv_guardPosition, (libAIAI_gv_aIHeroDragonStatueGuardOffset - 0.1), libNtve_gf_RandomAngle())), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIDragonHarass (int lp_trigPlayer) {
    unitgroup auto936469CD_g;
    int auto936469CD_u;

    // Variable Declarations
    point lv_dragonStatueUsePosition;
    point lv_guardPosition;
    order lv_heroOrder;
    point lv_orderTargetPosition;
    unitgroup lv_enemyHeroes;
    unit lv_enemyHero;

    // Variable Initialization
    lv_enemyHeroes = UnitGroupEmpty();

    // Implementation
    if ((libAIAI_gf_HeroAIShouldGiveUpOnDragon(lp_trigPlayer, true) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetDragonStatue = null;
        libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    lv_dragonStatueUsePosition = PointWithOffset(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetDragonStatue), 0.0, -4.0);
    if ((libAIAI_gf_HeroAIMoveTo2(lp_trigPlayer, null, lv_dragonStatueUsePosition, libAIAI_gv_aIHeroCloseToDragonStatueDistance, libAIAI_gv_aIHeroFarFromDragonStatueDistance, false, false, false, true) == true)) {
        return 8;
    }

    lv_enemyHeroes = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, RegionCircle(lv_dragonStatueUsePosition, 3.0), libCore_gv_filtersHeroicandnotBenignInvulnerableorStasis, 0);
    auto936469CD_g = lv_enemyHeroes;
    auto936469CD_u = 1;
    for ( ; auto936469CD_u <= UnitGroupCount(auto936469CD_g, c_unitCountAll) ; auto936469CD_u += (lv_enemyHero == UnitGroupUnit(auto936469CD_g, auto936469CD_u)) ) {
        lv_enemyHero = UnitGroupUnit(auto936469CD_g, auto936469CD_u);
        if ((OrderGetAbilityCommand(UnitOrder(lv_enemyHero, 0)) == AbilityCommand("UseVehicle", 0))) {
            libAIAI_gf_HeroAIEnsureOrderAttackUnit(lp_trigPlayer, lv_enemyHero);
            return 8;
        }

    }
    if ((libAIAI_gf_HeroAIStagingChooseTarget(lp_trigPlayer, lv_dragonStatueUsePosition, libAIAI_gv_aIHeroCloseToDragonStatueDistance) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIPaceAroundLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    lv_guardPosition = PointWithOffset(lv_dragonStatueUsePosition, 0.0, (0.0 - libAIAI_gv_aIHeroDragonStatueGuardOffset));
    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if (((lv_heroOrder == null) || (DistanceBetweenPoints(lv_orderTargetPosition, lv_guardPosition) > libAIAI_gv_aIHeroDragonStatueGuardOffset) || (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_orderTargetPosition) < libAIAI_gv_aIHeroCloseEnoughDist))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), PointWithOffsetPolar(lv_guardPosition, (libAIAI_gv_aIHeroDragonStatueGuardOffset - 0.1), libNtve_gf_RandomAngle())), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIUnderworldEnter (int lp_trigPlayer) {
    // Variable Declarations
    order lv_heroOrder;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetUnderworldEntrance = null;
        libAIAI_gf_HeroAIStartUnderworldKillMinions(lp_trigPlayer);
        return 8;
    }

    if (((libAIAI_gv_heroAIUnderworldStatus.lv_skullsRemaining == 0) || (libAIAI_gf_HeroAIShouldRetreatUnderworld(lp_trigPlayer) == true)) && ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_pingFollowPlayer <= 0) || (libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gf_HeroAIGetUnitToFollow(lp_trigPlayer)) == false))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetUnderworldEntrance = null;
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToCollectSkulls = false;
        libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIHarassInJungleLogic(lp_trigPlayer, true) == true)) {
        return 8;
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    if (((lv_heroOrder == null) || (OrderGetAbilityCommand(lv_heroOrder) != AbilityCommand("CaptureMacGuffin", 0)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingUnit(AbilityCommand("CaptureMacGuffin", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetUnderworldEntrance), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIUnderworldKillMinions (int lp_trigPlayer) {
    // Variable Declarations
    unit lv_enemyHero;
    order lv_heroOrder;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIHandleNoLongerInUnderworld(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_pingFollowPlayer > 0)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSFollowerGuardLeaderLeash);
        return 8;
    }

    if ((libAIAI_gf_HeroAIShouldRetreatUnderworld(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIStartExitUnderworld(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIUnderworldFocusNearbyHero(lp_trigPlayer) == true)) {
        return 8;
    }

    if (((libAIAI_gv_heroAIUnderworldStatus.lv_skullsRemaining == 0) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome == true))) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSUnderworldTeleportHome);
        return 8;
    }

    if ((libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_additionalCoreDefendersNeeded > 0)) {
        libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_additionalCoreDefendersNeeded -= 1;
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome = true;
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSUnderworldTeleportHome);
        return 8;
    }

    if ((UnitIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetMinion) == false)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetMinion = libAIAI_gf_HeroAIUnderworldChooseTarget(lp_trigPlayer);
        if ((UnitIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetMinion) == false)) {
            if ((libAIAI_gf_HeroAISearchForNearbySkull(lp_trigPlayer, libAIAI_gv_heroAIUnderworldStatus.lv_underworldRegion, false) == true)) {
                return 8;
            }

            libAIAI_gf_HeroAIStartExitUnderworld(lp_trigPlayer);
            return 8;
        }

    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((UnitGetType(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetMinion) == "UnderworldBoss")) {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextOffensiveSpellCheckTime <= TimerGetElapsed(libGame_gv_gameTimer)) && (libAIAI_gf_HeroAIRandomlyCastAbilityOnTarget(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetMinion) == true)) {
            return 8;
        }

    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    if ((libNtve_gf_UnitIsVisibleToPlayer(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetMinion, lp_trigPlayer) == true)) {
        if (((lv_heroOrder == null) || (OrderGetAbilityCommand(lv_heroOrder) == AbilityCommand("move", 0)) || ((OrderGetAbilityCommand(lv_heroOrder) == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility) && (OrderGetTargetUnit(lv_heroOrder) != libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetMinion)))) {
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingUnit(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetMinion), c_orderQueueReplace);
        }

    }
    else {
        if (((lv_heroOrder == null) || (OrderGetAbilityCommand(lv_heroOrder) != AbilityCommand("move", 0)) || (DistanceBetweenPoints(OrderGetTargetPoint(lv_heroOrder), UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetMinion)) > 1.0))) {
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetMinion)), c_orderQueueReplace);
        }

    }
    return 8;
}

int libAIAI_gf_HeroAIUnderworldFocusHero (int lp_trigPlayer) {
    // Variable Declarations
    order lv_heroOrder;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIHandleNoLongerInUnderworld(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIShouldRetreatUnderworld(lp_trigPlayer) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetHero = null;
        libAIAI_gf_HeroAIStartExitUnderworld(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_focusHeroTimeout < TimerGetElapsed(libGame_gv_gameTimer))) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetHero = null;
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextFocusHeroCheckTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroFocusHeroDelayAfterGivingUp);
        libAIAI_gf_HeroAIStartUnderworldKillMinions(lp_trigPlayer);
        return 8;
    }

    if (((UnitIsAlive(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetHero) == false) || (libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetHero) == false) || (libNtve_gf_UnitIsInvulnerable(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetHero) == true) || (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetHero)) > libAIAI_gv_aIHeroFocusHeroGiveUpDistance))) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetHero = null;
        if ((libAIAI_gf_HeroAIUnderworldFocusNearbyHero(lp_trigPlayer) == true)) {
            return 8;
        }

        libAIAI_gf_HeroAIStartUnderworldKillMinions(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextOffensiveSpellCheckTime <= TimerGetElapsed(libGame_gv_gameTimer)) && (libAIAI_gf_HeroAIRandomlyCastAbilityOnTarget(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetHero) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_focusHeroTimeout = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroFocusHeroMapMaxChaseTime);
        return 8;
    }

    if ((libAIAI_gf_HeroAIInWeaponRangeOfTarget(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetHero, 1.0) == true) && (libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(UnitGetOwner(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetHero), 1.0) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_focusHeroTimeout = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroFocusHeroMapMaxChaseTime);
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    if (((lv_heroOrder == null) || (OrderGetAbilityCommand(lv_heroOrder) == AbilityCommand("move", 0)) || ((OrderGetAbilityCommand(lv_heroOrder) == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility) && (OrderGetTargetUnit(lv_heroOrder) != libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetHero)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingUnit(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetHero), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIUnderworldPickupSkull (int lp_trigPlayer) {
    // Variable Declarations
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIHandleNoLongerInUnderworld(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIShouldRetreatUnderworld(lp_trigPlayer) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetSkull = null;
        libAIAI_gf_HeroAIStartExitUnderworld(lp_trigPlayer);
        return 8;
    }

    if ((UnitIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetSkull) == false)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetSkull = null;
        if ((libAIAI_gf_HeroAISearchForNearbySkull(lp_trigPlayer, RegionCircle(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroSkullSearchRadius), false) == true)) {
            return 8;
        }
        else {
            libAIAI_gf_HeroAIReturnToCurrentObjective(lp_trigPlayer);
            return 8;
        }
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if (((lv_heroOrder == null) || ((lv_orderTargetPosition != null) && (DistanceBetweenPoints(lv_orderTargetPosition, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetSkull)) >= 1.0)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetSkull)), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIUnderworldMoveToExit (int lp_trigPlayer) {
    // Variable Declarations
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIHandleNoLongerInUnderworld(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIIsSafeUnderworld(lp_trigPlayer) == true)) {
        if ((libAIAI_gf_HeroAIUnderworldFocusNearbyHero(lp_trigPlayer) == true)) {
            libAIAI_gf_HeroAILeaveExitUnderworld(lp_trigPlayer);
            return 8;
        }

        if ((libAIAI_gv_heroAIUnderworldStatus.lv_skullsRemaining > 0) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome == false) && ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_pingFollowPlayer <= 0) || (libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gf_HeroAIGetUnitToFollow(lp_trigPlayer)) == true))) {
            libAIAI_gf_HeroAILeaveExitUnderworld(lp_trigPlayer);
            libAIAI_gf_HeroAIStartUnderworldKillMinions(lp_trigPlayer);
            return 8;
        }

        if (((libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 3.0) == false) || (UnitIsAlive(libAIAI_gv_heroAIDamageTracking[lp_trigPlayer].lv_lastAttacker) == false))) {
            libAIAI_gf_HeroAILeaveExitUnderworld(lp_trigPlayer);
            libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSUnderworldTeleportHome);
            return 8;
        }

    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetUnderworldExit)) < libAIAI_gv_aIHeroUnderworldCloseToExitDistance)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSUnderworldExit);
        return 8;
    }

    if ((libAIAI_gf_HeroAIHarassInJungleLogic(lp_trigPlayer, false) == true)) {
        return 8;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldExitTargetPosition) <= libAIAI_gv_aIHeroCloseEnoughDist)) {
        libAIAI_gf_HeroAIUpdateUnderworldExitTargetPosition(lp_trigPlayer);
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if (((lv_heroOrder == null) || ((lv_orderTargetPosition != null) && (DistanceBetweenPoints(lv_orderTargetPosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldExitTargetPosition) >= libAIAI_gv_aIHeroCloseEnoughDist)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldExitTargetPosition), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIUnderworldTeleportHome (int lp_trigPlayer) {
    // Implementation
    if ((libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) == false)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToCollectSkulls = false;
        libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIShouldRetreatUnderworld(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIStartExitUnderworld(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gf_HeroAIUnderworldFocusNearbyHero(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 3.0) == true) && (UnitIsAlive(libAIAI_gv_heroAIDamageTracking[lp_trigPlayer].lv_lastAttacker) == true)) {
        libAIAI_gf_HeroAIStartExitUnderworld(lp_trigPlayer);
        return 8;
    }

    if (((UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0) == null) || (OrderGetAbilityCommand(UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0)) != AbilityCommand("PortBackToBase", 0)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, Order(AbilityCommand("PortBackToBase", 0)), c_orderQueueReplace);
    }

    return 1;
}

int libAIAI_gf_HeroAIUnderworldExit (int lp_trigPlayer) {
    // Variable Declarations
    order lv_heroOrder;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) == false)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetUnderworldExit = null;
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToCollectSkulls = false;
        libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_heroAIUnderworldStatus.lv_skullsRemaining > 0) && (libAIAI_gf_HeroAIIsSafeUnderworld(lp_trigPlayer) == true) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome == false) && ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_pingFollowPlayer <= 0) || (libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gf_HeroAIGetUnitToFollow(lp_trigPlayer)) == true))) {
        libAIAI_gf_HeroAILeaveExitUnderworld(lp_trigPlayer);
        libAIAI_gf_HeroAIStartUnderworldKillMinions(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((UnitIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetUnderworldExit) == false)) {
        libAIAI_gf_HeroAILeaveExitUnderworld(lp_trigPlayer);
        libAIAI_gf_HeroAIStartExitUnderworld(lp_trigPlayer);
        return 8;
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    if (((lv_heroOrder == null) || (OrderGetAbilityCommand(lv_heroOrder) != AbilityCommand("CaptureMacGuffin", 0)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingUnit(AbilityCommand("CaptureMacGuffin", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetUnderworldExit), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIAbathurAdvanceInLane (int lp_trigPlayer) {
    // Variable Declarations
    fixed lv_curLifePercent;
    fixed lv_frontTowerLanePosition;
    fixed lv_farBehindFrontTowerLanePosition;
    point lv_frontTowerPosition;
    point lv_hideInTownPosition;
    order lv_heroOrder;

    // Variable Initialization

    // Implementation
    lv_curLifePercent = UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent);
    if ((lv_curLifePercent <= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToSpawnHealth)) {
        libAIAI_gf_HeroAILeaveCurrentObjective(lp_trigPlayer);
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome = true;
        return 8;
    }

    lv_frontTowerLanePosition = libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_frontTowerPosition;
    lv_farBehindFrontTowerLanePosition = libAIAI_gf_AIRetreatLanePosition(libGame_gv_players[lp_trigPlayer].lv_faction, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane, lv_frontTowerLanePosition, libAIAI_gv_aIHeroAbathurFarBehindFrontTowerDistance);
    if (((libAIAI_gf_HeroAIEnemyEvalInCircle(lp_trigPlayer, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroAbathurCloseToEnemiesDistance, true, true, true) > 0.0) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalEnemyEval > 0.0) || ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroLanePosition > lv_farBehindFrontTowerLanePosition)) || ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Chaos) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroLanePosition < lv_farBehindFrontTowerLanePosition)))) {
        libAIAI_gf_HeroAIStartAbathurRetreatLane(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    lv_hideInTownPosition = libAIAI_gf_HeroAIGetHideInTownPosition(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane);
    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_hideInTownPosition) < libAIAI_gv_aIHeroAbathurCloseToHideInTownPosition)) {
        libAIAI_gf_HeroAIStartAbathurHideInTown(lp_trigPlayer);
        return 8;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition) <= libAIAI_gv_aIHeroCloseEnoughDist)) {
        libAIAI_gf_HeroAIUpdateLaneTargetPosition(lp_trigPlayer, true);
    }

    if ((UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0) == null)) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIAbathurRetreatInLane (int lp_trigPlayer) {
    // Variable Declarations
    fixed lv_curLifePercent;
    fixed lv_farBehindFrontTowerLanePosition;
    fixed lv_frontTowerLanePosition;
    point lv_frontTowerPosition;
    point lv_hideInTownPosition;
    order lv_heroOrder;
    point lv_orderTargetPosition;

    // Variable Initialization

    // Implementation
    lv_curLifePercent = UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent);
    if ((lv_curLifePercent <= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToSpawnHealth)) {
        libAIAI_gf_HeroAILeaveCurrentObjective(lp_trigPlayer);
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome = true;
        return 8;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    libAIAI_gf_HeroAIEval(lp_trigPlayer);
    lv_frontTowerLanePosition = libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_frontTowerPosition;
    lv_farBehindFrontTowerLanePosition = libAIAI_gf_AIRetreatLanePosition(libGame_gv_players[lp_trigPlayer].lv_faction, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane, lv_frontTowerLanePosition, libAIAI_gv_aIHeroAbathurFarBehindFrontTowerDistance);
    if ((libAIAI_gf_HeroAIEnemyEvalInCircle(lp_trigPlayer, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeorAbathurFarFromEnemiesDistance, true, true, true) == 0.0) && (((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroLanePosition <= lv_farBehindFrontTowerLanePosition)) || ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Chaos) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroLanePosition >= lv_farBehindFrontTowerLanePosition))) && (libAIAI_gf_HeroAITimeInCurrentState(lp_trigPlayer) > libAIAI_gv_aIHeroMinRetreatDuration)) {
        libAIAI_gf_HeroAIStartAbathurAdvanceLane(lp_trigPlayer);
        return 8;
    }

    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition) <= libAIAI_gv_aIHeroCloseEnoughDist)) {
        libAIAI_gf_HeroAIUpdateLaneTargetPosition(lp_trigPlayer, false);
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if (((lv_heroOrder == null) || ((lv_orderTargetPosition != null) && (DistanceBetweenPoints(lv_orderTargetPosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition) >= libAIAI_gv_aIHeroCloseEnoughDist)))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIAbathurHideInTown (int lp_trigPlayer) {
    // Variable Declarations
    fixed lv_curLifePercent;
    int lv_desiredLane;
    point lv_hideInTownPosition;
    point lv_weakestLaneHideInTownPosition;
    int lv_closestIndex;
    int lv_secondaryIndex;
    point lv_tunnelPosition;
    fixed lv_delay;
    int lv_closestWaypoint;
    order lv_heroOrder;

    // Variable Initialization

    // Implementation
    lv_curLifePercent = UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent);
    if ((lv_curLifePercent <= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToSpawnHealth)) {
        libAIAI_gf_HeroAILeaveCurrentObjective(lp_trigPlayer);
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome = true;
        return 8;
    }

    if ((libAIAI_gf_HeroAIEnemyEvalInCircle(lp_trigPlayer, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroAbathurCloseToEnemiesDistance, true, true, true) > 0.0)) {
        libAIAI_gf_HeroAIStartAbathurRetreatLane(lp_trigPlayer);
        return 8;
    }

    if ((libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libAIAI_gf_HeroAIAvoidAreaLogic(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_gameState != libAIAI_ge_HeroAIGameState_Act3)) {
        lv_desiredLane = libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_weakestLane;
    }
    else {
        lv_desiredLane = libAIAI_gf_HeroAIGetLaneWithMostAllies(lp_trigPlayer);
    }
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane != lv_desiredLane) && (libCore_gf_IsAbilityOnCooldown(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, "AbathurDeepTunnel") == false) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextChangeLanesConsiderTime <= TimerGetElapsed(libGame_gv_gameTimer)) && (TimerGetElapsed(libGame_gv_gameTimer) > libAIAI_gv_aIHeroInitialLaneChoosingTime)) {
        lv_weakestLaneHideInTownPosition = libAIAI_gf_HeroAIGetHideInTownPosition(lp_trigPlayer, lv_desiredLane);
        lv_tunnelPosition = libAIAI_gf_HeroAIFindNearbyPathablePoint(lp_trigPlayer, lv_weakestLaneHideInTownPosition, 5.0, true);
        if ((lv_tunnelPosition != null)) {
            libAIAI_gf_HeroAIChangeDesiredLane(lp_trigPlayer, lv_desiredLane);
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("AbathurDeepTunnel", 0), lv_tunnelPosition), c_orderQueueReplace);
            libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSAbathurChangeLanes);
            lv_delay = RandomFixed((libAIAI_gv_aIHeroAbathurChangeLanesDelay - 5.0), (libAIAI_gv_aIHeroAbathurChangeLanesDelay + 5.0));
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextChangeLanesConsiderTime = (TimerGetElapsed(libGame_gv_gameTimer) + lv_delay);
            return 8;
        }

    }

    lv_hideInTownPosition = libAIAI_gf_HeroAIGetHideInTownPosition(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane);
    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_hideInTownPosition) > libAIAI_gv_aIHeroAbathurFarFromHideInTownPosition)) {
        libAIAI_gf_HeroAIStartAbathurRetreatLane(lp_trigPlayer);
        return 8;
    }

    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    if (((lv_heroOrder == null)) && (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_hideInTownPosition) > 1.0)) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_hideInTownPosition), c_orderQueueReplace);
    }

    return 8;
}

int libAIAI_gf_HeroAIAbathurChangeLanes (int lp_trigPlayer) {
    // Variable Declarations
    order lv_heroOrder;

    // Variable Initialization

    // Implementation
    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    if ((lv_heroOrder != null) && (OrderGetAbilityCommand(lv_heroOrder) == AbilityCommand("AbathurDeepTunnel", 0))) {
        return 8;
    }

    libGame_gf_CalculateClosestLaneData(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit));
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane = libGame_gv_closestLaneData.lv_closestLane;
    libAIAI_gf_HeroAIChangeDesiredLane(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane);
    libAIAI_gf_HeroAIStartAbathurHideInTown(lp_trigPlayer);
    return 8;
}

int libAIAI_gf_HeroAIEnterTransport (int lp_trigPlayer) {
    // Variable Declarations
    point lv_positionofTransport;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hasFlyingMount == true) && (libAIAI_gf_HeroAIDismount(lp_trigPlayer) == true)) {
        return 8;
    }

    if ((UnitIsAlive(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetTransport) == true)) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingUnit(AbilityCommand("SmartCommandUnitInteraction", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetTransport), c_orderQueueReplace);
        return 8;
    }
    else {
        libAIAI_gf_HeroAILeaveCurrentObjective(lp_trigPlayer);
    }
    return 8;
}

bool libAIAI_gf_HeroAIHasGameStarted () {
    // Implementation
    return (libGame_gv_gameStarted || libGame_gf_MinionSystemStarted());
}

void libAIAI_gf_HeroAIChangeState (int lp_player, int lp_state) {
    // Implementation
    libAIAI_gv_aIHeroes[lp_player].lv_savedPriority = libAIAI_ge_HeroAIPriority_Idle;
    libAIAI_gf_HeroAIClearEval(lp_player);
    libAIAI_gv_aIHeroes[lp_player].lv_moveActive = false;
    libAIAI_gv_aIHeroes[lp_player].lv_moveStepPoint = null;
    libAIAI_gv_aIHeroes[lp_player].lv_moveStepNextConsiderTime = 0.0;
    libAIAI_gv_aIHeroes[lp_player].lv_movePortal = null;
    libAIAI_gv_aIHeroes[lp_player].lv_heroState = lp_state;
    libAIAI_gv_aIHeroes[lp_player].lv_timeEnteredState = TimerGetElapsed(libGame_gv_gameTimer);
}

void libAIAI_gf_HeroAIChangeStateDefendObjective (int lp_player, unit lp_objectiveUnit, point lp_objectivePoint, fixed lp_moveStartRange, fixed lp_moveStopRange, fixed lp_guardTargetingRange, fixed lp_guardPositionRange, abilcmd lp_captureAbility, int lp_priority, trigger lp_exitCondition, trigger lp_onReturnToCurrentObjective) {
    // Implementation
    libAIAI_gv_aIHeroes[lp_player].lv_hSMapStateCurrentTargetUnit = lp_objectiveUnit;
    libAIAI_gv_aIHeroes[lp_player].lv_hSMapStateCurrentTargetPoint = lp_objectivePoint;
    libAIAI_gv_aIHeroes[lp_player].lv_moveStartRange = lp_moveStartRange;
    libAIAI_gv_aIHeroes[lp_player].lv_moveStopRange = lp_moveStopRange;
    libAIAI_gv_aIHeroes[lp_player].lv_defendObjectiveGuardTargetingRange = lp_guardTargetingRange;
    libAIAI_gv_aIHeroes[lp_player].lv_defendObjectiveGuardPositionRange = lp_guardPositionRange;
    libAIAI_gv_aIHeroes[lp_player].lv_defendObjectiveCaptureAbility = lp_captureAbility;
    libAIAI_gv_aIHeroes[lp_player].lv_statePriority = lp_priority;
    libAIAI_gv_aIHeroes[lp_player].lv_stateExitConditionTrigger = lp_exitCondition;
    libAIAI_gv_aIHeroes[lp_player].lv_onReturnToCurrentObjective = lp_onReturnToCurrentObjective;
    libAIAI_gf_HeroAIChangeState(lp_player, libAIAI_ge_HeroAIStates_HSDefendObjective);
}

void libAIAI_gf_HeroAIChangeStateObjectiveStaging (int lp_player, unit lp_objectiveUnit, point lp_objectivePoint, fixed lp_moveStartRange, fixed lp_moveStopRange, fixed lp_guardTargetingRange, fixed lp_guardPositionRange, int lp_priority, trigger lp_exitCondition, trigger lp_onReturnToCurrentObjective) {
    // Implementation
    libAIAI_gv_aIHeroes[lp_player].lv_hSMapStateCurrentTargetUnit = lp_objectiveUnit;
    libAIAI_gv_aIHeroes[lp_player].lv_hSMapStateCurrentTargetPoint = lp_objectivePoint;
    libAIAI_gv_aIHeroes[lp_player].lv_moveStartRange = lp_moveStartRange;
    libAIAI_gv_aIHeroes[lp_player].lv_moveStopRange = lp_moveStopRange;
    libAIAI_gv_aIHeroes[lp_player].lv_defendObjectiveGuardTargetingRange = lp_guardTargetingRange;
    libAIAI_gv_aIHeroes[lp_player].lv_defendObjectiveGuardPositionRange = lp_guardPositionRange;
    libAIAI_gv_aIHeroes[lp_player].lv_statePriority = lp_priority;
    libAIAI_gv_aIHeroes[lp_player].lv_stateExitConditionTrigger = lp_exitCondition;
    libAIAI_gv_aIHeroes[lp_player].lv_onReturnToCurrentObjective = lp_onReturnToCurrentObjective;
    libAIAI_gf_HeroAIChangeState(lp_player, libAIAI_ge_HeroAIStates_HSObjectiveStaging);
}

void libAIAI_gf_HeroAIChangeDesiredLane (int lp_trigPlayer, int lp_laneIndex) {
    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane != 0) && ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane == lp_laneIndex) || (libAIAI_gv_aIHeroAIAllowedToChangeDesiredLane[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)] == false))) {
        return ;
    }

    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane = lp_laneIndex;
    if ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order)) {
        libAIAI_gf_HeroAIUpdateLaneHeroCounts(0);
    }
    else {
        libAIAI_gf_HeroAIUpdateLaneHeroCounts(1);
    }
}

bool libAIAI_gf_HeroAIIsInFollowerState (int lp_trigPlayer) {
    // Implementation
    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSFollowerGuardLeader) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSFollowerGuardLeaderLeash))) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAIIsInAdvancingState (int lp_trigPlayer) {
    // Implementation
    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSAdvance) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSVehicleAdvanceInLane) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSMinionBattleAttack) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSAbathurAdvanceInLane))) {
        return true;
    }
    else {
        return false;
    }
}

fixed libAIAI_gf_HeroAITimeInCurrentState (int lp_trigPlayer) {
    // Implementation
    return (TimerGetElapsed(libGame_gv_gameTimer) - libAIAI_gv_aIHeroes[lp_trigPlayer].lv_timeEnteredState);
}

void libAIAI_gf_HeroAIChooseWaitForGameToStartPosition (int lp_trigPlayer, bool lp_goToGate) {
    int auto63968557_ae;
    int auto63968557_ai;
    int auto2D93557F_ae;
    int auto2D93557F_ai;
    int auto39048705_ae;
    int auto39048705_ai;

    // Variable Declarations
    int lv_laneWaypoint;
    point lv_lanePoint;
    unit lv_coreGateUnit;
    point lv_coreGatePosition;
    point lv_direction;
    point lv_normal;
    point lv_behindCoreGate;
    fixed lv_offset;
    point lv_waitingPosition;
    fixed lv_distance;
    int lv_playerIndex;
    fixed lv_spreadDistance;
    int lv_numberOfAIPlayersOnTeamInLane;
    int lv_aIPlayerOnTeamIndex;
    fixed lv_bucketWidth;
    fixed lv_distanceBehindGate;

    // Variable Initialization
    lv_spreadDistance = 15.0;
    lv_distanceBehindGate = 8.0;

    // Implementation
    if ((libAIAI_gv_heroAICustomChooseWaitForGameToStartPositionTrigger != null)) {
        libAIAI_gv_heroAITriggerCurrentPlayer = lp_trigPlayer;
        libAIAI_gv_heroAITriggerReturnInteger = 0;
        TriggerExecute(libAIAI_gv_heroAICustomChooseWaitForGameToStartPositionTrigger, true, true);
        if ((libAIAI_gv_heroAITriggerReturnInteger != 0)) {
            return ;
        }

    }

    auto63968557_ae = libCore_gv_bALMaxPlayers;
    auto63968557_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (auto63968557_ai >= 0 && lv_playerIndex <= auto63968557_ae) || (auto63968557_ai <= 0 && lv_playerIndex >= auto63968557_ae) ) ; lv_playerIndex += auto63968557_ai ) {
        if ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 2) == true) && (libNtve_gf_PlayerIsEnemy(lp_trigPlayer, lv_playerIndex, libNtve_ge_PlayerRelation_Ally) == true) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane == libAIAI_gv_aIHeroes[lv_playerIndex].lv_desiredLane)) {
            lv_numberOfAIPlayersOnTeamInLane += 1;
            if ((lv_playerIndex <= lp_trigPlayer)) {
                lv_aIPlayerOnTeamIndex += 1;
            }

        }

    }
    if ((lv_numberOfAIPlayersOnTeamInLane == 0) && (libGame_gv_laneCount == 0)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_waitForGameToStartPosition = libGame_gv_players[lp_trigPlayer].lv_spawnPoint;
        return ;
    }

    if ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order)) {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane != 0)) {
            auto39048705_ae = libGame_gv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane].lv_waypointCount;
            auto39048705_ai = 1;
            lv_laneWaypoint = 1;
            for ( ; ( (auto39048705_ai >= 0 && lv_laneWaypoint <= auto39048705_ae) || (auto39048705_ai <= 0 && lv_laneWaypoint >= auto39048705_ae) ) ; lv_laneWaypoint += auto39048705_ai ) {
                lv_coreGateUnit = libAIAI_gf_HeroAIFindNearbyGate(libGame_gv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane].lv_waypoints[lv_laneWaypoint], 8.0);
                if ((lv_coreGateUnit != null)) {
                    lv_spreadDistance = (1.0 + (3.0 * IntToFixed(lv_numberOfAIPlayersOnTeamInLane)));
                    lv_lanePoint = libGame_gv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane].lv_waypoints[lv_laneWaypoint];
                    break;
                }

            }
        }

        if ((lv_coreGateUnit == null)) {
            lv_coreGateUnit = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core;
            lv_lanePoint = libGame_gv_players[lp_trigPlayer].lv_spawnPoint;
        }

    }
    else {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane != 0)) {
            auto2D93557F_ae = 1;
            auto2D93557F_ai = -1;
            lv_laneWaypoint = libGame_gv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane].lv_waypointCount;
            for ( ; ( (auto2D93557F_ai >= 0 && lv_laneWaypoint <= auto2D93557F_ae) || (auto2D93557F_ai <= 0 && lv_laneWaypoint >= auto2D93557F_ae) ) ; lv_laneWaypoint += auto2D93557F_ai ) {
                lv_coreGateUnit = libAIAI_gf_HeroAIFindNearbyGate(libGame_gv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane].lv_waypoints[lv_laneWaypoint], 8.0);
                if ((lv_coreGateUnit != null)) {
                    lv_spreadDistance = (1.0 + (3.0 * IntToFixed(lv_numberOfAIPlayersOnTeamInLane)));
                    lv_lanePoint = libGame_gv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane].lv_waypoints[lv_laneWaypoint];
                    break;
                }

            }
        }

        if ((lv_coreGateUnit == null)) {
            lv_coreGateUnit = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core;
            lv_lanePoint = libGame_gv_players[lp_trigPlayer].lv_spawnPoint;
        }

    }
    lv_coreGatePosition = UnitGetPosition(lv_coreGateUnit);
    lv_direction = AIGetDirection(lv_coreGatePosition, lv_lanePoint);
    lv_behindCoreGate = libCore_gf_AdvancePointinDirection(lv_coreGatePosition, lv_direction, lv_distanceBehindGate);
    lv_normal = Point(PointGetY(lv_direction), (-1.0 * PointGetX(lv_direction)));
    lv_bucketWidth = (lv_spreadDistance / IntToFixed(lv_numberOfAIPlayersOnTeamInLane));
    lv_offset = (((0.5 + FixedToInt((lv_aIPlayerOnTeamIndex - 1))) * lv_bucketWidth) - (lv_spreadDistance / 2.0));
    lv_waitingPosition = libCore_gf_AdvancePointinDirection(lv_behindCoreGate, lv_normal, lv_offset);
    lv_waitingPosition = RegionRandomPoint(RegionCircle(lv_waitingPosition, 1.5));
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_waitForGameToStartPosition = lv_waitingPosition;
}

void libAIAI_gf_HeroAIStartWaitToHeal (int lp_trigPlayer) {
    // Implementation
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane = 0;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curWaypointIndex = 0;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curWaypointPoint = libGame_gv_players[lp_trigPlayer].lv_spawnPoint;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition = libGame_gv_players[lp_trigPlayer].lv_spawnPoint;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome = false;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_announcedRetreat = false;
    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSWaitToHeal);
}

unit libAIAI_gf_HeroAIAfterDeathAttackChooseTarget (int lp_trigPlayer) {
    unitgroup autoE00C0690_g;
    int autoE00C0690_u;

    // Variable Declarations
    unitgroup lv_enemies;
    unitgroup lv_enemyHeroes;
    unitgroup lv_enemyMinions;
    unitgroup lv_enemySummons;
    unit lv_testUnit;
    unit lv_bestTarget;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_enemyHeroes = UnitGroupEmpty();
    lv_enemyMinions = UnitGroupEmpty();
    lv_enemySummons = UnitGroupEmpty();

    // Implementation
    lv_enemies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), 12.0), UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
    lv_enemyHeroes = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
    lv_enemyMinions = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterBiological), 0, 0, 0), 0);
    lv_enemySummons = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0), 0);
    autoE00C0690_g = lv_enemyHeroes;
    autoE00C0690_u = 1;
    for ( ; autoE00C0690_u <= UnitGroupCount(autoE00C0690_g, c_unitCountAll) ; autoE00C0690_u += (lv_testUnit == UnitGroupUnit(autoE00C0690_g, autoE00C0690_u)) ) {
        lv_testUnit = UnitGroupUnit(autoE00C0690_g, autoE00C0690_u);
        if ((libNtve_gf_UnitIsVisibleToPlayer(lv_testUnit, lp_trigPlayer) == false)) {
            UnitGroupRemove(lv_enemyHeroes, lv_testUnit);
        }

    }
    if ((libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true)) {
        lv_bestTarget = UnitGroupClosestToPoint(lv_enemyMinions, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit));
        if ((UnitIsValid(lv_bestTarget) == false)) {
            lv_bestTarget = UnitGroupClosestToPoint(lv_enemySummons, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit));
            if ((UnitIsValid(lv_bestTarget) == false)) {
                lv_bestTarget = UnitGroupClosestToPoint(lv_enemyHeroes, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit));
            }

        }

    }
    else {
        lv_bestTarget = UnitGroupClosestToPoint(lv_enemyHeroes, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit));
        if ((UnitIsValid(lv_bestTarget) == false)) {
            lv_bestTarget = UnitGroupClosestToPoint(lv_enemyMinions, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit));
            if ((UnitIsValid(lv_bestTarget) == false)) {
                lv_bestTarget = UnitGroupClosestToPoint(lv_enemySummons, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit));
            }

        }

    }
    return lv_bestTarget;
}

unit libAIAI_gf_HeroAIAfterDeathHealChooseTarget (int lp_trigPlayer) {
    playergroup autoD1D9A534_g;
    int autoD1D9A534_p;

    // Variable Declarations
    int lv_playerIndex;
    unit lv_testUnit;
    fixed lv_testScore;
    unit lv_bestTarget;
    fixed lv_bestScore;

    // Variable Initialization
    lv_bestScore = 524287.0;

    // Implementation
    autoD1D9A534_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_players; 
    autoD1D9A534_p = 1;
    for ( ; autoD1D9A534_p <= PlayerGroupCount(autoD1D9A534_g) ; autoD1D9A534_p += (lv_playerIndex == PlayerGroupPlayer(autoD1D9A534_g, autoD1D9A534_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoD1D9A534_g, autoD1D9A534_p);
        if ((lv_playerIndex != lp_trigPlayer)) {
            lv_testUnit = libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit;
            if ((UnitIsValid(lv_testUnit) == true)) {
                lv_testScore = DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), UnitGetPosition(lv_testUnit));
                if ((libAIAI_gf_HeroAIIsPlayerActive(UnitGetOwner(lv_testUnit), libAIAI_gv_heroAIComputerPlayerType) == false)) {
                    lv_testScore = (lv_testScore - 10.0);
                }

                if ((lv_testScore < lv_bestScore)) {
                    lv_bestScore = lv_testScore;
                    lv_bestTarget = lv_testUnit;
                }

            }

        }

    }
    return lv_bestTarget;
}

bool libAIAI_gf_HeroAISafeWhileRetreatingInLaneLogic (int lp_trigPlayer) {
    // Variable Declarations
    region lv_homeRegion;
    fixed lv_heroToHomeDistance;
    fixed lv_retreatPositionToHomeDistance;
    point lv_currentLaneRetreatPosition;
    fixed lv_safeDistanceBehindFrontTower;
    bool lv_wantsToTeleportHome;
    bool lv_wantsToWalkBetweenLanes;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order)) {
        lv_homeRegion = libCore_gv_mAPOrderBaseRegion;
    }
    else {
        lv_homeRegion = libCore_gv_mAPChaosBaseRegion;
    }
    if ((libAIAI_gf_HeroAIDrinkMoonwellLogic(lp_trigPlayer, RegionCircle(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroMoonwellSearchRadius)) == true)) {
        return true;
    }

    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome == true) || (libAIAI_gf_HeroAIShouldRetreatToHeal(lp_trigPlayer) == true))) {
        lv_wantsToTeleportHome = true;
    }

    if ((lv_wantsToTeleportHome == false) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane != libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane)) {
        if (((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_startOffensiveHealth) || ((libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_numberOfMissingEnemies > 3) && (libAIAI_gf_HeroAIIsPlayerInsideBase(lp_trigPlayer) == false)) || (libAIAI_gf_HeroAIBetterToWalkDirectlyToLane(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane) == false))) {
            lv_wantsToTeleportHome = true;
        }
        else {
            lv_wantsToWalkBetweenLanes = true;
        }
    }

    if ((lv_wantsToTeleportHome == true)) {
        lv_safeDistanceBehindFrontTower = libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_frontTowerPosition;
        lv_safeDistanceBehindFrontTower = libAIAI_gf_AIRetreatLanePosition(libGame_gv_players[lp_trigPlayer].lv_faction, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane, lv_safeDistanceBehindFrontTower, libAIAI_gv_aIHeroSafeDistanceBehindTower);
        if (((libAIAI_gf_HeroAIIsPlayerBehindLanePosition(lp_trigPlayer, lv_safeDistanceBehindFrontTower) == true) || ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_safeInLaneStartTime + libAIAI_gv_aIHeroExtraRetreatLaneTimeBeforeTeleporting) < TimerGetElapsed(libGame_gv_gameTimer)))) {
            if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_canPortHome == true)) {
                if ((RegionContainsPoint(lv_homeRegion, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) == true)) {
                    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSReturnToSpawn);
                }
                else {
                    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSPortHomeLane);
                }
                return true;
            }
            else {
                if ((RegionContainsPoint(lv_homeRegion, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) == true)) {
                    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome = false;
                }

            }
        }
        else {
            return false;
        }
    }

    if ((lv_wantsToWalkBetweenLanes == true)) {
        lv_currentLaneRetreatPosition = libAIAI_gf_HeroAIGetPositionBehindContentionPoint(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane, libAIAI_gv_aIHeroRetreatDistanceToChangeLanes, 0.0);
        lv_heroToHomeDistance = DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libGame_gv_players[lp_trigPlayer].lv_spawnPoint);
        lv_retreatPositionToHomeDistance = DistanceBetweenPoints(lv_currentLaneRetreatPosition, libGame_gv_players[lp_trigPlayer].lv_spawnPoint);
        if (((libNtve_gf_UnitInRegion(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_homeRegion) == true) || (lv_heroToHomeDistance <= lv_retreatPositionToHomeDistance))) {
            libAIAI_gf_HeroAIStartReturnToLane(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane);
            return true;
        }
        else {
            return false;
        }
    }

    if ((libAIAI_gf_HeroAIShouldWaitForMinions(lp_trigPlayer) == true)) {
        libAIAI_gf_HeroAIStartWaitForMinions(lp_trigPlayer);
        return true;
    }

    libAIAI_gf_HeroAIStartAdvanceLane(lp_trigPlayer);
    return true;
}

bool libAIAI_gf_HeroAISafeWhileRetreatingInJungleLogic (int lp_trigPlayer) {
    // Implementation
    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome == true) || ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp <= 0) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth)) || ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp > 0) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToSpawnHealth)) || ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp > 0) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_arrivedAtCampTime <= 0.0)))) {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp > 0)) {
            libAIAI_gf_HeroAIHeroStoppingCampAttack(lp_trigPlayer);
            return true;
        }

        if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_safeInJungleStartTime + libAIAI_gv_aIHeroExtraRetreatJungleTimeBeforeTeleporting) < TimerGetElapsed(libGame_gv_gameTimer))) {
            if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_canPortHome == true)) {
                libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSPortHomeJungle);
            }
            else {
                libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
            }
            return true;
        }

    }
    else {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp > 0)) {
            libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSAttackSoloCamp);
            return true;
        }
        else {
            libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
            return true;
        }
    }
    return false;
}

bool libAIAI_gf_HeroAIBetterToWalkDirectlyToLane (int lp_trigPlayer, int lp_laneIndex) {
    // Variable Declarations
    fixed lv_walkingSpeed;
    fixed lv_speedBonus;
    point lv_heroPosition;
    point lv_returnToLanePosition;
    fixed lv_movementSpeed;
    fixed lv_teleportChannelTime;
    fixed lv_timeToWalkToLane;
    fixed lv_timeToTeleportHomeFirst;

    // Variable Initialization

    // Implementation
    lv_heroPosition = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    libGame_gf_CalculateClosestLaneDataForLane(lv_heroPosition, lp_laneIndex);
    if ((libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_closestDist <= libAIAI_gv_aIHeroCloseToLaneDistance)) {
        return true;
    }

    lv_walkingSpeed = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), "Speed", lp_trigPlayer));
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hasMount == true)) {
        lv_speedBonus = StringToFixed(CatalogFieldValueGet(c_gameCatalogBehavior, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_mountBehavior, "Modification.UnifiedMoveSpeedFactor", lp_trigPlayer));
        lv_movementSpeed = (lv_walkingSpeed * (1.0 + lv_speedBonus));
    }
    else {
        lv_movementSpeed = lv_walkingSpeed;
    }
    lv_returnToLanePosition = libAIAI_gf_HeroAIGetReturnToLanePosition(lp_trigPlayer, lp_laneIndex);
    if ((DistanceBetweenPoints(lv_heroPosition, lv_returnToLanePosition) > libAIAI_gv_aIHeroWalkDirectlyToLaneDistance)) {
        return false;
    }

    lv_teleportChannelTime = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, "PortBackToBase", "CastIntroTime[" + IntToString(0) + "]", c_playerAny));
    lv_timeToWalkToLane = (DistanceBetweenPoints(lv_heroPosition, lv_returnToLanePosition) / lv_movementSpeed);
    lv_timeToTeleportHomeFirst = (lv_teleportChannelTime + (DistanceBetweenPoints(libGame_gv_players[lp_trigPlayer].lv_spawnPoint, lv_returnToLanePosition) / lv_movementSpeed));
    if ((lv_timeToWalkToLane < lv_timeToTeleportHomeFirst)) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAILaneChangeTarget (int lp_trigPlayer) {
    unitgroup auto6BEFFB21_g;
    int auto6BEFFB21_u;
    unitgroup autoCFDBF903_g;
    int autoCFDBF903_u;
    unitgroup autoF7C7C396_g;
    int autoF7C7C396_u;
    unitgroup auto434469AA_g;
    int auto434469AA_u;
    unitgroup autoAD2E6DC7_g;
    int autoAD2E6DC7_u;
    unitgroup auto5A65BE74_g;
    int auto5A65BE74_u;

    // Variable Declarations
    order lv_currentOrder;
    order lv_nextOrder;
    point lv_currentPosition;
    unit lv_currentHeroUnit;
    unit lv_currentTarget;
    bool lv_attackingBadTarget;
    fixed lv_minionAggroRange;
    fixed lv_towerAggroRange;
    fixed lv_heroAggroRange;
    fixed lv_extendedTowerAggroRange;
    fixed lv_attackRange;
    fixed lv_heroHarassRange;
    fixed lv_lowHealthHeroHarassRange;
    unitgroup lv_allNearbyEnemies;
    unitgroup lv_nearbyEnemyTowers;
    unitgroup lv_nearbyEnemyStructures;
    unitgroup lv_nearbyEnemyHeroes;
    unitgroup lv_nearbyEnemyMinions;
    unitgroup lv_nearbyEnemySummons;
    unitgroup lv_allNearbyAllies;
    unitgroup lv_nearbyAllyHeroes;
    int lv_strucureType;
    unit lv_allyHero;
    unit lv_lastAttacker;
    unit lv_enemy;
    fixed lv_enemyHP;
    fixed lv_leastHP;
    fixed lv_enemyEval;
    fixed lv_leastEval;
    unit lv_bestTarget;
    int lv_townIndex;

    // Variable Initialization
    lv_allNearbyEnemies = UnitGroupEmpty();
    lv_nearbyEnemyTowers = UnitGroupEmpty();
    lv_nearbyEnemyStructures = UnitGroupEmpty();
    lv_nearbyEnemyHeroes = UnitGroupEmpty();
    lv_nearbyEnemyMinions = UnitGroupEmpty();
    lv_nearbyEnemySummons = UnitGroupEmpty();
    lv_allNearbyAllies = UnitGroupEmpty();
    lv_nearbyAllyHeroes = UnitGroupEmpty();
    lv_leastHP = 524287.0;
    lv_leastEval = 524287.0;

    // Implementation
    lv_currentHeroUnit = libAIAI_gf_HeroAIGetHeroOrVehicle(lp_trigPlayer);
    lv_currentOrder = UnitOrder(lv_currentHeroUnit, 0);
    lv_currentPosition = UnitGetPosition(lv_currentHeroUnit);
    if ((OrderGetAbilityCommand(lv_currentOrder) == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility)) {
        lv_currentTarget = OrderGetTargetUnit(lv_currentOrder);
    }

    if ((lv_currentTarget == null)) {
        return false;
    }

    if (((UnitTypeTestFlag(UnitGetType(lv_currentTarget), c_unitFlagTownStructureWall) == true) || ((libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (UnitTypeTestAttribute(UnitGetType(lv_currentTarget), c_unitAttributeHeroic) == true)) || ((libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (UnitTypeTestFlag(UnitGetType(lv_currentTarget), c_unitFlagTownStructureMoonwell) == true)) || ((libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (UnitIsValid(libGame_gv_players[lp_trigPlayer].lv_activeVehicle) == true) && ((UnitTypeTestAttribute(UnitGetType(lv_currentTarget), c_unitAttributeBiological) == true) || (UnitTypeTestAttribute(UnitGetType(lv_currentTarget), c_unitAttributeSummoned) == true))))) {
        lv_attackingBadTarget = true;
    }

    lv_minionAggroRange = libAIAI_gv_aIHeroSightRange;
    lv_towerAggroRange = libAIAI_gv_aIHeroSightRange;
    lv_heroAggroRange = libAIAI_gv_aIHeroSightRange;
    lv_extendedTowerAggroRange = (libAIAI_gv_aIHeroSightRange * 2.0);
    lv_attackRange = libAIAI_gf_AIGetActiveWeaponRange(lv_currentHeroUnit);
    lv_heroHarassRange = (lv_attackRange + 2.0);
    lv_lowHealthHeroHarassRange = (lv_attackRange + 4.0);
    lv_allNearbyEnemies = UnitGroupSearch(null, lp_trigPlayer, lv_currentPosition, lv_extendedTowerAggroRange, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterAlly) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv_nearbyEnemyStructures = UnitGroupFilter(null, c_playerAny, lv_allNearbyEnemies, libCore_gv_filtersStructure, 0);
    lv_nearbyEnemyTowers = UnitGroupFilter(null, c_playerAny, lv_nearbyEnemyStructures, UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, 0, 0), 0);
    lv_nearbyEnemyHeroes = UnitGroupFilter(null, c_playerAny, lv_allNearbyEnemies, libCore_gv_filtersHeroic, 0);
    lv_nearbyEnemyMinions = UnitGroupFilter(null, c_playerAny, lv_allNearbyEnemies, libCore_gv_filtersMinionsAllLaners, 0);
    lv_nearbyEnemySummons = UnitGroupFilter(null, c_playerAny, lv_allNearbyEnemies, libCore_gv_filtersSummoned, 0);
    lv_allNearbyAllies = UnitGroupSearch(null, lp_trigPlayer, lv_currentPosition, lv_extendedTowerAggroRange, UnitFilter((1 << c_targetFilterVisible), 0, (1 << c_targetFilterPlayer) | (1 << c_targetFilterNeutral) | (1 << c_targetFilterEnemy) | (1 << c_targetFilterLight) | (1 << c_targetFilterMissile), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv_nearbyAllyHeroes = UnitGroupFilter(null, c_playerAny, lv_allNearbyAllies, libCore_gv_filtersHeroic, 0);
    if ((libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true)) {
        auto6BEFFB21_g = lv_nearbyAllyHeroes;
        auto6BEFFB21_u = 1;
        for ( ; auto6BEFFB21_u <= UnitGroupCount(auto6BEFFB21_g, c_unitCountAll) ; auto6BEFFB21_u += (lv_allyHero == UnitGroupUnit(auto6BEFFB21_g, auto6BEFFB21_u)) ) {
            lv_allyHero = UnitGroupUnit(auto6BEFFB21_g, auto6BEFFB21_u);
            if ((UnitGetOwner(lv_allyHero) > libCore_gv_bALMaxPlayers)) {
                continue;
            }

            lv_lastAttacker = libAIAI_gv_heroAIDamageTracking[UnitGetOwner(lv_allyHero)].lv_lastAttacker;
            if ((libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(UnitGetOwner(lv_allyHero), 2.0) == true) && (UnitIsValid(lv_lastAttacker) == true) && (UnitTypeTestAttribute(UnitGetType(lv_lastAttacker), c_unitAttributeHeroic) == true) && (DistanceBetweenPoints(lv_currentPosition, UnitGetPosition(lv_lastAttacker)) <= lv_heroAggroRange) && (libAIAI_gf_HeroAIIsTargetBehindGateRelativeToAttacker(lv_lastAttacker, lv_currentHeroUnit) == false) && (libNtve_gf_UnitInRegion(lv_lastAttacker, libMapM_gv_mMSafeRegions[libGame_gf_EnemyTeamNumberOfPlayer(lp_trigPlayer)]) == false)) {
                lv_enemyEval = libAIAI_gf_HeroAIEvaluateTarget(lp_trigPlayer, lv_lastAttacker, libAIAI_gv_aIHeroChangeTargetDistanceWeight);
                if ((lv_enemyEval < lv_leastEval)) {
                    lv_leastEval = lv_enemyEval;
                    lv_bestTarget = lv_lastAttacker;
                }

            }

        }
        if ((lv_bestTarget == null) && (libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == false)) {
            autoCFDBF903_g = lv_nearbyEnemyHeroes;
            autoCFDBF903_u = 1;
            for ( ; autoCFDBF903_u <= UnitGroupCount(autoCFDBF903_g, c_unitCountAll) ; autoCFDBF903_u += (lv_enemy == UnitGroupUnit(autoCFDBF903_g, autoCFDBF903_u)) ) {
                lv_enemy = UnitGroupUnit(autoCFDBF903_g, autoCFDBF903_u);
                if ((libNtve_gf_UnitIsVisibleToPlayer(lv_enemy, lp_trigPlayer) == true) && (libAIAI_gf_HeroAIIsTargetBehindGateRelativeToAttacker(lv_enemy, lv_currentHeroUnit) == false) && (libNtve_gf_UnitInRegion(lv_enemy, libMapM_gv_mMSafeRegions[libGame_gf_EnemyTeamNumberOfPlayer(lp_trigPlayer)]) == false) && ((DistanceBetweenPoints(lv_currentPosition, UnitGetPosition(lv_enemy)) <= lv_heroHarassRange) || ((UnitGetPropertyFixed(lv_enemy, c_unitPropLifePercent, c_unitPropCurrent) < 50.0) && (DistanceBetweenPoints(lv_currentPosition, UnitGetPosition(lv_enemy)) <= lv_lowHealthHeroHarassRange)))) {
                    lv_enemyHP = UnitGetPropertyFixed(lv_enemy, c_unitPropLife, c_unitPropCurrent);
                    if ((lv_enemyHP < lv_leastHP)) {
                        lv_leastHP = lv_enemyHP;
                        lv_bestTarget = lv_enemy;
                    }

                }

            }
        }

    }

    if (((libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) || (lv_attackingBadTarget == true))) {
        if ((lv_bestTarget == null)) {
            autoF7C7C396_g = lv_nearbyEnemyTowers;
            autoF7C7C396_u = 1;
            for ( ; autoF7C7C396_u <= UnitGroupCount(autoF7C7C396_g, c_unitCountAll) ; autoF7C7C396_u += (lv_enemy == UnitGroupUnit(autoF7C7C396_g, autoF7C7C396_u)) ) {
                lv_enemy = UnitGroupUnit(autoF7C7C396_g, autoF7C7C396_u);
                if (((libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_gameState == libAIAI_ge_HeroAIGameState_Act3) || (libAIAI_gf_HeroAIIsTowerAThreat(lv_enemy) == false) || (libAIAI_gf_HeroAIAlliesNearEnemyBuilding(lp_trigPlayer, lv_enemy) == true) || (UnitIsValid(libGame_gv_players[lp_trigPlayer].lv_activeVehicle) == true)) && ((DistanceBetweenPoints(lv_currentPosition, UnitGetPosition(lv_enemy)) <= lv_towerAggroRange) || ((lv_attackingBadTarget == true) && (DistanceBetweenPoints(lv_currentPosition, UnitGetPosition(lv_enemy)) <= lv_extendedTowerAggroRange)))) {
                    lv_townIndex = libGame_gf_TownGetTownForUnit(lv_enemy);
                    if ((lv_townIndex > 0) && (libGame_gv_townTownData[lv_townIndex].lv_lane != libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane)) {
                        continue;
                    }

                    lv_enemyEval = libAIAI_gf_HeroAIEvaluateTarget(lp_trigPlayer, lv_enemy, libAIAI_gv_aIHeroChangeTargetTowerDistanceWeight);
                    if ((lv_enemyEval < lv_leastEval)) {
                        lv_leastEval = lv_enemyEval;
                        lv_bestTarget = lv_enemy;
                    }

                }

            }
            auto434469AA_g = lv_nearbyEnemyStructures;
            auto434469AA_u = 1;
            for ( ; auto434469AA_u <= UnitGroupCount(auto434469AA_g, c_unitCountAll) ; auto434469AA_u += (lv_enemy == UnitGroupUnit(auto434469AA_g, auto434469AA_u)) ) {
                lv_enemy = UnitGroupUnit(auto434469AA_g, auto434469AA_u);
                if ((UnitTypeTestFlag(UnitGetType(lv_enemy), c_unitFlagTownStructureGate) == true) && (libNtve_gf_UnitIsVisibleToPlayer(lv_enemy, lp_trigPlayer) == true) && (DistanceBetweenPoints(lv_currentPosition, UnitGetPosition(lv_enemy)) <= lv_minionAggroRange)) {
                    lv_townIndex = libGame_gf_TownGetTownForUnit(lv_enemy);
                    if ((lv_townIndex > 0) && (libGame_gv_townTownData[lv_townIndex].lv_lane != libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane)) {
                        continue;
                    }

                    lv_enemyEval = libAIAI_gf_HeroAIEvaluateTarget(lp_trigPlayer, lv_enemy, libAIAI_gv_aIHeroChangeTargetDistanceWeight);
                    if ((lv_enemyEval < lv_leastEval)) {
                        lv_leastEval = lv_enemyEval;
                        lv_bestTarget = lv_enemy;
                    }

                }

            }
            autoAD2E6DC7_g = lv_nearbyEnemyMinions;
            autoAD2E6DC7_u = 1;
            for ( ; autoAD2E6DC7_u <= UnitGroupCount(autoAD2E6DC7_g, c_unitCountAll) ; autoAD2E6DC7_u += (lv_enemy == UnitGroupUnit(autoAD2E6DC7_g, autoAD2E6DC7_u)) ) {
                lv_enemy = UnitGroupUnit(autoAD2E6DC7_g, autoAD2E6DC7_u);
                if (((libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == false) || (UnitIsValid(libGame_gv_players[lp_trigPlayer].lv_activeVehicle) == false)) && (libNtve_gf_UnitIsVisibleToPlayer(lv_enemy, lp_trigPlayer) == true) && (DistanceBetweenPoints(lv_currentPosition, UnitGetPosition(lv_enemy)) <= lv_minionAggroRange)) {
                    lv_enemyEval = libAIAI_gf_HeroAIEvaluateTarget(lp_trigPlayer, lv_enemy, libAIAI_gv_aIHeroChangeTargetDistanceWeight);
                    if ((lv_enemyEval < lv_leastEval)) {
                        lv_leastEval = lv_enemyEval;
                        lv_bestTarget = lv_enemy;
                    }

                }

            }
            auto5A65BE74_g = lv_nearbyEnemySummons;
            auto5A65BE74_u = 1;
            for ( ; auto5A65BE74_u <= UnitGroupCount(auto5A65BE74_g, c_unitCountAll) ; auto5A65BE74_u += (lv_enemy == UnitGroupUnit(auto5A65BE74_g, auto5A65BE74_u)) ) {
                lv_enemy = UnitGroupUnit(auto5A65BE74_g, auto5A65BE74_u);
                if (((libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == false) || (UnitIsValid(libGame_gv_players[lp_trigPlayer].lv_activeVehicle) == false)) && (libNtve_gf_UnitIsVisibleToPlayer(lv_enemy, lp_trigPlayer) == true) && (DistanceBetweenPoints(lv_currentPosition, UnitGetPosition(lv_enemy)) <= lv_minionAggroRange)) {
                    lv_enemyEval = libAIAI_gf_HeroAIEvaluateTarget(lp_trigPlayer, lv_enemy, libAIAI_gv_aIHeroChangeTargetDistanceWeight);
                    if ((lv_enemyEval < lv_leastEval)) {
                        lv_leastEval = lv_enemyEval;
                        lv_bestTarget = lv_enemy;
                    }

                }

            }
        }

    }

    if ((lv_bestTarget == null)) {
        return false;
    }
    else {
        if ((lv_currentTarget != lv_bestTarget)) {
            lv_nextOrder = UnitOrder(lv_currentHeroUnit, 1);
            HeroAIUnitIssueOrder(lv_currentHeroUnit, OrderTargetingUnit(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility, lv_bestTarget), c_orderQueueReplace);
            if ((OrderGetAbilityCommand(lv_nextOrder) == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility)) {
                HeroAIUnitIssueOrder(lv_currentHeroUnit, lv_nextOrder, c_orderQueueAddToEnd);
            }

            return true;
        }
        else {
            return false;
        }
    }
}

bool libAIAI_gf_HeroAIJungleChooseTarget (int lp_trigPlayer, point lp_location, fixed lp_radius) {
    unitgroup auto70369214_g;
    int auto70369214_u;
    unitgroup auto0798A2D8_g;
    int auto0798A2D8_u;
    unitgroup autoA9D64B29_g;
    int autoA9D64B29_u;

    // Variable Declarations
    region lv_nearbyRegion;
    unitgroup lv_enemies;
    unitgroup lv_enemyHeroes;
    unitgroup lv_enemySummons;
    unit lv_hero;
    unit lv_target;
    fixed lv_targetEval;
    unit lv_bestTarget;
    fixed lv_bestTargetEval;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_enemyHeroes = UnitGroupEmpty();
    lv_enemySummons = UnitGroupEmpty();
    lv_bestTargetEval = 524287.0;

    // Implementation
    lv_nearbyRegion = RegionCircle(lp_location, lp_radius);
    lv_enemies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, lv_nearbyRegion, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
    lv_enemyHeroes = UnitGroupFilter(null, c_playerAny, lv_enemies, libCore_gv_filtersHeroic, 0);
    lv_enemySummons = UnitGroupFilter(null, c_playerAny, lv_enemies, libCore_gv_filtersSummoned, 0);
    auto70369214_g = lv_enemyHeroes;
    auto70369214_u = 1;
    for ( ; auto70369214_u <= UnitGroupCount(auto70369214_g, c_unitCountAll) ; auto70369214_u += (lv_hero == UnitGroupUnit(auto70369214_g, auto70369214_u)) ) {
        lv_hero = UnitGroupUnit(auto70369214_g, auto70369214_u);
        if ((libNtve_gf_UnitIsVisibleToPlayer(lv_hero, lp_trigPlayer) == false)) {
            UnitGroupRemove(lv_enemyHeroes, lv_hero);
        }

    }
    auto0798A2D8_g = lv_enemyHeroes;
    auto0798A2D8_u = 1;
    for ( ; auto0798A2D8_u <= UnitGroupCount(auto0798A2D8_g, c_unitCountAll) ; auto0798A2D8_u += (lv_target == UnitGroupUnit(auto0798A2D8_g, auto0798A2D8_u)) ) {
        lv_target = UnitGroupUnit(auto0798A2D8_g, auto0798A2D8_u);
        lv_targetEval = libAIAI_gf_HeroAIEvaluateTarget(lp_trigPlayer, lv_target, libAIAI_gv_aIHeroChangeTargetDistanceWeight);
        if ((lv_targetEval < lv_bestTargetEval)) {
            lv_bestTarget = lv_target;
            lv_bestTargetEval = lv_targetEval;
        }

    }
    if ((UnitIsValid(lv_bestTarget) == false)) {
        autoA9D64B29_g = lv_enemySummons;
        autoA9D64B29_u = 1;
        for ( ; autoA9D64B29_u <= UnitGroupCount(autoA9D64B29_g, c_unitCountAll) ; autoA9D64B29_u += (lv_target == UnitGroupUnit(autoA9D64B29_g, autoA9D64B29_u)) ) {
            lv_target = UnitGroupUnit(autoA9D64B29_g, autoA9D64B29_u);
            lv_targetEval = libAIAI_gf_HeroAIEvaluateTarget(lp_trigPlayer, lv_target, libAIAI_gv_aIHeroChangeTargetDistanceWeight);
            if ((lv_targetEval < lv_bestTargetEval)) {
                lv_bestTarget = lv_target;
                lv_bestTargetEval = lv_targetEval;
            }

        }
    }

    if ((UnitIsValid(lv_bestTarget) == true)) {
        libAIAI_gf_HeroAIEnsureOrderAttackUnit(lp_trigPlayer, lv_bestTarget);
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAICampChooseTarget (int lp_trigPlayer, point lp_location, fixed lp_radius) {
    unitgroup auto6208703F_g;
    int auto6208703F_u;

    // Variable Declarations
    unitgroup lv_enemies;
    unitgroup lv_enemyTargets;
    unit lv_enemy;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_enemyTargets = UnitGroupEmpty();

    // Implementation
    lv_enemies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, RegionCircle(lp_location, lp_radius), UnitFilter(0, 0, (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv_enemyTargets = UnitGroupFilter(null, c_playerAny, lv_enemies, libCore_gv_filtersHeroicandnotBenign, 0);
    auto6208703F_g = lv_enemyTargets;
    auto6208703F_u = 1;
    for ( ; auto6208703F_u <= UnitGroupCount(auto6208703F_g, c_unitCountAll) ; auto6208703F_u += (lv_enemy == UnitGroupUnit(auto6208703F_g, auto6208703F_u)) ) {
        lv_enemy = UnitGroupUnit(auto6208703F_g, auto6208703F_u);
        if ((libNtve_gf_UnitIsVisibleToPlayer(lv_enemy, lp_trigPlayer) == false)) {
            UnitGroupRemove(lv_enemyTargets, lv_enemy);
        }

    }
    lv_enemy = libAIAI_gf_HeroAIFindBestTarget(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_enemyTargets, lv_enemies, 0.0, libAIAI_gv_aIHeroVisionRange, c_Storm_AI_PreferCloserTargets, 0.0, 0.0, c_Storm_AI_StronglyPreferUnhealthyTargets, 0.0);
    if ((UnitIsAlive(lv_enemy) == true)) {
        libAIAI_gf_HeroAIEnsureOrderAttackUnit(lp_trigPlayer, lv_enemy);
        return true;
    }

    lv_enemyTargets = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterLight), (1 << (c_targetFilterBenign - 32))), 0);
    lv_enemy = libAIAI_gf_HeroAIFindBestTarget(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_enemyTargets, lv_enemies, 0.0, libAIAI_gv_aIHeroVisionRange, c_Storm_AI_PreferCloserTargets, 0.0, 0.0, c_Storm_AI_StronglyPreferUnhealthyTargets, 0.0);
    if ((UnitIsAlive(lv_enemy) == true)) {
        libAIAI_gf_HeroAIEnsureOrderAttackUnit(lp_trigPlayer, lv_enemy);
        return true;
    }

    lv_enemyTargets = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterLight), 0, 0, 0), 0);
    lv_enemy = libAIAI_gf_HeroAIFindBestTarget(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_enemyTargets, lv_enemies, 0.0, libAIAI_gv_aIHeroVisionRange, c_Storm_AI_PreferCloserTargets, 0.0, 0.0, c_Storm_AI_StronglyPreferUnhealthyTargets, 0.0);
    if ((UnitIsAlive(lv_enemy) == true)) {
        libAIAI_gf_HeroAIEnsureOrderAttackUnit(lp_trigPlayer, lv_enemy);
        return true;
    }

    return false;
}

bool libAIAI_gf_HeroAIStagingChooseTarget (int lp_trigPlayer, point lp_location, fixed lp_radius) {
    unitgroup auto452E7808_g;
    int auto452E7808_u;

    // Variable Declarations
    unitgroup lv_enemies;
    unitgroup lv_enemyTargets;
    unit lv_enemy;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_enemyTargets = UnitGroupEmpty();

    // Implementation
    lv_enemies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, RegionCircle(lp_location, lp_radius), UnitFilter(0, 0, (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem) | (1 << c_targetFilterCloaked), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv_enemyTargets = UnitGroupFilter(null, c_playerAny, lv_enemies, libCore_gv_filtersHeroicandnotBenign, 0);
    auto452E7808_g = lv_enemyTargets;
    auto452E7808_u = 1;
    for ( ; auto452E7808_u <= UnitGroupCount(auto452E7808_g, c_unitCountAll) ; auto452E7808_u += (lv_enemy == UnitGroupUnit(auto452E7808_g, auto452E7808_u)) ) {
        lv_enemy = UnitGroupUnit(auto452E7808_g, auto452E7808_u);
        if ((libNtve_gf_UnitIsVisibleToPlayer(lv_enemy, lp_trigPlayer) == false)) {
            UnitGroupRemove(lv_enemyTargets, lv_enemy);
        }

    }
    lv_enemy = libAIAI_gf_HeroAIFindBestTarget(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_enemyTargets, lv_enemies, 0.0, libAIAI_gv_aIHeroVisionRange, c_Storm_AI_PreferCloserTargets, 0.0, 0.0, c_Storm_AI_StronglyPreferUnhealthyTargets, 0.0);
    if ((UnitIsAlive(lv_enemy) == true)) {
        libAIAI_gf_HeroAIEnsureOrderAttackUnit(lp_trigPlayer, lv_enemy);
        return true;
    }

    lv_enemyTargets = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterBiological), 0, 0, (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterSummoned - 32))), 0);
    lv_enemy = libAIAI_gf_HeroAIFindBestTarget(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_enemyTargets, lv_enemies, 0.0, libAIAI_gv_aIHeroVisionRange, c_Storm_AI_PreferCloserTargets, 0.0, 0.0, c_Storm_AI_StronglyPreferUnhealthyTargets, 0.0);
    if ((UnitIsAlive(lv_enemy) == true)) {
        libAIAI_gf_HeroAIEnsureOrderAttackUnit(lp_trigPlayer, lv_enemy);
        return true;
    }

    lv_enemyTargets = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, (1 << (c_targetFilterBenign - 32))), 0);
    lv_enemy = libAIAI_gf_HeroAIFindBestTarget(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_enemyTargets, lv_enemies, 0.0, libAIAI_gv_aIHeroVisionRange, c_Storm_AI_PreferCloserTargets, 0.0, 0.0, c_Storm_AI_StronglyPreferUnhealthyTargets, 0.0);
    if ((UnitIsAlive(lv_enemy) == true)) {
        libAIAI_gf_HeroAIEnsureOrderAttackUnit(lp_trigPlayer, lv_enemy);
        return true;
    }

    return false;
}

bool libAIAI_gf_HeroAIChooseHostileTarget (int lp_trigPlayer, point lp_location, fixed lp_radius) {
    unitgroup autoC128DE10_g;
    int autoC128DE10_u;

    // Variable Declarations
    region lv_nearbyRegion;
    unitgroup lv_targets;
    unit lv_target;
    fixed lv_targetEval;
    unit lv_bestTarget;
    fixed lv_bestTargetEval;

    // Variable Initialization
    lv_targets = UnitGroupEmpty();
    lv_bestTargetEval = 524287.0;

    // Implementation
    lv_nearbyRegion = RegionCircle(lp_location, lp_radius);
    lv_targets = UnitGroup(null, libCore_gv_cOMPUTER_Hostile, lv_nearbyRegion, UnitFilter(0, 0, (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
    autoC128DE10_g = lv_targets;
    autoC128DE10_u = 1;
    for ( ; autoC128DE10_u <= UnitGroupCount(autoC128DE10_g, c_unitCountAll) ; autoC128DE10_u += (lv_target == UnitGroupUnit(autoC128DE10_g, autoC128DE10_u)) ) {
        lv_target = UnitGroupUnit(autoC128DE10_g, autoC128DE10_u);
        lv_targetEval = libAIAI_gf_HeroAIEvaluateTarget(lp_trigPlayer, lv_target, libAIAI_gv_aIHeroChangeTargetDistanceWeight);
        if ((lv_targetEval < lv_bestTargetEval)) {
            lv_bestTarget = lv_target;
            lv_bestTargetEval = lv_targetEval;
        }

    }
    if ((UnitIsValid(lv_bestTarget) == true)) {
        libAIAI_gf_HeroAIEnsureOrderAttackUnit(lp_trigPlayer, lv_bestTarget);
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAIAggroEnemyCore (int lp_trigPlayer) {
    // Variable Declarations
    order lv_currentOrder;
    point lv_currentPosition;
    unitgroup lv_enemyCoreGroup;

    // Variable Initialization
    lv_enemyCoreGroup = UnitGroupEmpty();

    // Implementation
    lv_currentOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_currentPosition = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    if ((lv_currentOrder != null) && (OrderGetAbilityCommand(lv_currentOrder) == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility) && (OrderGetTargetType(lv_currentOrder) == c_orderTargetPoint)) {
        lv_enemyCoreGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("KingsCore", "", "", lp_trigPlayer, c_unitAllianceEnemy, RegionCircle(lv_currentPosition, 17.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
        if ((UnitGroupCount(lv_enemyCoreGroup, c_unitCountAlive) > 0)) {
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingUnit(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility, UnitGroupUnit(lv_enemyCoreGroup, 1)), c_orderQueueReplace);
            return true;
        }

    }

    return false;
}

bool libAIAI_gf_HeroAIVehicleAggroEnemyCore (int lp_trigPlayer) {
    unitgroup autoDBD46776_g;
    int autoDBD46776_u;

    // Variable Declarations
    order lv_currentOrder;
    point lv_currentPosition;
    unitgroup lv_targetGroup;
    unit lv_core;
    fixed lv_testDist;
    unit lv_testUnit;
    int lv_townIndex;
    fixed lv_closestInLaneDist;
    unit lv_closestInLaneTower;
    fixed lv_closestOtherDist;
    unit lv_closestOtherTower;

    // Variable Initialization
    lv_targetGroup = UnitGroupEmpty();
    lv_closestInLaneDist = 524287.0;
    lv_closestOtherDist = 524287.0;

    // Implementation
    lv_currentOrder = UnitOrder(libGame_gv_players[lp_trigPlayer].lv_activeVehicle, 0);
    lv_currentPosition = UnitGetPosition(libGame_gv_players[lp_trigPlayer].lv_activeVehicle);
    if ((lv_currentOrder != null) && (OrderGetAbilityCommand(lv_currentOrder) == AbilityCommand("attack", 0)) && (OrderGetTargetType(lv_currentOrder) == c_orderTargetUnit) && (UnitTypeTestFlag(UnitGetType(OrderGetTargetUnit(lv_currentOrder)), c_unitFlagTownStructureCore) == true)) {
        return true;
    }

    lv_targetGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("KingsCore", "", "", lp_trigPlayer, c_unitAllianceEnemy, RegionCircle(lv_currentPosition, 25.0), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_targetGroup, c_unitCountAlive) > 0)) {
        lv_core = UnitGroupUnit(lv_targetGroup, 1);
        if ((libNtve_gf_UnitIsInvulnerable(lv_core) == false) && (DistanceBetweenPoints(lv_currentPosition, UnitGetPosition(lv_core)) < 12.5)) {
            HeroAIUnitIssueOrder(libGame_gv_players[lp_trigPlayer].lv_activeVehicle, OrderTargetingUnit(AbilityCommand("attack", 0), lv_core), c_orderQueueReplace);
            return true;
        }
        else {
            lv_targetGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", lp_trigPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(UnitGroupUnit(lv_targetGroup, 1)), 30.0), UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
            autoDBD46776_g = lv_targetGroup;
            autoDBD46776_u = 1;
            for ( ; autoDBD46776_u <= UnitGroupCount(autoDBD46776_g, c_unitCountAll) ; autoDBD46776_u += (lv_testUnit == UnitGroupUnit(autoDBD46776_g, autoDBD46776_u)) ) {
                lv_testUnit = UnitGroupUnit(autoDBD46776_g, autoDBD46776_u);
                lv_testDist = DistanceBetweenPoints(lv_currentPosition, UnitGetPosition(lv_testUnit));
                lv_townIndex = libGame_gf_TownGetTownForUnit(lv_testUnit);
                if ((lv_townIndex > 0) && (libGame_gv_townTownData[lv_townIndex].lv_lane == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane)) {
                    if ((lv_testDist < lv_closestInLaneDist)) {
                        lv_closestInLaneDist = lv_testDist;
                        lv_closestInLaneTower = lv_testUnit;
                    }

                }
                else {
                    if ((lv_testDist < lv_closestOtherDist)) {
                        lv_closestOtherDist = lv_testDist;
                        lv_closestOtherTower = lv_testUnit;
                    }

                }
            }
            if ((UnitIsValid(lv_closestInLaneTower) == true)) {
                HeroAIUnitIssueOrder(libGame_gv_players[lp_trigPlayer].lv_activeVehicle, OrderTargetingUnit(AbilityCommand("attack", 0), lv_closestInLaneTower), c_orderQueueReplace);
                return true;
            }

            if ((libNtve_gf_UnitIsInvulnerable(lv_core) == false)) {
                HeroAIUnitIssueOrder(libGame_gv_players[lp_trigPlayer].lv_activeVehicle, OrderTargetingUnit(AbilityCommand("attack", 0), lv_core), c_orderQueueReplace);
                return true;
            }

            if ((UnitIsValid(lv_closestOtherTower) == true)) {
                HeroAIUnitIssueOrder(libGame_gv_players[lp_trigPlayer].lv_activeVehicle, OrderTargetingUnit(AbilityCommand("attack", 0), lv_closestOtherTower), c_orderQueueReplace);
                return true;
            }

        }
        if ((libAIAI_gf_HeroAILaneChangeTarget(lp_trigPlayer) == true)) {
            return true;
        }

        if ((DistanceBetweenPoints(UnitGetPosition(libGame_gv_players[lp_trigPlayer].lv_activeVehicle), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition) <= libAIAI_gv_aIHeroCloseEnoughDist)) {
            libAIAI_gf_HeroAIUpdateLaneTargetPosition(lp_trigPlayer, true);
            return true;
        }

        if ((UnitOrder(libGame_gv_players[lp_trigPlayer].lv_activeVehicle, 0) == null)) {
            libAIAI_gf_HeroAIUpdateLaneTargetPosition(lp_trigPlayer, true);
            return true;
        }

        return true;
    }

    return false;
}

bool libAIAI_gf_HeroAIHarassSiegeEnemyLogic (int lp_trigPlayer) {
    unitgroup autoF889F1B0_g;
    int autoF889F1B0_u;
    unitgroup autoF99274E8_g;
    int autoF99274E8_u;

    // Variable Declarations
    region lv_nearbyRegion;
    unitgroup lv_enemies;
    unitgroup lv_enemyHeroes;
    unitgroup lv_enemyMinions;
    unit lv_enemy;
    region lv_nearEnemyRegion;
    unitgroup lv_enemyHeroesNearEnemy;
    order lv_order;
    fixed lv_targetEval;
    unit lv_bestTarget;
    fixed lv_bestTargetEval;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_enemyHeroes = UnitGroupEmpty();
    lv_enemyMinions = UnitGroupEmpty();
    lv_enemyHeroesNearEnemy = UnitGroupEmpty();
    lv_bestTargetEval = 524287.0;

    // Implementation
    if ((libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 2.0) == true)) {
        return false;
    }

    lv_nearbyRegion = RegionCircle(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroSiegeEnemySearchRadius);
    lv_enemies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, lv_nearbyRegion, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
    lv_enemyHeroes = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
    lv_enemyMinions = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterBiological), 0, 0, 0), 0);
    if ((libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == false)) {
        autoF889F1B0_g = lv_enemyHeroes;
        autoF889F1B0_u = 1;
        for ( ; autoF889F1B0_u <= UnitGroupCount(autoF889F1B0_g, c_unitCountAll) ; autoF889F1B0_u += (lv_enemy == UnitGroupUnit(autoF889F1B0_g, autoF889F1B0_u)) ) {
            lv_enemy = UnitGroupUnit(autoF889F1B0_g, autoF889F1B0_u);
            if (((UnitGetType(lv_enemy) != "HeroSgtHammer") || (libAIAI_gf_AIGetActiveWeaponRange(lv_enemy) < libAIAI_gv_aIHeroSiegeEnemyMinWeaponRange))) {
                continue;
            }

            if ((libNtve_gf_UnitIsVisibleToPlayer(lv_enemy, lp_trigPlayer) == false)) {
                continue;
            }

            libAIAI_gf_HeroAIEval(lp_trigPlayer);
            if (((libAIAI_gf_HeroAIUnitProtectedByTower(lv_enemy, libAIAI_gv_aIHeroFarFromTowerDistance) == true) || (libAIAI_gf_HeroAIEnemyEvalInCircle(lp_trigPlayer, UnitGetPosition(lv_enemy), libAIAI_gv_aIHeroCloseToSiegeEnemyDistance, true, true, true) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_selfEval))) {
                continue;
            }

            lv_bestTarget = lv_enemy;
            break;
        }
    }

    if ((UnitIsValid(lv_bestTarget) == false) && (libAIAI_gf_HeroAIUnitProtectedByTower(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, libAIAI_gv_aIHeroFarFromTowerDistance) == true)) {
        autoF99274E8_g = lv_enemyMinions;
        autoF99274E8_u = 1;
        for ( ; autoF99274E8_u <= UnitGroupCount(autoF99274E8_g, c_unitCountAll) ; autoF99274E8_u += (lv_enemy == UnitGroupUnit(autoF99274E8_g, autoF99274E8_u)) ) {
            lv_enemy = UnitGroupUnit(autoF99274E8_g, autoF99274E8_u);
            if ((libAIAI_gf_AIGetActiveWeaponRange(lv_enemy) < libAIAI_gv_aIHeroSiegeEnemyMinWeaponRange)) {
                continue;
            }

            lv_order = UnitOrder(lv_enemy, 0);
            if (((lv_order == null) || (OrderGetTargetType(lv_order) != c_orderTargetUnit) || (UnitTypeTestAttribute(UnitGetType(OrderGetTargetUnit(lv_order)), c_unitAttributeStructure) == false))) {
                continue;
            }

            libAIAI_gf_HeroAIEval(lp_trigPlayer);
            if (((libAIAI_gf_HeroAIUnitProtectedByTower(lv_enemy, libAIAI_gv_aIHeroFarFromTowerDistance) == true) || (libAIAI_gf_HeroAIEnemyEvalInCircle(lp_trigPlayer, UnitGetPosition(lv_enemy), libAIAI_gv_aIHeroCloseToSiegeEnemyDistance, true, true, true) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_selfEval))) {
                continue;
            }

            lv_targetEval = libAIAI_gf_HeroAIEvaluateTarget(lp_trigPlayer, lv_enemy, libAIAI_gv_aIHeroChangeTargetDistanceWeight);
            if ((lv_targetEval < lv_bestTargetEval)) {
                lv_bestTarget = lv_enemy;
                lv_bestTargetEval = lv_targetEval;
            }

        }
    }

    if ((UnitIsValid(lv_bestTarget) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_siegeHarassTarget = lv_bestTarget;
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSHarassSiegeEnemy);
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingUnit(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_siegeHarassTarget), c_orderQueueReplace);
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAIHealthGlobeLogic (int lp_trigPlayer) {
    unitgroup auto5E59227F_g;
    int auto5E59227F_u;

    // Variable Declarations
    region lv_areaAroundGlobe;
    unitgroup lv_nearbyGlobes;
    unit lv_globe;
    unitgroup lv_enemies;
    unitgroup lv_enemyHeroes;

    // Variable Initialization
    lv_nearbyGlobes = UnitGroupEmpty();
    lv_enemies = UnitGroupEmpty();
    lv_enemyHeroes = UnitGroupEmpty();

    // Implementation
    if (((libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == false) || ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) >= 100.0) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropEnergyPercent, c_unitPropCurrent) >= 100.0)) || (libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 3.0) == true))) {
        return false;
    }

    lv_nearbyGlobes = UnitGroupSearch("RegenGlobe", c_playerAny, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroHealthGlobeSearchRadius, UnitFilter(0, 0, 0, 0), 0);
    auto5E59227F_g = lv_nearbyGlobes;
    auto5E59227F_u = 1;
    for ( ; auto5E59227F_u <= UnitGroupCount(auto5E59227F_g, c_unitCountAll) ; auto5E59227F_u += (lv_globe == UnitGroupUnit(auto5E59227F_g, auto5E59227F_u)) ) {
        lv_globe = UnitGroupUnit(auto5E59227F_g, auto5E59227F_u);
        lv_areaAroundGlobe = RegionCircle(UnitGetPosition(lv_globe), 5.0);
        lv_enemies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, lv_areaAroundGlobe, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
        lv_enemyHeroes = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
        if ((libNtve_gf_PlayerIsEnemy(lp_trigPlayer, UnitGetOwner(lv_globe), libNtve_ge_PlayerRelation_Ally) == true) && (UnitGroupCount(lv_enemyHeroes, c_unitCountAlive) == 0)) {
            libAIAI_gf_HeroAIEnsureOrderMovePoint(lp_trigPlayer, UnitGetPosition(lv_globe));
            return true;
        }

    }
    return false;
}

bool libAIAI_gf_HeroAIBuffGlobeLogic (int lp_trigPlayer) {
    unitgroup auto6E3B124A_g;
    int auto6E3B124A_u;

    // Variable Declarations
    region lv_areaAroundGlobe;
    unitgroup lv_nearbyGlobes;
    unit lv_globe;
    unitgroup lv_enemies;
    unitgroup lv_enemyHeroes;

    // Variable Initialization
    lv_nearbyGlobes = UnitGroupEmpty();
    lv_enemies = UnitGroupEmpty();
    lv_enemyHeroes = UnitGroupEmpty();

    // Implementation
    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeType == null) || (libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == false) || (libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 3.0) == true))) {
        return false;
    }

    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeGivesHealth == false) || (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) >= 100.0)) && ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeGivesEnergy == false) || (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropEnergyPercent, c_unitPropCurrent) >= 100.0))) {
        if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeStackBehavior == null) || (UnitBehaviorCount(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeStackBehavior) >= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeStackMax))) {
            return false;
        }

        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeStackEffectValidation != null) && (libNtve_gf_UnitCanCreateEffectOnUnit(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeStackEffectValidation, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) == false)) {
            return false;
        }

    }

    lv_nearbyGlobes = UnitGroupSearch(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeType, lp_trigPlayer, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroHealthGlobeSearchRadius, UnitFilter(0, 0, 0, 0), 0);
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeSecondaryType != null)) {
        UnitGroupAddUnitGroup(lv_nearbyGlobes, UnitGroupSearch(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeSecondaryType, lp_trigPlayer, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroHealthGlobeSearchRadius, UnitFilter(0, 0, 0, 0), 0));
    }

    auto6E3B124A_g = lv_nearbyGlobes;
    auto6E3B124A_u = 1;
    for ( ; auto6E3B124A_u <= UnitGroupCount(auto6E3B124A_g, c_unitCountAll) ; auto6E3B124A_u += (lv_globe == UnitGroupUnit(auto6E3B124A_g, auto6E3B124A_u)) ) {
        lv_globe = UnitGroupUnit(auto6E3B124A_g, auto6E3B124A_u);
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeMustBeOwned == true) && (UnitGetOwner(lv_globe) != lp_trigPlayer)) {
            continue;
        }

        lv_areaAroundGlobe = RegionCircle(UnitGetPosition(lv_globe), 5.0);
        lv_enemies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, lv_areaAroundGlobe, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
        lv_enemyHeroes = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
        if ((libNtve_gf_PlayerIsEnemy(lp_trigPlayer, UnitGetOwner(lv_globe), libNtve_ge_PlayerRelation_Ally) == true) && (UnitGroupCount(lv_enemyHeroes, c_unitCountAlive) == 0)) {
            libAIAI_gf_HeroAIEnsureOrderMovePoint(lp_trigPlayer, UnitGetPosition(lv_globe));
            return true;
        }

    }
    return false;
}

bool libAIAI_gf_HeroAIPickUpHealthGlobeJungleLogic (int lp_trigPlayer) {
    unitgroup auto0DD62637_g;
    int auto0DD62637_u;

    // Variable Declarations
    unitgroup lv_nearbyGlobes;
    unit lv_globe;

    // Variable Initialization
    lv_nearbyGlobes = UnitGroupEmpty();

    // Implementation
    if (((libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == false) || ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) >= 100.0) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropEnergyPercent, c_unitPropCurrent) >= 100.0)))) {
        return false;
    }

    lv_nearbyGlobes = UnitGroupSearch("RegenGlobe", c_playerAny, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroHealthGlobeSearchRadius, UnitFilter(0, 0, 0, 0), 0);
    auto0DD62637_g = lv_nearbyGlobes;
    auto0DD62637_u = 1;
    for ( ; auto0DD62637_u <= UnitGroupCount(auto0DD62637_g, c_unitCountAll) ; auto0DD62637_u += (lv_globe == UnitGroupUnit(auto0DD62637_g, auto0DD62637_u)) ) {
        lv_globe = UnitGroupUnit(auto0DD62637_g, auto0DD62637_u);
        if ((libNtve_gf_PlayerIsEnemy(lp_trigPlayer, UnitGetOwner(lv_globe), libNtve_ge_PlayerRelation_Ally) == true)) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetHealthGlobe = lv_globe;
            libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSPickUpHealthGlobeJungle);
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetHealthGlobe)), c_orderQueueReplace);
            return true;
        }

    }
    return false;
}

bool libAIAI_gf_HeroAIPickUpBuffGlobeJungleLogic (int lp_trigPlayer) {
    unitgroup auto3E70C1F9_g;
    int auto3E70C1F9_u;

    // Variable Declarations
    unitgroup lv_nearbyGlobes;
    unit lv_globe;

    // Variable Initialization
    lv_nearbyGlobes = UnitGroupEmpty();

    // Implementation
    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeType == null) || (libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == false))) {
        return false;
    }

    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeGivesHealth == false) || (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) >= 100.0)) && ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeGivesEnergy == false) || (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropEnergyPercent, c_unitPropCurrent) >= 100.0))) {
        if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeStackBehavior == null) || (UnitBehaviorCount(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeStackBehavior) >= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeStackMax))) {
            return false;
        }

        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeStackEffectValidation != null) && (libNtve_gf_UnitCanCreateEffectOnUnit(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeStackEffectValidation, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) == false)) {
            return false;
        }

    }

    lv_nearbyGlobes = UnitGroupSearch(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeType, lp_trigPlayer, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroHealthGlobeSearchRadius, UnitFilter(0, 0, 0, 0), 0);
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeSecondaryType != null)) {
        UnitGroupAddUnitGroup(lv_nearbyGlobes, UnitGroupSearch(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeSecondaryType, lp_trigPlayer, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroHealthGlobeSearchRadius, UnitFilter(0, 0, 0, 0), 0));
    }

    auto3E70C1F9_g = lv_nearbyGlobes;
    auto3E70C1F9_u = 1;
    for ( ; auto3E70C1F9_u <= UnitGroupCount(auto3E70C1F9_g, c_unitCountAll) ; auto3E70C1F9_u += (lv_globe == UnitGroupUnit(auto3E70C1F9_g, auto3E70C1F9_u)) ) {
        lv_globe = UnitGroupUnit(auto3E70C1F9_g, auto3E70C1F9_u);
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_buffGlobeMustBeOwned == true) && (UnitGetOwner(lv_globe) != lp_trigPlayer)) {
            continue;
        }

        if ((libNtve_gf_PlayerIsEnemy(lp_trigPlayer, UnitGetOwner(lv_globe), libNtve_ge_PlayerRelation_Ally) == true)) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetHealthGlobe = lv_globe;
            libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSPickUpHealthGlobeJungle);
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetHealthGlobe)), c_orderQueueReplace);
            return true;
        }

    }
    return false;
}

bool libAIAI_gf_HeroAIDrinkMoonwellLogic (int lp_trigPlayer, region lp_nearbyRegion) {
    // Variable Declarations
    fixed lv_currentHealthPercent;
    int lv_desiredHealth;
    int lv_healingNeeded;
    unitgroup lv_nearbyMoonwells;

    // Variable Initialization
    lv_nearbyMoonwells = UnitGroupEmpty();

    // Implementation
    if ((libAIAI_gv_aIHeroUseMoonwells[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == false) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_canPortHome == true)) {
        return false;
    }

    lv_currentHealthPercent = UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent);
    if (((lv_currentHealthPercent >= (80.0 - libAIAI_gv_aIMoonwellHealPercent)) || ((lv_currentHealthPercent < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToSpawnHealth) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_canPortHome == true))) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifeExpectedPercent, c_unitPropCurrent) > 0.0)) {
        return false;
    }

    if ((UnitHasBehavior2(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, "HealingFountainCooldown") == true)) {
        return false;
    }

    lv_nearbyMoonwells = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("TownMoonwell", "TownMoonwellL2", "TownMoonwellL3", lp_trigPlayer, c_unitAllianceAlly, lp_nearbyRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    if ((UnitGroupCount(lv_nearbyMoonwells, c_unitCountAlive) > 0)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetMoonwell = UnitGroupClosestToPoint(lv_nearbyMoonwells, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit));
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSDrinkMoonwell);
        return true;
    }

    return false;
}

bool libAIAI_gf_HeroAIShouldWaitForMinions (int lp_trigPlayer) {
    // Variable Declarations
    point lv_contentionPoint;

    // Variable Initialization

    // Implementation
    if (((libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_gameState == libAIAI_ge_HeroAIGameState_Act3) || (libAIAI_gf_HeroAIEnemyTeamCursed(lp_trigPlayer) == true))) {
        return false;
    }

    lv_contentionPoint = libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_contentionPoint;
    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_contentionPoint) < 8.0) && (libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_numEnemyHeroesNearContentionPoint == 0) && (libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_numEnemyMinionsNearContentionPoint == 0) && (libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_numNonSiegeAllyMinionsNearContentionPoint == 0)) {
        return true;
    }

    return false;
}

void libAIAI_gf_HeroAIStartWaitForMinions (int lp_trigPlayer) {
    // Implementation
    libAIAI_gf_HeroAIChooseNewWaitingPosition(lp_trigPlayer);
    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSWaitForMinions);
    HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition), c_orderQueueReplace);
}

void libAIAI_gf_HeroAIChooseNewWaitingPosition (int lp_trigPlayer) {
    int autoAAE8F303_ae;
    int autoAAE8F303_ai;

    // Variable Declarations
    fixed lv_laneOffset;
    fixed lv_distanceBehindContentionPoint;
    point lv_point;
    int lv_tries;

    // Variable Initialization

    // Implementation
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextWaitingRepositionTime = (TimerGetElapsed(libGame_gv_gameTimer) + RandomFixed(1.0, 4.0));
    autoAAE8F303_ae = 10;
    autoAAE8F303_ai = 1;
    lv_tries = 1;
    for ( ; ( (autoAAE8F303_ai >= 0 && lv_tries <= autoAAE8F303_ae) || (autoAAE8F303_ai <= 0 && lv_tries >= autoAAE8F303_ae) ) ; lv_tries += autoAAE8F303_ai ) {
        lv_laneOffset = RandomFixed((-1.0 * libAIAI_gv_aIHeroMaximumLaneOffset), libAIAI_gv_aIHeroMaximumLaneOffset);
        lv_distanceBehindContentionPoint = RandomFixed(1.0, 4.0);
        lv_point = libAIAI_gf_HeroAIGetPositionBehindContentionPoint(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane, lv_distanceBehindContentionPoint, lv_laneOffset);
        if ((PointPathingPassable(lv_point) == true)) {
            break;
        }

    }
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition = lv_point;
    HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_point), c_orderQueueReplace);
}

bool libAIAI_gf_HeroAIHarassInJungleLogic (int lp_trigPlayer, bool lp_aggresivelyHarass) {
    unitgroup autoAEC59575_g;
    int autoAEC59575_u;

    // Variable Declarations
    fixed lv_weaponRange;
    region lv_closeToHero;
    unitgroup lv_enemies;
    unit lv_harassTarget;
    unitgroup lv_enemyHeroes;
    unit lv_hero;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_enemyHeroes = UnitGroupEmpty();

    // Implementation
    if (((libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_independence <= libAIAI_gv_aIHeroShouldntGoItAlone))) {
        return false;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextHarassInJungleCheckTime >= TimerGetElapsed(libGame_gv_gameTimer))) {
        return false;
    }

    lv_weaponRange = libAIAI_gf_AIGetActiveWeaponRange(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    lv_closeToHero = RegionCircle(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), (lv_weaponRange + 2.0));
    lv_enemies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, lv_closeToHero, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv_enemyHeroes = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
    autoAEC59575_g = lv_enemyHeroes;
    autoAEC59575_u = 1;
    for ( ; autoAEC59575_u <= UnitGroupCount(autoAEC59575_g, c_unitCountAll) ; autoAEC59575_u += (lv_hero == UnitGroupUnit(autoAEC59575_g, autoAEC59575_u)) ) {
        lv_hero = UnitGroupUnit(autoAEC59575_g, autoAEC59575_u);
        if ((libNtve_gf_UnitIsVisibleToPlayer(lv_hero, lp_trigPlayer) == false)) {
            UnitGroupRemove(lv_enemyHeroes, lv_hero);
        }

    }
    if ((UnitGroupCount(lv_enemyHeroes, c_unitCountAlive) == 0)) {
        return false;
    }

    if ((lp_aggresivelyHarass == true)) {
        lv_harassTarget = UnitGroupClosestToPoint(lv_enemyHeroes, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit));
    }
    else {
        if ((UnitGroupCount(lv_enemyHeroes, c_unitCountAlive) > 1)) {
            return false;
        }

        lv_harassTarget = UnitGroupUnit(lv_enemyHeroes, 1);
        if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= UnitGetPropertyFixed(UnitGroupUnit(lv_enemyHeroes, 1), c_unitPropLifePercent, c_unitPropCurrent))) {
            return false;
        }

    }
    libAIAI_gf_HeroAIStartHarassInJungle(lp_trigPlayer, lv_harassTarget);
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextHarassInJungleCheckTime = (TimerGetElapsed(libGame_gv_gameTimer) + RandomFixed((libAIAI_gv_aIHeroHarassInJungleTimeout - 1.0), (libAIAI_gv_aIHeroHarassInJungleTimeout + 1.0)));
    return true;
}

void libAIAI_gf_HeroAIStartHarassInJungle (int lp_trigPlayer, unit lp_target) {
    // Implementation
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_harassInJungleTimeout = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroHarassInJungleDuration);
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_harassInJungleTarget = lp_target;
    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSHarassInJungle);
    HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingUnit(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_harassInJungleTarget), c_orderQueueReplace);
}

bool libAIAI_gf_HeroAIPaceAroundLogic (int lp_trigPlayer) {
    // Implementation
    if ((libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)] == true) && (libAIAI_gf_HeroAITimeInCurrentState(lp_trigPlayer) > libAIAI_gv_aIHeroPaceAroundDelay) && (libAIAI_gf_HeroAIAttackingWeakHumanHero(lp_trigPlayer, 75.0) == true)) {
        libAIAI_gf_HeroAIStartPaceAround(lp_trigPlayer);
        return true;
    }

    return false;
}

void libAIAI_gf_HeroAIStartPaceAround (int lp_trigPlayer) {
    // Implementation
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_paceAroundStartPosition = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_paceAroundTimeout = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroPaceAroundDuration + RandomFixed(-0.5, 0.5));
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextPaceAroundRepositionTime = TimerGetElapsed(libGame_gv_gameTimer);
    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSPaceAround);
}

void libAIAI_gf_HeroAITeamLogic (int lp_faction) {
    // Variable Declarations
    bool lv_coreIsValid;

    // Variable Initialization

    // Implementation
    libAIAI_gf_HeroAIUpdateGameState(lp_faction);
    libAIAI_gf_HeroAIUpdateHomeEval(lp_faction);
    if ((((lp_faction == libGame_ge_Faction_Order) && (UnitIsValid(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core) == true)) || ((lp_faction == libGame_ge_Faction_Chaos) && (UnitIsValid(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core) == true)))) {
        lv_coreIsValid = true;
    }

    if ((libGame_gv_laneCount > 0)) {
        if ((lp_faction == libGame_ge_Faction_Order)) {
            libAIAI_gf_HeroAIEvalLanes(0);
        }
        else {
            libAIAI_gf_HeroAIEvalLanes(1);
        }
    }
    else {
        if ((lp_faction == libGame_ge_Faction_Order)) {
            libAIAI_gf_HeroAIUpdateHeroTracking(0);
        }
        else {
            libAIAI_gf_HeroAIUpdateHeroTracking(1);
        }
    }
    libAIAI_gf_HeroAILeashFollowers(lp_faction);
    libAIAI_gf_HeroAIChooseTalents(lp_faction);
    libAIAI_gf_HeroAISwapLanesLogic(lp_faction);
    libAIAI_gf_HeroAIAbathurLogic(lp_faction);
    if ((lv_coreIsValid == true)) {
        libAIAI_gf_HeroAIDefendCoreLogic(lp_faction);
        libAIAI_gf_HeroAIReturnToDefendCoreLogic(lp_faction);
    }

    libAIAI_gf_HeroAIFocusPingedHeroLogic(lp_faction);
    libAIAI_gf_HeroAIFocusWeakHeroLogic(lp_faction);
    libAIAI_gf_HeroAIInitiateTeamFightLogic(lp_faction);
    if ((lv_coreIsValid == true)) {
        libAIAI_gf_HeroAIFocusPingedCore(lp_faction);
        libAIAI_gf_HeroAIFocusWeakCore(lp_faction);
    }

    libAIAI_gf_HeroAIWaitInSpawnLogic(lp_faction);
    libAIAI_gf_HeroAITeamStrategyLogic(lp_faction);
    libAIAI_gf_HeroAIMinionCampLogic(lp_faction);
    libAIAI_gf_HeroAIJoinCampLogic(lp_faction);
    libAIAI_gf_HeroAICaptureWatchTowerLogic(lp_faction);
    if ((libAIAI_gv_heroAITeamMapLogicTrigger != null)) {
        libAIAI_gv_heroAITeamMapLogicFaction = lp_faction;
        TriggerExecute(libAIAI_gv_heroAITeamMapLogicTrigger, true, true);
    }

    libAIAI_gf_HeroAICleanUp(lp_faction);
}

void libAIAI_gf_HeroAITeamStrategyLogic (int lp_faction) {
    // Variable Declarations
    playergroup lv_team;
    int lv_teamIndex;
    int lv_playerOnTeam;
    int lv_playerIndex;
    int lv_currentTeamLane;
    bool lv_campFound;

    // Variable Initialization
    lv_team = PlayerGroupEmpty();

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_team = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
        lv_teamIndex = (0);
    }
    else {
        lv_team = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup;
        lv_teamIndex = (1);
    }
    if (((PlayerGroupCount(lv_team) == 0) || (libAIAI_gv_aIHeroPerformTeamStrategies[(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_difficulty)] == false) || (libAIAI_gf_HeroAITeamHasHumanPlayers(lp_faction) == true) || (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextTeamStrategyTime >= TimerGetElapsed(libGame_gv_gameTimer)) || (libAIAI_gf_HeroAIIsTeamBusy(lp_faction) == true))) {
        return ;
    }

    lv_playerOnTeam = PlayerGroupPlayer(lv_team, 1);
    if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_gameState == libAIAI_ge_HeroAIGameState_Act3)) {
        if ((libAIAI_gf_HeroAIIsSideOfMapSafe(libGame_gv_players[lv_playerOnTeam].lv_faction, 0.5) == true)) {
            lv_campFound = libAIAI_gf_HeroAITeamAttackCampLogic(lp_faction, 500.0);
            if ((lv_campFound == true)) {
                libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextTeamStrategyTime = (TimerGetElapsed(libGame_gv_gameTimer) + RandomFixed((libAIAI_gv_aIHeroTeamStrategyDelay - 5.0), (libAIAI_gv_aIHeroTeamStrategyDelay + 5.0)));
                return ;
            }

        }

    }

    libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextTeamStrategyTime = (TimerGetElapsed(libGame_gv_gameTimer) + RandomFixed((libAIAI_gv_aIHeroTeamStrategyConsiderFrequency - 3.0), (libAIAI_gv_aIHeroTeamStrategyConsiderFrequency + 3.0)));
}

void libAIAI_gf_HeroAICleanUp (int lp_faction) {
    int auto9768679F_ae;
    int auto9768679F_ai;
    int autoA6AC63CC_ae;
    int autoA6AC63CC_ai;
    int auto65F78E71_ae;
    int auto65F78E71_ai;

    // Variable Declarations
    int lv_teamIndex;
    int lv_pingIndex;
    int lv_avoidAreaIndex;
    int lv_secondaryAvoidAreaIndex;

    // Variable Initialization

    // Implementation
    HeroAICleanupLaneWaves(lp_faction);
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    auto9768679F_ae = libAIAI_gv_heroAITeamCampData[lv_teamIndex].lv_numberofCampPings;
    auto9768679F_ai = 1;
    lv_pingIndex = 1;
    for ( ; ( (auto9768679F_ai >= 0 && lv_pingIndex <= auto9768679F_ae) || (auto9768679F_ai <= 0 && lv_pingIndex >= auto9768679F_ae) ) ; lv_pingIndex += auto9768679F_ai ) {
        if (((libAIAI_gv_heroAITeamCampData[lv_teamIndex].lv_campPings[lv_pingIndex].lv_pingTime + libAIAI_gv_aIHeroCampPingDuration) < TimerGetElapsed(libGame_gv_gameTimer))) {
            libAIAI_gv_heroAITeamCampData[lv_teamIndex].lv_numberofCampPings = (lv_pingIndex - 1);
            break;
        }

    }
    autoA6AC63CC_ae = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_numberofAvoidAreas;
    autoA6AC63CC_ai = 1;
    lv_avoidAreaIndex = 1;
    for ( ; ( (autoA6AC63CC_ai >= 0 && lv_avoidAreaIndex <= autoA6AC63CC_ae) || (autoA6AC63CC_ai <= 0 && lv_avoidAreaIndex >= autoA6AC63CC_ae) ) ; lv_avoidAreaIndex += autoA6AC63CC_ai ) {
        if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidAreas[lv_avoidAreaIndex].lv_expireTime < TimerGetElapsed(libGame_gv_gameTimer))) {
            auto65F78E71_ae = (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_numberofAvoidAreas - 1);
            auto65F78E71_ai = 1;
            lv_secondaryAvoidAreaIndex = lv_avoidAreaIndex;
            for ( ; ( (auto65F78E71_ai >= 0 && lv_secondaryAvoidAreaIndex <= auto65F78E71_ae) || (auto65F78E71_ai <= 0 && lv_secondaryAvoidAreaIndex >= auto65F78E71_ae) ) ; lv_secondaryAvoidAreaIndex += auto65F78E71_ai ) {
                libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidAreas[lv_secondaryAvoidAreaIndex].lv_unit = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidAreas[(lv_secondaryAvoidAreaIndex + 1)].lv_unit;
                libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidAreas[lv_secondaryAvoidAreaIndex].lv_position = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidAreas[(lv_secondaryAvoidAreaIndex + 1)].lv_position;
                libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidAreas[lv_secondaryAvoidAreaIndex].lv_radius = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidAreas[(lv_secondaryAvoidAreaIndex + 1)].lv_radius;
                libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidAreas[lv_secondaryAvoidAreaIndex].lv_expireTime = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidAreas[(lv_secondaryAvoidAreaIndex + 1)].lv_expireTime;
            }
            libAIAI_gv_heroAITeamData[lv_teamIndex].lv_numberofAvoidAreas -= 1;
        }

    }
}

fixed libAIAI_gf_HeroAIDangerRatioEval (int lp_playerFaction, point lp_point, fixed lp_radius) {
    playergroup autoB1A163A6_g;
    int autoB1A163A6_p;
    playergroup auto3E4A77C3_g;
    int auto3E4A77C3_p;
    playergroup autoE304F581_g;
    int autoE304F581_p;

    // Variable Declarations
    fixed lv_tempHumanEval;
    region lv_evalRegion;
    fixed lv_enemyEval;
    fixed lv_allyEval;
    int lv_playerIndex;
    int lv_allyTeamIndex;
    int lv_enemyTeamIndex;

    // Variable Initialization

    // Implementation
    lv_evalRegion = RegionCircle(lp_point, lp_radius);
    lv_allyTeamIndex = libAIAI_gf_HeroAITeamIndexOfFaction(lp_playerFaction);
    lv_enemyTeamIndex = libAIAI_gf_HeroAITeamIndexOfEnemyFaction(lp_playerFaction);
    autoB1A163A6_g = libAIAI_gv_heroAITeamPlayerData[lv_enemyTeamIndex].lv_players; 
    autoB1A163A6_p = 1;
    for ( ; autoB1A163A6_p <= PlayerGroupCount(autoB1A163A6_g) ; autoB1A163A6_p += (lv_playerIndex == PlayerGroupPlayer(autoB1A163A6_g, autoB1A163A6_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoB1A163A6_g, autoB1A163A6_p);
        if ((UnitIsValid(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit) == true) && (libGame_gv_players[lv_playerIndex].lv_isDead == false) && (UnitFilterMatch(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, lv_playerIndex, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)))) == true) && ((TimerGetElapsed(libGame_gv_gameTimer) - libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_heroTrackingData[lv_playerIndex].lv_lastSeenTime) <= 5.0) && (RegionContainsPoint(lv_evalRegion, libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_heroTrackingData[lv_playerIndex].lv_lastSeenLocation) == true)) {
            lv_enemyEval += libAIAI_gf_HeroAIHeroEval(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit);
        }

    }
    auto3E4A77C3_g = libAIAI_gv_heroAITeamPlayerData[lv_allyTeamIndex].lv_aIPlayers; 
    auto3E4A77C3_p = 1;
    for ( ; auto3E4A77C3_p <= PlayerGroupCount(auto3E4A77C3_g) ; auto3E4A77C3_p += (lv_playerIndex == PlayerGroupPlayer(auto3E4A77C3_g, auto3E4A77C3_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto3E4A77C3_g, auto3E4A77C3_p);
        if ((libGame_gv_players[lv_playerIndex].lv_isDead == false) && (UnitFilterMatch(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, lv_playerIndex, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)))) == true) && (libNtve_gf_UnitInRegion(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, lv_evalRegion) == true)) {
            lv_allyEval += libAIAI_gf_HeroAIHeroEval(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit);
        }

    }
    autoE304F581_g = libAIAI_gv_heroAITeamPlayerData[lv_allyTeamIndex].lv_humanPlayers; 
    autoE304F581_p = 1;
    for ( ; autoE304F581_p <= PlayerGroupCount(autoE304F581_g) ; autoE304F581_p += (lv_playerIndex == PlayerGroupPlayer(autoE304F581_g, autoE304F581_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoE304F581_g, autoE304F581_p);
        if ((UnitIsValid(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit) == true) && (libGame_gv_players[lv_playerIndex].lv_isDead == false) && (UnitFilterMatch(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, lv_playerIndex, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)))) == true) && (libNtve_gf_UnitInRegion(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, lv_evalRegion) == true)) {
            lv_tempHumanEval = libAIAI_gf_HeroAIHeroEval(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit);
            lv_tempHumanEval *= 10.0;
            lv_allyEval += lv_tempHumanEval;
        }

    }
    if ((lv_enemyEval == 0.0)) {
        return libAIAI_gv_aIHeroNoEnemyDangerRatio;
    }
    else {
        return (lv_allyEval / lv_enemyEval);
    }
}

void libAIAI_gf_HeroAICalcCurrentLaneInfo (int lp_player) {
    // Variable Declarations
    point lv_closestPoint;
    int lv_closestIndex;
    int lv_secondaryIndex;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_player].lv_currentLane <= 0)) {
        return ;
    }

    libGame_gf_CalculateClosestLaneData(UnitGetPosition(libAIAI_gv_aIHeroes[lp_player].lv_currentHeroUnit));
    lv_closestIndex = libGame_gv_closestLaneData.lv_laneData[libAIAI_gv_aIHeroes[lp_player].lv_currentLane].lv_closestIndex;
    lv_secondaryIndex = libGame_gv_closestLaneData.lv_laneData[libAIAI_gv_aIHeroes[lp_player].lv_currentLane].lv_secondaryIndex;
    lv_closestPoint = libGame_gv_closestLaneData.lv_laneData[libAIAI_gv_aIHeroes[lp_player].lv_currentLane].lv_closestPoint;
    libAIAI_gv_aIHeroes[lp_player].lv_heroClosestLanePoint = lv_closestPoint;
    libAIAI_gv_aIHeroes[lp_player].lv_heroLaneDirection = AIGetDirection(lv_closestPoint, libAIAI_gv_aIHeroes[lp_player].lv_curWaypointPoint);
    libAIAI_gv_aIHeroes[lp_player].lv_heroLanePosition = AILaneWaypointConvertPointToWaydist(libAIAI_gv_aIHeroes[lp_player].lv_currentLane, lv_closestIndex, lv_secondaryIndex, lv_closestPoint);
}

void libAIAI_gf_HeroAIEval (int lp_player) {
    // Variable Declarations
    region lv_enemyRegion;
    region lv_friendlyRegion;
    point lv_curDir;
    point lv_curPos;
    fixed lv_extendEnemyRegion;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_player].lv_nextEvalUpdateTime > TimerGetElapsed(libGame_gv_gameTimer))) {
        return ;
    }

    libAIAI_gf_HeroAIClearEval(lp_player);
    libAIAI_gv_aIHeroes[lp_player].lv_nextEvalUpdateTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroNearbyEvalFrequency);
    lv_friendlyRegion = RegionEmpty();
    lv_enemyRegion = RegionEmpty();
    if (((libAIAI_gv_aIHeroes[lp_player].lv_currentLane <= 0) || (libAIAI_gf_HeroAIIsAIEnabledForPlayer(lp_player) == false))) {
        if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_player].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroes[lp_player].lv_endOffensiveHealth)) {
            lv_extendEnemyRegion = 4.0;
        }

        RegionAddCircle(lv_enemyRegion, true, UnitGetPosition(libAIAI_gv_aIHeroes[lp_player].lv_currentHeroUnit), (8.0 + lv_extendEnemyRegion));
        RegionAddCircle(lv_friendlyRegion, true, UnitGetPosition(libAIAI_gv_aIHeroes[lp_player].lv_currentHeroUnit), 8.0);
    }
    else {
        libAIAI_gf_HeroAICalcCurrentLaneInfo(lp_player);
        if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_player].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroes[lp_player].lv_endOffensiveHealth)) {
            lv_extendEnemyRegion = 3.0;
        }

        lv_curDir = libAIAI_gv_aIHeroes[lp_player].lv_heroLaneDirection;
        lv_curDir = Point((PointGetX(lv_curDir) * (8.0 + lv_extendEnemyRegion)), (PointGetY(lv_curDir) * (8.0 + lv_extendEnemyRegion)));
        lv_curPos = libAIAI_gv_aIHeroes[lp_player].lv_heroClosestLanePoint;
        RegionAddCircle(lv_enemyRegion, true, lv_curPos, (10.0 + lv_extendEnemyRegion));
        lv_curPos = Point((PointGetX(lv_curPos) + PointGetX(lv_curDir)), (PointGetY(lv_curPos) + PointGetY(lv_curDir)));
        RegionAddCircle(lv_enemyRegion, true, lv_curPos, (10.0 + lv_extendEnemyRegion));
        lv_curPos = libAIAI_gv_aIHeroes[lp_player].lv_heroClosestLanePoint;
        lv_curPos = Point((PointGetX(lv_curPos) - PointGetX(lv_curDir)), (PointGetY(lv_curPos) - PointGetY(lv_curDir)));
        RegionAddCircle(lv_enemyRegion, true, lv_curPos, (10.0 + lv_extendEnemyRegion));
        if ((libAIAI_gf_HeroAIIsInAdvancingState(lp_player) == true)) {
            lv_curDir = libAIAI_gv_aIHeroes[lp_player].lv_heroLaneDirection;
            lv_curDir = Point((PointGetX(lv_curDir) * 6.0), (PointGetY(lv_curDir) * 6.0));
            lv_curPos = libAIAI_gv_aIHeroes[lp_player].lv_heroClosestLanePoint;
            lv_curPos = Point((PointGetX(lv_curPos) + PointGetX(lv_curDir)), (PointGetY(lv_curPos) + PointGetY(lv_curDir)));
            RegionAddCircle(lv_friendlyRegion, true, lv_curPos, 10.0);
        }
        else {
            lv_curDir = libAIAI_gv_aIHeroes[lp_player].lv_heroLaneDirection;
            lv_curDir = Point((PointGetX(lv_curDir) * -3.5), (PointGetY(lv_curDir) * -3.5));
            lv_curPos = libAIAI_gv_aIHeroes[lp_player].lv_heroClosestLanePoint;
            lv_curPos = Point((PointGetX(lv_curPos) + PointGetX(lv_curDir)), (PointGetY(lv_curPos) + PointGetY(lv_curDir)));
            RegionAddCircle(lv_friendlyRegion, true, lv_curPos, 6.5);
        }
    }
    libAIAI_gf_HeroAINearbyEval(lp_player, lv_enemyRegion, lv_friendlyRegion);
}

void libAIAI_gf_HeroAINearbyEval (int lp_trigPlayer, region lp_enemyRegion, region lp_friendlyRegion) {
    playergroup autoB9C84F4C_g;
    int autoB9C84F4C_p;
    unitgroup autoBDEBA7C0_g;
    int autoBDEBA7C0_u;
    unitgroup autoAE60BA4F_g;
    int autoAE60BA4F_u;
    unitgroup auto3EB2FA8D_g;
    int auto3EB2FA8D_u;
    unitgroup auto7C39C96F_g;
    int auto7C39C96F_u;
    unitgroup auto4632FFF9_g;
    int auto4632FFF9_u;

    // Variable Declarations
    bool[libCore_gv_bALMaxPlayers + 1] lv_playersSeen;
    unit lv_curUnit;
    int lv_curUnitOwner;
    fixed lv_curEval;
    unitgroup lv_enemies;
    unitgroup lv_friendlies;
    unitgroup lv_heroes;
    unitgroup lv_minions;
    unitgroup lv_summons;
    unitgroup lv_minionsAndSummons;
    unitgroup lv_towers;
    int lv_playerIndex;
    bool lv_seenRecently;
    bool lv_isNearby;
    bool lv_isVisible;
    int lv_teamIndex;
    unit lv_underworldBoss;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_friendlies = UnitGroupEmpty();
    lv_heroes = UnitGroupEmpty();
    lv_minions = UnitGroupEmpty();
    lv_summons = UnitGroupEmpty();
    lv_minionsAndSummons = UnitGroupEmpty();
    lv_towers = UnitGroupEmpty();

    // Implementation
    lv_curEval = libAIAI_gf_HeroAIHeroEval(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_selfEval = lv_curEval;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalAllyEval = lv_curEval;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyHeroEval = lv_curEval;
    UnitGroupAdd(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allies, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    UnitGroupAdd(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyHeroes, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    autoB9C84F4C_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAIGetEnemyTeamIndex(lp_trigPlayer)].lv_players; 
    autoB9C84F4C_p = 1;
    for ( ; autoB9C84F4C_p <= PlayerGroupCount(autoB9C84F4C_g) ; autoB9C84F4C_p += (lv_playerIndex == PlayerGroupPlayer(autoB9C84F4C_g, autoB9C84F4C_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoB9C84F4C_g, autoB9C84F4C_p);
        if ((TimerGetRemaining(libGame_gv_players[lv_playerIndex].lv_respawnTimer) <= 0.0) && (UnitFilterMatch(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, lp_trigPlayer, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)))) == true)) {
            lv_seenRecently = ((libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_heroTrackingData[lv_playerIndex].lv_lastSeenTime + libAIAI_gv_aIHeroMissingDelay) >= TimerGetElapsed(libGame_gv_gameTimer));
            lv_isNearby = RegionContainsPoint(lp_enemyRegion, libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_heroTrackingData[lv_playerIndex].lv_lastSeenLocation);
            if ((lv_seenRecently == true)) {
                lv_isVisible = libNtve_gf_UnitIsVisibleToPlayer(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, lp_trigPlayer);
                if ((lv_isVisible == true)) {
                    UnitGroupAdd(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_visibleEnemyHeroes, libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit);
                }

                if ((lv_isNearby == true)) {
                    if ((lv_isVisible == true)) {
                        lv_curEval = libAIAI_gf_HeroAIHeroEval(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit);
                        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalEnemyEval += lv_curEval;
                        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval += lv_curEval;
                        UnitGroupAdd(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemies, libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit);
                        UnitGroupAdd(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroes, libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit);
                    }
                    else {
                        lv_curEval = (libAIAI_gv_aIHeroLevelEvalValue * UnitLevel(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit));
                        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalEnemyEval += lv_curEval;
                        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval += lv_curEval;
                    }
                }

            }
            else {
                if ((libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (libCore_gf_TestLocationClosertoFactionSide(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libGame_gv_players[lp_trigPlayer].lv_faction, 1.2) == false)) {
                    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalEnemyEval += (libAIAI_gv_aIMissingHeroLevelEvalValue * UnitLevel(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit));
                }

            }
        }

    }
    lv_enemies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, lp_enemyRegion, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
    lv_minions = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterBiological), 0, 0, 0), 0);
    lv_summons = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0), 0);
    lv_minionsAndSummons = UnitGroupEmpty();
    UnitGroupAddUnitGroup(lv_minionsAndSummons, lv_minions);
    UnitGroupAddUnitGroup(lv_minionsAndSummons, lv_summons);
    autoBDEBA7C0_g = lv_minionsAndSummons;
    autoBDEBA7C0_u = 1;
    for ( ; autoBDEBA7C0_u <= UnitGroupCount(autoBDEBA7C0_g, c_unitCountAll) ; autoBDEBA7C0_u += (lv_curUnit == UnitGroupUnit(autoBDEBA7C0_g, autoBDEBA7C0_u)) ) {
        lv_curUnit = UnitGroupUnit(autoBDEBA7C0_g, autoBDEBA7C0_u);
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalEnemyEval += (libAIAI_gv_aIHeroEnemyMinionSummonEvalValue * (UnitGetPropertyFixed(lv_curUnit, c_unitPropLifePercent, c_unitPropCurrent) / 100.0));
        UnitGroupAdd(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemies, lv_curUnit);
        UnitGroupAdd(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyMinionsSummons, lv_curUnit);
    }
    lv_towers = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, 0, 0), 0);
    autoAE60BA4F_g = lv_towers;
    autoAE60BA4F_u = 1;
    for ( ; autoAE60BA4F_u <= UnitGroupCount(autoAE60BA4F_g, c_unitCountAll) ; autoAE60BA4F_u += (lv_curUnit == UnitGroupUnit(autoAE60BA4F_g, autoAE60BA4F_u)) ) {
        lv_curUnit = UnitGroupUnit(autoAE60BA4F_g, autoAE60BA4F_u);
        if ((libAIAI_gf_HeroAIIsTowerAThreat(lv_curUnit) == true)) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalEnemyEval += (libAIAI_gv_aIHeroEnemyTowerEvalValue * (UnitGetPropertyFixed(lv_curUnit, c_unitPropLifePercent, c_unitPropCurrent) / 100.0));
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyTowerEval += (libAIAI_gv_aIHeroEnemyTowerEvalValue * (UnitGetPropertyFixed(lv_curUnit, c_unitPropLifePercent, c_unitPropCurrent) / 100.0));
        }

        UnitGroupAdd(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemies, lv_curUnit);
        UnitGroupAdd(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyTowers, lv_curUnit);
    }
    lv_friendlies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceAllyExcludeSelf, lp_friendlyRegion, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
    lv_heroes = UnitGroupFilter(null, c_playerAny, lv_friendlies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
    auto3EB2FA8D_g = lv_heroes;
    auto3EB2FA8D_u = 1;
    for ( ; auto3EB2FA8D_u <= UnitGroupCount(auto3EB2FA8D_g, c_unitCountAll) ; auto3EB2FA8D_u += (lv_curUnit == UnitGroupUnit(auto3EB2FA8D_g, auto3EB2FA8D_u)) ) {
        lv_curUnit = UnitGroupUnit(auto3EB2FA8D_g, auto3EB2FA8D_u);
        lv_curUnitOwner = UnitGetOwner(lv_curUnit);
        if ((lv_curUnitOwner > 0) && (lv_curUnitOwner <= libCore_gv_bALMaxPlayers) && (lv_playersSeen[lv_curUnitOwner] == false)) {
            lv_playersSeen[lv_curUnitOwner] = true;
            lv_curEval = libAIAI_gf_HeroAIHeroEval(libAIAI_gv_aIHeroes[lv_curUnitOwner].lv_currentHeroUnit);
            if ((libAIAI_gf_HeroAIIsPlayerActive(lv_curUnitOwner, 1) == true)) {
                lv_curEval *= 10.0;
            }

            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalAllyEval += lv_curEval;
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyHeroEval += lv_curEval;
            UnitGroupAdd(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allies, lv_curUnit);
            UnitGroupAdd(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyHeroes, lv_curUnit);
        }

    }
    lv_minions = UnitGroupFilter(null, c_playerAny, lv_friendlies, UnitFilter((1 << c_targetFilterBiological), 0, 0, 0), 0);
    lv_summons = UnitGroupFilter(null, c_playerAny, lv_friendlies, UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0), 0);
    lv_minionsAndSummons = UnitGroupEmpty();
    UnitGroupAddUnitGroup(lv_minionsAndSummons, lv_minions);
    UnitGroupAddUnitGroup(lv_minionsAndSummons, lv_summons);
    auto7C39C96F_g = lv_minionsAndSummons;
    auto7C39C96F_u = 1;
    for ( ; auto7C39C96F_u <= UnitGroupCount(auto7C39C96F_g, c_unitCountAll) ; auto7C39C96F_u += (lv_curUnit == UnitGroupUnit(auto7C39C96F_g, auto7C39C96F_u)) ) {
        lv_curUnit = UnitGroupUnit(auto7C39C96F_g, auto7C39C96F_u);
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalAllyEval += (libAIAI_gv_aIHeroAllyMinionSummonEvalValue * (UnitGetPropertyFixed(lv_curUnit, c_unitPropLifePercent, c_unitPropCurrent) / 100.0));
        UnitGroupAdd(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allies, lv_curUnit);
        UnitGroupAdd(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyMinionsSummons, lv_curUnit);
    }
    lv_towers = UnitGroupFilter(null, c_playerAny, lv_friendlies, UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, 0, 0), 0);
    auto4632FFF9_g = lv_towers;
    auto4632FFF9_u = 1;
    for ( ; auto4632FFF9_u <= UnitGroupCount(auto4632FFF9_g, c_unitCountAll) ; auto4632FFF9_u += (lv_curUnit == UnitGroupUnit(auto4632FFF9_g, auto4632FFF9_u)) ) {
        lv_curUnit = UnitGroupUnit(auto4632FFF9_g, auto4632FFF9_u);
        if ((libAIAI_gf_HeroAIIsTowerAThreat(lv_curUnit) == true)) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalAllyEval += (libAIAI_gv_aIHeroAllyTowerEvalValue * (UnitGetPropertyFixed(lv_curUnit, c_unitPropLifePercent, c_unitPropCurrent) / 100.0));
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyTowerEval += (libAIAI_gv_aIHeroAllyTowerEvalValue * (UnitGetPropertyFixed(lv_curUnit, c_unitPropLifePercent, c_unitPropCurrent) / 100.0));
        }

        UnitGroupAdd(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allies, lv_curUnit);
        UnitGroupAdd(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyTowers, lv_curUnit);
    }
    if ((UnitIsValid(libAIAI_gv_heroAIDragonShireDragon) == true)) {
        if ((libNtve_gf_PlayerIsEnemy(lp_trigPlayer, UnitGetOwner(libAIAI_gv_heroAIDragonShireDragon), libNtve_ge_PlayerRelation_Ally) == true)) {
            if ((libNtve_gf_UnitInRegion(libAIAI_gv_heroAIDragonShireDragon, lp_friendlyRegion) == true)) {
                libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalAllyEval += libAIAI_gf_HeroAIHeroEval(libAIAI_gv_heroAIDragonShireDragon);
            }

        }
        else {
            if ((libNtve_gf_UnitInRegion(libAIAI_gv_heroAIDragonShireDragon, lp_enemyRegion) == true)) {
                libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalEnemyEval += libAIAI_gf_HeroAIHeroEval(libAIAI_gv_heroAIDragonShireDragon);
            }

        }
    }

    lv_teamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer);
    if ((libAIAI_gv_heroAIUnderworldBossStatus[lv_teamIndex].lv_state == libAIAI_ge_HeroAIUnderworldBossState_Spawned)) {
        lv_underworldBoss = libAIAI_gv_heroAIUnderworldBossStatus[lv_teamIndex].lv_underworldBossUnit;
        if ((libNtve_gf_UnitInRegion(lv_underworldBoss, lp_friendlyRegion) == true)) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalAllyEval += (libAIAI_gv_aIHeroAllyUnderworldBossEvalValue * (UnitGetPropertyFixed(lv_underworldBoss, c_unitPropLifePercent, c_unitPropCurrent) / 100.0));
        }

    }

    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyTowerEval *= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyEvalMultiplier;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval *= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyEvalMultiplier;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalEnemyEval *= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyEvalMultiplier;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyTowerEval *= ((100.0 - libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)]) / 100.0);
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval *= ((100.0 - libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)]) / 100.0);
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalEnemyEval *= ((100.0 - libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)]) / 100.0);
}

void libAIAI_gf_HeroAIClearEval (int lp_player) {
    // Implementation
    libAIAI_gv_aIHeroes[lp_player].lv_nextEvalUpdateTime = 0.0;
    libAIAI_gv_aIHeroes[lp_player].lv_totalEnemyEval = 0.0;
    libAIAI_gv_aIHeroes[lp_player].lv_enemyHeroEval = 0.0;
    libAIAI_gv_aIHeroes[lp_player].lv_enemyTowerEval = 0.0;
    UnitGroupClear(libAIAI_gv_aIHeroes[lp_player].lv_enemies);
    UnitGroupClear(libAIAI_gv_aIHeroes[lp_player].lv_enemyHeroes);
    UnitGroupClear(libAIAI_gv_aIHeroes[lp_player].lv_enemyMinionsSummons);
    UnitGroupClear(libAIAI_gv_aIHeroes[lp_player].lv_enemyTowers);
    libAIAI_gv_aIHeroes[lp_player].lv_totalAllyEval = 0.0;
    libAIAI_gv_aIHeroes[lp_player].lv_allyHeroEval = 0.0;
    libAIAI_gv_aIHeroes[lp_player].lv_allyTowerEval = 0.0;
    UnitGroupClear(libAIAI_gv_aIHeroes[lp_player].lv_allies);
    UnitGroupClear(libAIAI_gv_aIHeroes[lp_player].lv_allyHeroes);
    UnitGroupClear(libAIAI_gv_aIHeroes[lp_player].lv_allyMinionsSummons);
    UnitGroupClear(libAIAI_gv_aIHeroes[lp_player].lv_allyTowers);
    libAIAI_gv_aIHeroes[lp_player].lv_selfEval = 0.0;
    UnitGroupClear(libAIAI_gv_aIHeroes[lp_player].lv_visibleEnemyHeroes);
}

fixed libAIAI_gf_HeroAIEnemyEvalInCircle (int lp_trigPlayer, point lp_position, fixed lp_radius, bool lp_includeHeroes, bool lp_includeMinionsSummons, bool lp_includeTowers) {
    // Implementation
    return libAIAI_gf_HeroAIEnemyEvalInRegion(lp_trigPlayer, RegionCircle(lp_position, lp_radius), lp_includeHeroes, lp_includeMinionsSummons, lp_includeTowers);
}

fixed libAIAI_gf_HeroAIEnemyEvalInRegion (int lp_trigPlayer, region lp_region, bool lp_includeHeroes, bool lp_includeMinionsSummons, bool lp_includeTowers) {
    unitgroup auto68C7C24F_g;
    int auto68C7C24F_u;
    playergroup auto671747B7_g;
    int auto671747B7_p;
    unitgroup auto6A52C54F_g;
    int auto6A52C54F_u;
    unitgroup auto9929AB0C_g;
    int auto9929AB0C_u;

    // Variable Declarations
    int lv_enemyPlayer;
    bool[libCore_gv_bALMaxPlayers + 1] lv_playersSeen;
    fixed lv_totalEval;
    unit lv_enemy;
    unitgroup lv_enemies;
    unitgroup lv_heroes;
    unitgroup lv_minions;
    unitgroup lv_summons;
    unitgroup lv_minionsAndSummons;
    unitgroup lv_towers;
    int lv_allyTeamIndex;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_heroes = UnitGroupEmpty();
    lv_minions = UnitGroupEmpty();
    lv_summons = UnitGroupEmpty();
    lv_minionsAndSummons = UnitGroupEmpty();
    lv_towers = UnitGroupEmpty();

    // Implementation
    lv_allyTeamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer);
    lv_enemies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, lp_region, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
    if ((lp_includeHeroes == true)) {
        lv_heroes = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
        auto68C7C24F_g = lv_heroes;
        auto68C7C24F_u = 1;
        for ( ; auto68C7C24F_u <= UnitGroupCount(auto68C7C24F_g, c_unitCountAll) ; auto68C7C24F_u += (lv_enemy == UnitGroupUnit(auto68C7C24F_g, auto68C7C24F_u)) ) {
            lv_enemy = UnitGroupUnit(auto68C7C24F_g, auto68C7C24F_u);
            lv_enemyPlayer = UnitGetOwner(lv_enemy);
            if ((lv_enemyPlayer > 0) && (lv_enemyPlayer <= libCore_gv_bALMaxPlayers) && (lv_playersSeen[lv_enemyPlayer] == false) && (libGame_gv_players[lv_enemyPlayer].lv_isDead == false) && (libNtve_gf_UnitIsVisibleToPlayer(lv_enemy, lp_trigPlayer) == true)) {
                lv_playersSeen[lv_enemyPlayer] = true;
                lv_totalEval += libAIAI_gf_HeroAIHeroEval(libAIAI_gv_aIHeroes[lv_enemyPlayer].lv_currentHeroUnit);
            }

        }
        auto671747B7_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAIGetEnemyTeamIndex(lp_trigPlayer)].lv_players; 
        auto671747B7_p = 1;
        for ( ; auto671747B7_p <= PlayerGroupCount(auto671747B7_g) ; auto671747B7_p += (lv_enemyPlayer == PlayerGroupPlayer(auto671747B7_g, auto671747B7_p)) ) {
            lv_enemyPlayer = PlayerGroupPlayer(auto671747B7_g, auto671747B7_p);
            if ((lv_playersSeen[lv_enemyPlayer] == false) && (libGame_gv_players[lv_enemyPlayer].lv_isDead == false) && ((TimerGetElapsed(libGame_gv_gameTimer) - libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_heroTrackingData[lv_enemyPlayer].lv_lastSeenTime) <= libAIAI_gv_aIHeroHiddenEnemyConsiderTime) && (RegionContainsPoint(lp_region, libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_heroTrackingData[lv_enemyPlayer].lv_lastSeenLocation) == true)) {
                lv_playersSeen[lv_enemyPlayer] = true;
                lv_totalEval += libAIAI_gf_HeroAIHeroEval(libAIAI_gv_aIHeroes[lv_enemyPlayer].lv_currentHeroUnit);
            }

        }
    }

    if ((lp_includeMinionsSummons == true)) {
        lv_minions = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterBiological), 0, 0, 0), 0);
        lv_summons = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0), 0);
        lv_minionsAndSummons = UnitGroupEmpty();
        UnitGroupAddUnitGroup(lv_minionsAndSummons, lv_minions);
        UnitGroupAddUnitGroup(lv_minionsAndSummons, lv_summons);
        auto6A52C54F_g = lv_minionsAndSummons;
        auto6A52C54F_u = 1;
        for ( ; auto6A52C54F_u <= UnitGroupCount(auto6A52C54F_g, c_unitCountAll) ; auto6A52C54F_u += (lv_enemy == UnitGroupUnit(auto6A52C54F_g, auto6A52C54F_u)) ) {
            lv_enemy = UnitGroupUnit(auto6A52C54F_g, auto6A52C54F_u);
            lv_totalEval += (libAIAI_gv_aIHeroEnemyMinionSummonEvalValue * (UnitGetPropertyFixed(lv_enemy, c_unitPropLifePercent, c_unitPropCurrent) / 100.0));
        }
    }

    if ((lp_includeTowers == true)) {
        lv_towers = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, 0, 0), 0);
        auto9929AB0C_g = lv_towers;
        auto9929AB0C_u = 1;
        for ( ; auto9929AB0C_u <= UnitGroupCount(auto9929AB0C_g, c_unitCountAll) ; auto9929AB0C_u += (lv_enemy == UnitGroupUnit(auto9929AB0C_g, auto9929AB0C_u)) ) {
            lv_enemy = UnitGroupUnit(auto9929AB0C_g, auto9929AB0C_u);
            lv_totalEval += (libAIAI_gv_aIHeroEnemyTowerEvalValue * (UnitGetPropertyFixed(lv_enemy, c_unitPropLifePercent, c_unitPropCurrent) / 100.0));
        }
    }

    lv_totalEval *= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyEvalMultiplier;
    lv_totalEval *= ((100.0 - libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)]) / 100.0);
    return lv_totalEval;
}

unitgroup libAIAI_gf_HeroAIEnemyHeroesInCircle (int lp_trigPlayer, point lp_position, fixed lp_radius) {
    // Implementation
    return libAIAI_gf_HeroAIEnemyHeroesInRegion(lp_trigPlayer, RegionCircle(lp_position, lp_radius));
}

unitgroup libAIAI_gf_HeroAIEnemyHeroesInRegion (int lp_trigPlayer, region lp_region) {
    unitgroup auto449871B5_g;
    int auto449871B5_u;
    playergroup auto71D19B90_g;
    int auto71D19B90_p;

    // Variable Declarations
    int lv_enemyPlayer;
    bool[libCore_gv_bALMaxPlayers + 1] lv_playersSeen;
    unit lv_enemy;
    unitgroup lv_enemies;
    unitgroup lv_heroes;
    int lv_allyTeamIndex;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_heroes = UnitGroupEmpty();

    // Implementation
    lv_allyTeamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer);
    lv_enemies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, lp_region, libCore_gv_filtersHeroicandnotBenign, 0);
    auto449871B5_g = lv_heroes;
    auto449871B5_u = 1;
    for ( ; auto449871B5_u <= UnitGroupCount(auto449871B5_g, c_unitCountAll) ; auto449871B5_u += (lv_enemy == UnitGroupUnit(auto449871B5_g, auto449871B5_u)) ) {
        lv_enemy = UnitGroupUnit(auto449871B5_g, auto449871B5_u);
        lv_enemyPlayer = UnitGetOwner(lv_enemy);
        if ((lv_enemyPlayer > 0) && (lv_enemyPlayer <= libCore_gv_bALMaxPlayers) && (lv_playersSeen[lv_enemyPlayer] == false) && (libGame_gv_players[lv_enemyPlayer].lv_isDead == false) && (libNtve_gf_UnitIsVisibleToPlayer(lv_enemy, lp_trigPlayer) == true)) {
            lv_playersSeen[lv_enemyPlayer] = true;
            UnitGroupAdd(lv_heroes, libAIAI_gv_aIHeroes[lv_enemyPlayer].lv_currentHeroUnit);
        }

    }
    auto71D19B90_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAIGetEnemyTeamIndex(lp_trigPlayer)].lv_players; 
    auto71D19B90_p = 1;
    for ( ; auto71D19B90_p <= PlayerGroupCount(auto71D19B90_g) ; auto71D19B90_p += (lv_enemyPlayer == PlayerGroupPlayer(auto71D19B90_g, auto71D19B90_p)) ) {
        lv_enemyPlayer = PlayerGroupPlayer(auto71D19B90_g, auto71D19B90_p);
        if ((lv_playersSeen[lv_enemyPlayer] == false) && (libGame_gv_players[lv_enemyPlayer].lv_isDead == false) && ((TimerGetElapsed(libGame_gv_gameTimer) - libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_heroTrackingData[lv_enemyPlayer].lv_lastSeenTime) <= libAIAI_gv_aIHeroHiddenEnemyConsiderTime) && (RegionContainsPoint(lp_region, libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_heroTrackingData[lv_enemyPlayer].lv_lastSeenLocation) == true)) {
            lv_playersSeen[lv_enemyPlayer] = true;
            UnitGroupAdd(lv_heroes, libAIAI_gv_aIHeroes[lv_enemyPlayer].lv_currentHeroUnit);
        }

    }
    return lv_heroes;
}

fixed libAIAI_gf_HeroAIAllyEvalInCircle (int lp_trigPlayer, point lp_position, fixed lp_radius, bool lp_includeHeroes, bool lp_includeMinionsSummons, bool lp_includeTowers) {
    // Implementation
    return libAIAI_gf_HeroAIAllyEvalInRegion(lp_trigPlayer, RegionCircle(lp_position, lp_radius), lp_includeHeroes, lp_includeMinionsSummons, lp_includeTowers);
}

fixed libAIAI_gf_HeroAIAllyEvalInRegion (int lp_trigPlayer, region lp_region, bool lp_includeHeroes, bool lp_includeMinionsSummons, bool lp_includeTowers) {
    unitgroup autoA4E2BC2A_g;
    int autoA4E2BC2A_u;
    unitgroup auto8F8636B3_g;
    int auto8F8636B3_u;
    unitgroup auto995AA24F_g;
    int auto995AA24F_u;

    // Variable Declarations
    bool[libCore_gv_bALMaxPlayers + 1] lv_playersSeen;
    fixed lv_totalEval;
    unit lv_unit;
    int lv_unitOwner;
    unitgroup lv_allies;
    unitgroup lv_heroes;
    unitgroup lv_minions;
    unitgroup lv_summons;
    unitgroup lv_minionsAndSummons;
    unitgroup lv_towers;

    // Variable Initialization
    lv_allies = UnitGroupEmpty();
    lv_heroes = UnitGroupEmpty();
    lv_minions = UnitGroupEmpty();
    lv_summons = UnitGroupEmpty();
    lv_minionsAndSummons = UnitGroupEmpty();
    lv_towers = UnitGroupEmpty();

    // Implementation
    lv_allies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceAlly, lp_region, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
    if ((lp_includeHeroes == true)) {
        lv_heroes = UnitGroupFilter(null, c_playerAny, lv_allies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
        autoA4E2BC2A_g = lv_heroes;
        autoA4E2BC2A_u = 1;
        for ( ; autoA4E2BC2A_u <= UnitGroupCount(autoA4E2BC2A_g, c_unitCountAll) ; autoA4E2BC2A_u += (lv_unit == UnitGroupUnit(autoA4E2BC2A_g, autoA4E2BC2A_u)) ) {
            lv_unit = UnitGroupUnit(autoA4E2BC2A_g, autoA4E2BC2A_u);
            lv_unitOwner = UnitGetOwner(lv_unit);
            if ((lv_unitOwner > 0) && (lv_unitOwner <= libCore_gv_bALMaxPlayers) && (lv_playersSeen[lv_unitOwner] == false)) {
                lv_playersSeen[lv_unitOwner] = true;
                lv_totalEval += libAIAI_gf_HeroAIHeroEval(libAIAI_gv_aIHeroes[lv_unitOwner].lv_currentHeroUnit);
            }

        }
    }

    if ((lp_includeMinionsSummons == true)) {
        lv_minions = UnitGroupFilter(null, c_playerAny, lv_allies, UnitFilter((1 << c_targetFilterBiological), 0, 0, 0), 0);
        lv_summons = UnitGroupFilter(null, c_playerAny, lv_allies, UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0), 0);
        lv_minionsAndSummons = UnitGroupEmpty();
        UnitGroupAddUnitGroup(lv_minionsAndSummons, lv_minions);
        UnitGroupAddUnitGroup(lv_minionsAndSummons, lv_summons);
        auto8F8636B3_g = lv_minionsAndSummons;
        auto8F8636B3_u = 1;
        for ( ; auto8F8636B3_u <= UnitGroupCount(auto8F8636B3_g, c_unitCountAll) ; auto8F8636B3_u += (lv_unit == UnitGroupUnit(auto8F8636B3_g, auto8F8636B3_u)) ) {
            lv_unit = UnitGroupUnit(auto8F8636B3_g, auto8F8636B3_u);
            lv_totalEval += (libAIAI_gv_aIHeroAllyMinionSummonEvalValue * (UnitGetPropertyFixed(lv_unit, c_unitPropLifePercent, c_unitPropCurrent) / 100.0));
        }
    }

    if ((lp_includeTowers == true)) {
        lv_towers = UnitGroupFilter(null, c_playerAny, lv_allies, UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, 0, 0), 0);
        auto995AA24F_g = lv_towers;
        auto995AA24F_u = 1;
        for ( ; auto995AA24F_u <= UnitGroupCount(auto995AA24F_g, c_unitCountAll) ; auto995AA24F_u += (lv_unit == UnitGroupUnit(auto995AA24F_g, auto995AA24F_u)) ) {
            lv_unit = UnitGroupUnit(auto995AA24F_g, auto995AA24F_u);
            lv_totalEval += (libAIAI_gv_aIHeroAllyTowerEvalValue * (UnitGetPropertyFixed(lv_unit, c_unitPropLifePercent, c_unitPropCurrent) / 100.0));
        }
    }

    return lv_totalEval;
}

bool libAIAI_gf_HeroAIHumanAllyInArea (int lp_trigPlayer, point lp_position, fixed lp_radius) {
    int autoBE486E5A_ae;
    int autoBE486E5A_ai;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    autoBE486E5A_ae = libCore_gv_bALMaxPlayers;
    autoBE486E5A_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (autoBE486E5A_ai >= 0 && lv_playerIndex <= autoBE486E5A_ae) || (autoBE486E5A_ai <= 0 && lv_playerIndex >= autoBE486E5A_ae) ) ; lv_playerIndex += autoBE486E5A_ai ) {
        if ((lv_playerIndex != lp_trigPlayer) && (libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 1) == true) && (libGame_gv_players[lv_playerIndex].lv_faction == libGame_gv_players[lp_trigPlayer].lv_faction) && (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit), lp_position) < lp_radius) && (UnitFilterMatch(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, lp_trigPlayer, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)))) == true)) {
            return true;
        }

    }
    return false;
}

unitgroup libAIAI_gf_HeroAIAllyHeroesinArea (int lp_trigPlayer, fixed lp_radius) {
    int autoCBBE96F7_ae;

    // Variable Declarations
    int lv_playerIndex;
    unitgroup lv_allyHeroes;

    // Variable Initialization
    lv_allyHeroes = UnitGroupEmpty();

    // Implementation
    autoCBBE96F7_ae = libCore_gv_bALMaxPlayers;
    lv_playerIndex = 1;
    for ( ; lv_playerIndex <= autoCBBE96F7_ae ; lv_playerIndex += 1 ) {
        if ((lv_playerIndex != lp_trigPlayer) && (libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 0) == true) && (libGame_gv_players[lv_playerIndex].lv_faction == libGame_gv_players[lp_trigPlayer].lv_faction) && (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit), UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) <= lp_radius) && (UnitFilterMatch(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, lp_trigPlayer, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)))) == true)) {
            UnitGroupAdd(lv_allyHeroes, libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit);
        }

    }
    return lv_allyHeroes;
}

fixed libAIAI_gf_HeroAIHeroEval (unit lp_heroUnit) {
    // Variable Declarations
    fixed lv_healthPercent;
    fixed lv_multiplier;

    // Variable Initialization
    lv_multiplier = 1.0;

    // Implementation
    if ((UnitIsValid(lp_heroUnit) != true)) {
        return 0.0;
    }

    lv_healthPercent = (UnitGetPropertyFixed(lp_heroUnit, c_unitPropLifePercent, c_unitPropCurrent) / 100.0);
    lv_healthPercent = libNtve_gf_ArithmeticRealClamp(lv_healthPercent, 0.0, 1.0);
    lv_healthPercent = (1.0 - lv_healthPercent);
    lv_healthPercent = (1.5 * (lv_healthPercent * lv_healthPercent));
    lv_healthPercent = (1.0 - lv_healthPercent);
    lv_healthPercent = libNtve_gf_ArithmeticRealClamp(lv_healthPercent, 0.0, 1.0);
    if ((libGame_gv_players[UnitGetOwner(lp_heroUnit)].lv_heroData.lv_isPaired == true)) {
        lv_multiplier += 1.0;
    }

    if ((UnitHasBehavior2(lp_heroUnit, "AbathurSymbioteHostBehavior") == true)) {
        lv_multiplier += 0.8;
    }

    return (lv_multiplier * (lv_healthPercent * (libAIAI_gv_aIHeroLevelEvalValue * UnitLevel(lp_heroUnit))));
}

void libAIAI_gf_HeroAIUpdateHomeEval (int lp_team) {
    // Variable Declarations
    int lv_teamIndex;
    region lv_baseRegion;
    int lv_allyComputerPlayer;
    unit lv_coreUnit;
    unitgroup lv_enemies;
    unitgroup lv_friendlies;
    unitgroup lv_heroes;
    unitgroup lv_minions;
    unitgroup lv_summons;
    unitgroup lv_minionsAndSummons;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_friendlies = UnitGroupEmpty();
    lv_heroes = UnitGroupEmpty();
    lv_minions = UnitGroupEmpty();
    lv_summons = UnitGroupEmpty();
    lv_minionsAndSummons = UnitGroupEmpty();

    // Implementation
    if ((lp_team == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
        lv_baseRegion = libCore_gv_mAPOrderBaseRegion;
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
        lv_teamIndex = (1);
        lv_baseRegion = libCore_gv_mAPChaosBaseRegion;
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamChaos;
    }
    lv_friendlies = UnitGroupAlliance(lv_allyComputerPlayer, c_unitAllianceAlly, lv_baseRegion, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
    lv_heroes = UnitGroupFilter(null, c_playerAny, lv_friendlies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
    libAIAI_gv_heroAITeamData[lv_teamIndex].lv_homeEval.lv_numAllyHeroes = UnitGroupCount(lv_heroes, c_unitCountAlive);
    lv_minions = UnitGroupFilter(null, c_playerAny, lv_friendlies, UnitFilter((1 << c_targetFilterBiological), 0, 0, 0), 0);
    lv_summons = UnitGroupFilter(null, c_playerAny, lv_friendlies, UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0), 0);
    lv_minionsAndSummons = UnitGroupEmpty();
    UnitGroupAddUnitGroup(lv_minionsAndSummons, lv_minions);
    UnitGroupAddUnitGroup(lv_minionsAndSummons, lv_summons);
    libAIAI_gv_heroAITeamData[lv_teamIndex].lv_homeEval.lv_numAllyMinionsAndSummons = UnitGroupCount(lv_minionsAndSummons, c_unitCountAlive);
    lv_enemies = UnitGroupAlliance(lv_allyComputerPlayer, c_unitAllianceEnemy, lv_baseRegion, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
    lv_heroes = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
    libAIAI_gv_heroAITeamData[lv_teamIndex].lv_homeEval.lv_numEnemyHeroes = UnitGroupCount(lv_heroes, c_unitCountAlive);
    lv_minions = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterBiological), 0, 0, 0), 0);
    lv_summons = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0), 0);
    lv_minionsAndSummons = UnitGroupEmpty();
    UnitGroupAddUnitGroup(lv_minionsAndSummons, lv_minions);
    UnitGroupAddUnitGroup(lv_minionsAndSummons, lv_summons);
    libAIAI_gv_heroAITeamData[lv_teamIndex].lv_homeEval.lv_numEnemyMinionsAndSummons = UnitGroupCount(lv_minionsAndSummons, c_unitCountAlive);
}

void libAIAI_gf_HeroAIUpdateTeamPlayerData (int lp_team) {
    int auto90ED577E_ae;

    // Variable Declarations
    int lv_teamIndex;
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    if ((lp_team == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    PlayerGroupClear(libAIAI_gv_heroAITeamPlayerData[lv_teamIndex].lv_players);
    PlayerGroupClear(libAIAI_gv_heroAITeamPlayerData[lv_teamIndex].lv_humanPlayers);
    PlayerGroupClear(libAIAI_gv_heroAITeamPlayerData[lv_teamIndex].lv_aIPlayers);
    auto90ED577E_ae = libCore_gv_bALMaxPlayers;
    lv_playerIndex = 1;
    for ( ; lv_playerIndex <= auto90ED577E_ae ; lv_playerIndex += 1 ) {
        if ((libGame_gv_players[lv_playerIndex].lv_faction == lp_team)) {
            if ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 1) == true)) {
                PlayerGroupAdd(libAIAI_gv_heroAITeamPlayerData[lv_teamIndex].lv_players, lv_playerIndex);
                PlayerGroupAdd(libAIAI_gv_heroAITeamPlayerData[lv_teamIndex].lv_humanPlayers, lv_playerIndex);
            }
            else {
                if ((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lv_playerIndex) == true)) {
                    PlayerGroupAdd(libAIAI_gv_heroAITeamPlayerData[lv_teamIndex].lv_players, lv_playerIndex);
                    PlayerGroupAdd(libAIAI_gv_heroAITeamPlayerData[lv_teamIndex].lv_aIPlayers, lv_playerIndex);
                }

            }
        }

    }
}

void libAIAI_gf_HeroAIUpdateHeroTracking (int lp_team) {
    int autoB0D8C308_ae;
    playergroup auto6A92A96F_g;
    int auto6A92A96F_p;

    // Variable Declarations
    playergroup lv_allyPlayerGroup;
    int lv_allyFaction;
    int lv_enemyFaction;
    int lv_playerIndex;
    int lv_laneIndex;
    fixed lv_distanceToLane;

    // Variable Initialization
    lv_allyPlayerGroup = PlayerGroupEmpty();

    // Implementation
    if ((lp_team == 0)) {
        lv_allyPlayerGroup = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
        lv_allyFaction = libGame_ge_Faction_Order;
        lv_enemyFaction = libGame_ge_Faction_Chaos;
    }
    else {
        lv_allyPlayerGroup = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup;
        lv_allyFaction = libGame_ge_Faction_Chaos;
        lv_enemyFaction = libGame_ge_Faction_Order;
    }
    autoB0D8C308_ae = 10;
    lv_playerIndex = 1;
    for ( ; lv_playerIndex <= autoB0D8C308_ae ; lv_playerIndex += 1 ) {
        if ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 0) == true) && (TimerGetRemaining(libGame_gv_players[lv_playerIndex].lv_respawnTimer) <= 0.0) && (libNtve_gf_UnitIsVisibleToPlayer(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, PlayerGroupPlayer(lv_allyPlayerGroup, 1)) == true) && (UnitIsValid(libGame_gv_players[lv_playerIndex].lv_activeVehicle) == false)) {
            libAIAI_gv_heroAITeamData[(lp_team)].lv_heroTrackingData[lv_playerIndex].lv_lastSeenTime = TimerGetElapsed(libGame_gv_gameTimer);
            libAIAI_gv_heroAITeamData[(lp_team)].lv_heroTrackingData[lv_playerIndex].lv_lastSeenLocation = UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit);
            libAIAI_gv_heroAITeamData[(lp_team)].lv_heroTrackingData[lv_playerIndex].lv_lastSeenVelocity = UnitGetVelocity(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit);
            if ((libGame_gv_laneCount > 0) && (libAIAI_gf_HeroAIIsPlayerInsideBase(lv_playerIndex) == false) && (libAIAI_gf_HeroAIIsPlayerInsideEnemyBase(lv_playerIndex) == false)) {
                libGame_gf_CalculateClosestLaneData(UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit));
                lv_laneIndex = libGame_gv_closestLaneData.lv_closestLane;
                lv_distanceToLane = libGame_gv_closestLaneData.lv_laneData[lv_laneIndex].lv_closestDist;
                if ((lv_distanceToLane <= libAIAI_gv_aIHeroLaneLeashDistance)) {
                    if ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 1) == true) && (libGame_gv_players[lv_playerIndex].lv_faction == lv_allyFaction) && (lv_laneIndex != libAIAI_gv_heroAITeamData[(lp_team)].lv_heroTrackingData[lv_playerIndex].lv_lastSeenLane)) {
                        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_lastTimeHumanAllyEnteredLane = TimerGetElapsed(libGame_gv_gameTimer);
                    }

                    libAIAI_gv_heroAITeamData[(lp_team)].lv_heroTrackingData[lv_playerIndex].lv_lastSeenLane = lv_laneIndex;
                }

            }

        }

    }
    libAIAI_gv_heroAITeamData[(lp_team)].lv_numberOfMissingEnemies = 0;
    auto6A92A96F_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAITeamIndexOfFaction(lv_enemyFaction)].lv_players; 
    auto6A92A96F_p = 1;
    for ( ; auto6A92A96F_p <= PlayerGroupCount(auto6A92A96F_g) ; auto6A92A96F_p += (lv_playerIndex == PlayerGroupPlayer(auto6A92A96F_g, auto6A92A96F_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto6A92A96F_g, auto6A92A96F_p);
        if ((TimerGetRemaining(libGame_gv_players[lv_playerIndex].lv_respawnTimer) <= 0.0) && ((libAIAI_gv_heroAITeamData[(lp_team)].lv_heroTrackingData[lv_playerIndex].lv_lastSeenTime + libAIAI_gv_aIHeroMissingDelay) < TimerGetElapsed(libGame_gv_gameTimer))) {
            libAIAI_gv_heroAITeamData[(lp_team)].lv_numberOfMissingEnemies += 1;
        }

    }
}

void libAIAI_gf_HeroAIUpdateLaneEvals (int lp_team) {
    int autoFCC43C9A_ae;
    int autoFCC43C9A_ai;

    // Variable Declarations
    int lv_laneToAvoid;
    int lv_curLane;
    fixed lv_curEval;
    fixed lv_worstEval;
    int lv_weakestLane;
    int lv_numAllyTowns;
    int lv_numAllyHeroes;
    int lv_numEnemyHeroes;
    int lv_numEnemySiegeGiants;
    int lv_numEnemyOgres;
    int lv_numEnemyOgreKings;
    int lv_numEnemyDragonKnights;
    int lv_numEnemyUnderworldBossSkulls;
    fixed lv_underestimateEnemyPercent;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_heroAITeamData[(lp_team)].lv_avoidPlayer != 0)) {
        lv_laneToAvoid = libAIAI_gv_heroAITeamData[(lp_team)].lv_avoidLane;
    }

    lv_underestimateEnemyPercent = libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[(libAIAI_gv_heroAITeamData[(lp_team)].lv_difficulty)];
    lv_worstEval = 524287;
    autoFCC43C9A_ae = libGame_gv_laneCount;
    autoFCC43C9A_ai = 1;
    lv_curLane = 1;
    for ( ; ( (autoFCC43C9A_ai >= 0 && lv_curLane <= autoFCC43C9A_ae) || (autoFCC43C9A_ai <= 0 && lv_curLane >= autoFCC43C9A_ae) ) ; lv_curLane += autoFCC43C9A_ai ) {
        lv_numAllyTowns = libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_curLane].lv_numAllyTowns;
        lv_numAllyHeroes = libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_curLane].lv_numAllyHeroes;
        lv_numEnemyHeroes = libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_curLane].lv_numEnemyHeroes;
        lv_numEnemySiegeGiants = libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_curLane].lv_numEnemySiegeGiants;
        lv_numEnemyOgres = libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_curLane].lv_numEnemyOgres;
        lv_numEnemyOgreKings = libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_curLane].lv_numEnemyOgreKings;
        lv_numEnemyDragonKnights = libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_curLane].lv_numEnemyDragonKnights;
        lv_numEnemyUnderworldBossSkulls = libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_curLane].lv_numEnemyUnderworldBossSkulls;
        lv_curEval = libAIAI_gf_HeroAICalcLaneEval(lv_numAllyTowns, lv_numAllyHeroes, lv_numEnemyHeroes, lv_numEnemySiegeGiants, lv_numEnemyOgres, lv_numEnemyOgreKings, lv_numEnemyDragonKnights, lv_numEnemyUnderworldBossSkulls, lv_underestimateEnemyPercent);
        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_curLane].lv_eval = lv_curEval;
        if ((libGame_gv_laneData[lv_curLane].lv_minionSpawningEnabled == true) && (lv_curLane != lv_laneToAvoid)) {
            if ((lv_curEval < lv_worstEval)) {
                lv_weakestLane = lv_curLane;
                lv_worstEval = lv_curEval;
            }

        }

    }
    libAIAI_gv_heroAITeamData[(lp_team)].lv_weakestLane = lv_weakestLane;
}

void libAIAI_gf_HeroAIUpdateLaneHeroCounts (int lp_team) {
    int auto9C204E7B_ae;
    int auto9C204E7B_ai;
    int autoF36B4E08_ae;
    int autoF36B4E08_ai;

    // Variable Declarations
    int lv_laneIndex;
    int lv_heroIndex;
    int lv_heroTeam;
    region lv_heroBaseRegion;

    // Variable Initialization

    // Implementation
    auto9C204E7B_ae = libGame_gv_laneCount;
    auto9C204E7B_ai = 1;
    lv_laneIndex = 1;
    for ( ; ( (auto9C204E7B_ai >= 0 && lv_laneIndex <= auto9C204E7B_ae) || (auto9C204E7B_ai <= 0 && lv_laneIndex >= auto9C204E7B_ae) ) ; lv_laneIndex += auto9C204E7B_ai ) {
        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numAllyHeroes = 0;
        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numAllyHumanHeroes = 0;
        PlayerGroupClear(libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_allyHeroes);
        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numEnemyHeroes = 0;
    }
    autoF36B4E08_ae = 10;
    autoF36B4E08_ai = 1;
    lv_heroIndex = 1;
    for ( ; ( (autoF36B4E08_ai >= 0 && lv_heroIndex <= autoF36B4E08_ae) || (autoF36B4E08_ai <= 0 && lv_heroIndex >= autoF36B4E08_ae) ) ; lv_heroIndex += autoF36B4E08_ai ) {
        if ((libAIAI_gf_HeroAIIsPlayerActive(lv_heroIndex, 0) == true)) {
            if ((libAIAI_gf_HeroAIExcludeHeroFromLaneEvals(lv_heroIndex) == true)) {
                continue;
            }

            if ((libGame_gv_players[lv_heroIndex].lv_faction == libGame_ge_Faction_Order)) {
                lv_heroTeam = 0;
                lv_heroBaseRegion = libCore_gv_mAPOrderBaseRegion;
            }
            else {
                lv_heroTeam = 1;
                lv_heroBaseRegion = libCore_gv_mAPChaosBaseRegion;
            }
            if ((lv_heroTeam == lp_team) && (libAIAI_gf_HeroAIIsAIEnabledForPlayer(lv_heroIndex) == true) && (libAIAI_gv_aIHeroes[lv_heroIndex].lv_desiredLane != 0)) {
                lv_laneIndex = libAIAI_gv_aIHeroes[lv_heroIndex].lv_desiredLane;
                libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numAllyHeroes += 1;
                PlayerGroupAdd(libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_allyHeroes, lv_heroIndex);
            }
            else if ((lv_heroTeam == lp_team) && (libAIAI_gv_heroAITeamData[(lp_team)].lv_heroTrackingData[lv_heroIndex].lv_lastSeenLane != 0)) {
                lv_laneIndex = libAIAI_gv_heroAITeamData[(lp_team)].lv_heroTrackingData[lv_heroIndex].lv_lastSeenLane;
                libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numAllyHeroes += 1;
                if ((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lv_heroIndex) == false)) {
                    libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numAllyHumanHeroes += 1;
                }

                PlayerGroupAdd(libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_allyHeroes, lv_heroIndex);
            }
            else if ((lv_heroTeam != lp_team) && (libAIAI_gv_heroAITeamData[(lp_team)].lv_heroTrackingData[lv_heroIndex].lv_lastSeenLane != 0)) {
                lv_laneIndex = libAIAI_gv_heroAITeamData[(lp_team)].lv_heroTrackingData[lv_heroIndex].lv_lastSeenLane;
                libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numEnemyHeroes += 1;
            }
        }

    }
}

void libAIAI_gf_HeroAIUpdateFrontMinion (int lp_team) {
    int autoC20B7F77_ae;
    int autoC20B7F77_ai;
    int auto8598D571_ae;
    int auto8598D571_ai;
    int auto786EA2FC_ae;
    int auto786EA2FC_ai;
    unitgroup auto89E5EF89_g;
    int auto89E5EF89_u;

    // Variable Declarations
    int lv_allyComputerPlayer;
    int lv_laneIndex;
    int lv_waypointIndex;
    region lv_waypointRegion;
    unitgroup lv_allyUnits;
    unit lv_allyUnit;
    point lv_position;
    fixed lv_lanePosition;
    int lv_minLanePosition;
    int lv_maxLanePosition;

    // Variable Initialization
    lv_waypointRegion = RegionEmpty();
    lv_allyUnits = UnitGroupEmpty();
    lv_minLanePosition = 2;

    // Implementation
    if ((lp_team == 0)) {
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamChaos;
    }
    autoC20B7F77_ae = libGame_gv_laneCount;
    autoC20B7F77_ai = 1;
    lv_laneIndex = 1;
    for ( ; ( (autoC20B7F77_ai >= 0 && lv_laneIndex <= autoC20B7F77_ae) || (autoC20B7F77_ai <= 0 && lv_laneIndex >= autoC20B7F77_ae) ) ; lv_laneIndex += autoC20B7F77_ai ) {
        lv_maxLanePosition = (libGame_gv_laneData[lv_laneIndex].lv_waypointCount - 1);
        if ((lp_team == 0)) {
            libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_frontMinionPosition = lv_minLanePosition;
            auto786EA2FC_ae = FixedToInt(libAIAI_gv_heroAITeamData[0].lv_laneData[lv_laneIndex].lv_frontTowerPosition);
            auto786EA2FC_ai = -1;
            lv_waypointIndex = CeilingI(libAIAI_gv_heroAITeamData[1].lv_laneData[lv_laneIndex].lv_frontTowerPosition);
            for ( ; ( (auto786EA2FC_ai >= 0 && lv_waypointIndex <= auto786EA2FC_ae) || (auto786EA2FC_ai <= 0 && lv_waypointIndex >= auto786EA2FC_ae) ) ; lv_waypointIndex += auto786EA2FC_ai ) {
                lv_waypointRegion = RegionCircle(libGame_gv_laneData[lv_laneIndex].lv_waypoints[lv_waypointIndex], 15.0);
                lv_allyUnits = UnitGroupAlliance(lv_allyComputerPlayer, c_unitAllianceAlly, lv_waypointRegion, UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterPassive - 32))), 0);
                if ((UnitGroupCount(lv_allyUnits, c_unitCountAlive) > 0)) {
                    break;
                }

            }
        }
        else {
            libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_frontMinionPosition = lv_maxLanePosition;
            auto8598D571_ae = CeilingI(libAIAI_gv_heroAITeamData[1].lv_laneData[lv_laneIndex].lv_frontTowerPosition);
            auto8598D571_ai = 1;
            lv_waypointIndex = FixedToInt(libAIAI_gv_heroAITeamData[0].lv_laneData[lv_laneIndex].lv_frontTowerPosition);
            for ( ; ( (auto8598D571_ai >= 0 && lv_waypointIndex <= auto8598D571_ae) || (auto8598D571_ai <= 0 && lv_waypointIndex >= auto8598D571_ae) ) ; lv_waypointIndex += auto8598D571_ai ) {
                lv_waypointRegion = RegionCircle(libGame_gv_laneData[lv_laneIndex].lv_waypoints[lv_waypointIndex], 15.0);
                lv_allyUnits = UnitGroupAlliance(lv_allyComputerPlayer, c_unitAllianceAlly, lv_waypointRegion, UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
                if ((UnitGroupCount(lv_allyUnits, c_unitCountAlive) > 0)) {
                    break;
                }

            }
        }
        auto89E5EF89_g = lv_allyUnits;
        auto89E5EF89_u = 1;
        for ( ; auto89E5EF89_u <= UnitGroupCount(auto89E5EF89_g, c_unitCountAll) ; auto89E5EF89_u += (lv_allyUnit == UnitGroupUnit(auto89E5EF89_g, auto89E5EF89_u)) ) {
            lv_allyUnit = UnitGroupUnit(auto89E5EF89_g, auto89E5EF89_u);
            lv_position = UnitGetPosition(lv_allyUnit);
            lv_lanePosition = libAIAI_gf_AIGetClosestLanePosition(lv_laneIndex, lv_position);
            if ((lp_team == 0)) {
                if ((lv_lanePosition > libAIAI_gv_heroAITeamData[0].lv_laneData[lv_laneIndex].lv_frontMinionPosition)) {
                    libAIAI_gv_heroAITeamData[0].lv_laneData[lv_laneIndex].lv_frontMinionPosition = lv_lanePosition;
                }

            }
            else {
                if ((lv_lanePosition < libAIAI_gv_heroAITeamData[1].lv_laneData[lv_laneIndex].lv_frontMinionPosition)) {
                    libAIAI_gv_heroAITeamData[1].lv_laneData[lv_laneIndex].lv_frontMinionPosition = lv_lanePosition;
                }

            }
        }
    }
}

void libAIAI_gf_HeroAIUpdateFrontEnemyMinion (int lp_team) {
    int auto5551748D_ae;
    int auto5551748D_ai;
    int auto4235AF5C_ae;
    int auto4235AF5C_ai;
    int auto02EB35F9_ae;
    int auto02EB35F9_ai;
    unitgroup auto85E57673_g;
    int auto85E57673_u;

    // Variable Declarations
    int lv_allyComputerPlayer;
    int lv_laneIndex;
    int lv_waypointIndex;
    region lv_waypointRegion;
    unitgroup lv_enemyUnits;
    unit lv_enemyUnit;
    point lv_position;
    fixed lv_lanePosition;
    int lv_minLanePosition;
    int lv_maxLanePosition;

    // Variable Initialization
    lv_waypointRegion = RegionEmpty();
    lv_enemyUnits = UnitGroupEmpty();
    lv_minLanePosition = 2;

    // Implementation
    if ((lp_team == 0)) {
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamChaos;
    }
    auto5551748D_ae = libGame_gv_laneCount;
    auto5551748D_ai = 1;
    lv_laneIndex = 1;
    for ( ; ( (auto5551748D_ai >= 0 && lv_laneIndex <= auto5551748D_ae) || (auto5551748D_ai <= 0 && lv_laneIndex >= auto5551748D_ae) ) ; lv_laneIndex += auto5551748D_ai ) {
        lv_maxLanePosition = (libGame_gv_laneData[lv_laneIndex].lv_waypointCount - 1);
        if ((lp_team == 1)) {
            libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_frontEnemyMinionPosition = lv_minLanePosition;
            auto02EB35F9_ae = FixedToInt(libAIAI_gv_heroAITeamData[0].lv_laneData[lv_laneIndex].lv_frontTowerPosition);
            auto02EB35F9_ai = -1;
            lv_waypointIndex = CeilingI(libAIAI_gv_heroAITeamData[1].lv_laneData[lv_laneIndex].lv_frontTowerPosition);
            for ( ; ( (auto02EB35F9_ai >= 0 && lv_waypointIndex <= auto02EB35F9_ae) || (auto02EB35F9_ai <= 0 && lv_waypointIndex >= auto02EB35F9_ae) ) ; lv_waypointIndex += auto02EB35F9_ai ) {
                lv_waypointRegion = RegionCircle(libGame_gv_laneData[lv_laneIndex].lv_waypoints[lv_waypointIndex], 15.0);
                lv_enemyUnits = UnitGroupAlliance(lv_allyComputerPlayer, c_unitAllianceEnemy, lv_waypointRegion, UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterPassive - 32))), 0);
                if ((UnitGroupCount(lv_enemyUnits, c_unitCountAlive) > 0)) {
                    break;
                }

            }
        }
        else {
            libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_frontEnemyMinionPosition = lv_maxLanePosition;
            auto4235AF5C_ae = CeilingI(libAIAI_gv_heroAITeamData[1].lv_laneData[lv_laneIndex].lv_frontTowerPosition);
            auto4235AF5C_ai = 1;
            lv_waypointIndex = FixedToInt(libAIAI_gv_heroAITeamData[0].lv_laneData[lv_laneIndex].lv_frontTowerPosition);
            for ( ; ( (auto4235AF5C_ai >= 0 && lv_waypointIndex <= auto4235AF5C_ae) || (auto4235AF5C_ai <= 0 && lv_waypointIndex >= auto4235AF5C_ae) ) ; lv_waypointIndex += auto4235AF5C_ai ) {
                lv_waypointRegion = RegionCircle(libGame_gv_laneData[lv_laneIndex].lv_waypoints[lv_waypointIndex], 15.0);
                lv_enemyUnits = UnitGroupAlliance(lv_allyComputerPlayer, c_unitAllianceEnemy, lv_waypointRegion, UnitFilter((1 << c_targetFilterBiological) | (1 << c_targetFilterVisible), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
                if ((UnitGroupCount(lv_enemyUnits, c_unitCountAlive) > 0)) {
                    break;
                }

            }
        }
        auto85E57673_g = lv_enemyUnits;
        auto85E57673_u = 1;
        for ( ; auto85E57673_u <= UnitGroupCount(auto85E57673_g, c_unitCountAll) ; auto85E57673_u += (lv_enemyUnit == UnitGroupUnit(auto85E57673_g, auto85E57673_u)) ) {
            lv_enemyUnit = UnitGroupUnit(auto85E57673_g, auto85E57673_u);
            lv_position = UnitGetPosition(lv_enemyUnit);
            lv_lanePosition = libAIAI_gf_AIGetClosestLanePosition(lv_laneIndex, lv_position);
            if ((lp_team == 1)) {
                if ((lv_lanePosition > libAIAI_gv_heroAITeamData[1].lv_laneData[lv_laneIndex].lv_frontEnemyMinionPosition)) {
                    libAIAI_gv_heroAITeamData[1].lv_laneData[lv_laneIndex].lv_frontEnemyMinionPosition = lv_lanePosition;
                }

            }
            else {
                if ((lv_lanePosition < libAIAI_gv_heroAITeamData[0].lv_laneData[lv_laneIndex].lv_frontEnemyMinionPosition)) {
                    libAIAI_gv_heroAITeamData[0].lv_laneData[lv_laneIndex].lv_frontEnemyMinionPosition = lv_lanePosition;
                }

            }
        }
    }
}

void libAIAI_gf_HeroAIUpdateFrontTower (int lp_team) {
    int auto8B410C8D_ae;
    int auto8B410C8D_ai;
    int autoC86AFC27_ae;
    int autoC86AFC27_ai;
    int autoA4217D95_ae;
    int autoA4217D95_ai;

    // Variable Declarations
    int lv_allyComputerPlayer;
    int lv_townIndex;
    int lv_structureIndex;
    int lv_laneIndex;
    point lv_position;
    fixed lv_lanePosition;
    int lv_minLanePosition;
    int lv_maxLanePosition;

    // Variable Initialization
    lv_minLanePosition = 2;

    // Implementation
    if ((lp_team == 0)) {
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamChaos;
    }
    auto8B410C8D_ae = libGame_gv_laneCount;
    auto8B410C8D_ai = 1;
    lv_laneIndex = 1;
    for ( ; ( (auto8B410C8D_ai >= 0 && lv_laneIndex <= auto8B410C8D_ae) || (auto8B410C8D_ai <= 0 && lv_laneIndex >= auto8B410C8D_ae) ) ; lv_laneIndex += auto8B410C8D_ai ) {
        lv_maxLanePosition = (libGame_gv_laneData[lv_laneIndex].lv_waypointCount - 1);
        if ((lp_team == 0)) {
            libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_frontTowerPosition = lv_minLanePosition;
        }
        else {
            libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_frontTowerPosition = lv_maxLanePosition;
        }
    }
    autoC86AFC27_ae = libGame_gv_townTownCount;
    autoC86AFC27_ai = 1;
    lv_townIndex = 1;
    for ( ; ( (autoC86AFC27_ai >= 0 && lv_townIndex <= autoC86AFC27_ae) || (autoC86AFC27_ai <= 0 && lv_townIndex >= autoC86AFC27_ae) ) ; lv_townIndex += autoC86AFC27_ai ) {
        autoA4217D95_ae = libGame_gv_townTownData[lv_townIndex].lv_structureCount;
        autoA4217D95_ai = 1;
        lv_structureIndex = 1;
        for ( ; ( (autoA4217D95_ai >= 0 && lv_structureIndex <= autoA4217D95_ae) || (autoA4217D95_ai <= 0 && lv_structureIndex >= autoA4217D95_ae) ) ; lv_structureIndex += autoA4217D95_ai ) {
            if ((UnitIsAlive(libGame_gv_townTownData[lv_townIndex].lv_structureUnits[lv_structureIndex]) == true) && (UnitGetOwner(libGame_gv_townTownData[lv_townIndex].lv_structureUnits[lv_structureIndex]) == lv_allyComputerPlayer) && ((libGame_gv_townTownData[lv_townIndex].lv_structureTypes[lv_structureIndex] == libGame_ge_TownStructureTypes_CannonTower) || (libGame_gv_townTownData[lv_townIndex].lv_structureTypes[lv_structureIndex] == libGame_ge_TownStructureTypes_TownHall))) {
                lv_position = UnitGetPosition(libGame_gv_townTownData[lv_townIndex].lv_structureUnits[lv_structureIndex]);
                lv_laneIndex = libGame_gv_townTownData[lv_townIndex].lv_lane;
                lv_lanePosition = libAIAI_gf_AIGetClosestLanePosition(lv_laneIndex, lv_position);
                if ((lp_team == 0)) {
                    libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_frontTowerPosition = MaxF(lv_lanePosition, libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_frontTowerPosition);
                }
                else {
                    libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_frontTowerPosition = MinF(lv_lanePosition, libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_frontTowerPosition);
                }
            }

        }
    }
}

void libAIAI_gf_HeroAIUpdateFrontHumanAlly (int lp_team) {
    int auto7E37147A_ae;
    int auto7E37147A_ai;
    int auto0A2A314C_ae;
    int auto0A2A314C_ai;

    // Variable Declarations
    int lv_faction;
    int lv_playerIndex;
    point lv_position;
    int lv_laneIndex;
    fixed lv_distanceToLane;
    int lv_closestIndex;
    int lv_secondaryIndex;
    point lv_closestPoint;
    fixed lv_lanePosition;

    // Variable Initialization

    // Implementation
    if ((lp_team == 0)) {
        lv_faction = libGame_ge_Faction_Order;
    }
    else {
        lv_faction = libGame_ge_Faction_Chaos;
    }
    auto7E37147A_ae = libGame_gv_laneCount;
    auto7E37147A_ai = 1;
    lv_laneIndex = 1;
    for ( ; ( (auto7E37147A_ai >= 0 && lv_laneIndex <= auto7E37147A_ae) || (auto7E37147A_ai <= 0 && lv_laneIndex >= auto7E37147A_ae) ) ; lv_laneIndex += auto7E37147A_ai ) {
        if ((lp_team == 0)) {
            libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_frontHumanAllyPosition = 1.0;
        }
        else {
            libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_frontHumanAllyPosition = libGame_gv_laneData[lv_laneIndex].lv_waypointCount;
        }
    }
    auto0A2A314C_ae = libCore_gv_bALMaxPlayers;
    auto0A2A314C_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (auto0A2A314C_ai >= 0 && lv_playerIndex <= auto0A2A314C_ae) || (auto0A2A314C_ai <= 0 && lv_playerIndex >= auto0A2A314C_ae) ) ; lv_playerIndex += auto0A2A314C_ai ) {
        if ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 1) == true) && (libGame_gv_players[lv_playerIndex].lv_faction == lv_faction) && (UnitTestState(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, c_unitStateCloaked) == false)) {
            lv_position = UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit);
            libGame_gf_CalculateClosestLaneData(lv_position);
            lv_laneIndex = libGame_gv_closestLaneData.lv_closestLane;
            lv_distanceToLane = libGame_gv_closestLaneData.lv_laneData[lv_laneIndex].lv_closestDist;
            if ((lv_distanceToLane > libAIAI_gv_aIHeroLaneLeashDistance)) {
                continue;
            }

            lv_closestIndex = libGame_gv_closestLaneData.lv_laneData[lv_laneIndex].lv_closestIndex;
            lv_secondaryIndex = libGame_gv_closestLaneData.lv_laneData[lv_laneIndex].lv_secondaryIndex;
            lv_closestPoint = libGame_gv_closestLaneData.lv_laneData[lv_laneIndex].lv_closestPoint;
            lv_lanePosition = AILaneWaypointConvertPointToWaydist(lv_laneIndex, lv_closestIndex, lv_secondaryIndex, lv_closestPoint);
            if ((lp_team == 0)) {
                libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_frontHumanAllyPosition = MaxF(lv_lanePosition, libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_frontHumanAllyPosition);
            }
            else {
                libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_frontHumanAllyPosition = MinF(lv_lanePosition, libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_frontHumanAllyPosition);
            }
        }

    }
}

void libAIAI_gf_HeroAICalcCoreDefensePosition (int lp_team) {
    int autoCA059FA6_ae;
    int autoCA059FA6_ai;

    // Variable Declarations
    point lv_corePosition;
    int lv_faction;
    int lv_laneIndex;
    fixed lv_coreLanePosition;
    fixed lv_coreDefenseLanePosition;

    // Variable Initialization

    // Implementation
    if ((lp_team == 0)) {
        lv_faction = libGame_ge_Faction_Order;
        lv_corePosition = UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core);
    }
    else {
        lv_faction = libGame_ge_Faction_Chaos;
        lv_corePosition = UnitGetPosition(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core);
    }
    autoCA059FA6_ae = libGame_gv_laneCount;
    autoCA059FA6_ai = 1;
    lv_laneIndex = 1;
    for ( ; ( (autoCA059FA6_ai >= 0 && lv_laneIndex <= autoCA059FA6_ae) || (autoCA059FA6_ai <= 0 && lv_laneIndex >= autoCA059FA6_ae) ) ; lv_laneIndex += autoCA059FA6_ai ) {
        lv_coreLanePosition = libAIAI_gf_AIGetClosestLanePosition(lv_laneIndex, lv_corePosition);
        lv_coreDefenseLanePosition = libAIAI_gf_AIAdvanceLanePosition(lv_faction, lv_laneIndex, lv_coreLanePosition, 12.0);
        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_coreDefensePosition = lv_coreDefenseLanePosition;
    }
}

void libAIAI_gf_HeroAIUpdateContentionPoints (int lp_team) {
    int autoB231D41E_ae;
    int autoB231D41E_ai;
    unitgroup auto199BE167_g;
    int auto199BE167_u;

    // Variable Declarations
    int lv_allyTeamIndex;
    int lv_enemyTeamIndex;
    int lv_allyComputerPlayer;
    int lv_laneIndex;
    fixed lv_bestLanePosition;
    point lv_bestPosition;
    unitgroup lv_enemies;
    unitgroup lv_enemyHeroes;
    unitgroup lv_enemyMinions;
    unitgroup lv_allies;
    unitgroup lv_allyMinions;
    unitgroup lv_siegeMinions;
    unit lv_enemyUnit;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_enemyHeroes = UnitGroupEmpty();
    lv_enemyMinions = UnitGroupEmpty();
    lv_allies = UnitGroupEmpty();
    lv_allyMinions = UnitGroupEmpty();
    lv_siegeMinions = UnitGroupEmpty();

    // Implementation
    if ((lp_team == 0)) {
        lv_allyTeamIndex = (0);
        lv_enemyTeamIndex = (1);
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
        lv_allyTeamIndex = (1);
        lv_enemyTeamIndex = (0);
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamChaos;
    }
    autoB231D41E_ae = libGame_gv_laneCount;
    autoB231D41E_ai = 1;
    lv_laneIndex = 1;
    for ( ; ( (autoB231D41E_ai >= 0 && lv_laneIndex <= autoB231D41E_ae) || (autoB231D41E_ai <= 0 && lv_laneIndex >= autoB231D41E_ae) ) ; lv_laneIndex += autoB231D41E_ai ) {
        if ((libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_gameState != libAIAI_ge_HeroAIGameState_Act3) && (libGame_gv_laneData[lv_laneIndex].lv_minionSpawningEnabled == true)) {
            if ((lp_team == 0)) {
                lv_bestLanePosition = libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_coreDefensePosition;
                lv_bestLanePosition = MaxF(lv_bestLanePosition, libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_frontTowerPosition);
                lv_bestLanePosition = MaxF(lv_bestLanePosition, libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_frontMinionPosition);
                lv_bestLanePosition = MinF(lv_bestLanePosition, libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_frontEnemyMinionPosition);
                if ((libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_frontHumanAllyPosition < libAIAI_gv_heroAITeamData[lv_enemyTeamIndex].lv_laneData[lv_laneIndex].lv_frontTowerPosition)) {
                    lv_bestLanePosition = MaxF(lv_bestLanePosition, libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_frontHumanAllyPosition);
                }

            }
            else {
                lv_bestLanePosition = libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_coreDefensePosition;
                lv_bestLanePosition = MinF(lv_bestLanePosition, libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_frontTowerPosition);
                lv_bestLanePosition = MinF(lv_bestLanePosition, libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_frontMinionPosition);
                lv_bestLanePosition = MaxF(lv_bestLanePosition, libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_frontEnemyMinionPosition);
                if ((libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_frontHumanAllyPosition > libAIAI_gv_heroAITeamData[lv_enemyTeamIndex].lv_laneData[lv_laneIndex].lv_frontTowerPosition)) {
                    lv_bestLanePosition = MinF(lv_bestLanePosition, libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_frontHumanAllyPosition);
                }

            }
        }
        else {
            if ((lp_team == 0)) {
                lv_bestLanePosition = libGame_gv_laneData[lv_laneIndex].lv_waypointCount;
                lv_bestLanePosition = MinF(lv_bestLanePosition, libAIAI_gv_heroAITeamData[lv_enemyTeamIndex].lv_laneData[lv_laneIndex].lv_frontTowerPosition);
                lv_bestLanePosition = MaxF(lv_bestLanePosition, libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_frontMinionPosition);
                lv_bestLanePosition = MinF(lv_bestLanePosition, libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_frontEnemyMinionPosition);
                if ((libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_frontHumanAllyPosition < libAIAI_gv_heroAITeamData[lv_enemyTeamIndex].lv_laneData[lv_laneIndex].lv_frontTowerPosition)) {
                    lv_bestLanePosition = MaxF(lv_bestLanePosition, libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_frontHumanAllyPosition);
                }

            }
            else {
                lv_bestLanePosition = 1.0;
                lv_bestLanePosition = MaxF(lv_bestLanePosition, libAIAI_gv_heroAITeamData[lv_enemyTeamIndex].lv_laneData[lv_laneIndex].lv_frontTowerPosition);
                lv_bestLanePosition = MinF(lv_bestLanePosition, libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_frontMinionPosition);
                lv_bestLanePosition = MaxF(lv_bestLanePosition, libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_frontEnemyMinionPosition);
                if ((libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_frontHumanAllyPosition > libAIAI_gv_heroAITeamData[lv_enemyTeamIndex].lv_laneData[lv_laneIndex].lv_frontTowerPosition)) {
                    lv_bestLanePosition = MinF(lv_bestLanePosition, libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_frontHumanAllyPosition);
                }

            }
        }
        lv_bestPosition = AILaneWaypointConvertWaydistOffsetToPoint(lv_laneIndex, lv_bestLanePosition, 0.0);
        libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_contentionPointLanePosition = lv_bestLanePosition;
        libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_contentionPoint = lv_bestPosition;
        libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_totalEnemyMaxLifeAtContentionPoint = 0.0;
        lv_enemies = UnitGroupAlliance(lv_allyComputerPlayer, c_unitAllianceEnemy, RegionCircle(lv_bestPosition, 12.0), UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
        auto199BE167_g = lv_enemies;
        auto199BE167_u = 1;
        for ( ; auto199BE167_u <= UnitGroupCount(auto199BE167_g, c_unitCountAll) ; auto199BE167_u += (lv_enemyUnit == UnitGroupUnit(auto199BE167_g, auto199BE167_u)) ) {
            lv_enemyUnit = UnitGroupUnit(auto199BE167_g, auto199BE167_u);
            libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_totalEnemyMaxLifeAtContentionPoint += UnitGetPropertyFixed(lv_enemyUnit, c_unitPropLifeMax, c_unitPropCurrent);
        }
        lv_allies = UnitGroupAlliance(lv_allyComputerPlayer, c_unitAllianceAlly, RegionCircle(lv_bestPosition, 12.0), UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
        lv_enemyHeroes = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
        lv_enemyMinions = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterBiological), 0, 0, 0), 0);
        lv_allyMinions = UnitGroupFilter(null, c_playerAny, lv_allies, UnitFilter((1 << c_targetFilterBiological), 0, 0, 0), 0);
        libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_numEnemyHeroesNearContentionPoint = UnitGroupCount(lv_enemyHeroes, c_unitCountAlive);
        libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_numEnemyMinionsNearContentionPoint = UnitGroupCount(lv_enemyMinions, c_unitCountAlive);
        libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_contentionPointDangerRatio = libAIAI_gf_HeroAIDangerRatioEval(libGame_gv_players[lv_allyComputerPlayer].lv_faction, libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_contentionPoint, 10.0);
        libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_numAllyMinionsNearContentionPoint = UnitGroupCount(lv_allyMinions, c_unitCountAlive);
        lv_siegeMinions = UnitGroupFilter("MercLanerSiegeGiant", c_playerAny, lv_allies, UnitFilter(0, 0, 0, 0), 0);
        UnitGroupAddUnitGroup(lv_siegeMinions, UnitGroupFilter("CatapultMinion", c_playerAny, lv_allies, UnitFilter(0, 0, 0, 0), 0));
        libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_numNonSiegeAllyMinionsNearContentionPoint = (libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_laneData[lv_laneIndex].lv_numAllyMinionsNearContentionPoint - UnitGroupCount(lv_siegeMinions, c_unitCountAlive));
    }
}

bool libAIAI_gf_HeroAIAnyLaneNearDefeat (int lp_faction) {
    int autoA99764FE_ae;
    int autoEA2CC850_ae;

    // Variable Declarations
    int lv_allyComputerPlayer;
    int lv_townIndex;
    int lv_laneIndex;
    int[libGame_gv_laneMaxCount_C + 1] lv_numberOfTownsAlive;
    int[libGame_gv_laneMaxCount_C + 1] lv_numberOfTownsAliveAndUndamaged;

    // Variable Initialization

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamChaos;
    }
    autoA99764FE_ae = libGame_gv_townTownCount;
    lv_townIndex = 1;
    for ( ; lv_townIndex <= autoA99764FE_ae ; lv_townIndex += 1 ) {
        if ((libGame_gv_townTownData[lv_townIndex].lv_owner == lv_allyComputerPlayer) && (libGame_gv_townTownData[lv_townIndex].lv_townHallIndex > 0) && (UnitIsAlive(libGame_gv_townTownData[lv_townIndex].lv_structureUnits[libGame_gv_townTownData[lv_townIndex].lv_townHallIndex]) == true)) {
            lv_numberOfTownsAlive[libGame_gv_townTownData[lv_townIndex].lv_lane] += 1;
            if ((UnitGetPropertyFixed(libGame_gv_townTownData[lv_townIndex].lv_structureUnits[libGame_gv_townTownData[lv_townIndex].lv_townHallIndex], c_unitPropLifePercent, c_unitPropCurrent) >= 100.0)) {
                lv_numberOfTownsAliveAndUndamaged[libGame_gv_townTownData[lv_townIndex].lv_lane] += 1;
            }

        }

    }
    autoEA2CC850_ae = libGame_gv_laneCount;
    lv_laneIndex = 1;
    for ( ; lv_laneIndex <= autoEA2CC850_ae ; lv_laneIndex += 1 ) {
        if ((lv_numberOfTownsAliveAndUndamaged[lv_laneIndex] == 0) && (lv_numberOfTownsAlive[lv_laneIndex] <= 1)) {
            return true;
        }

    }
    return false;
}

void libAIAI_gf_HeroAIUpdateGameState (int lp_faction) {
    int autoDD6C3D15_ae;
    int autoDD6C3D15_ai;

    // Variable Declarations
    int lv_teamIndex;
    int lv_player;
    fixed lv_totalLevel;
    int lv_numberofPlayers;
    fixed lv_averageLevel;

    // Variable Initialization

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    if ((libAIAI_gv_aIHeroNeverEnterLateGame[(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_difficulty)] == true)) {
        libAIAI_gv_heroAITeamData[lv_teamIndex].lv_gameState = libAIAI_ge_HeroAIGameState_Act1;
        return ;
    }

    autoDD6C3D15_ae = libCore_gv_bALMaxPlayers;
    autoDD6C3D15_ai = 1;
    lv_player = 1;
    for ( ; ( (autoDD6C3D15_ai >= 0 && lv_player <= autoDD6C3D15_ae) || (autoDD6C3D15_ai <= 0 && lv_player >= autoDD6C3D15_ae) ) ; lv_player += autoDD6C3D15_ai ) {
        if ((libAIAI_gf_HeroAIIsPlayerActive(lv_player, 0) == true) && (libGame_gv_players[lv_player].lv_faction == lp_faction)) {
            lv_totalLevel += UnitLevel(libAIAI_gv_aIHeroes[lv_player].lv_currentHeroUnit);
            lv_numberofPlayers += 1;
        }

    }
    if ((lv_numberofPlayers == 0)) {
        return ;
    }

    lv_averageLevel = (lv_totalLevel / lv_numberofPlayers);
    if ((lv_averageLevel < libAIAI_gv_aIHeroAct2StartLevel[(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_difficulty)])) {
        libAIAI_gv_heroAITeamData[lv_teamIndex].lv_gameState = libAIAI_ge_HeroAIGameState_Act1;
    }
    else {
        if ((lv_averageLevel < libAIAI_gv_aIHeroAct3StartLevel[(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_difficulty)]) && (libAIAI_gf_HeroAIAnyLaneNearDefeat(libGame_ge_Faction_Order) == false) && (libAIAI_gf_HeroAIAnyLaneNearDefeat(libGame_ge_Faction_Chaos) == false)) {
            libAIAI_gv_heroAITeamData[lv_teamIndex].lv_gameState = libAIAI_ge_HeroAIGameState_Act2;
        }
        else {
            libAIAI_gv_heroAITeamData[lv_teamIndex].lv_gameState = libAIAI_ge_HeroAIGameState_Act3;
        }
    }
}

void libAIAI_gf_HeroAIEvalLanes (int lp_team) {
    int auto2212DC98_ae;
    int auto2212DC98_ai;
    int auto52DDA55A_ae;
    int auto52DDA55A_ai;
    int auto46794512_ae;
    int auto46794512_ai;
    int auto0E5447FD_ae;
    int auto0E5447FD_ai;

    // Variable Declarations
    playergroup lv_allyTeam;
    int lv_laneIndex;
    int lv_townIndex;
    int lv_structureIndex;
    int lv_townTeam;
    unit lv_hero;
    int lv_heroIndex;
    int lv_heroTeam;
    region lv_heroBaseRegion;
    int lv_campIndex;
    int lv_mercGroupIndex;
    int lv_numberofUnits;
    unitgroup lv_underworldBossGroup;
    unit lv_underworldBoss;

    // Variable Initialization
    lv_allyTeam = PlayerGroupEmpty();
    lv_underworldBossGroup = UnitGroupEmpty();

    // Implementation
    if ((lp_team == 0)) {
        lv_allyTeam = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
    }
    else {
        lv_allyTeam = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup;
    }
    if ((PlayerGroupCount(lv_allyTeam) == 0)) {
        return ;
    }

    if ((libAIAI_gv_heroAITeamData[(lp_team)].lv_nextLaneEvalUpdateTime > TimerGetElapsed(libGame_gv_gameTimer))) {
        return ;
    }
    else {
        libAIAI_gv_heroAITeamData[(lp_team)].lv_nextLaneEvalUpdateTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroLaneEvalFrequency);
    }
    auto2212DC98_ae = libGame_gv_laneCount;
    auto2212DC98_ai = 1;
    lv_laneIndex = 1;
    for ( ; ( (auto2212DC98_ai >= 0 && lv_laneIndex <= auto2212DC98_ae) || (auto2212DC98_ai <= 0 && lv_laneIndex >= auto2212DC98_ae) ) ; lv_laneIndex += auto2212DC98_ai ) {
        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numAllyTowns = 0;
        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numAllyHeroes = 0;
        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numAllyHumanHeroes = 0;
        PlayerGroupClear(libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_allyHeroes);
        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numEnemyTowns = 0;
        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numEnemyHeroes = 0;
        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numEnemySiegeGiants = 0;
        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numEnemyOgres = 0;
        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numEnemyOgreKings = 0;
        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numEnemyDragonKnights = 0;
        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numEnemyUnderworldBossSkulls = 0;
        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numAllySiegeGiants = 0;
        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numAllyOgres = 0;
        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numAllyOgreKings = 0;
        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numAllyDragonKnights = 0;
        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numAllyUnderworldBossSkulls = 0;
        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_eval = 0;
    }
    auto52DDA55A_ae = libGame_gv_townTownCount;
    auto52DDA55A_ai = 1;
    lv_townIndex = 1;
    for ( ; ( (auto52DDA55A_ai >= 0 && lv_townIndex <= auto52DDA55A_ae) || (auto52DDA55A_ai <= 0 && lv_townIndex >= auto52DDA55A_ae) ) ; lv_townIndex += auto52DDA55A_ai ) {
        auto46794512_ae = libGame_gv_townTownData[lv_townIndex].lv_structureCount;
        auto46794512_ai = 1;
        lv_structureIndex = 1;
        for ( ; ( (auto46794512_ai >= 0 && lv_structureIndex <= auto46794512_ae) || (auto46794512_ai <= 0 && lv_structureIndex >= auto46794512_ae) ) ; lv_structureIndex += auto46794512_ai ) {
            if ((UnitIsAlive(libGame_gv_townTownData[lv_townIndex].lv_structureUnits[lv_structureIndex]) == true) && (libGame_gv_townTownData[lv_townIndex].lv_structureTypes[lv_structureIndex] == libGame_ge_TownStructureTypes_TownHall)) {
                if ((libGame_gv_townTownData[lv_townIndex].lv_owner == libCore_gv_cOMPUTER_TeamOrder)) {
                    lv_townTeam = 0;
                }
                else {
                    lv_townTeam = 1;
                }
                if ((lv_townTeam == lp_team)) {
                    libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[libGame_gv_townTownData[lv_townIndex].lv_lane].lv_numAllyTowns += 1;
                }
                else {
                    libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[libGame_gv_townTownData[lv_townIndex].lv_lane].lv_numEnemyTowns += 1;
                }
            }

        }
    }
    libAIAI_gf_HeroAIUpdateHeroTracking(lp_team);
    libAIAI_gf_HeroAIUpdateLaneHeroCounts(lp_team);
    if ((libAIAI_gv_heroAITeamData[(lp_team)].lv_avoidPlayer != 0)) {
        libAIAI_gv_heroAITeamData[(lp_team)].lv_avoidLane = libAIAI_gv_heroAITeamData[(lp_team)].lv_heroTrackingData[libAIAI_gv_heroAITeamData[(lp_team)].lv_avoidPlayer].lv_lastSeenLane;
    }

    auto0E5447FD_ae = libMapM_gv_jungleNumberOfActiveMercGroups;
    auto0E5447FD_ai = 1;
    lv_mercGroupIndex = 1;
    for ( ; ( (auto0E5447FD_ai >= 0 && lv_mercGroupIndex <= auto0E5447FD_ae) || (auto0E5447FD_ai <= 0 && lv_mercGroupIndex >= auto0E5447FD_ae) ) ; lv_mercGroupIndex += auto0E5447FD_ai ) {
        if ((UnitIsAlive(libMapM_gv_jungleMiniMapLeader[lv_mercGroupIndex]) == true)) {
            lv_campIndex = libMapM_gf_JungleGetMercCampForUnit(libMapM_gv_jungleMiniMapLeader[lv_mercGroupIndex]);
            if ((libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mapDataCampType == libMapM_ge_JungleCampTypes_MercCamp)) {
                lv_laneIndex = libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mercLaneLastSpawnedIn[libGame_gf_TeamNumberOfPlayer(PlayerGroupPlayer(lv_allyTeam, 1))];
                lv_numberofUnits = UnitGroupCount(libMapM_gv_jungleMiniMapIconGroup[lv_mercGroupIndex], c_unitCountAlive);
                if ((libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mapDataMercSpawnType == libMapM_ge_JungleCampMercTypes_SiegeGiants)) {
                    if ((PlayerGroupHasPlayer(lv_allyTeam, UnitGetOwner(libMapM_gv_jungleMiniMapLeader[lv_mercGroupIndex])) == true)) {
                        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numAllySiegeGiants += lv_numberofUnits;
                    }
                    else {
                        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numEnemySiegeGiants += lv_numberofUnits;
                    }
                }
                else if ((libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mapDataMercSpawnType == libMapM_ge_JungleCampMercTypes_Ogres)) {
                    if ((PlayerGroupHasPlayer(lv_allyTeam, UnitGetOwner(libMapM_gv_jungleMiniMapLeader[lv_mercGroupIndex])) == true)) {
                        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numAllyOgres += lv_numberofUnits;
                    }
                    else {
                        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numEnemyOgres += lv_numberofUnits;
                    }
                }
                else if ((libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mapDataMercSpawnType == libMapM_ge_JungleCampMercTypes_GraveGolem)) {
                    if ((PlayerGroupHasPlayer(lv_allyTeam, UnitGetOwner(libMapM_gv_jungleMiniMapLeader[lv_mercGroupIndex])) == true)) {
                        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numAllyOgreKings += lv_numberofUnits;
                    }
                    else {
                        libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numEnemyOgreKings += lv_numberofUnits;
                    }
                }
            }

        }

    }
    if ((UnitIsValid(libAIAI_gv_heroAIDragonShireDragon) == true)) {
        lv_laneIndex = AILaneWaypointGetClosestLane(UnitGetPosition(libAIAI_gv_heroAIDragonShireDragon));
        if ((PlayerGroupHasPlayer(lv_allyTeam, UnitGetOwner(libAIAI_gv_heroAIDragonShireDragon)) == true)) {
            libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numAllyDragonKnights += 1;
        }
        else {
            libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numEnemyDragonKnights += 1;
        }
    }

    if (((libAIAI_gv_heroAIUnderworldBossStatus[(0)].lv_state == libAIAI_ge_HeroAIUnderworldBossState_Warning) || (libAIAI_gv_heroAIUnderworldBossStatus[(0)].lv_state == libAIAI_ge_HeroAIUnderworldBossState_Spawned))) {
        lv_laneIndex = libAIAI_gv_heroAIUnderworldBossStatus[(0)].lv_lane;
        if ((lp_team == 0)) {
            libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numAllyUnderworldBossSkulls = libAIAI_gv_heroAIUnderworldStatus.lv_skullsCollected[(0)];
        }
        else {
            libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numEnemyUnderworldBossSkulls = libAIAI_gv_heroAIUnderworldStatus.lv_skullsCollected[(0)];
        }
    }

    if (((libAIAI_gv_heroAIUnderworldBossStatus[(1)].lv_state == libAIAI_ge_HeroAIUnderworldBossState_Warning) || (libAIAI_gv_heroAIUnderworldBossStatus[(1)].lv_state == libAIAI_ge_HeroAIUnderworldBossState_Spawned))) {
        lv_laneIndex = libAIAI_gv_heroAIUnderworldBossStatus[(1)].lv_lane;
        if ((lp_team == 0)) {
            libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numEnemyUnderworldBossSkulls = libAIAI_gv_heroAIUnderworldStatus.lv_skullsCollected[(1)];
        }
        else {
            libAIAI_gv_heroAITeamData[(lp_team)].lv_laneData[lv_laneIndex].lv_numAllyUnderworldBossSkulls = libAIAI_gv_heroAIUnderworldStatus.lv_skullsCollected[(1)];
        }
    }

    libAIAI_gf_HeroAIUpdateLaneEvals(lp_team);
    libAIAI_gf_HeroAIUpdateFrontHumanAlly(lp_team);
    libAIAI_gf_HeroAIUpdateFrontMinion(lp_team);
    libAIAI_gf_HeroAIUpdateFrontEnemyMinion(lp_team);
    libAIAI_gf_HeroAIUpdateContentionPoints(lp_team);
}

fixed libAIAI_gf_HeroAICalcLaneEval (int lp_numAllyTowns, int lp_numAllyHeroes, int lp_numEnemyHeroes, int lp_numEnemySiegeGiants, int lp_numEnemyOgres, int lp_numEnemyOgreKings, int lp_numEnemyDragonKnights, int lp_numEnemyUnderworldBossSkulls, fixed lp_underestimateEnemyPercent) {
    // Variable Declarations
    fixed lv_eval;
    fixed lv_positiveEval;
    fixed lv_negativeEval;

    // Variable Initialization

    // Implementation
    lv_positiveEval += (lp_numAllyTowns * 5.0);
    lv_positiveEval += (6 * PowI(lp_numAllyHeroes, 2.0));
    lv_negativeEval += (4 * PowI(lp_numEnemyHeroes, 2.0));
    lv_negativeEval += (3 * lp_numEnemySiegeGiants);
    lv_negativeEval += (3 * lp_numEnemyOgres);
    lv_negativeEval += (12 * lp_numEnemyOgreKings);
    lv_negativeEval += (20 * lp_numEnemyDragonKnights);
    lv_negativeEval += (1 * lp_numEnemyUnderworldBossSkulls);
    return (lv_positiveEval - (lv_negativeEval * ((100.0 - lp_underestimateEnemyPercent) / 100.0)));
}

void libAIAI_gf_HeroAIUpdateTeamDifficulty (int lp_faction) {
    int autoA0E34A32_ae;
    int autoA0E34A32_ai;

    // Variable Declarations
    int lv_teamIndex;
    int lv_playerIndex;
    int lv_lowestDifficulty;

    // Variable Initialization
    lv_lowestDifficulty = libAIAI_ge_HeroAIDifficulty_HeroAIElite;

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    autoA0E34A32_ae = libCore_gv_bALMaxPlayers;
    autoA0E34A32_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (autoA0E34A32_ai >= 0 && lv_playerIndex <= autoA0E34A32_ae) || (autoA0E34A32_ai <= 0 && lv_playerIndex >= autoA0E34A32_ae) ) ; lv_playerIndex += autoA0E34A32_ai ) {
        if ((libAIAI_gv_aIHeroes[lv_playerIndex].lv_difficulty != libAIAI_ge_HeroAIDifficulty_Null) && (libGame_gv_players[lv_playerIndex].lv_faction == lp_faction) && ((PlayerType(lv_playerIndex) != c_playerTypeUser) || (PlayerStatus(lv_playerIndex) == c_playerStatusLeft)) && ((libAIAI_gv_aIHeroes[lv_playerIndex].lv_difficulty) < (lv_lowestDifficulty))) {
            lv_lowestDifficulty = libAIAI_gv_aIHeroes[lv_playerIndex].lv_difficulty;
        }

    }
    libAIAI_gv_heroAITeamData[lv_teamIndex].lv_difficulty = lv_lowestDifficulty;
}

bool libAIAI_gf_HeroAIExcludeHeroFromLaneEvals (int lp_trigPlayer) {
    // Implementation
    if ((UnitGetType(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) == "HeroAbathur")) {
        return true;
    }

    return false;
}

bool libAIAI_gf_HeroAIHaveEnemiesBeenSeenInLane (int lp_faction) {
    int autoD3DE3D3B_ae;

    // Variable Declarations
    int lv_teamIndex;
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    autoD3DE3D3B_ae = libCore_gv_bALMaxPlayers;
    lv_playerIndex = 1;
    for ( ; lv_playerIndex <= autoD3DE3D3B_ae ; lv_playerIndex += 1 ) {
        if ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 0) == true) && (libGame_gv_players[lv_playerIndex].lv_faction != lp_faction) && (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_heroTrackingData[lv_playerIndex].lv_lastSeenLane > 0)) {
            return true;
        }

    }
    return false;
}

void libAIAI_gf_HeroAIPlayerPingsHero (int lp_pingingPlayer, unit lp_pingedHero) {
    int autoAE56CB48_ae;
    int autoAE56CB48_ai;

    // Variable Declarations
    int lv_teamIndex;
    int lv_testPingIndex;
    int lv_newPingIndex;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIIsPlayerActive(lp_pingingPlayer, 1) == false)) {
        return ;
    }

    if ((libNtve_gf_PlayerIsEnemy(lp_pingingPlayer, UnitGetOwner(lp_pingedHero), libNtve_ge_PlayerRelation_Ally) == true)) {
        return ;
    }

    lv_teamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_pingingPlayer);
    autoAE56CB48_ae = libAIAI_gv_heroAIMaxHeroPingCount;
    autoAE56CB48_ai = 1;
    lv_testPingIndex = 1;
    for ( ; ( (autoAE56CB48_ai >= 0 && lv_testPingIndex <= autoAE56CB48_ae) || (autoAE56CB48_ai <= 0 && lv_testPingIndex >= autoAE56CB48_ae) ) ; lv_testPingIndex += autoAE56CB48_ai ) {
        if ((libAIAI_gv_heroAITeamHeroPingData[lv_teamIndex].lv_heroPings[lv_testPingIndex].lv_pingExpireTime <= TimerGetElapsed(libGame_gv_gameTimer))) {
            lv_newPingIndex = lv_testPingIndex;
            break;
        }

    }
    if ((lv_newPingIndex == 0)) {
        return ;
    }

    libAIAI_gv_heroAITeamHeroPingData[lv_teamIndex].lv_heroPings[lv_newPingIndex].lv_pingExpireTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroPingDuration);
    libAIAI_gv_heroAITeamHeroPingData[lv_teamIndex].lv_heroPings[lv_newPingIndex].lv_playerWhoPinged = lp_pingingPlayer;
    libAIAI_gv_heroAITeamHeroPingData[lv_teamIndex].lv_heroPings[lv_newPingIndex].lv_pingedHero = lp_pingedHero;
}

void libAIAI_gf_HeroAIFocusPingedHeroLogic (int lp_faction) {
    int auto72F2B05B_ae;

    // Variable Declarations
    int lv_teamIndex;
    int lv_pingIndex;

    // Variable Initialization

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    auto72F2B05B_ae = libAIAI_gv_heroAIMaxHeroPingCount;
    lv_pingIndex = 1;
    for ( ; lv_pingIndex <= auto72F2B05B_ae ; lv_pingIndex += 1 ) {
        if ((libAIAI_gv_heroAITeamHeroPingData[lv_teamIndex].lv_heroPings[lv_pingIndex].lv_pingExpireTime > TimerGetElapsed(libGame_gv_gameTimer)) && (libAIAI_gf_HeroAIHeroCanBeFocused(libAIAI_gv_heroAITeamHeroPingData[lv_teamIndex].lv_heroPings[lv_pingIndex].lv_pingedHero) == true)) {
            libAIAI_gf_HeroAIStartFocusHero(libAIAI_gv_heroAITeamHeroPingData[lv_teamIndex].lv_heroPings[lv_pingIndex].lv_playerWhoPinged, libAIAI_gv_heroAITeamHeroPingData[lv_teamIndex].lv_heroPings[lv_pingIndex].lv_pingedHero);
        }

    }
}

void libAIAI_gf_HeroAIFocusWeakHeroLogic (int lp_faction) {
    int autoBD4E1CA2_ae;
    int autoBD4E1CA2_ai;

    // Variable Declarations
    int lv_teamIndex;
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    if ((libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_gv_heroAITeamData[lv_teamIndex].lv_difficulty] == false)) {
        return ;
    }

    autoBD4E1CA2_ae = libCore_gv_bALMaxPlayers;
    autoBD4E1CA2_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (autoBD4E1CA2_ai >= 0 && lv_playerIndex <= autoBD4E1CA2_ae) || (autoBD4E1CA2_ai <= 0 && lv_playerIndex >= autoBD4E1CA2_ae) ) ; lv_playerIndex += autoBD4E1CA2_ai ) {
        if ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 0) == true) && (libGame_gv_players[lv_playerIndex].lv_faction != lp_faction) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= libAIAI_gv_aIHeroFocusHeroHealth) && (libAIAI_gf_HeroAIHeroCanBeFocused(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit) == true)) {
            libAIAI_gf_HeroAIStartFocusHero(-1, libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit);
        }

    }
}

void libAIAI_gf_HeroAIInitiateTeamFightLogic (int lp_faction) {
    playergroup autoE1BA9E32_g;
    int autoE1BA9E32_p;
    unitgroup autoE07F1330_g;
    int autoE07F1330_u;
    unitgroup autoB8870054_g;
    int autoB8870054_u;

    // Variable Declarations
    int lv_playerIndex;
    region lv_nearbyRegion;
    unitgroup lv_allyHeroes;
    unitgroup lv_enemyHeroes;
    unit lv_allyHero;
    unit lv_enemyHero;
    fixed lv_distancetoHero;
    unit lv_bestTarget;
    fixed lv_bestTargetDistance;

    // Variable Initialization
    lv_allyHeroes = UnitGroupEmpty();
    lv_enemyHeroes = UnitGroupEmpty();
    lv_bestTargetDistance = 524287.0;

    // Implementation
    autoE1BA9E32_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAITeamIndexOfFaction(lp_faction)].lv_aIPlayers; 
    autoE1BA9E32_p = 1;
    for ( ; autoE1BA9E32_p <= PlayerGroupCount(autoE1BA9E32_g) ; autoE1BA9E32_p += (lv_playerIndex == PlayerGroupPlayer(autoE1BA9E32_g, autoE1BA9E32_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoE1BA9E32_g, autoE1BA9E32_p);
        if ((libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentLane > 0)) {
            lv_nearbyRegion = RegionCircle(UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit), (libAIAI_gv_aIHeroFocusHeroRecruitDistance - 3.0));
            lv_enemyHeroes = UnitGroupAlliance(lv_playerIndex, c_unitAllianceEnemy, lv_nearbyRegion, libCore_gv_filtersHeroicandnotInvulnerableorStasis, 0);
            lv_allyHeroes = UnitGroupAlliance(lv_playerIndex, c_unitAllianceAlly, lv_nearbyRegion, libCore_gv_filtersHeroicandnotStasis, 0);
            autoE07F1330_g = lv_allyHeroes;
            autoE07F1330_u = 1;
            for ( ; autoE07F1330_u <= UnitGroupCount(autoE07F1330_g, c_unitCountAll) ; autoE07F1330_u += (lv_allyHero == UnitGroupUnit(autoE07F1330_g, autoE07F1330_u)) ) {
                lv_allyHero = UnitGroupUnit(autoE07F1330_g, autoE07F1330_u);
                if (((UnitGetOwner(lv_allyHero) > libCore_gv_bALMaxPlayers) || (libAIAI_gf_HeroAIIsPlayerActive(UnitGetOwner(lv_allyHero), 2) == false) || (libAIAI_gv_aIHeroes[UnitGetOwner(lv_allyHero)].lv_currentLane <= 0) || (UnitLevel(libAIAI_gv_aIHeroes[UnitGetOwner(lv_allyHero)].lv_currentHeroUnit) < libAIAI_gv_aIHeroMinAggresiveFocusHeroLevel) || ((libAIAI_gv_aIHeroAvoidTargettingHeroes[(libAIAI_gv_aIHeroes[lv_playerIndex].lv_difficulty)] == true) && (UnitLevel(libAIAI_gv_aIHeroes[UnitGetOwner(lv_allyHero)].lv_currentHeroUnit) < libAIAI_gv_aIHeroAct2StartLevel[(libAIAI_gv_aIHeroes[lv_playerIndex].lv_difficulty)])) || (libAIAI_gv_aIHeroEnterTeamFights[(libAIAI_gv_aIHeroes[lv_playerIndex].lv_difficulty)] == false))) {
                    UnitGroupRemove(lv_allyHeroes, lv_allyHero);
                }

            }
            if (((UnitGroupCount(lv_enemyHeroes, c_unitCountAlive) == 0) || (UnitGroupCount(lv_allyHeroes, c_unitCountAlive) < 3) || (UnitGroupCount(lv_enemyHeroes, c_unitCountAlive) > UnitGroupCount(lv_allyHeroes, c_unitCountAlive)))) {
                continue;
            }

            autoB8870054_g = lv_enemyHeroes;
            autoB8870054_u = 1;
            for ( ; autoB8870054_u <= UnitGroupCount(autoB8870054_g, c_unitCountAll) ; autoB8870054_u += (lv_enemyHero == UnitGroupUnit(autoB8870054_g, autoB8870054_u)) ) {
                lv_enemyHero = UnitGroupUnit(autoB8870054_g, autoB8870054_u);
                lv_distancetoHero = DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit), UnitGetPosition(lv_enemyHero));
                if ((libAIAI_gf_HeroAIHeroCanBeFocused(lv_enemyHero) == true) && (lv_distancetoHero < lv_bestTargetDistance)) {
                    lv_bestTarget = lv_enemyHero;
                    lv_bestTargetDistance = lv_distancetoHero;
                }

            }
            if ((UnitIsValid(lv_bestTarget) == true)) {
                libAIAI_gf_HeroAIStartFocusHero(-1, lv_bestTarget);
                break;
            }

        }

    }
}

void libAIAI_gf_HeroAIStartFocusHero (int lp_pingingPlayer, unit lp_targetHero) {
    int autoDE2995F1_ae;
    int autoDE2995F1_ai;
    unitgroup auto387CC239_g;
    int auto387CC239_u;

    // Variable Declarations
    int lv_playerIndex;
    int lv_speakingPlayer;
    region lv_nearbyRegion;
    unitgroup lv_enemies;
    unitgroup lv_enemyHeroes;
    unitgroup lv_enemyTowers;
    unitgroup lv_nearbyAllyHeroes;
    unit lv_allyHero;
    playergroup lv_nearbyAllyPlayers;
    unit lv_currentTarget;
    unit lv_oldTargetHero;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_enemyHeroes = UnitGroupEmpty();
    lv_enemyTowers = UnitGroupEmpty();
    lv_nearbyAllyHeroes = UnitGroupEmpty();
    lv_nearbyAllyPlayers = PlayerGroupEmpty();

    // Implementation
    autoDE2995F1_ae = libCore_gv_bALMaxPlayers;
    autoDE2995F1_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (autoDE2995F1_ai >= 0 && lv_playerIndex <= autoDE2995F1_ae) || (autoDE2995F1_ai <= 0 && lv_playerIndex >= autoDE2995F1_ae) ) ; lv_playerIndex += autoDE2995F1_ai ) {
        if ((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lv_playerIndex) == true) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_targetHero != lp_targetHero) && (libNtve_gf_PlayerIsEnemy(lv_playerIndex, UnitGetOwner(lp_targetHero), libNtve_ge_PlayerRelation_Enemy) == true) && (libAIAI_gf_HeroAIHeroWantsToFocusHero(lv_playerIndex, lp_targetHero) == true) && (libAIAI_gf_HeroAIHeroAvailableToStartFocus(lv_playerIndex) == true)) {
            lv_oldTargetHero = libAIAI_gv_aIHeroes[lv_playerIndex].lv_targetHero;
            libAIAI_gv_aIHeroes[lv_playerIndex].lv_targetHero = lp_targetHero;
            if ((libAIAI_gf_HeroAIShouldGiveUpOnFocusHero(lv_playerIndex) == false)) {
                lv_speakingPlayer = lv_playerIndex;
                libAIAI_gf_HeroAIChangeState(lv_playerIndex, libAIAI_ge_HeroAIStates_HSFocusHero);
                libAIAI_gv_aIHeroes[lv_playerIndex].lv_targetHeroCheckPosition = null;
                libAIAI_gv_aIHeroes[lv_playerIndex].lv_focusHeroTimeout = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroFocusHeroMaxChaseTime);
                HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, OrderTargetingUnit(libAIAI_gv_aIHeroes[lv_playerIndex].lv_attackAbility, libAIAI_gv_aIHeroes[lv_playerIndex].lv_targetHero), c_orderQueueReplace);
            }
            else {
                libAIAI_gv_aIHeroes[lv_playerIndex].lv_targetHero = lv_oldTargetHero;
            }
        }

    }
    if ((lp_pingingPlayer <= 0) && (lv_speakingPlayer > 1) && (TimerGetElapsed(libGame_gv_gameTimer) > (libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lv_speakingPlayer)].lv_lastTimePlayedAttackVO + libAIAI_gv_aIHeroVODelay))) {
        lv_nearbyRegion = RegionCircle(UnitGetPosition(lp_targetHero), 12.0);
        lv_enemies = UnitGroupAlliance(lv_speakingPlayer, c_unitAllianceEnemy, lv_nearbyRegion, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
        lv_enemyHeroes = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
        lv_enemyTowers = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, 0, 0), 0);
        if ((UnitGroupCount(lv_enemyHeroes, c_unitCountAlive) == 1) && (UnitGroupCount(lv_enemyTowers, c_unitCountAlive) == 0)) {
            lv_nearbyAllyHeroes = UnitGroupAlliance(lv_speakingPlayer, c_unitAllianceAlly, RegionCircle(UnitGetPosition(libAIAI_gv_aIHeroes[lv_speakingPlayer].lv_currentHeroUnit), 14.0), libCore_gv_filtersHeroic, 0);
            auto387CC239_g = lv_nearbyAllyHeroes;
            auto387CC239_u = 1;
            for ( ; auto387CC239_u <= UnitGroupCount(auto387CC239_g, c_unitCountAll) ; auto387CC239_u += (lv_allyHero == UnitGroupUnit(auto387CC239_g, auto387CC239_u)) ) {
                lv_allyHero = UnitGroupUnit(auto387CC239_g, auto387CC239_u);
                PlayerGroupAdd(lv_nearbyAllyPlayers, UnitGetOwner(lv_allyHero));
            }
            libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_AIAttack, lv_speakingPlayer, lv_nearbyAllyPlayers);
            libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lv_speakingPlayer)].lv_lastTimePlayedAttackVO = TimerGetElapsed(libGame_gv_gameTimer);
        }

    }

}

bool libAIAI_gf_HeroAIShouldGiveUpOnFocusHero (int lp_trigPlayer) {
    // Variable Declarations
    point lv_ourPosition;
    point lv_targetPosition;
    fixed lv_distanceToTarget;

    // Variable Initialization

    // Implementation
    libAIAI_gf_HeroAIEval(lp_trigPlayer);
    lv_ourPosition = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    lv_targetPosition = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero);
    lv_distanceToTarget = DistanceBetweenPoints(lv_ourPosition, lv_targetPosition);
    if (((lv_distanceToTarget > libAIAI_gv_aIHeroFocusHeroGiveUpDistance) || (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_startOffensiveHealth) || ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane > 0) && (DistanceBetweenPoints(libGame_gv_players[lp_trigPlayer].lv_spawnPoint, lv_ourPosition) > 30.0) && (DistanceBetweenPoints(lv_ourPosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroClosestLanePoint) > libAIAI_gv_aIHeroLaneLeashDistance)) || (libAIAI_gf_AIIsPointBehindEnemyGateEstimate(lv_ourPosition, lp_trigPlayer, lv_targetPosition) == true) || (((libAIAI_gf_HeroAIUnitProtectedByTower(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero, libAIAI_gv_aIHeroCloseToTowerDistance) == true) || (libAIAI_gf_HeroAICloseToAnyEnemyTowerOrCoreWithoutEnoughHelp(lp_trigPlayer) == true)) && ((lv_distanceToTarget > libAIAI_gf_AIGetActiveWeaponRange(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) || (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero, c_unitPropLifePercent, c_unitPropCurrent) > 10.0))) || (UnitBehaviorCount(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero, "HomeShieldProtection") > 0) || (libNtve_gf_UnitIsInvulnerable(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero) == true) || (libAIAI_gf_HeroAIBeingTargettedByDangerousAbility(lp_trigPlayer) == true) || ((libMapM_gv_mMSafeRegions[libGame_gf_EnemyTeamNumberOfPlayer(lp_trigPlayer)] != null) && (libNtve_gf_UnitInRegion(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_targetHero, libMapM_gv_mMSafeRegions[libGame_gf_EnemyTeamNumberOfPlayer(lp_trigPlayer)]) == true)))) {
        return true;
    }

    if ((UnitLevel(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) < libAIAI_gv_aIHeroMinAggresiveFocusHeroLevel)) {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval > (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyHeroEval + 200.0))) {
            return true;
        }

    }
    else {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval > (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyHeroEval + 1300.0))) {
            return true;
        }

    }
    if ((AIPointInGreatDanger(lp_trigPlayer, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) == true)) {
        return true;
    }

    return false;
}

bool libAIAI_gf_HeroAIHeroCanBeFocused (unit lp_targetHero) {
    // Variable Declarations
    int lv_enemyComputerPlayer;
    int lv_enemyTeamNumber;

    // Variable Initialization

    // Implementation
    if ((UnitIsValid(lp_targetHero) == false)) {
        return false;
    }

    if ((libGame_gv_players[UnitGetOwner(lp_targetHero)].lv_faction == libGame_ge_Faction_Order)) {
        lv_enemyComputerPlayer = libCore_gv_cOMPUTER_TeamChaos;
        lv_enemyTeamNumber = libGame_gv_teamChaosIndex_C;
    }
    else {
        lv_enemyComputerPlayer = libCore_gv_cOMPUTER_TeamOrder;
        lv_enemyTeamNumber = libGame_gv_teamOrderIndex_C;
    }
    if ((libNtve_gf_UnitIsVisibleToPlayer(lp_targetHero, lv_enemyComputerPlayer) == false)) {
        return false;
    }

    if (((UnitGetOwner(lp_targetHero) > libCore_gv_bALMaxPlayers) || (libNtve_gf_UnitIsInvulnerable(lp_targetHero) == true) || (libAIAI_gf_HeroAIUnitProtectedByTower(lp_targetHero, libAIAI_gv_aIHeroFarFromTowerDistance) == true) || (libAIAI_gf_HeroAIIsTargetBehindGateRelativeToAttacker(lp_targetHero, null) == true) || ((libMapM_gv_mMSafeRegions[lv_enemyTeamNumber] != null) && (libNtve_gf_UnitInRegion(lp_targetHero, libMapM_gv_mMSafeRegions[lv_enemyTeamNumber]) == true)))) {
        return false;
    }

    return true;
}

bool libAIAI_gf_HeroAIHeroAvailableToStartFocus (int lp_trigPlayer) {
    // Variable Declarations
    fixed lv_weaponRange;
    fixed lv_distanceToCurrentTarget;
    fixed lv_distanceToNewTarget;
    fixed lv_currentTargetHealth;
    fixed lv_newTargetHealth;
    fixed lv_currentTargetEval;
    fixed lv_newTargetEval;

    // Variable Initialization

    // Implementation
    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextFocusHeroCheckTime > TimerGetElapsed(libGame_gv_gameTimer)) || (libGame_gv_players[lp_trigPlayer].lv_isDead == true) || (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_startOffensiveHealth) || (UnitIsValid(libGame_gv_players[lp_trigPlayer].lv_activeVehicle) == true) || (libAIAI_gf_HeroAIIsPlayerInsideEnemyTown(lp_trigPlayer) == true) || (libAIAI_gf_HeroAICloseToAnyEnemyTowerOrCoreWithoutEnoughHelp(lp_trigPlayer) == true) || (libAIAI_gf_HeroAIBeingTargettedByDangerousAbility(lp_trigPlayer) == true))) {
        return false;
    }

    libAIAI_gf_HeroAIEval(lp_trigPlayer);
    if ((UnitLevel(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) < libAIAI_gv_aIHeroMinAggresiveFocusHeroLevel)) {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyHeroEval)) {
            return false;
        }

    }
    else {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval > (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyHeroEval + 1000.0))) {
            return false;
        }

    }
    if ((AIPointInGreatDanger(lp_trigPlayer, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) == true)) {
        return false;
    }

    return true;
}

bool libAIAI_gf_HeroAIHeroWantsToFocusHero (int lp_trigPlayer, unit lp_targetHero) {
    // Implementation
    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), UnitGetPosition(lp_targetHero)) > libAIAI_gv_aIHeroFocusHeroRecruitDistance)) {
        return false;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane > 0)) {
        libGame_gf_CalculateClosestLaneDataForLane(UnitGetPosition(lp_targetHero), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane);
        if ((libGame_gv_closestLaneData.lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_closestDist > libAIAI_gv_aIHeroCloseToLaneDistance)) {
            return false;
        }

    }

    if ((AIPointInGreatDanger(lp_trigPlayer, UnitGetPosition(lp_targetHero)) == true)) {
        return false;
    }

    return true;
}

unit libAIAI_gf_HeroAIFindBestFocusHeroTarget (int lp_trigPlayer) {
    unitgroup auto151A5EFB_g;
    int auto151A5EFB_u;

    // Variable Declarations
    unit lv_enemyHero;
    fixed lv_targetEval;
    fixed lv_bestTargetEval;
    unit lv_bestTarget;

    // Variable Initialization
    lv_bestTargetEval = 524287.0;

    // Implementation
    libAIAI_gf_HeroAIEval(lp_trigPlayer);
    auto151A5EFB_g = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroes;
    auto151A5EFB_u = 1;
    for ( ; auto151A5EFB_u <= UnitGroupCount(auto151A5EFB_g, c_unitCountAll) ; auto151A5EFB_u += (lv_enemyHero == UnitGroupUnit(auto151A5EFB_g, auto151A5EFB_u)) ) {
        lv_enemyHero = UnitGroupUnit(auto151A5EFB_g, auto151A5EFB_u);
        lv_targetEval = libAIAI_gf_HeroAIEvaluateTarget(lp_trigPlayer, lv_enemyHero, libAIAI_gv_aIHeroChangeTargetDistanceWeight);
        if ((lv_targetEval < lv_bestTargetEval) && (libAIAI_gf_HeroAIHeroCanBeFocused(lv_enemyHero) == true) && (libAIAI_gf_HeroAIHeroWantsToFocusHero(lp_trigPlayer, lv_enemyHero) == true)) {
            lv_bestTargetEval = lv_targetEval;
            lv_bestTarget = lv_enemyHero;
        }

    }
    return lv_bestTarget;
}

void libAIAI_gf_HeroAIFocusPingedCore (int lp_faction) {
    // Variable Declarations
    int lv_teamIndex;

    // Variable Initialization

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    if ((libAIAI_gv_heroAITeamFocusCorePingData[lv_teamIndex].lv_pingExpireTime > TimerGetElapsed(libGame_gv_gameTimer))) {
        libAIAI_gf_HeroAIStartFocusCore(libAIAI_gv_heroAITeamFocusCorePingData[lv_teamIndex].lv_playerWhoPinged, libAIAI_gv_heroAITeamFocusCorePingData[lv_teamIndex].lv_pingedCore);
    }

}

void libAIAI_gf_HeroAIFocusWeakCore (int lp_faction) {
    // Variable Declarations
    int lv_teamIndex;
    int lv_playerIndex;
    unit lv_enemyCore;

    // Variable Initialization

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
        lv_enemyCore = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core;
    }
    else {
        lv_teamIndex = (1);
        lv_enemyCore = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core;
    }
    if ((libAIAI_gv_aIHeroFocusWeakCore[libAIAI_gv_heroAITeamData[lv_teamIndex].lv_difficulty] == false)) {
        return ;
    }

    if ((UnitGetPropertyFixed(lv_enemyCore, c_unitPropLifePercent, c_unitPropCurrent) <= libAIAI_gv_aIHeroFocusCoreAlwaysHealth)) {
        libAIAI_gf_HeroAIStartFocusCore(-1, lv_enemyCore);
    }
    else {
        if ((UnitGetPropertyFixed(lv_enemyCore, c_unitPropLifePercent, c_unitPropCurrent) <= libAIAI_gv_aIHeroFocusCoreDistractedHeatlh) && (libAIAI_gf_HeroAIEnemiesNearBuilding(lv_enemyCore) == true)) {
            libAIAI_gf_HeroAIStartFocusCore(-1, lv_enemyCore);
        }

    }
}

void libAIAI_gf_HeroAIStartFocusCore (int lp_pingingPlayer, unit lp_targetCore) {
    int autoA64FB518_ae;
    int autoA64FB518_ai;
    unitgroup autoADC5EC5C_g;
    int autoADC5EC5C_u;

    // Variable Declarations
    int lv_playerIndex;
    int lv_speakingPlayer;
    region lv_nearbyRegion;
    unitgroup lv_enemies;
    unitgroup lv_enemyHeroes;
    unitgroup lv_nearbyAllyHeroes;
    unit lv_allyHero;
    playergroup lv_nearbyAllyPlayers;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_enemyHeroes = UnitGroupEmpty();
    lv_nearbyAllyHeroes = UnitGroupEmpty();
    lv_nearbyAllyPlayers = PlayerGroupEmpty();

    // Implementation
    autoA64FB518_ae = libCore_gv_bALMaxPlayers;
    autoA64FB518_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (autoA64FB518_ai >= 0 && lv_playerIndex <= autoA64FB518_ae) || (autoA64FB518_ai <= 0 && lv_playerIndex >= autoA64FB518_ae) ) ; lv_playerIndex += autoA64FB518_ai ) {
        if ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 2) == true) && (libNtve_gf_PlayerIsEnemy(lv_playerIndex, UnitGetOwner(lp_targetCore), libNtve_ge_PlayerRelation_Enemy) == true) && (libAIAI_gf_HeroAIShouldFocusCore(lv_playerIndex, lp_targetCore) == true)) {
            lv_speakingPlayer = lv_playerIndex;
            libAIAI_gf_HeroAIChangeState(lv_playerIndex, libAIAI_ge_HeroAIStates_HSFocusCore);
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, OrderTargetingUnit(libAIAI_gv_aIHeroes[lv_playerIndex].lv_attackAbility, lp_targetCore), c_orderQueueReplace);
        }

    }
    if ((lp_pingingPlayer <= 0) && (lv_speakingPlayer > 1) && (TimerGetElapsed(libGame_gv_gameTimer) > (libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lv_speakingPlayer)].lv_lastTimePlayedAttackVO + libAIAI_gv_aIHeroVODelay))) {
        lv_nearbyRegion = RegionCircle(UnitGetPosition(lp_targetCore), 12.0);
        lv_enemies = UnitGroupAlliance(lv_speakingPlayer, c_unitAllianceEnemy, lv_nearbyRegion, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
        lv_enemyHeroes = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
        if ((UnitGroupCount(lv_enemyHeroes, c_unitCountAlive) <= 1)) {
            lv_nearbyAllyHeroes = UnitGroupAlliance(lv_speakingPlayer, c_unitAllianceAlly, RegionCircle(UnitGetPosition(libAIAI_gv_aIHeroes[lv_speakingPlayer].lv_currentHeroUnit), 14.0), libCore_gv_filtersHeroic, 0);
            autoADC5EC5C_g = lv_nearbyAllyHeroes;
            autoADC5EC5C_u = 1;
            for ( ; autoADC5EC5C_u <= UnitGroupCount(autoADC5EC5C_g, c_unitCountAll) ; autoADC5EC5C_u += (lv_allyHero == UnitGroupUnit(autoADC5EC5C_g, autoADC5EC5C_u)) ) {
                lv_allyHero = UnitGroupUnit(autoADC5EC5C_g, autoADC5EC5C_u);
                PlayerGroupAdd(lv_nearbyAllyPlayers, UnitGetOwner(lv_allyHero));
            }
            libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_AIAttack, lv_speakingPlayer, lv_nearbyAllyPlayers);
            libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lv_speakingPlayer)].lv_lastTimePlayedAttackVO = TimerGetElapsed(libGame_gv_gameTimer);
        }

    }

}

bool libAIAI_gf_HeroAIShouldFocusCore (int lp_trigPlayer, unit lp_targetCore) {
    // Implementation
    if ((libAIAI_gf_HeroAIHeroWillingToFocusCore(lp_trigPlayer, lp_targetCore) != true)) {
        return false;
    }

    if ((UnitGetPropertyFixed(lp_targetCore, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroFocusCoreAlwaysHealth)) {
        libAIAI_gf_HeroAIEval(lp_trigPlayer);
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyHeroEval)) {
            return false;
        }

    }

    return true;
}

bool libAIAI_gf_HeroAIShouldGiveUpOnFocusCore (int lp_trigPlayer, unit lp_targetCore) {
    // Implementation
    if ((libAIAI_gf_HeroAIHeroWillingToFocusCore(lp_trigPlayer, lp_targetCore) != true)) {
        return true;
    }

    if ((UnitGetPropertyFixed(lp_targetCore, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroFocusCoreAlwaysHealth)) {
        libAIAI_gf_HeroAIEval(lp_trigPlayer);
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval > (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyHeroEval + 200.0))) {
            return true;
        }

    }

    return false;
}

bool libAIAI_gf_HeroAIHeroWillingToFocusCore (int lp_trigPlayer, unit lp_targetCore) {
    // Implementation
    if (((libGame_gv_players[lp_trigPlayer].lv_isDead == true) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane <= 0) || (UnitIsValid(libGame_gv_players[lp_trigPlayer].lv_activeVehicle) == true) || (libAIAI_gf_HeroAIGetCurrentObjective(lp_trigPlayer) != libAIAI_ge_HeroAIObjective_PushLane) || (libAIAI_gf_HeroAIBeingTargettedByDangerousAbility(lp_trigPlayer) == true))) {
        return false;
    }

    if (((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), UnitGetPosition(lp_targetCore)) > libAIAI_gv_aIHeroFocusCoreRecruitDistance) || (UnitGetPropertyFixed(lp_targetCore, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroFocusCorePingHealth))) {
        return false;
    }

    if ((UnitGetPropertyFixed(lp_targetCore, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroFocusCoreAlwaysHealth) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_startOffensiveHealth)) {
        return false;
    }

    return true;
}

bool libAIAI_gf_HeroAIRandomlyCastAbilityOnTarget (int lp_trigPlayer, unit lp_targetUnit) {
    int auto0908BD15_ae;
    int auto0908BD15_ai;
    int auto08EF8E3F_val;

    // Variable Declarations
    int lv_abilityIndex;
    fixed lv_distanceToTarget;
    order lv_order;

    // Variable Initialization

    // Implementation
    if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropEnergyPercent, c_unitPropCurrent) < libAIAI_gv_aIHeroLowEnergyPercent)) {
        return false;
    }

    lv_distanceToTarget = DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), UnitGetPosition(lp_targetUnit));
    auto0908BD15_ae = 2;
    auto0908BD15_ai = 1;
    lv_abilityIndex = 0;
    for ( ; ( (auto0908BD15_ai >= 0 && lv_abilityIndex <= auto0908BD15_ae) || (auto0908BD15_ai <= 0 && lv_abilityIndex >= auto0908BD15_ae) ) ; lv_abilityIndex += auto0908BD15_ai ) {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_castAbility[lv_abilityIndex] != null) && ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_abilityType[lv_abilityIndex] == libAIAI_ge_HeroAISpellType_PointEnemy) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_abilityType[lv_abilityIndex] == libAIAI_ge_HeroAISpellType_PointHeroEnemy) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_abilityType[lv_abilityIndex] == libAIAI_ge_HeroAISpellType_PBaoeEnemy) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_abilityType[lv_abilityIndex] == libAIAI_ge_HeroAISpellType_EffectInstant) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_abilityType[lv_abilityIndex] == libAIAI_ge_HeroAISpellType_TargetSelf) || ((UnitTestState(lp_targetUnit, c_unitStateCloaked) == false) && ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_abilityType[lv_abilityIndex] == libAIAI_ge_HeroAISpellType_TargetHeroEnemy) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_abilityType[lv_abilityIndex] == libAIAI_ge_HeroAISpellType_TargetEnemy)))) && (libCore_gf_IsAbilityOnCooldown(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, AbilityCommandGetAbility(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_castAbility[lv_abilityIndex])) == false)) {
            if ((lv_distanceToTarget > libAIAI_gf_HeroAIGetAbilityRange(lp_trigPlayer, lv_abilityIndex))) {
                continue;
            }

            if ((UnitTestState(lp_targetUnit, c_unitStateCloaked) == false) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_abilities[lv_abilityIndex].lv_useOnlyToRevealCloaked == true)) {
                continue;
            }

            auto08EF8E3F_val = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_abilityType[lv_abilityIndex];
            if (auto08EF8E3F_val == libAIAI_ge_HeroAISpellType_TargetSelf) {
                lv_order = OrderTargetingUnit(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_castAbility[lv_abilityIndex], libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
            }
            else if (auto08EF8E3F_val == libAIAI_ge_HeroAISpellType_EffectInstant) {
                lv_order = Order(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_castAbility[lv_abilityIndex]);
            }
            else if (auto08EF8E3F_val == libAIAI_ge_HeroAISpellType_PBaoeEnemy) {
                lv_order = Order(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_castAbility[lv_abilityIndex]);
            }
            else if (auto08EF8E3F_val == libAIAI_ge_HeroAISpellType_TargetEnemy) {
                lv_order = OrderTargetingUnit(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_castAbility[lv_abilityIndex], lp_targetUnit);
            }
            else if (auto08EF8E3F_val == libAIAI_ge_HeroAISpellType_TargetHeroEnemy) {
                if ((UnitTypeTestAttribute(UnitGetType(lp_targetUnit), c_unitAttributeHeroic) == false)) {
                    continue;
                }

                lv_order = OrderTargetingUnit(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_castAbility[lv_abilityIndex], lp_targetUnit);
            }
            else if (auto08EF8E3F_val == libAIAI_ge_HeroAISpellType_PointEnemy) {
                lv_order = OrderTargetingPoint(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_castAbility[lv_abilityIndex], UnitGetPosition(lp_targetUnit));
            }
            else if (auto08EF8E3F_val == libAIAI_ge_HeroAISpellType_PointHeroEnemy) {
                if ((UnitTypeTestAttribute(UnitGetType(lp_targetUnit), c_unitAttributeHeroic) == false)) {
                    continue;
                }

                lv_order = OrderTargetingPoint(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_castAbility[lv_abilityIndex], UnitGetPosition(lp_targetUnit));
            }
            else {
            }
            if ((UnitOrderIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_order) == true)) {
                HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_order, c_orderQueueReplace);
                libAIAI_gf_HeroAIUpdateNextSpellCheckTime(lp_trigPlayer);
                return true;
            }

        }

    }
    return false;
}

bool libAIAI_gf_HeroAIRandomlyCastAbilityOnCloakedEnemy (int lp_trigPlayer) {
    // Variable Declarations
    unit lv_targetUnit;
    int lv_abilityIndex;
    fixed lv_distanceToTarget;
    order lv_order;

    // Variable Initialization

    // Implementation
    if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropEnergyPercent, c_unitPropCurrent) < libAIAI_gv_aIHeroLowEnergyPercent)) {
        return false;
    }

    lv_targetUnit = libAIAI_gf_HeroAIGetCloakedEnemyToReveal(lp_trigPlayer);
    if ((UnitIsAlive(lv_targetUnit) == true)) {
        libAIAI_gf_HeroAIResetRevealCloakedEnemyTimer(lp_trigPlayer);
        if ((libAIAI_gf_HeroAIRandomlyCastAbilityOnTarget(lp_trigPlayer, lv_targetUnit) == false)) {
            if ((UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0) == lv_order)) {
                HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(lv_targetUnit)), c_orderQueueReplace);
            }

        }

        return true;
    }

    return false;
}

order libAIAI_gf_HeroAIRandomlyChooseTarget (int lp_trigPlayer, abilcmd lp_ability, int lp_abilityType, fixed lp_range) {
    int auto41B625C6_val;

    // Variable Declarations
    unit lv_targetUnit;
    point lv_point;

    // Variable Initialization

    // Implementation
    auto41B625C6_val = lp_abilityType;
    if (auto41B625C6_val == libAIAI_ge_HeroAISpellType_PBaoeEnemy) {
        if ((libAIAI_gf_HeroAINumEnemiesInRange(lp_trigPlayer, lp_range) >= 2)) {
            return Order(lp_ability);
        }
        else {
            return null;
        }
    }
    else if (auto41B625C6_val == libAIAI_ge_HeroAISpellType_PBaoeFriendly) {
        return Order(lp_ability);
    }
    else if (auto41B625C6_val == libAIAI_ge_HeroAISpellType_PointEnemy) {
        lv_targetUnit = libAIAI_gf_HeroAIRandomlyChooseUnitInRange(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemies, lp_range);
        if ((lv_targetUnit != null)) {
            lv_point = libAIAI_gf_HeroAIFudgeTargetPosition(lp_trigPlayer, UnitGetPosition(lv_targetUnit));
            return OrderTargetingPoint(lp_ability, lv_point);
        }
        else {
            return null;
        }
    }
    else if (auto41B625C6_val == libAIAI_ge_HeroAISpellType_PointFriendly) {
        lv_targetUnit = libAIAI_gf_HeroAIRandomlyChooseUnitInRange(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyHeroes, lp_range);
        if ((lv_targetUnit != null)) {
            lv_point = libAIAI_gf_HeroAIFudgeTargetPosition(lp_trigPlayer, UnitGetPosition(lv_targetUnit));
            return OrderTargetingPoint(lp_ability, lv_point);
        }
        else {
            return null;
        }
    }
    else if (auto41B625C6_val == libAIAI_ge_HeroAISpellType_TargetEnemy) {
        lv_targetUnit = libAIAI_gf_HeroAIRandomlyChooseUnitInRange(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemies, lp_range);
        if ((lv_targetUnit != null)) {
            return OrderTargetingUnit(lp_ability, lv_targetUnit);
        }
        else {
            return null;
        }
    }
    else if (auto41B625C6_val == libAIAI_ge_HeroAISpellType_TargetEnemyTower) {
        lv_targetUnit = libAIAI_gf_HeroAIRandomlyChooseUnitInRange(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyTowers, lp_range);
        if ((lv_targetUnit != null)) {
            return OrderTargetingUnit(lp_ability, lv_targetUnit);
        }
        else {
            return null;
        }
    }
    else if (auto41B625C6_val == libAIAI_ge_HeroAISpellType_TargetFriendlyTower) {
        lv_targetUnit = libAIAI_gf_HeroAIRandomlyChooseUnitInRange(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyTowers, lp_range);
        if ((lv_targetUnit != null)) {
            return OrderTargetingUnit(lp_ability, lv_targetUnit);
        }
        else {
            return null;
        }
    }
    else if (auto41B625C6_val == libAIAI_ge_HeroAISpellType_TargetFriendly) {
        lv_targetUnit = libAIAI_gf_HeroAIRandomlyChooseUnitInRange(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyHeroes, lp_range);
        if ((lv_targetUnit != null)) {
            return OrderTargetingUnit(lp_ability, lv_targetUnit);
        }
        else {
            return null;
        }
    }
    else if (auto41B625C6_val == libAIAI_ge_HeroAISpellType_PointFriendlyMinion) {
        lv_targetUnit = libAIAI_gf_HeroAIRandomlyChooseUnitInRange(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyMinionsSummons, lp_range);
        if ((lv_targetUnit != null)) {
            lv_point = libAIAI_gf_HeroAIFudgeTargetPosition(lp_trigPlayer, UnitGetPosition(lv_targetUnit));
            return OrderTargetingPoint(lp_ability, lv_point);
        }
        else {
            return null;
        }
    }
    else if (auto41B625C6_val == libAIAI_ge_HeroAISpellType_SelfBuff) {
        return Order(lp_ability);
    }
    else {
        return null;
    }
}

int libAIAI_gf_HeroAIGetItemIndex (unit lp_item) {
    int autoCF208E3D_ae;
    int autoCF208E3D_ai;

    // Variable Declarations
    int lv_itemIndex;

    // Variable Initialization

    // Implementation
    autoCF208E3D_ae = libAIAI_gv_heroAI_MaxItemCount_C;
    autoCF208E3D_ai = 1;
    lv_itemIndex = 1;
    for ( ; ( (autoCF208E3D_ai >= 0 && lv_itemIndex <= autoCF208E3D_ae) || (autoCF208E3D_ai <= 0 && lv_itemIndex >= autoCF208E3D_ae) ) ; lv_itemIndex += autoCF208E3D_ai ) {
        if ((libAIAI_gv_heroAIItemData[lv_itemIndex].lv_item == "")) {
            return 0;
        }

        if ((libAIAI_gv_heroAIItemData[lv_itemIndex].lv_item == UnitGetType(lp_item))) {
            return lv_itemIndex;
        }

    }
    return 0;
}

order libAIAI_gf_HeroAIGetItemOrderTargetingPoint (string lp_item, int lp_trigPlayer, point lp_point) {
    int autoAED8BFE7_ae;
    int autoAED8BFE7_ai;

    // Variable Declarations
    int lv_CurItem;
    unit lv_itemUnit;
    order lv_spellOrder;
    int lv_itemIndex;
    bool lv_foundItem;

    // Variable Initialization

    // Implementation
    autoAED8BFE7_ae = libCore_gv_bALPlayerActiveInventorySlots;
    autoAED8BFE7_ai = 1;
    lv_CurItem = 1;
    for ( ; ( (autoAED8BFE7_ai >= 0 && lv_CurItem <= autoAED8BFE7_ae) || (autoAED8BFE7_ai <= 0 && lv_CurItem >= autoAED8BFE7_ae) ) ; lv_CurItem += autoAED8BFE7_ai ) {
        lv_itemUnit = UnitInventoryItem(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_CurItem);
        if ((UnitIsValid(lv_itemUnit) == true) && (UnitGetType(lv_itemUnit) == lp_item)) {
            lv_foundItem = true;
            break;
        }

    }
    if (((lv_foundItem == false) || (lp_point == null))) {
        return null;
    }

    lv_spellOrder = OrderTargetingPoint(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_teleportAbility, lp_point);
    if ((lv_spellOrder == null)) {
        return null;
    }

    OrderSetTargetItem(lv_spellOrder, lv_itemUnit);
    return lv_spellOrder;
}

fixed libAIAI_gf_HeroAIGetAbilityRange (int lp_player, int lp_spellIndex) {
    // Variable Declarations
    const fixed lv_unusualMinRange = 1.5;
    const fixed lv_minRange = 3.0;
    const fixed lv_unusualMaxRange = 36.0;
    const fixed lv_maxRange = 9.0;
    fixed lv_spellRange;
    abilcmd lv_spellAbil;
    string lv_debugMessage;

    // Variable Initialization
    lv_debugMessage = "";

    // Implementation
    if (((libAIAI_gv_aIHeroes[lp_player].lv_abilityType[lp_spellIndex] == libAIAI_ge_HeroAISpellType_PointEnemy) || (libAIAI_gv_aIHeroes[lp_player].lv_abilityType[lp_spellIndex] == libAIAI_ge_HeroAISpellType_PointHeroEnemy) || (libAIAI_gv_aIHeroes[lp_player].lv_abilityType[lp_spellIndex] == libAIAI_ge_HeroAISpellType_PointFriendly) || (libAIAI_gv_aIHeroes[lp_player].lv_abilityType[lp_spellIndex] == libAIAI_ge_HeroAISpellType_PointFriendlyMinion) || (libAIAI_gv_aIHeroes[lp_player].lv_abilityType[lp_spellIndex] == libAIAI_ge_HeroAISpellType_TargetEnemy) || (libAIAI_gv_aIHeroes[lp_player].lv_abilityType[lp_spellIndex] == libAIAI_ge_HeroAISpellType_TargetEnemyTower) || (libAIAI_gv_aIHeroes[lp_player].lv_abilityType[lp_spellIndex] == libAIAI_ge_HeroAISpellType_TargetFriendly) || (libAIAI_gv_aIHeroes[lp_player].lv_abilityType[lp_spellIndex] == libAIAI_ge_HeroAISpellType_TargetFriendlyTower) || (libAIAI_gv_aIHeroes[lp_player].lv_abilityType[lp_spellIndex] == libAIAI_ge_HeroAISpellType_EffectInstant) || (libAIAI_gv_aIHeroes[lp_player].lv_abilityType[lp_spellIndex] == libAIAI_ge_HeroAISpellType_TargetSelf))) {
        lv_spellAbil = libAIAI_gv_aIHeroes[lp_player].lv_castAbility[lp_spellIndex];
        lv_spellRange = libAIAI_gv_aIHeroes[lp_player].lv_abilityRange[lp_spellIndex];
        if ((lv_spellRange <= 0.0)) {
            lv_spellRange = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(lv_spellAbil), "Range[0]", lp_player));
            if ((lv_spellRange < lv_unusualMinRange)) {
                TriggerDebugOutput(1, StringToText(("Player " + (IntToString(lp_player) + (" Ability " + (IntToString(lp_spellIndex) + (" Too Short " + FixedToString(lv_spellRange, c_fixedPrecisionAny))))))), true);
                lv_spellRange = lv_minRange;
            }

            if ((lv_spellRange > lv_unusualMaxRange)) {
                TriggerDebugOutput(1, StringToText(("Player " + (IntToString(lp_player) + (" Ability " + (IntToString(lp_spellIndex) + (" Too Long " + FixedToString(lv_spellRange, c_fixedPrecisionAny))))))), true);
                lv_spellRange = lv_maxRange;
            }

        }

    }
    else if (((libAIAI_gv_aIHeroes[lp_player].lv_abilityType[lp_spellIndex] == libAIAI_ge_HeroAISpellType_PBaoeEnemy) || (libAIAI_gv_aIHeroes[lp_player].lv_abilityType[lp_spellIndex] == libAIAI_ge_HeroAISpellType_PBaoeFriendly))) {
        lv_spellRange = lv_minRange;
    }
    return lv_spellRange;
}

fixed libAIAI_gf_HeroAIGetItemRange (int lp_player, int lp_itemIndex) {
    // Variable Declarations
    const fixed lv_minRange = 4.0;
    const fixed lv_maxRange = 9.0;
    string lv_item;
    string lv_itemAbility;
    fixed lv_itemRange;

    // Variable Initialization
    lv_itemAbility = "";

    // Implementation
    if (((libAIAI_gv_heroAIItemData[lp_itemIndex].lv_itemType == libAIAI_ge_HeroAISpellType_PointEnemy) || (libAIAI_gv_heroAIItemData[lp_itemIndex].lv_itemType == libAIAI_ge_HeroAISpellType_PointFriendlyMinion) || (libAIAI_gv_heroAIItemData[lp_itemIndex].lv_itemType == libAIAI_ge_HeroAISpellType_TargetEnemy) || (libAIAI_gv_heroAIItemData[lp_itemIndex].lv_itemType == libAIAI_ge_HeroAISpellType_TargetEnemyTower) || (libAIAI_gv_heroAIItemData[lp_itemIndex].lv_itemType == libAIAI_ge_HeroAISpellType_PointFriendly) || (libAIAI_gv_heroAIItemData[lp_itemIndex].lv_itemType == libAIAI_ge_HeroAISpellType_TargetFriendlyTower))) {
        lv_item = libAIAI_gv_heroAIItemData[lp_itemIndex].lv_item;
        lv_itemAbility = CatalogFieldValueGet(c_gameCatalogItem, lv_item, "Abil", lp_player);
        lv_itemRange = StringToFixed(CatalogFieldValueGet(c_gameCatalogAbil, lv_itemAbility, "Range[" + IntToString(0) + "]", lp_player));
        if ((lv_itemRange < lv_minRange)) {
            lv_itemRange = lv_minRange;
        }

        if ((lv_itemRange > lv_maxRange)) {
            lv_itemRange = lv_maxRange;
        }

    }
    else if (((libAIAI_gv_heroAIItemData[lp_itemIndex].lv_itemType == libAIAI_ge_HeroAISpellType_PBaoeEnemy) || (libAIAI_gv_heroAIItemData[lp_itemIndex].lv_itemType == libAIAI_ge_HeroAISpellType_PBaoeFriendly))) {
        lv_itemRange = lv_minRange;
    }
    return lv_itemRange;
}

bool libAIAI_gf_HeroAIInWeaponRangeOfTarget (int lp_trigPlayer, unit lp_targetUnit, fixed lp_rangeSlop) {
    // Variable Declarations
    fixed lv_weaponRange;
    fixed lv_heroRadius;
    fixed lv_targetRadius;
    fixed lv_distanceToTarget;

    // Variable Initialization

    // Implementation
    lv_weaponRange = libAIAI_gf_AIGetActiveWeaponRange(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    lv_heroRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), "Radius", c_playerAny));
    lv_targetRadius = StringToFixed(CatalogFieldValueGet(c_gameCatalogUnit, UnitGetType(lp_targetUnit), "Radius", c_playerAny));
    lv_distanceToTarget = DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), UnitGetPosition(lp_targetUnit));
    return ((lv_heroRadius + lv_weaponRange + lv_targetRadius + lp_rangeSlop) >= lv_distanceToTarget);
}

int libAIAI_gf_HeroAINumEnemiesInRange (int lp_player, fixed lp_range) {
    unitgroup auto2E3B32BD_g;
    int auto2E3B32BD_u;

    // Variable Declarations
    int lv_numInRange;
    unit lv_enemy;

    // Variable Initialization

    // Implementation
    auto2E3B32BD_g = libAIAI_gv_aIHeroes[lp_player].lv_enemies;
    auto2E3B32BD_u = 1;
    for ( ; auto2E3B32BD_u <= UnitGroupCount(auto2E3B32BD_g, c_unitCountAll) ; auto2E3B32BD_u += (lv_enemy == UnitGroupUnit(auto2E3B32BD_g, auto2E3B32BD_u)) ) {
        lv_enemy = UnitGroupUnit(auto2E3B32BD_g, auto2E3B32BD_u);
        if ((DistanceBetweenPoints(UnitGetPosition(lv_enemy), UnitGetPosition(libAIAI_gv_aIHeroes[lp_player].lv_currentHeroUnit)) < lp_range)) {
            lv_numInRange = (lv_numInRange + 1);
        }

    }
    return lv_numInRange;
}

unit libAIAI_gf_HeroAIRandomlyChooseUnitInRange (int lp_player, unitgroup lp_unitGroup, fixed lp_range) {
    unitgroup auto997E955A_g;
    int auto997E955A_u;

    // Variable Declarations
    unit lv_unit;
    unitgroup lv_inRange;

    // Variable Initialization
    lv_inRange = UnitGroupEmpty();

    // Implementation
    auto997E955A_g = lp_unitGroup;
    auto997E955A_u = 1;
    for ( ; auto997E955A_u <= UnitGroupCount(auto997E955A_g, c_unitCountAll) ; auto997E955A_u += (lv_unit == UnitGroupUnit(auto997E955A_g, auto997E955A_u)) ) {
        lv_unit = UnitGroupUnit(auto997E955A_g, auto997E955A_u);
        if ((UnitIsAlive(lv_unit) == true) && (DistanceBetweenPoints(UnitGetPosition(lv_unit), UnitGetPosition(libAIAI_gv_aIHeroes[lp_player].lv_currentHeroUnit)) < lp_range)) {
            UnitGroupAdd(lv_inRange, lv_unit);
        }

    }
    if ((UnitGroupCount(lv_inRange, c_unitCountAll) > 0)) {
        return UnitGroupUnit(lv_inRange, RandomInt(1, UnitGroupCount(lv_inRange, c_unitCountAll)));
    }

    return null;
}

point libAIAI_gf_HeroAIFudgeTargetPosition (int lp_player, point lp_pos) {
    // Variable Declarations
    point lv_target;
    region lv_region;
    fixed lv_distance;
    fixed lv_maxDist;
    int lv_missDirection;
    point lv_endPoint1;
    point lv_endPoint2;
    fixed lv_baseMissDistance;
    fixed lv_diceRoll;
    fixed lv_missChance;

    // Variable Initialization
    lv_target = lp_pos;
    lv_missDirection = 1;
    lv_baseMissDistance = 0.75;

    // Implementation
    lv_diceRoll = libNtve_gf_RandomPercent();
    lv_missChance = libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_gv_aIHeroes[lp_player].lv_difficulty];
    if ((lv_diceRoll >= libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_gv_aIHeroes[lp_player].lv_difficulty])) {
        lv_distance = 0.0;
        lv_baseMissDistance = 0.25;
    }
    else {
        lv_distance = libAIAI_gv_aIHeroFudgeTarget[(libAIAI_gv_aIHeroes[lp_player].lv_difficulty)];
        lv_baseMissDistance = 0.75;
    }
    if ((RandomInt(1, 2) == 1)) {
        lv_missDirection = -1;
    }
    else {
        lv_missDirection = 1;
    }
    lv_endPoint1 = PointWithOffsetPolar(lv_target, lv_baseMissDistance, (AngleBetweenPoints(lv_target, UnitGetPosition(libAIAI_gv_aIHeroes[lp_player].lv_currentHeroUnit)) + (90 * lv_missDirection)));
    lv_endPoint2 = libNtve_gf_PointOffsetTowardsPoint(lv_target, lv_distance, lv_endPoint1);
    lv_target = libNtve_gf_RandomPointBetweenPoints(lv_endPoint1, lv_endPoint2);
    return lv_target;
}

bool libAIAI_gf_HeroAIShouldSkipTactical (int lp_trigPlayer) {
    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSAvoidAOE) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSPaceAround)) {
        return true;
    }

    return false;
}

bool libAIAI_gf_HeroAIShouldTacticalAITargetCreeps (int lp_player) {
    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_player].lv_heroState == libAIAI_ge_HeroAIStates_HSUnderworldKillMinions)) {
        return true;
    }
    else {
        return false;
    }
}

void libAIAI_gf_HeroAIUpdateNextSpellCheckTime (int lp_trigPlayer) {
    int auto50B97911_ae;

    // Variable Declarations
    point lv_trigPosition;
    int lv_playerIndex;
    fixed lv_nextAllyCheckTime;

    // Variable Initialization
    lv_trigPosition = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);

    // Implementation
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextOffensiveSpellCheckTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroMinSpellFrequency[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)]);
    lv_nextAllyCheckTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroMinTeamSpellFrequency[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)]);
    auto50B97911_ae = libCore_gv_bALMaxPlayers;
    lv_playerIndex = 1;
    for ( ; lv_playerIndex <= auto50B97911_ae ; lv_playerIndex += 1 ) {
        if ((lv_playerIndex != lp_trigPlayer) && (libGame_gv_players[lv_playerIndex].lv_faction == libGame_gv_players[lp_trigPlayer].lv_faction) && (libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 2) == true) && (DistanceSquaredBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit), lv_trigPosition) < 144.0)) {
            libAIAI_gv_aIHeroes[lv_playerIndex].lv_nextOffensiveSpellCheckTime = MaxF(libAIAI_gv_aIHeroes[lv_playerIndex].lv_nextOffensiveSpellCheckTime, lv_nextAllyCheckTime);
        }

    }
}

void libAIAI_gf_HeroAITalentPreInit () {
    // Implementation
    libCore_gf_RegisterSegregationTrigger(libCore_ge_SegregationTriggerTypes_HeroAITalentLogic, libAIAI_gt_HeroAIFalstadTalentLogic);
    libCore_gf_RegisterSegregationTrigger(libCore_ge_SegregationTriggerTypes_HeroAITalentLogic, libAIAI_gt_HeroAILiliTalentLogic);
    libCore_gf_RegisterSegregationTrigger(libCore_ge_SegregationTriggerTypes_HeroAITalentLogic, libAIAI_gt_HeroAIMalfurionTalentLogic);
    libCore_gf_RegisterSegregationTrigger(libCore_ge_SegregationTriggerTypes_HeroAITalentLogic, libAIAI_gt_HeroAIRehgarTalentLogic);
    libCore_gf_RegisterSegregationTrigger(libCore_ge_SegregationTriggerTypes_HeroAITalentLogic, libAIAI_gt_HeroAITassadarTalentLogic);
    libCore_gf_RegisterSegregationTrigger(libCore_ge_SegregationTriggerTypes_HeroAITalentLogic, libAIAI_gt_HeroAITyraelTalentLogic);
    libCore_gf_RegisterSegregationTrigger(libCore_ge_SegregationTriggerTypes_HeroAITalentLogic, libAIAI_gt_HeroAITyrandeTalentLogic);
    libCore_gf_RegisterSegregationTrigger(libCore_ge_SegregationTriggerTypes_HeroAITalentLogic, libAIAI_gt_HeroAIZagaraTalentLogic);
    libCore_gf_RegisterSegregationTrigger(libCore_ge_SegregationTriggerTypes_HeroAITalentLogic, libAIAI_gt_HeroAIAnubarakTalentLogic);
    libCore_gf_RegisterSegregationTrigger(libCore_ge_SegregationTriggerTypes_HeroAITalentLogic, libAIAI_gt_HeroAIThrallTalentLogic);
}

void libAIAI_gf_HeroAIInitTalentBuilds (int lp_trigPlayer) {
    int auto82B75512_ae;
    int autoBED68C2B_ae;
    int autoB5B4CB0E_ae;
    int autoF78BBAAE_ae;

    // Variable Declarations
    string lv_heroName;
    int lv_numberOfTalentBuilds;
    int lv_talentBuildIndex;
    fixed lv_buildChance;
    fixed lv_totalChance;
    int lv_aIOnly;
    int lv_minDifficulty;
    int lv_maxDifficulty;
    int lv_buildType;
    int lv_numberOfTalentsInArray;
    int lv_talentArrayIndex;
    int lv_curBuildNum;
    bool lv_debugTalentFound;
    int lv_debugTalentCatalogIndex;
    int lv_debugTalentCatalogMaxIndexForCurrentTier;

    // Variable Initialization

    // Implementation
    while (!((libGame_gv_talents_TalentChoices[lp_trigPlayer][1].lv_numberOfTalentsForThisTier > 0))) {
        Wait(0.0625, c_timeGame);
    }
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_numberOfTalentBuilds = 0;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_pickedTalentBuild = 0;
    auto82B75512_ae = libAIAI_gv_heroAIMaxNumberofTalentBuilds;
    lv_talentBuildIndex = 0;
    for ( ; lv_talentBuildIndex <= auto82B75512_ae ; lv_talentBuildIndex += 1 ) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_talentBuilds[lv_talentBuildIndex].lv_chance = 0.0;
        autoBED68C2B_ae = libCore_gv_talents_MaxTiers_C;
        lv_talentArrayIndex = 0;
        for ( ; lv_talentArrayIndex <= autoBED68C2B_ae ; lv_talentArrayIndex += 1 ) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_talentBuilds[lv_talentBuildIndex].lv_talents[lv_talentArrayIndex] = "";
        }
    }
    lv_heroName = PlayerHero(lp_trigPlayer);
    lv_numberOfTalentBuilds = CatalogFieldValueCount(c_gameCatalogHero, lv_heroName, "TalentAIBuildsArray", lp_trigPlayer);
    autoB5B4CB0E_ae = lv_numberOfTalentBuilds;
    lv_talentBuildIndex = 1;
    for ( ; lv_talentBuildIndex <= autoB5B4CB0E_ae ; lv_talentBuildIndex += 1 ) {
        lv_aIOnly = CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroName, "TalentAIBuildsArray[" + IntToString((lv_talentBuildIndex - 1)) + "].AIOnly", lp_trigPlayer);
        if ((lv_aIOnly == 1) && (PlayerType(lp_trigPlayer) == c_playerTypeUser)) {
            continue;
        }

        lv_minDifficulty = CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroName, "TalentAIBuildsArray[" + IntToString((lv_talentBuildIndex - 1)) + "].MinDifficulty", lp_trigPlayer);
        if ((lv_minDifficulty > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)) {
            continue;
        }

        lv_maxDifficulty = CatalogFieldValueGetAsInt(c_gameCatalogHero, lv_heroName, "TalentAIBuildsArray[" + IntToString((lv_talentBuildIndex - 1)) + "].MaxDifficulty", lp_trigPlayer);
        if ((lv_maxDifficulty < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)) {
            continue;
        }

        if ((lv_curBuildNum >= libAIAI_gv_heroAIMaxNumberofTalentBuilds)) {
            TextExpressionSetToken("Param/Expression/lib_AIAI_B105233B", "A", StringToText((PlayerHero(lp_trigPlayer))));
            TextExpressionSetToken("Param/Expression/lib_AIAI_B105233B", "B", IntToText(lv_numberOfTalentBuilds));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_AIAI_B105233B"), true);
            break;
        }

        lv_curBuildNum += 1;
        lv_buildChance = StringToFixed(CatalogFieldValueGet(c_gameCatalogHero, lv_heroName, "TalentAIBuildsArray[" + IntToString((lv_talentBuildIndex - 1)) + "].ChanceToPick", lp_trigPlayer));
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_talentBuilds[lv_curBuildNum].lv_chance = lv_buildChance;
        lv_totalChance += lv_buildChance;
        lv_numberOfTalentsInArray = CatalogFieldValueCount(c_gameCatalogHero, lv_heroName, "TalentAIBuildsArray[" + IntToString(lv_talentBuildIndex - 1) + "].TalentsArray", c_playerAny);
        if ((lv_numberOfTalentsInArray != libCore_gv_talents_MaxTiers_C)) {
            TextExpressionSetToken("Param/Expression/lib_AIAI_01298FE3", "A", StringToText((PlayerHero(lp_trigPlayer))));
            TextExpressionSetToken("Param/Expression/lib_AIAI_01298FE3", "B", IntToText(lv_talentBuildIndex));
            TextExpressionSetToken("Param/Expression/lib_AIAI_01298FE3", "C", IntToText(lv_numberOfTalentsInArray));
            TextExpressionSetToken("Param/Expression/lib_AIAI_01298FE3", "D", IntToText(libCore_gv_talents_MaxTiers_C));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_AIAI_01298FE3"), true);
            if ((lv_numberOfTalentsInArray > libCore_gv_talents_MaxTiers_C)) {
                lv_numberOfTalentsInArray = libCore_gv_talents_MaxTiers_C;
            }

        }

        lv_debugTalentCatalogMaxIndexForCurrentTier = 0;
        autoF78BBAAE_ae = lv_numberOfTalentsInArray;
        lv_talentArrayIndex = 1;
        for ( ; lv_talentArrayIndex <= autoF78BBAAE_ae ; lv_talentArrayIndex += 1 ) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_talentBuilds[lv_curBuildNum].lv_talents[lv_talentArrayIndex] = (CatalogFieldValueGet(c_gameCatalogHero, lv_heroName, "TalentAIBuildsArray[" + IntToString((lv_talentBuildIndex - 1)) + "].TalentsArray[" + IntToString((lv_talentArrayIndex - 1)) + "]", lp_trigPlayer));
            if ((libCore_gv_dEBUGDebuggingEnabled == true)) {
                lv_debugTalentFound = false;
                lv_debugTalentCatalogIndex = lv_debugTalentCatalogMaxIndexForCurrentTier;
                lv_debugTalentCatalogMaxIndexForCurrentTier += libGame_gv_talents_TalentChoices[lp_trigPlayer][lv_talentArrayIndex].lv_numberOfTalentsForThisTier;
                while ((lv_debugTalentCatalogIndex < lv_debugTalentCatalogMaxIndexForCurrentTier)) {
                    if ((TalentTreeGetHeroTalentLink(lp_trigPlayer, lv_debugTalentCatalogIndex) == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_talentBuilds[lv_curBuildNum].lv_talents[lv_talentArrayIndex])) {
                        lv_debugTalentFound = true;
                        break;
                    }

                    lv_debugTalentCatalogIndex += 1;
                }
                if ((lv_debugTalentFound == false)) {
                    TriggerDebugOutput(1, (StringExternal("Param/Value/lib_AIAI_FB6AA32E") + StringToText(CatalogFieldValueGet(c_gameCatalogHero, lv_heroName, "TalentAIBuildsArray[" + IntToString((lv_talentBuildIndex - 1)) + "].TalentsArray[" + IntToString((lv_talentArrayIndex - 1)) + "]", lp_trigPlayer)) + StringExternal("Param/Value/lib_AIAI_0A7A6074") + IntToText(lv_talentArrayIndex)), true);
                }

            }

        }
    }
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_numberOfTalentBuilds = lv_curBuildNum;
    libAIAI_gf_HeroAIChooseAITalentBuild(lp_trigPlayer, lv_totalChance);
}

void libAIAI_gf_HeroAIChooseAITalentBuild (int lp_trigPlayer, fixed lp_totalChance) {
    int auto969B47F3_ae;

    // Variable Declarations
    fixed lv_randomChance;
    int lv_loopIndex;

    // Variable Initialization

    // Implementation
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_pickedTalentBuild = 0;
    if ((PlayerType(lp_trigPlayer) == c_playerTypeUser)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_pickedTalentBuild = libAIAI_gf_HeroAIDetermineClosestAITalentBuild(lp_trigPlayer);
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_pickedTalentBuild != 0)) {
            return ;
        }

    }

    lv_randomChance = RandomFixed(0.0, lp_totalChance);
    auto969B47F3_ae = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_numberOfTalentBuilds;
    lv_loopIndex = 1;
    for ( ; lv_loopIndex <= auto969B47F3_ae ; lv_loopIndex += 1 ) {
        lv_randomChance -= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_talentBuilds[lv_loopIndex].lv_chance;
        if ((lv_randomChance <= 0.0)) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_pickedTalentBuild = lv_loopIndex;
            break;
        }

    }
}

int libAIAI_gf_HeroAIDetermineClosestAITalentBuild (int lp_trigPlayer) {
    int auto05B9E962_ae;
    int auto6EBA0B45_ae;

    // Variable Declarations
    int lv_bestBuildValue;
    int lv_numBestBuilds;
    int[libAIAI_gv_heroAIMaxNumberofTalentBuilds + 1] lv_bestBuildIndex;
    int lv_currentBuildValue;
    int lv_currentBuildIndex;
    int lv_currentTalentIndex;
    int lv_randomBest;

    // Variable Initialization

    // Implementation
    auto05B9E962_ae = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_numberOfTalentBuilds;
    lv_currentBuildIndex = 1;
    for ( ; lv_currentBuildIndex <= auto05B9E962_ae ; lv_currentBuildIndex += 1 ) {
        lv_currentBuildValue = 0;
        auto6EBA0B45_ae = libCore_gv_talents_MaxTiers_C;
        lv_currentTalentIndex = 1;
        for ( ; lv_currentTalentIndex <= auto6EBA0B45_ae ; lv_currentTalentIndex += 1 ) {
            if ((libGame_gv_talents_TalentChoices[lp_trigPlayer][lv_currentTalentIndex].lv_selection != 0) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_talentBuilds[lv_currentBuildIndex].lv_talents[lv_currentTalentIndex] == TalentTreeGetHeroTalentLink(lp_trigPlayer, TalentTreeGetSelectedHeroTalentTree(lp_trigPlayer, lv_currentTalentIndex)))) {
                if ((lv_currentTalentIndex == 4)) {
                    lv_currentBuildValue += 2;
                }
                else {
                    lv_currentBuildValue += 1;
                }
            }

        }
        if ((lv_currentBuildValue > lv_bestBuildValue)) {
            lv_numBestBuilds = 1;
            lv_bestBuildValue = lv_currentBuildValue;
            lv_bestBuildIndex[0] = lv_currentBuildIndex;
        }
        else {
            if ((lv_currentBuildValue == lv_bestBuildValue)) {
                lv_bestBuildIndex[lv_numBestBuilds] = lv_currentBuildIndex;
                lv_numBestBuilds += 1;
            }

        }
    }
    if ((lv_numBestBuilds == 0)) {
        return 0;
    }

    lv_randomBest = RandomInt(0, (lv_numBestBuilds - 1));
    return lv_bestBuildIndex[lv_randomBest];
}

void libAIAI_gf_HeroAIPickSpecificUltimateIfControllingHumanSlot (int lp_trigPlayer, string lp_ultimateTalent) {
    // Variable Declarations
    bool lv_returnVal;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_talents_ActiveChoiceTierForPlayer[lp_trigPlayer] == 4) && (PlayerType(lp_trigPlayer) == c_playerTypeUser)) {
        lv_returnVal = libAIAI_gf_HeroAITrytoPickSpecificTalent(lp_trigPlayer, lp_ultimateTalent);
    }

}

void libAIAI_gf_HeroAIEnableTalentPicking (int lp_trigPlayer, bool lp_enable) {
    // Implementation
    if ((lp_enable == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allowedToChooseTalentsTime = 0.0;
    }
    else {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allowedToChooseTalentsTime = 524287.0;
    }
}

void libAIAI_gf_HeroAIPickTalent (int lp_trigPlayer, int lp_buttonIndex, int lp_talentIndex) {
    // Implementation
    TalentTreeSetSelectedHeroTalentTree(lp_trigPlayer, lp_talentIndex);
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allowedToChooseTalentsTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroChooseTalentDelayBetweenPicks);
    libGame_gf_TalentsChooseTalentForPlayer(libGame_gv_talents_ActiveChoiceTierForPlayer[lp_trigPlayer], lp_buttonIndex, lp_trigPlayer);
}

bool libAIAI_gf_HeroAITrytoPickSpecificTalent (int lp_trigPlayer, string lp_talent) {
    int autoE150BC63_ae;
    int auto4E1F0EC0_ae;

    // Variable Declarations
    int lv_loopIndex;
    int lv_numPreviousTalents;
    int lv_numCurrentTalents;
    string lv_loopTalent;

    // Variable Initialization
    lv_numPreviousTalents = -1;

    // Implementation
    if ((libGame_gv_talents_ActiveChoiceTierForPlayer[lp_trigPlayer] != 0) && (libGame_gv_talents_TalentChoices[lp_trigPlayer][libGame_gv_talents_ActiveChoiceTierForPlayer[lp_trigPlayer]].lv_selection == 0) && (libGame_gv_talents_TalentChoices[lp_trigPlayer][libGame_gv_talents_ActiveChoiceTierForPlayer[lp_trigPlayer]].lv_numberOfTalentsForThisTier > 0)) {
        lv_numCurrentTalents = libGame_gv_talents_TalentChoices[lp_trigPlayer][libGame_gv_talents_ActiveChoiceTierForPlayer[lp_trigPlayer]].lv_numberOfTalentsForThisTier;
        autoE150BC63_ae = (libGame_gv_talents_ActiveChoiceTierForPlayer[lp_trigPlayer] - 1);
        lv_loopIndex = 1;
        for ( ; lv_loopIndex <= autoE150BC63_ae ; lv_loopIndex += 1 ) {
            lv_numPreviousTalents += libGame_gv_talents_TalentChoices[lp_trigPlayer][lv_loopIndex].lv_numberOfTalentsForThisTier;
        }
        auto4E1F0EC0_ae = lv_numCurrentTalents;
        lv_loopIndex = 1;
        for ( ; lv_loopIndex <= auto4E1F0EC0_ae ; lv_loopIndex += 1 ) {
            if ((TalentTreeCanSelectHeroTalentTree(lp_trigPlayer, (lv_loopIndex + lv_numPreviousTalents)) == true)) {
                lv_loopTalent = TalentTreeGetHeroTalentLink(lp_trigPlayer, (lv_loopIndex + lv_numPreviousTalents));
                if ((lv_loopTalent == lp_talent)) {
                    libAIAI_gf_HeroAIPickTalent(lp_trigPlayer, lv_loopIndex, (lv_loopIndex + lv_numPreviousTalents));
                    return true;
                }

            }

        }
        TriggerDebugOutput(1, (StringExternal("Param/Value/lib_AIAI_9B916B97") + StringToText((lp_talent)) + StringExternal("Param/Value/lib_AIAI_B7F5F313") + IntToText(libGame_gv_talents_ActiveChoiceTierForPlayer[lp_trigPlayer])), true);
    }

    return false;
}

bool libAIAI_gf_HeroAIRandomlyPickAnyAvailableTalent (int lp_trigPlayer) {
    int auto16F856E9_ae;
    int autoC9042940_ae;

    // Variable Declarations
    int lv_loopIndex;
    int lv_numPreviousTalents;
    int lv_numCurrentTalents;
    int lv_numPossible;
    int[libCore_gv_talents_MaxTalentsPerTier_C + 1] lv_PossibleChoices;
    int lv_buttonChoice;

    // Variable Initialization
    lv_numPreviousTalents = -1;

    // Implementation
    if ((libGame_gv_talents_ActiveChoiceTierForPlayer[lp_trigPlayer] != 0) && (libGame_gv_talents_TalentChoices[lp_trigPlayer][libGame_gv_talents_ActiveChoiceTierForPlayer[lp_trigPlayer]].lv_selection == 0) && (libGame_gv_talents_TalentChoices[lp_trigPlayer][libGame_gv_talents_ActiveChoiceTierForPlayer[lp_trigPlayer]].lv_numberOfTalentsForThisTier > 0)) {
        lv_numCurrentTalents = libGame_gv_talents_TalentChoices[lp_trigPlayer][libGame_gv_talents_ActiveChoiceTierForPlayer[lp_trigPlayer]].lv_numberOfTalentsForThisTier;
        auto16F856E9_ae = (libGame_gv_talents_ActiveChoiceTierForPlayer[lp_trigPlayer] - 1);
        lv_loopIndex = 1;
        for ( ; lv_loopIndex <= auto16F856E9_ae ; lv_loopIndex += 1 ) {
            lv_numPreviousTalents += libGame_gv_talents_TalentChoices[lp_trigPlayer][lv_loopIndex].lv_numberOfTalentsForThisTier;
        }
        autoC9042940_ae = lv_numCurrentTalents;
        lv_loopIndex = 1;
        for ( ; lv_loopIndex <= autoC9042940_ae ; lv_loopIndex += 1 ) {
            if ((TalentTreeCanSelectHeroTalentTree(lp_trigPlayer, (lv_loopIndex + lv_numPreviousTalents)) == true)) {
                lv_numPossible += 1;
                lv_PossibleChoices[lv_numPossible] = lv_loopIndex;
            }

        }
        if ((lv_numPossible > 0)) {
            lv_buttonChoice = lv_PossibleChoices[RandomInt(1, lv_numPossible)];
            libAIAI_gf_HeroAIPickTalent(lp_trigPlayer, lv_buttonChoice, (lv_buttonChoice + lv_numPreviousTalents));
            return true;
        }

    }

    return false;
}

bool libAIAI_gf_HeroAISelectNextTalentInBuild (int lp_trigPlayer) {
    // Variable Declarations
    bool lv_returnVal;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_pickedTalentBuild > 0) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_pickedTalentBuild <= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_numberOfTalentBuilds)) {
        lv_returnVal = libAIAI_gf_HeroAITrytoPickSpecificTalent(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_talentBuilds[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_pickedTalentBuild].lv_talents[libGame_gv_talents_ActiveChoiceTierForPlayer[lp_trigPlayer]]);
        return lv_returnVal;
    }

    return false;
}

bool libAIAI_gf_HeroAIChooseTalentViaSpecialHeroLogic (int lp_trigPlayer) {
    // Variable Declarations
    int lv_currentTier;

    // Variable Initialization

    // Implementation
    lv_currentTier = libGame_gv_talents_ActiveChoiceTierForPlayer[lp_trigPlayer];
    libCore_gv_segTriggerPlayer = lp_trigPlayer;
    libCore_gv_segTriggerUnit = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit;
    libCore_gf_CallRegisteredSegregationTriggers(libCore_ge_SegregationTriggerTypes_HeroAITalentLogic);
    if (((lv_currentTier != libGame_gv_talents_ActiveChoiceTierForPlayer[lp_trigPlayer]) || (libGame_gv_talents_TalentChoices[lp_trigPlayer][lv_currentTier].lv_selection != 0))) {
        return true;
    }
    else {
        return false;
    }
}

void libAIAI_gf_HeroAIChooseTalents (int lp_faction) {
    playergroup auto0E269936_g;
    int auto0E269936_p;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    auto0E269936_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAITeamIndexOfFaction(lp_faction)].lv_aIPlayers; 
    auto0E269936_p = 1;
    for ( ; auto0E269936_p <= PlayerGroupCount(auto0E269936_g) ; auto0E269936_p += (lv_playerIndex == PlayerGroupPlayer(auto0E269936_g, auto0E269936_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto0E269936_g, auto0E269936_p);
        if ((libGame_gv_talents_ActiveChoiceTierForPlayer[lv_playerIndex] != 0) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_allowedToChooseTalentsTime < TimerGetElapsed(libGame_gv_gameTimer)) && (libGame_gv_talents_TalentChoices[lv_playerIndex][libGame_gv_talents_ActiveChoiceTierForPlayer[lv_playerIndex]].lv_selection == 0) && (libGame_gv_talents_TalentChoices[lv_playerIndex][libGame_gv_talents_ActiveChoiceTierForPlayer[lv_playerIndex]].lv_numberOfTalentsForThisTier > 0)) {
            if ((libAIAI_gf_HeroAIChooseTalentViaSpecialHeroLogic(lv_playerIndex) == true)) {
                return ;
            }

            if ((libAIAI_gf_HeroAISelectNextTalentInBuild(lv_playerIndex) == true)) {
                return ;
            }

            if ((libAIAI_gf_HeroAIRandomlyPickAnyAvailableTalent(lv_playerIndex) == true)) {
                return ;
            }

        }

    }
}

bool libAIAI_gf_HeroAIMoveTo (int lp_trigPlayer, unit lp_unit, point lp_point, fixed lp_minRange, fixed lp_maxRange, bool lp_disableTeleport, bool lp_disableHearth, bool lp_disableSpeedup) {
    // Deprecated
    return libAIAI_gf_HeroAIMoveTo2(lp_trigPlayer, lp_unit, lp_point, lp_minRange, lp_maxRange, lp_disableTeleport, lp_disableHearth, lp_disableSpeedup, true);
}

bool libAIAI_gf_HeroAIMoveTo2 (int lp_trigPlayer, unit lp_unit, point lp_point, fixed lp_minRange, fixed lp_maxRange, bool lp_disableTeleport, bool lp_disableHearth, bool lp_disableSpeedup, bool lp_unmountAtTarget) {
    unitgroup auto7DE49A71_g;
    int auto7DE49A71_u;

    // Variable Declarations
    point lv_destination;
    point lv_heroPosition;
    fixed lv_distanceToDestination;
    point lv_placementPoint;
    unit lv_heroUnit;
    unit lv_heroUnitIterator;
    order lv_currentHeroOrder;
    order lv_newHeroOrder;
    unitgroup lv_allyHeroes;
    unit lv_allyHero;
    fixed lv_allyHeroDistanceToPoint;
    fixed lv_allyHeroClosestToPointDistance;
    unit lv_allyHeroClosestToPoint;
    string lv_cooldownLink;
    int lv_teamIndex;
    int lv_portalIndex;

    // Variable Initialization
    lv_allyHeroes = UnitGroupEmpty();
    lv_allyHeroClosestToPointDistance = 524287.0;
    lv_portalIndex = -1;

    // Implementation
    if ((UnitIsValid(lp_unit) == true)) {
        lv_destination = UnitGetPosition(lp_unit);
    }
    else {
        if ((lp_point != null)) {
            lv_destination = lp_point;
        }
        else {
            return false;
        }
    }
    if ((UnitIsValid(libGame_gv_players[lp_trigPlayer].lv_activeVehicle) == true)) {
        lv_heroUnit = libGame_gv_players[lp_trigPlayer].lv_activeVehicle;
    }
    else {
        lv_heroUnit = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit;
    }
    lv_heroPosition = UnitGetPosition(lv_heroUnit);
    lv_distanceToDestination = DistanceBetweenPoints(lv_heroPosition, lv_destination);
    if ((lp_unmountAtTarget == true) && (lv_distanceToDestination <= lp_minRange) && (UnitHasBehavior2(lv_heroUnit, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_mountBehavior) == true) && (libAIAI_gf_HeroAIFollowingMountedPlayer(lp_trigPlayer) == false) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_dismountAbility != null)) {
        HeroAIUnitIssueOrder(lv_heroUnit, Order(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_dismountAbility), c_orderQueueReplace);
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_moveActive == false)) {
        if ((lv_distanceToDestination > lp_maxRange)) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_moveActive = true;
        }
        else {
            return false;
        }
    }
    else {
        if ((lv_distanceToDestination <= lp_minRange)) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_moveActive = false;
            return false;
        }

    }
    lv_currentHeroOrder = UnitOrder(lv_heroUnit, 0);
    if ((lp_disableHearth == false) && (lv_heroUnit == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) {
        if ((OrderGetAbilityCommand(lv_currentHeroOrder) == AbilityCommand("PortBackToBase", 0))) {
            if ((libAIAI_gf_HeroAIEnemyEvalInCircle(lp_trigPlayer, lv_heroPosition, libAIAI_gv_aIHeroVisionRange, true, true, true) == 0.0)) {
                return true;
            }

        }
        else {
            if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_canPortHome == true) && (lv_distanceToDestination > (DistanceBetweenPoints(lv_destination, libGame_gv_players[lp_trigPlayer].lv_spawnPoint) + libAIAI_gv_aIHeroCostOfHearthstoneDistance)) && (libAIAI_gf_HeroAITimeInCurrentState(lp_trigPlayer) >= libAIAI_gv_aIHeroUseMountDelay[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)]) && (libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 3.0) == false) && (libAIAI_gf_HeroAIEnemyEvalInCircle(lp_trigPlayer, lv_heroPosition, libAIAI_gv_aIHeroMountingFarFromEnemies, true, true, true) == 0.0)) {
                HeroAIUnitIssueOrder(lv_heroUnit, Order(AbilityCommand("PortBackToBase", 0)), c_orderQueueReplace);
                return true;
            }

        }
    }

    if ((lp_disableTeleport == false) && (lv_heroUnit == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) && (libAIAI_gf_HeroAIMoveTeleport(lp_trigPlayer, lv_destination, lp_minRange) == true)) {
        return true;
    }

    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_moveStepPoint == null) || (DistanceBetweenPoints(lv_heroPosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_moveStepPoint) < libAIAI_gv_aIHeroCloseEnoughDist) || (TimerGetElapsed(libGame_gv_gameTimer) >= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_moveStepNextConsiderTime) || (OrderGetAbilityCommand(lv_currentHeroOrder) != AbilityCommand("move", 0)))) {
        if ((lv_distanceToDestination < libAIAI_gv_aIHeroDangerPathMinDistance)) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_moveStepPoint = lv_destination;
        }
        else {
            lv_teamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer);
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_moveStepNextConsiderTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroMoveStepReconsiderTime);
            lv_portalIndex = libAIAI_gf_HeroAIFindPortalToDestination(lp_trigPlayer, lv_destination, lv_distanceToDestination);
            if ((lv_portalIndex >= 0)) {
                libAIAI_gv_aIHeroes[lp_trigPlayer].lv_movePortal = libAIAI_gv_heroAIPortals[lv_teamIndex][lv_portalIndex].lv_portalIn;
                if ((OrderGetAbilityCommand(lv_currentHeroOrder) == libAIAI_gv_heroAIPortals[lv_teamIndex][lv_portalIndex].lv_portalAbility) && (OrderGetTargetUnit(lv_currentHeroOrder) == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_movePortal)) {
                    return true;
                }

                if ((DistanceBetweenPoints(lv_heroPosition, libAIAI_gv_heroAIPortals[lv_teamIndex][lv_portalIndex].lv_portalInPosition) < libAIAI_gv_aIHeroUnderworldCloseToExitDistance)) {
                    HeroAIUnitIssueOrder(lv_heroUnit, OrderTargetingUnit(libAIAI_gv_heroAIPortals[lv_teamIndex][lv_portalIndex].lv_portalAbility, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_movePortal), c_orderQueueReplace);
                    return true;
                }

                lv_destination = libAIAI_gv_heroAIPortals[lv_teamIndex][lv_portalIndex].lv_portalInPosition;
                lv_distanceToDestination = DistanceBetweenPoints(lv_heroPosition, lv_destination);
            }
            else {
                libAIAI_gv_aIHeroes[lp_trigPlayer].lv_movePortal = null;
            }
            if ((PointPathingPassable(lv_destination) == true)) {
                lv_placementPoint = lv_destination;
            }
            else {
                lv_placementPoint = UnitTypePlacementFromPoint(UnitGetType(lv_heroUnit), lp_trigPlayer, lv_destination, lp_minRange);
            }
            if ((lv_placementPoint != null)) {
                if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hasFlyingMount == false)) {
                    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_moveStepPoint = AIPositionAlongPath(lp_trigPlayer, lv_heroPosition, lv_placementPoint, libAIAI_gv_aIHeroMoveStepDistance, true, c_includeAllBuildings);
                }
                else {
                    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_moveStepPoint = lv_placementPoint;
                }
                if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_moveStepPoint == null)) {
                    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_moveStepPoint = lv_destination;
                }

            }
            else {
                libAIAI_gv_aIHeroes[lp_trigPlayer].lv_moveStepPoint = lv_destination;
            }
        }
    }

    if ((lp_disableSpeedup == false) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_speedAbility != null) && (lv_heroUnit == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) {
        lv_newHeroOrder = Order(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_speedAbility);
        if ((lv_distanceToDestination > libAIAI_gv_aIHeroGlobalTeleportMinDistance) && (libAIAI_gf_HeroAIHasGameStarted() == true) && (libAIAI_gf_HeroAITimeInCurrentState(lp_trigPlayer) >= libAIAI_gv_aIHeroUseMountDelay[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)])) {
            auto7DE49A71_g = libGame_gv_players[lp_trigPlayer].lv_heroUnitGroup;
            auto7DE49A71_u = 1;
            for ( ; auto7DE49A71_u <= UnitGroupCount(auto7DE49A71_g, c_unitCountAll) ; auto7DE49A71_u += (lv_heroUnitIterator == UnitGroupUnit(auto7DE49A71_g, auto7DE49A71_u)) ) {
                lv_heroUnitIterator = UnitGroupUnit(auto7DE49A71_g, auto7DE49A71_u);
                if ((UnitOrderIsValid(lv_heroUnitIterator, lv_newHeroOrder) == true)) {
                    HeroAIUnitIssueOrder(lv_heroUnitIterator, lv_newHeroOrder, c_orderQueueAddToFront);
                    return true;
                }

            }
        }

    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hasMount == true) && (lv_heroUnit == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) {
        if ((OrderGetAbilityCommand(lv_currentHeroOrder) == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_mountAbility)) {
            return true;
        }

        lv_newHeroOrder = Order(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_mountAbility);
        if ((lv_distanceToDestination > libAIAI_gv_aIHeroGlobalMountMinDistance) && (libAIAI_gf_HeroAITimeInCurrentState(lp_trigPlayer) >= libAIAI_gv_aIHeroUseMountDelay[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)]) && (UnitHasBehavior(lv_heroUnit, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_mountBehavior) == false) && (libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 3.0) == false) && (libAIAI_gf_HeroAIEnemyEvalInCircle(lp_trigPlayer, lv_heroPosition, libAIAI_gv_aIHeroMountingFarFromEnemies, true, true, true) == 0.0)) {
            if ((UnitOrderIsValid(lv_heroUnit, lv_newHeroOrder) == true)) {
                HeroAIUnitIssueOrder(lv_heroUnit, lv_newHeroOrder, c_orderQueueReplace);
                return true;
            }

        }

    }

    libAIAI_gf_HeroAIEnsureOrderMovePointCloseEnough(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_moveStepPoint);
    return true;
}

bool libAIAI_gf_HeroAIMoveTeleport (int lp_trigPlayer, point lp_destination, fixed lp_minRange) {
    unitgroup auto6778FEB7_g;
    int auto6778FEB7_u;

    // Variable Declarations
    point lv_adjustedDestination;
    fixed lv_distanceToDestination;
    point lv_placementPoint;
    order lv_currentHeroOrder;
    order lv_newHeroOrder;
    unitgroup lv_allyHeroes;
    unit lv_allyHero;
    fixed lv_allyHeroDistanceToPoint;
    fixed lv_allyHeroClosestToPointDistance;
    unit lv_allyHeroClosestToPoint;

    // Variable Initialization
    lv_allyHeroes = UnitGroupEmpty();
    lv_allyHeroClosestToPointDistance = 524287.0;

    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_teleportRequiresShrub == true)) {
        lv_adjustedDestination = FindClosestShrub(lp_destination, libAIAI_gv_aIHeroTeleportNearbyShrubDistance);
        if ((lv_adjustedDestination == null)) {
            lv_adjustedDestination = lp_destination;
        }

    }
    else {
        lv_adjustedDestination = lp_destination;
    }
    lv_distanceToDestination = DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_adjustedDestination);
    lv_currentHeroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_teleportAbility != null)) {
        if ((OrderGetAbilityCommand(lv_currentHeroOrder) == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_teleportAbility)) {
            return true;
        }

        if ((lv_distanceToDestination > libAIAI_gv_aIHeroGlobalTeleportMinDistance) && (libAIAI_gf_HeroAIHasGameStarted() == true) && (libAIAI_gf_HeroAITimeInCurrentState(lp_trigPlayer) >= libAIAI_gv_aIHeroUseMountDelay[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)]) && ((libAIAI_gf_IsAbilityHeroic(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_teleportAbility) != true) || (libAIAI_gf_HeroAIShouldUseUltimates(lp_trigPlayer) == true)) && ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_maxTeleportDistance == 0.0) || (lv_distanceToDestination <= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_maxTeleportDistance)) && ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_teleportRequiresVisibility == false) || (VisIsVisibleForPlayer(lp_trigPlayer, lv_adjustedDestination) == true)) && ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_teleportRequiresShrub == false) || (InShrub(lv_adjustedDestination) == true)) && (libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 3.0) == false) && (libAIAI_gf_HeroAIEnemyEvalInCircle(lp_trigPlayer, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroMountingCloseToEnemies, true, true, true) == 0.0) && (libAIAI_gf_HeroAIDangerRatioEval(libGame_gv_players[lp_trigPlayer].lv_faction, lv_adjustedDestination, libAIAI_gv_aIHeroStartClearLaneDistance) >= libAIAI_gv_aIHeroEnterCombatEvalRatio)) {
            if ((PointPathingPassable(lv_adjustedDestination) == true)) {
                lv_placementPoint = lv_adjustedDestination;
            }
            else {
                lv_placementPoint = UnitTypePlacementFromPoint(UnitGetType(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lp_trigPlayer, lv_adjustedDestination, lp_minRange);
            }
            if ((lv_placementPoint != null)) {
                lv_newHeroOrder = OrderTargetingPoint(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_teleportAbility, lv_placementPoint);
                if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_teleportAbilityIsAnItem == false)) {
                    lv_newHeroOrder = OrderTargetingPoint(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_teleportAbility, lv_placementPoint);
                }
                else {
                    lv_newHeroOrder = libAIAI_gf_HeroAIGetItemOrderTargetingPoint(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_teleportItemName, lp_trigPlayer, lv_placementPoint);
                }
                if ((UnitOrderIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_newHeroOrder) == true)) {
                    HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_newHeroOrder, c_orderQueueReplace);
                    return true;
                }

            }

        }

    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_teleportToAllyAbility != null)) {
        if ((OrderGetAbilityCommand(lv_currentHeroOrder) == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_teleportToAllyAbility)) {
            return true;
        }

        if ((lv_distanceToDestination > libAIAI_gv_aIHeroGlobalTeleportMinDistance) && (libAIAI_gf_HeroAIHasGameStarted() == true) && (libAIAI_gf_HeroAITimeInCurrentState(lp_trigPlayer) >= libAIAI_gv_aIHeroUseMountDelay[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)]) && (libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 3.0) == false) && (libAIAI_gf_HeroAIEnemyEvalInCircle(lp_trigPlayer, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroMountingCloseToEnemies, true, true, true) == 0.0)) {
            lv_allyHeroClosestToPointDistance = (0.5 * lv_distanceToDestination);
            lv_allyHeroes = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceAllyExcludeSelf, RegionEntireMap(), libCore_gv_filtersHeroic, 0);
            auto6778FEB7_g = lv_allyHeroes;
            auto6778FEB7_u = 1;
            for ( ; auto6778FEB7_u <= UnitGroupCount(auto6778FEB7_g, c_unitCountAll) ; auto6778FEB7_u += (lv_allyHero == UnitGroupUnit(auto6778FEB7_g, auto6778FEB7_u)) ) {
                lv_allyHero = UnitGroupUnit(auto6778FEB7_g, auto6778FEB7_u);
                lv_allyHeroDistanceToPoint = DistanceBetweenPoints(UnitGetPosition(lv_allyHero), lv_adjustedDestination);
                if ((lv_allyHeroDistanceToPoint < lv_allyHeroClosestToPointDistance)) {
                    lv_allyHeroClosestToPointDistance = lv_allyHeroDistanceToPoint;
                    lv_allyHeroClosestToPoint = lv_allyHero;
                }

            }
            if ((UnitIsValid(lv_allyHeroClosestToPoint) == true)) {
                lv_newHeroOrder = OrderTargetingUnit(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_teleportToAllyAbility, lv_allyHeroClosestToPoint);
                if ((UnitOrderIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_newHeroOrder) == true)) {
                    HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_newHeroOrder, c_orderQueueReplace);
                    return true;
                }

            }

        }

    }

    return false;
}

void libAIAI_gf_HeroAIAdvanceWaypoint (int lp_player) {
    // Variable Declarations
    int lv_nextWaypoint;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_player].lv_currentLane == 0)) {
        return ;
    }

    lv_nextWaypoint = libAIAI_gv_aIHeroes[lp_player].lv_curWaypointIndex;
    if ((libGame_gv_players[lp_player].lv_faction == libGame_ge_Faction_Order)) {
        if ((lv_nextWaypoint < (libGame_gv_laneData[libAIAI_gv_aIHeroes[lp_player].lv_currentLane].lv_waypointCount - 1))) {
            lv_nextWaypoint += 1;
            libAIAI_gv_aIHeroes[lp_player].lv_curWaypointIndex = lv_nextWaypoint;
        }

    }
    else {
        if ((lv_nextWaypoint == 0)) {
            libAIAI_gv_aIHeroes[lp_player].lv_curWaypointIndex = libGame_gv_laneData[libAIAI_gv_aIHeroes[lp_player].lv_currentLane].lv_waypointCount;
        }
        else {
            if ((lv_nextWaypoint > 2)) {
                lv_nextWaypoint -= 1;
                libAIAI_gv_aIHeroes[lp_player].lv_curWaypointIndex = lv_nextWaypoint;
            }

        }
    }
    libAIAI_gv_aIHeroes[lp_player].lv_curWaypointPoint = AILaneWaypointGetWaypointPosWithOffset(libAIAI_gv_aIHeroes[lp_player].lv_currentLane, libAIAI_gv_aIHeroes[lp_player].lv_curWaypointIndex, libAIAI_gv_aIHeroes[lp_player].lv_laneOffset);
}

void libAIAI_gf_HeroAIRetreatWaypoint (int lp_player) {
    // Variable Declarations
    int lv_nextWaypoint;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_player].lv_currentLane == 0)) {
        return ;
    }

    lv_nextWaypoint = libAIAI_gv_aIHeroes[lp_player].lv_curWaypointIndex;
    if ((libGame_gv_players[lp_player].lv_faction == libGame_ge_Faction_Chaos)) {
        if ((lv_nextWaypoint == libGame_gv_laneData[libAIAI_gv_aIHeroes[lp_player].lv_currentLane].lv_waypointCount)) {
            libAIAI_gv_aIHeroes[lp_player].lv_curWaypointIndex = 0;
            libAIAI_gv_aIHeroes[lp_player].lv_curWaypointPoint = libGame_gv_players[lp_player].lv_spawnPoint;
        }
        else {
            if ((lv_nextWaypoint != 0)) {
                lv_nextWaypoint += 1;
                libAIAI_gv_aIHeroes[lp_player].lv_curWaypointIndex = lv_nextWaypoint;
                libAIAI_gv_aIHeroes[lp_player].lv_curWaypointPoint = AILaneWaypointGetWaypointPosWithOffset(libAIAI_gv_aIHeroes[lp_player].lv_currentLane, libAIAI_gv_aIHeroes[lp_player].lv_curWaypointIndex, libAIAI_gv_aIHeroes[lp_player].lv_laneOffset);
            }

        }
    }
    else {
        if ((lv_nextWaypoint > 1)) {
            lv_nextWaypoint -= 1;
            libAIAI_gv_aIHeroes[lp_player].lv_curWaypointIndex = lv_nextWaypoint;
            libAIAI_gv_aIHeroes[lp_player].lv_curWaypointPoint = AILaneWaypointGetWaypointPosWithOffset(libAIAI_gv_aIHeroes[lp_player].lv_currentLane, libAIAI_gv_aIHeroes[lp_player].lv_curWaypointIndex, libAIAI_gv_aIHeroes[lp_player].lv_laneOffset);
        }
        else {
            libAIAI_gv_aIHeroes[lp_player].lv_curWaypointIndex = 0;
            libAIAI_gv_aIHeroes[lp_player].lv_curWaypointPoint = libGame_gv_players[lp_player].lv_spawnPoint;
        }
    }
}

void libAIAI_gf_HeroAIStartAdvanceLane (int lp_player) {
    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_player].lv_currentLane <= 0)) {
        libAIAI_gf_HeroAIChangeState(lp_player, libAIAI_ge_HeroAIStates_HSDefault);
        return ;
    }

    if ((UnitIsValid(libGame_gv_players[lp_player].lv_activeVehicle) == true)) {
        libAIAI_gv_aIHeroes[lp_player].lv_laneOffset = 0.0;
        libAIAI_gf_HeroAIChangeState(lp_player, libAIAI_ge_HeroAIStates_HSVehicleAdvanceInLane);
    }
    else {
        libAIAI_gf_HeroAIChangeState(lp_player, libAIAI_ge_HeroAIStates_HSAdvance);
    }
    libAIAI_gf_HeroAIUpdateLaneTargetPosition(lp_player, true);
}

void libAIAI_gf_HeroAIStartRetreatLane (int lp_player) {
    // Variable Declarations
    unitgroup lv_heroesToAvoid;
    unitgroup lv_towersToAvoid;

    // Variable Initialization
    lv_heroesToAvoid = UnitGroupEmpty();
    lv_towersToAvoid = UnitGroupEmpty();

    // Implementation
    lv_heroesToAvoid = libAIAI_gf_HeroAIGetEnemyHeroesInRetreatPath(lp_player);
    lv_towersToAvoid = libAIAI_gf_HeroAIEnemyTowersInRange(lp_player, libAIAI_gv_aIHeroAvoidNearbyEnemyTowerSearchRadius, true);
    if (((UnitGroupCount(lv_heroesToAvoid, c_unitCountAlive) > 0) || (UnitGroupCount(lv_towersToAvoid, c_unitCountAlive) > 0))) {
        libAIAI_gf_HeroAIChangeLaneOffset(lp_player, libAIAI_gf_HeroAIChooseNewLaneOffset(lp_player, lv_heroesToAvoid, lv_towersToAvoid));
    }

    libAIAI_gf_HeroAIChangeState(lp_player, libAIAI_ge_HeroAIStates_HSRetreat);
    libAIAI_gf_HeroAIUpdateLaneTargetPosition(lp_player, false);
    libAIAI_gv_aIHeroes[lp_player].lv_lastRetreatStartTime = TimerGetElapsed(libGame_gv_gameTimer);
    libAIAI_gv_aIHeroes[lp_player].lv_safeInLaneRetreating = false;
}

void libAIAI_gf_HeroAIStartFleeInJungle (int lp_player) {
    // Implementation
    libAIAI_gf_HeroAIChangeState(lp_player, libAIAI_ge_HeroAIStates_HSFleeInJungle);
    libAIAI_gv_aIHeroes[lp_player].lv_safeInJungleRetreating = false;
    libAIAI_gf_HeroAIUpdateJungleTargetPosition(lp_player, libGame_gv_players[lp_player].lv_spawnPoint);
}

void libAIAI_gf_HeroAIStartReturnToLane (int lp_player, int lp_laneIndex) {
    // Implementation
    if ((libAIAI_gf_HeroAIHasGameStarted() == false)) {
        libAIAI_gf_HeroAIChangeState(lp_player, libAIAI_ge_HeroAIStates_HSWaitForGameToStart);
        return ;
    }

    if ((lp_laneIndex <= 0)) {
        libAIAI_gf_HeroAIChangeState(lp_player, libAIAI_ge_HeroAIStates_HSDefault);
        return ;
    }

    libGame_gf_CalculateClosestLaneDataForLane(UnitGetPosition(libAIAI_gv_aIHeroes[lp_player].lv_currentHeroUnit), lp_laneIndex);
    if ((libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_closestDist <= libAIAI_gv_aIHeroCloseToLaneDistance)) {
        libAIAI_gv_aIHeroes[lp_player].lv_currentLane = lp_laneIndex;
        libAIAI_gf_HeroAIChangeDesiredLane(lp_player, lp_laneIndex);
        libAIAI_gf_HeroAIStartAdvanceLane(lp_player);
        return ;
    }

    if ((UnitIsValid(libGame_gv_players[lp_player].lv_activeVehicle) == true)) {
        libAIAI_gf_HeroAIChangeState(lp_player, libAIAI_ge_HeroAIStates_HSVehicleReturnToLane);
    }
    else {
        libAIAI_gf_HeroAIChangeState(lp_player, libAIAI_ge_HeroAIStates_HSReturnToLane);
    }
    libAIAI_gv_aIHeroes[lp_player].lv_currentLane = 0;
    libAIAI_gf_HeroAIChangeDesiredLane(lp_player, lp_laneIndex);
    libAIAI_gv_aIHeroes[lp_player].lv_returnToLaneLane = libAIAI_gv_aIHeroes[lp_player].lv_desiredLane;
    libAIAI_gv_aIHeroes[lp_player].lv_returnToLanePosition = libAIAI_gf_HeroAIGetReturnToLanePosition(lp_player, libAIAI_gv_aIHeroes[lp_player].lv_desiredLane);
    libAIAI_gf_HeroAIUpdateJungleTargetPosition(lp_player, libAIAI_gv_aIHeroes[lp_player].lv_returnToLanePosition);
}

int libAIAI_gf_HeroAIGetClosestMinionLane (point lp_testPoint) {
    // Implementation
    libGame_gf_CalculateClosestLaneData(lp_testPoint);
    return libGame_gv_closestLaneData.lv_closestMinionLane;
}

void libAIAI_gf_HeroAIReturnToClosestLane (int lp_player) {
    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_player].lv_desiredLane > 0) && (libAIAI_gv_aIHeroAIAllowedToChangeDesiredLane[(libAIAI_gv_aIHeroes[lp_player].lv_difficulty)] == false)) {
        libAIAI_gf_HeroAIStartReturnToLane(lp_player, libAIAI_gv_aIHeroes[lp_player].lv_desiredLane);
        return ;
    }

    if ((libAIAI_gv_aIHeroes[lp_player].lv_desiredLane > 0) && ((libAIAI_gf_HeroAIIsPlayerAtSpawn(lp_player) == true) || (libAIAI_gf_HeroAIIsPlayerInsideEnemyBase(lp_player) == true))) {
        libAIAI_gf_HeroAIStartReturnToLane(lp_player, libAIAI_gv_aIHeroes[lp_player].lv_desiredLane);
    }
    else {
        libAIAI_gf_HeroAIStartReturnToLane(lp_player, libAIAI_gf_HeroAIGetClosestMinionLane(UnitGetPosition(libAIAI_gf_HeroAIGetHeroOrVehicle(lp_player))));
    }
}

point libAIAI_gf_HeroAIGetReturnToLanePosition (int lp_player, int lp_laneIndex) {
    // Implementation
    return libAIAI_gf_HeroAIGetPositionBehindContentionPoint(lp_player, lp_laneIndex, libAIAI_gv_aIHeroRetreatDistanceToChangeLanes, 0.0);
}

void libAIAI_gf_HeroAIChangeLaneOffset (int lp_player, fixed lp_laneOffset) {
    // Implementation
    libAIAI_gv_aIHeroes[lp_player].lv_laneOffset = lp_laneOffset;
    if ((libAIAI_gv_aIHeroes[lp_player].lv_curWaypointIndex == 0)) {
        return ;
    }

    libAIAI_gv_aIHeroes[lp_player].lv_curWaypointPoint = AILaneWaypointGetWaypointPosWithOffset(libAIAI_gv_aIHeroes[lp_player].lv_currentLane, libAIAI_gv_aIHeroes[lp_player].lv_curWaypointIndex, libAIAI_gv_aIHeroes[lp_player].lv_laneOffset);
}

void libAIAI_gf_HeroAIUpdateLaneTargetPosition (int lp_player, bool lp_advancing) {
    // Variable Declarations
    unit lv_heroUnit;
    fixed lv_stepDistance;
    fixed lv_closestLanePosition;
    fixed lv_distanceToNextWaypoint;
    point lv_direction;
    int lv_closestIndex;
    int lv_secondaryIndex;

    // Variable Initialization

    // Implementation
    if (((libCore_gv_sYSGameMode == libCore_ge_GameModes_ArenaMode) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_AttackDefend))) {
        return ;
    }

    if ((lp_advancing == true)) {
        lv_stepDistance = libAIAI_gv_aIHeroAdvanceLaneStepDistance;
    }
    else {
        lv_stepDistance = libAIAI_gv_aIHeroRetreatLaneStepDistance;
    }
    lv_heroUnit = libAIAI_gf_HeroAIGetHeroOrVehicle(lp_player);
    lv_closestLanePosition = libAIAI_gf_AIGetClosestLanePosition(libAIAI_gv_aIHeroes[lp_player].lv_currentLane, UnitGetPosition(lv_heroUnit));
    lv_closestIndex = libGame_gv_closestLaneData.lv_laneData[libAIAI_gv_aIHeroes[lp_player].lv_currentLane].lv_closestIndex;
    lv_secondaryIndex = libGame_gv_closestLaneData.lv_laneData[libAIAI_gv_aIHeroes[lp_player].lv_currentLane].lv_secondaryIndex;
    if ((((libGame_gv_players[lp_player].lv_faction == libGame_ge_Faction_Order) && (lp_advancing == true)) || ((libGame_gv_players[lp_player].lv_faction == libGame_ge_Faction_Chaos) && (lp_advancing == false)))) {
        libAIAI_gv_aIHeroes[lp_player].lv_curWaypointIndex = MaxI(lv_closestIndex, lv_secondaryIndex);
    }
    else {
        libAIAI_gv_aIHeroes[lp_player].lv_curWaypointIndex = MinI(lv_closestIndex, lv_secondaryIndex);
    }
    libAIAI_gv_aIHeroes[lp_player].lv_curWaypointPoint = AILaneWaypointGetWaypointPosWithOffset(libAIAI_gv_aIHeroes[lp_player].lv_currentLane, libAIAI_gv_aIHeroes[lp_player].lv_curWaypointIndex, libAIAI_gv_aIHeroes[lp_player].lv_laneOffset);
    libAIAI_gv_aIHeroes[lp_player].lv_laneTargetPosition = AILaneWaypointConvertWaydistOffsetToPoint(libAIAI_gv_aIHeroes[lp_player].lv_currentLane, lv_closestLanePosition, libAIAI_gv_aIHeroes[lp_player].lv_laneOffset);
    libAIAI_gf_HeroAIMoveLaneTargetPosition(lp_player, lv_stepDistance, lp_advancing);
    if ((lp_advancing == true)) {
        libAIAI_gf_HeroAIEnsureOrderAttackPointCloseEnough(lp_player, libAIAI_gv_aIHeroes[lp_player].lv_laneTargetPosition);
    }
    else {
        libAIAI_gf_HeroAIEnsureOrderMovePoint(lp_player, libAIAI_gv_aIHeroes[lp_player].lv_laneTargetPosition);
    }
}

bool libAIAI_gf_HeroAIMoveLaneTargetPosition (int lp_trigPlayer, fixed lp_distance, bool lp_advancing) {
    // Variable Declarations
    point lv_newTargetPosition;
    point lv_oldTargetPosition;
    fixed lv_distanceLeftToMove;
    fixed lv_distanceToNextWaypoint;
    point lv_direction;
    fixed lv_stepLength;
    fixed lv_reverseStepLength;
    bool lv_blockage;

    // Variable Initialization

    // Implementation
    lv_newTargetPosition = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition;
    lv_distanceLeftToMove = lp_distance;
    while ((lv_distanceLeftToMove > 0.0)) {
        lv_distanceToNextWaypoint = DistanceBetweenPoints(lv_newTargetPosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curWaypointPoint);
        if ((lv_distanceToNextWaypoint > 0.1)) {
            lv_stepLength = MinF(lv_distanceToNextWaypoint, lv_distanceLeftToMove);
            lv_direction = AIGetDirection(lv_newTargetPosition, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curWaypointPoint);
            lv_oldTargetPosition = lv_newTargetPosition;
            lv_newTargetPosition = libCore_gf_AdvancePointinDirection(lv_oldTargetPosition, lv_direction, lv_stepLength);
            if ((lp_advancing == true)) {
                lv_reverseStepLength = MaxF(2.0, (0.25 * lv_stepLength));
                while (((libAIAI_gf_AIIsPointBehindEnemyGateEstimate(lv_oldTargetPosition, lp_trigPlayer, lv_newTargetPosition) == true) || ((lv_blockage == true) && (PointPathingPassable(lv_newTargetPosition) == false)))) {
                    lv_blockage = true;
                    lv_stepLength -= lv_reverseStepLength;
                    if ((lv_stepLength > 1.0)) {
                        lv_newTargetPosition = libCore_gf_AdvancePointinDirection(lv_oldTargetPosition, lv_direction, lv_stepLength);
                    }
                    else {
                        lv_stepLength = 0.0;
                        lv_newTargetPosition = lv_oldTargetPosition;
                        break;
                    }
                }
                if ((lv_blockage == true)) {
                    lv_distanceLeftToMove -= lv_stepLength;
                    break;
                }

            }

            lv_distanceLeftToMove = MaxF((lv_distanceLeftToMove - lv_distanceToNextWaypoint), 0.0);
        }

        if ((lv_distanceLeftToMove > 0.0)) {
            if ((libAIAI_gf_HeroAIIsAtLastWaypoint(lp_trigPlayer, lp_advancing) == true)) {
                break;
            }
            else {
                if ((lp_advancing == true)) {
                    libAIAI_gf_HeroAIAdvanceWaypoint(lp_trigPlayer);
                }
                else {
                    libAIAI_gf_HeroAIRetreatWaypoint(lp_trigPlayer);
                }
            }
        }

        if ((PointPathingPassable(lv_newTargetPosition) == false)) {
            lv_distanceLeftToMove += libAIAI_gv_aIHeroCloseEnoughDist;
        }

    }
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition = lv_newTargetPosition;
    return (lv_distanceLeftToMove < lp_distance);
}

void libAIAI_gf_HeroAIUpdateJungleTargetPosition (int lp_trigPlayer, point lp_destination) {
    // Variable Declarations
    point lv_start;
    bool lv_useDangerMap;
    point lv_result;
    point lv_dangerResult;
    point lv_nonDangerResult;

    // Variable Initialization

    // Implementation
    if ((UnitIsValid(libGame_gv_players[lp_trigPlayer].lv_activeVehicle) == true)) {
        lv_useDangerMap = false;
        lv_start = UnitGetPosition(libGame_gv_players[lp_trigPlayer].lv_activeVehicle);
    }
    else {
        lv_useDangerMap = libAIAI_gv_aIHeroPathAroundDanger[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty];
        lv_start = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    }
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_jungleTargetPosition = AIPositionAlongPath(lp_trigPlayer, lv_start, lp_destination, libAIAI_gv_aIHeroJungleStepDistance, lv_useDangerMap, c_includeAllBuildings);
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_jungleTargetPosition == null)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_jungleTargetPosition = lp_destination;
    }

    libAIAI_gf_HeroAIEnsureOrderMovePoint(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_jungleTargetPosition);
}

bool libAIAI_gf_HeroAIIsAtLastWaypoint (int lp_trigPlayer, bool lp_advancing) {
    // Implementation
    if ((lp_advancing == true)) {
        if ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order)) {
            return (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curWaypointIndex >= (libGame_gv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_waypointCount - 1));
        }
        else {
            return (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curWaypointIndex <= 2);
        }
    }
    else {
        if ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order)) {
            return (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curWaypointIndex == 1);
        }
        else {
            return (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curWaypointIndex == libGame_gv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_waypointCount);
        }
    }
}

fixed libAIAI_gf_HeroAIChooseNewLaneOffset (int lp_trigPlayer, unitgroup lp_heroesToAvoid, unitgroup lp_towersToAvoid) {
    unitgroup auto4C54C183_g;
    int auto4C54C183_u;
    unitgroup auto7D2783D2_g;
    int auto7D2783D2_u;
    int auto243C961D_ae;
    unitgroup auto592EC781_g;
    int auto592EC781_u;
    int auto2B87D7BE_ae;
    int autoF14B4851_ae;
    int auto71FD6EA0_ae;

    // Variable Declarations
    unitgroup lv_allyHeroes;
    unitgroup lv_enemyHeroes;
    unit lv_testUnit;
    int lv_testOwner;
    fixed lv_laneOffset;
    int lv_laneBucket;
    bool lv_avoidingTower;
    fixed lv_numberofSplits;
    fixed lv_numberofBucketsPerSplit;
    int lv_splitOfTestUnitBucket;
    int lv_splitOfOtherBucket;
    fixed lv_bucketCenter;
    int lv_bucketIndex;
    fixed lv_distance;
    fixed[libAIAI_gv_aIHeroNumberofLaneBuckets + 1] lv_bucketScore;
    fixed lv_bestBucketCenter;
    fixed lv_bestBucketScore;
    fixed lv_bestBucketDistance;
    int lv_minBestBucketIndex;
    int lv_maxBestBucketIndex;
    bool lv_higherValueSinceLastMatch;
    fixed lv_minBucketEdge;
    fixed lv_maxBucketEdge;
    fixed lv_finalBucketWidth;

    // Variable Initialization
    lv_bestBucketScore = 524287.0;
    lv_bestBucketDistance = 524287.0;
    lv_higherValueSinceLastMatch = true;

    // Implementation
    lv_allyHeroes = UnitGroupFilterAlliance(lp_heroesToAvoid, lp_trigPlayer, c_unitAllianceAllyExcludeSelf, 0);
    lv_enemyHeroes = UnitGroupFilterAlliance(lp_heroesToAvoid, lp_trigPlayer, c_unitAllianceEnemy, 0);
    auto4C54C183_g = lv_enemyHeroes;
    auto4C54C183_u = 1;
    for ( ; auto4C54C183_u <= UnitGroupCount(auto4C54C183_g, c_unitCountAll) ; auto4C54C183_u += (lv_testUnit == UnitGroupUnit(auto4C54C183_g, auto4C54C183_u)) ) {
        lv_testUnit = UnitGroupUnit(auto4C54C183_g, auto4C54C183_u);
        lv_testOwner = UnitGetOwner(lv_testUnit);
        if ((libAIAI_gf_HeroAIIsPlayerActive(lv_testOwner, 2) == true) && (libAIAI_gv_aIHeroes[lv_testOwner].lv_currentLane == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane)) {
            lv_laneOffset = libAIAI_gv_aIHeroes[lv_testOwner].lv_laneOffset;
        }
        else {
            lv_laneOffset = libAIAI_gf_AIGetLaneOffsetOfPoint(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane, UnitGetPosition(lv_testUnit));
        }
        lv_laneBucket = libAIAI_gf_HeroAIGetClosestLaneOffsetBucket(lv_laneOffset);
        lv_bucketScore[lv_laneBucket] += libAIAI_gv_aIHeroLaneOffsetEnemyHeroScore;
        if ((lv_laneBucket > 1)) {
            lv_bucketScore[(lv_laneBucket - 1)] += (libAIAI_gv_aIHeroLaneOffsetEnemyHeroScore / 2.0);
        }

        if ((lv_laneBucket < libAIAI_gv_aIHeroNumberofLaneBuckets)) {
            lv_bucketScore[(lv_laneBucket + 1)] += (libAIAI_gv_aIHeroLaneOffsetEnemyHeroScore / 2.0);
        }

    }
    auto7D2783D2_g = lp_towersToAvoid;
    auto7D2783D2_u = 1;
    for ( ; auto7D2783D2_u <= UnitGroupCount(auto7D2783D2_g, c_unitCountAll) ; auto7D2783D2_u += (lv_testUnit == UnitGroupUnit(auto7D2783D2_g, auto7D2783D2_u)) ) {
        lv_testUnit = UnitGroupUnit(auto7D2783D2_g, auto7D2783D2_u);
        lv_laneOffset = libAIAI_gf_AIGetLaneOffsetOfPoint(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane, UnitGetPosition(lv_testUnit));
        auto243C961D_ae = libAIAI_gv_aIHeroNumberofLaneBuckets;
        lv_bucketIndex = 1;
        for ( ; lv_bucketIndex <= auto243C961D_ae ; lv_bucketIndex += 1 ) {
            if ((libAIAI_gf_HeroAIIsInRangeofLaneOffsetBucket(lv_laneOffset, libAIAI_gv_aIHeroNearBuildingRange, lv_bucketIndex) == true)) {
                lv_bucketScore[lv_bucketIndex] += libAIAI_gv_aIHeroLaneOffsetEnemyTowerScore;
                lv_avoidingTower = true;
            }

        }
    }
    lv_numberofSplits = (UnitGroupCount(lv_allyHeroes, c_unitCountAlive) + 1);
    if ((lv_avoidingTower == true)) {
        lv_numberofSplits += 1.0;
    }

    lv_numberofBucketsPerSplit = (IntToFixed(libAIAI_gv_aIHeroNumberofLaneBuckets) / lv_numberofSplits);
    auto592EC781_g = lv_allyHeroes;
    auto592EC781_u = 1;
    for ( ; auto592EC781_u <= UnitGroupCount(auto592EC781_g, c_unitCountAll) ; auto592EC781_u += (lv_testUnit == UnitGroupUnit(auto592EC781_g, auto592EC781_u)) ) {
        lv_testUnit = UnitGroupUnit(auto592EC781_g, auto592EC781_u);
        lv_testOwner = UnitGetOwner(lv_testUnit);
        if ((libAIAI_gf_HeroAIIsPlayerActive(lv_testOwner, 2) == true) && (libAIAI_gv_aIHeroes[lv_testOwner].lv_currentLane == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane)) {
            lv_laneOffset = libAIAI_gv_aIHeroes[lv_testOwner].lv_laneOffset;
        }
        else {
            lv_laneOffset = libAIAI_gf_AIGetLaneOffsetOfPoint(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane, UnitGetPosition(lv_testUnit));
        }
        lv_laneBucket = libAIAI_gf_HeroAIGetClosestLaneOffsetBucket(lv_laneOffset);
        lv_splitOfTestUnitBucket = FixedToInt((IntToFixed((lv_laneBucket - 1)) / lv_numberofBucketsPerSplit));
        auto2B87D7BE_ae = libAIAI_gv_aIHeroNumberofLaneBuckets;
        lv_bucketIndex = 1;
        for ( ; lv_bucketIndex <= auto2B87D7BE_ae ; lv_bucketIndex += 1 ) {
            lv_splitOfOtherBucket = FixedToInt((IntToFixed((lv_bucketIndex - 1)) / lv_numberofBucketsPerSplit));
            if ((lv_splitOfTestUnitBucket == lv_splitOfOtherBucket)) {
                lv_bucketScore[lv_bucketIndex] += libAIAI_gv_aIHeroLaneOffsetAllyHeroScore;
            }

        }
    }
    lv_laneOffset = libAIAI_gf_AIGetLaneOffsetOfPoint(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit));
    autoF14B4851_ae = libAIAI_gv_aIHeroNumberofLaneBuckets;
    lv_bucketIndex = 1;
    for ( ; lv_bucketIndex <= autoF14B4851_ae ; lv_bucketIndex += 1 ) {
        if ((lv_bucketScore[lv_bucketIndex] > lv_bestBucketScore)) {
            lv_higherValueSinceLastMatch = true;
            continue;
        }

        lv_bucketCenter = (((0.5 + (lv_bucketIndex - 1)) * libAIAI_gv_aIHeroLaneBucketWidth) - libAIAI_gv_aIHeroMaximumLaneOffset);
        lv_distance = AbsF((lv_bucketCenter - lv_laneOffset));
        if ((lv_higherValueSinceLastMatch == true)) {
            if ((lv_bucketScore[lv_bucketIndex] == lv_bestBucketScore) && (lv_distance >= lv_bestBucketDistance)) {
                continue;
            }

        }

        if (((lv_higherValueSinceLastMatch == true) || (lv_bucketScore[lv_bucketIndex] < lv_bestBucketScore))) {
            lv_minBestBucketIndex = lv_bucketIndex;
            lv_maxBestBucketIndex = lv_bucketIndex;
            lv_bestBucketDistance = lv_distance;
            lv_bestBucketScore = lv_bucketScore[lv_bucketIndex];
            lv_higherValueSinceLastMatch = false;
        }
        else {
            lv_maxBestBucketIndex = lv_bucketIndex;
            if ((lv_distance < lv_bestBucketDistance)) {
                lv_bestBucketDistance = lv_distance;
            }

            if ((lv_bucketScore[lv_bucketIndex] != lv_bestBucketScore)) {
                TriggerDebugOutput(1, StringExternal("Param/Value/lib_AIAI_F25222D3"), true);
            }

        }
    }
    if (((lv_minBestBucketIndex == 0) || (lv_maxBestBucketIndex == 0) || (lv_bucketScore[lv_minBestBucketIndex] != lv_bestBucketScore) || (lv_bucketScore[lv_maxBestBucketIndex] != lv_bestBucketScore))) {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_AIAI_2C11CC1D"), true);
        auto71FD6EA0_ae = libAIAI_gv_aIHeroNumberofLaneBuckets;
        lv_bucketIndex = 1;
        for ( ; lv_bucketIndex <= auto71FD6EA0_ae ; lv_bucketIndex += 1 ) {
            TextExpressionSetToken("Param/Expression/lib_AIAI_FD188F17", "A", IntToText(lv_bucketIndex));
            TextExpressionSetToken("Param/Expression/lib_AIAI_FD188F17", "B", FixedToText(lv_bucketScore[lv_bucketIndex], c_fixedPrecisionAny));
            TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_AIAI_FD188F17"), true);
        }
        TextExpressionSetToken("Param/Expression/lib_AIAI_2674D872", "A", IntToText(lv_minBestBucketIndex));
        TextExpressionSetToken("Param/Expression/lib_AIAI_2674D872", "B", IntToText(lv_maxBestBucketIndex));
        TriggerDebugOutput(1, TextExpressionAssemble("Param/Expression/lib_AIAI_2674D872"), true);
    }

    lv_minBucketEdge = (((lv_minBestBucketIndex - 1) * libAIAI_gv_aIHeroLaneBucketWidth) - libAIAI_gv_aIHeroMaximumLaneOffset);
    lv_maxBucketEdge = ((lv_maxBestBucketIndex * libAIAI_gv_aIHeroLaneBucketWidth) - libAIAI_gv_aIHeroMaximumLaneOffset);
    lv_finalBucketWidth = (lv_maxBucketEdge - lv_minBucketEdge);
    lv_bestBucketCenter = (lv_minBucketEdge + (lv_finalBucketWidth * RandomFixed(0.2, 0.8)));
    return lv_bestBucketCenter;
}

int libAIAI_gf_HeroAIGetClosestLaneOffsetBucket (fixed lp_laneOffset) {
    // Variable Declarations
    int lv_laneBucket;

    // Variable Initialization

    // Implementation
    lv_laneBucket = (1 + FixedToInt(((lp_laneOffset + libAIAI_gv_aIHeroMaximumLaneOffset) / libAIAI_gv_aIHeroLaneBucketWidth)));
    if ((lv_laneBucket < 1)) {
        lv_laneBucket = 1;
    }

    if ((lv_laneBucket > libAIAI_gv_aIHeroNumberofLaneBuckets)) {
        lv_laneBucket = libAIAI_gv_aIHeroNumberofLaneBuckets;
    }

    return lv_laneBucket;
}

bool libAIAI_gf_HeroAIIsInRangeofLaneOffsetBucket (fixed lp_laneOffset, fixed lp_range, int lp_testBucket) {
    // Variable Declarations
    int lv_minLaneBucket;
    int lv_maxLaneBucket;

    // Variable Initialization

    // Implementation
    lv_minLaneBucket = (1 + FixedToInt((((lp_laneOffset - lp_range) + libAIAI_gv_aIHeroMaximumLaneOffset) / libAIAI_gv_aIHeroLaneBucketWidth)));
    lv_maxLaneBucket = (1 + FixedToInt((((lp_laneOffset + lp_range) + libAIAI_gv_aIHeroMaximumLaneOffset) / libAIAI_gv_aIHeroLaneBucketWidth)));
    if ((lv_maxLaneBucket >= lp_testBucket) && (lv_minLaneBucket <= lp_testBucket)) {
        return true;
    }

    return false;
}

bool libAIAI_gf_HeroAIIsSafe (int lp_trigPlayer) {
    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane <= 0)) {
        return libAIAI_gf_HeroAIIsSafeJungle(lp_trigPlayer);
    }
    else {
        return libAIAI_gf_HeroAIIsSafeLane(lp_trigPlayer);
    }
}

bool libAIAI_gf_HeroAIIsSafeLane (int lp_trigPlayer) {
    // Variable Declarations
    fixed lv_contentionPointLanePosition;

    // Variable Initialization

    // Implementation
    if ((((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_lastRetreatStartTime + libAIAI_gv_aIHeroMinRetreatDuration) > TimerGetElapsed(libGame_gv_gameTimer)) || (libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 1.0) == true))) {
        return false;
    }

    libAIAI_gf_HeroAIEval(lp_trigPlayer);
    if ((DistanceBetweenPoints(libGame_gv_players[lp_trigPlayer].lv_spawnPoint, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) > 30.0) && (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroClosestLanePoint) > 8.0)) {
        return false;
    }

    if (((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome == true) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane != libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane)) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalEnemyEval > 0.0)) {
        return false;
    }

    lv_contentionPointLanePosition = libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_contentionPointLanePosition;
    if ((libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_gameState != libAIAI_ge_HeroAIGameState_Act3) && (UnitGroupCount(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyMinionsSummons, c_unitCountAlive) == 0) && (UnitGroupCount(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyTowers, c_unitCountAlive) == 0) && (libAIAI_gf_HeroAIIsPlayerBehindLanePosition(lp_trigPlayer, lv_contentionPointLanePosition) == false)) {
        return false;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalAllyEval < (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_selfEval + 95.0)) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalEnemyEval >= (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalAllyEval + 100.0))) {
        return false;
    }

    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval >= (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalAllyEval + 100.0)) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval >= (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyHeroEval + (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyTowerEval + 400.0))))) {
        return false;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalEnemyEval > (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalAllyEval + 800.0))) {
        return false;
    }

    if ((libAIAI_gf_HeroAIBeingTargettedByDangerousAbility(lp_trigPlayer) == true)) {
        return false;
    }

    return true;
}

bool libAIAI_gf_HeroAIIsSafeJungle (int lp_trigPlayer) {
    unitgroup autoD7056FA9_g;
    int autoD7056FA9_u;

    // Variable Declarations
    unitgroup lv_nearbyCampDefenders;
    unit lv_campDefender;
    int lv_campIndex;
    order lv_order;

    // Variable Initialization
    lv_nearbyCampDefenders = UnitGroupEmpty();

    // Implementation
    if ((libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 1.0) == true)) {
        return false;
    }

    libAIAI_gf_HeroAIEval(lp_trigPlayer);
    if (((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome == true)) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalEnemyEval > 0.0)) {
        return false;
    }

    if ((UnitGroupCount(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyTowers, c_unitCountAlive) > 0)) {
        return false;
    }

    if ((UnitGroupCount(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroes, c_unitCountAlive) > 0)) {
        return false;
    }

    if ((UnitGroupCount(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyMinionsSummons, c_unitCountAlive) == 0) && (UnitGroupCount(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyTowers, c_unitCountAlive) == 0) && (UnitGroupCount(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyMinionsSummons, c_unitCountAlive) > 1)) {
        return false;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalEnemyEval >= 200.0) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalAllyEval < (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_selfEval + 100.0))) {
        return false;
    }

    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval >= (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalAllyEval + 100.0)) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval >= (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyHeroEval + (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyTowerEval + 300.0))))) {
        return false;
    }

    lv_nearbyCampDefenders = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), 8.0), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
    if ((UnitGroupCount(lv_nearbyCampDefenders, c_unitCountAlive) > 0)) {
        return false;
    }

    lv_nearbyCampDefenders = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), 12.0), UnitFilter((1 << c_targetFilterLight), 0, (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
    autoD7056FA9_g = lv_nearbyCampDefenders;
    autoD7056FA9_u = 1;
    for ( ; autoD7056FA9_u <= UnitGroupCount(autoD7056FA9_g, c_unitCountAll) ; autoD7056FA9_u += (lv_campDefender == UnitGroupUnit(autoD7056FA9_g, autoD7056FA9_u)) ) {
        lv_campDefender = UnitGroupUnit(autoD7056FA9_g, autoD7056FA9_u);
        lv_order = UnitOrder(lv_campDefender, 0);
        if ((lv_order != null) && (OrderGetTargetType(lv_order) == c_orderTargetUnit) && (OrderGetTargetUnit(lv_order) == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) {
            return false;
        }

    }
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalEnemyEval > (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalAllyEval + 700.0))) {
        return false;
    }

    return true;
}

bool libAIAI_gf_HeroAIIsSideOfMapSafe (int lp_faction, fixed lp_modifier) {
    int autoB391A7CD_ae;
    int autoB391A7CD_ai;
    int autoC7265D48_ae;
    int autoC7265D48_ai;

    // Variable Declarations
    int lv_teamIndex;
    int lv_playerIndex;
    point lv_contentionPoint;
    int lv_laneIndex;

    // Variable Initialization

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_numberOfMissingEnemies >= 3)) {
        return false;
    }

    autoB391A7CD_ae = libCore_gv_bALMaxPlayers;
    autoB391A7CD_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (autoB391A7CD_ai >= 0 && lv_playerIndex <= autoB391A7CD_ae) || (autoB391A7CD_ai <= 0 && lv_playerIndex >= autoB391A7CD_ae) ) ; lv_playerIndex += autoB391A7CD_ai ) {
        if ((libGame_gv_players[lv_playerIndex].lv_faction != lp_faction) && (UnitIsAlive(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit) == true) && ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_heroTrackingData[lv_playerIndex].lv_lastSeenTime + libAIAI_gv_aIHeroMissingDelay) > TimerGetElapsed(libGame_gv_gameTimer)) && (libCore_gf_TestLocationClosertoFactionSide(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_heroTrackingData[lv_playerIndex].lv_lastSeenLocation, lp_faction, lp_modifier) == true)) {
            return false;
        }

    }
    autoC7265D48_ae = libGame_gv_laneCount;
    autoC7265D48_ai = 1;
    lv_laneIndex = 1;
    for ( ; ( (autoC7265D48_ai >= 0 && lv_laneIndex <= autoC7265D48_ae) || (autoC7265D48_ai <= 0 && lv_laneIndex >= autoC7265D48_ae) ) ; lv_laneIndex += autoC7265D48_ai ) {
        lv_contentionPoint = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_contentionPoint;
        if ((libGame_gv_laneData[lv_laneIndex].lv_minionSpawningEnabled == true) && (libCore_gf_TestLocationClosertoFactionSide(lv_contentionPoint, lp_faction, lp_modifier) == true)) {
            return false;
        }

    }
    return true;
}

bool libAIAI_gf_HeroAIIsNearbyLaneSafe (int lp_faction, point lp_testPoint, int lp_laneIndex, bool lp_considerContentionPosition) {
    // Variable Declarations
    point lv_closestPoint;
    int lv_closestIndex;
    int lv_secondaryIndex;
    fixed lv_closestLanePosition;

    // Variable Initialization

    // Implementation
    libGame_gf_CalculateClosestLaneDataForLane(lp_testPoint, lp_laneIndex);
    lv_closestIndex = libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_closestIndex;
    lv_secondaryIndex = libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_secondaryIndex;
    lv_closestPoint = libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_closestPoint;
    lv_closestLanePosition = AILaneWaypointConvertPointToWaydist(lp_laneIndex, lv_closestIndex, lv_secondaryIndex, lv_closestPoint);
    if ((lp_faction == libGame_ge_Faction_Order)) {
        if ((lp_considerContentionPosition == true)) {
            return (lv_closestLanePosition <= libAIAI_gv_heroAITeamData[(0)].lv_laneData[lp_laneIndex].lv_contentionPointLanePosition);
        }
        else {
            return (lv_closestLanePosition <= libAIAI_gv_heroAITeamData[(1)].lv_laneData[lp_laneIndex].lv_frontTowerPosition);
        }
    }
    else {
        if ((lp_considerContentionPosition == true)) {
            return (lv_closestLanePosition >= libAIAI_gv_heroAITeamData[(1)].lv_laneData[lp_laneIndex].lv_contentionPointLanePosition);
        }
        else {
            return (lv_closestLanePosition >= libAIAI_gv_heroAITeamData[(0)].lv_laneData[lp_laneIndex].lv_frontTowerPosition);
        }
    }
}

bool libAIAI_gf_HeroAIShouldRetreatLane (int lp_trigPlayer) {
    int auto76CD35E4_ae;
    int auto76CD35E4_ai;

    // Variable Declarations
    int lv_behaviorIndex;
    unit lv_lastAttacker;
    order lv_attackerOrder;
    bool lv_attackerTargettingMe;
    fixed lv_curLifePercent;
    region lv_testRegion;
    unitgroup lv_testUnits;

    // Variable Initialization
    lv_testUnits = UnitGroupEmpty();

    // Implementation
    lv_curLifePercent = UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent);
    if ((libAIAI_gf_HeroAIShouldRetreatToHeal(lp_trigPlayer) == true)) {
        return true;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome == true)) {
        return true;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane != libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane)) {
        return true;
    }

    if ((libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 1.0) == true)) {
        auto76CD35E4_ae = UnitBehaviorCountAll(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
        auto76CD35E4_ai = 1;
        lv_behaviorIndex = 1;
        for ( ; ( (auto76CD35E4_ai >= 0 && lv_behaviorIndex <= auto76CD35E4_ae) || (auto76CD35E4_ai <= 0 && lv_behaviorIndex >= auto76CD35E4_ae) ) ; lv_behaviorIndex += auto76CD35E4_ai ) {
            if ((UnitBehaviorHasFlag(UnitBehaviorGet(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_behaviorIndex), c_unitBehaviorFlagUser8) == true)) {
                return true;
            }

        }
    }

    if ((libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_gameState != libAIAI_ge_HeroAIGameState_Act3)) {
        if ((libAIAI_gf_HeroAIIsInRangeOfEnemyTowerOrCore(lp_trigPlayer) == true)) {
            if (((libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)] == true) || (libAIAI_gv_aIHeroStayBehindMinionsNearTowers[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)] == true)) && (libAIAI_gf_HeroAICloseToAnyEnemyTowerOrCoreWithoutEnoughHelp(lp_trigPlayer) == true)) {
                return true;
            }

        }
        else {
            if ((libAIAI_gv_aIHeroWaitForMinionsWhenLaning[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)] == true) && (libGame_gv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_minionSpawningEnabled == true) && (UnitGroupCount(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyMinionsSummons, c_unitCountAlive) == 0) && (UnitGroupCount(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyTowers, c_unitCountAlive) == 0) && (libAIAI_gf_HeroAIEnemyTeamCursed(lp_trigPlayer) == false) && (libAIAI_gf_HeroAIIsPlayerBehindLanePosition(lp_trigPlayer, libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_contentionPointLanePosition) == false)) {
                return true;
            }

        }
    }

    libAIAI_gf_HeroAIEval(lp_trigPlayer);
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalAllyEval < (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_selfEval + 90.0)) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalEnemyEval >= (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalAllyEval + 75.0))) {
        return true;
    }

    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval >= (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalAllyEval + 200.0)) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval >= (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyHeroEval + (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyTowerEval + 800.0))))) {
        return true;
    }

    if ((((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalEnemyEval - libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyTowerEval) > (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalAllyEval + 1000.0)))) {
        return true;
    }

    if ((libAIAI_gf_HeroAIBeingTargettedByDangerousAbility(lp_trigPlayer) == true)) {
        return true;
    }

    return false;
}

bool libAIAI_gf_HeroAIShouldRetreatFromAttacker (int lp_trigPlayer) {
    // Variable Declarations
    unit lv_lastAttacker;
    order lv_attackerOrder;
    bool lv_attackerTargettingMe;
    fixed lv_curLifePercent;
    unit lv_enemyCore;

    // Variable Initialization

    // Implementation
    libAIAI_gf_HeroAIEval(lp_trigPlayer);
    lv_curLifePercent = UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent);
    if ((libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 1.0) == true)) {
        if ((lv_curLifePercent <= libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)])) {
            return true;
        }

        lv_lastAttacker = libAIAI_gv_heroAIDamageTracking[lp_trigPlayer].lv_lastAttacker;
        lv_attackerOrder = UnitOrder(lv_lastAttacker, 0);
        if ((lv_attackerOrder != null) && (OrderGetTargetUnit(lv_attackerOrder) == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) {
            lv_attackerTargettingMe = true;
        }

        if ((UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0) != null) && (UnitTypeTestAttribute(UnitGetType(OrderGetTargetUnit(UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0))), c_unitAttributeHeroic) == true) && (UnitGetPropertyFixed(OrderGetTargetUnit(UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0)), c_unitPropLifePercent, c_unitPropCurrent) < 30.0)) {
            if ((lv_attackerTargettingMe == true) && (UnitGetPropertyFixed(OrderGetTargetUnit(UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0)), c_unitPropLifePercent, c_unitPropCurrent) > 10.0)) {
                if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval > (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyHeroEval + 500.0)) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalEnemyEval > (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyHeroEval + 3000.0)))) {
                    return true;
                }

            }

        }
        else {
            if ((UnitTypeTestAttribute(UnitGetType(lv_lastAttacker), c_unitAttributeHeroic) == true)) {
                if ((lv_curLifePercent < libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)]) && ((lv_attackerTargettingMe == true) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval > (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalAllyEval + 200.0)))) {
                    return true;
                }

            }
            else {
                if ((lv_attackerTargettingMe == true) && ((libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_gameState != libAIAI_ge_HeroAIGameState_Act3) || (lv_curLifePercent < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToSpawnHealth))) {
                    if ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order)) {
                        lv_enemyCore = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core;
                    }
                    else {
                        lv_enemyCore = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core;
                    }
                    if ((lv_lastAttacker == lv_enemyCore)) {
                        if ((lv_curLifePercent < libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)]) && (UnitGetPropertyFixed(lv_enemyCore, c_unitPropLifePercent, c_unitPropCurrent) > 75.0)) {
                            return true;
                        }

                    }
                    else {
                        if ((UnitTypeTestAttribute(UnitGetType(lv_lastAttacker), c_unitAttributeArmored) == true)) {
                            if ((lv_curLifePercent < libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)])) {
                                return true;
                            }

                        }
                        else {
                            if ((lv_curLifePercent < libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)])) {
                                return true;
                            }

                        }
                    }
                }

            }
        }
    }

    return false;
}

bool libAIAI_gf_HeroAIShouldRetreatJungle (int lp_trigPlayer) {
    int auto654578B1_ae;
    int auto654578B1_ai;
    unitgroup autoA1725949_g;
    int autoA1725949_u;

    // Variable Declarations
    int lv_behaviorIndex;
    unit lv_lastAttacker;
    unitgroup lv_unitsNearCore;
    region lv_homeRegion;
    unit lv_allyHero;
    fixed lv_heroHealthPercent;
    fixed lv_allyHealthPercent;

    // Variable Initialization
    lv_unitsNearCore = UnitGroupEmpty();

    // Implementation
    if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToSpawnHealth)) {
        return true;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome == true)) {
        return true;
    }

    libAIAI_gf_HeroAIEval(lp_trigPlayer);
    if ((UnitGroupCount(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyHeroes, c_unitCountAlive) < 2)) {
        auto654578B1_ae = UnitBehaviorCountAll(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
        auto654578B1_ai = 1;
        lv_behaviorIndex = 1;
        for ( ; ( (auto654578B1_ai >= 0 && lv_behaviorIndex <= auto654578B1_ae) || (auto654578B1_ai <= 0 && lv_behaviorIndex >= auto654578B1_ae) ) ; lv_behaviorIndex += auto654578B1_ai ) {
            if ((UnitBehaviorHasFlag(UnitBehaviorGet(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_behaviorIndex), c_unitBehaviorFlagUser8) == true)) {
                return true;
            }

        }
    }

    if ((libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 2.0) == true)) {
        lv_lastAttacker = libAIAI_gv_heroAIDamageTracking[lp_trigPlayer].lv_lastAttacker;
        if ((UnitTypeTestAttribute(UnitGetType(lv_lastAttacker), c_unitAttributeHeroic) == true)) {
            if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalEnemyEval > (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalAllyEval + 150.0)) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval > (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyHeroEval + 100.0)))) {
                return true;
            }

        }
        else {
            lv_heroHealthPercent = UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent);
            if ((lv_heroHealthPercent <= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_startOffensiveHealth)) {
                autoA1725949_g = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyHeroes;
                autoA1725949_u = 1;
                for ( ; autoA1725949_u <= UnitGroupCount(autoA1725949_g, c_unitCountAll) ; autoA1725949_u += (lv_allyHero == UnitGroupUnit(autoA1725949_g, autoA1725949_u)) ) {
                    lv_allyHero = UnitGroupUnit(autoA1725949_g, autoA1725949_u);
                    lv_allyHealthPercent = UnitGetPropertyFixed(lv_allyHero, c_unitPropLifePercent, c_unitPropCurrent);
                    if ((UnitGetOwner(lv_allyHero) != lp_trigPlayer) && (lv_allyHealthPercent >= (lv_heroHealthPercent + 20.0))) {
                        return true;
                    }

                }
            }

        }
    }

    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval >= (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalAllyEval + 200.0)) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval >= (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyHeroEval + (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_allyTowerEval + 400.0))))) {
        return true;
    }

    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalEnemyEval > (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_totalAllyEval + 800.0)))) {
        return true;
    }

    return false;
}

bool libAIAI_gf_HeroAIShouldRetreatToClearLane (int lp_trigPlayer) {
    // Implementation
    if ((libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_totalEnemyMaxLifeAtContentionPoint > libAIAI_gv_aIHeroRetreatToClearLaneThreatLevel) && (libAIAI_gf_HeroAIIsPlayerBehindLanePosition(lp_trigPlayer, libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_contentionPointLanePosition) == false)) {
        return true;
    }

    return false;
}

bool libAIAI_gf_HeroAIShouldRetreatToHeal (int lp_trigPlayer) {
    // Variable Declarations
    region lv_homeRegion;
    fixed lv_currentLife;
    fixed lv_expectedLife;

    // Variable Initialization
    lv_currentLife = UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent);
    lv_expectedLife = UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifeExpectedPercent, c_unitPropCurrent);

    // Implementation
    if ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order)) {
        lv_homeRegion = libCore_gv_mAPOrderBaseRegion;
    }
    else {
        lv_homeRegion = libCore_gv_mAPChaosBaseRegion;
    }
    if ((((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval <= 0.0) && (lv_currentLife < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToSpawnHealth) && (lv_expectedLife < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToSpawnHealth)) || ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroEval > 0.0) && ((lv_currentLife < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToSpawnHealth) || ((lv_expectedLife < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToSpawnHealth) && (lv_currentLife < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth))))) && ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_canPortHome == true) || (libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 0.5) == true) || ((UnitHasBehavior2(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, "HealingFountainCooldown") == false) && (libNtve_gf_UnitInRegion(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_homeRegion) == false) && (UnitGroupCount(libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition("TownMoonwell", "TownMoonwellL2", "TownMoonwellL3", lp_trigPlayer, c_unitAllianceAlly, null, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive) > 0)))) {
        return true;
    }

    return false;
}

bool libAIAI_gf_HeroAIMountLogic (int lp_trigPlayer) {
    // Variable Declarations
    order lv_order;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hasMount == false)) {
        return false;
    }

    if ((UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0) != null) && (OrderGetAbilityCommand(UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0)) == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_mountAbility)) {
        if ((libAIAI_gf_HeroAIShouldDismount(lp_trigPlayer) == true)) {
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        }

        return true;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_mountAbility != null) && (libAIAI_gf_HeroAIShouldMount(lp_trigPlayer) == true)) {
        lv_order = Order(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_mountAbility);
        if ((UnitOrderIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_order) == true)) {
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_order, c_orderQueueReplace);
            return true;
        }
        else {
            return false;
        }
    }

    return false;
}

bool libAIAI_gf_HeroAIShouldMount (int lp_trigPlayer) {
    // Variable Declarations
    region lv_homeRegion;
    int lv_campIndex;
    point lv_campLoc;
    int lv_laneIndex;
    fixed lv_frontEnemyMinionLanePosition;
    point lv_frontEnemyMinionPoint;
    string lv_cooldownLink;
    order lv_order;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order)) {
        lv_homeRegion = libCore_gv_mAPOrderBaseRegion;
    }
    else {
        lv_homeRegion = libCore_gv_mAPChaosBaseRegion;
    }
    if ((libAIAI_gf_HeroAITimeInCurrentState(lp_trigPlayer) < libAIAI_gv_aIHeroUseMountDelay[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)])) {
        return false;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane <= 0)) {
        if ((UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0) != null) && (OrderGetAbilityCommand(UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0)) != AbilityCommand("move", 0))) {
            return false;
        }

        lv_campIndex = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp;
        if ((lv_campIndex > 0)) {
            lv_campLoc = libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mapDataCampCaptainSpawnPoint;
            if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_campLoc) <= (libAIAI_gv_aIHeroLeashDistance * 1.5))) {
                return false;
            }

        }
        else {
            if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSReturnToLane) && (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToLanePosition) <= (libAIAI_gv_aIHeroLaneLeashDistance * 2.0))) {
                return false;
            }

        }
        if ((RegionContainsPoint(lv_homeRegion, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) == true) && (libAIAI_gf_HeroAIEnemiesInHomeRegion(libGame_gv_players[lp_trigPlayer].lv_faction) == true)) {
            return false;
        }

    }
    else {
        if ((UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0) != null) && (OrderGetAbilityCommand(UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0)) != AbilityCommand("move", 0)) && (OrderGetAbilityCommand(UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0)) != libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility)) {
            return false;
        }

        if ((RegionContainsPoint(lv_homeRegion, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) == false)) {
            return false;
        }

        if ((libAIAI_gf_HeroAIEnemiesInHomeRegion(libGame_gv_players[lp_trigPlayer].lv_faction) == true)) {
            return false;
        }

        lv_laneIndex = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane;
        lv_frontEnemyMinionLanePosition = libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[lv_laneIndex].lv_frontEnemyMinionPosition;
        lv_frontEnemyMinionPoint = AILaneWaypointConvertWaydistOffsetToPoint(lv_laneIndex, lv_frontEnemyMinionLanePosition, 0.0);
        if ((libCore_gf_TestLocationClosertoFactionSide(lv_frontEnemyMinionPoint, libGame_gv_players[lp_trigPlayer].lv_faction, 0.8) == true)) {
            return false;
        }

    }
    lv_cooldownLink = CatalogFieldValueGet(c_gameCatalogAbil, AbilityCommandGetAbility(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_mountAbility), "Cost[" + IntToString(0) + "].Cooldown.Link", c_playerAny);
    if ((UnitGetCooldown(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_cooldownLink) > 0.0)) {
        return false;
    }

    if ((libAIAI_gf_HeroAIHasGameStarted() == true) && ((libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 3.0) == true) || (libAIAI_gf_HeroAIEnemyEvalInCircle(lp_trigPlayer, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroMountingFarFromEnemies, true, true, true) > 0.0))) {
        return false;
    }

    return true;
}

bool libAIAI_gf_HeroAIShouldDismount (int lp_trigPlayer) {
    // Variable Declarations
    fixed lv_distance;
    int lv_campIndex;
    point lv_campLoc;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIEnemyEvalInCircle(lp_trigPlayer, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroMountingCloseToEnemies, true, true, true) > 0.0)) {
        return true;
    }

    lv_campIndex = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp;
    if ((lv_campIndex > 0)) {
        lv_campLoc = libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mapDataCampCaptainSpawnPoint;
        lv_distance = DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_campLoc);
        if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_campLoc) <= libAIAI_gv_aIHeroLeashDistance)) {
            return true;
        }

    }

    return false;
}

bool libAIAI_gf_HeroAIDismount (int lp_trigPlayer) {
    // Variable Declarations
    order lv_dismountOrder;

    // Variable Initialization

    // Implementation
    if ((UnitHasBehavior2(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_mountBehavior) == true) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_dismountAbility != null)) {
        lv_dismountOrder = Order(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_dismountAbility);
        if ((UnitOrderIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_dismountOrder) == true)) {
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_dismountOrder, c_orderQueueAddToFront);
            return true;
        }
        else {
            return false;
        }
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAIIsMountedorMounting (int lp_trigPlayer) {
    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hasMount == false)) {
        return false;
    }

    if ((UnitHasBehavior(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_mountBehavior) == true)) {
        return true;
    }

    if ((UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0) != null) && (OrderGetAbilityCommand(UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0)) == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_mountAbility)) {
        return true;
    }

    return false;
}

void libAIAI_gf_HeroAISwapLanesLogic (int lp_faction) {
    int autoC0670020_ae;
    int autoC0670020_ai;
    playergroup auto37EB79D9_g;
    int auto37EB79D9_p;
    playergroup auto72C99F33_g;
    int auto72C99F33_p;

    // Variable Declarations
    int lv_teamIndex;
    int lv_laneIndex;
    int lv_playerIndex;
    int lv_swapOutPlayer;
    int lv_swapInPlayer;

    // Variable Initialization

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    autoC0670020_ae = libGame_gv_laneCount;
    autoC0670020_ai = 1;
    lv_laneIndex = 1;
    for ( ; ( (autoC0670020_ai >= 0 && lv_laneIndex <= autoC0670020_ae) || (autoC0670020_ai <= 0 && lv_laneIndex >= autoC0670020_ae) ) ; lv_laneIndex += autoC0670020_ai ) {
        if (((libAIAI_gf_HeroAILaneHasAllMeleeHeroes(lp_faction, lv_laneIndex) == false) || (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_numAllyHeroes < 2) || (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_numEnemyHeroes < 2))) {
            continue;
        }

        lv_swapOutPlayer = 0;
        auto37EB79D9_g = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_allyHeroes; 
        auto37EB79D9_p = 1;
        for ( ; auto37EB79D9_p <= PlayerGroupCount(auto37EB79D9_g) ; auto37EB79D9_p += (lv_playerIndex == PlayerGroupPlayer(auto37EB79D9_g, auto37EB79D9_p)) ) {
            lv_playerIndex = PlayerGroupPlayer(auto37EB79D9_g, auto37EB79D9_p);
            if ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 2) == true) && (libAIAI_gf_HeroAIIsHigherPriority(lv_playerIndex, libAIAI_ge_HeroAIPriority_PushLaneChangingLanes) == true) && (!(((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_gameState == libAIAI_ge_HeroAIGameState_Act1) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_startingLane > 0))))) {
                lv_swapOutPlayer = lv_playerIndex;
                break;
            }

        }
        if ((lv_swapOutPlayer == 0)) {
            continue;
        }

        lv_swapInPlayer = 0;
        auto72C99F33_g = libAIAI_gv_heroAITeamPlayerData[lv_teamIndex].lv_aIPlayers; 
        auto72C99F33_p = 1;
        for ( ; auto72C99F33_p <= PlayerGroupCount(auto72C99F33_g) ; auto72C99F33_p += (lv_playerIndex == PlayerGroupPlayer(auto72C99F33_g, auto72C99F33_p)) ) {
            lv_playerIndex = PlayerGroupPlayer(auto72C99F33_g, auto72C99F33_p);
            if ((libAIAI_gf_HeroAIIsHeroMelee(lv_playerIndex) == false) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_desiredLane > 0) && (libAIAI_gf_HeroAIInLaneWithAllMeleeHeroes(lv_playerIndex) == false) && (libAIAI_gf_HeroAIIsHigherPriority(lv_playerIndex, libAIAI_ge_HeroAIPriority_PushLaneChangingLanes) == true) && (!(((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_gameState == libAIAI_ge_HeroAIGameState_Act1) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_startingLane > 0))))) {
                lv_swapInPlayer = lv_playerIndex;
                break;
            }

        }
        if ((lv_swapInPlayer == 0)) {
            continue;
        }

        libAIAI_gf_HeroAIChangeDesiredLane(lv_swapOutPlayer, libAIAI_gv_aIHeroes[lv_swapInPlayer].lv_desiredLane);
        libAIAI_gf_HeroAIChangeDesiredLane(lv_swapInPlayer, lv_laneIndex);
    }
}

bool libAIAI_gf_HeroAILaneChangingLogic (int lp_trigPlayer) {
    // Variable Declarations
    int lv_newLane;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAINeedstoSwitchLanes(lp_trigPlayer) == true) && (libAIAI_gv_aIHeroAIAllowedToChangeDesiredLane[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)] == true)) {
        lv_newLane = libAIAI_gf_HeroAIChooseLaneLogic(lp_trigPlayer);
        if ((lv_newLane != 0) && (lv_newLane != libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane)) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextChangeLanesConsiderTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroChangeLanesDelay);
            libAIAI_gf_HeroAIChangeDesiredLane(lp_trigPlayer, lv_newLane);
            return true;
        }

    }

    return false;
}

int libAIAI_gf_HeroAIChooseLaneLogic (int lp_player) {
    int autoA9D4C75F_val;
    int autoC13A1569_ae;
    int autoC13A1569_ai;

    // Variable Declarations
    int lv_teamIndex;
    int lv_followPlayer;
    int lv_laneIndex;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_heroAICustomChooseLaneLogicTrigger != null)) {
        libAIAI_gv_heroAITriggerCurrentPlayer = lp_player;
        libAIAI_gv_heroAITriggerReturnInteger = 0;
        TriggerExecute(libAIAI_gv_heroAICustomChooseLaneLogicTrigger, true, true);
        if ((libAIAI_gv_heroAITriggerReturnInteger != 0)) {
            return libAIAI_gv_heroAITriggerReturnInteger;
        }

    }

    lv_teamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_player);
    lv_followPlayer = libAIAI_gf_HeroAIGetPlayerToFollow(lp_player);
    if ((lv_followPlayer != 0) && (libGame_gv_players[lv_followPlayer].lv_isDead == false) && (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_heroTrackingData[lv_followPlayer].lv_lastSeenLane > 0)) {
        return libAIAI_gv_heroAITeamData[lv_teamIndex].lv_heroTrackingData[lv_followPlayer].lv_lastSeenLane;
    }

    lv_laneIndex = libAIAI_gf_HeroAINeedstoDefendPingedBaseLane(lp_player);
    if ((lv_laneIndex > 0)) {
        return lv_laneIndex;
    }

    lv_laneIndex = libAIAI_gf_HeroAINeedstoDefendSupportPingedLanerMercs(lp_player);
    if ((lv_laneIndex > 0)) {
        return lv_laneIndex;
    }

    if ((libAIAI_gf_HeroAINeedstoDefendBaseInWeakestLane(lp_player) == true)) {
        return libAIAI_gv_heroAITeamData[lv_teamIndex].lv_weakestLane;
    }

    autoA9D4C75F_val = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_gameState;
    if (autoA9D4C75F_val == libAIAI_ge_HeroAIGameState_Act1) {
        if ((libAIAI_gv_aIHeroes[lp_player].lv_startingLane > 0)) {
            lv_laneIndex = libAIAI_gv_aIHeroes[lp_player].lv_startingLane;
        }
        else {
            if ((libAIAI_gf_HeroAIHaveEnemiesBeenSeenInLane(libGame_gv_players[lp_player].lv_faction) == false)) {
                lv_laneIndex = libAIAI_gf_HeroAIChooseStartingLaneLogic(lp_player);
            }
            else {
                lv_laneIndex = libAIAI_gf_HeroAIGetLaneThatPlayerShouldHelp(lp_player);
            }
        }
        if ((lv_laneIndex > 0)) {
            return lv_laneIndex;
        }
        else {
            return libAIAI_gv_heroAITeamData[lv_teamIndex].lv_weakestLane;
        }
    }
    else if (autoA9D4C75F_val == libAIAI_ge_HeroAIGameState_Act2) {
        lv_laneIndex = libAIAI_gf_HeroAIGetLaneThatPlayerShouldHelp(lp_player);
        if ((lv_laneIndex > 0)) {
            return lv_laneIndex;
        }
        else {
            return libAIAI_gv_heroAITeamData[lv_teamIndex].lv_weakestLane;
        }
    }
    else {
        if ((libAIAI_gf_HeroAITeamHasHumanPlayers(libGame_gv_players[lp_player].lv_faction) == false)) {
            autoC13A1569_ae = libGame_gv_laneCount;
            autoC13A1569_ai = 1;
            lv_laneIndex = 1;
            for ( ; ( (autoC13A1569_ai >= 0 && lv_laneIndex <= autoC13A1569_ae) || (autoC13A1569_ai <= 0 && lv_laneIndex >= autoC13A1569_ae) ) ; lv_laneIndex += autoC13A1569_ai ) {
                if ((libAIAI_gf_HeroAIMercsAttackingLane(libGame_gv_players[lp_player].lv_faction, lv_laneIndex) == true)) {
                    return lv_laneIndex;
                }

            }
        }

        return libAIAI_gf_HeroAIGetLaneWithMostAllies(lp_player);
    }
}

bool libAIAI_gf_HeroAINeedstoDefendBaseInWeakestLane (int lp_player) {
    // Variable Declarations
    int lv_teamIndex;
    int lv_weakestLane;
    int lv_desiredLane;
    point lv_weakestLaneContentionPoint;
    point lv_currentLaneContentionPoint;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_players[lp_player].lv_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    lv_weakestLane = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_weakestLane;
    lv_weakestLaneContentionPoint = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_weakestLane].lv_contentionPoint;
    if ((lv_weakestLane != libAIAI_gv_aIHeroes[lp_player].lv_desiredLane) && (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_weakestLane].lv_numAllyTowns <= 1) && (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_weakestLane].lv_numEnemyHeroes >= 2) && (libCore_gf_TestLocationClosertoFactionSide(lv_weakestLaneContentionPoint, libGame_gv_players[lp_player].lv_faction, 0.65) == true)) {
        if ((libAIAI_gv_aIHeroes[lp_player].lv_desiredLane <= 0)) {
            return true;
        }

        lv_desiredLane = libAIAI_gv_aIHeroes[lp_player].lv_desiredLane;
        if ((libAIAI_gf_HeroAICalcLaneEval(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_desiredLane].lv_numAllyTowns, (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_desiredLane].lv_numAllyHeroes - 1), libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_desiredLane].lv_numEnemyHeroes, libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_desiredLane].lv_numEnemySiegeGiants, libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_desiredLane].lv_numEnemyOgres, libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_desiredLane].lv_numEnemyOgreKings, libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_desiredLane].lv_numEnemyDragonKnights, libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_desiredLane].lv_numEnemyUnderworldBossSkulls, libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_difficulty)]) <= libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_weakestLane].lv_eval)) {
            return false;
        }

        lv_currentLaneContentionPoint = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[libAIAI_gv_aIHeroes[lp_player].lv_desiredLane].lv_contentionPoint;
        if ((!(((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_weakestLane].lv_numAllyTowns >= libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[libAIAI_gv_aIHeroes[lp_player].lv_desiredLane].lv_numEnemyTowns) && (libCore_gf_TestLocationClosertoFactionSide(lv_currentLaneContentionPoint, libGame_gv_players[lp_player].lv_faction, 1.0) == false)))) && ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_weakestLane].lv_numAllyHeroes < libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_weakestLane].lv_numEnemyHeroes) || ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[libAIAI_gv_aIHeroes[lp_player].lv_desiredLane].lv_numAllyTowns > 0) && (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_weakestLane].lv_numAllyTowns == 0) && (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_weakestLane].lv_numAllyHeroes == libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_weakestLane].lv_numEnemyHeroes)))) {
            return true;
        }

    }

    return false;
}

int libAIAI_gf_HeroAINeedstoDefendPingedBaseLane (int lp_player) {
    int auto25AF3885_ae;

    // Variable Declarations
    int lv_teamIndex;
    int lv_pingedIndex;
    unit lv_pingedUnit;
    int lv_townIndex;
    int lv_pingedLane;
    unitgroup lv_scanGroup;
    int lv_numberNearby;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_players[lp_player].lv_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    auto25AF3885_ae = libAIAI_gv_heroAIMaxTownPingCount;
    lv_pingedIndex = 1;
    for ( ; lv_pingedIndex <= auto25AF3885_ae ; lv_pingedIndex += 1 ) {
        if ((libAIAI_gv_heroAITeamDefendTownPingData[lv_teamIndex].lv_townPings[lv_pingedIndex].lv_pingExpireTime > TimerGetElapsed(libGame_gv_gameTimer))) {
            lv_pingedUnit = libAIAI_gv_heroAITeamDefendTownPingData[lv_teamIndex].lv_townPings[lv_pingedIndex].lv_pingedStructure;
            lv_townIndex = libGame_gf_TownGetTownForUnit(lv_pingedUnit);
            if ((lv_townIndex <= 0) && (libGame_gv_townTownData[lv_townIndex].lv_lane <= 0)) {
                continue;
            }

            lv_pingedLane = libGame_gv_townTownData[lv_townIndex].lv_lane;
            if ((lv_pingedLane == libAIAI_gv_aIHeroes[lp_player].lv_desiredLane)) {
                return lv_pingedLane;
            }

            if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_pingedLane].lv_numAllyHeroes <= libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_pingedLane].lv_numEnemyHeroes)) {
                lv_scanGroup = libNtve_gf_UnitsInRegionWithAllianceToPlayerMatchingCondition(null, "", "", UnitGetOwner(lv_pingedUnit), c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_pingedUnit), libAIAI_gv_aIHeroDefendTownStructureNearbyRange), libAIAI_gv_uF_TowerAI_Scan_Group, 0);
                lv_numberNearby = UnitGroupCount(UnitGroupFilter(null, c_playerAny, lv_scanGroup, libCore_gv_filtersHeroic, 0), c_unitCountAlive);
                if ((lv_numberNearby >= 1)) {
                    return lv_pingedLane;
                }
                else {
                    lv_numberNearby = UnitGroupCount(UnitGroupFilter(null, c_playerAny, lv_scanGroup, libCore_gv_filtersMinionsAllLaners, 0), c_unitCountAlive);
                    lv_numberNearby += UnitGroupCount(UnitGroupFilter(null, c_playerAny, lv_scanGroup, UnitFilter((1 << c_targetFilterBiological), (1 << (c_targetFilterSummoned - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0), c_unitCountAlive);
                    if ((lv_numberNearby >= 10)) {
                        return lv_pingedLane;
                    }
                    else {
                        if ((libAIAI_gf_HeroAIMercsAttackingLane(libGame_gv_players[lp_player].lv_faction, lv_pingedLane) == true)) {
                            return lv_pingedLane;
                        }

                    }
                }
            }

        }

    }
    return 0;
}

int libAIAI_gf_HeroAINeedstoDefendSupportPingedLanerMercs (int lp_player) {
    int autoEEBB1F55_ae;

    // Variable Declarations
    int lv_teamIndex;
    int lv_pingedIndex;
    unit lv_pingedUnit;
    int lv_townIndex;
    int lv_pingedLane;
    unitgroup lv_scanGroup;
    int lv_numberNearby;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_players[lp_player].lv_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    autoEEBB1F55_ae = libAIAI_gv_heroAIMaxLanerMercPingCount;
    lv_pingedIndex = 1;
    for ( ; lv_pingedIndex <= autoEEBB1F55_ae ; lv_pingedIndex += 1 ) {
        if ((libAIAI_gf_HeroAIIsLanerMercPingStillActive(lv_teamIndex, lv_pingedIndex) == true)) {
            lv_pingedLane = libAIAI_gf_HeroAIGetCurrentLaneForMercPing(lv_teamIndex, lv_pingedIndex, false);
            if ((lv_pingedLane <= 0)) {
                continue;
            }

            if ((lv_pingedLane == libAIAI_gv_aIHeroes[lp_player].lv_desiredLane)) {
                return lv_pingedLane;
            }

            if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_pingedLane].lv_numAllyHeroes < libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_pingedLane].lv_numEnemyHeroes)) {
                return lv_pingedLane;
            }

            if ((libAIAI_gv_heroAITeamLanerMercPingData[lv_teamIndex].lv_lanerMercPings[lv_pingedIndex].lv_isBossMerc == true)) {
                return lv_pingedLane;
            }
            else {
                if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_pingedLane].lv_numAllyHeroes < 3)) {
                    return lv_pingedLane;
                }

            }
        }

    }
    return 0;
}

bool libAIAI_gf_HeroAINeedstoSwitchLanes (int lp_player) {
    int auto266DF06C_val;
    int auto86B2095F_ae;
    int auto86B2095F_ai;

    // Variable Declarations
    int lv_teamIndex;
    int lv_followPlayer;
    point lv_contentionPoint;
    int lv_laneIndex;
    fixed lv_lastTimeHumanEnteredLane;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_heroAICustomChooseLaneLogicTrigger != null)) {
        libAIAI_gv_heroAITriggerCurrentPlayer = lp_player;
        libAIAI_gv_heroAITriggerReturnInteger = 0;
        TriggerExecute(libAIAI_gv_heroAICustomChooseLaneLogicTrigger, true, true);
        if ((libAIAI_gv_heroAITriggerReturnInteger != 0)) {
            return true;
        }

    }

    lv_teamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_player);
    lv_followPlayer = libAIAI_gf_HeroAIGetPlayerToFollow(lp_player);
    if ((lv_followPlayer != 0) && (libGame_gv_players[lv_followPlayer].lv_isDead == false) && (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_heroTrackingData[lv_followPlayer].lv_lastSeenLane > 0) && (libAIAI_gv_aIHeroes[lp_player].lv_desiredLane != libAIAI_gv_heroAITeamData[lv_teamIndex].lv_heroTrackingData[lv_followPlayer].lv_lastSeenLane)) {
        return true;
    }

    if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidLane != 0) && (libAIAI_gv_aIHeroes[lp_player].lv_desiredLane == libAIAI_gv_heroAITeamData[lv_teamIndex].lv_heroTrackingData[libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidPlayer].lv_lastSeenLane)) {
        return true;
    }

    lv_laneIndex = libAIAI_gf_HeroAINeedstoDefendPingedBaseLane(lp_player);
    if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[libAIAI_gv_aIHeroes[lp_player].lv_desiredLane].lv_numAllyHumanHeroes == 0) && (lv_laneIndex > 0) && (libAIAI_gv_aIHeroes[lp_player].lv_desiredLane != lv_laneIndex)) {
        return true;
    }

    lv_laneIndex = libAIAI_gf_HeroAINeedstoDefendSupportPingedLanerMercs(lp_player);
    if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[libAIAI_gv_aIHeroes[lp_player].lv_desiredLane].lv_numAllyHumanHeroes == 0) && (lv_laneIndex > 0) && (libAIAI_gv_aIHeroes[lp_player].lv_desiredLane != lv_laneIndex)) {
        return true;
    }

    if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[libAIAI_gv_aIHeroes[lp_player].lv_desiredLane].lv_numAllyHumanHeroes == 0) && (libAIAI_gf_HeroAINeedstoDefendBaseInWeakestLane(lp_player) == true)) {
        return true;
    }

    if ((libGame_gv_laneData[libAIAI_gv_aIHeroes[lp_player].lv_desiredLane].lv_minionSpawningEnabled == false) && (libAIAI_gf_HeroAIMercsAttackingLane(libGame_gv_players[lp_player].lv_faction, libAIAI_gv_aIHeroes[lp_player].lv_desiredLane) == false)) {
        return true;
    }

    lv_lastTimeHumanEnteredLane = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[libAIAI_gv_aIHeroes[lp_player].lv_desiredLane].lv_lastTimeHumanAllyEnteredLane;
    if ((((lv_lastTimeHumanEnteredLane > 0.0) && ((lv_lastTimeHumanEnteredLane + libAIAI_gv_aIHeroStayInLaneAfterHumanArrivesDuration) > TimerGetElapsed(libGame_gv_gameTimer))) || ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[libAIAI_gv_aIHeroes[lp_player].lv_desiredLane].lv_numAllyHeroes == 2) && (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[libAIAI_gv_aIHeroes[lp_player].lv_desiredLane].lv_numAllyHumanHeroes == 1)))) {
        return false;
    }

    if (((libAIAI_gv_aIHeroes[lp_player].lv_nextChangeLanesConsiderTime > TimerGetElapsed(libGame_gv_gameTimer)) || (libAIAI_gf_HeroAIIsHigherPriority(lp_player, libAIAI_ge_HeroAIPriority_PushLaneChangingLanes) == false))) {
        return false;
    }

    auto266DF06C_val = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_gameState;
    if (auto266DF06C_val == libAIAI_ge_HeroAIGameState_Act1) {
        if ((libAIAI_gv_aIHeroes[lp_player].lv_startingLane > 0) && (libAIAI_gv_aIHeroes[lp_player].lv_desiredLane != libAIAI_gv_aIHeroes[lp_player].lv_startingLane)) {
            return true;
        }

        if ((TimerGetElapsed(libGame_gv_gameTimer) < libAIAI_gv_aIHeroInitialLaneChoosingTime)) {
            return false;
        }

        return (libAIAI_gf_HeroAIGetLaneThatPlayerShouldHelp(lp_player) != 0);
    }
    else if (auto266DF06C_val == libAIAI_ge_HeroAIGameState_Act2) {
        return (libAIAI_gf_HeroAIGetLaneThatPlayerShouldHelp(lp_player) != 0);
    }
    else {
        lv_contentionPoint = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[libAIAI_gv_aIHeroes[lp_player].lv_desiredLane].lv_contentionPoint;
        if ((libCore_gf_TestLocationClosertoFactionSide(lv_contentionPoint, libGame_gv_players[lp_player].lv_faction, 0.8) == true)) {
            return false;
        }

        if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[libAIAI_gv_aIHeroes[lp_player].lv_desiredLane].lv_numAllyHumanHeroes > 0)) {
            return false;
        }

        if ((libAIAI_gf_HeroAITeamHasHumanPlayers(libGame_gv_players[lp_player].lv_faction) == false)) {
            auto86B2095F_ae = libGame_gv_laneCount;
            auto86B2095F_ai = 1;
            lv_laneIndex = 1;
            for ( ; ( (auto86B2095F_ai >= 0 && lv_laneIndex <= auto86B2095F_ae) || (auto86B2095F_ai <= 0 && lv_laneIndex >= auto86B2095F_ae) ) ; lv_laneIndex += auto86B2095F_ai ) {
                if ((libAIAI_gv_aIHeroes[lp_player].lv_desiredLane != lv_laneIndex) && (libAIAI_gf_HeroAIMercsAttackingLane(libGame_gv_players[lp_player].lv_faction, lv_laneIndex) == true)) {
                    return true;
                }

            }
        }

        return (libAIAI_gv_aIHeroes[lp_player].lv_desiredLane != libAIAI_gf_HeroAIGetLaneWithMostAllies(lp_player));
    }
}

bool libAIAI_gf_HeroAIDoesLaneWantHelpFromPlayer (int lp_trigPlayer, int lp_laneIndex) {
    // Variable Declarations
    int lv_teamIndex;
    fixed lv_ourLaneEval;
    fixed lv_theirLaneEval;
    fixed lv_evalDifference;
    int lv_playerIndex;
    int lv_ourHeroIndex;
    int lv_heroIndex;

    // Variable Initialization

    // Implementation
    lv_teamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer);
    lv_ourLaneEval = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane].lv_eval;
    lv_theirLaneEval = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lp_laneIndex].lv_eval;
    lv_evalDifference = (lv_theirLaneEval - lv_ourLaneEval);
    if ((lv_evalDifference >= libAIAI_gv_aIHeroLargeEvalDifference)) {
        return false;
    }

    if ((libGame_gv_laneData[lp_laneIndex].lv_minionSpawningEnabled == false)) {
        if ((libAIAI_gf_HeroAIMercsAttackingLane(libGame_gv_players[lp_trigPlayer].lv_faction, lp_laneIndex) == true) && (lv_theirLaneEval <= 0.0)) {
            return true;
        }

    }
    else {
        if ((lv_evalDifference <= (-1.0 * libAIAI_gv_aIHeroLargeEvalDifference)) && (lv_theirLaneEval <= 0.0)) {
            return true;
        }

        if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lp_laneIndex].lv_numAllyHeroes == 1)) {
            lv_playerIndex = PlayerGroupPlayer(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lp_laneIndex].lv_allyHeroes, 1);
            lv_heroIndex = libGame_gv_players[lv_playerIndex].lv_heroIndex;
            if (((PlayerGroupHasPlayer(libGame_gv_players[lv_heroIndex].lv_heroData.lv_heroRoles, (c_heroRoleSupport)) == true) || ((libGame_gv_players[lv_ourHeroIndex].lv_heroData.lv_isMelee == false) && (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lp_laneIndex].lv_numEnemyHeroes > 1) && (libGame_gv_players[lv_heroIndex].lv_heroData.lv_isMelee == true)))) {
                return true;
            }
            else {

            }
        }

        lv_ourHeroIndex = libGame_gv_players[lp_trigPlayer].lv_heroIndex;
        if ((PlayerGroupHasPlayer(libGame_gv_players[lv_heroIndex].lv_heroData.lv_heroRoles, (c_heroRoleSupport)) == false) && (libGame_gv_players[lv_ourHeroIndex].lv_heroData.lv_isMelee == false) && (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lp_laneIndex].lv_numAllyHeroes == 0) && (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lp_laneIndex].lv_numEnemyHeroes > 0)) {
            return true;
        }

        if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lp_laneIndex].lv_numAllyHeroes == 4) && (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lp_laneIndex].lv_numEnemyHeroes >= 4)) {
            return true;
        }

    }
    return false;
}

int libAIAI_gf_HeroAIGetLaneThatPlayerShouldHelp (int lp_trigPlayer) {
    int autoA43D71EB_ae;
    int autoA43D71EB_ai;

    // Variable Declarations
    int lv_startingLane;
    int lv_laneIndex;
    bool lv_wouldCauseCycle;

    // Variable Initialization

    // Implementation
    lv_startingLane = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane;
    autoA43D71EB_ae = libGame_gv_laneCount;
    autoA43D71EB_ai = 1;
    lv_laneIndex = 1;
    for ( ; ( (autoA43D71EB_ai >= 0 && lv_laneIndex <= autoA43D71EB_ae) || (autoA43D71EB_ai <= 0 && lv_laneIndex >= autoA43D71EB_ae) ) ; lv_laneIndex += autoA43D71EB_ai ) {
        if ((lv_laneIndex != lv_startingLane) && (libAIAI_gf_HeroAIDoesLaneWantHelpFromPlayer(lp_trigPlayer, lv_laneIndex) == true)) {
            libAIAI_gf_HeroAIChangeDesiredLane(lp_trigPlayer, lv_laneIndex);
            lv_wouldCauseCycle = libAIAI_gf_HeroAIDoesLaneWantHelpFromPlayer(lp_trigPlayer, lv_startingLane);
            libAIAI_gf_HeroAIChangeDesiredLane(lp_trigPlayer, lv_startingLane);
            if ((lv_wouldCauseCycle == false)) {
                return lv_laneIndex;
            }

        }

    }
    return 0;
}

int libAIAI_gf_HeroAIChooseStartingLaneLogic (int lp_trigPlayer) {
    // Variable Declarations
    int lv_heroIndex;
    int lv_laneIndex;

    // Variable Initialization

    // Implementation
    lv_heroIndex = libGame_gv_players[lp_trigPlayer].lv_heroIndex;
    if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_isPaired == true)) {
        return libAIAI_gf_HeroAIGetLaneWithLeastAllyHeroes(libGame_gv_players[lp_trigPlayer].lv_faction);
    }

    if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_isMelee == true)) {
        if ((PlayerGroupHasPlayer(libGame_gv_players[lv_heroIndex].lv_heroData.lv_heroRoles, (c_heroRoleSupport)) == true)) {
            lv_laneIndex = libAIAI_gf_HeroAIGetLaneWithSoloRanged(libGame_gv_players[lp_trigPlayer].lv_faction);
            if ((lv_laneIndex > 0)) {
                return lv_laneIndex;
            }

            lv_laneIndex = libAIAI_gf_HeroAIGetLaneWithNoAllyHeroes(libGame_gv_players[lp_trigPlayer].lv_faction);
            if ((lv_laneIndex > 0)) {
                return lv_laneIndex;
            }

            lv_laneIndex = libAIAI_gf_HeroAIGetLaneWithSoloMelee(libGame_gv_players[lp_trigPlayer].lv_faction);
            if ((lv_laneIndex > 0)) {
                return lv_laneIndex;
            }

        }
        else {
            lv_laneIndex = libAIAI_gf_HeroAIGetLaneWithSoloRangedSupport(libGame_gv_players[lp_trigPlayer].lv_faction);
            if ((lv_laneIndex > 0)) {
                return lv_laneIndex;
            }

            lv_laneIndex = libAIAI_gf_HeroAIGetLaneWithNoAllyHeroes(libGame_gv_players[lp_trigPlayer].lv_faction);
            if ((lv_laneIndex > 0)) {
                return lv_laneIndex;
            }

            lv_laneIndex = libAIAI_gf_HeroAIGetLaneWithSoloRanged(libGame_gv_players[lp_trigPlayer].lv_faction);
            if ((lv_laneIndex > 0)) {
                return lv_laneIndex;
            }

        }
    }
    else {
        if ((PlayerGroupHasPlayer(libGame_gv_players[lv_heroIndex].lv_heroData.lv_heroRoles, (c_heroRoleSupport)) == true)) {
            lv_laneIndex = libAIAI_gf_HeroAIGetLaneWithSoloMelee(libGame_gv_players[lp_trigPlayer].lv_faction);
            if ((lv_laneIndex > 0)) {
                return lv_laneIndex;
            }

            lv_laneIndex = libAIAI_gf_HeroAIGetLaneWithNoAllyHeroes(libGame_gv_players[lp_trigPlayer].lv_faction);
            if ((lv_laneIndex > 0)) {
                return lv_laneIndex;
            }

            lv_laneIndex = libAIAI_gf_HeroAIGetLaneWithSoloRanged(libGame_gv_players[lp_trigPlayer].lv_faction);
            if ((lv_laneIndex > 0)) {
                return lv_laneIndex;
            }

        }
        else {
            lv_laneIndex = libAIAI_gf_HeroAIGetLaneWithSoloMeleeSupport(libGame_gv_players[lp_trigPlayer].lv_faction);
            if ((lv_laneIndex > 0)) {
                return lv_laneIndex;
            }

            lv_laneIndex = libAIAI_gf_HeroAIGetLaneWithNoAllyHeroes(libGame_gv_players[lp_trigPlayer].lv_faction);
            if ((lv_laneIndex > 0)) {
                return lv_laneIndex;
            }

            lv_laneIndex = libAIAI_gf_HeroAIGetLaneWithSoloMelee(libGame_gv_players[lp_trigPlayer].lv_faction);
            if ((lv_laneIndex > 0)) {
                return lv_laneIndex;
            }

        }
    }
    return libAIAI_gf_HeroAIGetLaneWithLeastAllyHeroes(libGame_gv_players[lp_trigPlayer].lv_faction);
}

int libAIAI_gf_HeroAIGetLaneWithNoAllyHeroes (int lp_team) {
    int autoE25F0472_ae;

    // Variable Declarations
    int lv_teamIndex;
    int lv_laneIndex;

    // Variable Initialization

    // Implementation
    if ((lp_team == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    autoE25F0472_ae = libGame_gv_laneCount;
    lv_laneIndex = 1;
    for ( ; lv_laneIndex <= autoE25F0472_ae ; lv_laneIndex += 1 ) {
        if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_numAllyHeroes == 0)) {
            return lv_laneIndex;
        }

    }
    return 0;
}

int libAIAI_gf_HeroAIGetLaneWithLeastAllyHeroes (int lp_team) {
    int auto8FC7E94D_ae;

    // Variable Declarations
    int lv_teamIndex;
    int lv_laneIndex;
    int lv_bestLaneIndex;
    int lv_leastHeroCount;

    // Variable Initialization
    lv_leastHeroCount = 99999999;

    // Implementation
    if ((lp_team == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    auto8FC7E94D_ae = libGame_gv_laneCount;
    lv_laneIndex = 1;
    for ( ; lv_laneIndex <= auto8FC7E94D_ae ; lv_laneIndex += 1 ) {
        if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_numAllyHeroes < lv_leastHeroCount)) {
            lv_bestLaneIndex = lv_laneIndex;
            lv_leastHeroCount = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_numAllyHeroes;
        }

    }
    return lv_bestLaneIndex;
}

int libAIAI_gf_HeroAIGetLaneWithSoloMelee (int lp_team) {
    int autoD7200A44_ae;

    // Variable Declarations
    int lv_teamIndex;
    int lv_laneIndex;
    int lv_playerIndex;
    int lv_heroIndex;

    // Variable Initialization

    // Implementation
    if ((lp_team == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    autoD7200A44_ae = libGame_gv_laneCount;
    lv_laneIndex = 1;
    for ( ; lv_laneIndex <= autoD7200A44_ae ; lv_laneIndex += 1 ) {
        if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_numAllyHeroes == 1)) {
            lv_playerIndex = PlayerGroupPlayer(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_allyHeroes, 1);
            lv_heroIndex = libGame_gv_players[lv_playerIndex].lv_heroIndex;
            if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_isPaired == false) && (PlayerGroupHasPlayer(libGame_gv_players[lv_heroIndex].lv_heroData.lv_heroRoles, (c_heroRoleSupport)) == false) && (libGame_gv_players[lv_heroIndex].lv_heroData.lv_isMelee == true)) {
                return lv_laneIndex;
            }

        }

    }
    return 0;
}

int libAIAI_gf_HeroAIGetLaneWithSoloRanged (int lp_team) {
    int auto2F055CAD_ae;

    // Variable Declarations
    int lv_teamIndex;
    int lv_laneIndex;
    int lv_playerIndex;
    int lv_heroIndex;

    // Variable Initialization

    // Implementation
    if ((lp_team == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    auto2F055CAD_ae = libGame_gv_laneCount;
    lv_laneIndex = 1;
    for ( ; lv_laneIndex <= auto2F055CAD_ae ; lv_laneIndex += 1 ) {
        if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_numAllyHeroes == 1)) {
            lv_playerIndex = PlayerGroupPlayer(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_allyHeroes, 1);
            lv_heroIndex = libGame_gv_players[lv_playerIndex].lv_heroIndex;
            if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_isPaired == false) && (PlayerGroupHasPlayer(libGame_gv_players[lv_heroIndex].lv_heroData.lv_heroRoles, (c_heroRoleSupport)) == false) && (libGame_gv_players[lv_heroIndex].lv_heroData.lv_isMelee == false)) {
                return lv_laneIndex;
            }

        }

    }
    return 0;
}

int libAIAI_gf_HeroAIGetLaneWithSoloMeleeSupport (int lp_team) {
    int autoE6E12CA4_ae;

    // Variable Declarations
    int lv_teamIndex;
    int lv_laneIndex;
    int lv_playerIndex;
    int lv_heroIndex;

    // Variable Initialization

    // Implementation
    if ((lp_team == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    autoE6E12CA4_ae = libGame_gv_laneCount;
    lv_laneIndex = 1;
    for ( ; lv_laneIndex <= autoE6E12CA4_ae ; lv_laneIndex += 1 ) {
        if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_numAllyHeroes == 1)) {
            lv_playerIndex = PlayerGroupPlayer(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_allyHeroes, 1);
            lv_heroIndex = libGame_gv_players[lv_playerIndex].lv_heroIndex;
            if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_isPaired == false) && (libGame_gv_players[lv_heroIndex].lv_heroData.lv_isMelee == true) && (PlayerGroupHasPlayer(libGame_gv_players[lv_heroIndex].lv_heroData.lv_heroRoles, (c_heroRoleSupport)) == true)) {
                return lv_laneIndex;
            }

        }

    }
    return 0;
}

int libAIAI_gf_HeroAIGetLaneWithSoloRangedSupport (int lp_team) {
    int auto4FD16FDF_ae;

    // Variable Declarations
    int lv_teamIndex;
    int lv_laneIndex;
    int lv_playerIndex;
    int lv_heroIndex;

    // Variable Initialization

    // Implementation
    if ((lp_team == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    auto4FD16FDF_ae = libGame_gv_laneCount;
    lv_laneIndex = 1;
    for ( ; lv_laneIndex <= auto4FD16FDF_ae ; lv_laneIndex += 1 ) {
        if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_numAllyHeroes == 1)) {
            lv_playerIndex = PlayerGroupPlayer(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_allyHeroes, 1);
            lv_heroIndex = libGame_gv_players[lv_playerIndex].lv_heroIndex;
            if ((libGame_gv_players[lv_heroIndex].lv_heroData.lv_isPaired == false) && (libGame_gv_players[lv_heroIndex].lv_heroData.lv_isMelee == false) && (PlayerGroupHasPlayer(libGame_gv_players[lv_heroIndex].lv_heroData.lv_heroRoles, (c_heroRoleSupport)) == true)) {
                return lv_laneIndex;
            }

        }

    }
    return 0;
}

int libAIAI_gf_HeroAIGetLaneWithMostAllies (int lp_player) {
    int auto85A92562_ae;
    int auto85A92562_ai;
    int autoC34721D3_ae;
    int autoC34721D3_ai;

    // Variable Declarations
    int lv_teamIndex;
    int lv_laneIndex;
    int lv_bestLane;
    int lv_bestNumberofAllies;
    int lv_laneToAvoid;

    // Variable Initialization

    // Implementation
    lv_teamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_player);
    if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidPlayer != 0)) {
        lv_laneToAvoid = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidLane;
    }

    auto85A92562_ae = libGame_gv_laneCount;
    auto85A92562_ai = 1;
    lv_laneIndex = 1;
    for ( ; ( (auto85A92562_ai >= 0 && lv_laneIndex <= auto85A92562_ae) || (auto85A92562_ai <= 0 && lv_laneIndex >= auto85A92562_ae) ) ; lv_laneIndex += auto85A92562_ai ) {
        if ((lv_laneIndex != lv_laneToAvoid) && (libGame_gv_laneData[lv_laneIndex].lv_minionSpawningEnabled == true) && (libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_player)].lv_laneData[lv_laneIndex].lv_numAllyHumanHeroes > lv_bestNumberofAllies)) {
            lv_bestLane = lv_laneIndex;
            lv_bestNumberofAllies = libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_player)].lv_laneData[lv_laneIndex].lv_numAllyHumanHeroes;
        }

    }
    if ((lv_bestLane != 0)) {
        return lv_bestLane;
    }

    autoC34721D3_ae = libGame_gv_laneCount;
    autoC34721D3_ai = 1;
    lv_laneIndex = 1;
    for ( ; ( (autoC34721D3_ai >= 0 && lv_laneIndex <= autoC34721D3_ae) || (autoC34721D3_ai <= 0 && lv_laneIndex >= autoC34721D3_ae) ) ; lv_laneIndex += autoC34721D3_ai ) {
        if ((lv_laneIndex != lv_laneToAvoid) && (libGame_gv_laneData[lv_laneIndex].lv_minionSpawningEnabled == true) && (libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_player)].lv_laneData[lv_laneIndex].lv_numAllyHeroes > lv_bestNumberofAllies)) {
            lv_bestLane = lv_laneIndex;
            lv_bestNumberofAllies = libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_player)].lv_laneData[lv_laneIndex].lv_numAllyHeroes;
        }

    }
    if ((lv_bestLane != 0)) {
        return lv_bestLane;
    }
    else {
        return libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_player)].lv_weakestLane;
    }
}

int libAIAI_gf_HeroAIGetBestLaneToPush (int lp_player) {
    int auto71CA08E9_ae;
    int auto71CA08E9_ai;
    int auto5F59AEE4_ae;
    int auto5F59AEE4_ai;

    // Variable Declarations
    int lv_teamIndex;
    int lv_laneIndex;
    int lv_bestLane;
    int lv_bestNumberofAllies;
    fixed lv_bestScore;
    fixed lv_score;

    // Variable Initialization

    // Implementation
    lv_teamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_player);
    auto71CA08E9_ae = libGame_gv_laneCount;
    auto71CA08E9_ai = 1;
    lv_laneIndex = 1;
    for ( ; ( (auto71CA08E9_ai >= 0 && lv_laneIndex <= auto71CA08E9_ae) || (auto71CA08E9_ai <= 0 && lv_laneIndex >= auto71CA08E9_ae) ) ; lv_laneIndex += auto71CA08E9_ai ) {
        if ((libGame_gv_laneData[lv_laneIndex].lv_minionSpawningEnabled == true) && (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_numAllyHumanHeroes > lv_bestNumberofAllies)) {
            lv_bestLane = lv_laneIndex;
            lv_bestNumberofAllies = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_numAllyHumanHeroes;
        }

    }
    if ((lv_bestLane != 0)) {
        return lv_bestLane;
    }

    auto5F59AEE4_ae = libGame_gv_laneCount;
    auto5F59AEE4_ai = 1;
    lv_laneIndex = 1;
    for ( ; ( (auto5F59AEE4_ai >= 0 && lv_laneIndex <= auto5F59AEE4_ae) || (auto5F59AEE4_ai <= 0 && lv_laneIndex >= auto5F59AEE4_ae) ) ; lv_laneIndex += auto5F59AEE4_ai ) {
        if ((libGame_gv_laneData[lv_laneIndex].lv_minionSpawningEnabled == true)) {
            lv_score = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_numEnemyTowns;
            if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_numEnemyTowns == 1)) {
                lv_score = 3.5;
            }

            lv_score += libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_numAllyHeroes;
            if ((lv_score > lv_bestScore)) {
                lv_bestLane = lv_laneIndex;
                lv_bestScore = lv_score;
            }

        }

    }
    if ((lv_bestLane != 0)) {
        return lv_bestLane;
    }
    else {
        return libAIAI_gv_heroAITeamData[lv_teamIndex].lv_weakestLane;
    }
}

bool libAIAI_gf_HeroAIShouldEnterMinionBattle (int lp_trigPlayer) {
    // Variable Declarations
    point lv_contentionPoint;

    // Variable Initialization

    // Implementation
    lv_contentionPoint = libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_contentionPoint;
    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_contentionPoint) < 15.0) && (libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_numEnemyHeroesNearContentionPoint > 0) && (libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_numEnemyMinionsNearContentionPoint > 0) && (libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_numAllyMinionsNearContentionPoint > 0)) {
        return true;
    }

    return false;
}

bool libAIAI_gf_HeroAIMinionBattleFinished (int lp_trigPlayer) {
    // Implementation
    if (((libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_numEnemyMinionsNearContentionPoint == 0) || (libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_numAllyMinionsNearContentionPoint == 0))) {
        return true;
    }

    return false;
}

void libAIAI_gf_HeroAIStartMinionBattleAttack (int lp_trigPlayer) {
    // Implementation
    if ((libAIAI_gf_HeroAIIsHeroMelee(lp_trigPlayer) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_minionBattleAttackTimeout = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)]);
    }
    else {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_minionBattleAttackTimeout = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)]);
    }
    libAIAI_gf_HeroAIUpdateLaneTargetPosition(lp_trigPlayer, true);
    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSMinionBattleAttack);
}

void libAIAI_gf_HeroAIStartMinionBattleHarass (int lp_trigPlayer, unit lp_targetUnit) {
    // Implementation
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_minionBattleHarassTarget = lp_targetUnit;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_minionBattleHarassTimeout = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroMinionBattleHarassDuration);
    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSMinionBattleHarass);
}

void libAIAI_gf_HeroAIStartMinionBattleRetreat (int lp_trigPlayer, fixed lp_retreatTime) {
    // Variable Declarations
    fixed lv_retreatLanePosition;
    point lv_retreatPosition;

    // Variable Initialization

    // Implementation
    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSMinionBattleRetreat);
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_minionBattleRetreatTimeout = (TimerGetElapsed(libGame_gv_gameTimer) + lp_retreatTime);
    libAIAI_gf_HeroAIUpdateLaneTargetPosition(lp_trigPlayer, false);
    HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition), c_orderQueueReplace);
}

void libAIAI_gf_HeroAIStartMinionBattleReposition (int lp_trigPlayer) {
    // Variable Declarations
    unit lv_lastAttacker;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIIsHeroMelee(lp_trigPlayer) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextMinionBattleAttackTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroMeleeMinionBattleRepositionDuration);
    }
    else {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextMinionBattleAttackTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroRangedMinionBattleRepositionDuration);
    }
    libAIAI_gf_HeroAIChangeLaneOffset(lp_trigPlayer, libAIAI_gf_HeroAIChooseNewLaneOffset(lp_trigPlayer, libAIAI_gf_HeroAIAllyHeroesinArea(lp_trigPlayer, libAIAI_gv_aIHeroAvoidAllyHeroesSearchRadius), libAIAI_gf_HeroAIEnemyTowersInRange(lp_trigPlayer, libAIAI_gv_aIHeroAvoidNearbyEnemyTowerSearchRadius, true)));
    libAIAI_gf_HeroAIUpdateMinionBattleRepositionPosition(lp_trigPlayer);
    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSMinionBattleReposition);
}

void libAIAI_gf_HeroAIUpdateMinionBattleRepositionPosition (int lp_trigPlayer) {
    // Variable Declarations
    fixed lv_laneOffset;
    order lv_heroOrder;

    // Variable Initialization

    // Implementation
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextMinionBattleRepositionRecalculateTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroMinionBattleRepositionRecalculateDelay);
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_minionBattleRepositionPositionOffset < 0.0)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_minionBattleRepositionPositionOffset = 2.0;
    }
    else {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_minionBattleRepositionPositionOffset = -2.0;
    }
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_minionBattleRepositionPositionOffset += RandomFixed(-0.5, 0.5);
    lv_laneOffset = (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneOffset + libAIAI_gv_aIHeroes[lp_trigPlayer].lv_minionBattleRepositionPositionOffset);
    libAIAI_gf_HeroAICalcCurrentLaneInfo(lp_trigPlayer);
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition = AILaneWaypointConvertWaydistOffsetToPoint(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroLanePosition, lv_laneOffset);
    HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition), c_orderQueueReplace);
}

void libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger (string lp_effectType, fixed lp_radius, fixed lp_duration, fixed lp_startOffset, bool lp_followsUnit, bool lp_fleeImmediately) {
    // Implementation
    if ((libAIAI_gv_heroAINumRegisteredAOEAvoidEffects < libAIAI_gv_heroAIMaxAOEAvoidEffects)) {
        libAIAI_gv_heroAIAOEAvoidEffectList[libAIAI_gv_heroAINumRegisteredAOEAvoidEffects].lv_effect = lp_effectType;
        libAIAI_gv_heroAIAOEAvoidEffectList[libAIAI_gv_heroAINumRegisteredAOEAvoidEffects].lv_radius = lp_radius;
        libAIAI_gv_heroAIAOEAvoidEffectList[libAIAI_gv_heroAINumRegisteredAOEAvoidEffects].lv_duration = lp_duration;
        libAIAI_gv_heroAIAOEAvoidEffectList[libAIAI_gv_heroAINumRegisteredAOEAvoidEffects].lv_startOffset = lp_startOffset;
        libAIAI_gv_heroAIAOEAvoidEffectList[libAIAI_gv_heroAINumRegisteredAOEAvoidEffects].lv_followsUnit = lp_followsUnit;
        libAIAI_gv_heroAIAOEAvoidEffectList[libAIAI_gv_heroAINumRegisteredAOEAvoidEffects].lv_fleeImmediately = lp_fleeImmediately;
        TriggerAddEventPlayerEffectUsed(libAIAI_gt_HeroAIWatchForAOEAbilityCasted, c_playerAny, lp_effectType);
        libAIAI_gv_heroAINumRegisteredAOEAvoidEffects += 1;
    }
    else {
        TriggerDebugOutput(1, StringExternal("Param/Value/lib_AIAI_F4A749A3"), true);
    }
}

void libAIAI_gf_HeroAIRegisterDataModAOEEffects () {
    // Variable Declarations
    fixed lv_radius;
    fixed lv_duration;
    fixed lv_startOffset;

    // Variable Initialization

    // Implementation
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("WitchDoctorZombieWallDelayPersistent", 3.5, 1.25, 0.0, false, true);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("WitchDoctorRavenousSpiritApplyBehavior", 5.0, 8.5, 0.0, true, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("EntanglingRootsCreateUnit", 4.0, 3.0, 0.0, false, true);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("CrushingGripInitialCreatePersistent", 2.0, 1.0, 0.0, false, true);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("MaelstromInitialSet", 5.0, 7.0, 0.0, true, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("PrecisionStrikeWarningCreatePersistent", 5.0, 2.5, 0.0, false, true);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("RainOfVengeanceStripPersistent", 11.0, 2.0, 0.0, false, true);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("XplodiumBombCreatePersistent", 3.5, 4.5, 0.0, false, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("GravOBomb3000Persistent", 7.5, 2.0, 0.0, false, true);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("ApocalypseCreatePersistent", 4.0, 2.0, 0.0, false, true);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("DiabloLightningBreathInitialPersistent", 11.0, 5.0, 0.0, true, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("ElDruinsMightCreateSwordUnit", 3.5, 0.5, 0.0, false, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("BarbarianWhirlwindCreatePersistent", 3.0, 3.0, 0.0, true, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("ArcaneFlareCreatePersistent", 3.0, 2.5, 0.0, false, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("EmeraldWindPrepareSet", 8.0, 5.0, 0.0, false, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("NewMetamorphosisInitialSet", 6.0, 2.5, 0.0, false, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("StageDivePersistent", 5.0, 4.0, 0.0, false, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("NapalmStrikeWarningPersistent", 2.5, 5.0, 0.0, false, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("DimensionalShiftCreatePersistent", 4.0, 5.0, 0.0, false, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("StarfallCreatePersistent", 6.5, 8.5, 0.0, false, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("VoidPrisonInitialSet", 3.0, 5.0, 0.0, false, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("BattleshipBombardPersistent", 6.0, 3.0, 0.0, false, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("BindingRootsCreatePersistent", 2.5, 1.5, 0.0, false, true);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("UnderworldBossStunCreatePersistent", 5.5, 1.5, 0.0, false, true);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("UnderworldBossRootsCreatePersistent", 2.5, 1.5, 0.0, false, true);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("AzmodanDemonicInvasionInitialSet", 7.0, 8.0, 0.0, false, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("AzmodanBlackPoolPersistent", 8.0, 8.0, 0.0, false, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("SummonBanelingsApplyChannelBehavior", 8.0, 4.5, 0.0, false, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("MurkyPufferfishLMImpact", 3.0, 0.8, 1.6, false, true);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("CarrionSwarmCreatePersistent", 7.0, 8.0, 0.0, true, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("KaelthasFlamestrikeCreatePersistent", 3.0, 2.0, 0.0, false, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("KaelthasPhoenixInitialImpactSet", 5.0, 5.0, 0.0, false, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("JainaBlizzardSet", 3.5, 2.0, 0.0, false, true);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("JainaRingOfFrostInitialPersistent", 5.0, 3.0, 0.0, false, true);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("CrusaderCondemnInitialDelay", 5.0, 1.25, 0.0, true, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("CrusaderFallingSwordInitialSet", 4.0, 2.25, 0.0, false, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("CrusaderBlessedHammerCreateUnitSet", 5.0, 3.5, 0.0, true, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("ButcherFurnaceBlastInitialSet", 4.5, 4.0, 0.0, true, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("ArtanisSpearofAdunPurifierBeamInitialSet", 2.0, 8.0, 0.0, true, false);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("ArtanisSpearofAdunSuppressionPulseInitialSet", 8.0, 4.0, 0.0, false, true);
    libAIAI_gf_HeroAIRegisterAOEwithWatchTrigger("DryadNoxiousBlossomCreatePersistent", 1.6, 0.75, 0.0, false, true);
}

void libAIAI_gf_HeroAIUnregisterAllAOEfromWatchTrigger () {
    // Variable Declarations
    fixed lv_radius;
    fixed lv_duration;
    fixed lv_startOffset;

    // Variable Initialization

    // Implementation
    libAIAI_gv_heroAINumRegisteredAOEAvoidEffects = 0;
}

void libAIAI_gf_HeroAINotifyAOEStarting (int lp_faction, point lp_position, fixed lp_radius, fixed lp_expireTime, bool lp_fleeImmediately) {
    int auto4AC63A6B_ae;

    // Variable Declarations
    int lv_playerIndex;
    bool lv_aOEStarting;
    bool lv_avoidingAOE;

    // Variable Initialization

    // Implementation
    auto4AC63A6B_ae = libCore_gv_bALMaxPlayers;
    lv_playerIndex = 1;
    for ( ; lv_playerIndex <= auto4AC63A6B_ae ; lv_playerIndex += 1 ) {
        if ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 2) == true) && (libGame_gv_players[lv_playerIndex].lv_faction == lp_faction) && (libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[lv_playerIndex].lv_difficulty] == true) && ((libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSAdvance) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSRetreat) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSMinionBattleRetreat) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSMinionBattleReposition) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSMinionBattleAttack) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSHarassSiegeEnemy) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSDefendCoreAttack) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSDefendObjective) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSObjectiveStaging) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSMoveToCamp) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSAttackSoloCamp) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSFleeInJungle) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSTearOfEluneMoveToTear) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSTearOfEluneGuard) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSTearOfEluneCapture) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSTearOfEluneDefend) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSObeliskCapture) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSDragonCapture) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSDragonHarass) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSUnderworldEnter) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSUnderworldKillMinions) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSUnderworldMoveToExit) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSUnderworldExit) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSAbathurAdvanceInLane) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSAbathurRetreatInLane) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSAbathurHideInTown) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSCustomMapState) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSFollowerGuardLeader) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSFollowerGuardLeaderLeash))) {
            lv_avoidingAOE = libAIAI_gf_HeroAIAvoidCircleArea(lv_playerIndex, lp_position, lp_radius, lp_expireTime, lp_fleeImmediately);
        }

    }
}

bool libAIAI_gf_HeroAIAvoidAreaLogic (int lp_trigPlayer) {
    int autoAF4C8C6A_ae;
    int autoAF4C8C6A_ai;

    // Variable Declarations
    int lv_teamIndex;
    int lv_avoidAreaIndex;
    point lv_position;
    fixed lv_gameTime;

    // Variable Initialization

    // Implementation
    lv_teamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer);
    lv_gameTime = TimerGetElapsed(libGame_gv_gameTimer);
    if ((HeroAIAvoidLaneWaveLogic(lp_trigPlayer) == true)) {
        return true;
    }

    autoAF4C8C6A_ae = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_numberofAvoidAreas;
    autoAF4C8C6A_ai = 1;
    lv_avoidAreaIndex = 1;
    for ( ; ( (autoAF4C8C6A_ai >= 0 && lv_avoidAreaIndex <= autoAF4C8C6A_ae) || (autoAF4C8C6A_ai <= 0 && lv_avoidAreaIndex >= autoAF4C8C6A_ae) ) ; lv_avoidAreaIndex += autoAF4C8C6A_ai ) {
        if ((lv_gameTime >= libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidAreas[lv_avoidAreaIndex].lv_startTime)) {
            if ((UnitIsValid(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidAreas[lv_avoidAreaIndex].lv_unit) == true)) {
                lv_position = UnitGetPosition(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidAreas[lv_avoidAreaIndex].lv_unit);
            }
            else {
                lv_position = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidAreas[lv_avoidAreaIndex].lv_position;
            }
            if (((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidAreas[lv_avoidAreaIndex].lv_expireTime - lv_gameTime) > libAIAI_gv_aIHeroIgnoreLongLastingAoEDuration) && (libAIAI_gf_HeroAIIsPlayerNearSpawn(lp_trigPlayer) == true)) {
                continue;
            }

            if ((libAIAI_gf_HeroAIAvoidCircleArea(lp_trigPlayer, lv_position, libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidAreas[lv_avoidAreaIndex].lv_radius, libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidAreas[lv_avoidAreaIndex].lv_expireTime, libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidAreas[lv_avoidAreaIndex].lv_fleeImmediately) == true)) {
                return true;
            }

        }

    }
    return false;
}

bool libAIAI_gf_HeroAIAvoidCircleArea (int lp_trigPlayer, point lp_position, fixed lp_radius, fixed lp_expireTime, bool lp_fleeImmediately) {
    // Variable Declarations
    int lv_teamIndex;
    point lv_playerPosition;
    order lv_heroOrder;
    point lv_orderTargetPosition;
    point lv_playerDirection;
    point lv_aheadOfPlayer;

    // Variable Initialization

    // Implementation
    lp_radius += libAIAI_gv_aIHeroAvoidAOEAvoidExtraDistance;
    lv_playerPosition = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_orderTargetPosition = OrderGetTargetPosition(lv_heroOrder);
    if ((lv_orderTargetPosition != null)) {
        lv_aheadOfPlayer = PointWithOffsetPolar(lv_playerPosition, libAIAI_gv_aIHeroAvoidAOEAvoidExtraDistance, UnitGetFacing(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit));
    }

    if (((DistanceBetweenPoints(lv_playerPosition, lp_position) < lp_radius) || ((lv_aheadOfPlayer != null) && (DistanceBetweenPoints(lv_aheadOfPlayer, lp_position) < lp_radius)))) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition = libAIAI_gf_HeroAIGetAvoidCircleAreaRetreatPosition(lp_trigPlayer, lp_position, lp_radius, lp_fleeImmediately);
        if ((lp_expireTime > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_avoidAOETimeout)) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_avoidAOETimeout = lp_expireTime;
        }

        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState != libAIAI_ge_HeroAIStates_HSAvoidAOE)) {
            HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneTargetPosition), c_orderQueueReplace);
            libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSAvoidAOE);
        }

        return true;
    }

    return false;
}

point libAIAI_gf_HeroAIGetAvoidCircleAreaRetreatPosition (int lp_trigPlayer, point lp_avoidPosition, fixed lp_avoidRadius, bool lp_fleeImmediately) {
    int autoB30A10E4_ae;
    int autoB30A10E4_ai;
    int autoDE810663_ae;

    // Variable Declarations
    point lv_heroPosition;
    fixed lv_avoidRadius;
    point lv_retreatPosition;
    point lv_retreatDirection;
    int lv_testIndex;
    int lv_leftRightIndex;
    fixed lv_offsetAngle;
    fixed lv_baseAngle;
    fixed lv_finalAngle;
    point lv_offset;

    // Variable Initialization

    // Implementation
    lv_heroPosition = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    lv_avoidRadius = (lp_avoidRadius + libAIAI_gv_aIHeroAvoidAOERetreatExtraDistance);
    if ((lp_fleeImmediately == true)) {
        lv_retreatDirection = AIGetDirection(lp_avoidPosition, lv_heroPosition);
        lv_retreatPosition = libCore_gf_AdvancePointinDirection(lp_avoidPosition, lv_retreatDirection, lv_avoidRadius);
        if ((PointPathingPassable(lv_retreatPosition) == true) && (libAIAI_gf_HeroAIIsPointInAOEDangerousToFaction(lv_retreatPosition, libAIAI_gv_aIHeroAvoidAOEAvoidExtraDistance, libGame_gv_players[lp_trigPlayer].lv_faction) == false)) {
            return lv_retreatPosition;
        }

    }
    else {
        lv_retreatPosition = libAIAI_gf_HeroAIGetRetreatPosition(lp_trigPlayer, lv_avoidRadius, lp_avoidPosition);
        if ((PointPathingPassable(lv_retreatPosition) == true) && (libAIAI_gf_HeroAIIsPointInAOEDangerousToFaction(lv_retreatPosition, libAIAI_gv_aIHeroAvoidAOEAvoidExtraDistance, libGame_gv_players[lp_trigPlayer].lv_faction) == false)) {
            return lv_retreatPosition;
        }

    }
    lv_baseAngle = AngleBetweenPoints(lp_avoidPosition, lv_retreatPosition);
    autoB30A10E4_ae = (libAIAI_gv_aIHeroNumberOfAOERetreatTestPoints / 2);
    autoB30A10E4_ai = 1;
    lv_testIndex = 1;
    for ( ; ( (autoB30A10E4_ai >= 0 && lv_testIndex <= autoB30A10E4_ae) || (autoB30A10E4_ai <= 0 && lv_testIndex >= autoB30A10E4_ae) ) ; lv_testIndex += autoB30A10E4_ai ) {
        lv_offsetAngle = (180.0 * (lv_testIndex / IntToFixed(libAIAI_gv_aIHeroNumberOfAOERetreatTestPoints)));
        autoDE810663_ae = 2;
        lv_leftRightIndex = 1;
        for ( ; lv_leftRightIndex <= autoDE810663_ae ; lv_leftRightIndex += 1 ) {
            if ((lv_leftRightIndex == 1)) {
                lv_finalAngle = (lv_baseAngle + lv_offsetAngle);
            }
            else {
                lv_finalAngle = (lv_baseAngle - lv_offsetAngle);
            }
            lv_offset = Point((lv_avoidRadius * Cos(lv_finalAngle)), (lv_avoidRadius * Sin(lv_finalAngle)));
            lv_retreatPosition = Point((PointGetX(lp_avoidPosition) + PointGetX(lv_offset)), (PointGetY(lp_avoidPosition) + PointGetY(lv_offset)));
            if ((PointPathingPassable(lv_retreatPosition) == true) && (libAIAI_gf_HeroAIIsPointInAOEDangerousToFaction(lv_retreatPosition, libAIAI_gv_aIHeroAvoidAOEAvoidExtraDistance, libGame_gv_players[lp_trigPlayer].lv_faction) == false)) {
                return lv_retreatPosition;
            }

        }
    }
    lv_retreatPosition = libGame_gv_players[lp_trigPlayer].lv_spawnPoint;
    return lv_retreatPosition;
}

bool libAIAI_gf_HeroAIIsPointInAOEDangerousToFaction (point lp_point, fixed lp_radius, int lp_faction) {
    int autoE7464CDA_ae;

    // Variable Declarations
    int lv_idx;
    int lv_teamIndex;
    fixed lv_gameTime;
    point lv_aOEPosition;
    fixed lv_aOERadius;

    // Variable Initialization

    // Implementation
    lv_teamIndex = libAIAI_gf_HeroAITeamIndexOfFaction(lp_faction);
    lv_gameTime = TimerGetElapsed(libGame_gv_gameTimer);
    if ((HeroAIPointInDangerOfLaneWave(lp_point, lp_faction) == true)) {
        return true;
    }

    autoE7464CDA_ae = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_numberofAvoidAreas;
    lv_idx = 1;
    for ( ; lv_idx <= autoE7464CDA_ae ; lv_idx += 1 ) {
        if ((lv_gameTime >= libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidAreas[lv_idx].lv_startTime)) {
            lv_aOERadius = (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidAreas[lv_idx].lv_radius + lp_radius);
            if ((UnitIsValid(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidAreas[lv_idx].lv_unit) == true)) {
                lv_aOEPosition = UnitGetPosition(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidAreas[lv_idx].lv_unit);
            }
            else {
                lv_aOEPosition = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_avoidAreas[lv_idx].lv_position;
            }
            if ((DistanceSquaredBetweenPoints(lv_aOEPosition, lp_point) <= (lv_aOERadius * lv_aOERadius))) {
                return true;
            }

        }

    }
    return false;
}

bool libAIAI_gf_HeroAIIsAllyCapturingMacGuffin (int lp_trigPlayer, unit lp_macGuffin) {
    playergroup auto87964DD8_g;
    int auto87964DD8_p;

    // Variable Declarations
    int lv_playerIndex;
    order lv_heroOrder;

    // Variable Initialization

    // Implementation
    auto87964DD8_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_players; 
    auto87964DD8_p = 1;
    for ( ; auto87964DD8_p <= PlayerGroupCount(auto87964DD8_g) ; auto87964DD8_p += (lv_playerIndex == PlayerGroupPlayer(auto87964DD8_g, auto87964DD8_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto87964DD8_g, auto87964DD8_p);
        if ((lv_playerIndex != lp_trigPlayer)) {
            lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, 0);
            if ((OrderGetAbilityCommand(lv_heroOrder) == AbilityCommand("CaptureMacGuffin", 0)) && (OrderGetTargetUnit(lv_heroOrder) == lp_macGuffin)) {
                return true;
            }

        }

    }
    return false;
}

bool libAIAI_gf_HeroAIIsPlayerAlmostFinishedCapturingMacGuffin (int lp_trigPlayer, unit lp_macGuffin) {
    // Variable Declarations
    order lv_heroOrder;

    // Variable Initialization

    // Implementation
    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    if ((OrderGetAbilityCommand(lv_heroOrder) == AbilityCommand("CaptureMacGuffin", 0)) && (OrderGetTargetUnit(lv_heroOrder) == lp_macGuffin) && (UnitOrderGetProgress(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) > 50.0)) {
        return true;
    }

    return false;
}

void libAIAI_gf_HeroAIEnsureCaptureMacGuffin (int lp_trigPlayer, unit lp_macGuffin) {
    // Variable Declarations
    order lv_heroOrder;

    // Variable Initialization

    // Implementation
    lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    if (((OrderGetAbilityCommand(lv_heroOrder) != AbilityCommand("CaptureMacGuffin", 0)) || (OrderGetTargetUnit(lv_heroOrder) != lp_macGuffin))) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingUnit(AbilityCommand("CaptureMacGuffin", 0), lp_macGuffin), c_orderQueueReplace);
    }

}

void libAIAI_gf_HeroAIWatchTowerPinged (int lp_pingingPlayer, unit lp_watchTowerUnit) {
    playergroup auto9B7A488F_g;
    int auto9B7A488F_p;

    // Variable Declarations
    int lv_watchTowerIndex;
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    lv_watchTowerIndex = libGame_gf_WatchTowersGetWatchTowerIndexForUnit(lp_watchTowerUnit);
    if ((lv_watchTowerIndex <= 0)) {
        return ;
    }

    auto9B7A488F_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_pingingPlayer)].lv_aIPlayers; 
    auto9B7A488F_p = 1;
    for ( ; auto9B7A488F_p <= PlayerGroupCount(auto9B7A488F_g) ; auto9B7A488F_p += (lv_playerIndex == PlayerGroupPlayer(auto9B7A488F_g, auto9B7A488F_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto9B7A488F_g, auto9B7A488F_p);
        if ((libAIAI_gf_HeroAIShouldCaptureWatchTower(lv_playerIndex, lv_watchTowerIndex, false) == true)) {
            libAIAI_gf_HeroAILeaveCurrentObjective(lv_playerIndex);
            libAIAI_gv_aIHeroes[lv_playerIndex].lv_curTargetWatchTower = lv_watchTowerIndex;
            libAIAI_gv_aIHeroes[lv_playerIndex].lv_desiredLane = libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentLane;
            libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentLane = 0;
            libAIAI_gf_HeroAIChangeState(lv_playerIndex, libAIAI_ge_HeroAIStates_HSCaptureWatchTower);
        }

    }
}

void libAIAI_gf_HeroAICaptureWatchTowerLogic (int lp_faction) {
    int auto810B45DB_ae;
    int auto810B45DB_ai;
    playergroup auto22756C13_g;
    int auto22756C13_p;

    // Variable Declarations
    int lv_teamPlayer;
    int lv_teamIndex;
    point lv_towerPosition;
    int lv_watchTowerIndex;
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
        lv_teamPlayer = libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
        lv_teamIndex = (1);
        lv_teamPlayer = libCore_gv_cOMPUTER_TeamChaos;
    }
    if (((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextWatchTowerConsiderTime > TimerGetElapsed(libGame_gv_gameTimer)) || (libAIAI_gv_aIHeroChanceCaptureWatchTower[(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_difficulty)] == 0.0))) {
        return ;
    }

    if ((libAIAI_gf_HeroAIHaveEnemiesBeenSeenInLane(lp_faction) == false)) {
        libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextWatchTowerConsiderTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroWatchTowerConsiderFrequencyStart);
    }
    else {
        libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextWatchTowerConsiderTime = (TimerGetElapsed(libGame_gv_gameTimer) + RandomFixed((libAIAI_gv_aIHeroWatchTowerConsiderFrequency - 3.0), (libAIAI_gv_aIHeroWatchTowerConsiderFrequency + 3.0)));
        if ((libNtve_gf_RandomPercent() >= libAIAI_gv_aIHeroChanceCaptureWatchTower[(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_difficulty)])) {
            return ;
        }

    }
    auto810B45DB_ae = libGame_gv_watchTowersCurrentCount;
    auto810B45DB_ai = 1;
    lv_watchTowerIndex = 1;
    for ( ; ( (auto810B45DB_ai >= 0 && lv_watchTowerIndex <= auto810B45DB_ae) || (auto810B45DB_ai <= 0 && lv_watchTowerIndex >= auto810B45DB_ae) ) ; lv_watchTowerIndex += auto810B45DB_ai ) {
        if ((UnitIsValid(libGame_gv_watchTowers[lv_watchTowerIndex].lv_watchTowerUnit) == true) && (lv_teamPlayer != UnitGetOwner(libGame_gv_watchTowers[lv_watchTowerIndex].lv_watchTowerUnit))) {
            lv_towerPosition = UnitGetPosition(libGame_gv_watchTowers[lv_watchTowerIndex].lv_watchTowerUnit);
            if ((libAIAI_gf_HeroAIIsNearbyLaneSafe(lp_faction, lv_towerPosition, libAIAI_gf_HeroAIGetClosestMinionLane(lv_towerPosition), true) == false)) {
                continue;
            }

            auto22756C13_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAITeamIndexOfFaction(lp_faction)].lv_aIPlayers; 
            auto22756C13_p = 1;
            for ( ; auto22756C13_p <= PlayerGroupCount(auto22756C13_g) ; auto22756C13_p += (lv_playerIndex == PlayerGroupPlayer(auto22756C13_g, auto22756C13_p)) ) {
                lv_playerIndex = PlayerGroupPlayer(auto22756C13_g, auto22756C13_p);
                if ((libAIAI_gf_HeroAIShouldCaptureWatchTower(lv_playerIndex, lv_watchTowerIndex, false) == true)) {
                    libAIAI_gf_HeroAILeaveCurrentObjective(lv_playerIndex);
                    libAIAI_gv_aIHeroes[lv_playerIndex].lv_curTargetWatchTower = lv_watchTowerIndex;
                    libAIAI_gv_aIHeroes[lv_playerIndex].lv_desiredLane = libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentLane;
                    libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentLane = 0;
                    libAIAI_gf_HeroAIChangeState(lv_playerIndex, libAIAI_ge_HeroAIStates_HSCaptureWatchTower);
                }

            }
        }

    }
}

bool libAIAI_gf_HeroAIShouldCaptureWatchTower (int lp_trigPlayer, int lp_watchTowerIndex, bool lp_soloCapture) {
    playergroup autoDDE991FE_g;
    int autoDDE991FE_p;

    // Variable Declarations
    point lv_towerPosition;
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_startOffensiveHealth)) {
        return false;
    }

    lv_towerPosition = UnitGetPosition(libGame_gv_watchTowers[lp_watchTowerIndex].lv_watchTowerUnit);
    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_towerPosition) > libAIAI_gv_aIHeroWatchTowerCloseRadius)) {
        return false;
    }

    if ((lp_soloCapture == true)) {
        autoDDE991FE_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAITeamIndexOfFaction(libGame_gv_players[lp_trigPlayer].lv_faction)].lv_aIPlayers; 
        autoDDE991FE_p = 1;
        for ( ; autoDDE991FE_p <= PlayerGroupCount(autoDDE991FE_g) ; autoDDE991FE_p += (lv_playerIndex == PlayerGroupPlayer(autoDDE991FE_g, autoDDE991FE_p)) ) {
            lv_playerIndex = PlayerGroupPlayer(autoDDE991FE_g, autoDDE991FE_p);
            if ((lv_playerIndex != lp_trigPlayer) && (libAIAI_gf_HeroAIGetCurrentObjective(lv_playerIndex) == libAIAI_ge_HeroAIObjective_CaptureWatchTower) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_curTargetWatchTower == lp_watchTowerIndex)) {
                return false;
            }

        }
    }

    libAIAI_gf_HeroAIEval(lp_trigPlayer);
    if (((UnitGroupCount(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroes, c_unitCountAlive) > 0) || (libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 3.0) == true))) {
        return false;
    }

    if ((libAIAI_gf_HeroAIIsHigherPriority(lp_trigPlayer, libAIAI_ge_HeroAIPriority_CaptureWatchTowerAnyState) == false)) {
        return false;
    }

    return true;
}

void libAIAI_gf_HeroAIMinionCampPinged (int lp_pingingPlayer, unit lp_targetUnit) {
    int auto787B61BD_ae;
    int auto787B61BD_ai;
    int auto9EABDDD1_ae;
    int auto9EABDDD1_ai;

    // Variable Declarations
    int lv_side;
    int lv_lastEntry;
    int lv_loopIndex;
    int lv_campIndex;

    // Variable Initialization
    lv_loopIndex = -1;
    lv_campIndex = -1;

    // Implementation
    if ((libGame_gv_players[lp_pingingPlayer].lv_faction == libGame_ge_Faction_Order)) {
        lv_side = 0;
    }
    else {
        lv_side = 1;
    }
    if ((libAIAI_gf_HeroAIIsPlayerActive(lp_pingingPlayer, 1) == false)) {
        return ;
    }

    lv_campIndex = libMapM_gf_JungleGetJungleCampForUnit(lp_targetUnit);
    if ((lv_campIndex < 1)) {
        return ;
    }

    lv_lastEntry = libAIAI_gv_heroAITeamCampData[lv_side].lv_numberofCampPings;
    auto787B61BD_ae = lv_lastEntry;
    auto787B61BD_ai = 1;
    lv_loopIndex = 1;
    for ( ; ( (auto787B61BD_ai >= 0 && lv_loopIndex <= auto787B61BD_ae) || (auto787B61BD_ai <= 0 && lv_loopIndex >= auto787B61BD_ae) ) ; lv_loopIndex += auto787B61BD_ai ) {
        if ((libAIAI_gv_heroAITeamCampData[lv_side].lv_campPings[lv_loopIndex].lv_campPinged == lv_campIndex)) {
            lv_lastEntry = (lv_loopIndex - 1);
            break;
        }

    }
    if ((lv_lastEntry >= libAIAI_gv_heroAIMaxCampPingCount)) {
        lv_lastEntry = (libAIAI_gv_heroAIMaxCampPingCount - 1);
    }

    auto9EABDDD1_ae = 1;
    auto9EABDDD1_ai = -1;
    lv_loopIndex = lv_lastEntry;
    for ( ; ( (auto9EABDDD1_ai >= 0 && lv_loopIndex <= auto9EABDDD1_ae) || (auto9EABDDD1_ai <= 0 && lv_loopIndex >= auto9EABDDD1_ae) ) ; lv_loopIndex += auto9EABDDD1_ai ) {
        libAIAI_gv_heroAITeamCampData[lv_side].lv_campPings[(lv_loopIndex + 1)].lv_pingTime = libAIAI_gv_heroAITeamCampData[lv_side].lv_campPings[lv_loopIndex].lv_pingTime;
        libAIAI_gv_heroAITeamCampData[lv_side].lv_campPings[(lv_loopIndex + 1)].lv_campPinged = libAIAI_gv_heroAITeamCampData[lv_side].lv_campPings[lv_loopIndex].lv_campPinged;
        libAIAI_gv_heroAITeamCampData[lv_side].lv_campPings[(lv_loopIndex + 1)].lv_playerWhoPinged = libAIAI_gv_heroAITeamCampData[lv_side].lv_campPings[lv_loopIndex].lv_playerWhoPinged;
    }
    libAIAI_gv_heroAITeamCampData[lv_side].lv_campPings[1].lv_pingTime = TimerGetElapsed(libGame_gv_gameTimer);
    libAIAI_gv_heroAITeamCampData[lv_side].lv_campPings[1].lv_campPinged = lv_campIndex;
    libAIAI_gv_heroAITeamCampData[lv_side].lv_campPings[1].lv_playerWhoPinged = lp_pingingPlayer;
    if ((libAIAI_gv_heroAITeamCampData[lv_side].lv_numberofCampPings == lv_lastEntry)) {
        libAIAI_gv_heroAITeamCampData[lv_side].lv_numberofCampPings += 1;
    }

    libAIAI_gv_heroAITeamCampData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_pingingPlayer)].lv_startCampCheckTimer = TimerGetElapsed(libGame_gv_gameTimer);
}

void libAIAI_gf_HeroAIMinionCampLogic (int lp_faction) {
    int autoBAE556CB_ae;
    int autoBAE556CB_ai;

    // Variable Declarations
    int lv_campInfo;
    int lv_loopIndex;
    int lv_campIndex;

    // Variable Initialization
    lv_loopIndex = -1;
    lv_campIndex = -1;

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_campInfo = 0;
    }
    else {
        lv_campInfo = 1;
    }
    if ((libAIAI_gv_heroAITeamCampData[lv_campInfo].lv_startCampCheckTimer > TimerGetElapsed(libGame_gv_gameTimer))) {
        return ;
    }

    if ((libAIAI_gf_HeroAIEnemiesInHomeRegion(lp_faction) == true)) {
        return ;
    }

    libAIAI_gv_heroAITeamCampData[lv_campInfo].lv_startCampCheckTimer = (TimerGetElapsed(libGame_gv_gameTimer) + RandomFixed((libAIAI_gv_aIHeroCampConsiderFrequency - 3.0), (libAIAI_gv_aIHeroCampConsiderFrequency + 3.0)));
    autoBAE556CB_ae = libAIAI_gv_heroAITeamCampData[lv_campInfo].lv_numberofCampPings;
    autoBAE556CB_ai = 1;
    lv_loopIndex = 1;
    for ( ; ( (autoBAE556CB_ai >= 0 && lv_loopIndex <= autoBAE556CB_ae) || (autoBAE556CB_ai <= 0 && lv_loopIndex >= autoBAE556CB_ae) ) ; lv_loopIndex += autoBAE556CB_ai ) {
        lv_campIndex = libAIAI_gv_heroAITeamCampData[lv_campInfo].lv_campPings[lv_loopIndex].lv_campPinged;
        if ((lv_campIndex > 0) && (libAIAI_gf_HeroAICanAttackCamp(lp_faction, lv_campIndex, lv_loopIndex, libAIAI_gv_aIHeroHelpHumanTakeCampDist, false) == true)) {
            return ;
        }

    }
    if ((libAIAI_gf_HeroAIAttackCampLogic(lp_faction, libAIAI_gv_aIHeroHelpAITakeCampDist) == true)) {
        libAIAI_gv_heroAITeamCampData[lv_campInfo].lv_startCampCheckTimer = (TimerGetElapsed(libGame_gv_gameTimer) + RandomFixed((libAIAI_gv_aIHeroCampAttackDelay - 3.0), (libAIAI_gv_aIHeroCampAttackDelay + 3.0)));
    }

}

void libAIAI_gf_HeroAIJoinCampLogic (int lp_faction) {
    playergroup autoDE720941_g;
    int autoDE720941_p;

    // Variable Declarations
    int lv_teamIndex;
    int lv_campIndex;
    int lv_playerIndex;
    unit lv_targetUnit;

    // Variable Initialization

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    if ((libAIAI_gv_heroAITeamCampData[lv_teamIndex].lv_joinCampCheckTimer > TimerGetElapsed(libGame_gv_gameTimer))) {
        return ;
    }
    else {
        libAIAI_gv_heroAITeamCampData[lv_teamIndex].lv_joinCampCheckTimer = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroJoinCampConsiderFrequency);
    }
    autoDE720941_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAITeamIndexOfFaction(lp_faction)].lv_humanPlayers; 
    autoDE720941_p = 1;
    for ( ; autoDE720941_p <= PlayerGroupCount(autoDE720941_g) ; autoDE720941_p += (lv_playerIndex == PlayerGroupPlayer(autoDE720941_g, autoDE720941_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoDE720941_g, autoDE720941_p);
        if ((UnitOrder(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, 0) != null) && (OrderGetAbilityCommand(UnitOrder(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, 0)) == libAIAI_gv_aIHeroes[lv_playerIndex].lv_attackAbility)) {
            lv_targetUnit = OrderGetTargetUnit(UnitOrder(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, 0));
            lv_campIndex = libMapM_gf_JungleGetJungleCampForUnit(OrderGetTargetUnit(UnitOrder(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, 0)));
            if ((lv_campIndex > 0) && (UnitTypeTestAttribute(UnitGetType(lv_targetUnit), c_unitAttributeLight) == true) && (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit), libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mapDataCampCaptainSpawnPoint) <= libAIAI_gv_aIHeroLeashDistance) && (libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mapDataCampDefenderType != libMapM_ge_JungleCampDefenderTypes_Doubloons)) {
                libAIAI_gf_HeroAIMinionCampPinged(lv_playerIndex, lv_targetUnit);
            }

        }

    }
}

bool libAIAI_gf_HeroAIAttackCampLogic (int lp_faction, fixed lp_searchRadius) {
    int auto9E7BDEAE_ae;
    int auto9E7BDEAE_ai;
    int autoC487D968_ae;
    int autoC487D968_ai;
    int auto7E33CC8C_ae;
    int auto7E33CC8C_ai;

    // Variable Declarations
    int lv_campInfo;
    int lv_loopIndex;
    int lv_campIndex;

    // Variable Initialization
    lv_loopIndex = -1;
    lv_campIndex = -1;

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_campInfo = 0;
    }
    else {
        lv_campInfo = 1;
    }
    if (((libNtve_gf_RandomPercent() >= libAIAI_gv_aIHeroChanceNearbyMinionCamp[(libAIAI_gv_heroAITeamData[lv_campInfo].lv_difficulty)]) || (libAIAI_gf_HeroAIEnemiesInHomeRegion(lp_faction) == true))) {
        return false;
    }

    auto9E7BDEAE_ae = libMapM_gv_jungleMaxCamps;
    auto9E7BDEAE_ai = 1;
    lv_loopIndex = 1;
    for ( ; ( (auto9E7BDEAE_ai >= 0 && lv_loopIndex <= auto9E7BDEAE_ae) || (auto9E7BDEAE_ai <= 0 && lv_loopIndex >= auto9E7BDEAE_ae) ) ; lv_loopIndex += auto9E7BDEAE_ai ) {
        if ((lp_faction == libGame_ge_Faction_Order)) {
            lv_campIndex = libAIAI_gv_heroAIOrderMercCampList[lv_loopIndex];
        }
        else {
            lv_campIndex = libAIAI_gv_heroAIChaosMercCampList[lv_loopIndex];
        }
        if ((lv_campIndex <= 0)) {
            break;
        }
        else {
            if ((libAIAI_gf_HeroAICanAttackCamp(lp_faction, lv_campIndex, -1, lp_searchRadius, false) == true)) {
                return true;
            }

        }
    }
    if (((libNtve_gf_RandomPercent() >= libAIAI_gv_aIHeroChanceMiddleMinionCamp[(libAIAI_gv_heroAITeamData[lv_campInfo].lv_difficulty)]) || (libAIAI_gf_HeroAIIsSideOfMapSafe(lp_faction, 0.6) == false))) {
        return false;
    }

    autoC487D968_ae = libMapM_gv_jungleMaxCamps;
    autoC487D968_ai = 1;
    lv_loopIndex = 1;
    for ( ; ( (autoC487D968_ai >= 0 && lv_loopIndex <= autoC487D968_ae) || (autoC487D968_ai <= 0 && lv_loopIndex >= autoC487D968_ae) ) ; lv_loopIndex += autoC487D968_ai ) {
        lv_campIndex = libAIAI_gv_heroAIMiddleMercCampList[lv_loopIndex];
        if ((lv_campIndex <= 0)) {
            break;
        }
        else {
            if ((libAIAI_gf_HeroAICanAttackCamp(lp_faction, lv_campIndex, -1, lp_searchRadius, false) == true)) {
                return true;
            }

        }
    }
    if (((libNtve_gf_RandomPercent() >= libAIAI_gv_aIHeroChanceFarMinionCamp[(libAIAI_gv_heroAITeamData[lv_campInfo].lv_difficulty)]) || (libAIAI_gf_HeroAIIsSideOfMapSafe(lp_faction, 1.1) == false))) {
        return false;
    }

    auto7E33CC8C_ae = libMapM_gv_jungleMaxCamps;
    auto7E33CC8C_ai = 1;
    lv_loopIndex = 1;
    for ( ; ( (auto7E33CC8C_ai >= 0 && lv_loopIndex <= auto7E33CC8C_ae) || (auto7E33CC8C_ai <= 0 && lv_loopIndex >= auto7E33CC8C_ae) ) ; lv_loopIndex += auto7E33CC8C_ai ) {
        if ((lp_faction == libGame_ge_Faction_Order)) {
            lv_campIndex = libAIAI_gv_heroAIChaosMercCampList[lv_loopIndex];
        }
        else {
            lv_campIndex = libAIAI_gv_heroAIOrderMercCampList[lv_loopIndex];
        }
        if ((lv_campIndex <= 0)) {
            break;
        }
        else {
            if ((libAIAI_gf_HeroAICanAttackCamp(lp_faction, lv_campIndex, -1, lp_searchRadius, false) == true)) {
                return true;
            }

        }
    }
    return false;
}

bool libAIAI_gf_HeroAITeamAttackCampLogic (int lp_faction, fixed lp_searchRadius) {
    int auto6FF3FD52_ae;
    int auto6FF3FD52_ai;
    int auto7CB31608_ae;
    int auto7CB31608_ai;
    int auto576473E2_ae;
    int auto576473E2_ai;

    // Variable Declarations
    int lv_campInfo;
    int lv_loopIndex;
    int lv_campIndex;

    // Variable Initialization
    lv_loopIndex = -1;
    lv_campIndex = -1;

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_campInfo = 0;
    }
    else {
        lv_campInfo = 1;
    }
    if ((libAIAI_gf_HeroAIEnemiesInHomeRegion(lp_faction) == true)) {
        return false;
    }

    auto6FF3FD52_ae = libMapM_gv_jungleMaxCamps;
    auto6FF3FD52_ai = 1;
    lv_loopIndex = 1;
    for ( ; ( (auto6FF3FD52_ai >= 0 && lv_loopIndex <= auto6FF3FD52_ae) || (auto6FF3FD52_ai <= 0 && lv_loopIndex >= auto6FF3FD52_ae) ) ; lv_loopIndex += auto6FF3FD52_ai ) {
        if ((lp_faction == libGame_ge_Faction_Order)) {
            lv_campIndex = libAIAI_gv_heroAIOrderMercCampList[lv_loopIndex];
        }
        else {
            lv_campIndex = libAIAI_gv_heroAIChaosMercCampList[lv_loopIndex];
        }
        if ((lv_campIndex <= 0)) {
            break;
        }
        else {
            if ((libAIAI_gf_HeroAIIsPushWithTeamCamp(lv_campIndex) == true) && (libAIAI_gf_HeroAICanAttackCamp(lp_faction, lv_campIndex, -1, lp_searchRadius, true) == true)) {
                return true;
            }

        }
    }
    if ((libAIAI_gf_HeroAIIsSideOfMapSafe(lp_faction, 0.6) == false)) {
        return false;
    }

    auto7CB31608_ae = libMapM_gv_jungleMaxCamps;
    auto7CB31608_ai = 1;
    lv_loopIndex = 1;
    for ( ; ( (auto7CB31608_ai >= 0 && lv_loopIndex <= auto7CB31608_ae) || (auto7CB31608_ai <= 0 && lv_loopIndex >= auto7CB31608_ae) ) ; lv_loopIndex += auto7CB31608_ai ) {
        lv_campIndex = libAIAI_gv_heroAIMiddleMercCampList[lv_loopIndex];
        if ((lv_campIndex <= 0)) {
            break;
        }
        else {
            if ((libAIAI_gf_HeroAIIsPushWithTeamCamp(lv_campIndex) == true) && (libAIAI_gf_HeroAICanAttackCamp(lp_faction, lv_campIndex, -1, lp_searchRadius, true) == true)) {
                return true;
            }

        }
    }
    if ((libAIAI_gf_HeroAIIsSideOfMapSafe(lp_faction, 1.1) == false)) {
        return false;
    }

    auto576473E2_ae = libMapM_gv_jungleMaxCamps;
    auto576473E2_ai = 1;
    lv_loopIndex = 1;
    for ( ; ( (auto576473E2_ai >= 0 && lv_loopIndex <= auto576473E2_ae) || (auto576473E2_ai <= 0 && lv_loopIndex >= auto576473E2_ae) ) ; lv_loopIndex += auto576473E2_ai ) {
        if ((lp_faction == libGame_ge_Faction_Order)) {
            lv_campIndex = libAIAI_gv_heroAIChaosMercCampList[lv_loopIndex];
        }
        else {
            lv_campIndex = libAIAI_gv_heroAIOrderMercCampList[lv_loopIndex];
        }
        if ((lv_campIndex <= 0)) {
            break;
        }
        else {
            if ((libAIAI_gf_HeroAIIsPushWithTeamCamp(lv_campIndex) == true) && (libAIAI_gf_HeroAICanAttackCamp(lp_faction, lv_campIndex, -1, lp_searchRadius, true) == true)) {
                return true;
            }

        }
    }
    return false;
}

void libAIAI_gf_HeroAIStartTakeCamp (int lp_trigPlayer, int lp_campIndex, int lp_humanPlayerAssisting) {
    // Implementation
    libAIAI_gf_HeroAILeaveCurrentObjective(lp_trigPlayer);
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp = lp_campIndex;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_moveToCampStartTime = TimerGetElapsed(libGame_gv_gameTimer);
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_arrivedAtCampTime = 0.0;
    if ((lp_humanPlayerAssisting > 0)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_humanPlayerAssisting = lp_humanPlayerAssisting;
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_humanPlayerAssistingDistance = -1;
    }
    else {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_humanPlayerAssisting = -1;
    }
    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSMCampInit);
    if ((libAIAI_gf_HeroAINoOtherAllyAITakingCamp(lp_trigPlayer, lp_campIndex) == true)) {
        libGame_gf_SendEventHeroAIStartingCampAttack(libGame_gf_TeamNumberOfPlayer(lp_trigPlayer), lp_campIndex);
    }

}

bool libAIAI_gf_HeroAICanAttackCamp (int lp_faction, int lp_campIndex, int lp_pingIndex, fixed lp_searchRadius, bool lp_recruitAll) {
    playergroup auto4054DC7E_g;
    int auto4054DC7E_p;
    int auto51324E02_ae;
    int auto51324E02_ai;

    // Variable Declarations
    int lv_playerWhoPinged;
    region lv_nearCamp;
    unitgroup lv_allyHeroesNearCamp;
    bool lv_campCaptured;
    playergroup lv_allyTeam;
    int lv_loopIndex;
    int lv_heroIndex;
    int lv_factionOwner;
    int lv_teamIndex;
    int lv_totalNumberNeeded;
    int lv_totalLevelNeeded;
    int lv_totalHeroLevelAvailable;
    int lv_totalHeroLevelAlreadyRecruited;
    int lv_numHeroesAvailable;
    int lv_numHeroesRecruited;
    int lv_minimumLevelNeeded;
    int lv_recruitPriority;
    int[11] lv_heroesToUse;
    point lv_campLoc;
    fixed lv_closestDist;
    fixed lv_testDist;
    fixed lv_alwaysRecruitToHelpDistance;

    // Variable Initialization
    lv_allyHeroesNearCamp = UnitGroupEmpty();
    lv_allyTeam = PlayerGroupEmpty();

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = 0;
        lv_factionOwner = libCore_gv_cOMPUTER_TeamOrder;
        lv_allyTeam = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
    }
    else {
        lv_teamIndex = 1;
        lv_factionOwner = libCore_gv_cOMPUTER_TeamChaos;
        lv_allyTeam = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup;
    }
    if ((lp_pingIndex > 0)) {
        lv_alwaysRecruitToHelpDistance = libAIAI_gv_aIHeroCampAlwaysRecruitToHelpDistancePing;
        if ((lp_faction == libGame_ge_Faction_Order)) {
            lv_playerWhoPinged = libAIAI_gv_heroAITeamCampData[(0)].lv_campPings[lp_pingIndex].lv_playerWhoPinged;
        }
        else {
            lv_playerWhoPinged = libAIAI_gv_heroAITeamCampData[(1)].lv_campPings[lp_pingIndex].lv_playerWhoPinged;
        }
    }
    else {
        lv_alwaysRecruitToHelpDistance = libAIAI_gv_aIHeroCampAlwaysRecruitToHelpDistance;
        lv_playerWhoPinged = -1;
    }
    if ((PlayerGroupCount(lv_allyTeam) == 0)) {
        return false;
    }

    lv_campCaptured = (libMapM_gv_jungleCreepCamps[lp_campIndex].lv_aIState == libMapM_ge_JungleCampStates_Dead);
    if ((lv_campCaptured == true)) {
        return false;
    }

    if ((lp_pingIndex <= 0) && (libAIAI_gf_HeroAIIsEasyCamp(lp_campIndex) == false) && (libAIAI_gv_aIHeroOnlyInitiateEasyCamps[(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_difficulty)] == true)) {
        return false;
    }

    if ((libAIAI_gf_HeroAIEnemyHeroesNearCamp(lp_faction, lp_campIndex, libAIAI_gv_aIHeroEnemiesNearCampDistance, (lp_pingIndex <= 0)) > 0)) {
        return false;
    }

    if ((libAIAI_gf_HeroAICampDefendersAreHibrinating(lp_campIndex) == true)) {
        return false;
    }

    lv_nearCamp = RegionCircle(libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampCaptainSpawnPoint, libAIAI_gv_aIHeroLeashDistance);
    lv_allyHeroesNearCamp = UnitGroupAlliance(PlayerGroupPlayer(lv_allyTeam, 1), c_unitAllianceAlly, lv_nearCamp, libCore_gv_filtersHeroic, 0);
    if ((UnitGroupCount(lv_allyHeroesNearCamp, c_unitCountAlive) > 0) && (libAIAI_gf_HeroAICampEval(lp_campIndex) < 20.0)) {
        return false;
    }

    lv_campLoc = libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampCaptainSpawnPoint;
    if ((lp_pingIndex <= 0)) {
        lv_recruitPriority = libAIAI_ge_HeroAIPriority_TakeCampMoveToCampOnlyAI;
        lv_minimumLevelNeeded = libAIAI_gv_aIHeroMinHelpAITakeCampLevel;
    }
    else {
        lv_recruitPriority = libAIAI_ge_HeroAIPriority_TakeCampMoveToCampWithHuman;
        lv_minimumLevelNeeded = libAIAI_gv_aIHeroMinHelpHumanTakeCampLevel;
    }
    auto4054DC7E_g = libAIAI_gv_heroAITeamPlayerData[lv_teamIndex].lv_aIPlayers; 
    auto4054DC7E_p = 1;
    for ( ; auto4054DC7E_p <= PlayerGroupCount(auto4054DC7E_g) ; auto4054DC7E_p += (lv_loopIndex == PlayerGroupPlayer(auto4054DC7E_g, auto4054DC7E_p)) ) {
        lv_loopIndex = PlayerGroupPlayer(auto4054DC7E_g, auto4054DC7E_p);
        if ((libGame_gv_players[lv_loopIndex].lv_isDead != true)) {
            if ((libAIAI_gv_aIHeroes[lv_loopIndex].lv_curMinionCamp == lp_campIndex)) {
                lv_totalHeroLevelAlreadyRecruited += UnitLevel(libAIAI_gv_aIHeroes[lv_loopIndex].lv_currentHeroUnit);
                lv_numHeroesRecruited += 1;
                if ((lv_recruitPriority == libAIAI_ge_HeroAIPriority_TakeCampMoveToCampWithHuman) && (libAIAI_gf_HeroAIGetCurrentPriority(lv_loopIndex) == libAIAI_ge_HeroAIPriority_TakeCampMoveToCampOnlyAI)) {
                    libAIAI_gv_aIHeroes[lv_loopIndex].lv_humanPlayerAssisting = lv_playerWhoPinged;
                    libAIAI_gv_aIHeroes[lv_loopIndex].lv_humanPlayerAssistingDistance = -1;
                }

            }
            else {
                if ((libAIAI_gf_HeroAIIsHigherPriority(lv_loopIndex, lv_recruitPriority) == true) && (UnitLevel(libAIAI_gv_aIHeroes[lv_loopIndex].lv_currentHeroUnit) >= lv_minimumLevelNeeded) && (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lv_loopIndex].lv_currentHeroUnit), lv_campLoc) <= lp_searchRadius)) {
                    lv_totalHeroLevelAvailable += UnitLevel(libAIAI_gv_aIHeroes[lv_loopIndex].lv_currentHeroUnit);
                    lv_numHeroesAvailable += 1;
                    lv_heroesToUse[lv_numHeroesAvailable] = lv_loopIndex;
                }

            }
        }

    }
    if ((lv_numHeroesAvailable == 0)) {
        return false;
    }

    lv_totalLevelNeeded = libAIAI_gf_HeroAITotalHeroLevelsNeededForCamp(lp_campIndex);
    lv_totalNumberNeeded = libAIAI_gf_HeroAIMinimumNumberofHeroesNeededForCamp(lp_campIndex);
    lv_totalLevelNeeded -= lv_totalHeroLevelAlreadyRecruited;
    lv_totalNumberNeeded -= lv_numHeroesRecruited;
    if ((lp_pingIndex <= 0) && ((lv_numHeroesAvailable < lv_totalNumberNeeded) || (lv_totalHeroLevelAvailable < (lv_totalLevelNeeded - libAIAI_gv_aIHeroCampNumAttackersBonus[(lv_numHeroesRecruited + lv_numHeroesAvailable)])))) {
        return false;
    }

    while (true) {
        lv_heroIndex = -1;
        lv_closestDist = 0.0;
        auto51324E02_ae = lv_numHeroesAvailable;
        auto51324E02_ai = 1;
        lv_loopIndex = 1;
        for ( ; ( (auto51324E02_ai >= 0 && lv_loopIndex <= auto51324E02_ae) || (auto51324E02_ai <= 0 && lv_loopIndex >= auto51324E02_ae) ) ; lv_loopIndex += auto51324E02_ai ) {
            if ((lv_heroesToUse[lv_loopIndex] > 0)) {
                lv_testDist = DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lv_heroesToUse[lv_loopIndex]].lv_currentHeroUnit), lv_campLoc);
                if (((lv_heroIndex <= 0) || (lv_testDist < lv_closestDist))) {
                    lv_heroIndex = lv_loopIndex;
                    lv_closestDist = lv_testDist;
                }

            }

        }
        if ((lv_heroIndex <= 0)) {
            break;
        }

        if ((lp_recruitAll == false) && (lv_totalNumberNeeded <= 0) && ((lv_totalLevelNeeded - libAIAI_gv_aIHeroCampNumAttackersBonus[lv_numHeroesRecruited]) <= 0) && (lv_closestDist > lv_alwaysRecruitToHelpDistance)) {
            break;
        }

        lv_loopIndex = lv_heroIndex;
        lv_heroIndex = lv_heroesToUse[lv_loopIndex];
        libAIAI_gf_HeroAIStartTakeCamp(lv_heroIndex, lp_campIndex, lv_playerWhoPinged);
        lv_totalLevelNeeded -= UnitLevel(libAIAI_gv_aIHeroes[lv_heroIndex].lv_currentHeroUnit);
        lv_totalNumberNeeded -= 1;
        lv_numHeroesRecruited += 1;
        lv_heroesToUse[lv_loopIndex] = -1;
    }
    if ((libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampDefenderType != libMapM_ge_JungleCampDefenderTypes_Doubloons)) {
        libAIAI_gf_HeroAINotifyTeamHeadingToCamp(lv_playerWhoPinged, lp_faction, lp_campIndex);
    }

    return true;
}

trigger auto_libAIAI_gf_HeroAINotifyTeamHeadingToCamp_Trigger = null;
int auto_libAIAI_gf_HeroAINotifyTeamHeadingToCamp_lp_playerWhoPinged;
int auto_libAIAI_gf_HeroAINotifyTeamHeadingToCamp_lp_faction;
int auto_libAIAI_gf_HeroAINotifyTeamHeadingToCamp_lp_campIndex;

void libAIAI_gf_HeroAINotifyTeamHeadingToCamp (int lp_playerWhoPinged, int lp_faction, int lp_campIndex) {
    auto_libAIAI_gf_HeroAINotifyTeamHeadingToCamp_lp_playerWhoPinged = lp_playerWhoPinged;
    auto_libAIAI_gf_HeroAINotifyTeamHeadingToCamp_lp_faction = lp_faction;
    auto_libAIAI_gf_HeroAINotifyTeamHeadingToCamp_lp_campIndex = lp_campIndex;

    if (auto_libAIAI_gf_HeroAINotifyTeamHeadingToCamp_Trigger == null) {
        auto_libAIAI_gf_HeroAINotifyTeamHeadingToCamp_Trigger = TriggerCreate("auto_libAIAI_gf_HeroAINotifyTeamHeadingToCamp_TriggerFunc");
    }

    TriggerExecute(auto_libAIAI_gf_HeroAINotifyTeamHeadingToCamp_Trigger, false, false);
}

bool auto_libAIAI_gf_HeroAINotifyTeamHeadingToCamp_TriggerFunc (bool testConds, bool runActions) {
    int lp_playerWhoPinged = auto_libAIAI_gf_HeroAINotifyTeamHeadingToCamp_lp_playerWhoPinged;
    int lp_faction = auto_libAIAI_gf_HeroAINotifyTeamHeadingToCamp_lp_faction;
    int lp_campIndex = auto_libAIAI_gf_HeroAINotifyTeamHeadingToCamp_lp_campIndex;

    int autoFFCAFE20_ae;
    int autoFFCAFE20_ai;
    int autoEFE6B5B2_ae;
    int autoEFE6B5B2_ai;
    playergroup autoDE281168_g;
    int autoDE281168_p;
    playergroup autoB11C1101_g;
    int autoB11C1101_p;
    unitgroup autoC28630AB_g;
    int autoC28630AB_u;

    // Variable Declarations
    point lv_campLocation;
    playergroup lv_allyTeam;
    int lv_attemptNumber;
    playergroup lv_heroesHeadingToCamp;
    int lv_playerIndex;
    bool lv_heroNearEnemies;
    fixed lv_distance;
    fixed lv_bestDistance;
    int lv_closestHero;
    int lv_defenderIndex;
    unit lv_defenderUnit;

    // Variable Initialization
    lv_allyTeam = PlayerGroupEmpty();
    lv_heroesHeadingToCamp = PlayerGroupEmpty();
    lv_bestDistance = 524287.0;

    // Implementation
    lv_campLocation = libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampCaptainSpawnPoint;
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_allyTeam = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
    }
    else {
        lv_allyTeam = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup;
    }
    Wait(2.5, c_timeGame);
    autoFFCAFE20_ae = 4;
    autoFFCAFE20_ai = 1;
    lv_attemptNumber = 1;
    for ( ; ( (autoFFCAFE20_ai >= 0 && lv_attemptNumber <= autoFFCAFE20_ae) || (autoFFCAFE20_ai <= 0 && lv_attemptNumber >= autoFFCAFE20_ae) ) ; lv_attemptNumber += autoFFCAFE20_ai ) {
        lv_heroesHeadingToCamp = PlayerGroupEmpty();
        autoEFE6B5B2_ae = libCore_gv_bALMaxPlayers;
        autoEFE6B5B2_ai = 1;
        lv_playerIndex = 1;
        for ( ; ( (autoEFE6B5B2_ai >= 0 && lv_playerIndex <= autoEFE6B5B2_ae) || (autoEFE6B5B2_ai <= 0 && lv_playerIndex >= autoEFE6B5B2_ae) ) ; lv_playerIndex += autoEFE6B5B2_ai ) {
            if ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 2) == true) && (libGame_gv_players[lv_playerIndex].lv_faction == lp_faction) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_curMinionCamp == lp_campIndex)) {
                PlayerGroupAdd(lv_heroesHeadingToCamp, lv_playerIndex);
            }

        }
        if ((PlayerGroupCount(lv_heroesHeadingToCamp) == 0)) {
            return true;
        }

        lv_heroNearEnemies = false;
        autoDE281168_g = lv_heroesHeadingToCamp; 
        autoDE281168_p = 1;
        for ( ; autoDE281168_p <= PlayerGroupCount(autoDE281168_g) ; autoDE281168_p += (lv_playerIndex == PlayerGroupPlayer(autoDE281168_g, autoDE281168_p)) ) {
            lv_playerIndex = PlayerGroupPlayer(autoDE281168_g, autoDE281168_p);
            libAIAI_gf_HeroAIEval(lv_playerIndex);
            if ((libAIAI_gv_aIHeroes[lv_playerIndex].lv_totalEnemyEval > 0.0)) {
                lv_heroNearEnemies = true;
                break;
            }

        }
        if ((lv_heroNearEnemies == true)) {
            Wait(1.0, c_timeGame);
            continue;
        }

        autoB11C1101_g = lv_heroesHeadingToCamp; 
        autoB11C1101_p = 1;
        for ( ; autoB11C1101_p <= PlayerGroupCount(autoB11C1101_g) ; autoB11C1101_p += (lv_playerIndex == PlayerGroupPlayer(autoB11C1101_g, autoB11C1101_p)) ) {
            lv_playerIndex = PlayerGroupPlayer(autoB11C1101_g, autoB11C1101_p);
            lv_distance = DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit), lv_campLocation);
            if ((lv_distance < lv_bestDistance)) {
                lv_bestDistance = lv_distance;
                lv_closestHero = lv_playerIndex;
            }

        }
        if ((lv_bestDistance < libAIAI_gv_aIHeroLeashDistance)) {
            return true;
        }

        if ((lp_playerWhoPinged > 0)) {
            libSond_gf_HeroVOPlayHeroLine(libCore_ge_HeroVOEvents_AIOnMyWay, lv_closestHero, lv_allyTeam);
        }
        else {
            autoC28630AB_g = libAIAI_gf_DefenderGroup(libMapM_gv_jungleCreepCamps[lp_campIndex].lv_aIDefenderAIIndex);
            autoC28630AB_u = 1;
            for ( ; autoC28630AB_u <= UnitGroupCount(autoC28630AB_g, c_unitCountAll) ; autoC28630AB_u += (lv_defenderUnit == UnitGroupUnit(autoC28630AB_g, autoC28630AB_u)) ) {
                lv_defenderUnit = UnitGroupUnit(autoC28630AB_g, autoC28630AB_u);
                if ((UnitIsValid(lv_defenderUnit) == true)) {
                    libUIUI_gf_PingPlayerPingsUnit(lv_closestHero, lv_defenderUnit, lv_allyTeam);
                    break;
                }

            }
        }
        return true;
    }
    return true;
}

int libAIAI_gf_HeroAITotalHeroLevelsNeededForCamp (int lp_campIndex) {
    int auto11E66FF0_val;

    // Variable Declarations
    int lv_totalLevelNeeded;

    // Variable Initialization

    // Implementation
    auto11E66FF0_val = libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampDefenderType;
    if (auto11E66FF0_val == libMapM_ge_JungleCampDefenderTypes_Doubloons) {
        lv_totalLevelNeeded = libAIAI_gv_aIHeroDoubloonTotalLevelNeeded;
    }
    else if (auto11E66FF0_val == libMapM_ge_JungleCampDefenderTypes_SiegeGiants) {
        lv_totalLevelNeeded = libAIAI_gv_aIHeroSiegeGiantTotalLevelNeeded;
    }
    else if (auto11E66FF0_val == libMapM_ge_JungleCampDefenderTypes_Knights) {
        lv_totalLevelNeeded = libAIAI_gv_aIHeroKnightsTotalLevelNeeded;
    }
    else if (auto11E66FF0_val == libMapM_ge_JungleCampDefenderTypes_GraveGolem) {
        lv_totalLevelNeeded = libAIAI_gv_aIHeroGolemTotalLevelNeeded;
    }
    else {
        lv_totalLevelNeeded = libAIAI_gv_aIHeroOtherTotalLevelNeeded;
    }
    return lv_totalLevelNeeded;
}

int libAIAI_gf_HeroAIMinimumNumberofHeroesNeededForCamp (int lp_campIndex) {
    int auto1B0C06E6_val;

    // Variable Declarations
    int lv_numberNeeded;

    // Variable Initialization

    // Implementation
    auto1B0C06E6_val = libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampDefenderType;
    if (auto1B0C06E6_val == libMapM_ge_JungleCampDefenderTypes_Doubloons) {
        lv_numberNeeded = libAIAI_gv_aIHeroDoubloonMinimumNumberNeeded;
    }
    else if (auto1B0C06E6_val == libMapM_ge_JungleCampDefenderTypes_SiegeGiants) {
        lv_numberNeeded = libAIAI_gv_aIHeroSiegeGiantMinimumNumberNeeded;
    }
    else if (auto1B0C06E6_val == libMapM_ge_JungleCampDefenderTypes_Knights) {
        lv_numberNeeded = libAIAI_gv_aIHeroKnightsMinimumNumberNeeded;
    }
    else if (auto1B0C06E6_val == libMapM_ge_JungleCampDefenderTypes_GraveGolem) {
        lv_numberNeeded = libAIAI_gv_aIHeroGolemMinimumNumberNeeded;
    }
    else {
        lv_numberNeeded = libAIAI_gv_aIHeroOtherMinimumNumberNeeded;
    }
    return lv_numberNeeded;
}

bool libAIAI_gf_HeroAIShouldInitiateCamp (int lp_trigPlayer) {
    unitgroup autoE59D94D1_g;
    int autoE59D94D1_u;

    // Variable Declarations
    int lv_campIndex;
    point lv_campLoc;
    int lv_distance;
    region lv_nearbyRegion;
    unitgroup lv_nearbyFriendlyHeroes;
    int lv_numNearbyFriendlyHeroes;
    unit lv_allyHero;
    int lv_totalNearbyHeroLevel;

    // Variable Initialization
    lv_nearbyFriendlyHeroes = UnitGroupEmpty();

    // Implementation
    lv_campIndex = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp;
    lv_campLoc = libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mapDataCampCaptainSpawnPoint;
    if ((libAIAI_gf_DefendersAreFighting(libMapM_gv_jungleCreepCamps[lv_campIndex].lv_aIDefenderAIIndex) == true)) {
        return true;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_humanPlayerAssisting > 0) && (libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)] == true)) {
        lv_distance = PointPathingCost(UnitGetPosition(libAIAI_gv_aIHeroes[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_humanPlayerAssisting].lv_currentHeroUnit), lv_campLoc);
        if ((lv_distance > 12)) {
            return false;
        }

    }

    lv_nearbyRegion = RegionCircle(lv_campLoc, libAIAI_gv_aIHeroLeashDistance);
    lv_nearbyFriendlyHeroes = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceAlly, lv_nearbyRegion, libCore_gv_filtersHeroic, 0);
    autoE59D94D1_g = lv_nearbyFriendlyHeroes;
    autoE59D94D1_u = 1;
    for ( ; autoE59D94D1_u <= UnitGroupCount(autoE59D94D1_g, c_unitCountAll) ; autoE59D94D1_u += (lv_allyHero == UnitGroupUnit(autoE59D94D1_g, autoE59D94D1_u)) ) {
        lv_allyHero = UnitGroupUnit(autoE59D94D1_g, autoE59D94D1_u);
        lv_totalNearbyHeroLevel += UnitLevel(lv_allyHero);
    }
    lv_numNearbyFriendlyHeroes = UnitGroupCount(lv_nearbyFriendlyHeroes, c_unitCountAlive);
    if ((lv_numNearbyFriendlyHeroes > 5)) {
        lv_numNearbyFriendlyHeroes = 5;
    }

    if (((lv_totalNearbyHeroLevel + libAIAI_gv_aIHeroCampNumAttackersBonus[lv_numNearbyFriendlyHeroes]) < (libAIAI_gf_HeroAITotalHeroLevelsNeededForCamp(lv_campIndex) - 3))) {
        return false;
    }

    return true;
}

bool libAIAI_gf_HeroAIShouldDefendCamp (int lp_trigPlayer) {
    // Variable Declarations
    int lv_enemyHeroesNearCamp;

    // Variable Initialization

    // Implementation
    lv_enemyHeroesNearCamp = libAIAI_gf_HeroAIEnemyHeroesNearCamp(libGame_gv_players[lp_trigPlayer].lv_faction, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp, libAIAI_gv_aIHeroLeashDistance, false);
    if ((lv_enemyHeroesNearCamp > 0)) {
        return true;
    }
    else {
        return false;
    }
}

void libAIAI_gf_HeroAIStartCaptureCampBeacon (int lp_trigPlayer) {
    // Variable Declarations
    point lv_standPosition;

    // Variable Initialization

    // Implementation
    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSCaptureCampBeacon);
    lv_standPosition = libAIAI_gf_HeroAIChooseCampCaptureStandPosition(lp_trigPlayer);
    HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_standPosition), c_orderQueueReplace);
}

void libAIAI_gf_HeroAIStartWaitAtCamp (int lp_trigPlayer) {
    // Variable Declarations
    point lv_standPosition;

    // Variable Initialization

    // Implementation
    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSWaitAtCamp);
    lv_standPosition = libAIAI_gf_HeroAIChooseCampGuardPosition(lp_trigPlayer);
    HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_standPosition), c_orderQueueReplace);
}

point libAIAI_gf_HeroAIChooseCampGuardPosition (int lp_trigPlayer) {
    int auto4B209750_ae;
    int auto4B209750_ai;

    // Variable Declarations
    region lv_nearbyRegion;
    unitgroup lv_nearbyAllyHeroes;
    int lv_campIndex;
    point lv_campPosition;
    point lv_heroPosition;
    int lv_testIndex;
    fixed lv_angle;
    point lv_guardPosition;
    fixed lv_distance;
    point lv_bestGuardPosition;
    fixed lv_bestDistance;
    unit lv_closestAlly;
    fixed lv_closestAllyDistance;

    // Variable Initialization
    lv_nearbyAllyHeroes = UnitGroupEmpty();
    lv_bestDistance = 524287.0;

    // Implementation
    lv_campIndex = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp;
    lv_campPosition = libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mapDataCampCaptainSpawnPoint;
    lv_nearbyRegion = RegionCircle(lv_campPosition, libAIAI_gv_aIHeroLeashDistance);
    lv_nearbyAllyHeroes = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceAlly, lv_nearbyRegion, libCore_gv_filtersHeroic, 0);
    UnitGroupRemove(lv_nearbyAllyHeroes, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    lv_heroPosition = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    lv_bestGuardPosition = null;
    auto4B209750_ae = libAIAI_gv_aIHeroNumberOfCaptureBeaconGuardTestPoints;
    auto4B209750_ai = 1;
    lv_testIndex = 1;
    for ( ; ( (auto4B209750_ai >= 0 && lv_testIndex <= auto4B209750_ae) || (auto4B209750_ai <= 0 && lv_testIndex >= auto4B209750_ae) ) ; lv_testIndex += auto4B209750_ai ) {
        lv_angle = (360.0 * (lv_testIndex / IntToFixed(libAIAI_gv_aIHeroNumberOfCaptureBeaconGuardTestPoints)));
        lv_guardPosition = PointWithOffsetPolar(lv_campPosition, (libMapM_gv_bALJungleCampCaptureRadius + 2.0), lv_angle);
        if ((PointPathingPassable(lv_guardPosition) == false)) {
            continue;
        }

        lv_distance = DistanceBetweenPoints(lv_heroPosition, lv_guardPosition);
        if ((lv_distance > lv_bestDistance)) {
            continue;
        }

        if ((UnitGroupCount(lv_nearbyAllyHeroes, c_unitCountAlive) > 0)) {
            lv_closestAlly = UnitGroupClosestToPoint(lv_nearbyAllyHeroes, lv_guardPosition);
            lv_closestAllyDistance = DistanceBetweenPoints(UnitGetPosition(lv_closestAlly), lv_guardPosition);
            if ((lv_closestAllyDistance < 2.0) && (lv_closestAllyDistance < lv_distance)) {
                continue;
            }

        }

        lv_bestDistance = lv_distance;
        lv_bestGuardPosition = lv_guardPosition;
    }
    if ((lv_bestGuardPosition != null)) {
        return lv_bestGuardPosition;
    }
    else {
        return lv_campPosition;
    }
}

point libAIAI_gf_HeroAIChooseCampCaptureStandPosition (int lp_trigPlayer) {
    // Variable Declarations
    int lv_campIndex;
    point lv_campPosition;
    point lv_heroPosition;

    // Variable Initialization

    // Implementation
    lv_campIndex = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp;
    lv_campPosition = libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mapDataCampCaptainSpawnPoint;
    lv_heroPosition = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    if ((libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)] == true)) {
        return libAIAI_gf_HeroAIChooseCampGuardPosition(lp_trigPlayer);
    }
    else {
        return lv_campPosition;
    }
}

unit libAIAI_gf_HeroAIAttackCampChooseTarget (int lp_trigPlayer) {
    unitgroup autoF20E035D_g;
    int autoF20E035D_u;
    unitgroup auto25193B89_g;
    int auto25193B89_u;

    // Variable Declarations
    int lv_campIndex;
    point lv_campLoc;
    unitgroup lv_enemies;
    unitgroup lv_enemySummons;
    unit lv_enemy;
    fixed lv_enemyHP;
    unit lv_bestTarget;
    fixed lv_bestTargetHP;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_enemySummons = UnitGroupEmpty();
    lv_bestTargetHP = 524287.0;

    // Implementation
    lv_campIndex = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp;
    lv_campLoc = libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mapDataCampCaptainSpawnPoint;
    lv_enemies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, RegionCircle(lv_campLoc, libAIAI_gv_aIHeroLeashDistance), UnitFilter(0, 0, (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv_enemySummons = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0), 0);
    autoF20E035D_g = lv_enemySummons;
    autoF20E035D_u = 1;
    for ( ; autoF20E035D_u <= UnitGroupCount(autoF20E035D_g, c_unitCountAll) ; autoF20E035D_u += (lv_enemy == UnitGroupUnit(autoF20E035D_g, autoF20E035D_u)) ) {
        lv_enemy = UnitGroupUnit(autoF20E035D_g, autoF20E035D_u);
        lv_enemyHP = UnitGetPropertyFixed(lv_enemy, c_unitPropLife, c_unitPropCurrent);
        if ((lv_enemyHP < lv_bestTargetHP)) {
            lv_bestTargetHP = lv_enemyHP;
            lv_bestTarget = lv_enemy;
        }

    }
    if ((lv_bestTarget == null)) {
        auto25193B89_g = libAIAI_gf_DefenderGroup(libMapM_gv_jungleCreepCamps[lv_campIndex].lv_aIDefenderAIIndex);
        auto25193B89_u = 1;
        for ( ; auto25193B89_u <= UnitGroupCount(auto25193B89_g, c_unitCountAll) ; auto25193B89_u += (lv_enemy == UnitGroupUnit(auto25193B89_g, auto25193B89_u)) ) {
            lv_enemy = UnitGroupUnit(auto25193B89_g, auto25193B89_u);
            if ((UnitIsValid(lv_enemy) == true)) {
                lv_enemyHP = UnitGetPropertyFixed(lv_enemy, c_unitPropLife, c_unitPropCurrent);
                if ((lv_enemyHP < lv_bestTargetHP)) {
                    lv_bestTargetHP = lv_enemyHP;
                    lv_bestTarget = lv_enemy;
                }

            }

        }
    }

    return lv_bestTarget;
}

void libAIAI_gf_HeroAIHeroStoppingCampAttack (int lp_trigPlayer) {
    // Variable Declarations
    int lv_playerIndex;
    int lv_campIndex;
    point lv_campLocation;

    // Variable Initialization

    // Implementation
    lv_campIndex = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp;
    lv_campLocation = libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mapDataCampCaptainSpawnPoint;
    libAIAI_gf_HeroAILeaveCamp(lp_trigPlayer);
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_humanPlayerAssisting <= 0) && (libAIAI_gf_HeroAICampEval(lv_campIndex) >= libAIAI_gv_aIHeroHighCampEval) && (libAIAI_gf_HeroAIHumanAllyInArea(lp_trigPlayer, lv_campLocation, libAIAI_gv_aIHeroLeashDistance) == false)) {
        libAIAI_gf_HeroAICancelCampAttack(lv_campIndex, libGame_gv_players[lp_trigPlayer].lv_faction);
    }

}

bool libAIAI_gf_HeroAIShouldCancelCampAttack (int lp_trigPlayer) {
    // Variable Declarations
    int lv_campIndex;
    int lv_enemyHeroesNearCamp;
    int lv_allyHeroesNearCamp;

    // Variable Initialization

    // Implementation
    lv_campIndex = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp;
    lv_enemyHeroesNearCamp = libAIAI_gf_HeroAIEnemyHeroesNearCamp(libGame_gv_players[lp_trigPlayer].lv_faction, lv_campIndex, libAIAI_gv_aIHeroFarFromCampDistance, false);
    lv_allyHeroesNearCamp = libAIAI_gf_HeroAIAllyHeroesNearCamp(libGame_gv_players[lp_trigPlayer].lv_faction, lv_campIndex, libAIAI_gv_aIHeroFarFromCampDistance);
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_humanPlayerAssisting <= 0) && (libAIAI_gf_HeroAICampEval(lv_campIndex) >= libAIAI_gv_aIHeroHighCampEval)) {
        if ((lv_allyHeroesNearCamp < lv_enemyHeroesNearCamp)) {
            return true;
        }

    }
    else {
        if ((lv_allyHeroesNearCamp < (lv_enemyHeroesNearCamp - 1))) {
            return true;
        }

    }
    if ((libAIAI_gf_HeroAICampDefendersAreHibrinating(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp) == true)) {
        return true;
    }

    return false;
}

void libAIAI_gf_HeroAICancelCampAttack (int lp_campIndex, int lp_faction) {
    int auto3912B205_ae;
    int auto3912B205_ai;
    int autoDC69C3DC_ae;
    int autoDC69C3DC_ai;

    // Variable Declarations
    int lv_teamIndex;
    int lv_playerIndex;
    int lv_pingIndex;

    // Variable Initialization

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    auto3912B205_ae = libCore_gv_bALMaxPlayers;
    auto3912B205_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (auto3912B205_ai >= 0 && lv_playerIndex <= auto3912B205_ae) || (auto3912B205_ai <= 0 && lv_playerIndex >= auto3912B205_ae) ) ; lv_playerIndex += auto3912B205_ai ) {
        if ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 2) == true) && (libGame_gv_players[lv_playerIndex].lv_faction == lp_faction) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_curMinionCamp == lp_campIndex)) {
            libAIAI_gf_HeroAILeaveCamp(lv_playerIndex);
        }

    }
    autoDC69C3DC_ae = libAIAI_gv_heroAIMaxCampPingCount;
    autoDC69C3DC_ai = 1;
    lv_pingIndex = 1;
    for ( ; ( (autoDC69C3DC_ai >= 0 && lv_pingIndex <= autoDC69C3DC_ae) || (autoDC69C3DC_ai <= 0 && lv_pingIndex >= autoDC69C3DC_ae) ) ; lv_pingIndex += autoDC69C3DC_ai ) {
        if ((libAIAI_gv_heroAITeamCampData[lv_teamIndex].lv_campPings[lv_pingIndex].lv_campPinged == lp_campIndex)) {
            libAIAI_gv_heroAITeamCampData[lv_teamIndex].lv_campPings[lv_pingIndex].lv_campPinged = -1;
        }

    }
}

void libAIAI_gf_HeroAILeaveCamp (int lp_trigPlayer) {
    // Variable Declarations
    int lv_teamIndex;
    int lv_campIndex;
    point lv_campPosition;
    bool lv_campCaptured;
    int lv_mercRallyLane;
    int lv_closestLane;

    // Variable Initialization

    // Implementation
    lv_campIndex = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp;
    lv_campPosition = libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mapDataCampCaptainSpawnPoint;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curMinionCamp = 0;
    if ((UnitGroupCount(libAIAI_gf_DefenderGroup(libMapM_gv_jungleCreepCamps[lv_campIndex].lv_aIDefenderAIIndex), c_unitCountAlive) <= 0) && (libMapM_gv_jungleCreepCamps[lv_campIndex].lv_captureCaptureEnabled == false)) {
        lv_campCaptured = true;
    }
    else {
        lv_campCaptured = false;
    }
    if ((libAIAI_gf_HeroAINoOtherAllyAITakingCamp(lp_trigPlayer, lv_campIndex) == true)) {
        libGame_gf_SendEventHeroAIEndingCampAttack(libGame_gf_TeamNumberOfPlayer(lp_trigPlayer), lv_campIndex, lv_campCaptured);
    }

    if ((libAIAI_gv_aIHeroAIAllowedToChangeDesiredLane[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)] == false)) {
        libAIAI_gf_HeroAIStartReturnToLane(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane);
        return ;
    }

    if ((lv_campCaptured == true) && (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_campPosition) <= libAIAI_gv_aIHeroLeashDistance)) {
        lv_teamIndex = libGame_gf_TeamNumberOfPlayer(lp_trigPlayer);
        lv_mercRallyLane = libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mercLaneLastSpawnedIn[lv_teamIndex];
        if ((lv_mercRallyLane > 0) && (libAIAI_gf_HeroAIIsNearbyLaneSafe(libGame_gv_players[lp_trigPlayer].lv_faction, lv_campPosition, lv_mercRallyLane, false) == true)) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome = false;
            libAIAI_gf_HeroAIStartReturnToLane(lp_trigPlayer, lv_mercRallyLane);
            return ;
        }

    }

    lv_closestLane = libAIAI_gf_HeroAIGetClosestMinionLane(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit));
    if ((libAIAI_gf_HeroAIIsNearbyLaneSafe(libGame_gv_players[lp_trigPlayer].lv_faction, lv_campPosition, lv_closestLane, true) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome = false;
        libAIAI_gf_HeroAIStartReturnToLane(lp_trigPlayer, lv_closestLane);
        return ;
    }

    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToGoHome = true;
    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSPortHomeJungle);
}

fixed libAIAI_gf_HeroAICampEval (int lp_campIndex) {
    unitgroup auto15FCA8F3_g;
    int auto15FCA8F3_u;

    // Variable Declarations
    fixed lv_campEval;
    unit lv_defenderUnit;
    int lv_defenderCount;

    // Variable Initialization

    // Implementation
    lv_defenderCount = libAIAI_gf_DefenderUnitCount(libMapM_gv_jungleCreepCamps[lp_campIndex].lv_aIDefenderAIIndex);
    if ((lv_defenderCount > 0)) {
        auto15FCA8F3_g = libAIAI_gf_DefenderGroup(libMapM_gv_jungleCreepCamps[lp_campIndex].lv_aIDefenderAIIndex);
        auto15FCA8F3_u = 1;
        for ( ; auto15FCA8F3_u <= UnitGroupCount(auto15FCA8F3_g, c_unitCountAll) ; auto15FCA8F3_u += (lv_defenderUnit == UnitGroupUnit(auto15FCA8F3_g, auto15FCA8F3_u)) ) {
            lv_defenderUnit = UnitGroupUnit(auto15FCA8F3_g, auto15FCA8F3_u);
            lv_campEval += UnitGetPropertyFixed(lv_defenderUnit, c_unitPropLifePercent, c_unitPropCurrent);
        }
        lv_campEval /= IntToFixed(lv_defenderCount);
    }

    return lv_campEval;
}

bool libAIAI_gf_HeroAIIsEasyCamp (int lp_campIndex) {
    // Implementation
    if (((libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampType == libMapM_ge_JungleCampTypes_DoubloonSmallCamp) || (libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampType == libMapM_ge_JungleCampTypes_DoubloonCamp) || ((libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampType == libMapM_ge_JungleCampTypes_MercCamp) && ((libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataMercSpawnType == libMapM_ge_JungleCampMercTypes_SiegeGiants) || (libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataMercSpawnType == libMapM_ge_JungleCampMercTypes_SiegeCamp1) || (libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataMercSpawnType == libMapM_ge_JungleCampMercTypes_BruiserCamp1))))) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAIIsPushWithTeamCamp (int lp_campIndex) {
    // Implementation
    if ((libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampType == libMapM_ge_JungleCampTypes_MercCamp) && ((libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataMercSpawnType == libMapM_ge_JungleCampMercTypes_Ogres) || (libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataMercSpawnType == libMapM_ge_JungleCampMercTypes_GraveGolem))) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAICampDefendersAreHibrinating (int lp_campIndex) {
    // Implementation
    return ((libMapM_gv_jungleCreepCamps[lp_campIndex].lv_aIState == libMapM_ge_JungleCampStates_Hibernating) || (libMapM_gv_jungleCreepCamps[lp_campIndex].lv_aIState == libMapM_ge_JungleCampStates_HibernatingReadyToRespawn));
}

bool libAIAI_gf_HeroAIEnemiesNearCamp (int lp_campIndex, int lp_faction, fixed lp_searchRadius, bool lp_visionCheat) {
    unitgroup auto0222D975_g;
    int auto0222D975_u;

    // Variable Declarations
    playergroup lv_allyTeam;
    int lv_allyComputerPlayer;
    point lv_campLocation;
    region lv_nearCamp;
    unitgroup lv_enemies;
    unitgroup lv_enemyHeroes;
    unit lv_unit;

    // Variable Initialization
    lv_allyTeam = PlayerGroupEmpty();
    lv_enemies = UnitGroupEmpty();
    lv_enemyHeroes = UnitGroupEmpty();

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_allyTeam = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_teamPlayerGroup;
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
        lv_allyTeam = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_teamPlayerGroup;
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamChaos;
    }
    lv_campLocation = libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampCaptainSpawnPoint;
    lv_nearCamp = RegionCircle(lv_campLocation, lp_searchRadius);
    lv_enemies = UnitGroupAlliance(lv_allyComputerPlayer, c_unitAllianceEnemy, lv_nearCamp, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
    lv_enemyHeroes = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
    if ((lp_visionCheat == false)) {
        auto0222D975_g = lv_enemyHeroes;
        auto0222D975_u = 1;
        for ( ; auto0222D975_u <= UnitGroupCount(auto0222D975_g, c_unitCountAll) ; auto0222D975_u += (lv_unit == UnitGroupUnit(auto0222D975_g, auto0222D975_u)) ) {
            lv_unit = UnitGroupUnit(auto0222D975_g, auto0222D975_u);
            if ((libNtve_gf_UnitIsVisibleToPlayer(lv_unit, PlayerGroupPlayer(lv_allyTeam, 1)) == false)) {
                UnitGroupRemove(lv_enemyHeroes, lv_unit);
            }

        }
    }

    if ((UnitGroupCount(lv_enemyHeroes, c_unitCountAlive) > 0)) {
        return true;
    }

    return false;
}

int libAIAI_gf_HeroAIEnemyHeroesNearCamp (int lp_faction, int lp_campIndex, fixed lp_searchRadius, bool lp_visionCheat) {
    unitgroup auto3BE2D896_g;
    int auto3BE2D896_u;

    // Variable Declarations
    int lv_allyComputerPlayer;
    point lv_campLocation;
    region lv_nearCamp;
    unitgroup lv_heroes;
    unit lv_unit;

    // Variable Initialization
    lv_heroes = UnitGroupEmpty();

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamChaos;
    }
    lv_campLocation = libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampCaptainSpawnPoint;
    lv_nearCamp = RegionCircle(lv_campLocation, lp_searchRadius);
    lv_heroes = UnitGroupAlliance(lv_allyComputerPlayer, c_unitAllianceEnemy, lv_nearCamp, libCore_gv_filtersHeroicandnotInvulnerable, 0);
    if ((lp_visionCheat == false)) {
        auto3BE2D896_g = lv_heroes;
        auto3BE2D896_u = 1;
        for ( ; auto3BE2D896_u <= UnitGroupCount(auto3BE2D896_g, c_unitCountAll) ; auto3BE2D896_u += (lv_unit == UnitGroupUnit(auto3BE2D896_g, auto3BE2D896_u)) ) {
            lv_unit = UnitGroupUnit(auto3BE2D896_g, auto3BE2D896_u);
            if ((libNtve_gf_UnitIsVisibleToPlayer(lv_unit, lv_allyComputerPlayer) == false)) {
                UnitGroupRemove(lv_heroes, lv_unit);
            }

        }
    }

    return UnitGroupCount(lv_heroes, c_unitCountAlive);
}

int libAIAI_gf_HeroAIAllyHeroesNearCamp (int lp_faction, int lp_campIndex, fixed lp_searchRadius) {
    // Variable Declarations
    int lv_allyComputerPlayer;
    point lv_campLocation;
    region lv_nearCamp;
    unitgroup lv_heroes;
    unit lv_unit;

    // Variable Initialization
    lv_heroes = UnitGroupEmpty();

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamChaos;
    }
    lv_campLocation = libMapM_gv_jungleCreepCamps[lp_campIndex].lv_mapDataCampCaptainSpawnPoint;
    lv_nearCamp = RegionCircle(lv_campLocation, lp_searchRadius);
    lv_heroes = UnitGroupAlliance(lv_allyComputerPlayer, c_unitAllianceAlly, lv_nearCamp, libCore_gv_filtersHeroicandnotInvulnerable, 0);
    return UnitGroupCount(lv_heroes, c_unitCountAlive);
}

bool libAIAI_gf_HeroAIAllRecruitedAIHaveArrivedAtCamp (int lp_faction, int lp_campIndex) {
    int auto5851C891_ae;
    int auto5851C891_ai;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    auto5851C891_ae = libCore_gv_bALMaxPlayers;
    auto5851C891_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (auto5851C891_ai >= 0 && lv_playerIndex <= auto5851C891_ae) || (auto5851C891_ai <= 0 && lv_playerIndex >= auto5851C891_ae) ) ; lv_playerIndex += auto5851C891_ai ) {
        if ((libGame_gv_players[lv_playerIndex].lv_faction == lp_faction) && (libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 2) == true) && (libAIAI_gf_HeroAIGetCurrentObjective(lp_campIndex) == libAIAI_ge_HeroAIObjective_TakeCamp) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_curMinionCamp == lp_campIndex) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_arrivedAtCampTime <= 0.0)) {
            return false;
        }

    }
    return true;
}

bool libAIAI_gf_HeroAINoOtherAllyAITakingCamp (int lp_trigPlayer, int lp_campIndex) {
    int autoEA81E634_ae;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    autoEA81E634_ae = libCore_gv_bALMaxPlayers;
    lv_playerIndex = 1;
    for ( ; lv_playerIndex <= autoEA81E634_ae ; lv_playerIndex += 1 ) {
        if ((lv_playerIndex != lp_trigPlayer) && (libGame_gv_players[lv_playerIndex].lv_faction == libGame_gv_players[lp_trigPlayer].lv_faction) && (libAIAI_gf_HeroAIIsPlayerActive(lp_trigPlayer, 2) == true) && (libAIAI_gf_HeroAIGetCurrentObjective(lv_playerIndex) == libAIAI_ge_HeroAIObjective_TakeCamp) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_curMinionCamp == lp_campIndex)) {
            return false;
        }

    }
    return true;
}

void libAIAI_gf_HeroAIDefendCoreLogic (int lp_faction) {
    int auto371D23FC_ae;
    int auto371D23FC_ai;
    unitgroup auto8DC1FC95_g;
    int auto8DC1FC95_u;
    unitgroup autoBC3FB77B_g;
    int autoBC3FB77B_u;
    unitgroup autoB8F8A992_g;
    int autoB8F8A992_u;
    playergroup auto0E7346AA_g;
    int auto0E7346AA_p;

    // Variable Declarations
    unit lv_core;
    point lv_corePosition;
    int lv_teamIndex;
    int lv_playerIndex;
    unitgroup lv_enemiesAttackingCore;
    unitgroup lv_alliesDefendingCore;
    unitgroup lv_availableAlliesNearCore;
    unitgroup lv_availableAlliesFarFromCore;
    playergroup lv_busyAllies;
    int lv_heroesWantedToDefend;
    int lv_additionalHeroesWantedToDefend;
    unitgroup lv_heroesToRecruit;
    unit lv_hero;
    int lv_ownerPlayer;

    // Variable Initialization
    lv_enemiesAttackingCore = UnitGroupEmpty();
    lv_alliesDefendingCore = UnitGroupEmpty();
    lv_availableAlliesNearCore = UnitGroupEmpty();
    lv_availableAlliesFarFromCore = UnitGroupEmpty();
    lv_busyAllies = PlayerGroupEmpty();
    lv_heroesToRecruit = UnitGroupEmpty();

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_core = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core;
        lv_teamIndex = (0);
    }
    else {
        lv_core = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core;
        lv_teamIndex = (1);
    }
    lv_corePosition = UnitGetPosition(lv_core);
    libAIAI_gv_heroAITeamData[lv_teamIndex].lv_additionalCoreDefendersNeeded = 0;
    if ((libAIAI_gf_HeroAIEnemiesNearCore(lp_faction) == false)) {
        return ;
    }

    auto371D23FC_ae = libCore_gv_bALMaxPlayers;
    auto371D23FC_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (auto371D23FC_ai >= 0 && lv_playerIndex <= auto371D23FC_ae) || (auto371D23FC_ai <= 0 && lv_playerIndex >= auto371D23FC_ae) ) ; lv_playerIndex += auto371D23FC_ai ) {
        if ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 0) == true)) {
            if ((libGame_gv_players[lv_playerIndex].lv_faction == lp_faction)) {
                if ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 1) == true)) {
                    if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit), lv_corePosition) <= libAIAI_gv_aIHeroDefendFarFromCoreDistance)) {
                        UnitGroupAdd(lv_alliesDefendingCore, libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit);
                    }

                }
                else {
                    if ((libAIAI_gf_HeroAIGetCurrentObjective(lv_playerIndex) == libAIAI_ge_HeroAIObjective_DefendCore)) {
                        UnitGroupAdd(lv_alliesDefendingCore, libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit);
                    }
                    else {
                        if ((libAIAI_gf_HeroAIIsHigherPriority(lv_playerIndex, libAIAI_ge_HeroAIPriority_DefendCoreAnyState) == true) && (OrderGetAbilityCommand(UnitOrder(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, 0)) != AbilityCommand("PortBackToBase", 0))) {
                            if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit), lv_corePosition) <= libAIAI_gv_aIHeroDefendFarFromCoreDistance)) {
                                UnitGroupAdd(lv_availableAlliesNearCore, libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit);
                            }
                            else {
                                UnitGroupAdd(lv_availableAlliesFarFromCore, libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit);
                            }
                        }
                        else {
                            PlayerGroupAdd(lv_busyAllies, lv_playerIndex);
                        }
                    }
                }
            }
            else {
                if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit), lv_corePosition) <= libAIAI_gv_aIHeroDefendFarFromCoreDistance)) {
                    UnitGroupAdd(lv_enemiesAttackingCore, libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit);
                }

            }
        }

    }
    lv_heroesWantedToDefend = MaxI(2, (UnitGroupCount(lv_enemiesAttackingCore, c_unitCountAlive) + 1));
    if ((UnitGetPropertyFixed(lv_core, c_unitPropShieldsPercent, c_unitPropCurrent) < libAIAI_gv_aIHeroLowEnergyPercent)) {
        lv_heroesWantedToDefend += 1;
    }

    if ((UnitGetPropertyFixed(lv_core, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroHighHealthPercent)) {
        lv_heroesWantedToDefend += 2;
    }

    if ((lv_heroesWantedToDefend > libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_difficulty)])) {
        lv_heroesWantedToDefend = libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_difficulty)];
    }

    if ((libAIAI_gv_heroAITeamDefendCorePingData[lv_teamIndex].lv_pingExpireTime > TimerGetElapsed(libGame_gv_gameTimer))) {
        lv_heroesWantedToDefend += 2;
    }

    lv_additionalHeroesWantedToDefend = MaxI(0, (lv_heroesWantedToDefend - UnitGroupCount(lv_alliesDefendingCore, c_unitCountAlive)));
    auto8DC1FC95_g = lv_availableAlliesNearCore;
    auto8DC1FC95_u = 1;
    for ( ; auto8DC1FC95_u <= UnitGroupCount(auto8DC1FC95_g, c_unitCountAll) ; auto8DC1FC95_u += (lv_hero == UnitGroupUnit(auto8DC1FC95_g, auto8DC1FC95_u)) ) {
        lv_hero = UnitGroupUnit(auto8DC1FC95_g, auto8DC1FC95_u);
        UnitGroupAdd(lv_heroesToRecruit, lv_hero);
        lv_additionalHeroesWantedToDefend = MaxI(0, (lv_additionalHeroesWantedToDefend - 1));
    }
    if ((lv_additionalHeroesWantedToDefend > 0)) {
        autoBC3FB77B_g = lv_availableAlliesFarFromCore;
        autoBC3FB77B_u = 1;
        for ( ; autoBC3FB77B_u <= UnitGroupCount(autoBC3FB77B_g, c_unitCountAll) ; autoBC3FB77B_u += (lv_hero == UnitGroupUnit(autoBC3FB77B_g, autoBC3FB77B_u)) ) {
            lv_hero = UnitGroupUnit(autoBC3FB77B_g, autoBC3FB77B_u);
            UnitGroupAdd(lv_heroesToRecruit, lv_hero);
            lv_additionalHeroesWantedToDefend -= 1;
            if ((lv_additionalHeroesWantedToDefend == 0)) {
                break;
            }

        }
    }

    autoB8F8A992_g = lv_heroesToRecruit;
    autoB8F8A992_u = 1;
    for ( ; autoB8F8A992_u <= UnitGroupCount(autoB8F8A992_g, c_unitCountAll) ; autoB8F8A992_u += (lv_hero == UnitGroupUnit(autoB8F8A992_g, autoB8F8A992_u)) ) {
        lv_hero = UnitGroupUnit(autoB8F8A992_g, autoB8F8A992_u);
        if ((UnitGroupCount(lv_alliesDefendingCore, c_unitCountAlive) >= libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_difficulty)])) {
            break;
        }

        UnitGroupRemove(lv_heroesToRecruit, lv_hero);
        UnitGroupAdd(lv_alliesDefendingCore, lv_hero);
        lv_ownerPlayer = UnitGetOwner(lv_hero);
        libAIAI_gf_HeroAILeaveCurrentObjective(lv_ownerPlayer);
        libAIAI_gv_aIHeroes[lv_ownerPlayer].lv_wantsToDefendCore = true;
        if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lv_ownerPlayer].lv_currentHeroUnit), lv_corePosition) <= libAIAI_gv_aIHeroDefendFarFromCoreDistance) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lv_ownerPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lv_ownerPlayer].lv_startOffensiveHealth)) {
            libAIAI_gf_HeroAIChangeState(lv_ownerPlayer, libAIAI_ge_HeroAIStates_HSDefendCoreAttack);
            libAIAI_gv_aIHeroes[lv_ownerPlayer].lv_currentLane = 0;
        }
        else {
            libAIAI_gv_aIHeroes[lv_ownerPlayer].lv_wantsToGoHome = true;
        }
    }
    if ((lv_additionalHeroesWantedToDefend > 0)) {
        auto0E7346AA_g = lv_busyAllies; 
        auto0E7346AA_p = 1;
        for ( ; auto0E7346AA_p <= PlayerGroupCount(auto0E7346AA_g) ; auto0E7346AA_p += (lv_playerIndex == PlayerGroupPlayer(auto0E7346AA_g, auto0E7346AA_p)) ) {
            lv_playerIndex = PlayerGroupPlayer(auto0E7346AA_g, auto0E7346AA_p);
            if ((libAIAI_gv_aIHeroes[lv_playerIndex].lv_wantsToGoHome == true)) {
                lv_additionalHeroesWantedToDefend -= 1;
                if ((lv_additionalHeroesWantedToDefend == 0)) {
                    break;
                }

            }

        }
    }

    libAIAI_gv_heroAITeamData[lv_teamIndex].lv_additionalCoreDefendersNeeded = lv_additionalHeroesWantedToDefend;
}

void libAIAI_gf_HeroAIReturnToDefendCoreLogic (int lp_faction) {
    playergroup autoD9C4D370_g;
    int autoD9C4D370_p;

    // Variable Declarations
    int lv_playerIndex;
    point lv_corePosition;

    // Variable Initialization

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_corePosition = UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core);
    }
    else {
        lv_corePosition = UnitGetPosition(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core);
    }
    autoD9C4D370_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAITeamIndexOfFaction(lp_faction)].lv_aIPlayers; 
    autoD9C4D370_p = 1;
    for ( ; autoD9C4D370_p <= PlayerGroupCount(autoD9C4D370_g) ; autoD9C4D370_p += (lv_playerIndex == PlayerGroupPlayer(autoD9C4D370_g, autoD9C4D370_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoD9C4D370_g, autoD9C4D370_p);
        if ((libAIAI_gf_HeroAIGetCurrentObjective(lv_playerIndex) == libAIAI_ge_HeroAIObjective_DefendCore) && (libAIAI_gf_HeroAIGetCurrentPriority(lv_playerIndex) == libAIAI_ge_HeroAIPriority_DefendCoreAnyState) && (libAIAI_gf_HeroAIInDefendCoreState(lv_playerIndex) == false) && (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit), lv_corePosition) <= libAIAI_gv_aIHeroDefendFarFromCoreDistance) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > (libAIAI_gv_aIHeroes[lv_playerIndex].lv_startOffensiveHealth + 10.0))) {
            libAIAI_gv_aIHeroes[lv_playerIndex].lv_wantsToGoHome = false;
            libAIAI_gf_HeroAIChangeState(lv_playerIndex, libAIAI_ge_HeroAIStates_HSDefendCoreAttack);
        }

    }
}

unit libAIAI_gf_HeroAIDefendCoreChooseTarget (int lp_trigPlayer, fixed lp_distance) {
    unitgroup auto6B847566_g;
    int auto6B847566_u;
    unitgroup auto4528409C_g;
    int auto4528409C_u;
    unitgroup autoDDF6427F_g;
    int autoDDF6427F_u;
    unitgroup auto1ED28190_g;
    int auto1ED28190_u;

    // Variable Declarations
    point lv_heroPosition;
    point lv_corePosition;
    region lv_nearbyRegion;
    unitgroup lv_enemies;
    unitgroup lv_enemyHeroes;
    unitgroup lv_enemyMinions;
    unitgroup lv_enemySummons;
    unit lv_hero;
    fixed lv_targetEval;
    unit lv_target;
    fixed lv_distance;
    unit lv_bestTarget;
    fixed lv_bestTargetDistance;
    order lv_currentOrder;
    unit lv_currentTarget;
    fixed lv_currentTargetDistance;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_enemyHeroes = UnitGroupEmpty();
    lv_enemyMinions = UnitGroupEmpty();
    lv_enemySummons = UnitGroupEmpty();
    lv_bestTargetDistance = 524287.0;

    // Implementation
    lv_heroPosition = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    if ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order)) {
        lv_corePosition = UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core);
    }
    else {
        lv_corePosition = UnitGetPosition(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core);
    }
    lv_nearbyRegion = RegionCircle(lv_corePosition, lp_distance);
    lv_enemies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, lv_nearbyRegion, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
    lv_enemyHeroes = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
    lv_enemyMinions = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterBiological), 0, 0, 0), 0);
    lv_enemySummons = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0), 0);
    auto6B847566_g = lv_enemyHeroes;
    auto6B847566_u = 1;
    for ( ; auto6B847566_u <= UnitGroupCount(auto6B847566_g, c_unitCountAll) ; auto6B847566_u += (lv_hero == UnitGroupUnit(auto6B847566_g, auto6B847566_u)) ) {
        lv_hero = UnitGroupUnit(auto6B847566_g, auto6B847566_u);
        if ((libNtve_gf_UnitIsVisibleToPlayer(lv_hero, lp_trigPlayer) == false)) {
            UnitGroupRemove(lv_enemyHeroes, lv_hero);
        }

    }
    auto4528409C_g = lv_enemyMinions;
    auto4528409C_u = 1;
    for ( ; auto4528409C_u <= UnitGroupCount(auto4528409C_g, c_unitCountAll) ; auto4528409C_u += (lv_target == UnitGroupUnit(auto4528409C_g, auto4528409C_u)) ) {
        lv_target = UnitGroupUnit(auto4528409C_g, auto4528409C_u);
        lv_distance = DistanceBetweenPoints(UnitGetPosition(lv_target), lv_heroPosition);
        if ((lv_distance < lv_bestTargetDistance)) {
            lv_bestTarget = lv_target;
            lv_bestTargetDistance = lv_distance;
        }

    }
    autoDDF6427F_g = lv_enemySummons;
    autoDDF6427F_u = 1;
    for ( ; autoDDF6427F_u <= UnitGroupCount(autoDDF6427F_g, c_unitCountAll) ; autoDDF6427F_u += (lv_target == UnitGroupUnit(autoDDF6427F_g, autoDDF6427F_u)) ) {
        lv_target = UnitGroupUnit(autoDDF6427F_g, autoDDF6427F_u);
        lv_distance = DistanceBetweenPoints(UnitGetPosition(lv_target), lv_heroPosition);
        if ((lv_distance < lv_bestTargetDistance)) {
            lv_bestTarget = lv_target;
            lv_bestTargetDistance = lv_distance;
        }

    }
    auto1ED28190_g = lv_enemyHeroes;
    auto1ED28190_u = 1;
    for ( ; auto1ED28190_u <= UnitGroupCount(auto1ED28190_g, c_unitCountAll) ; auto1ED28190_u += (lv_target == UnitGroupUnit(auto1ED28190_g, auto1ED28190_u)) ) {
        lv_target = UnitGroupUnit(auto1ED28190_g, auto1ED28190_u);
        lv_distance = DistanceBetweenPoints(UnitGetPosition(lv_target), lv_heroPosition);
        if ((libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true)) {
            lv_distance += 7.0;
        }

        if ((lv_distance < lv_bestTargetDistance)) {
            lv_bestTarget = lv_target;
            lv_bestTargetDistance = lv_distance;
        }

    }
    lv_currentOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    lv_currentTarget = OrderGetTargetUnit(lv_currentOrder);
    if ((lv_currentOrder != null) && (OrderGetAbilityCommand(lv_currentOrder) == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility) && (UnitIsValid(lv_currentTarget) == true)) {
        lv_currentTargetDistance = DistanceBetweenPoints(UnitGetPosition(lv_currentTarget), lv_corePosition);
        if ((lv_currentTargetDistance < (lv_bestTargetDistance + 3.0))) {
            lv_bestTarget = lv_currentTarget;
        }

    }

    if ((UnitIsValid(lv_bestTarget) == true) && (lv_bestTarget != lv_currentTarget)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_timeTargetAcquired = TimerGetElapsed(libGame_gv_gameTimer);
    }

    return lv_bestTarget;
}

bool libAIAI_gf_HeroAIInDefendCoreState (int lp_trigPlayer) {
    // Implementation
    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSDefendCoreAttack) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSDefendCoreLeash))) {
        return true;
    }
    else {
        return false;
    }
}

void libAIAI_gf_HeroAILeashFollowers (int lp_faction) {
    playergroup auto8285F7D0_g;
    int auto8285F7D0_p;

    // Variable Declarations
    int lv_playerIndex;
    point lv_heroPosition;
    point lv_leaderPosition;

    // Variable Initialization

    // Implementation
    auto8285F7D0_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAITeamIndexOfFaction(lp_faction)].lv_aIPlayers; 
    auto8285F7D0_p = 1;
    for ( ; auto8285F7D0_p <= PlayerGroupCount(auto8285F7D0_g) ; auto8285F7D0_p += (lv_playerIndex == PlayerGroupPlayer(auto8285F7D0_g, auto8285F7D0_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto8285F7D0_g, auto8285F7D0_p);
        if ((libAIAI_gf_HeroAIShouldStopFollowingLeader(lv_playerIndex) == true)) {
            if ((libAIAI_gv_aIHeroes[lv_playerIndex].lv_pingFollowPlayer > 0)) {
                libAIAI_gf_HeroAIStopFollowingLeader(lv_playerIndex);
            }

        }
        else {
            if ((((UnitIsValid(libGame_gv_players[lv_playerIndex].lv_activeVehicle) == true) && (libAIAI_gf_HeroAIIsInFollowerState(lv_playerIndex) == false)) || ((libAIAI_gv_aIHeroes[lv_playerIndex].lv_wantsToGoHome == false) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lv_playerIndex].lv_returnToSpawnHealth) && (libAIAI_gf_HeroAIIsHigherPriority(lv_playerIndex, libAIAI_ge_HeroAIPriority_FollowHeroFollowState) == true))) && (libAIAI_gf_HeroAIMapSpecificTryingToJoinPlayer(lv_playerIndex) == false)) {
                lv_heroPosition = UnitGetPosition(libAIAI_gf_HeroAIGetHeroOrVehicle(lv_playerIndex));
                lv_leaderPosition = UnitGetPosition(libAIAI_gf_HeroAIGetUnitToFollow(lv_playerIndex));
                if ((DistanceBetweenPoints(lv_heroPosition, lv_leaderPosition) > libAIAI_gv_aIHeroFollowerLeashDistance)) {
                    libAIAI_gf_HeroAILeaveCurrentObjective(lv_playerIndex);
                    libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentLane = 0;
                    libAIAI_gf_HeroAIChangeState(lv_playerIndex, libAIAI_ge_HeroAIStates_HSFollowerGuardLeaderLeash);
                }

            }

        }
    }
}

bool libAIAI_gf_HeroAIShouldStopFollowingLeader (int lp_trigPlayer) {
    // Variable Declarations
    point lv_leaderPosition;

    // Variable Initialization

    // Implementation
    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_pingFollowPlayer <= 0) || (PlayerIsUnderAIControl(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_pingFollowPlayer) == true) || (libGame_gv_players[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_pingFollowPlayer].lv_isDead == true))) {
        return true;
    }
    else {
        return false;
    }
}

void libAIAI_gf_HeroAIStartFollowingLeader (int lp_trigPlayer, int lp_leaderPlayer) {
    // Variable Declarations
    text lv_followerName;
    text lv_leaderName;
    text lv_message;

    // Variable Initialization

    // Implementation
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_pingFollowPlayer = lp_leaderPlayer;
    lv_followerName = UnitTypeGetName(UnitGetType(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit));
    lv_leaderName = UnitTypeGetName(UnitGetType(libAIAI_gv_aIHeroes[lp_leaderPlayer].lv_currentHeroUnit));
    TextExpressionSetToken("Param/Expression/lib_AIAI_8F588C94", "A", lv_followerName);
    TextExpressionSetToken("Param/Expression/lib_AIAI_8F588C94", "A", lv_followerName);
    TextExpressionSetToken("Param/Expression/lib_AIAI_8F588C94", "B", lv_leaderName);
    lv_message = TextExpressionAssemble("Param/Expression/lib_AIAI_8F588C94");
    UIDisplayMessage(libGame_gf_AlliedPlayerGroupOfPlayer(lp_leaderPlayer), c_messageAreaChat, lv_message);
}

void libAIAI_gf_HeroAIStopFollowingLeader (int lp_trigPlayer) {
    // Variable Declarations
    int lv_leaderPlayer;
    text lv_followerName;
    text lv_leaderName;
    text lv_message;

    // Variable Initialization

    // Implementation
    lv_leaderPlayer = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_pingFollowPlayer;
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_pingFollowPlayer = 0;
    lv_followerName = UnitTypeGetName(UnitGetType(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit));
    lv_leaderName = UnitTypeGetName(UnitGetType(libAIAI_gv_aIHeroes[lv_leaderPlayer].lv_currentHeroUnit));
    TextExpressionSetToken("Param/Expression/lib_AIAI_3B9B1518", "A", lv_followerName);
    TextExpressionSetToken("Param/Expression/lib_AIAI_3B9B1518", "A", lv_followerName);
    TextExpressionSetToken("Param/Expression/lib_AIAI_3B9B1518", "B", lv_leaderName);
    lv_message = TextExpressionAssemble("Param/Expression/lib_AIAI_3B9B1518");
    UIDisplayMessage(libGame_gf_AlliedPlayerGroupOfPlayer(lv_leaderPlayer), c_messageAreaChat, lv_message);
}

bool libAIAI_gf_HeroAIMapSpecificTryingToJoinPlayer (int lp_trigPlayer) {
    // Implementation
    if ((libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gf_HeroAIGetUnitToFollow(lp_trigPlayer)) == true) && (libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) == false)) {
        return libAIAI_gf_HeroAIIsEnteringUnderworld(lp_trigPlayer);
    }

    if ((libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gf_HeroAIGetUnitToFollow(lp_trigPlayer)) == false) && (libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) == true)) {
        return libAIAI_gf_HeroAIIsExitingUnderworld(lp_trigPlayer);
    }

    return false;
}

int libAIAI_gf_HeroAIGetPlayerToFollow (int lp_trigPlayer) {
    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_tutorialForceFollowPlayer != 0)) {
        return libAIAI_gv_aIHeroes[lp_trigPlayer].lv_tutorialForceFollowPlayer;
    }

    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_pingFollowPlayer != 0)) {
        return libAIAI_gv_aIHeroes[lp_trigPlayer].lv_pingFollowPlayer;
    }

    return 0;
}

unit libAIAI_gf_HeroAIGetUnitToFollow (int lp_trigPlayer) {
    // Variable Declarations
    int lv_followPlayer;

    // Variable Initialization

    // Implementation
    lv_followPlayer = libAIAI_gf_HeroAIGetPlayerToFollow(lp_trigPlayer);
    if ((lv_followPlayer == 0)) {
        return null;
    }

    return libAIAI_gf_HeroAIGetHeroOrVehicle(lv_followPlayer);
}

bool libAIAI_gf_HeroAIFollowingMountedPlayer (int lp_trigPlayer) {
    // Variable Declarations
    int lv_followPlayer;

    // Variable Initialization

    // Implementation
    lv_followPlayer = libAIAI_gf_HeroAIGetPlayerToFollow(lp_trigPlayer);
    if ((lv_followPlayer == 0)) {
        return false;
    }

    return libAIAI_gf_HeroAIIsMountedorMounting(lv_followPlayer);
}

bool libAIAI_gf_HeroAIAssistFollowLeader (int lp_trigPlayer) {
    // Variable Declarations
    unit lv_selfHeroUnit;
    int lv_followPlayer;
    unit lv_leaderUnit;
    order lv_leaderOrder;
    unit lv_leaderTarget;
    unitgroup lv_nearbyEnemyStructures;

    // Variable Initialization
    lv_nearbyEnemyStructures = UnitGroupEmpty();

    // Implementation
    lv_followPlayer = libAIAI_gf_HeroAIGetPlayerToFollow(lp_trigPlayer);
    if ((lv_followPlayer == 0)) {
        return false;
    }

    lv_selfHeroUnit = libAIAI_gf_HeroAIGetHeroOrVehicle(lp_trigPlayer);
    lv_leaderUnit = libAIAI_gf_HeroAIGetHeroOrVehicle(lv_followPlayer);
    lv_leaderOrder = UnitOrder(lv_leaderUnit, 0);
    lv_leaderTarget = OrderGetTargetUnit(lv_leaderOrder);
    if ((UnitIsValid(libGame_gv_players[lp_trigPlayer].lv_activeVehicle) == true) && (libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true)) {
        if ((lv_leaderOrder != null) && (UnitIsValid(lv_leaderTarget) == true) && (libNtve_gf_PlayerIsEnemy(lp_trigPlayer, UnitGetOwner(lv_leaderTarget), libNtve_ge_PlayerRelation_Enemy) == true) && (UnitTypeTestAttribute(UnitGetType(lv_leaderTarget), c_unitAttributeStructure) == true)) {
            HeroAIUnitIssueOrder(lv_selfHeroUnit, OrderTargetingUnit(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility, lv_leaderTarget), c_orderQueueReplace);
            return true;
        }
        else {
            lv_nearbyEnemyStructures = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_leaderUnit), (libAIAI_gv_aIHeroFollowerLeashDistance + 4.0)), UnitFilter((1 << c_targetFilterStructure), 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
            if ((UnitGroupCount(lv_nearbyEnemyStructures, c_unitCountAlive) > 0)) {
                HeroAIUnitIssueOrder(lv_selfHeroUnit, OrderTargetingUnit(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility, UnitGroupClosestToPoint(lv_nearbyEnemyStructures, UnitGetPosition(lv_selfHeroUnit))), c_orderQueueReplace);
                return true;
            }

            if ((lv_leaderOrder != null) && (UnitIsValid(OrderGetTargetUnit(lv_leaderOrder)) == true) && (libNtve_gf_PlayerIsEnemy(lp_trigPlayer, UnitGetOwner(lv_leaderTarget), libNtve_ge_PlayerRelation_Enemy) == true)) {
                HeroAIUnitIssueOrder(lv_selfHeroUnit, OrderTargetingPoint(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility, UnitGetPosition(lv_leaderTarget)), c_orderQueueReplace);
                return true;
            }

        }
    }
    else {
        if ((lv_leaderOrder != null) && (UnitIsValid(lv_leaderTarget) == true) && (UnitTypeTestAttribute(UnitGetType(lv_leaderTarget), c_unitAttributeBiological) == false) && (libNtve_gf_PlayerIsEnemy(lp_trigPlayer, UnitGetOwner(lv_leaderTarget), libNtve_ge_PlayerRelation_Enemy) == true) && (libAIAI_gf_HeroAIIsTargetBehindGateRelativeToAttacker(lv_leaderTarget, lv_selfHeroUnit) == false)) {
            if ((libAIAI_gf_HeroAIRandomlyCastAbilityOnTarget(lp_trigPlayer, lv_leaderTarget) == true)) {
                return true;
            }

            HeroAIUnitIssueOrder(lv_selfHeroUnit, OrderTargetingUnit(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility, lv_leaderTarget), c_orderQueueReplace);
            return true;
        }

    }
    return false;
}

void libAIAI_gf_HeroAITearOfElunePinged (int lp_pingingPlayer) {
    playergroup autoC09D208E_g;
    int autoC09D208E_p;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeState != libAIAI_ge_HeroAIRavenLordTributeState_Warning) && (libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeState != libAIAI_ge_HeroAIRavenLordTributeState_Spawned)) {
        return ;
    }

    autoC09D208E_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_pingingPlayer)].lv_aIPlayers; 
    autoC09D208E_p = 1;
    for ( ; autoC09D208E_p <= PlayerGroupCount(autoC09D208E_g) ; autoC09D208E_p += (lv_playerIndex == PlayerGroupPlayer(autoC09D208E_g, autoC09D208E_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoC09D208E_g, autoC09D208E_p);
        if ((libAIAI_gf_HeroAIShouldCaptureTearOfElune(lv_playerIndex, true) == true)) {
            libAIAI_gf_HeroAILeaveCurrentObjective(lv_playerIndex);
            libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentLane = 0;
            libAIAI_gv_aIHeroes[lv_playerIndex].lv_wantsToCaptureTearOfElune = true;
            libAIAI_gf_HeroAIChangeState(lv_playerIndex, libAIAI_ge_HeroAIStates_HSTearOfEluneMoveToTear);
        }

    }
}

void libAIAI_gf_HeroAICaptureTearOfEluneLogic (int lp_faction) {
    playergroup autoBDB35C42_g;
    int autoBDB35C42_p;

    // Variable Declarations
    int lv_teamIndex;
    unit lv_tear;
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextTearOfEluneConsiderTime > TimerGetElapsed(libGame_gv_gameTimer))) {
        return ;
    }
    else {
        libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextTearOfEluneConsiderTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroTearOfEluneConsiderFrequency);
    }
    if (((libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeState == libAIAI_ge_HeroAIRavenLordTributeState_Warning) || (libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeState == libAIAI_ge_HeroAIRavenLordTributeState_Spawned))) {
        autoBDB35C42_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAITeamIndexOfFaction(lp_faction)].lv_aIPlayers; 
        autoBDB35C42_p = 1;
        for ( ; autoBDB35C42_p <= PlayerGroupCount(autoBDB35C42_g) ; autoBDB35C42_p += (lv_playerIndex == PlayerGroupPlayer(autoBDB35C42_g, autoBDB35C42_p)) ) {
            lv_playerIndex = PlayerGroupPlayer(autoBDB35C42_g, autoBDB35C42_p);
            if ((libAIAI_gf_HeroAIShouldCaptureTearOfElune(lv_playerIndex, false) == true)) {
                libAIAI_gf_HeroAILeaveCurrentObjective(lv_playerIndex);
                libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentLane = 0;
                libAIAI_gv_aIHeroes[lv_playerIndex].lv_wantsToCaptureTearOfElune = true;
                libAIAI_gf_HeroAIChangeState(lv_playerIndex, libAIAI_ge_HeroAIStates_HSTearOfEluneMoveToTear);
            }

        }
    }

}

bool libAIAI_gf_HeroAIShouldCaptureTearOfElune (int lp_trigPlayer, bool lp_playerPigned) {
    // Variable Declarations
    unitgroup lv_enemies;
    unitgroup lv_enemyHeroes;
    unitgroup lv_allies;
    unitgroup lv_allyHeroes;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_enemyHeroes = UnitGroupEmpty();
    lv_allies = UnitGroupEmpty();
    lv_allyHeroes = UnitGroupEmpty();

    // Implementation
    if ((libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeState == libAIAI_ge_HeroAIRavenLordTributeState_None)) {
        return false;
    }

    if (((libAIAI_gf_HeroAIIsHigherPriority(lp_trigPlayer, libAIAI_ge_HeroAIPriority_CaptureTearOfEluneHeadingToTribute) == false) || (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_startOffensiveHealth) || (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeWarningPosition) > libAIAI_gv_aIHeroTearOfEluneRecruitDistance) || ((libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 2.0) == true) && (UnitTypeTestAttribute(UnitGetType(libAIAI_gv_heroAIDamageTracking[lp_trigPlayer].lv_lastAttacker), c_unitAttributeHeroic) == true)))) {
        return false;
    }

    if ((lp_playerPigned == false) && (libAIAI_gf_HeroAINumberOfAIAlliesCapturingTear(lp_trigPlayer) >= libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)])) {
        return false;
    }

    lv_enemies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, RegionCircle(libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeWarningPosition, libAIAI_gv_aIHeroFarFromTearOfEluneDistance), UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
    lv_enemyHeroes = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
    lv_allies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceAlly, RegionCircle(libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeWarningPosition, libAIAI_gv_aIHeroFarFromTearOfEluneDistance), UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
    lv_allyHeroes = UnitGroupFilter(null, c_playerAny, lv_allies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
    if ((UnitGroupCount(lv_enemyHeroes, c_unitCountAlive) >= (UnitGroupCount(lv_allyHeroes, c_unitCountAlive) + 2))) {
        return false;
    }

    return true;
}

bool libAIAI_gf_HeroAIShouldGiveUpOnTearOfElune (int lp_trigPlayer) {
    // Variable Declarations
    unitgroup lv_enemies;
    unitgroup lv_enemyHeroes;
    unitgroup lv_allies;
    unitgroup lv_allyHeroes;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_enemyHeroes = UnitGroupEmpty();
    lv_allies = UnitGroupEmpty();
    lv_allyHeroes = UnitGroupEmpty();

    // Implementation
    if ((libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeState == libAIAI_ge_HeroAIRavenLordTributeState_None)) {
        return true;
    }

    lv_enemies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, RegionCircle(libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeWarningPosition, libAIAI_gv_aIHeroFarFromTearOfEluneDistance), UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
    lv_enemyHeroes = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
    lv_allies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceAlly, RegionCircle(libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeWarningPosition, (libAIAI_gv_aIHeroFarFromTearOfEluneDistance * 2.0)), UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
    lv_allyHeroes = UnitGroupFilter(null, c_playerAny, lv_allies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
    if ((UnitGroupCount(lv_enemyHeroes, c_unitCountAlive) >= (UnitGroupCount(lv_allyHeroes, c_unitCountAlive) + 2))) {
        return true;
    }

    return false;
}

bool libAIAI_gf_HeroAIShouldDefendTearOfElune (int lp_trigPlayer) {
    unitgroup auto02C2D730_g;
    int auto02C2D730_u;

    // Variable Declarations
    region lv_areaAroundTear;
    unitgroup lv_enemies;
    unitgroup lv_enemyHeroes;
    unitgroup lv_enemySummons;
    unitgroup lv_allies;
    unitgroup lv_allyHeroes;
    unit lv_hero;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_enemyHeroes = UnitGroupEmpty();
    lv_enemySummons = UnitGroupEmpty();
    lv_allies = UnitGroupEmpty();
    lv_allyHeroes = UnitGroupEmpty();

    // Implementation
    if ((libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeState == libAIAI_ge_HeroAIRavenLordTributeState_None)) {
        return false;
    }

    lv_allies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceAlly, RegionCircle(libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeWarningPosition, libAIAI_gv_aIHeroFarFromTearOfEluneDistance), UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
    lv_allyHeroes = UnitGroupFilter(null, c_playerAny, lv_allies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
    lv_areaAroundTear = RegionCircle(libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeWarningPosition, libAIAI_gv_aIHeroCloseToTearOfEluneDistance);
    lv_enemies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, lv_areaAroundTear, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32))), 0);
    lv_enemyHeroes = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
    lv_enemySummons = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0), 0);
    auto02C2D730_g = lv_enemyHeroes;
    auto02C2D730_u = 1;
    for ( ; auto02C2D730_u <= UnitGroupCount(auto02C2D730_g, c_unitCountAll) ; auto02C2D730_u += (lv_hero == UnitGroupUnit(auto02C2D730_g, auto02C2D730_u)) ) {
        lv_hero = UnitGroupUnit(auto02C2D730_g, auto02C2D730_u);
        if ((libNtve_gf_UnitIsVisibleToPlayer(lv_hero, lp_trigPlayer) == false)) {
            UnitGroupRemove(lv_enemyHeroes, lv_hero);
        }

    }
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSTearOfEluneCapture) && (libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 1.0) == false) && (UnitGroupCount(lv_allyHeroes, c_unitCountAlive) > UnitGroupCount(lv_enemyHeroes, c_unitCountAlive))) {
        return false;
    }

    if (((UnitGroupCount(lv_enemyHeroes, c_unitCountAlive) > 0) || (UnitGroupCount(lv_enemySummons, c_unitCountAlive) > 0))) {
        return true;
    }
    else {
        return false;
    }
}

void libAIAI_gf_HeroAIStartGuardTear (int lp_trigPlayer) {
    // Implementation
    libAIAI_gf_HeroAIChooseTearOfEluneGuardPostion(lp_trigPlayer);
    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSTearOfEluneGuard);
    HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(libAIAI_gv_aIAttackAbil, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_tearGuardPosition), c_orderQueueReplace);
}

bool libAIAI_gf_HeroAIIsAllyCapturingTear (int lp_trigPlayer) {
    int auto6A00281C_ae;
    int auto6A00281C_ai;

    // Variable Declarations
    int lv_playerIndex;
    order lv_heroOrder;

    // Variable Initialization

    // Implementation
    auto6A00281C_ae = libCore_gv_bALMaxPlayers;
    auto6A00281C_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (auto6A00281C_ai >= 0 && lv_playerIndex <= auto6A00281C_ae) || (auto6A00281C_ai <= 0 && lv_playerIndex >= auto6A00281C_ae) ) ; lv_playerIndex += auto6A00281C_ai ) {
        if ((lv_playerIndex != lp_trigPlayer) && (libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 0) == true) && (libGame_gv_players[lv_playerIndex].lv_faction == libGame_gv_players[lp_trigPlayer].lv_faction)) {
            if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit), UnitGetPosition(libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeUnit)) > libAIAI_gv_aIHeroCloseToTearOfEluneDistance)) {
                continue;
            }

            if ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 2) == true)) {
                if ((libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSTearOfEluneCapture)) {
                    return true;
                }

            }
            else {
                lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, 0);
                if ((lv_heroOrder != null) && (OrderGetTargetType(lv_heroOrder) == c_orderTargetUnit) && (OrderGetAbilityCommand(lv_heroOrder) == AbilityCommand("CaptureMacGuffin", 0)) && (OrderGetTargetUnit(lv_heroOrder) == libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeUnit)) {
                    return true;
                }

            }
        }

    }
    return false;
}

int libAIAI_gf_HeroAINumberOfAIAlliesCapturingTear (int lp_trigPlayer) {
    int auto23C7A0BD_ae;
    int auto23C7A0BD_ai;

    // Variable Declarations
    int lv_playerIndex;
    int lv_count;

    // Variable Initialization

    // Implementation
    auto23C7A0BD_ae = libCore_gv_bALMaxPlayers;
    auto23C7A0BD_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (auto23C7A0BD_ai >= 0 && lv_playerIndex <= auto23C7A0BD_ae) || (auto23C7A0BD_ai <= 0 && lv_playerIndex >= auto23C7A0BD_ae) ) ; lv_playerIndex += auto23C7A0BD_ai ) {
        if ((lv_playerIndex != lp_trigPlayer) && (libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 2) == true) && (libGame_gv_players[lv_playerIndex].lv_faction == libGame_gv_players[lp_trigPlayer].lv_faction) && (libAIAI_gf_HeroAIGetCurrentObjective(lv_playerIndex) == libAIAI_ge_HeroAIObjective_CaptureTearOfElune)) {
            lv_count += 1;
        }

    }
    return lv_count;
}

void libAIAI_gf_HeroAIChooseTearOfEluneGuardPostion (int lp_trigPlayer) {
    int auto73FCA898_ae;
    int auto73FCA898_ai;
    int auto42C2BD08_ae;

    // Variable Declarations
    point lv_orderBaseEndpoint;
    point lv_chaosBaseEndpoint;
    point[5] lv_candidateGuardPositions;
    int lv_index;
    int lv_playerIndex;
    bool lv_positionTaken;
    point lv_otherHeroGuardPosition;
    fixed lv_distance;
    point lv_bestGuardPosition;
    fixed lv_bestGuardPositionDistance;

    // Variable Initialization
    lv_bestGuardPositionDistance = 524287.0;

    // Implementation
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextTearGuardPositionUpdateTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroGuardPositionUpdateFrequency);
    if ((libGame_gv_laneCount != 0)) {
        lv_orderBaseEndpoint = libGame_gv_laneData[1].lv_waypoints[1];
        lv_chaosBaseEndpoint = libGame_gv_laneData[1].lv_waypoints[libGame_gv_laneData[1].lv_waypointCount];
        lv_candidateGuardPositions[1] = AIPositionAlongPath(lp_trigPlayer, libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeWarningPosition, lv_orderBaseEndpoint, 3.0, false, c_ignoreEnemyBuildings);
        lv_candidateGuardPositions[2] = AIPositionAlongPath(lp_trigPlayer, libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeWarningPosition, lv_chaosBaseEndpoint, 3.0, false, c_ignoreEnemyBuildings);
        lv_candidateGuardPositions[3] = AIPositionAlongPath(lp_trigPlayer, libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeWarningPosition, lv_orderBaseEndpoint, 6.0, false, c_ignoreEnemyBuildings);
        lv_candidateGuardPositions[4] = AIPositionAlongPath(lp_trigPlayer, libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeWarningPosition, lv_chaosBaseEndpoint, 6.0, false, c_ignoreEnemyBuildings);
        auto73FCA898_ae = 4;
        auto73FCA898_ai = 1;
        lv_index = 1;
        for ( ; ( (auto73FCA898_ai >= 0 && lv_index <= auto73FCA898_ae) || (auto73FCA898_ai <= 0 && lv_index >= auto73FCA898_ae) ) ; lv_index += auto73FCA898_ai ) {
            lv_positionTaken = false;
            auto42C2BD08_ae = libCore_gv_bALMaxPlayers;
            lv_playerIndex = 1;
            for ( ; lv_playerIndex <= auto42C2BD08_ae ; lv_playerIndex += 1 ) {
                if (((lv_playerIndex == lp_trigPlayer) || (libGame_gv_players[lv_playerIndex].lv_faction != libGame_gv_players[lp_trigPlayer].lv_faction) || (libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 0) == false))) {
                    continue;
                }

                if ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 2) == true) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSTearOfEluneGuard)) {
                    lv_otherHeroGuardPosition = libAIAI_gv_aIHeroes[lv_playerIndex].lv_tearGuardPosition;
                }
                else {
                    lv_otherHeroGuardPosition = UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit);
                }
                if ((DistanceBetweenPoints(lv_otherHeroGuardPosition, lv_candidateGuardPositions[lv_index]) < 1.5)) {
                    lv_positionTaken = true;
                    break;
                }

            }
            lv_distance = DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_candidateGuardPositions[lv_index]);
            if ((lv_positionTaken == false) && (lv_distance < lv_bestGuardPositionDistance)) {
                lv_bestGuardPosition = lv_candidateGuardPositions[lv_index];
                lv_bestGuardPositionDistance = lv_distance;
            }

        }
    }

    if ((lv_bestGuardPosition == null)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_tearGuardPosition = PointWithOffsetPolar(libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeWarningPosition, 2.5, libNtve_gf_RandomAngle());
    }
    else {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_tearGuardPosition = RegionRandomPoint(RegionCircle(lv_bestGuardPosition, 1.0));
    }
}

bool libAIAI_gf_HeroAIEnemyTeamCursed (int lp_trigPlayer) {
    // Implementation
    return libMapM_gv_mMRavenTeamStats[(3 - libGame_gf_TeamNumberOfPlayer(lp_trigPlayer))].lv_cursed;
}

bool libAIAI_gf_HeroAIOurTeamCursed (int lp_trigPlayer) {
    // Implementation
    return libMapM_gv_mMRavenTeamStats[libGame_gf_TeamNumberOfPlayer(lp_trigPlayer)].lv_cursed;
}

int libAIAI_gf_HeroAIMapMechanicStackCountForHero (int lp_trigPlayer) {
    unitgroup auto519FA6A0_g;
    int auto519FA6A0_u;

    // Variable Declarations
    int lv_total;
    unit lv_unit;

    // Variable Initialization

    // Implementation
    auto519FA6A0_g = libGame_gv_players[lp_trigPlayer].lv_heroUnitGroup;
    auto519FA6A0_u = 1;
    for ( ; auto519FA6A0_u <= UnitGroupCount(auto519FA6A0_g, c_unitCountAll) ; auto519FA6A0_u += (lv_unit == UnitGroupUnit(auto519FA6A0_g, auto519FA6A0_u)) ) {
        lv_unit = UnitGroupUnit(auto519FA6A0_g, auto519FA6A0_u);
        lv_total += UnitBehaviorCount(lv_unit, "MapMechanicStack");
    }
    return lv_total;
}

int libAIAI_gf_HeroAIMapMechanicStackCountForTeam (int lp_faction) {
    int auto6E500AF9_ae;
    int auto6E500AF9_ai;

    // Variable Declarations
    int lv_playerIndex;
    int lv_total;

    // Variable Initialization

    // Implementation
    auto6E500AF9_ae = libCore_gv_bALMaxPlayers;
    auto6E500AF9_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (auto6E500AF9_ai >= 0 && lv_playerIndex <= auto6E500AF9_ae) || (auto6E500AF9_ai <= 0 && lv_playerIndex >= auto6E500AF9_ae) ) ; lv_playerIndex += auto6E500AF9_ai ) {
        if ((libGame_gv_players[lv_playerIndex].lv_faction == lp_faction) && (libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 0) == true)) {
            lv_total += libAIAI_gf_HeroAIMapMechanicStackCountForHero(lv_playerIndex);
        }

    }
    return lv_total;
}

void libAIAI_gf_HeroAIObeliskPinged (int lp_pingingPlayer, unit lp_obeliskUnit) {
    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    if ((UnitIsValid(lp_obeliskUnit) == true)) {
        libAIAI_gf_HeroAIRecruitPlayerstoCaptureObelisk(libGame_gv_players[lp_pingingPlayer].lv_faction, lp_obeliskUnit, true);
    }

}

void libAIAI_gf_HeroAICaptureObeliskLogic (int lp_faction) {
    unitgroup auto20C291F9_g;
    int auto20C291F9_u;
    unitgroup autoD640588B_g;
    int autoD640588B_u;

    // Variable Declarations
    int lv_allyComputerPlayer;
    int lv_teamIndex;
    unit lv_obelisk;
    unitgroup lv_enemies;
    unit lv_enemy;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamOrder;
        lv_teamIndex = (0);
    }
    else {
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamChaos;
        lv_teamIndex = (1);
    }
    if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextMapObjectiveConsiderTime > TimerGetElapsed(libGame_gv_gameTimer))) {
        return ;
    }
    else {
        libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextMapObjectiveConsiderTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroObeliskConsiderFrequency);
    }
    auto20C291F9_g = libAIAI_gv_heroAIDragonShireObelisks;
    auto20C291F9_u = 1;
    for ( ; auto20C291F9_u <= UnitGroupCount(auto20C291F9_g, c_unitCountAll) ; auto20C291F9_u += (lv_obelisk == UnitGroupUnit(auto20C291F9_g, auto20C291F9_u)) ) {
        lv_obelisk = UnitGroupUnit(auto20C291F9_g, auto20C291F9_u);
        lv_enemies = libAIAI_gf_AIGetVisibleUnitsFromGroup(lv_allyComputerPlayer, UnitGroupAlliance(lv_allyComputerPlayer, c_unitAllianceEnemy, RegionCircle(UnitGetPosition(lv_obelisk), libAIAI_gv_aIHeroFarFromObeliskDistance), libCore_gv_filtersHeroicandnotInvulnerableorStasis, 0));
        if ((UnitGroupCount(lv_enemies, c_unitCountAll) > 0)) {
            libAIAI_gf_HeroAIRecruitPlayerstoCaptureObelisk(lp_faction, lv_obelisk, false);
        }

    }
    autoD640588B_g = libAIAI_gv_heroAIDragonShireObelisks;
    autoD640588B_u = 1;
    for ( ; autoD640588B_u <= UnitGroupCount(autoD640588B_g, c_unitCountAll) ; autoD640588B_u += (lv_obelisk == UnitGroupUnit(autoD640588B_g, autoD640588B_u)) ) {
        lv_obelisk = UnitGroupUnit(autoD640588B_g, autoD640588B_u);
        if ((libNtve_gf_PlayerIsEnemy(lv_allyComputerPlayer, UnitGetOwner(lv_obelisk), libNtve_ge_PlayerRelation_Ally) == false)) {
            libAIAI_gf_HeroAIRecruitPlayerstoCaptureObelisk(lp_faction, lv_obelisk, false);
        }

    }
}

void libAIAI_gf_HeroAIRecruitPlayerstoCaptureObelisk (int lp_faction, unit lp_obelisk, bool lp_playerPinged) {
    playergroup autoF3835246_g;
    int autoF3835246_p;

    // Variable Declarations
    point lv_objectivePosition;
    unitgroup lv_enemyHeroes;
    int lv_teamComputerPlayer;
    int lv_playerIndex;
    playergroup lv_aIAvailableToRecruit;
    int lv_alliesDoingThisObjective;
    int lv_aIAlliesDoingAnyMapObjective;
    int lv_aIAlliesRequired;
    unit lv_unit;

    // Variable Initialization
    lv_enemyHeroes = UnitGroupEmpty();
    lv_aIAvailableToRecruit = PlayerGroupEmpty();

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamComputerPlayer = libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
        lv_teamComputerPlayer = libCore_gv_cOMPUTER_TeamChaos;
    }
    lv_objectivePosition = UnitGetPosition(lp_obelisk);
    lv_enemyHeroes = UnitGroupAlliance(lv_teamComputerPlayer, c_unitAllianceEnemy, RegionCircle(lv_objectivePosition, libAIAI_gv_aIHeroFarFromObeliskDistance), libCore_gv_filtersHeroicandnotInvulnerable, 0);
    lv_alliesDoingThisObjective = libAIAI_gf_HeroAINumberOfAlliesCapturingObelisk(lp_faction, lp_obelisk);
    lv_aIAlliesDoingAnyMapObjective = libAIAI_gf_HeroAINumberOfAIAssignedToObelisksorDragon(lp_faction);
    lv_aIAlliesRequired = ((MaxI(1, libAIAI_gf_HeroAINumberofPlayersInUnitGroup(lv_enemyHeroes)) + 1) - lv_alliesDoingThisObjective);
    autoF3835246_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAITeamIndexOfFaction(lp_faction)].lv_aIPlayers; 
    autoF3835246_p = 1;
    for ( ; autoF3835246_p <= PlayerGroupCount(autoF3835246_g) ; autoF3835246_p += (lv_playerIndex == PlayerGroupPlayer(autoF3835246_g, autoF3835246_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoF3835246_g, autoF3835246_p);
        if ((libAIAI_gf_HeroAIIsHigherPriority(lv_playerIndex, libAIAI_ge_HeroAIPriority_CaptureObeliskOrDragon) == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lv_playerIndex].lv_startOffensiveHealth)) {
            PlayerGroupAdd(lv_aIAvailableToRecruit, lv_playerIndex);
        }

    }
    while ((lv_aIAlliesRequired > 0) && ((lp_playerPinged == true) || (lv_aIAlliesDoingAnyMapObjective < libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[(libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAITeamIndexOfFaction(lp_faction)].lv_difficulty)]))) {
        lv_playerIndex = libAIAI_gf_HeroAIClosestPlayerToPoint(lv_aIAvailableToRecruit, lv_objectivePosition);
        if ((lv_playerIndex > 0)) {
            PlayerGroupRemove(lv_aIAvailableToRecruit, lv_playerIndex);
            libAIAI_gf_HeroAILeaveCurrentObjective(lv_playerIndex);
            libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentLane = 0;
            libAIAI_gv_aIHeroes[lv_playerIndex].lv_curTargetObelisk = lp_obelisk;
            libAIAI_gf_HeroAIChangeState(lv_playerIndex, libAIAI_ge_HeroAIStates_HSObeliskCapture);
            lv_aIAlliesRequired -= 1;
            lv_aIAlliesDoingAnyMapObjective += 1;
        }
        else {
            break;
        }
    }
}

bool libAIAI_gf_HeroAIShouldGiveUpOnObelisk (int lp_trigPlayer) {
    // Variable Declarations
    point lv_obeliskPosition;
    int lv_obeliskOwner;
    fixed lv_enemyEval;
    fixed lv_allyEval;
    unitgroup lv_enemies;
    unitgroup lv_enemyHeroes;
    unitgroup lv_allies;
    unitgroup lv_allyHeroes;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_enemyHeroes = UnitGroupEmpty();
    lv_allies = UnitGroupEmpty();
    lv_allyHeroes = UnitGroupEmpty();

    // Implementation
    lv_obeliskPosition = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetObelisk);
    lv_obeliskOwner = UnitGetOwner(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetObelisk);
    if ((UnitGroupHasUnit(libAIAI_gv_heroAIDragonShireObelisks, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetObelisk) == false)) {
        return true;
    }

    if ((libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lp_trigPlayer, 1.0) == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) <= libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth)) {
        return true;
    }

    lv_enemyEval = libAIAI_gf_HeroAIEnemyEvalInCircle(lp_trigPlayer, lv_obeliskPosition, libAIAI_gv_aIHeroFarFromObeliskDistance, true, false, false);
    lv_allyEval = libAIAI_gf_HeroAIAllyEvalInCircle(lp_trigPlayer, lv_obeliskPosition, libAIAI_gv_aIHeroObeliskRecruitDistance, true, false, false);
    if ((lv_enemyEval > (lv_allyEval + 750.0))) {
        return true;
    }

    return false;
}

bool libAIAI_gf_HeroAITeamOwnsAllObelisks (int lp_faction) {
    unitgroup auto60FFB834_g;
    int auto60FFB834_u;

    // Variable Declarations
    int lv_allyComputerPlayer;
    unit lv_obelisk;

    // Variable Initialization

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamChaos;
    }
    auto60FFB834_g = libAIAI_gv_heroAIDragonShireObelisks;
    auto60FFB834_u = 1;
    for ( ; auto60FFB834_u <= UnitGroupCount(auto60FFB834_g, c_unitCountAll) ; auto60FFB834_u += (lv_obelisk == UnitGroupUnit(auto60FFB834_g, auto60FFB834_u)) ) {
        lv_obelisk = UnitGroupUnit(auto60FFB834_g, auto60FFB834_u);
        if ((libNtve_gf_PlayerIsEnemy(lv_allyComputerPlayer, UnitGetOwner(lv_obelisk), libNtve_ge_PlayerRelation_Ally) == false)) {
            return false;
        }

    }
    return true;
}

bool libAIAI_gf_HeroAIIsNearActiveObelisk (int lp_trigPlayer) {
    unitgroup auto44AF5D65_g;
    int auto44AF5D65_u;

    // Variable Declarations
    unit lv_obelisk;

    // Variable Initialization

    // Implementation
    auto44AF5D65_g = libAIAI_gv_heroAIDragonShireObelisks;
    auto44AF5D65_u = 1;
    for ( ; auto44AF5D65_u <= UnitGroupCount(auto44AF5D65_g, c_unitCountAll) ; auto44AF5D65_u += (lv_obelisk == UnitGroupUnit(auto44AF5D65_g, auto44AF5D65_u)) ) {
        lv_obelisk = UnitGroupUnit(auto44AF5D65_g, auto44AF5D65_u);
        if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), UnitGetPosition(lv_obelisk)) < libAIAI_gv_aIHeroObeliskRecruitDistance)) {
            return true;
        }

    }
    return false;
}

point libAIAI_gf_HeroAIChooseDragonShrineGuardPosition (unit lp_obelisk) {
    // Implementation
    return PointWithOffsetPolar(UnitGetPosition(lp_obelisk), (libAIAI_gv_aIHeroObeliskGuardDistance - 1.0), libNtve_gf_RandomAngle());
}

int libAIAI_gf_HeroAINumberOfAlliesCapturingObelisk (int lp_faction, unit lp_obelisk) {
    int auto571679BB_ae;
    int auto571679BB_ai;

    // Variable Declarations
    int lv_playerIndex;
    int lv_count;

    // Variable Initialization

    // Implementation
    auto571679BB_ae = libCore_gv_bALMaxPlayers;
    auto571679BB_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (auto571679BB_ai >= 0 && lv_playerIndex <= auto571679BB_ae) || (auto571679BB_ai <= 0 && lv_playerIndex >= auto571679BB_ae) ) ; lv_playerIndex += auto571679BB_ai ) {
        if ((libGame_gv_players[lv_playerIndex].lv_faction == lp_faction)) {
            if ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 2) == true)) {
                if ((libAIAI_gf_HeroAIGetCurrentObjective(lv_playerIndex) == libAIAI_ge_HeroAIObjective_CaptureObelisk) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_curTargetObelisk == lp_obelisk)) {
                    lv_count += 1;
                }

            }
            else {
                if ((UnitIsAlive(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit) == true) && (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit), UnitGetPosition(lp_obelisk)) < libAIAI_gv_aIHeroFarFromDragonStatueDistance)) {
                    lv_count += 1;
                }

            }
        }

    }
    return lv_count;
}

void libAIAI_gf_HeroAIDragonStatuePinged (int lp_pingingPlayer, unit lp_dragonStatue) {
    // Implementation
    if ((UnitIsValid(lp_dragonStatue) == true)) {
        libAIAI_gf_HeroAIRecruitPlayerstoCaptureDragon(libGame_gv_players[lp_pingingPlayer].lv_faction, lp_dragonStatue, true);
    }

}

void libAIAI_gf_HeroAICaptureDragonLogic (int lp_faction) {
    unitgroup autoFEDC454E_g;
    int autoFEDC454E_u;

    // Variable Declarations
    int lv_teamIndex;
    unitgroup lv_dragonStatueGroup;
    unit lv_dragonStatue;

    // Variable Initialization
    lv_dragonStatueGroup = UnitGroupEmpty();

    // Implementation
    lv_teamIndex = libAIAI_gf_HeroAITeamIndexOfFaction(lp_faction);
    if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextUseDragonVehicleConsiderTime > TimerGetElapsed(libGame_gv_gameTimer))) {
        return ;
    }
    else {
        libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextUseDragonVehicleConsiderTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroEnterDragonVehicleConsiderFrequency);
    }
    lv_dragonStatueGroup = UnitGroup("VehicleDragon", c_playerAny, RegionEntireMap(), UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    autoFEDC454E_g = lv_dragonStatueGroup;
    autoFEDC454E_u = 1;
    for ( ; autoFEDC454E_u <= UnitGroupCount(autoFEDC454E_g, c_unitCountAll) ; autoFEDC454E_u += (lv_dragonStatue == UnitGroupUnit(autoFEDC454E_g, autoFEDC454E_u)) ) {
        lv_dragonStatue = UnitGroupUnit(autoFEDC454E_g, autoFEDC454E_u);
        libAIAI_gf_HeroAIRecruitPlayerstoCaptureDragon(lp_faction, lv_dragonStatue, false);
    }
}

void libAIAI_gf_HeroAIRecruitPlayerstoCaptureDragon (int lp_faction, unit lp_dragonStatue, bool lp_playerPinged) {
    playergroup autoE3B0ACA4_g;
    int autoE3B0ACA4_p;

    // Variable Declarations
    point lv_objectivePosition;
    unitgroup lv_enemyHeroes;
    int lv_teamComputerPlayer;
    int lv_playerIndex;
    playergroup lv_aIAvailableToRecruit;
    int lv_alliesDoingThisObjective;
    int lv_aIAlliesDoingAnyMapObjective;
    int lv_aIAlliesRequired;
    unit lv_unit;

    // Variable Initialization
    lv_enemyHeroes = UnitGroupEmpty();
    lv_aIAvailableToRecruit = PlayerGroupEmpty();

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamComputerPlayer = libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
        lv_teamComputerPlayer = libCore_gv_cOMPUTER_TeamChaos;
    }
    lv_objectivePosition = UnitGetPosition(lp_dragonStatue);
    lv_enemyHeroes = UnitGroupAlliance(lv_teamComputerPlayer, c_unitAllianceEnemy, RegionCircle(lv_objectivePosition, libAIAI_gv_aIHeroFarFromDragonStatueDistance), libCore_gv_filtersHeroicandnotInvulnerable, 0);
    lv_alliesDoingThisObjective = libAIAI_gf_HeroAINumberOfAlliesCapturingDragon(lp_faction, lp_dragonStatue);
    lv_aIAlliesDoingAnyMapObjective = libAIAI_gf_HeroAINumberOfAIAssignedToObelisksorDragon(lp_faction);
    if ((UnitGetOwner(lp_dragonStatue) == lv_teamComputerPlayer)) {
        lv_aIAlliesRequired = ((libAIAI_gf_HeroAINumberofPlayersInUnitGroup(lv_enemyHeroes) + 1) - lv_alliesDoingThisObjective);
    }
    else {
        lv_aIAlliesRequired = (MinI(2, (libAIAI_gf_HeroAINumberofPlayersInUnitGroup(lv_enemyHeroes) + 1)) - lv_alliesDoingThisObjective);
    }
    autoE3B0ACA4_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAITeamIndexOfFaction(lp_faction)].lv_aIPlayers; 
    autoE3B0ACA4_p = 1;
    for ( ; autoE3B0ACA4_p <= PlayerGroupCount(autoE3B0ACA4_g) ; autoE3B0ACA4_p += (lv_playerIndex == PlayerGroupPlayer(autoE3B0ACA4_g, autoE3B0ACA4_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoE3B0ACA4_g, autoE3B0ACA4_p);
        if ((libAIAI_gf_HeroAIIsHigherPriority(lv_playerIndex, libAIAI_ge_HeroAIPriority_CaptureObeliskOrDragon) == true) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lv_playerIndex].lv_returnToSpawnHealth)) {
            PlayerGroupAdd(lv_aIAvailableToRecruit, lv_playerIndex);
        }

    }
    while ((lv_aIAlliesRequired > 0) && ((lp_playerPinged == true) || (lv_aIAlliesDoingAnyMapObjective < libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[(libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAITeamIndexOfFaction(lp_faction)].lv_difficulty)]))) {
        lv_playerIndex = libAIAI_gf_HeroAIClosestPlayerToPoint(lv_aIAvailableToRecruit, lv_objectivePosition);
        if ((lv_playerIndex > 0)) {
            PlayerGroupRemove(lv_aIAvailableToRecruit, lv_playerIndex);
            libAIAI_gf_HeroAILeaveCurrentObjective(lv_playerIndex);
            libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentLane = 0;
            libAIAI_gv_aIHeroes[lv_playerIndex].lv_curTargetDragonStatue = lp_dragonStatue;
            if ((UnitGetOwner(lp_dragonStatue) != lv_teamComputerPlayer)) {
                libAIAI_gf_HeroAIChangeState(lv_playerIndex, libAIAI_ge_HeroAIStates_HSDragonHarass);
            }
            else {
                libAIAI_gf_HeroAIChangeState(lv_playerIndex, libAIAI_ge_HeroAIStates_HSDragonCapture);
            }
            lv_aIAlliesRequired -= 1;
            lv_aIAlliesDoingAnyMapObjective += 1;
        }
        else {
            break;
        }
    }
}

bool libAIAI_gf_HeroAIShouldGiveUpOnDragon (int lp_trigPlayer, bool lp_isEnemyDragon) {
    // Variable Declarations
    int lv_teamComputerPlayer;

    // Variable Initialization

    // Implementation
    if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_returnToSpawnHealth)) {
        return true;
    }

    if ((((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order) && (lp_isEnemyDragon == false)) || ((libGame_gv_players[lp_trigPlayer].lv_faction != libGame_ge_Faction_Order) && (lp_isEnemyDragon == true)))) {
        lv_teamComputerPlayer = libCore_gv_cOMPUTER_TeamOrder;
    }
    else {
        lv_teamComputerPlayer = libCore_gv_cOMPUTER_TeamChaos;
    }
    if (((UnitIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetDragonStatue) == false) || (UnitIsAlive(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetDragonStatue) == false) || (UnitGetOwner(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetDragonStatue) != lv_teamComputerPlayer))) {
        return true;
    }

    return false;
}

bool libAIAI_gf_HeroAIIsAllyEnteringDragon (int lp_trigPlayer, unit lp_dragonStatue) {
    playergroup auto0F29C555_g;
    int auto0F29C555_p;

    // Variable Declarations
    int lv_playerIndex;
    order lv_heroOrder;

    // Variable Initialization

    // Implementation
    auto0F29C555_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAITeamIndexOfFaction(libGame_gv_players[lp_trigPlayer].lv_faction)].lv_players; 
    auto0F29C555_p = 1;
    for ( ; auto0F29C555_p <= PlayerGroupCount(auto0F29C555_g) ; auto0F29C555_p += (lv_playerIndex == PlayerGroupPlayer(auto0F29C555_g, auto0F29C555_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto0F29C555_g, auto0F29C555_p);
        if ((lv_playerIndex != lp_trigPlayer) && (libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 0) == true)) {
            lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, 0);
            if ((OrderGetAbilityCommand(lv_heroOrder) == AbilityCommand("UseVehicle", 0)) && (OrderGetTargetUnit(lv_heroOrder) == lp_dragonStatue) && (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit), UnitGetPosition(lp_dragonStatue)) < libAIAI_gv_aIHeroFarFromDragonStatueDistance)) {
                return true;
            }

        }

    }
    return false;
}

bool libAIAI_gf_HeroAIIsHumanAllyEnteringDragon (int lp_faction, unit lp_dragonStatue) {
    int auto58800901_ae;

    // Variable Declarations
    int lv_playerIndex;
    order lv_heroOrder;

    // Variable Initialization

    // Implementation
    auto58800901_ae = libCore_gv_bALMaxPlayers;
    lv_playerIndex = 1;
    for ( ; lv_playerIndex <= auto58800901_ae ; lv_playerIndex += 1 ) {
        if ((libGame_gv_players[lv_playerIndex].lv_faction == lp_faction) && (libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 1) == true)) {
            lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, 0);
            if ((lv_heroOrder != null) && (OrderGetTargetType(lv_heroOrder) == c_orderTargetUnit) && (OrderGetAbilityCommand(lv_heroOrder) == AbilityCommand("UseVehicle", 0)) && (OrderGetTargetUnit(lv_heroOrder) == lp_dragonStatue) && (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit), UnitGetPosition(lp_dragonStatue)) < libAIAI_gv_aIHeroFarFromDragonStatueDistance)) {
                return true;
            }

        }

    }
    return false;
}

int libAIAI_gf_HeroAINumberOfAlliesCapturingDragon (int lp_faction, unit lp_dragonStatue) {
    int auto4E998EFE_ae;

    // Variable Declarations
    int lv_playerIndex;
    int lv_playerCount;

    // Variable Initialization

    // Implementation
    auto4E998EFE_ae = libCore_gv_bALMaxPlayers;
    lv_playerIndex = 1;
    for ( ; lv_playerIndex <= auto4E998EFE_ae ; lv_playerIndex += 1 ) {
        if ((libGame_gv_players[lv_playerIndex].lv_faction == lp_faction)) {
            if ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 2) == true)) {
                if ((libAIAI_gf_HeroAIGetCurrentObjective(lv_playerIndex) == libAIAI_ge_HeroAIObjective_CaptureDragon) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_curTargetDragonStatue == lp_dragonStatue)) {
                    lv_playerCount += 1;
                }

            }
            else {
                if ((UnitIsAlive(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit) == true) && (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit), UnitGetPosition(lp_dragonStatue)) < libAIAI_gv_aIHeroFarFromDragonStatueDistance)) {
                    lv_playerCount += 1;
                }

            }
        }

    }
    return lv_playerCount;
}

int libAIAI_gf_HeroAINumberOfAIAssignedToObelisksorDragon (int lp_faction) {
    playergroup autoCC19E3FC_g;
    int autoCC19E3FC_p;

    // Variable Declarations
    int lv_playerIndex;
    int lv_playerCount;

    // Variable Initialization

    // Implementation
    autoCC19E3FC_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAITeamIndexOfFaction(lp_faction)].lv_aIPlayers; 
    autoCC19E3FC_p = 1;
    for ( ; autoCC19E3FC_p <= PlayerGroupCount(autoCC19E3FC_g) ; autoCC19E3FC_p += (lv_playerIndex == PlayerGroupPlayer(autoCC19E3FC_g, autoCC19E3FC_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoCC19E3FC_g, autoCC19E3FC_p);
        if (((libAIAI_gf_HeroAIGetCurrentObjective(lv_playerIndex) == libAIAI_ge_HeroAIObjective_CaptureObelisk) || (libAIAI_gf_HeroAIGetCurrentObjective(lv_playerIndex) == libAIAI_ge_HeroAIObjective_CaptureDragon))) {
            lv_playerCount += 1;
        }

    }
    return lv_playerCount;
}

int libAIAI_gf_HeroAIClosestPlayerToPoint (playergroup lp_players, point lp_point) {
    playergroup autoE3B9D156_g;
    int autoE3B9D156_p;

    // Variable Declarations
    int lv_playerIndex;
    fixed lv_distanceSquared;
    int lv_closestPlayer;
    fixed lv_closestDistanceSquared;

    // Variable Initialization
    lv_closestDistanceSquared = 524287.0;

    // Implementation
    autoE3B9D156_g = lp_players; 
    autoE3B9D156_p = 1;
    for ( ; autoE3B9D156_p <= PlayerGroupCount(autoE3B9D156_g) ; autoE3B9D156_p += (lv_playerIndex == PlayerGroupPlayer(autoE3B9D156_g, autoE3B9D156_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoE3B9D156_g, autoE3B9D156_p);
        lv_distanceSquared = DistanceSquaredBetweenPoints(lp_point, UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit));
        if ((lv_distanceSquared < lv_closestDistanceSquared)) {
            lv_closestDistanceSquared = lv_distanceSquared;
            lv_closestPlayer = lv_playerIndex;
        }

    }
    return lv_closestPlayer;
}

void libAIAI_gf_HeroAIEnterUnderworldLogic (int lp_faction) {
    int autoC1129549_ae;
    playergroup auto3A423D45_g;
    int auto3A423D45_p;

    // Variable Declarations
    int lv_allyHeroesInUnderworld;
    int lv_teamIndex;
    int lv_enemyHeroesInUnderworld;
    int lv_playerIndex;
    int lv_desiredNumberOfHeroesInUnderworld;
    int lv_additionalHeroesNeeded;

    // Variable Initialization

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    if ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextUnderworldConsiderTime > TimerGetElapsed(libGame_gv_gameTimer))) {
        return ;
    }
    else {
        libAIAI_gv_heroAITeamData[lv_teamIndex].lv_nextUnderworldConsiderTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroUnderworldConsiderFrequency);
    }
    if (((libAIAI_gv_heroAIUnderworldStatus.lv_opened == false) || (libAIAI_gv_heroAIUnderworldStatus.lv_skullsRemaining == 0))) {
        return ;
    }

    autoC1129549_ae = libCore_gv_bALMaxPlayers;
    lv_playerIndex = 1;
    for ( ; lv_playerIndex <= autoC1129549_ae ; lv_playerIndex += 1 ) {
        if ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 0) == true) && ((libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit) == true) || ((libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 2) == true) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSUnderworldEnter)))) {
            if ((libGame_gv_players[lv_playerIndex].lv_faction == lp_faction)) {
                lv_allyHeroesInUnderworld += 1;
            }
            else {
                lv_enemyHeroesInUnderworld += 1;
            }
        }

    }
    if ((libAIAI_gv_heroAIUnderworldStatus.lv_skullsRemaining > (libAIAI_gv_heroAIUnderworldStatus.lv_totalSkulls / 2))) {
        lv_desiredNumberOfHeroesInUnderworld = 5;
    }
    else {
        lv_desiredNumberOfHeroesInUnderworld = 3;
    }
    lv_desiredNumberOfHeroesInUnderworld = MaxI(lv_desiredNumberOfHeroesInUnderworld, lv_enemyHeroesInUnderworld);
    lv_additionalHeroesNeeded = (lv_desiredNumberOfHeroesInUnderworld - lv_allyHeroesInUnderworld);
    if ((lv_additionalHeroesNeeded <= 0)) {
        return ;
    }

    auto3A423D45_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAITeamIndexOfFaction(lp_faction)].lv_aIPlayers; 
    auto3A423D45_p = 1;
    for ( ; auto3A423D45_p <= PlayerGroupCount(auto3A423D45_g) ; auto3A423D45_p += (lv_playerIndex == PlayerGroupPlayer(auto3A423D45_g, auto3A423D45_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto3A423D45_g, auto3A423D45_p);
        if ((lv_additionalHeroesNeeded == 0)) {
            break;
        }

        if ((libAIAI_gf_HeroAIShouldEnterUnderworld(lv_playerIndex) == true)) {
            if ((libAIAI_gf_HeroAIStartEnterUnderworld(lv_playerIndex) == true)) {
                lv_additionalHeroesNeeded -= 1;
            }

        }

    }
}

void libAIAI_gf_HeroAIUnderworldEntrancePinged (int lp_pingingPlayer) {
    playergroup auto6DB34D55_g;
    int auto6DB34D55_p;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    if (((libAIAI_gv_heroAIUnderworldStatus.lv_opened == false) || (libAIAI_gv_heroAIUnderworldStatus.lv_skullsRemaining == 0))) {
        return ;
    }

    auto6DB34D55_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_pingingPlayer)].lv_aIPlayers; 
    auto6DB34D55_p = 1;
    for ( ; auto6DB34D55_p <= PlayerGroupCount(auto6DB34D55_g) ; auto6DB34D55_p += (lv_playerIndex == PlayerGroupPlayer(auto6DB34D55_g, auto6DB34D55_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto6DB34D55_g, auto6DB34D55_p);
        if ((libAIAI_gf_HeroAIShouldEnterUnderworld(lv_playerIndex) == true)) {
            if ((libAIAI_gf_HeroAIStartEnterUnderworld(lv_playerIndex) == true)) {
            }

        }

    }
}

bool libAIAI_gf_HeroAIStartEnterUnderworld (int lp_trigPlayer) {
    unitgroup autoF56D4AFA_g;
    int autoF56D4AFA_u;

    // Variable Declarations
    unit lv_entrance;
    fixed lv_entranceDistance;
    unit lv_bestEntrance;
    fixed lv_bestEntranceDistance;

    // Variable Initialization

    // Implementation
    lv_bestEntrance = null;
    lv_bestEntranceDistance = 524287.0;
    autoF56D4AFA_g = libAIAI_gv_heroAIUnderworldStatus.lv_entrances;
    autoF56D4AFA_u = 1;
    for ( ; autoF56D4AFA_u <= UnitGroupCount(autoF56D4AFA_g, c_unitCountAll) ; autoF56D4AFA_u += (lv_entrance == UnitGroupUnit(autoF56D4AFA_g, autoF56D4AFA_u)) ) {
        lv_entrance = UnitGroupUnit(autoF56D4AFA_g, autoF56D4AFA_u);
        lv_entranceDistance = DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), UnitGetPosition(lv_entrance));
        if ((lv_entranceDistance < lv_bestEntranceDistance)) {
            lv_bestEntrance = lv_entrance;
            lv_bestEntranceDistance = lv_entranceDistance;
        }

    }
    if ((UnitIsValid(lv_bestEntrance) == true)) {
        libAIAI_gf_HeroAILeaveCurrentObjective(lp_trigPlayer);
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane = 0;
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetUnderworldEntrance = lv_bestEntrance;
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToCollectSkulls = true;
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSUnderworldEnter);
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAIShouldEnterUnderworld (int lp_trigPlayer) {
    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToCollectSkulls == false) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_startOffensiveHealth) && (libAIAI_gf_HeroAIIsHigherPriority(lp_trigPlayer, libAIAI_ge_HeroAIPriority_CollectSkullsHeadingToUnderworld) == true)) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAIShouldRetreatUnderworld (int lp_trigPlayer) {
    // Variable Declarations
    fixed lv_allyEval;
    fixed lv_enemyEval;

    // Variable Initialization

    // Implementation
    lv_allyEval = libAIAI_gf_HeroAIAllyEvalInCircle(lp_trigPlayer, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroSightRange, true, false, false);
    lv_enemyEval = libAIAI_gf_HeroAIEnemyEvalInCircle(lp_trigPlayer, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), libAIAI_gv_aIHeroSightRange, true, false, false);
    if (((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) || (lv_enemyEval > (lv_allyEval + 250.0)))) {
        return true;
    }

    return false;
}

bool libAIAI_gf_HeroAIIsSafeUnderworld (int lp_trigPlayer) {
    // Variable Declarations
    fixed lv_allyEval;
    fixed lv_enemyEval;

    // Variable Initialization

    // Implementation
    lv_allyEval = libAIAI_gf_HeroAIAllyEvalInCircle(lp_trigPlayer, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), (libAIAI_gv_aIHeroSightRange + 6.0), true, false, false);
    lv_enemyEval = libAIAI_gf_HeroAIEnemyEvalInCircle(lp_trigPlayer, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), (libAIAI_gv_aIHeroSightRange + 5.0), true, false, false);
    if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[lp_trigPlayer].lv_endOffensiveHealth) && (lv_enemyEval < lv_allyEval)) {
        return true;
    }

    return false;
}

bool libAIAI_gf_HeroAIIsUnitInUnderworld (unit lp_unit) {
    // Implementation
    if ((libAIAI_gv_heroAIUnderworldStatus.lv_opened == false)) {
        return false;
    }

    return libNtve_gf_UnitInRegion(lp_unit, libAIAI_gv_heroAIUnderworldStatus.lv_underworldRegion);
}

int libAIAI_gf_HeroAINumberOfAIAlliesCollectingSkulls (int lp_trigPlayer) {
    int autoA37D2B4C_ae;
    int autoA37D2B4C_ai;

    // Variable Declarations
    int lv_playerIndex;
    int lv_count;

    // Variable Initialization

    // Implementation
    autoA37D2B4C_ae = libCore_gv_bALMaxPlayers;
    autoA37D2B4C_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (autoA37D2B4C_ai >= 0 && lv_playerIndex <= autoA37D2B4C_ae) || (autoA37D2B4C_ai <= 0 && lv_playerIndex >= autoA37D2B4C_ae) ) ; lv_playerIndex += autoA37D2B4C_ai ) {
        if ((lv_playerIndex != lp_trigPlayer) && (libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 2) == true) && (libGame_gv_players[lv_playerIndex].lv_faction == libGame_gv_players[lp_trigPlayer].lv_faction) && (libAIAI_gf_HeroAIGetCurrentObjective(lv_playerIndex) == libAIAI_ge_HeroAIObjective_CollectSkulls)) {
            lv_count += 1;
        }

    }
    return lv_count;
}

void libAIAI_gf_HeroAIStartUnderworldKillMinions (int lp_trigPlayer) {
    // Implementation
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetMinion = libAIAI_gf_HeroAIUnderworldChooseTarget(lp_trigPlayer);
    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSUnderworldKillMinions);
}

void libAIAI_gf_HeroAIStartExitUnderworld (int lp_trigPlayer) {
    unitgroup autoF2D8F0C7_g;
    int autoF2D8F0C7_u;

    // Variable Declarations
    unit lv_exit;
    fixed lv_exitDistance;
    unit lv_bestExit;
    fixed lv_bestExitDistance;

    // Variable Initialization
    lv_bestExitDistance = 524287.0;

    // Implementation
    autoF2D8F0C7_g = libAIAI_gv_heroAIUnderworldStatus.lv_exits;
    autoF2D8F0C7_u = 1;
    for ( ; autoF2D8F0C7_u <= UnitGroupCount(autoF2D8F0C7_g, c_unitCountAll) ; autoF2D8F0C7_u += (lv_exit == UnitGroupUnit(autoF2D8F0C7_g, autoF2D8F0C7_u)) ) {
        lv_exit = UnitGroupUnit(autoF2D8F0C7_g, autoF2D8F0C7_u);
        lv_exitDistance = DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), UnitGetPosition(lv_exit));
        if ((lv_exitDistance < lv_bestExitDistance)) {
            lv_bestExit = lv_exit;
            lv_bestExitDistance = lv_exitDistance;
        }

    }
    if ((UnitIsValid(lv_bestExit) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetUnderworldExit = lv_bestExit;
        if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), UnitGetPosition(lv_bestExit)) > libAIAI_gv_aIHeroUnderworldCloseToExitDistance)) {
            libAIAI_gf_HeroAIUpdateUnderworldExitTargetPosition(lp_trigPlayer);
            libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSUnderworldMoveToExit);
        }
        else {
            libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSUnderworldExit);
        }
    }

}

void libAIAI_gf_HeroAILeaveExitUnderworld (int lp_trigPlayer) {
    // Implementation
    HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetUnderworldExit = null;
}

void libAIAI_gf_HeroAIUpdateUnderworldExitTargetPosition (int lp_trigPlayer) {
    // Variable Declarations
    bool lv_useDangerMap;
    point lv_start;
    point lv_pathablePoint;
    point lv_destination;
    point lv_targetPosition;

    // Variable Initialization

    // Implementation
    lv_start = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    lv_destination = libAIAI_gf_HeroAIFindNearbyPathablePoint(lp_trigPlayer, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetUnderworldExit), 2.0, false);
    if ((lv_destination == null)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldExitTargetPosition = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetUnderworldExit);
        return ;
    }

    lv_useDangerMap = libAIAI_gv_aIHeroPathAroundDanger[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty];
    lv_targetPosition = AIPositionAlongPath(lp_trigPlayer, lv_start, lv_destination, libAIAI_gv_aIHeroJungleStepDistance, lv_useDangerMap, c_includeAllBuildings);
    if ((lv_targetPosition == null)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldExitTargetPosition = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetUnderworldExit);
        return ;
    }

    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldExitTargetPosition = lv_targetPosition;
}

bool libAIAI_gf_HeroAIIsEnteringUnderworld (int lp_trigPlayer) {
    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToCollectSkulls == true) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetUnderworldEntrance != null)) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAIIsExitingUnderworld (int lp_trigPlayer) {
    // Implementation
    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSUnderworldTeleportHome) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSUnderworldMoveToExit) || (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSUnderworldExit))) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAIHandleNoLongerInUnderworld (int lp_trigPlayer) {
    // Implementation
    if ((libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) == false)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetUnderworldEntrance = null;
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetUnderworldExit = null;
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_wantsToCollectSkulls = false;
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetHero = null;
        libAIAI_gf_HeroAIReturnToClosestLane(lp_trigPlayer);
        return true;
    }
    else {
        return false;
    }
}

void libAIAI_gf_HeroAIUnderworldBossPinged (int lp_pingingPlayer, unit lp_targetUnit) {
    playergroup auto7AFF1554_g;
    int auto7AFF1554_p;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    if (((UnitIsValid(lp_targetUnit) == false) || (libAIAI_gf_HeroAIIsUnitInUnderworld(lp_targetUnit) == false))) {
        return ;
    }

    auto7AFF1554_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_pingingPlayer)].lv_aIPlayers; 
    auto7AFF1554_p = 1;
    for ( ; auto7AFF1554_p <= PlayerGroupCount(auto7AFF1554_g) ; auto7AFF1554_p += (lv_playerIndex == PlayerGroupPlayer(auto7AFF1554_g, auto7AFF1554_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto7AFF1554_g, auto7AFF1554_p);
        if ((libAIAI_gf_HeroAIShouldEnterUnderworld(lv_playerIndex) == true)) {
            if ((libAIAI_gf_HeroAIStartEnterUnderworld(lv_playerIndex) == true)) {
            }

        }

        if (((libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSUnderworldPickupSkull) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSUnderworldKillMinions) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSUnderworldFocusHero) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSUnderworldEnter))) {
            libAIAI_gv_aIHeroes[lv_playerIndex].lv_underworldTargetMinion = lp_targetUnit;
        }

    }
}

unit libAIAI_gf_HeroAIUnderworldChooseTarget (int lp_trigPlayer) {
    unitgroup auto024DF90E_g;
    int auto024DF90E_u;
    unitgroup autoE11B8BBA_g;
    int autoE11B8BBA_u;
    unitgroup auto0542AC5C_g;
    int auto0542AC5C_u;

    // Variable Declarations
    unitgroup lv_enemies;
    unitgroup lv_enemyMinions;
    unitgroup lv_enemyBosses;
    unit lv_enemy;
    fixed lv_targetEval;
    unit lv_bestTarget;
    fixed lv_bestTargetEval;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_enemyMinions = UnitGroupEmpty();
    lv_enemyBosses = UnitGroupEmpty();
    lv_bestTargetEval = 524287.0;

    // Implementation
    if ((UnitIsAlive(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetMinion) == true)) {
        return libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetMinion;
    }

    lv_enemies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, libAIAI_gv_heroAIUnderworldStatus.lv_underworldRegion, UnitFilter(0, 0, (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_enemyMinions = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterLight), 0, 0, 0), 0);
    auto024DF90E_g = lv_enemyMinions;
    auto024DF90E_u = 1;
    for ( ; auto024DF90E_u <= UnitGroupCount(auto024DF90E_g, c_unitCountAll) ; auto024DF90E_u += (lv_enemy == UnitGroupUnit(auto024DF90E_g, auto024DF90E_u)) ) {
        lv_enemy = UnitGroupUnit(auto024DF90E_g, auto024DF90E_u);
        if ((UnitGetType(lv_enemy) == "UnderworldBoss")) {
            UnitGroupRemove(lv_enemyMinions, lv_enemy);
            UnitGroupAdd(lv_enemyBosses, lv_enemy);
        }

    }
    autoE11B8BBA_g = lv_enemyMinions;
    autoE11B8BBA_u = 1;
    for ( ; autoE11B8BBA_u <= UnitGroupCount(autoE11B8BBA_g, c_unitCountAll) ; autoE11B8BBA_u += (lv_enemy == UnitGroupUnit(autoE11B8BBA_g, autoE11B8BBA_u)) ) {
        lv_enemy = UnitGroupUnit(autoE11B8BBA_g, autoE11B8BBA_u);
        lv_targetEval = libAIAI_gf_HeroAIEvaluateTarget(lp_trigPlayer, lv_enemy, libAIAI_gv_aIHeroChangeTargetDistanceWeight);
        if ((lv_targetEval < lv_bestTargetEval)) {
            lv_bestTarget = lv_enemy;
            lv_bestTargetEval = lv_targetEval;
        }

    }
    if ((UnitIsValid(lv_bestTarget) == false)) {
        auto0542AC5C_g = lv_enemyBosses;
        auto0542AC5C_u = 1;
        for ( ; auto0542AC5C_u <= UnitGroupCount(auto0542AC5C_g, c_unitCountAll) ; auto0542AC5C_u += (lv_enemy == UnitGroupUnit(auto0542AC5C_g, auto0542AC5C_u)) ) {
            lv_enemy = UnitGroupUnit(auto0542AC5C_g, auto0542AC5C_u);
            lv_targetEval = libAIAI_gf_HeroAIEvaluateTarget(lp_trigPlayer, lv_enemy, libAIAI_gv_aIHeroChangeTargetDistanceWeight);
            if ((lv_targetEval < lv_bestTargetEval)) {
                lv_bestTarget = lv_enemy;
                lv_bestTargetEval = lv_targetEval;
            }

        }
    }

    return lv_bestTarget;
}

bool libAIAI_gf_HeroAIUnderworldFocusNearbyHero (int lp_trigPlayer) {
    // Variable Declarations
    unit lv_enemyHero;

    // Variable Initialization

    // Implementation
    if (((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextFocusHeroCheckTime > TimerGetElapsed(libGame_gv_gameTimer)) || (libAIAI_gf_HeroAIShouldRetreatUnderworld(lp_trigPlayer) == true))) {
        return false;
    }

    lv_enemyHero = libAIAI_gf_HeroAIUnderworldFocusHeroChooseTarget(lp_trigPlayer);
    if ((UnitIsValid(lv_enemyHero) == true)) {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_underworldTargetHero = lv_enemyHero;
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_focusHeroTimeout = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroFocusHeroMapMaxChaseTime);
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSUnderworldFocusHero);
        return true;
    }

    return false;
}

unit libAIAI_gf_HeroAIUnderworldFocusHeroChooseTarget (int lp_trigPlayer) {
    unitgroup autoE5E5B1D9_g;
    int autoE5E5B1D9_u;

    // Variable Declarations
    unit lv_hero;
    fixed lv_targetEval;
    fixed lv_bestTargetEval;
    unit lv_bestTarget;

    // Variable Initialization
    lv_bestTargetEval = 524287.0;

    // Implementation
    libAIAI_gf_HeroAIEval(lp_trigPlayer);
    autoE5E5B1D9_g = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroes;
    autoE5E5B1D9_u = 1;
    for ( ; autoE5E5B1D9_u <= UnitGroupCount(autoE5E5B1D9_g, c_unitCountAll) ; autoE5E5B1D9_u += (lv_hero == UnitGroupUnit(autoE5E5B1D9_g, autoE5E5B1D9_u)) ) {
        lv_hero = UnitGroupUnit(autoE5E5B1D9_g, autoE5E5B1D9_u);
        lv_targetEval = libAIAI_gf_HeroAIEvaluateTarget(lp_trigPlayer, lv_hero, libAIAI_gv_aIHeroChangeTargetDistanceWeight);
        if ((lv_targetEval < lv_bestTargetEval) && (libNtve_gf_UnitIsInvulnerable(lv_hero) == false) && ((libAIAI_gv_aIHeroEnterTeamFights[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)] == true) || (libAIAI_gf_HeroAINumberOfAIAlliesChasingUnderworldHeroTarget(lp_trigPlayer, lv_hero) == 0))) {
            lv_bestTargetEval = lv_targetEval;
            lv_bestTarget = lv_hero;
        }

    }
    return lv_bestTarget;
}

int libAIAI_gf_HeroAINumberOfAIAlliesChasingUnderworldHeroTarget (int lp_trigPlayer, unit lp_target) {
    int auto70BCCDA6_ae;
    int auto70BCCDA6_ai;

    // Variable Declarations
    int lv_playerIndex;
    int lv_count;

    // Variable Initialization

    // Implementation
    auto70BCCDA6_ae = libCore_gv_bALMaxPlayers;
    auto70BCCDA6_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (auto70BCCDA6_ai >= 0 && lv_playerIndex <= auto70BCCDA6_ae) || (auto70BCCDA6_ai <= 0 && lv_playerIndex >= auto70BCCDA6_ae) ) ; lv_playerIndex += auto70BCCDA6_ai ) {
        if ((lv_playerIndex != lp_trigPlayer) && (libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 2) == true) && (libGame_gv_players[lv_playerIndex].lv_faction == libGame_gv_players[lp_trigPlayer].lv_faction) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSUnderworldFocusHero) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_underworldTargetHero == lp_target)) {
            lv_count += 1;
        }

    }
    return lv_count;
}

void libAIAI_gf_HeroAIPickupSkullsLogic (int lp_faction) {
    playergroup auto2AD73773_g;
    int auto2AD73773_p;

    // Variable Declarations
    int lv_playerIndex;
    bool lv_skullFound;

    // Variable Initialization

    // Implementation
    auto2AD73773_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAITeamIndexOfFaction(lp_faction)].lv_aIPlayers; 
    auto2AD73773_p = 1;
    for ( ; auto2AD73773_p <= PlayerGroupCount(auto2AD73773_g) ; auto2AD73773_p += (lv_playerIndex == PlayerGroupPlayer(auto2AD73773_g, auto2AD73773_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto2AD73773_g, auto2AD73773_p);
        if ((libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit) == true) && (libAIAI_gf_HeroAIIsHigherPriority(lv_playerIndex, libAIAI_ge_HeroAIPriority_GenericUninterruptable) == true) && (libAIAI_gf_HeroAIShouldRetreatUnderworld(lv_playerIndex) == false)) {
            if ((UnitOrder(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, 0) != null) && (OrderGetAbilityCommand(UnitOrder(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, 0)) == AbilityCommand("PortBackToBase", 0))) {
                continue;
            }

            lv_skullFound = libAIAI_gf_HeroAISearchForNearbySkull(lv_playerIndex, RegionCircle(UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit), libAIAI_gv_aIHeroSkullSearchRadius), false);
        }

    }
}

bool libAIAI_gf_HeroAISearchForNearbySkull (int lp_trigPlayer, region lp_searchRegion, bool lp_ignoreAllies) {
    unitgroup auto30629D51_g;
    int auto30629D51_u;

    // Variable Declarations
    unitgroup lv_nearbySkulls;
    unit lv_skull;
    fixed lv_skullDistance;
    unit lv_bestSkull;
    fixed lv_bestSkullDistance;

    // Variable Initialization
    lv_nearbySkulls = UnitGroupEmpty();
    lv_bestSkullDistance = 524287.0;

    // Implementation
    lv_nearbySkulls = UnitGroup("ItemUnderworldPowerup", c_playerAny, lp_searchRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto30629D51_g = lv_nearbySkulls;
    auto30629D51_u = 1;
    for ( ; auto30629D51_u <= UnitGroupCount(auto30629D51_g, c_unitCountAll) ; auto30629D51_u += (lv_skull == UnitGroupUnit(auto30629D51_g, auto30629D51_u)) ) {
        lv_skull = UnitGroupUnit(auto30629D51_g, auto30629D51_u);
        if ((lp_ignoreAllies == false) && (libAIAI_gf_HeroAIIsAllyPickingUpSkull(lp_trigPlayer, lv_skull) == true)) {
            continue;
        }

        lv_skullDistance = DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), UnitGetPosition(lv_skull));
        if ((lv_skullDistance < lv_bestSkullDistance)) {
            lv_bestSkull = lv_skull;
            lv_bestSkullDistance = lv_skullDistance;
        }

    }
    if ((UnitIsValid(lv_bestSkull) == true)) {
        libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSUnderworldPickupSkull);
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetSkull = lv_bestSkull;
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_curTargetSkull)), c_orderQueueReplace);
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAIIsAllyPickingUpSkull (int lp_trigPlayer, unit lp_skull) {
    int auto372D9743_ae;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    auto372D9743_ae = libCore_gv_bALMaxPlayers;
    lv_playerIndex = 1;
    for ( ; lv_playerIndex <= auto372D9743_ae ; lv_playerIndex += 1 ) {
        if ((libAIAI_gf_HeroAIIsPlayerActive(lp_trigPlayer, 2) == true) && (lp_trigPlayer != lv_playerIndex) && (libGame_gv_players[lp_trigPlayer].lv_faction == libGame_gv_players[lv_playerIndex].lv_faction) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSUnderworldPickupSkull) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_curTargetSkull == lp_skull) && (UnitIsAlive(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit) == true)) {
            return true;
        }

    }
    return false;
}

void libAIAI_gf_HeroAICleanupUnderworldLogic (int lp_faction) {
    playergroup autoB2950A5B_g;
    int autoB2950A5B_p;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    autoB2950A5B_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAITeamIndexOfFaction(lp_faction)].lv_aIPlayers; 
    autoB2950A5B_p = 1;
    for ( ; autoB2950A5B_p <= PlayerGroupCount(autoB2950A5B_g) ; autoB2950A5B_p += (lv_playerIndex == PlayerGroupPlayer(autoB2950A5B_g, autoB2950A5B_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoB2950A5B_g, autoB2950A5B_p);
        if ((libGame_gv_players[lv_playerIndex].lv_isDead == false) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_wantsToCollectSkulls == false) && (libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit) == true)) {
            libAIAI_gv_aIHeroes[lv_playerIndex].lv_wantsToCollectSkulls = true;
            libAIAI_gf_HeroAIStartUnderworldKillMinions(lv_playerIndex);
        }

    }
}

void libAIAI_gf_HeroAIAbathurLogic (int lp_faction) {
    playergroup autoDCCB236A_g;
    int autoDCCB236A_p;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    autoDCCB236A_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAITeamIndexOfFaction(lp_faction)].lv_aIPlayers; 
    autoDCCB236A_p = 1;
    for ( ; autoDCCB236A_p <= PlayerGroupCount(autoDCCB236A_g) ; autoDCCB236A_p += (lv_playerIndex == PlayerGroupPlayer(autoDCCB236A_g, autoDCCB236A_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoDCCB236A_g, autoDCCB236A_p);
        if ((UnitGetType(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit) == "HeroAbathur") && (libAIAI_gf_HeroAIIsHigherPriority(lv_playerIndex, libAIAI_ge_HeroAIPriority_AbathurLogicAnyState) == true)) {
            libAIAI_gf_HeroAILeaveCurrentObjective(lv_playerIndex);
            libAIAI_gv_aIHeroes[lv_playerIndex].lv_wantsToUseAbathurLogic = true;
            if ((libAIAI_gf_HeroAIHaveEnemiesBeenSeenInLane(lp_faction) == false) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_desiredLane != 0) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentLane != 0)) {
                libAIAI_gf_HeroAIStartAbathurAdvanceLane(lv_playerIndex);
            }
            else {
                libAIAI_gv_aIHeroes[lv_playerIndex].lv_wantsToGoHome = true;
            }
        }

    }
}

void libAIAI_gf_HeroAIStartAbathurAdvanceLane (int lp_trigPlayer) {
    // Implementation
    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSAbathurAdvanceInLane);
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneOffset = 0.0;
    libAIAI_gf_HeroAIUpdateLaneTargetPosition(lp_trigPlayer, true);
}

void libAIAI_gf_HeroAIStartAbathurRetreatLane (int lp_trigPlayer) {
    // Implementation
    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSAbathurRetreatInLane);
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_laneOffset = 0.0;
    libAIAI_gf_HeroAIUpdateLaneTargetPosition(lp_trigPlayer, false);
}

void libAIAI_gf_HeroAIStartAbathurHideInTown (int lp_trigPlayer) {
    // Variable Declarations
    point lv_hideInTownPosition;

    // Variable Initialization

    // Implementation
    libAIAI_gf_HeroAIChangeState(lp_trigPlayer, libAIAI_ge_HeroAIStates_HSAbathurHideInTown);
    lv_hideInTownPosition = libAIAI_gf_HeroAIGetHideInTownPosition(lp_trigPlayer, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane);
    HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, OrderTargetingPoint(AbilityCommand("move", 0), lv_hideInTownPosition), c_orderQueueReplace);
}

point libAIAI_gf_HeroAIGetHideInTownPosition (int lp_trigPlayer, int lp_laneIndex) {
    // Variable Declarations
    fixed lv_frontTowerLanePosition;
    fixed lv_hideInTownLanePosition;

    // Variable Initialization

    // Implementation
    lv_frontTowerLanePosition = libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[lp_laneIndex].lv_frontTowerPosition;
    lv_hideInTownLanePosition = libAIAI_gf_AIRetreatLanePosition(libGame_gv_players[lp_trigPlayer].lv_faction, lp_laneIndex, lv_frontTowerLanePosition, libAIAI_gv_aIHeroAbathurFarBehindFrontTowerDistance);
    return AILaneWaypointConvertWaydistOffsetToPoint(lp_laneIndex, lv_hideInTownLanePosition, 0.0);
}

void libAIAI_gf_HeroAIWaitInSpawnLogic (int lp_faction) {
    playergroup auto8186535D_g;
    int auto8186535D_p;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    auto8186535D_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAITeamIndexOfFaction(lp_faction)].lv_aIPlayers; 
    auto8186535D_p = 1;
    for ( ; auto8186535D_p <= PlayerGroupCount(auto8186535D_g) ; auto8186535D_p += (lv_playerIndex == PlayerGroupPlayer(auto8186535D_g, auto8186535D_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto8186535D_g, auto8186535D_p);
        if ((libAIAI_gv_aIHeroes[lv_playerIndex].lv_shouldWaitInSpawn == true) && (libAIAI_gf_HeroAIIsHigherPriority(lv_playerIndex, libAIAI_ge_HeroAIPriority_WaitInSpawnAnyState) == true)) {
            libAIAI_gf_HeroAILeaveCurrentObjective(lv_playerIndex);
            libAIAI_gv_aIHeroes[lv_playerIndex].lv_wantsToWaitInSpawn = true;
            libAIAI_gv_aIHeroes[lv_playerIndex].lv_wantsToGoHome = true;
        }

    }
}

void libAIAI_gf_AIMaintainDistancefromTarget (int lp_playerIndex, unit lp_heroUnit, unit lp_targetUnit, abilcmd lp_heroBasicAttackAbil, abilcmd lp_heroAttackTowardsAbil) {
    // Variable Declarations
    point lv_heroPos;
    order lv_order;
    unit lv_targetUnit;
    point lv_targetPos;
    fixed lv_weaponRange;
    abilcmd lv_abilityCmd;
    point lv_retreatPos;
    point lv_destPos;

    // Variable Initialization
    lv_targetUnit = lp_targetUnit;

    // Implementation
    if (((UnitIsAlive(lp_heroUnit) == false) || (UnitIsValid(lp_heroUnit) == false))) {
        return ;
    }

    lv_heroPos = UnitGetPosition(lp_heroUnit);
    lv_order = UnitOrder(lp_heroUnit, 0);
    if ((lv_order != null)) {
        lv_abilityCmd = OrderGetAbilityCommand(lv_order);
        if ((lv_abilityCmd == AbilityCommand("move", 0)) && (OrderGetTargetType(lv_order) == c_orderTargetUnit)) {
            if ((UnitIsAlive(OrderGetTargetUnit(lv_order)) == true)) {
                UnitIssueOrder(lp_heroUnit, OrderTargetingPoint(lp_heroBasicAttackAbil, UnitGetPosition(OrderGetTargetUnit(lv_order))), c_orderQueueReplace);
            }
            else {
                UnitIssueOrder(lp_heroUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
            }
            return ;
        }

    }

    if (((lv_abilityCmd == AbilityCommand("move", 3)) || (lv_abilityCmd == AbilityCommand("attack", 0)) || (lv_abilityCmd == lp_heroBasicAttackAbil) || (lv_abilityCmd == lp_heroAttackTowardsAbil) || (lv_abilityCmd == libAIAI_gv_aIHeroes[lp_playerIndex].lv_attackAbility))) {
        if ((OrderGetTargetType(lv_order) == c_orderTargetUnit) && (UnitIsAlive(OrderGetTargetUnit(lv_order)) == true) && (UnitIsValid(OrderGetTargetUnit(lv_order)) == true)) {
            lv_targetUnit = OrderGetTargetUnit(lv_order);
        }

    }
    else {
        return ;
    }
    lv_weaponRange = libAIAI_gf_AIGetActiveWeaponRange(lp_heroUnit);
    if (((UnitIsValid(lp_targetUnit) == false) || (UnitIsAlive(lv_targetUnit) == false) || (DistanceSquaredBetweenPoints(lv_heroPos, UnitGetPosition(lv_targetUnit)) > (lv_weaponRange*lv_weaponRange)))) {
        return ;
    }

    lv_targetPos = UnitGetPosition(lv_targetUnit);
    lv_retreatPos = libAIAI_gf_HeroAIGetRetreatPosition(lp_playerIndex, (lv_weaponRange-0.5), null);
    lv_destPos = libCore_gf_AdvancePointinDirection(lv_targetPos, AIGetDirection(lv_targetPos, lv_retreatPos), (lv_weaponRange-0.5));
    if ((((lv_order != null) && (DistanceSquaredBetweenPoints(OrderGetTargetPosition(lv_order), lv_destPos) > 0.5))) && (DistanceSquaredBetweenPoints(lv_heroPos, lv_destPos) > 0.5)) {
        HeroAIUnitIssueOrder(lp_heroUnit, OrderTargetingUnit(libAIAI_gv_aIHeroes[lp_playerIndex].lv_attackAbility, lv_targetUnit), c_orderQueueReplace);
        HeroAIUnitIssueOrder(lp_heroUnit, OrderTargetingPoint(lp_heroBasicAttackAbil, lv_destPos), c_orderQueueReplace);
    }

}

point libAIAI_gf_HeroAIFindBestMercCampScoutPoint (int lp_player, unit lp_callingUnit, fixed lp_maxDistance) {
    int autoF958BDCB_ae;
    int auto13DCBFEB_ae;

    // Variable Declarations
    int[libMapM_gv_jungleMaxCamps + 1] lv_validCampIndices;
    int lv_campIndex;
    int lv_loopIndex;
    int lv_targetCampIndex;
    int lv_randomCampIndex;
    int lv_validCampCount;
    point lv_targetPosition;
    bool lv_orderFaction;
    int lv_factionIndex;

    // Variable Initialization
    lv_factionIndex = 1;

    // Implementation
    if ((libGame_gv_players[lp_player].lv_faction == libGame_ge_Faction_Order)) {
        lv_orderFaction = true;
        lv_factionIndex = 0;
    }

    if ((libAIAI_gv_heroAITeamCampData[lv_factionIndex].lv_startCampCheckTimer < TimerGetElapsed(libGame_gv_gameTimer))) {
        return null;
    }

    autoF958BDCB_ae = libMapM_gv_jungleMaxCamps;
    lv_loopIndex = 1;
    for ( ; lv_loopIndex <= autoF958BDCB_ae ; lv_loopIndex += 1 ) {
        if ((lv_orderFaction == true)) {
            lv_campIndex = libAIAI_gv_heroAIOrderMercCampList[lv_loopIndex];
        }
        else {
            lv_campIndex = libAIAI_gv_heroAIChaosMercCampList[lv_loopIndex];
        }
        if ((lv_campIndex <= 0)) {
            return null;
        }

        if ((UnitGetOwner(libMapM_gv_jungleCreepCamps[lv_campIndex].lv_campOwnershipFlagUnit) == libCore_gv_cOMPUTER_Hostile)) {
            if ((VisIsVisibleForPlayer(lp_player, libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mapDataCampCaptainSpawnPoint) == true)) {
                return null;
            }

            if (((lv_validCampCount + 1) < libMapM_gv_jungleMaxCamps)) {
                lv_validCampIndices[lv_validCampCount] = lv_campIndex;
                lv_validCampCount = (lv_validCampCount + 1);
            }
            else {
                break;
            }
        }

    }
    auto13DCBFEB_ae = libMapM_gv_jungleMaxCamps;
    lv_loopIndex = 1;
    for ( ; lv_loopIndex <= auto13DCBFEB_ae ; lv_loopIndex += 1 ) {
        if ((lv_orderFaction == true)) {
            lv_campIndex = libAIAI_gv_heroAIChaosMercCampList[lv_loopIndex];
        }
        else {
            lv_campIndex = libAIAI_gv_heroAIOrderMercCampList[lv_loopIndex];
        }
        if ((lv_campIndex <= 0)) {
            return null;
        }

        if ((UnitGetOwner(libMapM_gv_jungleCreepCamps[lv_campIndex].lv_campOwnershipFlagUnit) == libCore_gv_cOMPUTER_Hostile)) {
            if ((VisIsVisibleForPlayer(lp_player, libMapM_gv_jungleCreepCamps[lv_campIndex].lv_mapDataCampCaptainSpawnPoint) == true)) {
                return null;
            }

            if (((lv_validCampCount + 1) < libMapM_gv_jungleMaxCamps)) {
                lv_validCampIndices[lv_validCampCount] = lv_campIndex;
                lv_validCampCount = (lv_validCampCount + 1);
            }
            else {
                break;
            }
        }

    }
    if ((lv_validCampCount != 0)) {
        lv_randomCampIndex = RandomInt(0, (lv_validCampCount - 1));
        lv_targetCampIndex = lv_validCampIndices[lv_randomCampIndex];
        return PointWithOffsetPolar(libMapM_gv_jungleCreepCamps[lv_targetCampIndex].lv_mapDataCampCaptainSpawnPoint, RandomFixed(0.0, 1.5), libNtve_gf_RandomAngle());
    }

    return null;
}

int libAIAI_gf_HeroAINumberOfAIAssignedToCustomMapObjective (int lp_faction) {
    playergroup autoACFC208A_g;
    int autoACFC208A_p;

    // Variable Declarations
    int lv_playerIndex;
    int lv_playerCount;

    // Variable Initialization

    // Implementation
    autoACFC208A_g = libAIAI_gv_heroAITeamPlayerData[libAIAI_gf_HeroAITeamIndexOfFaction(lp_faction)].lv_aIPlayers; 
    autoACFC208A_p = 1;
    for ( ; autoACFC208A_p <= PlayerGroupCount(autoACFC208A_g) ; autoACFC208A_p += (lv_playerIndex == PlayerGroupPlayer(autoACFC208A_g, autoACFC208A_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoACFC208A_g, autoACFC208A_p);
        if (((libAIAI_gf_HeroAIGetCurrentObjective(lv_playerIndex) == libAIAI_ge_HeroAIObjective_CustomMapObj))) {
            lv_playerCount += 1;
        }

    }
    return lv_playerCount;
}

unit libAIAI_gf_HeroAIGetHeroOrVehicle (int lp_trigPlayer) {
    // Implementation
    if ((UnitIsValid(libGame_gv_players[lp_trigPlayer].lv_activeVehicle) == true)) {
        return libGame_gv_players[lp_trigPlayer].lv_activeVehicle;
    }
    else {
        if ((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lp_trigPlayer) == true)) {
            return libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit;
        }
        else {
            return libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit;
        }
    }
}

void libAIAI_gf_HeroAIPlayerPingsCore (int lp_pingingPlayer, unit lp_pingedCore) {
    // Variable Declarations
    int lv_teamIndex;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIIsPlayerActive(lp_pingingPlayer, 1) == false)) {
        return ;
    }

    if ((libNtve_gf_PlayerIsEnemy(lp_pingingPlayer, UnitGetOwner(lp_pingedCore), libNtve_ge_PlayerRelation_Ally) == true)) {
        libAIAI_gv_heroAITeamDefendCorePingData[lv_teamIndex].lv_pingExpireTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroDefendCorePingDuration);
        libAIAI_gv_heroAITeamDefendCorePingData[lv_teamIndex].lv_playerWhoPinged = lp_pingingPlayer;
        libAIAI_gv_heroAITeamDefendCorePingData[lv_teamIndex].lv_pingedCore = lp_pingedCore;
    }
    else {
        libAIAI_gv_heroAITeamFocusCorePingData[lv_teamIndex].lv_pingExpireTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroFocusCorePingDuration);
        libAIAI_gv_heroAITeamFocusCorePingData[lv_teamIndex].lv_playerWhoPinged = lp_pingingPlayer;
        libAIAI_gv_heroAITeamFocusCorePingData[lv_teamIndex].lv_pingedCore = lp_pingedCore;
    }
}

void libAIAI_gf_HeroAIPlayerPingsDefendTownStructure (int lp_pingingPlayer, unit lp_pingedStructure) {
    int autoEB02BD43_ae;
    int autoEB02BD43_ai;

    // Variable Declarations
    int lv_teamIndex;
    int lv_testPingIndex;
    int lv_newPingIndex;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIIsPlayerActive(lp_pingingPlayer, 1) == false)) {
        return ;
    }

    if ((libNtve_gf_PlayerIsEnemy(lp_pingingPlayer, UnitGetOwner(lp_pingedStructure), libNtve_ge_PlayerRelation_Ally) == false)) {
        return ;
    }

    lv_teamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_pingingPlayer);
    autoEB02BD43_ae = libAIAI_gv_heroAIMaxTownPingCount;
    autoEB02BD43_ai = 1;
    lv_testPingIndex = 1;
    for ( ; ( (autoEB02BD43_ai >= 0 && lv_testPingIndex <= autoEB02BD43_ae) || (autoEB02BD43_ai <= 0 && lv_testPingIndex >= autoEB02BD43_ae) ) ; lv_testPingIndex += autoEB02BD43_ai ) {
        if ((libAIAI_gv_heroAITeamDefendTownPingData[lv_teamIndex].lv_townPings[lv_testPingIndex].lv_pingExpireTime <= TimerGetElapsed(libGame_gv_gameTimer))) {
            lv_newPingIndex = lv_testPingIndex;
            break;
        }

    }
    if ((lv_newPingIndex == 0)) {
        return ;
    }

    libAIAI_gv_heroAITeamDefendTownPingData[lv_teamIndex].lv_townPings[lv_newPingIndex].lv_pingExpireTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroDefendTownStructurePingDuration);
    libAIAI_gv_heroAITeamDefendTownPingData[lv_teamIndex].lv_townPings[lv_newPingIndex].lv_playerWhoPinged = lp_pingingPlayer;
    libAIAI_gv_heroAITeamDefendTownPingData[lv_teamIndex].lv_townPings[lv_newPingIndex].lv_pingedStructure = lp_pingedStructure;
}

void libAIAI_gf_HeroAIPlayerPingsPushTownStructure (int lp_pingingPlayer, unit lp_pingedStructure) {
    int auto9926509A_ae;
    int auto9926509A_ai;

    // Variable Declarations
    int lv_teamIndex;
    int lv_testPingIndex;
    int lv_newPingIndex;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIIsPlayerActive(lp_pingingPlayer, 1) == false)) {
        return ;
    }

    if ((libNtve_gf_PlayerIsEnemy(lp_pingingPlayer, UnitGetOwner(lp_pingedStructure), libNtve_ge_PlayerRelation_Enemy) == true)) {
        return ;
    }

    lv_teamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_pingingPlayer);
    auto9926509A_ae = libAIAI_gv_heroAIMaxTownPingCount;
    auto9926509A_ai = 1;
    lv_testPingIndex = 1;
    for ( ; ( (auto9926509A_ai >= 0 && lv_testPingIndex <= auto9926509A_ae) || (auto9926509A_ai <= 0 && lv_testPingIndex >= auto9926509A_ae) ) ; lv_testPingIndex += auto9926509A_ai ) {
        if ((libAIAI_gv_heroAITeamPushTownPingData[lv_teamIndex].lv_townPings[lv_testPingIndex].lv_pingExpireTime == TimerGetElapsed(libGame_gv_gameTimer))) {
            lv_newPingIndex = lv_testPingIndex;
            break;
        }

    }
    if ((lv_newPingIndex == 0)) {
        return ;
    }

    libAIAI_gv_heroAITeamPushTownPingData[lv_teamIndex].lv_townPings[lv_newPingIndex].lv_pingExpireTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroDefendTownStructurePingDuration);
    libAIAI_gv_heroAITeamPushTownPingData[lv_teamIndex].lv_townPings[lv_newPingIndex].lv_playerWhoPinged = lp_pingingPlayer;
    libAIAI_gv_heroAITeamPushTownPingData[lv_teamIndex].lv_townPings[lv_newPingIndex].lv_pingedStructure = lp_pingedStructure;
}

void libAIAI_gf_HeroAIPlayerPingsLanerMerc (int lp_pingingPlayer, unit lp_pingedMerc, bool lp_isBoss, bool lp_isVehicle) {
    int auto08A88D3E_ae;
    int auto08A88D3E_ai;

    // Variable Declarations
    int lv_teamIndex;
    int lv_testPingIndex;
    int lv_newPingIndex;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIIsPlayerActive(lp_pingingPlayer, 1) == false)) {
        return ;
    }

    lv_teamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_pingingPlayer);
    auto08A88D3E_ae = libAIAI_gv_heroAIMaxLanerMercPingCount;
    auto08A88D3E_ai = 1;
    lv_testPingIndex = 1;
    for ( ; ( (auto08A88D3E_ai >= 0 && lv_testPingIndex <= auto08A88D3E_ae) || (auto08A88D3E_ai <= 0 && lv_testPingIndex >= auto08A88D3E_ae) ) ; lv_testPingIndex += auto08A88D3E_ai ) {
        if ((libAIAI_gf_HeroAIIsLanerMercPingStillActive(lv_teamIndex, lv_testPingIndex) == false)) {
            lv_newPingIndex = lv_testPingIndex;
            break;
        }

    }
    if ((lv_newPingIndex == 0)) {
        return ;
    }

    libAIAI_gv_heroAITeamLanerMercPingData[lv_teamIndex].lv_lanerMercPings[lv_newPingIndex].lv_pingExpireTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroLanerMercPingDuration);
    libAIAI_gv_heroAITeamLanerMercPingData[lv_teamIndex].lv_lanerMercPings[lv_newPingIndex].lv_playerWhoPinged = lp_pingingPlayer;
    libAIAI_gv_heroAITeamLanerMercPingData[lv_teamIndex].lv_lanerMercPings[lv_newPingIndex].lv_pingedMerc = lp_pingedMerc;
    libAIAI_gv_heroAITeamLanerMercPingData[lv_teamIndex].lv_lanerMercPings[lv_newPingIndex].lv_isBossMerc = lp_isBoss;
    libAIAI_gv_heroAITeamLanerMercPingData[lv_teamIndex].lv_lanerMercPings[lv_newPingIndex].lv_isVehicleMerc = lp_isVehicle;
    libAIAI_gv_heroAITeamLanerMercPingData[lv_teamIndex].lv_lanerMercPings[lv_newPingIndex].lv_laneIndex = libAIAI_gf_HeroAIGetCurrentLaneForMercPing(lv_teamIndex, lv_newPingIndex, true);
}

bool libAIAI_gf_HeroAIIsLanerMercPingStillActive (int lp_teamIndex, int lp_pingIndex) {
    // Implementation
    if ((libAIAI_gv_heroAITeamLanerMercPingData[lp_teamIndex].lv_lanerMercPings[lp_pingIndex].lv_pingExpireTime > TimerGetElapsed(libGame_gv_gameTimer))) {
        return true;
    }
    else {
        if ((libAIAI_gv_heroAITeamLanerMercPingData[lp_teamIndex].lv_lanerMercPings[lp_pingIndex].lv_isBossMerc == true) && (UnitIsAlive(libAIAI_gv_heroAITeamLanerMercPingData[lp_teamIndex].lv_lanerMercPings[lp_pingIndex].lv_pingedMerc) == true) && (libAIAI_gv_heroAITeamLanerMercPingData[lp_teamIndex].lv_lanerMercPings[lp_pingIndex].lv_pingExpireTime > (TimerGetElapsed(libGame_gv_gameTimer) - libAIAI_gv_aIHeroLanerMercPingBossExtendDuration))) {
            return true;
        }

    }
    return false;
}

int libAIAI_gf_HeroAIGetCurrentLaneForMercPing (int lp_teamIndex, int lp_pingIndex, bool lp_initialDetermination) {
    // Variable Declarations
    int lv_laneIndex;

    // Variable Initialization

    // Implementation
    if ((lp_initialDetermination == false) && (libAIAI_gv_heroAITeamLanerMercPingData[lp_teamIndex].lv_lanerMercPings[lp_pingIndex].lv_isVehicleMerc == false) && (libAIAI_gv_heroAITeamLanerMercPingData[lp_teamIndex].lv_lanerMercPings[lp_pingIndex].lv_laneIndex > 0)) {
        return libAIAI_gv_heroAITeamLanerMercPingData[lp_teamIndex].lv_lanerMercPings[lp_pingIndex].lv_laneIndex;
    }

    if ((libAIAI_gv_heroAITeamLanerMercPingData[lp_teamIndex].lv_lanerMercPings[lp_pingIndex].lv_isVehicleMerc == false)) {
        lv_laneIndex = libAIAI_gf_MinionAIGetLaneForMinion(libAIAI_gv_heroAITeamLanerMercPingData[lp_teamIndex].lv_lanerMercPings[lp_pingIndex].lv_pingedMerc);
        if ((lv_laneIndex > 0)) {
            return lv_laneIndex;
        }

    }

    libGame_gf_CalculateClosestLaneData(UnitGetPosition(libAIAI_gv_heroAITeamLanerMercPingData[lp_teamIndex].lv_lanerMercPings[lp_pingIndex].lv_pingedMerc));
    if ((libGame_gv_closestLaneData.lv_laneData[libGame_gv_closestLaneData.lv_closestLane].lv_closestDist <= libAIAI_gv_aIHeroCloseToLaneDistance)) {
        return libGame_gv_closestLaneData.lv_closestLane;
    }

    return 0;
}

bool libAIAI_gf_HeroAIIsPlayerActive (int lp_trigPlayer, int lp_type) {
    // Implementation
    if (((lp_trigPlayer > libCore_gv_bALMaxEnginePlayerCount) || (lp_trigPlayer < 0))) {
        return false;
    }

    if ((UnitIsValid(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) == false)) {
        return false;
    }

    if ((lp_type == 0)) {
        return true;
    }

    if ((lp_type == 1)) {
        if ((PlayerStatus(lp_trigPlayer) == c_playerStatusActive) && (PlayerType(lp_trigPlayer) == c_playerTypeUser) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSUnused)) {
            return true;
        }
        else {
            return false;
        }
    }
    else {
        if ((PlayerStatus(lp_trigPlayer) == c_playerStatusActive) && (PlayerType(lp_trigPlayer) == c_playerTypeUser) && (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSUnused)) {
            return false;
        }
        else {
            return true;
        }
    }
}

bool libAIAI_gf_HeroAICanPlayerPingPlayerForHelp (int lp_pingingPlayer, int lp_pingedPlayer) {
    // Variable Declarations
    bool lv_playersArePaired;

    // Variable Initialization

    // Implementation
    lv_playersArePaired = (libGame_gv_players[lp_pingingPlayer].lv_heroData.lv_isPaired && libGame_gv_players[lp_pingedPlayer].lv_heroData.lv_isPaired);
    return !(lv_playersArePaired);
}

bool libAIAI_gf_HeroAIIsTeamBusy (int lp_faction) {
    int auto8D831914_ae;
    int auto8D831914_ai;

    // Variable Declarations
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    auto8D831914_ae = libCore_gv_bALMaxPlayers;
    auto8D831914_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (auto8D831914_ai >= 0 && lv_playerIndex <= auto8D831914_ae) || (auto8D831914_ai <= 0 && lv_playerIndex >= auto8D831914_ae) ) ; lv_playerIndex += auto8D831914_ai ) {
        if ((libGame_gv_players[lv_playerIndex].lv_faction == lp_faction) && (libAIAI_gf_HeroAIIsHigherPriority(lv_playerIndex, libAIAI_ge_HeroAIPriority_GenericPreformTeamStrategy) == false)) {
            return true;
        }

    }
    return false;
}

bool libAIAI_gf_HeroAIIsPlayerBehindLanePosition (int lp_player, fixed lp_lanePosition) {
    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_player].lv_currentLane == 0)) {
        return false;
    }

    libAIAI_gf_HeroAIEval(lp_player);
    if ((libGame_gv_players[lp_player].lv_faction == libGame_ge_Faction_Order)) {
        return (libAIAI_gv_aIHeroes[lp_player].lv_heroLanePosition <= lp_lanePosition);
    }
    else {
        return (libAIAI_gv_aIHeroes[lp_player].lv_heroLanePosition >= lp_lanePosition);
    }
}

bool libAIAI_gf_HeroAIIsPlayerDefendingTown (int lp_trigPlayer) {
    // Variable Declarations
    fixed lv_lanePosition;
    point lv_lanePoint;
    point lv_frontTowerPosition;
    int lv_frontTown;
    region lv_townDefendRegion;
    unitgroup lv_enemies;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();

    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane <= 0)) {
        return false;
    }

    lv_townDefendRegion = RegionEmpty();
    lv_lanePosition = libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_frontTowerPosition;
    lv_lanePoint = AILaneWaypointConvertWaydistOffsetToPoint(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane, lv_lanePosition, 0.0);
    RegionAddRegion(lv_townDefendRegion, RegionCircle(lv_lanePoint, 12.0));
    lv_lanePosition = libAIAI_gf_AIRetreatLanePosition(libGame_gv_players[lp_trigPlayer].lv_faction, libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane, lv_lanePosition, 8.0);
    lv_lanePoint = AILaneWaypointConvertWaydistOffsetToPoint(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane, lv_lanePosition, 0.0);
    RegionAddRegion(lv_townDefendRegion, RegionCircle(lv_lanePoint, 12.0));
    if ((libNtve_gf_UnitInRegion(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_townDefendRegion) == false)) {
        return false;
    }

    lv_enemies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, lv_townDefendRegion, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
    if ((UnitGroupCount(lv_enemies, c_unitCountAlive) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAIIsPlayerAttackingTown (int lp_trigPlayer) {
    // Variable Declarations
    region lv_nearbyRegion;
    unitgroup lv_enemies;
    unitgroup lv_enemyTowers;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_enemyTowers = UnitGroupEmpty();

    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane <= 0)) {
        return false;
    }

    lv_nearbyRegion = RegionCircle(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), 12.0);
    lv_enemies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, lv_nearbyRegion, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    lv_enemyTowers = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, 0, 0), 0);
    if ((UnitGroupCount(lv_enemyTowers, c_unitCountAlive) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAIIsPlayerInsideEnemyTown (int lp_trigPlayer) {
    int auto882C4B74_ae;
    int auto882C4B74_ai;

    // Variable Declarations
    playergroup lv_enemyTeam;
    int lv_townIndex;

    // Variable Initialization
    lv_enemyTeam = PlayerGroupEmpty();

    // Implementation
    lv_enemyTeam = libGame_gf_EnemyPlayerGroupOfPlayer(lp_trigPlayer);
    auto882C4B74_ae = libGame_gv_townTownCount;
    auto882C4B74_ai = 1;
    lv_townIndex = 1;
    for ( ; ( (auto882C4B74_ai >= 0 && lv_townIndex <= auto882C4B74_ae) || (auto882C4B74_ai <= 0 && lv_townIndex >= auto882C4B74_ae) ) ; lv_townIndex += auto882C4B74_ai ) {
        if ((libGame_gv_townTownData[lv_townIndex].lv_townHallIndex != -1) && (PlayerGroupHasPlayer(lv_enemyTeam, libGame_gv_townTownData[lv_townIndex].lv_owner) == true) && (UnitIsAlive(libGame_gv_townTownData[lv_townIndex].lv_structureUnits[libGame_gv_townTownData[lv_townIndex].lv_townHallIndex]) == true) && (RegionContainsPoint(libGame_gv_townTownData[lv_townIndex].lv_townRegion, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) == true)) {
            return true;
        }

    }
    return false;
}

bool libAIAI_gf_HeroAIIsPlayerInsideBase (int lp_trigPlayer) {
    // Variable Declarations
    region lv_baseRegion;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order)) {
        lv_baseRegion = libCore_gv_mAPOrderBaseRegion;
    }
    else {
        lv_baseRegion = libCore_gv_mAPChaosBaseRegion;
    }
    if ((lv_baseRegion == null)) {
        return false;
    }

    return libNtve_gf_UnitInRegion(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_baseRegion);
}

bool libAIAI_gf_HeroAIIsPlayerInsideEnemyBase (int lp_trigPlayer) {
    // Variable Declarations
    region lv_baseRegion;

    // Variable Initialization

    // Implementation
    if ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order)) {
        lv_baseRegion = libCore_gv_mAPChaosBaseRegion;
    }
    else {
        lv_baseRegion = libCore_gv_mAPOrderBaseRegion;
    }
    if ((lv_baseRegion == null)) {
        return false;
    }

    return libNtve_gf_UnitInRegion(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, lv_baseRegion);
}

bool libAIAI_gf_HeroAIIsPlayerAtSpawn (int lp_trigPlayer) {
    // Implementation
    return UnitHasBehavior2(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, "NearShop");
}

bool libAIAI_gf_HeroAIIsPlayerNearSpawn (int lp_trigPlayer) {
    // Implementation
    return (DistanceSquaredBetweenPoints(RegionGetCenter(libMapM_gv_mMSafeRegions[libGame_gf_TeamNumberOfFaction(libGame_gv_players[lp_trigPlayer].lv_faction)]), UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) < 289.0);
}

bool libAIAI_gf_HeroAIIsTargetBehindGateRelativeToAttacker (unit lp_targetUnit, unit lp_attackingUnit) {
    int autoF1A33D95_ae;
    int autoF1A33D95_ai;
    int auto88A5AB35_ae;
    int auto88A5AB35_ai;

    // Variable Declarations
    playergroup lv_allyTeam;
    int lv_townIndex;
    int lv_structureIndex;
    fixed lv_gateToTownDistanceSquared;
    point lv_townPosition;
    point lv_gatePosition;
    point lv_attackerPosition;
    fixed lv_attackerToTownDistanceSquared;

    // Variable Initialization
    lv_allyTeam = PlayerGroupEmpty();

    // Implementation
    lv_allyTeam = libGame_gf_AlliedPlayerGroupOfPlayer(UnitGetOwner(lp_targetUnit));
    autoF1A33D95_ae = libGame_gv_townTownCount;
    autoF1A33D95_ai = 1;
    lv_townIndex = 1;
    for ( ; ( (autoF1A33D95_ai >= 0 && lv_townIndex <= autoF1A33D95_ae) || (autoF1A33D95_ai <= 0 && lv_townIndex >= autoF1A33D95_ae) ) ; lv_townIndex += autoF1A33D95_ai ) {
        if ((libGame_gv_townTownData[lv_townIndex].lv_townHallIndex != -1) && (PlayerGroupHasPlayer(lv_allyTeam, libGame_gv_townTownData[lv_townIndex].lv_owner) == true) && (RegionContainsPoint(libGame_gv_townTownData[lv_townIndex].lv_townRegion, UnitGetPosition(lp_targetUnit)) == true)) {
            lv_townPosition = UnitGetPosition(libGame_gv_townTownData[lv_townIndex].lv_structureUnits[libGame_gv_townTownData[lv_townIndex].lv_townHallIndex]);
            auto88A5AB35_ae = libGame_gv_townTownData[lv_townIndex].lv_structureCount;
            auto88A5AB35_ai = 1;
            lv_structureIndex = 1;
            for ( ; ( (auto88A5AB35_ai >= 0 && lv_structureIndex <= auto88A5AB35_ae) || (auto88A5AB35_ai <= 0 && lv_structureIndex >= auto88A5AB35_ae) ) ; lv_structureIndex += auto88A5AB35_ai ) {
                if ((libGame_gv_townTownData[lv_townIndex].lv_structureTypes[lv_structureIndex] == libGame_ge_TownStructureTypes_Gate) && (UnitIsAlive(libGame_gv_townTownData[lv_townIndex].lv_structureUnits[lv_structureIndex]) == true)) {
                    lv_gatePosition = UnitGetPosition(libGame_gv_townTownData[lv_townIndex].lv_structureUnits[lv_structureIndex]);
                    lv_gateToTownDistanceSquared = DistanceSquaredBetweenPoints(lv_gatePosition, lv_townPosition);
                    if ((DistanceSquaredBetweenPoints(UnitGetPosition(lp_targetUnit), lv_townPosition) < lv_gateToTownDistanceSquared)) {
                        if ((UnitIsValid(lp_attackingUnit) == false)) {
                            return true;
                        }

                        lv_attackerPosition = UnitGetPosition(lp_attackingUnit);
                        lv_attackerToTownDistanceSquared = DistanceSquaredBetweenPoints(lv_attackerPosition, lv_townPosition);
                        if (((lv_attackerToTownDistanceSquared > lv_gateToTownDistanceSquared) || (RegionContainsPoint(libGame_gv_townTownData[lv_townIndex].lv_townRegion, UnitGetPosition(lp_attackingUnit)) == false)) && (lv_attackerToTownDistanceSquared > DistanceSquaredBetweenPoints(lv_attackerPosition, lv_gatePosition))) {
                            return true;
                        }

                    }

                }

            }
        }

    }
    return false;
}

fixed libAIAI_gf_HeroAIEvaluateTarget (int lp_trigPlayer, unit lp_target, fixed lp_distanceWeight) {
    // Variable Declarations
    fixed lv_distance;
    fixed lv_weaponRange;
    fixed lv_healthPercent;

    // Variable Initialization

    // Implementation
    lv_weaponRange = libAIAI_gf_AIGetActiveWeaponRange(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    lv_distance = MaxF((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), UnitGetPosition(lp_target)) - lv_weaponRange), 0.0);
    lv_healthPercent = UnitGetPropertyFixed(lp_target, c_unitPropLifePercent, c_unitPropCurrent);
    return (lv_healthPercent + (lv_distance * lp_distanceWeight));
}

bool libAIAI_gf_HeroAIAIDifficultyLevelShouldUseHero (int lp_player, int lp_heroIndex) {
    // Variable Declarations
    string lv_heroType;
    int lv_maxTier;
    int lv_tierIndex;
    int lv_arrayIndex;

    // Variable Initialization

    // Implementation
    if (((PlayerType(lp_player) == c_playerTypeComputer) || (PlayerStatus(lp_player) == c_playerStatusLeft))) {
        lv_maxTier = libAIAI_gv_aIHeroHighestHeroSelectTier[(libAIAI_gv_aIHeroes[lp_player].lv_difficulty)];
        if ((lv_maxTier >= DataTableGetInt(true, ("HeroIndex_" + IntToString(lp_heroIndex) + "_HeroAITier")))) {
            return true;
        }

        return false;
    }

    return true;
}

int libAIAI_gf_HeroAIGetAllyTeamIndex (int lp_player) {
    // Implementation
    if ((libGame_gv_players[lp_player].lv_faction == libGame_ge_Faction_Order)) {
        return (0);
    }
    else {
        return (1);
    }
}

int libAIAI_gf_HeroAIGetEnemyTeamIndex (int lp_player) {
    // Implementation
    if ((libGame_gv_players[lp_player].lv_faction == libGame_ge_Faction_Order)) {
        return (1);
    }
    else {
        return (0);
    }
}

bool libAIAI_gf_HeroAIMercsAttackingLane (int lp_faction, int lp_laneIndex) {
    // Variable Declarations
    int lv_teamIndex;
    point lv_contentionPoint;

    // Variable Initialization

    // Implementation
    if ((lp_laneIndex == 0)) {
        return false;
    }

    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    lv_contentionPoint = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lp_laneIndex].lv_contentionPoint;
    if ((libCore_gf_TestLocationClosertoFactionSide(lv_contentionPoint, lp_faction, 1.0) == true) && ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lp_laneIndex].lv_numEnemySiegeGiants > 0) || (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lp_laneIndex].lv_numEnemyOgres > 0) || (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lp_laneIndex].lv_numEnemyOgreKings > 0) || (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lp_laneIndex].lv_numEnemyDragonKnights > 0))) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAIInLaneWithAllyMercs (int lp_trigPlayer) {
    // Variable Declarations
    int lv_teamIndex;

    // Variable Initialization

    // Implementation
    lv_teamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer);
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane > 0) && ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_numAllySiegeGiants > 0) || (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_numAllyOgres > 0) || (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_numAllyOgreKings > 0) || (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_numAllyDragonKnights > 0))) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAIInLaneWithEnemyMercs (int lp_trigPlayer) {
    // Variable Declarations
    int lv_teamIndex;

    // Variable Initialization

    // Implementation
    lv_teamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer);
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane > 0) && ((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_numEnemySiegeGiants > 0) || (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_numEnemyOgres > 0) || (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_numEnemyOgreKings > 0) || (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane].lv_numEnemyDragonKnights > 0))) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAILaneHasAllMeleeHeroes (int lp_faction, int lp_laneIndex) {
    playergroup auto8318C5DE_g;
    int auto8318C5DE_p;

    // Variable Declarations
    int lv_teamIndex;
    int lv_playerIndex;

    // Variable Initialization

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    auto8318C5DE_g = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lp_laneIndex].lv_allyHeroes; 
    auto8318C5DE_p = 1;
    for ( ; auto8318C5DE_p <= PlayerGroupCount(auto8318C5DE_g) ; auto8318C5DE_p += (lv_playerIndex == PlayerGroupPlayer(auto8318C5DE_g, auto8318C5DE_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(auto8318C5DE_g, auto8318C5DE_p);
        if ((libAIAI_gf_HeroAIIsHeroMelee(lv_playerIndex) == false)) {
            return false;
        }

    }
    return true;
}

bool libAIAI_gf_HeroAIInLaneWithAllMeleeHeroes (int lp_trigPlayer) {
    playergroup autoE6DE5509_g;
    int autoE6DE5509_p;

    // Variable Declarations
    int lv_laneIndex;
    int lv_teamIndex;
    playergroup lv_alliesInLane;
    int lv_playerIndex;

    // Variable Initialization
    lv_alliesInLane = PlayerGroupEmpty();

    // Implementation
    lv_laneIndex = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_desiredLane;
    if ((lv_laneIndex <= 0)) {
        return false;
    }

    lv_teamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer);
    libNtve_gf_AddPlayerGroupToPlayerGroup(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_allyHeroes, lv_alliesInLane);
    PlayerGroupRemove(lv_alliesInLane, lp_trigPlayer);
    if ((PlayerGroupCount(lv_alliesInLane) == 0)) {
        return false;
    }

    autoE6DE5509_g = lv_alliesInLane; 
    autoE6DE5509_p = 1;
    for ( ; autoE6DE5509_p <= PlayerGroupCount(autoE6DE5509_g) ; autoE6DE5509_p += (lv_playerIndex == PlayerGroupPlayer(autoE6DE5509_g, autoE6DE5509_p)) ) {
        lv_playerIndex = PlayerGroupPlayer(autoE6DE5509_g, autoE6DE5509_p);
        if ((libAIAI_gf_HeroAIIsHeroMelee(lv_playerIndex) == false)) {
            return false;
        }

    }
    return true;
}

unitgroup libAIAI_gf_HeroAIEnemyTowersInRange (int lp_trigPlayer, fixed lp_radius, bool lp_ignoreSameLane) {
    unitgroup autoBA281424_g;
    int autoBA281424_u;

    // Variable Declarations
    region lv_areaNearPlayer;
    unitgroup lv_enemyTowers;
    unit lv_tower;
    unitgroup lv_threateningEnemyTowers;
    int lv_townIndex;

    // Variable Initialization
    lv_enemyTowers = UnitGroupEmpty();
    lv_threateningEnemyTowers = UnitGroupEmpty();

    // Implementation
    lv_areaNearPlayer = RegionCircle(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lp_radius);
    lv_enemyTowers = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, lv_areaNearPlayer, UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
    autoBA281424_g = lv_enemyTowers;
    autoBA281424_u = 1;
    for ( ; autoBA281424_u <= UnitGroupCount(autoBA281424_g, c_unitCountAll) ; autoBA281424_u += (lv_tower == UnitGroupUnit(autoBA281424_g, autoBA281424_u)) ) {
        lv_tower = UnitGroupUnit(autoBA281424_g, autoBA281424_u);
        if ((libAIAI_gf_HeroAIIsTowerAThreat(lv_tower) == true)) {
            if ((lp_ignoreSameLane == true)) {
                lv_townIndex = libGame_gf_TownGetTownForUnit(lv_tower);
                if ((lv_townIndex > 0) && (libGame_gv_townTownData[lv_townIndex].lv_lane == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane)) {
                    continue;
                }

            }

            UnitGroupAdd(lv_threateningEnemyTowers, lv_tower);
        }

    }
    return lv_threateningEnemyTowers;
}

bool libAIAI_gf_HeroAIUnitProtectedByTower (unit lp_unit, fixed lp_towerSearchRadius) {
    unitgroup auto2DF23405_g;
    int auto2DF23405_u;

    // Variable Declarations
    region lv_areaNearUnit;
    unitgroup lv_allyTowers;
    unit lv_tower;
    region lv_areaNearTower;
    unitgroup lv_enemyMinions;
    point lv_positionofTargetUnit;

    // Variable Initialization
    lv_allyTowers = UnitGroupEmpty();
    lv_enemyMinions = UnitGroupEmpty();

    // Implementation
    lv_positionofTargetUnit = UnitGetPosition(lp_unit);
    lv_areaNearUnit = RegionCircle(lv_positionofTargetUnit, lp_towerSearchRadius);
    lv_allyTowers = UnitGroupAlliance(UnitGetOwner(lp_unit), c_unitAllianceAlly, lv_areaNearUnit, UnitFilter((1 << c_targetFilterArmored) | (1 << c_targetFilterStructure), 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
    if ((DistanceBetweenPoints(lv_positionofTargetUnit, UnitGetPosition(libGame_gv_teams[libGame_gf_TeamNumberOfPlayer(UnitGetOwner(lp_unit))].lv_core)) <= (lp_towerSearchRadius + 2.0))) {
        UnitGroupAdd(lv_allyTowers, lp_unit);
    }

    auto2DF23405_g = lv_allyTowers;
    auto2DF23405_u = 1;
    for ( ; auto2DF23405_u <= UnitGroupCount(auto2DF23405_g, c_unitCountAll) ; auto2DF23405_u += (lv_tower == UnitGroupUnit(auto2DF23405_g, auto2DF23405_u)) ) {
        lv_tower = UnitGroupUnit(auto2DF23405_g, auto2DF23405_u);
        if ((libAIAI_gf_HeroAIIsTowerAThreat(lv_tower) == false)) {
            continue;
        }

        lv_areaNearTower = RegionCircle(UnitGetPosition(lv_tower), libAIAI_gv_aIHeroCloseToTowerDistance);
        lv_enemyMinions = UnitGroupAlliance(UnitGetOwner(lv_tower), c_unitAllianceEnemy, lv_areaNearTower, UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
        if ((UnitGroupCount(lv_enemyMinions, c_unitCountAlive) <= 1)) {
            return true;
        }

    }
    return false;
}

bool libAIAI_gf_HeroAIIsInRangeOfEnemyTowerOrCore (int lp_trigPlayer) {
    unitgroup auto005A2C05_g;
    int auto005A2C05_u;

    // Variable Declarations
    unit lv_tower;
    fixed lv_towerRange;
    fixed lv_distanceToTower;

    // Variable Initialization

    // Implementation
    auto005A2C05_g = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyTowers;
    auto005A2C05_u = 1;
    for ( ; auto005A2C05_u <= UnitGroupCount(auto005A2C05_g, c_unitCountAll) ; auto005A2C05_u += (lv_tower == UnitGroupUnit(auto005A2C05_g, auto005A2C05_u)) ) {
        lv_tower = UnitGroupUnit(auto005A2C05_g, auto005A2C05_u);
        if ((libAIAI_gf_HeroAIIsTowerAThreat(lv_tower) == true)) {
            lv_towerRange = (UnitWeaponRange(lv_tower, 1) + UnitTypeGetProperty(UnitGetType(lv_tower), c_unitPropRadius));
            lv_distanceToTower = DistanceBetweenPoints(UnitGetPosition(lv_tower), UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit));
            if ((lv_distanceToTower < (lv_towerRange + 1.0))) {
                return true;
            }

        }

    }
    if ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order)) {
        lv_tower = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core;
    }
    else {
        lv_tower = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core;
    }
    lv_towerRange = (UnitWeaponRange(lv_tower, 1) + UnitTypeGetProperty(UnitGetType(lv_tower), c_unitPropRadius));
    lv_distanceToTower = DistanceBetweenPoints(UnitGetPosition(lv_tower), UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit));
    if ((lv_distanceToTower < (lv_towerRange + 1.0))) {
        return true;
    }

    return false;
}

bool libAIAI_gf_HeroAICloseToTowerCoreWithoutEnoughHelp (int lp_trigPlayer, unit lp_tower) {
    // Variable Declarations
    unitgroup lv_nonHeroAllies;
    fixed lv_distanceToTower;
    fixed lv_towerRange;
    region lv_testRegion;
    int lv_requiredHelpAmount;

    // Variable Initialization
    lv_nonHeroAllies = UnitGroupEmpty();
    lv_requiredHelpAmount = 1;

    // Implementation
    lv_towerRange = (UnitWeaponRange(lp_tower, 1) + UnitTypeGetProperty(UnitGetType(lp_tower), c_unitPropRadius));
    lv_distanceToTower = DistanceBetweenPoints(UnitGetPosition(lp_tower), UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit));
    if ((libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)] == true)) {
        lv_requiredHelpAmount = 2;
    }

    if ((lv_distanceToTower < (lv_towerRange + 1.0))) {
        lv_distanceToTower -= 0.25;
        if ((lv_distanceToTower < lv_towerRange)) {
            lv_distanceToTower = lv_towerRange;
        }

        lv_testRegion = RegionCircle(UnitGetPosition(lp_tower), lv_distanceToTower);
        lv_nonHeroAllies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceAllyExcludeSelf, lv_testRegion, libAIAI_gv_uF_TowerAI_Scan_Group_Biological, 0);
        UnitGroupAddUnitGroup(lv_nonHeroAllies, UnitGroupAlliance(lp_trigPlayer, c_unitAllianceAllyExcludeSelf, lv_testRegion, libAIAI_gv_uF_TowerAI_Required_Summoned, 0));
        if ((UnitGroupCount(lv_nonHeroAllies, c_unitCountAlive) < lv_requiredHelpAmount)) {
            return true;
        }

    }

    return false;
}

bool libAIAI_gf_HeroAICloseToAnyEnemyTowerOrCoreWithoutEnoughHelp (int lp_trigPlayer) {
    unitgroup autoD14A4108_g;
    int autoD14A4108_u;

    // Variable Declarations
    unit lv_tower;

    // Variable Initialization

    // Implementation
    autoD14A4108_g = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyTowers;
    autoD14A4108_u = 1;
    for ( ; autoD14A4108_u <= UnitGroupCount(autoD14A4108_g, c_unitCountAll) ; autoD14A4108_u += (lv_tower == UnitGroupUnit(autoD14A4108_g, autoD14A4108_u)) ) {
        lv_tower = UnitGroupUnit(autoD14A4108_g, autoD14A4108_u);
        if ((libAIAI_gf_HeroAIIsTowerAThreat(lv_tower) == true) && (libAIAI_gf_HeroAICloseToTowerCoreWithoutEnoughHelp(lp_trigPlayer, lv_tower) == true)) {
            return true;
        }

    }
    if ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order)) {
        if ((libAIAI_gf_HeroAICloseToTowerCoreWithoutEnoughHelp(lp_trigPlayer, libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core) == true)) {
            return true;
        }

    }
    else {
        if ((libAIAI_gf_HeroAICloseToTowerCoreWithoutEnoughHelp(lp_trigPlayer, libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core) == true)) {
            return true;
        }

    }
    return false;
}

bool libAIAI_gf_HeroAIAlliesNearEnemyBuilding (int lp_trigPlayer, unit lp_building) {
    // Variable Declarations
    unitgroup lv_allies;
    fixed lv_distanceToTower;
    region lv_testRegion;

    // Variable Initialization
    lv_allies = UnitGroupEmpty();

    // Implementation
    lv_testRegion = RegionCircle(UnitGetPosition(lp_building), libAIAI_gv_aIHeroNearBuildingRange);
    lv_allies = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceAllyExcludeSelf, lv_testRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
    if ((UnitGroupCount(lv_allies, c_unitCountAlive) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAIEnemiesNearBuilding (unit lp_building) {
    // Variable Declarations
    unitgroup lv_enemies;
    fixed lv_distanceToTower;
    region lv_testRegion;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();

    // Implementation
    lv_testRegion = RegionCircle(UnitGetPosition(lp_building), libAIAI_gv_aIHeroNearBuildingRange);
    lv_enemies = UnitGroupAlliance(UnitGetOwner(lp_building), c_unitAllianceEnemy, lv_testRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
    if ((UnitGroupCount(lv_enemies, c_unitCountAlive) > 0)) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAIIsTowerAThreat (unit lp_tower) {
    // Implementation
    if ((UnitGetPropertyFixed(lp_tower, c_unitPropEnergyMax, c_unitPropCurrent) > 0.0) && (UnitGetPropertyFixed(lp_tower, c_unitPropEnergy, c_unitPropCurrent) <= 2.0)) {
        return false;
    }

    if ((UnitWeaponGet(lp_tower, 1) == "")) {
        return false;
    }

    if ((UnitHasBehavior2(lp_tower, "RavenLordsCurseStructures") == true)) {
        return false;
    }

    return true;
}

point libAIAI_gf_HeroAIGetPositionBehindContentionPoint (int lp_trigPlayer, int lp_laneIndex, fixed lp_distance, fixed lp_laneOffset) {
    // Variable Declarations
    fixed lv_lanePosition;

    // Variable Initialization

    // Implementation
    lv_lanePosition = libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer)].lv_laneData[lp_laneIndex].lv_contentionPointLanePosition;
    lv_lanePosition = libAIAI_gf_AIRetreatLanePosition(libGame_gv_players[lp_trigPlayer].lv_faction, lp_laneIndex, lv_lanePosition, lp_distance);
    return AILaneWaypointConvertWaydistOffsetToPoint(lp_laneIndex, lv_lanePosition, lp_laneOffset);
}

point libAIAI_gf_HeroAIGetRetreatPosition (int lp_trigPlayer, fixed lp_distance, point lp_awayFrom) {
    // Variable Declarations
    point lv_retreatAwayFromPosition;
    int lv_laneIndex;
    fixed lv_lanePosition;
    fixed lv_retreatedLanePosition;
    point lv_retreatedPosition;
    point lv_retreatDirection;

    // Variable Initialization

    // Implementation
    if ((libAIAI_gf_HeroAIIsPlayerActive(lp_trigPlayer, 2) == false)) {
        return null;
    }

    if ((lp_awayFrom != null)) {
        lv_retreatAwayFromPosition = lp_awayFrom;
    }
    else {
        lv_retreatAwayFromPosition = UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    }
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane > 0)) {
        lv_laneIndex = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane;
        lv_lanePosition = libAIAI_gf_AIGetClosestLanePosition(lv_laneIndex, lv_retreatAwayFromPosition);
        lv_retreatedLanePosition = libAIAI_gf_AIRetreatLanePosition(libGame_gv_players[lp_trigPlayer].lv_faction, lv_laneIndex, lv_lanePosition, lp_distance);
        lv_retreatDirection = AIGetDirection(lv_retreatAwayFromPosition, AILaneWaypointConvertWaydistOffsetToPoint(lv_laneIndex, lv_retreatedLanePosition, 0.0));
    }
    else {
        lv_retreatDirection = AIGetDirection(lv_retreatAwayFromPosition, libGame_gv_players[lp_trigPlayer].lv_spawnPoint);
    }
    lv_retreatedPosition = libCore_gf_AdvancePointinDirection(lv_retreatAwayFromPosition, lv_retreatDirection, lp_distance);
    return lv_retreatedPosition;
}

unitgroup libAIAI_gf_HeroAIGetEnemyHeroesInRetreatPath (int lp_trigPlayer) {
    unitgroup auto326E261F_g;
    int auto326E261F_u;

    // Variable Declarations
    fixed lv_heroLanePosition;
    fixed lv_enemyLanePosition;
    unit lv_enemyHero;
    unitgroup lv_enemyHeroesInTheWay;

    // Variable Initialization
    lv_enemyHeroesInTheWay = UnitGroupEmpty();

    // Implementation
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane == 0)) {
        return lv_enemyHeroesInTheWay;
    }

    lv_heroLanePosition = libAIAI_gf_AIGetClosestLanePosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane, UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit));
    libAIAI_gf_HeroAIEval(lp_trigPlayer);
    auto326E261F_g = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_enemyHeroes;
    auto326E261F_u = 1;
    for ( ; auto326E261F_u <= UnitGroupCount(auto326E261F_g, c_unitCountAll) ; auto326E261F_u += (lv_enemyHero == UnitGroupUnit(auto326E261F_g, auto326E261F_u)) ) {
        lv_enemyHero = UnitGroupUnit(auto326E261F_g, auto326E261F_u);
        lv_heroLanePosition = libAIAI_gf_AIGetClosestLanePosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentLane, UnitGetPosition(lv_enemyHero));
        if ((libGame_gv_players[lp_trigPlayer].lv_faction == libGame_ge_Faction_Order)) {
            if ((lv_heroLanePosition < lv_enemyLanePosition)) {
                UnitGroupAdd(lv_enemyHeroesInTheWay, lv_enemyHero);
            }

        }
        else {
            if ((lv_heroLanePosition > lv_enemyLanePosition)) {
                UnitGroupAdd(lv_enemyHeroesInTheWay, lv_enemyHero);
            }

        }
    }
    return lv_enemyHeroesInTheWay;
}

bool libAIAI_gf_HeroAIEnemiesInHomeRegion (int lp_faction) {
    // Variable Declarations
    int lv_teamIndex;

    // Variable Initialization

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    if (((libAIAI_gv_heroAITeamData[lv_teamIndex].lv_homeEval.lv_numEnemyHeroes > 0) || (libAIAI_gv_heroAITeamData[lv_teamIndex].lv_homeEval.lv_numEnemyMinionsAndSummons > 0))) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAIShouldUseUltimates (int lp_trigPlayer) {
    // Implementation
    return libAIAI_gv_aIHeroUseUltimates[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)];
}

bool libAIAI_gf_HeroAIIsAIEnabledForPlayer (int lp_trigPlayer) {
    // Implementation
    if (((lp_trigPlayer <= 0) || (lp_trigPlayer > libCore_gv_bALMaxPlayers))) {
        return false;
    }

    return (libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState != libAIAI_ge_HeroAIStates_HSUnused);
}

bool libAIAI_gf_HeroAIIsAllyTargettingUnit (int lp_trigPlayer, unit lp_targetUnit) {
    int auto5EBE71F5_ae;
    int auto5EBE71F5_ai;

    // Variable Declarations
    int lv_playerIndex;
    order lv_heroOrder;

    // Variable Initialization

    // Implementation
    auto5EBE71F5_ae = libCore_gv_bALMaxPlayers;
    auto5EBE71F5_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (auto5EBE71F5_ai >= 0 && lv_playerIndex <= auto5EBE71F5_ae) || (auto5EBE71F5_ai <= 0 && lv_playerIndex >= auto5EBE71F5_ae) ) ; lv_playerIndex += auto5EBE71F5_ai ) {
        if ((lv_playerIndex != lp_trigPlayer) && (libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 0) == true) && (libGame_gv_players[lv_playerIndex].lv_faction == libGame_gv_players[lp_trigPlayer].lv_faction)) {
            lv_heroOrder = UnitOrder(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, 0);
            if ((lv_heroOrder != null) && (OrderGetTargetType(lv_heroOrder) == c_orderTargetUnit) && (OrderGetTargetUnit(lv_heroOrder) == lp_targetUnit)) {
                return true;
            }

        }

    }
    return false;
}

bool libAIAI_gf_HeroAIIsHeroMelee (int lp_trigPlayer) {
    // Implementation
    return libGame_gv_players[lp_trigPlayer].lv_heroData.lv_isMelee;
}

bool libAIAI_gf_HeroAIAttackingBadTarget (int lp_trigPlayer) {
    // Variable Declarations
    order lv_currentOrder;
    unit lv_currentTarget;

    // Variable Initialization

    // Implementation
    lv_currentOrder = UnitOrder(libAIAI_gf_HeroAIGetHeroOrVehicle(lp_trigPlayer), 0);
    if ((lv_currentOrder != null) && (OrderGetAbilityCommand(lv_currentOrder) == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility)) {
        lv_currentTarget = OrderGetTargetUnit(lv_currentOrder);
    }

    if ((lv_currentTarget == null)) {
        return false;
    }

    if ((UnitTypeTestFlag(UnitGetType(lv_currentTarget), c_unitFlagTownStructureWall) == true)) {
        return true;
    }

    if ((libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (UnitTypeTestFlag(UnitGetType(lv_currentTarget), c_unitFlagTownStructureMoonwell) == true)) {
        return true;
    }

    if ((libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty] == true) && (UnitIsValid(libGame_gv_players[lp_trigPlayer].lv_activeVehicle) == true) && ((UnitTypeTestAttribute(UnitGetType(lv_currentTarget), c_unitAttributeBiological) == true) || (UnitTypeTestAttribute(UnitGetType(lv_currentTarget), c_unitAttributeSummoned) == true))) {
        return true;
    }

    return false;
}

bool libAIAI_gf_HeroAIAttackingWeakHumanHero (int lp_trigPlayer, fixed lp_healthPercent) {
    // Variable Declarations
    order lv_currentOrder;
    unit lv_currentTarget;
    int lv_unitOwner;

    // Variable Initialization

    // Implementation
    lv_currentOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    if (((lv_currentOrder == null) || (OrderGetAbilityCommand(lv_currentOrder) != libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility))) {
        return false;
    }

    lv_currentTarget = OrderGetTargetUnit(lv_currentOrder);
    if ((UnitIsValid(lv_currentTarget) == false)) {
        return false;
    }

    lv_unitOwner = UnitGetOwner(lv_currentTarget);
    if ((lv_unitOwner <= libCore_gv_bALMaxPlayers) && (lv_currentTarget == libAIAI_gv_aIHeroes[lv_unitOwner].lv_currentHeroUnit) && (libAIAI_gf_HeroAIIsPlayerActive(lv_unitOwner, 1) == true) && (UnitGetPropertyFixed(lv_currentTarget, c_unitPropLifePercent, c_unitPropCurrent) <= lp_healthPercent) && (libAIAI_gf_HeroAIInWeaponRangeOfTarget(lp_trigPlayer, lv_currentTarget, 1.0) == true)) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAIAttackingFountain (int lp_trigPlayer) {
    // Variable Declarations
    order lv_currentOrder;
    unit lv_currentTarget;
    int lv_unitOwner;

    // Variable Initialization

    // Implementation
    lv_currentOrder = UnitOrder(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, 0);
    if ((lv_currentOrder == null) && (OrderGetAbilityCommand(lv_currentOrder) != libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility)) {
        return false;
    }

    lv_currentTarget = OrderGetTargetUnit(lv_currentOrder);
    if ((UnitIsValid(lv_currentTarget) == false)) {
        return false;
    }

    if ((UnitTypeTestFlag(UnitGetType(lv_currentTarget), c_unitFlagTownStructureMoonwell) == true) && (libAIAI_gf_HeroAIInWeaponRangeOfTarget(lp_trigPlayer, lv_currentTarget, 1.0) == true)) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAIEnemiesNearCore (int lp_faction) {
    // Variable Declarations
    int lv_teamIndex;
    point lv_corePosition;
    int lv_allyComputerPlayer;
    region lv_nearbyRegion;
    unitgroup lv_enemies;
    unitgroup lv_enemyHeroes;
    unitgroup lv_enemyMinions;
    unitgroup lv_enemySummons;
    fixed lv_enemiesNearbyDistance;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();
    lv_enemyHeroes = UnitGroupEmpty();
    lv_enemyMinions = UnitGroupEmpty();
    lv_enemySummons = UnitGroupEmpty();
    lv_enemiesNearbyDistance = libAIAI_gv_aIHeroDefendCloseToCoreDistance;

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_corePosition = UnitGetPosition(libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core);
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamOrder;
        lv_teamIndex = (0);
    }
    else {
        lv_corePosition = UnitGetPosition(libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core);
        lv_allyComputerPlayer = libCore_gv_cOMPUTER_TeamChaos;
        lv_teamIndex = (1);
    }
    if ((libAIAI_gv_heroAITeamDefendCorePingData[lv_teamIndex].lv_pingExpireTime > TimerGetElapsed(libGame_gv_gameTimer))) {
        lv_enemiesNearbyDistance = libAIAI_gv_aIHeroDefendPingExtendedCloseCoreDistance;
    }

    lv_nearbyRegion = RegionCircle(lv_corePosition, lv_enemiesNearbyDistance);
    lv_enemies = UnitGroupAlliance(lv_allyComputerPlayer, c_unitAllianceEnemy, lv_nearbyRegion, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
    lv_enemyHeroes = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterHeroic), 0, 0, 0), 0);
    lv_enemyMinions = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter((1 << c_targetFilterBiological), 0, 0, 0), 0);
    lv_enemySummons = UnitGroupFilter(null, c_playerAny, lv_enemies, UnitFilter(0, (1 << (c_targetFilterSummoned - 32)), 0, 0), 0);
    if (((UnitGroupCount(lv_enemyHeroes, c_unitCountAlive) > 0) || (UnitGroupCount(lv_enemyMinions, c_unitCountAlive) > 0) || (UnitGroupCount(lv_enemySummons, c_unitCountAlive) > 0))) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAIHeroHasBeenAttackedRecently (int lp_trigPlayer, fixed lp_time) {
    // Implementation
    if (((lp_trigPlayer <= 0) || (lp_trigPlayer > libCore_gv_bALMaxPlayers))) {
        return false;
    }
    else {
        return ((libAIAI_gv_heroAIDamageTracking[lp_trigPlayer].lv_lastTimeAttacked + lp_time) > TimerGetElapsed(libGame_gv_gameTimer));
    }
}

bool libAIAI_gf_HeroAITeamHasHumanPlayers (int lp_faction) {
    // Variable Declarations
    int lv_teamIndex;

    // Variable Initialization

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    return (PlayerGroupCount(libAIAI_gv_heroAITeamPlayerData[lv_teamIndex].lv_humanPlayers) > 0);
}

bool libAIAI_gf_HeroAITeamHasAIPlayers (int lp_faction) {
    // Variable Declarations
    int lv_teamIndex;

    // Variable Initialization

    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        lv_teamIndex = (0);
    }
    else {
        lv_teamIndex = (1);
    }
    return (PlayerGroupCount(libAIAI_gv_heroAITeamPlayerData[lv_teamIndex].lv_aIPlayers) > 0);
}

int libAIAI_gf_HeroAITeamIndexOfFaction (int lp_faction) {
    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        return (0);
    }
    else {
        return (1);
    }
}

int libAIAI_gf_HeroAITeamIndexOfEnemyFaction (int lp_faction) {
    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        return (1);
    }
    else {
        return (0);
    }
}

point libAIAI_gf_HeroAIFindNearbyPathablePoint (int lp_trigPlayer, point lp_point, fixed lp_maxDistance, bool lp_checkVision) {
    int auto6FEAAD6A_ae;
    int auto6FEAAD6A_ai;

    // Variable Declarations
    int lv_testIndex;
    fixed lv_angle;
    point lv_offset;
    point lv_testPoint;
    const int lv_numberOfTestPoints = 10;

    // Variable Initialization

    // Implementation
    if ((PointPathingPassable(lp_point) == true) && ((lp_checkVision == false) || (VisIsVisibleForPlayer(lp_trigPlayer, lp_point) == true))) {
        return lp_point;
    }

    auto6FEAAD6A_ae = lv_numberOfTestPoints;
    auto6FEAAD6A_ai = 1;
    lv_testIndex = 1;
    for ( ; ( (auto6FEAAD6A_ai >= 0 && lv_testIndex <= auto6FEAAD6A_ae) || (auto6FEAAD6A_ai <= 0 && lv_testIndex >= auto6FEAAD6A_ae) ) ; lv_testIndex += auto6FEAAD6A_ai ) {
        lv_angle = (360.0 * (lv_testIndex / IntToFixed(lv_numberOfTestPoints)));
        lv_offset = Point((lp_maxDistance * Cos(lv_angle)), (lp_maxDistance * Sin(lv_angle)));
        lv_testPoint = Point((PointGetX(lp_point) + PointGetX(lv_offset)), (PointGetY(lp_point) + PointGetY(lv_offset)));
        if ((PointPathingPassable(lv_testPoint) == true) && ((lp_checkVision == false) || (VisIsVisibleForPlayer(lp_trigPlayer, lv_testPoint) == true))) {
            return lv_testPoint;
        }

    }
    return null;
}

bool libAIAI_gf_HeroAIBeingTargettedByDangerousAbility (int lp_trigPlayer) {
    // Variable Declarations
    order lv_order;

    // Variable Initialization

    // Implementation
    if ((UnitIsValid(libAIAI_gv_heroAIDragonShireDragon) == true) && (libNtve_gf_PlayerIsEnemy(lp_trigPlayer, UnitGetOwner(libAIAI_gv_heroAIDragonShireDragon), libNtve_ge_PlayerRelation_Enemy) == true)) {
        lv_order = UnitOrder(libAIAI_gv_heroAIDragonShireDragon, 0);
        if ((lv_order != null) && (OrderGetAbilityCommand(lv_order) == AbilityCommand("VehicleDragonPunt", 0)) && (OrderGetTargetUnit(lv_order) == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) && (UnitHasBehavior2(libAIAI_gv_heroAIDragonShireDragon, "DragonKnightBullRushChanneling") == true)) {
            return true;
        }

        if ((UnitHasBehavior2(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, "DragonKnightBullRushPuntableDummy") == true)) {
            return true;
        }

    }

    return false;
}

int libAIAI_gf_HeroAINumberofEnemyHeroesNearLocation (int lp_trigPlayer, point lp_location, fixed lp_range) {
    // Variable Declarations
    region lv_enemyRegion;
    unitgroup lv_enemyHeroes;

    // Variable Initialization
    lv_enemyHeroes = UnitGroupEmpty();

    // Implementation
    lv_enemyRegion = RegionEmpty();
    RegionAddRegion(lv_enemyRegion, RegionCircle(lp_location, lp_range));
    lv_enemyHeroes = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, lv_enemyRegion, libCore_gv_filtersHeroic, 0);
    return UnitGroupCount(lv_enemyHeroes, c_unitCountAlive);
}

unit libAIAI_gf_HeroAIFindNearbyGate (point lp_position, fixed lp_range) {
    unitgroup auto7894F019_g;
    int auto7894F019_u;

    // Variable Declarations
    unitgroup lv_structures;
    unit lv_testUnit;
    fixed lv_testDistance;
    unit lv_bestUnit;
    fixed lv_bestDistance;

    // Variable Initialization
    lv_bestDistance = 524287.0;

    // Implementation
    lv_structures = UnitGroupSearch(null, c_playerAny, lp_position, lp_range, libAIAI_gv_uF_MinionAI_GetNearestEnemyStructure, 0);
    auto7894F019_g = lv_structures;
    auto7894F019_u = 1;
    for ( ; auto7894F019_u <= UnitGroupCount(auto7894F019_g, c_unitCountAll) ; auto7894F019_u += (lv_testUnit == UnitGroupUnit(auto7894F019_g, auto7894F019_u)) ) {
        lv_testUnit = UnitGroupUnit(auto7894F019_g, auto7894F019_u);
        if ((UnitTypeTestFlag(UnitGetType(lv_testUnit), c_unitFlagTownStructureGate) == true)) {
            lv_testDistance = DistanceSquaredBetweenPoints(lp_position, UnitGetPosition(lv_testUnit));
            if ((lv_testDistance < lv_bestDistance)) {
                lv_bestDistance = lv_testDistance;
                lv_bestUnit = lv_testUnit;
            }

        }

    }
    return lv_bestUnit;
}

void libAIAI_gf_HeroAIMapMechanicPinged (int lp_pingingPlayer, unit lp_targetUnit) {
    // Implementation
    libCore_gv_segTriggerPlayer = lp_pingingPlayer;
    libCore_gv_segTriggerUnit = lp_targetUnit;
    libCore_gf_CallRegisteredSegregationTriggers(libCore_ge_SegregationTriggerTypes_HeroAIMapMechanicPinged);
}

unit libAIAI_gf_HeroAIGetCloakedEnemyToReveal (int lp_trigPlayer) {
    unitgroup auto11B9FF8F_g;
    int auto11B9FF8F_u;

    // Variable Declarations
    region lv_nearbyHeroRegion;
    unitgroup lv_enemyHeroes;
    unit lv_unit;
    unit lv_targetUnit;

    // Variable Initialization
    lv_enemyHeroes = UnitGroupEmpty();

    // Implementation
    lv_nearbyHeroRegion = RegionCircle(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), 11.0);
    lv_enemyHeroes = UnitGroupAlliance(lp_trigPlayer, c_unitAllianceEnemy, lv_nearbyHeroRegion, UnitFilter((1 << c_targetFilterHeroic) | (1 << c_targetFilterCloaked), 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterStasis - 32)) | (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterInvulnerable - 32)) | (1 << (c_targetFilterStunned - 32))), 0);
    auto11B9FF8F_g = lv_enemyHeroes;
    auto11B9FF8F_u = 1;
    for ( ; auto11B9FF8F_u <= UnitGroupCount(auto11B9FF8F_g, c_unitCountAll) ; auto11B9FF8F_u += (lv_unit == UnitGroupUnit(auto11B9FF8F_g, auto11B9FF8F_u)) ) {
        lv_unit = UnitGroupUnit(auto11B9FF8F_g, auto11B9FF8F_u);
        if ((VisIsVisibleForPlayer(lp_trigPlayer, UnitGetPosition(lv_unit)) == true)) {
            lv_targetUnit = lv_unit;
            break;
        }

    }
    if ((UnitIsValid(lv_targetUnit) == true)) {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextCloakRevealTime == 0.0)) {
            libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextCloakRevealTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)]);
        }
        else {
            if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextCloakRevealTime < TimerGetElapsed(libGame_gv_gameTimer))) {
                return lv_targetUnit;
            }

        }
    }
    else {
        libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextCloakRevealTime = 0.0;
    }
    return null;
}

void libAIAI_gf_HeroAIResetRevealCloakedEnemyTimer (int lp_trigPlayer) {
    // Implementation
    libAIAI_gv_aIHeroes[lp_trigPlayer].lv_nextCloakRevealTime = 0.0;
}

int libAIAI_gf_HeroAINumberofPlayersInUnitGroup (unitgroup lp_units) {
    unitgroup auto90475291_g;
    int auto90475291_u;

    // Variable Declarations
    bool[libCore_gv_bALMaxPlayers + 1] lv_playerSeen;
    unit lv_unit;
    int lv_playerIndex;
    int lv_playerCount;

    // Variable Initialization

    // Implementation
    auto90475291_g = lp_units;
    auto90475291_u = 1;
    for ( ; auto90475291_u <= UnitGroupCount(auto90475291_g, c_unitCountAll) ; auto90475291_u += (lv_unit == UnitGroupUnit(auto90475291_g, auto90475291_u)) ) {
        lv_unit = UnitGroupUnit(auto90475291_g, auto90475291_u);
        lv_playerIndex = UnitGetOwner(lv_unit);
        if ((lv_playerIndex > 0) && (lv_playerIndex <= libCore_gv_bALMaxPlayers)) {
            if ((lv_playerSeen[lv_playerIndex] == false)) {
                lv_playerSeen[lv_playerIndex] = true;
                lv_playerCount += 1;
            }

        }

    }
    return lv_playerCount;
}

void libAIAI_gf_HeroAIIssueOrderToTurnInMapMechanicStack (int lp_trigPlayer, unit lp_turnInUnit) {
    unitgroup auto56C4A486_g;
    int auto56C4A486_u;

    // Variable Declarations
    order lv_heroOrder;
    unit lv_heroUnit;
    point lv_turnInUnitPosition;

    // Variable Initialization
    lv_turnInUnitPosition = UnitGetPosition(lp_turnInUnit);

    // Implementation
    auto56C4A486_g = libGame_gv_players[lp_trigPlayer].lv_heroUnitGroup;
    auto56C4A486_u = 1;
    for ( ; auto56C4A486_u <= UnitGroupCount(auto56C4A486_g, c_unitCountAll) ; auto56C4A486_u += (lv_heroUnit == UnitGroupUnit(auto56C4A486_g, auto56C4A486_u)) ) {
        lv_heroUnit = UnitGroupUnit(auto56C4A486_g, auto56C4A486_u);
        lv_heroOrder = UnitOrder(lv_heroUnit, 0);
        if ((UnitBehaviorCount(lv_heroUnit, "MapMechanicStack") == 0)) {
            if (((lv_heroOrder == null) || (OrderGetAbilityCommand(lv_heroOrder) != libAIAI_gv_aIMoveAbil) || (OrderGetTargetType(lv_heroOrder) != c_orderTargetUnit) || (OrderGetTargetUnit(lv_heroOrder) != lp_turnInUnit))) {
                HeroAIUnitIssueOrder(lv_heroUnit, OrderTargetingUnit(libAIAI_gv_aIMoveAbil, lp_turnInUnit), c_orderQueueReplace);
            }

        }
        else {
            if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hasFlyingMount == true)) {
                if ((DistanceBetweenPoints(UnitGetPosition(lv_heroUnit), lv_turnInUnitPosition) > libAIAI_gv_aIHeroCloseToLaneDistance)) {
                    if (((lv_heroOrder == null) || (OrderGetAbilityCommand(lv_heroOrder) != libAIAI_gv_aIMoveAbil) || (OrderGetTargetPoint(lv_heroOrder) != lv_turnInUnitPosition))) {
                        HeroAIUnitIssueOrder(lv_heroUnit, OrderTargetingPoint(libAIAI_gv_aIMoveAbil, lv_turnInUnitPosition), c_orderQueueReplace);
                    }

                    continue;
                }
                else {
                    if ((libAIAI_gf_HeroAIDismount(lp_trigPlayer) == true)) {
                        continue;
                    }

                }
            }

            if (((lv_heroOrder == null) || (OrderGetAbilityCommand(lv_heroOrder) != AbilityCommand("CaptureMacGuffin", 0)))) {
                HeroAIUnitIssueOrder(lv_heroUnit, OrderTargetingUnit(AbilityCommand("CaptureMacGuffin", 0), lp_turnInUnit), c_orderQueueReplace);
            }

        }
    }
}

void libAIAI_gf_HeroAIEnsureOrderAttackUnit (int lp_trigPlayer, unit lp_targetUnit) {
    // Variable Declarations
    unit lv_heroUnit;
    order lv_heroOrder;
    abilcmd lv_attackAbility;
    order lv_attackUnitOrder;
    point lv_positionofTarget;

    // Variable Initialization

    // Implementation
    lv_heroUnit = libAIAI_gf_HeroAIGetHeroOrVehicle(lp_trigPlayer);
    lv_heroOrder = UnitOrder(lv_heroUnit, 0);
    if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hasFlyingMount == true)) {
        lv_positionofTarget = UnitGetPosition(lp_targetUnit);
        if ((DistanceBetweenPoints(UnitGetPosition(lv_heroUnit), lv_positionofTarget) > libAIAI_gv_aIHeroCloseToLaneDistance)) {
            if (((lv_heroOrder == null) || (OrderGetAbilityCommand(lv_heroOrder) != libAIAI_gv_aIMoveAbil) || (OrderGetTargetPoint(lv_heroOrder) != lv_positionofTarget))) {
                HeroAIUnitIssueOrder(lv_heroUnit, OrderTargetingPoint(libAIAI_gv_aIMoveAbil, lv_positionofTarget), c_orderQueueReplace);
            }

            return ;
        }
        else {
            if ((libAIAI_gf_HeroAIDismount(lp_trigPlayer) == true)) {
                return ;
            }

        }
    }

    if ((lv_heroUnit == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) {
        lv_attackAbility = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility;
    }
    else {
        lv_attackAbility = AbilityCommand("attack", 0);
    }
    if (((lv_heroOrder == null) || (OrderGetAbilityCommand(lv_heroOrder) != lv_attackAbility) || (OrderGetTargetUnit(lv_heroOrder) != lp_targetUnit))) {
        lv_attackUnitOrder = OrderTargetingUnit(lv_attackAbility, lp_targetUnit);
        if ((UnitOrderIsValid(lv_heroUnit, lv_attackUnitOrder) == true)) {
            HeroAIUnitIssueOrder(lv_heroUnit, OrderTargetingUnit(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility, lp_targetUnit), c_orderQueueReplace);
        }
        else {
            libAIAI_gf_HeroAIEnsureOrderAttackPoint(lp_trigPlayer, UnitGetPosition(lp_targetUnit));
        }
    }

}

void libAIAI_gf_HeroAIEnsureOrderAttackPoint (int lp_trigPlayer, point lp_targetPoint) {
    // Variable Declarations
    unit lv_heroUnit;
    order lv_heroOrder;
    order lv_nextHeroOrder;
    abilcmd lv_attackAbility;

    // Variable Initialization

    // Implementation
    lv_heroUnit = libAIAI_gf_HeroAIGetHeroOrVehicle(lp_trigPlayer);
    lv_heroOrder = UnitOrder(lv_heroUnit, 0);
    lv_nextHeroOrder = UnitOrder(lv_heroUnit, 1);
    if ((lv_heroUnit == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) {
        lv_attackAbility = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility;
    }
    else {
        lv_attackAbility = AbilityCommand("attack", 0);
    }
    if (((lv_heroOrder == null) || (OrderGetAbilityCommand(lv_heroOrder) != lv_attackAbility) || ((OrderGetTargetPoint(lv_heroOrder) != lp_targetPoint) && ((lv_nextHeroOrder == null) || (OrderGetAbilityCommand(lv_nextHeroOrder) != lv_attackAbility) || (OrderGetTargetPoint(lv_nextHeroOrder) != lp_targetPoint))))) {
        HeroAIUnitIssueOrder(lv_heroUnit, OrderTargetingPoint(lv_attackAbility, lp_targetPoint), c_orderQueueReplace);
    }

}

void libAIAI_gf_HeroAIEnsureOrderAttackPointCloseEnough (int lp_trigPlayer, point lp_targetPoint) {
    // Variable Declarations
    unit lv_heroUnit;
    order lv_heroOrder;
    order lv_nextHeroOrder;
    abilcmd lv_attackAbility;

    // Variable Initialization

    // Implementation
    lv_heroUnit = libAIAI_gf_HeroAIGetHeroOrVehicle(lp_trigPlayer);
    lv_heroOrder = UnitOrder(lv_heroUnit, 0);
    lv_nextHeroOrder = UnitOrder(lv_heroUnit, 1);
    if ((lv_heroUnit == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit)) {
        lv_attackAbility = libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility;
    }
    else {
        lv_attackAbility = AbilityCommand("attack", 0);
    }
    if (((lv_heroOrder == null) || (OrderGetAbilityCommand(lv_heroOrder) != lv_attackAbility) || (((OrderGetTargetPoint(lv_heroOrder) == null) || (DistanceBetweenPoints(lp_targetPoint, OrderGetTargetPoint(lv_heroOrder)) >= libAIAI_gv_aIHeroCloseEnoughDist)) && ((lv_nextHeroOrder == null) || (OrderGetAbilityCommand(lv_nextHeroOrder) != lv_attackAbility) || (OrderGetTargetPoint(lv_nextHeroOrder) == null) || (DistanceBetweenPoints(lp_targetPoint, OrderGetTargetPoint(lv_nextHeroOrder)) > libAIAI_gv_aIHeroCloseEnoughDist)))) && (DistanceBetweenPoints(lp_targetPoint, UnitGetPosition(lv_heroUnit)) > libAIAI_gv_aIHeroCloseEnoughDist)) {
        HeroAIUnitIssueOrder(lv_heroUnit, OrderTargetingPoint(lv_attackAbility, lp_targetPoint), c_orderQueueReplace);
    }

}

void libAIAI_gf_HeroAIEnsureOrderMoveUnit (int lp_trigPlayer, unit lp_targetUnit) {
    // Variable Declarations
    unit lv_heroUnit;
    order lv_heroOrder;

    // Variable Initialization

    // Implementation
    lv_heroUnit = libAIAI_gf_HeroAIGetHeroOrVehicle(lp_trigPlayer);
    lv_heroOrder = UnitOrder(lv_heroUnit, 0);
    if (((lv_heroOrder == null) || (OrderGetAbilityCommand(lv_heroOrder) != AbilityCommand("move", 0)) || (OrderGetTargetUnit(lv_heroOrder) != lp_targetUnit))) {
        HeroAIUnitIssueOrder(lv_heroUnit, OrderTargetingUnit(AbilityCommand("move", 0), lp_targetUnit), c_orderQueueReplace);
    }

}

void libAIAI_gf_HeroAIEnsureOrderMovePoint (int lp_trigPlayer, point lp_targetPoint) {
    // Variable Declarations
    unit lv_heroUnit;
    order lv_heroOrder;

    // Variable Initialization

    // Implementation
    lv_heroUnit = libAIAI_gf_HeroAIGetHeroOrVehicle(lp_trigPlayer);
    lv_heroOrder = UnitOrder(lv_heroUnit, 0);
    if (((lv_heroOrder == null) || (OrderGetAbilityCommand(lv_heroOrder) != AbilityCommand("move", 0)) || (OrderGetTargetPoint(lv_heroOrder) != lp_targetPoint))) {
        HeroAIUnitIssueOrder(lv_heroUnit, OrderTargetingPoint(AbilityCommand("move", 0), lp_targetPoint), c_orderQueueReplace);
    }

}

void libAIAI_gf_HeroAIEnsureOrderMovePointCloseEnough (int lp_trigPlayer, point lp_targetPoint) {
    // Variable Declarations
    unit lv_heroUnit;
    order lv_heroOrder;

    // Variable Initialization

    // Implementation
    lv_heroUnit = libAIAI_gf_HeroAIGetHeroOrVehicle(lp_trigPlayer);
    lv_heroOrder = UnitOrder(lv_heroUnit, 0);
    if (((lv_heroOrder == null) || (OrderGetAbilityCommand(lv_heroOrder) != AbilityCommand("move", 0)) || (OrderGetTargetPosition(lv_heroOrder) == null) || (DistanceBetweenPoints(lp_targetPoint, OrderGetTargetPosition(lv_heroOrder)) > libAIAI_gv_aIHeroCloseEnoughDist)) && (DistanceBetweenPoints(lp_targetPoint, UnitGetPosition(lv_heroUnit)) > libAIAI_gv_aIHeroCloseEnoughDist)) {
        HeroAIUnitIssueOrder(lv_heroUnit, OrderTargetingPoint(AbilityCommand("move", 0), lp_targetPoint), c_orderQueueReplace);
    }

}

void libAIAI_gf_HeroAIEnsureOrderStopAttackAndMove (int lp_trigPlayer) {
    // Variable Declarations
    unit lv_heroUnit;
    abilcmd lv_heroCommand;

    // Variable Initialization

    // Implementation
    lv_heroUnit = libAIAI_gf_HeroAIGetHeroOrVehicle(lp_trigPlayer);
    lv_heroCommand = OrderGetAbilityCommand(UnitOrder(lv_heroUnit, 0));
    if (((lv_heroCommand == AbilityCommand("move", 0)) || (lv_heroCommand == libAIAI_gv_aIHeroes[lp_trigPlayer].lv_attackAbility))) {
        HeroAIUnitIssueOrder(lv_heroUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
    }

}

unit libAIAI_gf_HeroAIFindBestTarget (unit lp_unit, unitgroup lp_targets, unitgroup lp_nearbyUnits, fixed lp_minDistance, fixed lp_maxDistance, fixed lp_distanceFactor, fixed lp_minHealthPercent, fixed lp_maxHealthPercent, fixed lp_healthFactor, fixed lp_minScore) {
    // Implementation
    Storm_AI_TargetQueryOptions query;
    query.lv_minDistance = lp_minDistance;
    query.lv_maxDistance = lp_maxDistance;
    query.lv_distanceFactor = lp_distanceFactor;
    query.lv_minHealthPercent = lp_minHealthPercent;
    query.lv_maxHealthPercent = lp_maxHealthPercent;
    query.lv_healthFactor = lp_healthFactor;
    query.lv_minScore = lp_minScore;
    return FindBestUnit(lp_targets, lp_nearbyUnits, lp_unit, query);
}

point libAIAI_gf_HeroAIPredictHeroLocation (int lp_trigPlayer, int lp_enemyPlayer, fixed lp_delay) {
    // Variable Declarations
    fixed lv_enemyOffsetX;
    fixed lv_enemyOffsetY;
    int lv_teamIndex;
    point lv_enemyPosition;
    point lv_enemyVelocity;
    fixed lv_elapsedTime;

    // Variable Initialization

    // Implementation
    lv_teamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer);
    lv_elapsedTime = (TimerGetElapsed(libGame_gv_gameTimer) - libAIAI_gv_heroAITeamData[lv_teamIndex].lv_heroTrackingData[lp_enemyPlayer].lv_lastSeenTime);
    lv_elapsedTime = (lv_elapsedTime + lp_delay);
    lv_enemyVelocity = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_heroTrackingData[lp_enemyPlayer].lv_lastSeenVelocity;
    lv_enemyOffsetX = (PointGetX(lv_enemyVelocity) * lv_elapsedTime);
    lv_enemyOffsetY = (PointGetY(lv_enemyVelocity) * lv_elapsedTime);
    lv_enemyPosition = Point((PointGetX(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_heroTrackingData[lp_enemyPlayer].lv_lastSeenLocation) + lv_enemyOffsetX), (PointGetY(libAIAI_gv_heroAITeamData[lv_teamIndex].lv_heroTrackingData[lp_enemyPlayer].lv_lastSeenLocation) + lv_enemyOffsetY));
    return lv_enemyPosition;
}

bool libAIAI_gf_HeroAICanPredictHeroLocation (int lp_trigPlayer, int lp_enemyPlayer, fixed lp_withinTime, bool lp_checkAlive, bool lp_ignoreVisible) {
    // Variable Declarations
    int lv_allyTeamIndex;
    fixed lv_lastSeenTime;
    unit lv_enemyUnit;

    // Variable Initialization

    // Implementation
    lv_allyTeamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer);
    lv_lastSeenTime = libAIAI_gv_heroAITeamData[lv_allyTeamIndex].lv_heroTrackingData[lp_enemyPlayer].lv_lastSeenTime;
    if ((lv_lastSeenTime < 0.0)) {
        return false;
    }

    if (((TimerGetElapsed(libGame_gv_gameTimer) - lv_lastSeenTime) > lp_withinTime)) {
        return false;
    }

    lv_enemyUnit = libAIAI_gv_aIHeroes[lp_enemyPlayer].lv_currentHeroUnit;
    if (((lp_checkAlive == true) && (UnitIsAlive(lv_enemyUnit) == false))) {
        return false;
    }

    if (((lp_ignoreVisible == true) && (libNtve_gf_UnitIsVisibleToPlayer(lv_enemyUnit, lp_trigPlayer) == true))) {
        return false;
    }

    return true;
}

unit libAIAI_gf_HeroAIGetRandomAllyHeroInBattle (int lp_trigPlayer, fixed lp_range, bool lp_includeUntargetable) {
    int auto22EF4206_ae;

    // Variable Declarations
    int lv_playerIndex;
    fixed lv_heroHealth;
    fixed lv_lowestHeroHealth;
    unit lv_bestHero;

    // Variable Initialization
    lv_lowestHeroHealth = 9999.0;

    // Implementation
    auto22EF4206_ae = libCore_gv_bALMaxPlayers;
    lv_playerIndex = 1;
    for ( ; lv_playerIndex <= auto22EF4206_ae ; lv_playerIndex += 1 ) {
        if ((lv_playerIndex != lp_trigPlayer) && (libAIAI_gf_HeroAIIsPlayerActive(lv_playerIndex, 0) == true) && (libGame_gv_players[lv_playerIndex].lv_faction == libGame_gv_players[lp_trigPlayer].lv_faction) && (DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit)) < lp_range) && ((lp_includeUntargetable == true) || (UnitTestState(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, c_unitStateTargetable) == true))) {
            libAIAI_gf_HeroAIEval(lv_playerIndex);
            lv_heroHealth = UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent);
            if (((libGame_gv_players[lv_playerIndex].lv_isDead == true) || (libAIAI_gv_aIHeroes[lv_playerIndex].lv_enemyHeroEval == 0.0) || (libAIAI_gf_HeroAIHeroHasBeenAttackedRecently(lv_playerIndex, 2.0) == false) || (lv_heroHealth > 80.0))) {
                continue;
            }

            if ((PointPathingIsConnected(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), UnitGetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit)) == false)) {
                continue;
            }

            if ((lv_heroHealth < lv_lowestHeroHealth)) {
                lv_lowestHeroHealth = lv_heroHealth;
                lv_bestHero = libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit;
            }

        }

    }
    return lv_bestHero;
}

point libAIAI_gf_HeroAIGetRandomContentionPoint (int lp_trigPlayer, fixed lp_range) {
    int autoCD2FBA0E_ae;
    int autoCD2FBA0E_ai;

    // Variable Declarations
    int lv_teamIndex;
    int lv_laneIndex;
    int lv_numberOfCandidatePoints;
    point[libGame_gv_laneMaxCount_C + 1] lv_candidatePoints;
    point lv_contentionPoint;

    // Variable Initialization

    // Implementation
    lv_teamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_trigPlayer);
    autoCD2FBA0E_ae = libGame_gv_laneCount;
    autoCD2FBA0E_ai = 1;
    lv_laneIndex = 1;
    for ( ; ( (autoCD2FBA0E_ai >= 0 && lv_laneIndex <= autoCD2FBA0E_ae) || (autoCD2FBA0E_ai <= 0 && lv_laneIndex >= autoCD2FBA0E_ae) ) ; lv_laneIndex += autoCD2FBA0E_ai ) {
        lv_contentionPoint = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_laneIndex].lv_contentionPoint;
        if ((DistanceBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit), lv_contentionPoint) > lp_range)) {
            continue;
        }

        lv_numberOfCandidatePoints += 1;
        lv_candidatePoints[lv_numberOfCandidatePoints] = lv_contentionPoint;
    }
    if ((lv_numberOfCandidatePoints > 0)) {
        return lv_candidatePoints[RandomInt(1, lv_numberOfCandidatePoints)];
    }
    else {
        return null;
    }
}

bool libAIAI_gf_AbathurForceAssumingDirectControl (int lp_player) {
    // Implementation
    return AbathurForceAssumingDirectControl(lp_player);
}

bool libAIAI_gf_HeroAIVikingAlreadyArrivedAtDestination (unit lp_vikingUnit, order lp_order, fixed lp_closeEnoughDist) {
    // Variable Declarations
    abilcmd lv_abilityCommand;

    // Variable Initialization

    // Implementation
    lv_abilityCommand = OrderGetAbilityCommand(lp_order);
    if (((lv_abilityCommand == AbilityCommand("move", 0)) || (lv_abilityCommand == AbilityCommand("move", 3)) || (lv_abilityCommand == AbilityCommand("attack", 0))) && ((OrderGetTargetType(lp_order) == c_orderTargetPoint) || ((OrderGetTargetType(lp_order) == c_orderTargetUnit) && (OrderGetTargetUnit(lp_order) == null))) && (DistanceBetweenPoints(UnitGetPosition(lp_vikingUnit), OrderGetTargetPosition(lp_order)) < lp_closeEnoughDist) && ((UnitOrder(lp_vikingUnit, 0) == null) || (DistanceBetweenPoints(OrderGetTargetPosition(UnitOrder(lp_vikingUnit, 0)), OrderGetTargetPosition(lp_order)) < lp_closeEnoughDist))) {
        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_HeroAIVikingUnderworldStateMismatch (int lp_trigPlayer, unit lp_vikingUnit) {
    unitgroup autoD778A46B_g;
    int autoD778A46B_u;
    unitgroup auto0C51597D_g;
    int auto0C51597D_u;

    // Variable Declarations
    unit lv_entranceExit;
    fixed lv_entranceExitDistance;
    unit lv_bestEntranceExit;
    fixed lv_bestEntranceExitDistance;
    order lv_heroOrder;

    // Variable Initialization
    lv_bestEntranceExitDistance = 524287.0;

    // Implementation
    if ((libAIAI_gf_HeroAIIsUnitInUnderworld(lp_vikingUnit) == true) && (libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) == false)) {
        autoD778A46B_g = libAIAI_gv_heroAIUnderworldStatus.lv_exits;
        autoD778A46B_u = 1;
        for ( ; autoD778A46B_u <= UnitGroupCount(autoD778A46B_g, c_unitCountAll) ; autoD778A46B_u += (lv_entranceExit == UnitGroupUnit(autoD778A46B_g, autoD778A46B_u)) ) {
            lv_entranceExit = UnitGroupUnit(autoD778A46B_g, autoD778A46B_u);
            lv_entranceExitDistance = DistanceBetweenPoints(UnitGetPosition(lp_vikingUnit), UnitGetPosition(lv_entranceExit));
            if ((lv_entranceExitDistance < lv_bestEntranceExitDistance)) {
                lv_bestEntranceExit = lv_entranceExit;
                lv_bestEntranceExitDistance = lv_entranceExitDistance;
            }

        }
        if ((UnitIsValid(lv_bestEntranceExit) == true)) {
            lv_heroOrder = UnitOrder(lp_vikingUnit, 0);
            if (((lv_heroOrder == null) || (OrderGetAbilityCommand(lv_heroOrder) != AbilityCommand("CaptureMacGuffin", 0)))) {
                HeroAIUnitIssueOrder(lp_vikingUnit, OrderTargetingUnit(AbilityCommand("CaptureMacGuffin", 0), lv_bestEntranceExit), c_orderQueueReplace);
            }

            return true;
        }

    }

    if ((libAIAI_gf_HeroAIIsUnitInUnderworld(lp_vikingUnit) == false) && (libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit) == true)) {
        auto0C51597D_g = libAIAI_gv_heroAIUnderworldStatus.lv_entrances;
        auto0C51597D_u = 1;
        for ( ; auto0C51597D_u <= UnitGroupCount(auto0C51597D_g, c_unitCountAll) ; auto0C51597D_u += (lv_entranceExit == UnitGroupUnit(auto0C51597D_g, auto0C51597D_u)) ) {
            lv_entranceExit = UnitGroupUnit(auto0C51597D_g, auto0C51597D_u);
            lv_entranceExitDistance = DistanceBetweenPoints(UnitGetPosition(lp_vikingUnit), UnitGetPosition(lv_entranceExit));
            if ((lv_entranceExitDistance < lv_bestEntranceExitDistance)) {
                lv_bestEntranceExit = lv_entranceExit;
                lv_bestEntranceExitDistance = lv_entranceExitDistance;
            }

        }
        if ((UnitIsValid(lv_bestEntranceExit) == true)) {
            lv_heroOrder = UnitOrder(lp_vikingUnit, 0);
            if (((lv_heroOrder == null) || (OrderGetAbilityCommand(lv_heroOrder) != AbilityCommand("CaptureMacGuffin", 0)))) {
                HeroAIUnitIssueOrder(lp_vikingUnit, OrderTargetingUnit(AbilityCommand("CaptureMacGuffin", 0), lv_bestEntranceExit), c_orderQueueReplace);
            }

            return true;
        }

    }

    return false;
}

point libAIAI_gf_HeroAILostVikingsDetermineCenterVikingControllerPosition (int lp_trigPlayer) {
    // Variable Declarations
    unitgroup lv_possibleCenterVikings;
    int lv_loopIndex;
    unit lv_loopUnit;

    // Variable Initialization
    lv_possibleCenterVikings = UnitGroupEmpty();

    // Implementation
    if ((UnitIsValid(libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_boat) == true)) {
        libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking = null;
        return UnitGetPosition(libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_boat);
    }

    if ((UnitIsValid(libGame_gv_players[lp_trigPlayer].lv_activeVehicle) == true)) {
        if ((UnitHasBehavior2(libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_olaf, "UsingVehicle") == true)) {
            libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking = libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_olaf;
            return UnitGetPosition(libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking);
        }

        if ((UnitHasBehavior2(libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_baleog, "UsingVehicle") == true)) {
            libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking = libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_baleog;
            return UnitGetPosition(libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking);
        }

        if ((UnitHasBehavior2(libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_erik, "UsingVehicle") == true)) {
            libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking = libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_erik;
            return UnitGetPosition(libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking);
        }

    }

    if ((libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking != libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_olaf) && (libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking != libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_baleog) && (libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking != libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_erik)) {
        libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking = libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_olaf;
    }

    if ((libAIAI_gf_HeroAILostVikingsIsValidCenterViking(lp_trigPlayer, libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_olaf) == true)) {
        if ((libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking == libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_olaf)) {
            return UnitGetPosition(libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking);
        }

        if ((libAIAI_gf_HeroAILostVikingsIsValidCenterViking(lp_trigPlayer, libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking) == true)) {
            if ((DistanceBetweenPoints(UnitGetPosition(libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_olaf), UnitGetPosition(libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking)) <= 5.0)) {
                libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking = libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_olaf;
                return UnitGetPosition(libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking);
            }

        }
        else {
            libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking = libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_olaf;
            return UnitGetPosition(libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking);
        }
    }

    if ((libAIAI_gf_HeroAILostVikingsIsValidCenterViking(lp_trigPlayer, libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_baleog) == true)) {
        if ((libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking == libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_baleog)) {
            return UnitGetPosition(libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking);
        }

        if ((libAIAI_gf_HeroAILostVikingsIsValidCenterViking(lp_trigPlayer, libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking) == true)) {
            if ((DistanceBetweenPoints(UnitGetPosition(libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_baleog), UnitGetPosition(libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking)) <= 5.0)) {
                libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking = libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_baleog;
                return UnitGetPosition(libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking);
            }

        }
        else {
            libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking = libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_baleog;
            return UnitGetPosition(libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking);
        }
    }

    if ((libAIAI_gf_HeroAILostVikingsIsValidCenterViking(lp_trigPlayer, libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_erik) == true) && (libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking != libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_erik)) {
        libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking = libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_erik;
        return UnitGetPosition(libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking);
    }

    return UnitGetPosition(libGDHL_gv_lostVikingsPlayer[lp_trigPlayer].lv_centerViking);
}

bool libAIAI_gf_HeroAILostVikingsIsValidCenterViking (int lp_trigPlayer, unit lp_vikingUnit) {
    // Variable Declarations
    int lv_currentObjective;
    bool lv_wantsToBeInUnderworld;

    // Variable Initialization

    // Implementation
    if ((UnitIsAlive(lp_vikingUnit) == true) && (UnitHasBehavior2(lp_vikingUnit, "LostVikingsVikingDowned") == false)) {
        if ((libAIAI_gv_heroAIUnderworldStatus.lv_opened == true)) {
            lv_currentObjective = libAIAI_gf_HeroAIGetCurrentObjective(lp_trigPlayer);
            if ((lv_currentObjective == libAIAI_ge_HeroAIObjective_FollowHero)) {
                lv_wantsToBeInUnderworld = libAIAI_gf_HeroAIIsUnitInUnderworld(libAIAI_gf_HeroAIGetUnitToFollow(lp_trigPlayer));
            }
            else {
                if ((lv_currentObjective == libAIAI_ge_HeroAIObjective_CollectSkulls) && (libAIAI_gf_HeroAIIsExitingUnderworld(lp_trigPlayer) == false)) {
                    lv_wantsToBeInUnderworld = true;
                }

            }
            if ((libAIAI_gf_HeroAIIsUnitInUnderworld(lp_vikingUnit) != lv_wantsToBeInUnderworld)) {
                return false;
            }

        }

        return true;
    }
    else {
        return false;
    }
}

bool libAIAI_gf_AIShouldEnterTransport (int lp_trigPlayer, bool lp_isHumanControlled) {
    // Implementation
    if ((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lp_trigPlayer) == true) && (libAIAI_gf_HeroAIIsHigherPriority(0, libAIAI_ge_HeroAIPriority_PushLaneAttackTown) == false)) {
        return true;
    }
    else {
        return false;
    }
}

void libAIAI_gf_FreeAIFromTransport (int lp_player) {
    // Implementation
    if ((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lp_player) == true)) {
        libAIAI_gf_HeroAILeaveCurrentObjective(lp_player);
    }

}

void libAIAI_gf_RecruitAIForTransport (unit lp_transport) {
    unitgroup auto4519EFD5_g;
    int auto4519EFD5_u;

    // Variable Declarations
    int lv_playerUnit;
    unit lv_unitIterator;
    int lv_allyCount;
    unitgroup lv_alliesInArea;
    region lv_searchRegion;

    // Variable Initialization
    lv_alliesInArea = UnitGroupEmpty();

    // Implementation
    lv_searchRegion = RegionCircle(UnitGetPosition(lp_transport), 20.0);
    lv_alliesInArea = libAIAI_gf_AIGetAllyHeroesInRegion(UnitGetOwner(lp_transport), lv_searchRegion);
    lv_allyCount = UnitGroupCount(lv_alliesInArea, c_unitCountAlive);
    if ((lv_allyCount > 0)) {
        auto4519EFD5_g = lv_alliesInArea;
        auto4519EFD5_u = 1;
        for ( ; auto4519EFD5_u <= UnitGroupCount(auto4519EFD5_g, c_unitCountAll) ; auto4519EFD5_u += (lv_unitIterator == UnitGroupUnit(auto4519EFD5_g, auto4519EFD5_u)) ) {
            lv_unitIterator = UnitGroupUnit(auto4519EFD5_g, auto4519EFD5_u);
            lv_playerUnit = UnitGetOwner(lv_unitIterator);
            if (((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lv_playerUnit) == true) && (libAIAI_gf_AIShouldEnterTransport(lv_playerUnit, true) == true))) {
                libAIAI_gv_aIHeroes[lv_playerUnit].lv_targetTransport = lp_transport;
                libAIAI_gf_HeroAIChangeState(lv_playerUnit, libAIAI_ge_HeroAIStates_HSEnterTransport);
            }

        }
    }

}

void libAIAI_gf_HeroAIUpdateAIStatus (int lp_trigPlayer) {
    // Variable Declarations
    int lv_objective;
    int lv_priority;
    text lv_botStatus;

    // Variable Initialization

    // Implementation
    libCore_gv_segTriggerPlayer = lp_trigPlayer;
    libCore_gf_CallRegisteredSegregationTriggers(libCore_ge_SegregationTriggerTypes_HeroAIDebuggingUpdateStatus);
    if ((libUIUI_gv_uIHeroStatusFrames[lp_trigPlayer].lv_botStatusLabel[1] != c_invalidDialogControlId) && (libUIUI_gv_uIHeroStatusFrames[lp_trigPlayer].lv_botDifficultyLabel[1] != c_invalidDialogControlId)) {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_aIBehaviorsEnabled == true)) {
            if ((libAIAI_gv_heroAIDisplayAIStatus == true) && (libAIAI_gf_HeroAIIsAIEnabledForPlayer(lp_trigPlayer) == true)) {
                libAIAI_gf_HeroAIUpdateAIStatusHelper(lp_trigPlayer, libUIUI_gv_uIHeroStatusFrames[lp_trigPlayer].lv_botStatusLabel[1], libUIUI_gv_uIHeroStatusFrames[lp_trigPlayer].lv_botDifficultyLabel[1]);
            }
            else {
                DialogControlSetVisible(libUIUI_gv_uIHeroStatusFrames[lp_trigPlayer].lv_botStatusLabel[1], PlayerGroupAll(), false);
                DialogControlSetVisible(libUIUI_gv_uIHeroStatusFrames[lp_trigPlayer].lv_botDifficultyLabel[1], PlayerGroupAll(), false);
            }
        }

    }

}

void libAIAI_gf_HeroAIUpdateAIStatusHelper (int lp_trigPlayer, int lp_statusLabel, int lp_difficultyLabel) {
    // Variable Declarations
    int lv_objective;
    int lv_priority;
    text lv_botStatus;
    string lv_goalName;

    // Variable Initialization
    lv_goalName = "";

    // Implementation
    lv_goalName = libAIAI_gf_HeroAIGetGoalName(libGame_gv_players[lp_trigPlayer].lv_activeVehicle);
    if ((lv_goalName != null) && (lv_goalName != libAIAI_gv_heroAILegacyGoal)) {
    }
    else {
        lv_goalName = libAIAI_gf_HeroAIGetGoalName(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit);
    }
    if ((lv_goalName != null) && (lv_goalName != libAIAI_gv_heroAILegacyGoal)) {
        lv_botStatus = StringToText(lv_goalName);
    }
    else {
        if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSUnused)) {
            lv_botStatus = StringToText("Disabled");
        }
        else {
            lv_objective = libAIAI_gf_HeroAIGetCurrentObjective(lp_trigPlayer);
            lv_priority = libAIAI_gf_HeroAIGetCurrentPriority(lp_trigPlayer);
            lv_botStatus = (lv_botStatus + StringExternal("Param/Value/lib_AIAI_C6F7AE7D"));
            lv_botStatus = (lv_botStatus + StringToText(libAIAI_ge_HeroAIStates_Ident(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState)));
            if ((libAIAI_gv_aIHeroes[lp_trigPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSCustomMapState)) {
                lv_botStatus = (lv_botStatus + StringExternal("Param/Value/lib_AIAI_2A6A5505"));
                lv_botStatus = (lv_botStatus + StringToText(IntToString(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_hSMapStateCurrentState)));
            }

            lv_botStatus = (lv_botStatus + StringExternal("Param/Value/lib_AIAI_702AABBB"));
            lv_botStatus = (lv_botStatus + StringToText(libAIAI_ge_HeroAIObjective_Ident(lv_objective)));
            lv_botStatus = (lv_botStatus + StringExternal("Param/Value/lib_AIAI_5C2A831B"));
            lv_botStatus = (lv_botStatus + IntToText((lv_priority)));
            lv_botStatus = (lv_botStatus + StringExternal("Param/Value/lib_AIAI_F89BC0D5"));
            lv_botStatus = (lv_botStatus + StringToText(libAIAI_ge_HeroAIPriority_Ident(lv_priority)));
            lv_botStatus = (lv_botStatus + StringExternal("Param/Value/lib_AIAI_F20B8B35"));
            lv_botStatus = (lv_botStatus + StringToText(libAIAI_ge_HeroAIDifficulty_Ident(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_difficulty)));
            lv_botStatus = (lv_botStatus + StringExternal("Param/Value/lib_AIAI_65A63D5B"));
            lv_botStatus = (lv_botStatus + (StringExternal("Param/Value/lib_AIAI_B9C07266") + FixedToText(UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lp_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent), c_fixedPrecisionAny)));
            lv_botStatus = (lv_botStatus + StringExternal("Param/Value/lib_AIAI_2E4EAC55"));
        }
    }
    libNtve_gf_SetDialogItemText(lp_statusLabel, lv_botStatus, PlayerGroupAll());
    DialogControlSetVisible(lp_statusLabel, PlayerGroupAll(), true);
    TextExpressionSetToken("Param/Expression/lib_AIAI_37C3B490", "A", libAIAI_gf_HeroAIDifficultyDisplayText(lp_trigPlayer));
    libNtve_gf_SetDialogItemText(lp_difficultyLabel, TextExpressionAssemble("Param/Expression/lib_AIAI_37C3B490"), PlayerGroupAll());
    DialogControlSetVisible(lp_difficultyLabel, PlayerGroupAll(), true);
}

void libAIAI_gf_HeroAILostVikingsClearDebuggingUI (int lp_trigPlayer) {
    // Implementation
    DialogControlDestroy(libUIUI_gv_lostVikingsDebuggingLabels[lp_trigPlayer].lv_botStatusLabel[1]);
    DialogControlDestroy(libUIUI_gv_lostVikingsDebuggingLabels[lp_trigPlayer].lv_botDifficultyLabel[1]);
    DialogControlDestroy(libUIUI_gv_lostVikingsDebuggingLabels[lp_trigPlayer].lv_botStatusLabel[2]);
    DialogControlDestroy(libUIUI_gv_lostVikingsDebuggingLabels[lp_trigPlayer].lv_botDifficultyLabel[2]);
    DialogControlDestroy(libUIUI_gv_lostVikingsDebuggingLabels[lp_trigPlayer].lv_botStatusLabel[3]);
    DialogControlDestroy(libUIUI_gv_lostVikingsDebuggingLabels[lp_trigPlayer].lv_botDifficultyLabel[3]);
    libUIUI_gv_lostVikingsDebuggingLabels[lp_trigPlayer].lv_botStatusLabel[1] = c_invalidDialogControlId;
    libUIUI_gv_lostVikingsDebuggingLabels[lp_trigPlayer].lv_botDifficultyLabel[1] = c_invalidDialogControlId;
    libUIUI_gv_lostVikingsDebuggingLabels[lp_trigPlayer].lv_botStatusLabel[2] = c_invalidDialogControlId;
    libUIUI_gv_lostVikingsDebuggingLabels[lp_trigPlayer].lv_botDifficultyLabel[2] = c_invalidDialogControlId;
    libUIUI_gv_lostVikingsDebuggingLabels[lp_trigPlayer].lv_botStatusLabel[3] = c_invalidDialogControlId;
    libUIUI_gv_lostVikingsDebuggingLabels[lp_trigPlayer].lv_botDifficultyLabel[3] = c_invalidDialogControlId;
}

trigger auto_libAIAI_gf_SummonedAIInitialAttackLogic_Trigger = null;
bool auto_libAIAI_gf_SummonedAIInitialAttackLogic_lp_attackCreatorsTarget;
unit auto_libAIAI_gf_SummonedAIInitialAttackLogic_lp_summonedUnit;
unit auto_libAIAI_gf_SummonedAIInitialAttackLogic_lp_creatorUnit;

void libAIAI_gf_SummonedAIInitialAttackLogic (bool lp_attackCreatorsTarget, unit lp_summonedUnit, unit lp_creatorUnit) {
    auto_libAIAI_gf_SummonedAIInitialAttackLogic_lp_attackCreatorsTarget = lp_attackCreatorsTarget;
    auto_libAIAI_gf_SummonedAIInitialAttackLogic_lp_summonedUnit = lp_summonedUnit;
    auto_libAIAI_gf_SummonedAIInitialAttackLogic_lp_creatorUnit = lp_creatorUnit;

    if (auto_libAIAI_gf_SummonedAIInitialAttackLogic_Trigger == null) {
        auto_libAIAI_gf_SummonedAIInitialAttackLogic_Trigger = TriggerCreate("auto_libAIAI_gf_SummonedAIInitialAttackLogic_TriggerFunc");
    }

    TriggerExecute(auto_libAIAI_gf_SummonedAIInitialAttackLogic_Trigger, false, false);
}

bool auto_libAIAI_gf_SummonedAIInitialAttackLogic_TriggerFunc (bool testConds, bool runActions) {
    bool lp_attackCreatorsTarget = auto_libAIAI_gf_SummonedAIInitialAttackLogic_lp_attackCreatorsTarget;
    unit lp_summonedUnit = auto_libAIAI_gf_SummonedAIInitialAttackLogic_lp_summonedUnit;
    unit lp_creatorUnit = auto_libAIAI_gf_SummonedAIInitialAttackLogic_lp_creatorUnit;

    // Variable Declarations
    unit lv_targetUnit;
    abilcmd lv_attackAbility;

    // Variable Initialization

    // Implementation
    libAIAI_gf_MinionAIUnhookUnitFromMinionAI(lp_summonedUnit);
    while ((UnitFilterMatch(lp_summonedUnit, UnitGetOwner(lp_creatorUnit), UnitFilter(0, (1 << (c_targetFilterStunned - 32)), 0, 0)) == true)) {
        Wait(0.0625, c_timeGame);
    }
    if ((UnitAbilityExists(lp_summonedUnit, "AttackAlly") == true)) {
        lv_attackAbility = AbilityCommand("AttackAlly", 0);
    }
    else {
        lv_attackAbility = AbilityCommand("attack", 0);
    }
    if ((OrderGetAbilityCommand(UnitOrder(lp_creatorUnit, 0)) == AbilityCommand("attack", 0)) && (lp_attackCreatorsTarget == true)) {
        if ((OrderGetTargetPoint(UnitOrder(lp_creatorUnit, 0)) == null)) {
            lv_targetUnit = OrderGetTargetUnit(UnitOrder(lp_creatorUnit, 0));
            UnitIssueOrder(lp_summonedUnit, OrderTargetingUnit(lv_attackAbility, lv_targetUnit), c_orderQueueReplace);
        }
        else {
            UnitIssueOrder(lp_summonedUnit, OrderTargetingPoint(lv_attackAbility, OrderGetTargetPoint(UnitOrder(lp_creatorUnit, 0))), c_orderQueueReplace);
        }
    }
    else {
        Wait(0.0625, c_timeGame);
        if ((UnitIsAlive(lp_summonedUnit) == true)) {
            UnitIssueOrder(lp_summonedUnit, OrderTargetingPoint(lv_attackAbility, UnitGetPosition(lp_summonedUnit)), c_orderQueueReplace);
        }

    }
    while ((UnitIsAlive(lp_summonedUnit) == true) && (OrderGetAbilityCommand(UnitOrder(lp_summonedUnit, 0)) == lv_attackAbility) && (UnitIsSelected(lp_summonedUnit, UnitGetOwner(lp_summonedUnit)) == false)) {
        Wait(0.125, c_timeGame);
        if ((UnitIsAlive(lp_summonedUnit) == true) && (UnitIsAlive(lv_targetUnit) == false)) {
            UnitIssueOrder(lp_summonedUnit, OrderTargetingPoint(lv_attackAbility, UnitGetPosition(lp_summonedUnit)), c_orderQueueReplace);
        }

    }
    Wait(0.0625, c_timeGame);
    if ((UnitIsAlive(lp_summonedUnit) == true) && (UnitIsSelected(lp_summonedUnit, UnitGetOwner(lp_summonedUnit)) == false)) {
        libGame_gf_CalculateSpawnedMinionGoalPoints(UnitGetOwner(lp_summonedUnit), UnitGetPosition(lp_summonedUnit));
        libAIAI_gf_MinionAIStartMinionAI(-1, lp_summonedUnit, libGame_gv_spawnedMinionLane, libGame_gv_spawnedMinionFirstWaypointIndex, false, true, false, 0, false);
    }

    return true;
}

bool libAIAI_gf_IsAbilityHeroic (int lp_player, abilcmd lp_ability) {
    // Implementation
    if (((lp_ability == libAIAI_gv_aIHeroes[lp_player].lv_castAbility[3]) || (lp_ability == libAIAI_gv_aIHeroes[lp_player].lv_castAbility[4]))) {
        return true;
    }
    else {
        return false;
    }
}

unitgroup libAIAI_gf_AIGetAlliesInRegion (int lp_player, region lp_region) {
    // Implementation
    return UnitGroupAlliance(lp_player, c_unitAllianceAlly, lp_region, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
}

unitgroup libAIAI_gf_AIGetAllyHeroesInRegion (int lp_player, region lp_region) {
    // Implementation
    return UnitGroupAlliance(lp_player, c_unitAllianceAlly, lp_region, libCore_gv_filtersHeroicandnotBenign, 0);
}

unitgroup libAIAI_gf_AIGetAllyMinionsInRegion (int lp_player, region lp_region) {
    // Implementation
    return UnitGroupAlliance(lp_player, c_unitAllianceAlly, lp_region, UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
}

unitgroup libAIAI_gf_AIGetEnemiesInRegion (int lp_player, region lp_region) {
    // Implementation
    return UnitGroupAlliance(lp_player, c_unitAllianceEnemy, lp_region, UnitFilter(0, 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
}

unitgroup libAIAI_gf_AIGetEnemyHeroesInRegion (int lp_player, region lp_region) {
    // Implementation
    return UnitGroupAlliance(lp_player, c_unitAllianceEnemy, lp_region, libCore_gv_filtersHeroicandnotBenign, 0);
}

unitgroup libAIAI_gf_AIGetEnemyMinionsInRegion (int lp_player, region lp_region) {
    // Implementation
    return UnitGroupAlliance(lp_player, c_unitAllianceEnemy, lp_region, UnitFilter((1 << c_targetFilterBiological), 0, (1 << c_targetFilterLight) | (1 << c_targetFilterMassive) | (1 << c_targetFilterMissile) | (1 << c_targetFilterItem), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)) | (1 << (c_targetFilterBenign - 32))), 0);
}

unitgroup libAIAI_gf_AIGetVisibleUnitsFromGroup (int lp_player, unitgroup lp_group) {
    unitgroup auto50E9F3E3_g;
    int auto50E9F3E3_u;

    // Variable Declarations
    unit lv_enemy;
    unitgroup lv_enemies;

    // Variable Initialization
    lv_enemies = UnitGroupEmpty();

    // Implementation
    auto50E9F3E3_g = lp_group;
    auto50E9F3E3_u = 1;
    for ( ; auto50E9F3E3_u <= UnitGroupCount(auto50E9F3E3_g, c_unitCountAll) ; auto50E9F3E3_u += (lv_enemy == UnitGroupUnit(auto50E9F3E3_g, auto50E9F3E3_u)) ) {
        lv_enemy = UnitGroupUnit(auto50E9F3E3_g, auto50E9F3E3_u);
        if ((libNtve_gf_UnitIsVisibleToPlayer(lv_enemy, lp_player) == true)) {
            UnitGroupAdd(lv_enemies, lv_enemy);
        }

    }
    return lv_enemies;
}

fixed libAIAI_gf_AIGetActiveWeaponRange (unit lp_unit) {
    int autoEDA1BD1C_ae;
    int autoEDA1BD1C_ai;

    // Variable Declarations
    fixed lv_bestRange;
    int lv_weaponIndex;

    // Variable Initialization

    // Implementation
    autoEDA1BD1C_ae = UnitWeaponCount(lp_unit);
    autoEDA1BD1C_ai = 1;
    lv_weaponIndex = 1;
    for ( ; ( (autoEDA1BD1C_ai >= 0 && lv_weaponIndex <= autoEDA1BD1C_ae) || (autoEDA1BD1C_ai <= 0 && lv_weaponIndex >= autoEDA1BD1C_ae) ) ; lv_weaponIndex += autoEDA1BD1C_ai ) {
        if ((UnitWeaponIsEnabled(lp_unit, lv_weaponIndex) == true) && (UnitWeaponRange(lp_unit, lv_weaponIndex) > lv_bestRange)) {
            lv_bestRange = UnitWeaponRange(lp_unit, lv_weaponIndex);
        }

    }
    return lv_bestRange;
}

fixed libAIAI_gf_AIGetAnyWeaponRangeIncludesNonActive (unit lp_unit) {
    int auto4040C6FA_ae;
    int auto4040C6FA_ai;

    // Variable Declarations
    fixed lv_bestRange;
    int lv_weaponIndex;

    // Variable Initialization

    // Implementation
    auto4040C6FA_ae = UnitWeaponCount(lp_unit);
    auto4040C6FA_ai = 1;
    lv_weaponIndex = 1;
    for ( ; ( (auto4040C6FA_ai >= 0 && lv_weaponIndex <= auto4040C6FA_ae) || (auto4040C6FA_ai <= 0 && lv_weaponIndex >= auto4040C6FA_ae) ) ; lv_weaponIndex += auto4040C6FA_ai ) {
        if ((UnitWeaponRange(lp_unit, lv_weaponIndex) > lv_bestRange)) {
            lv_bestRange = UnitWeaponRange(lp_unit, lv_weaponIndex);
        }

    }
    return lv_bestRange;
}

bool libAIAI_gf_AIUnitBehindEnemyGateEstimate (point lp_selfPosition, int lp_selfPlayer, unit lp_enemyUnit) {
    // Implementation
    return libAIAI_gf_AIIsPointBehindEnemyGateEstimate(lp_selfPosition, lp_selfPlayer, UnitGetPosition(lp_enemyUnit));
}

bool libAIAI_gf_AIIsPointBehindEnemyGateEstimate (point lp_selfPosition, int lp_selfPlayer, point lp_otherPoint) {
    unitgroup auto49113F57_g;
    int auto49113F57_u;

    // Variable Declarations
    const fixed lv_maxSearchRadius = 8.0;
    const fixed lv_offsetFromEdge = 1.0;
    fixed lv_originalDistance;
    point lv_centerPoint;
    fixed lv_searchRadius;
    unitgroup lv_enemyStructures;
    unit lv_testUnit;
    unit lv_enemyGate;
    fixed lv_selfDistToGate;
    fixed lv_selfDistToEnemy;
    fixed lv_enemyDistToGate;
    point lv_enemyGatePos;
    point lv_inFrontOfGate;
    point lv_selfProjectedOntoGateLine;
    point lv_enemyProjectedOntoGateLine;

    // Variable Initialization

    // Implementation
    lv_originalDistance = DistanceBetweenPoints(lp_selfPosition, lp_otherPoint);
    lv_searchRadius = MinF(MaxF(libAIAI_gv_aIGateNearbyRange, (lv_offsetFromEdge + (0.5 * lv_originalDistance))), lv_maxSearchRadius);
    if ((lv_originalDistance < ((lv_searchRadius - lv_offsetFromEdge) * 2.0))) {
        lv_centerPoint = MidPoint(lp_selfPosition, lp_otherPoint);
    }
    else {
        lv_centerPoint = libNtve_gf_PointOffsetTowardsPoint(lp_selfPosition, (lv_searchRadius - lv_offsetFromEdge), lp_otherPoint);
    }
    lv_enemyStructures = UnitGroupSearch(null, lp_selfPlayer, lv_centerPoint, lv_searchRadius, libAIAI_gv_uF_MinionAI_GetNearestEnemyStructure, 0);
    auto49113F57_g = lv_enemyStructures;
    auto49113F57_u = 1;
    for ( ; auto49113F57_u <= UnitGroupCount(auto49113F57_g, c_unitCountAll) ; auto49113F57_u += (lv_testUnit == UnitGroupUnit(auto49113F57_g, auto49113F57_u)) ) {
        lv_testUnit = UnitGroupUnit(auto49113F57_g, auto49113F57_u);
        if ((UnitTypeTestFlag(UnitGetType(lv_testUnit), c_unitFlagTownStructureGate) == true) && (UnitIsAlive(lv_testUnit) == true)) {
            lv_enemyGate = lv_testUnit;
            break;
        }

    }
    if ((lv_enemyGate == null)) {
        return false;
    }

    lv_enemyGatePos = UnitGetPosition(lv_enemyGate);
    lv_inFrontOfGate = PointWithOffsetPolar(lv_enemyGatePos, libAIAI_gv_aIGateNearbyRange, UnitGetFacing(lv_enemyGate));
    lv_selfProjectedOntoGateLine = ProjectPointOntoLine(lv_enemyGatePos, lv_inFrontOfGate, lp_selfPosition);
    lv_enemyProjectedOntoGateLine = ProjectPointOntoLine(lv_enemyGatePos, lv_inFrontOfGate, lp_otherPoint);
    lv_selfDistToGate = DistanceBetweenPoints(lv_selfProjectedOntoGateLine, lv_enemyGatePos);
    lv_selfDistToEnemy = DistanceBetweenPoints(lv_selfProjectedOntoGateLine, lv_enemyProjectedOntoGateLine);
    if ((lv_selfDistToEnemy < lv_selfDistToGate)) {
        return false;
    }

    lv_enemyDistToGate = DistanceBetweenPoints(lv_enemyProjectedOntoGateLine, lv_enemyGatePos);
    if ((lv_enemyDistToGate > lv_selfDistToEnemy)) {
        return false;
    }

    return true;
}

bool libAIAI_gf_AIIsPointBehindContentionPoint (int lp_faction, int lp_lane, point lp_testPoint) {
    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        return (libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAITeamIndexOfFaction(lp_faction)].lv_laneData[lp_lane].lv_contentionPointLanePosition > libAIAI_gf_AIGetClosestLanePosition(lp_lane, lp_testPoint));
    }
    else {
        return (libAIAI_gv_heroAITeamData[libAIAI_gf_HeroAITeamIndexOfFaction(lp_faction)].lv_laneData[lp_lane].lv_contentionPointLanePosition < libAIAI_gf_AIGetClosestLanePosition(lp_lane, lp_testPoint));
    }
}

bool libAIAI_gf_AIHeroNearContentionPoint (int lp_player, fixed lp_range) {
    // Variable Declarations
    int lv_teamIndex;
    point lv_position;
    int lv_lane;
    point lv_contentionPoint;

    // Variable Initialization

    // Implementation
    lv_teamIndex = libAIAI_gf_HeroAIGetAllyTeamIndex(lp_player);
    lv_position = UnitGetPosition(libAIAI_gv_aIHeroes[lp_player].lv_currentHeroUnit);
    lv_lane = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_heroTrackingData[lp_player].lv_lastSeenLane;
    lv_contentionPoint = libAIAI_gv_heroAITeamData[lv_teamIndex].lv_laneData[lv_lane].lv_contentionPoint;
    if ((DistanceBetweenPoints(lv_position, lv_contentionPoint) <= lp_range)) {
        return true;
    }
    else {
        return false;
    }
}

fixed libAIAI_gf_AIGetClosestLanePosition (int lp_laneIndex, point lp_point) {
    // Variable Declarations
    int lv_closestIndex;
    int lv_secondaryIndex;
    point lv_closestPoint;

    // Variable Initialization

    // Implementation
    libGame_gf_CalculateClosestLaneDataForLane(lp_point, lp_laneIndex);
    lv_closestIndex = libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_closestIndex;
    lv_secondaryIndex = libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_secondaryIndex;
    lv_closestPoint = libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_closestPoint;
    return AILaneWaypointConvertPointToWaydist(lp_laneIndex, lv_closestIndex, lv_secondaryIndex, lv_closestPoint);
}

fixed libAIAI_gf_AIGetLaneOffsetOfPoint (int lp_laneIndex, point lp_testPoint) {
    // Variable Declarations
    int lv_nextIndex;
    int lv_previousIndex;
    point lv_nextPoint;
    point lv_previousPoint;
    point lv_dir;
    point lv_normal;
    point lv_relativePoint;

    // Variable Initialization

    // Implementation
    libGame_gf_CalculateClosestLaneDataForLane(lp_testPoint, lp_laneIndex);
    if ((libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_closestIndex < libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_secondaryIndex)) {
        lv_previousIndex = libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_closestIndex;
        lv_nextIndex = libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_secondaryIndex;
    }
    else {
        lv_previousIndex = libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_secondaryIndex;
        lv_nextIndex = libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_closestIndex;
    }
    lv_nextPoint = libGame_gv_laneData[lp_laneIndex].lv_waypoints[lv_nextIndex];
    lv_previousPoint = libGame_gv_laneData[lp_laneIndex].lv_waypoints[lv_previousIndex];
    lv_dir = AIGetDirection(lv_previousPoint, lv_nextPoint);
    lv_normal = Point(PointGetY(lv_dir), (PointGetX(lv_dir) * -1.0));
    lv_relativePoint = AIGetDirection(lv_previousPoint, lp_testPoint);
    if ((((PointGetX(lv_relativePoint) * PointGetX(lv_normal)) + (PointGetY(lv_relativePoint) * PointGetY(lv_normal))) > 0.0)) {
        return libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_closestDist;
    }
    else {
        return (-1.0 * libGame_gv_closestLaneData.lv_laneData[lp_laneIndex].lv_closestDist);
    }
}

fixed libAIAI_gf_AIAdvanceLanePosition (int lp_faction, int lp_laneIndex, fixed lp_lanePosition, fixed lp_distance) {
    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        return libAIAI_gf_AIMoveAlongLane(lp_laneIndex, lp_lanePosition, lp_distance);
    }
    else {
        return libAIAI_gf_AIMoveAlongLane(lp_laneIndex, lp_lanePosition, (lp_distance * -1.0));
    }
}

fixed libAIAI_gf_AIRetreatLanePosition (int lp_faction, int lp_laneIndex, fixed lp_lanePosition, fixed lp_distance) {
    // Implementation
    if ((lp_faction == libGame_ge_Faction_Order)) {
        return libAIAI_gf_AIMoveAlongLane(lp_laneIndex, lp_lanePosition, (lp_distance * -1.0));
    }
    else {
        return libAIAI_gf_AIMoveAlongLane(lp_laneIndex, lp_lanePosition, lp_distance);
    }
}

fixed libAIAI_gf_AIMoveAlongLane (int lp_laneIndex, fixed lp_lanePosition, fixed lp_distance) {
    // Variable Declarations
    fixed lv_distanceLeftToMove;
    point lv_currentPosition;
    int lv_nextWaypoint;
    int lv_waypointAdvance;
    point lv_nextWaypointPosition;
    fixed lv_distanceToNextWaypoint;
    point lv_direction;
    int lv_finalLanePosition;

    // Variable Initialization

    // Implementation
    lv_distanceLeftToMove = AbsF(lp_distance);
    lv_currentPosition = AILaneWaypointConvertWaydistOffsetToPoint(lp_laneIndex, lp_lanePosition, 0.0);
    if ((lp_distance > 0.0)) {
        lv_nextWaypoint = CeilingI(lp_lanePosition);
        lv_waypointAdvance = 1;
    }
    else {
        lv_nextWaypoint = FloorI(lp_lanePosition);
        lv_waypointAdvance = -1;
    }
    while ((lv_distanceLeftToMove > 0.0)) {
        lv_nextWaypointPosition = libGame_gv_laneData[lp_laneIndex].lv_waypoints[lv_nextWaypoint];
        lv_distanceToNextWaypoint = DistanceBetweenPoints(lv_currentPosition, lv_nextWaypointPosition);
        if ((lv_distanceLeftToMove > lv_distanceToNextWaypoint)) {
            lv_currentPosition = lv_nextWaypointPosition;
            lv_distanceLeftToMove -= lv_distanceToNextWaypoint;
            lv_nextWaypoint += lv_waypointAdvance;
            if (((lv_nextWaypoint < 1) || (lv_nextWaypoint > libGame_gv_laneData[lp_laneIndex].lv_waypointCount))) {
                break;
            }

        }
        else {
            lv_direction = AIGetDirection(lv_currentPosition, lv_nextWaypointPosition);
            lv_currentPosition = libCore_gf_AdvancePointinDirection(lv_currentPosition, lv_direction, lv_distanceLeftToMove);
            lv_distanceLeftToMove = 0.0;
        }
    }
    return libAIAI_gf_AIGetClosestLanePosition(lp_laneIndex, lv_currentPosition);
}

// Triggers
//--------------------------------------------------------------------------------------------------
// Trigger: #Include AI
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_IncludeAI_Func (bool testConds, bool runActions) {
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_IncludeAI_Init () {
    libAIAI_gt_IncludeAI = TriggerCreate("libAIAI_gt_IncludeAI_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: MinionAI - AI Routine
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_MinionAIAIRoutine_Func (bool testConds, bool runActions) {
    int autoE5BAC9A3_ae;
    int autoE5BAC9A3_ai;

    // Variable Declarations
    int lv_firstMinionIndex;
    int lv_minionIndex;
    int lv_oldState;
    int lv_newState;
    order lv_minionOrder;
    abilcmd lv_minionAbilityCommand;
    fixed lv_distanceToBattleStandard;
    unit lv_minionCurrentTarget;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_firstMinionIndex = ModI(FixedToInt((GameGetMissionTime() * 16.0)), libAIAI_gv_aIWaveIndexMod);
    autoE5BAC9A3_ae = libAIAI_gv_minionAIActiveMinionsUpperBound;
    autoE5BAC9A3_ai = libAIAI_gv_aIWaveIndexMod;
    lv_minionIndex = lv_firstMinionIndex;
    for ( ; ( (autoE5BAC9A3_ai >= 0 && lv_minionIndex <= autoE5BAC9A3_ae) || (autoE5BAC9A3_ai <= 0 && lv_minionIndex >= autoE5BAC9A3_ae) ) ; lv_minionIndex += autoE5BAC9A3_ai ) {
        if ((libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_isAlive == true) && (UnitIsValid(libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_minionUnit) == true) && (UnitTestState(libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_minionUnit, c_unitStateMoveSuppressed) == false)) {
            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_unitPosition = UnitGetPosition(libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_minionUnit);
            lv_minionOrder = UnitOrder(libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_minionUnit, 0);
            lv_minionAbilityCommand = OrderGetAbilityCommand(lv_minionOrder);
            if ((lv_minionOrder != null) && (lv_minionAbilityCommand != libAIAI_gv_aIMoveAbil) && (lv_minionAbilityCommand != libAIAI_gv_aIAttackAbil) && (lv_minionAbilityCommand != libAIAI_gv_aIAttackAllyAbil) && (lv_minionAbilityCommand != AbilityCommand("move", 2))) {
                continue;
            }

            if ((OrderGetTargetType(lv_minionOrder) == c_orderTargetUnit) && (libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_minionUnitType == "CatapultMinion")) {
                lv_minionCurrentTarget = OrderGetTargetUnit(lv_minionOrder);
                if ((UnitTypeTestAttribute(UnitGetType(lv_minionCurrentTarget), c_unitAttributeStructure) == true)) {
                    continue;
                }

            }

            if ((libGame_gf_LaneIndexIsValid(libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_lane) == true) && ((DistanceBetweenPoints(libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_unitPosition, libAIAI_gf_MinionAIGetNextWaypointForMinionIndex(lv_minionIndex)) <= libAIAI_gv_aIMinionWaypointAdvanceDistance) || ((libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_nextWaypoint != libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_initialWaypoint) && (libAIAI_gf_MinionAITestPastNextWaypoint(lv_minionIndex) == true)))) {
                libAIAI_gf_MinionAIAdvanceMinionToNextWaypoint(lv_minionIndex);
            }

            if ((libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_leashing == true) && (libAIAI_gf_MinionAIWithinLeashingDistanceofLane(lv_minionIndex) == true)) {
                libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_leashing = false;
            }

            lv_oldState = libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_state;
            lv_newState = libAIAI_gf_MinionAIDetermineState(lv_minionIndex, lv_oldState, lv_minionOrder);
            if (((lv_minionOrder == null) || (lv_minionAbilityCommand == AbilityCommand("move", 2)))) {
                libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_forceStateTransition = true;
            }
            else {
                if ((lv_newState == libAIAI_ge_MinionAIStates_Advancing) && (lv_oldState == libAIAI_ge_MinionAIStates_Advancing) && (libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_forceStateTransition == false)) {
                    if ((libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_leashing == true)) {
                        if (((lv_minionAbilityCommand != libAIAI_gv_aIMoveAbil) || (OrderGetTargetType(lv_minionOrder) != c_orderTargetPoint) || (OrderGetTargetPosition(lv_minionOrder) != libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_battleStandardPoint))) {
                            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_forceStateTransition = true;
                        }

                    }
                    else {
                        if ((lv_minionAbilityCommand != libAIAI_gv_aIAttackAbil) && (lv_minionAbilityCommand != libAIAI_gv_aIAttackAllyAbil)) {
                            libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_forceStateTransition = true;
                        }
                        else {
                            if ((OrderGetTargetType(lv_minionOrder) == c_orderTargetUnit)) {
                            }
                            else {
                                if (((OrderGetTargetType(lv_minionOrder) != c_orderTargetPoint) || (OrderGetTargetPosition(lv_minionOrder) != libAIAI_gf_MinionAIGetNextWaypointForMinionIndex(lv_minionIndex)))) {
                                    libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_forceStateTransition = true;
                                }

                            }
                        }
                    }
                }

            }
            if (((lv_oldState != lv_newState) || (libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_forceStateTransition == true))) {
                libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_state = lv_newState;
                libAIAI_gv_minionAIActiveMinions[lv_minionIndex].lv_forceStateTransition = false;
                libAIAI_gf_MinionAIUpdateBattleStandardDataForMinion(lv_minionIndex);
                libAIAI_gf_MinionAITransitionMinionIntoState(lv_minionIndex, lv_newState);
            }

            if ((libAIAI_gv_minionAIDisplayAIStatus == true)) {
                libAIAI_gf_MinionAIUpdateAIStatus(lv_minionIndex);
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_MinionAIAIRoutine_Init () {
    libAIAI_gt_MinionAIAIRoutine = TriggerCreate("libAIAI_gt_MinionAIAIRoutine_Func");
    TriggerEnable(libAIAI_gt_MinionAIAIRoutine, false);
    TriggerAddEventTimePeriodic(libAIAI_gt_MinionAIAIRoutine, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: MinionAI - Update Merc Path
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_MinionAIUpdateMercPath_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_mercLanerGroupIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_mercLanerGroupIndex = FixedToInt(UnitGetCustomValue(EventUnit(), libCore_gf_CustomValueIndex(libCore_ge_CustomValueIndexes_MercLanerGroupIndex)));
    if ((lv_mercLanerGroupIndex != 0)) {
        libMapM_gf_JungleCreateMercPath(libMapM_gv_jungleMiniMapLeader[lv_mercLanerGroupIndex], false);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_MinionAIUpdateMercPath_Init () {
    libAIAI_gt_MinionAIUpdateMercPath = TriggerCreate("libAIAI_gt_MinionAIUpdateMercPath_Func");
    TriggerEnable(libAIAI_gt_MinionAIUpdateMercPath, false);
    TriggerAddEventUnitNextWaypointUpdated(libAIAI_gt_MinionAIUpdateMercPath, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower - AI Routine
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_TowerAIRoutine_Func (bool testConds, bool runActions) {
    int autoAA64C2F1_ae;
    unitgroup auto01FB4449_g;
    int auto01FB4449_u;
    unitgroup autoDE2706A6_g;
    int autoDE2706A6_u;
    unitgroup autoA86AD4C0_g;
    int autoA86AD4C0_u;
    unitgroup autoC4927000_g;
    int autoC4927000_u;

    // Variable Declarations
    int lv_towerIndex;
    unit lv_towerIndexUnit;
    int lv_currentGameLoopMod;
    fixed lv_rangeToTarget;
    fixed lv_scanRange;
    fixed lv_towerRadius;
    fixed lv_targetRadius;
    unit lv_currentTarget;
    point lv_towerPosition;
    unitgroup lv_scanGroup;
    unitgroup lv_heroesInRange;
    unitgroup lv_minionsInRange;
    unitgroup lv_summonedUnitsInRange;
    unitgroup lv_towerPriority1UnitsInRange;
    unitgroup lv_towerPriority2UnitsInRange;
    unit lv_summonedUnit;
    unit lv_heroUnit;
    unit lv_towerPriority1Unit;
    unit lv_towerPriority2Unit;
    order lv_towerOrder;
    bool lv_clearedTowerUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_currentGameLoopMod = (FixedToInt((GameGetMissionTime() * 16.0)) % libAIAI_gv_aITowerIndexMod);
    autoAA64C2F1_ae = libAIAI_gv_towerTowerCount;
    lv_towerIndex = 1;
    for ( ; lv_towerIndex <= autoAA64C2F1_ae ; lv_towerIndex += 1 ) {
        lv_towerIndexUnit = libAIAI_gv_towerTowers[lv_towerIndex].lv_towerUnit;
        if ((UnitIsAlive(lv_towerIndexUnit) == true) && (UnitBehaviorCount(lv_towerIndexUnit, "TownCannonTowerInvulnerable") == 0) && (UnitHasBehavior2(lv_towerIndexUnit, "SuppressTowerAI") == false)) {
            lv_clearedTowerUnit = false;
            lv_currentTarget = libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit;
            if ((lv_currentTarget != null)) {
                if (((UnitIsAlive(lv_currentTarget) == false) || (UnitFilterMatch(lv_currentTarget, UnitGetOwner(lv_towerIndexUnit), libAIAI_gv_uF_TowerAI_Required_Invulnerable) == true) || (UnitFilterMatch(lv_currentTarget, UnitGetOwner(lv_towerIndexUnit), libAIAI_gv_uF_TowerAI_Required_Stasis) == true) || (UnitFilterMatch(lv_currentTarget, UnitGetOwner(lv_towerIndexUnit), libAIAI_gv_uF_TowerAI_Required_Visible) == false) || (UnitHasBehavior2(lv_currentTarget, "IgnoredByTowerAI") == true) || (UnitHasBehavior2(lv_currentTarget, "TowerAIPrioritzedTarget2") == true))) {
                    lv_clearedTowerUnit = true;
                    libAIAI_gf_DestroyTowerTargetPersistent(lv_towerIndex);
                    libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit = null;
                    lv_currentTarget = null;
                    UnitIssueOrder(lv_towerIndexUnit, Order(libAIAI_gv_aIStopAbil), c_orderQueueReplace);
                }
                else {
                    lv_rangeToTarget = DistanceBetweenPoints(UnitGetPosition(lv_towerIndexUnit), UnitGetPosition(lv_currentTarget));
                    if ((libGame_gf_TownGetTownStructurePresetFromUnit(lv_towerIndexUnit) == libGame_ge_TownStructureTypes_CannonTower)) {
                        lv_towerRadius = 1.0;
                    }
                    else if ((UnitGetType(lv_towerIndexUnit) == "TownTownHallL2")) {
                        lv_towerRadius = 2.5;
                    }
                    else if ((UnitGetType(lv_towerIndexUnit) == "TownTownHallL3")) {
                        lv_towerRadius = 3.0;
                    }
                    else if ((UnitGetType(lv_towerIndexUnit) == "KingsCore")) {
                        lv_towerRadius = 4.0;
                    }
                    lv_rangeToTarget -= lv_towerRadius;
                    lv_rangeToTarget -= UnitTypeGetProperty(UnitGetType(lv_currentTarget), c_unitPropRadius);
                    if ((lv_rangeToTarget > libAIAI_gv_towerTowers[lv_towerIndex].lv_range)) {
                        lv_clearedTowerUnit = true;
                        libAIAI_gf_DestroyTowerTargetPersistent(lv_towerIndex);
                        libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit = null;
                        lv_currentTarget = null;
                        UnitIssueOrder(lv_towerIndexUnit, Order(libAIAI_gv_aIStopAbil), c_orderQueueReplace);
                    }
                    else {
                        if ((libAIAI_gv_towerTowers[lv_towerIndex].lv_hasTarget == true) && ((UnitTestState(lv_towerIndexUnit, c_unitStateAttackSuppressed) == true) || (UnitFilterMatch(lv_towerIndexUnit, UnitGetOwner(lv_towerIndexUnit), UnitFilter(0, (1 << (c_targetFilterStunned - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true) || (UnitHasBehavior2(lv_towerIndexUnit, "StructureAmmoDisabler") == true) || (UnitAbilityCheck(lv_towerIndexUnit, "attack", true) == false) || (UnitFilterMatch(lv_towerIndexUnit, UnitGetOwner(lv_towerIndexUnit), UnitFilter(0, (1 << (c_targetFilterPassive - 32)), (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32)))) == true))) {
                            libAIAI_gf_DestroyTowerTargetPersistent(lv_towerIndex);
                            libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit = null;
                            lv_currentTarget = null;
                            UnitIssueOrder(lv_towerIndexUnit, Order(libAIAI_gv_aIStopAbil), c_orderQueueReplace);
                        }

                    }
                }
            }

            if (((lv_clearedTowerUnit == true) || ((lv_currentGameLoopMod == (lv_towerIndex % libAIAI_gv_aITowerIndexMod)) && (UnitWeaponPeriodRemaining(lv_towerIndexUnit, 1) <= 2.0)))) {
                if (((lv_currentTarget == null) || (UnitTypeTestAttribute(UnitGetType(lv_currentTarget), c_unitAttributeHeroic) == true))) {
                    if ((libGame_gf_TownGetTownStructurePresetFromUnit(lv_towerIndexUnit) == libGame_ge_TownStructureTypes_CannonTower)) {
                        lv_towerRadius = 1.0;
                    }
                    else if ((UnitGetType(lv_towerIndexUnit) == "TownTownHallL2")) {
                        lv_towerRadius = 2.5;
                    }
                    else if ((UnitGetType(lv_towerIndexUnit) == "TownTownHallL3")) {
                        lv_towerRadius = 3.0;
                    }
                    else if ((UnitGetType(lv_towerIndexUnit) == "KingsCore")) {
                        lv_towerRadius = 4.0;
                    }
                    lv_scanRange = (libAIAI_gv_towerTowers[lv_towerIndex].lv_range + lv_towerRadius);
                    lv_towerPosition = UnitGetPosition(lv_towerIndexUnit);
                    lv_scanGroup = UnitGroupSearch(null, UnitGetOwner(lv_towerIndexUnit), lv_towerPosition, lv_scanRange, libAIAI_gv_uF_TowerAI_Scan_Group, 0);
                    if ((UnitGroupCount(lv_scanGroup, c_unitCountAlive) > 0)) {
                        lv_minionsInRange = UnitGroupFilter(null, c_playerAny, lv_scanGroup, libAIAI_gv_uF_TowerAI_Required_Biological, 0);
                        if ((UnitGroupCount(lv_minionsInRange, c_unitCountAlive) > 0)) {
                            libAIAI_gf_DestroyTowerTargetPersistent(lv_towerIndex);
                            libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit = UnitGroupClosestToPoint(lv_minionsInRange, lv_towerPosition);
                        }
                        else {
                            lv_summonedUnitsInRange = UnitGroupFilter(null, c_playerAny, lv_scanGroup, libAIAI_gv_uF_TowerAI_Required_Summoned, 0);
                            auto01FB4449_g = lv_summonedUnitsInRange;
                            auto01FB4449_u = 1;
                            for ( ; auto01FB4449_u <= UnitGroupCount(auto01FB4449_g, c_unitCountAll) ; auto01FB4449_u += (lv_summonedUnit == UnitGroupUnit(auto01FB4449_g, auto01FB4449_u)) ) {
                                lv_summonedUnit = UnitGroupUnit(auto01FB4449_g, auto01FB4449_u);
                                if ((UnitHasBehavior2(lv_summonedUnit, "IgnoredByTowerAI") == true)) {
                                    UnitGroupRemove(lv_summonedUnitsInRange, lv_summonedUnit);
                                }

                            }
                            if ((UnitGroupCount(lv_summonedUnitsInRange, c_unitCountAlive) > 0)) {
                                libAIAI_gf_DestroyTowerTargetPersistent(lv_towerIndex);
                                libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit = UnitGroupClosestToPoint(lv_summonedUnitsInRange, lv_towerPosition);
                            }
                            else {
                                lv_towerPriority1UnitsInRange = UnitGroupSearch(null, UnitGetOwner(lv_towerIndexUnit), lv_towerPosition, lv_scanRange, libAIAI_gv_uF_TowerAI_Scan_Group, 0);
                                autoDE2706A6_g = lv_towerPriority1UnitsInRange;
                                autoDE2706A6_u = 1;
                                for ( ; autoDE2706A6_u <= UnitGroupCount(autoDE2706A6_g, c_unitCountAll) ; autoDE2706A6_u += (lv_towerPriority1Unit == UnitGroupUnit(autoDE2706A6_g, autoDE2706A6_u)) ) {
                                    lv_towerPriority1Unit = UnitGroupUnit(autoDE2706A6_g, autoDE2706A6_u);
                                    if ((UnitHasBehavior2(lv_towerPriority1Unit, "TowerAIPrioritzedTarget1") == false)) {
                                        UnitGroupRemove(lv_towerPriority1UnitsInRange, lv_towerPriority1Unit);
                                    }

                                }
                                if ((UnitGroupCount(lv_towerPriority1UnitsInRange, c_unitCountAlive) > 0)) {
                                    libAIAI_gf_DestroyTowerTargetPersistent(lv_towerIndex);
                                    libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit = UnitGroupClosestToPoint(lv_towerPriority1UnitsInRange, lv_towerPosition);
                                }
                                else {
                                    lv_towerPriority2UnitsInRange = UnitGroupSearch(null, UnitGetOwner(lv_towerIndexUnit), lv_towerPosition, lv_scanRange, libAIAI_gv_uF_TowerAI_Scan_Group, 0);
                                    autoA86AD4C0_g = lv_towerPriority2UnitsInRange;
                                    autoA86AD4C0_u = 1;
                                    for ( ; autoA86AD4C0_u <= UnitGroupCount(autoA86AD4C0_g, c_unitCountAll) ; autoA86AD4C0_u += (lv_towerPriority2Unit == UnitGroupUnit(autoA86AD4C0_g, autoA86AD4C0_u)) ) {
                                        lv_towerPriority2Unit = UnitGroupUnit(autoA86AD4C0_g, autoA86AD4C0_u);
                                        if ((UnitHasBehavior2(lv_towerPriority2Unit, "TowerAIPrioritzedTarget2") == false)) {
                                            UnitGroupRemove(lv_towerPriority2UnitsInRange, lv_towerPriority2Unit);
                                        }

                                    }
                                    if ((UnitGroupCount(lv_towerPriority2UnitsInRange, c_unitCountAlive) > 0)) {
                                        libAIAI_gf_DestroyTowerTargetPersistent(lv_towerIndex);
                                        libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit = UnitGroupClosestToPoint(lv_towerPriority2UnitsInRange, lv_towerPosition);
                                    }
                                    else {
                                        if ((libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit == null)) {
                                            lv_heroesInRange = UnitGroupFilter(null, c_playerAny, lv_scanGroup, libAIAI_gv_uF_TowerAI_Required_Heroic, 0);
                                            autoC4927000_g = lv_heroesInRange;
                                            autoC4927000_u = 1;
                                            for ( ; autoC4927000_u <= UnitGroupCount(autoC4927000_g, c_unitCountAll) ; autoC4927000_u += (lv_heroUnit == UnitGroupUnit(autoC4927000_g, autoC4927000_u)) ) {
                                                lv_heroUnit = UnitGroupUnit(autoC4927000_g, autoC4927000_u);
                                                if ((UnitHasBehavior2(lv_heroUnit, "IgnoredByTowerAI") == true)) {
                                                    UnitGroupRemove(lv_heroesInRange, lv_heroUnit);
                                                }

                                            }
                                            if ((UnitGroupCount(lv_heroesInRange, c_unitCountAlive) > 0)) {
                                                libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit = UnitGroupClosestToPoint(lv_heroesInRange, lv_towerPosition);
                                            }

                                        }

                                    }
                                }
                            }
                        }
                    }

                }

                if ((libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit != null)) {
                    lv_towerOrder = UnitOrder(lv_towerIndexUnit, 0);
                    if (((lv_towerOrder == null) || (OrderGetAbilityCommand(lv_towerOrder) != libAIAI_gv_aIAttackAbil) || (OrderGetTargetType(lv_towerOrder) != c_orderTargetUnit) || (OrderGetTargetUnit(lv_towerOrder) != libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit))) {
                        UnitIssueOrder(lv_towerIndexUnit, OrderTargetingUnit(libAIAI_gv_aIAttackAbil, libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit), c_orderQueueReplace);
                    }

                }

            }

        }
        else {
            if ((libAIAI_gv_towerTowers[lv_towerIndex].lv_dead == false)) {
                libAIAI_gv_towerTowers[lv_towerIndex].lv_dead = true;
                libAIAI_gf_DestroyTowerTargetPersistent(lv_towerIndex);
                UnitIssueOrder(lv_towerIndexUnit, Order(libAIAI_gv_aIStopAbil), c_orderQueueReplace);
                UnitIssueOrder(lv_towerIndexUnit, Order(AbilityCommand("TowerDeadMorph", 0)), c_orderQueueReplace);
                UnitCreateEffectUnit(lv_towerIndexUnit, "TowerTargetingLaserDestroyPersistent", libAIAI_gv_towerTowers[lv_towerIndex].lv_targetUnit);
            }

        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_TowerAIRoutine_Init () {
    libAIAI_gt_TowerAIRoutine = TriggerCreate("libAIAI_gt_TowerAIRoutine_Func");
    TriggerEnable(libAIAI_gt_TowerAIRoutine, false);
    TriggerAddEventTimePeriodic(libAIAI_gt_TowerAIRoutine, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: Tower Attacks Unit
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_TowerAttacksUnit_Func (bool testConds, bool runActions) {
    int autoF02661FA_ae;

    // Variable Declarations
    int lv_itTower;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((UnitFilterMatch(EventPlayerEffectUsedUnit(c_effectUnitTarget), UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster)), libCore_gv_filtersHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoF02661FA_ae = libAIAI_gv_towerTowerCount;
    lv_itTower = 1;
    for ( ; lv_itTower <= autoF02661FA_ae ; lv_itTower += 1 ) {
        if ((libAIAI_gv_towerTowers[lv_itTower].lv_towerUnit == EventPlayerEffectUsedUnit(c_effectUnitCaster))) {
            if ((libAIAI_gv_towerTowers[lv_itTower].lv_hasTarget == false)) {
                libAIAI_gv_towerTowers[lv_itTower].lv_targetUnit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                UnitCreateEffectUnit(libAIAI_gv_towerTowers[lv_itTower].lv_towerUnit, "TowerTargetingLaserCreatePersistent", libAIAI_gv_towerTowers[lv_itTower].lv_targetUnit);
                libAIAI_gv_towerTowers[lv_itTower].lv_hasTarget = true;
            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_TowerAttacksUnit_Init () {
    libAIAI_gt_TowerAttacksUnit = TriggerCreate("libAIAI_gt_TowerAttacksUnit_Func");
    TriggerAddEventPlayerEffectUsed(libAIAI_gt_TowerAttacksUnit, c_playerAny, "GuardTowerLaunchMissile");
    TriggerAddEventPlayerEffectUsed(libAIAI_gt_TowerAttacksUnit, c_playerAny, "GuardTowerL2LaunchMissile");
    TriggerAddEventPlayerEffectUsed(libAIAI_gt_TowerAttacksUnit, c_playerAny, "GuardTowerL3LaunchMissile");
    TriggerAddEventPlayerEffectUsed(libAIAI_gt_TowerAttacksUnit, c_playerAny, "TownHallL2CreatePersistent");
    TriggerAddEventPlayerEffectUsed(libAIAI_gt_TowerAttacksUnit, c_playerAny, "TownHallL3CreatePersistent");
    TriggerAddEventPlayerEffectUsed(libAIAI_gt_TowerAttacksUnit, c_playerAny, "TownHallL1CreatePersistent");
    TriggerAddEventPlayerEffectUsed(libAIAI_gt_TowerAttacksUnit, c_playerAny, "KingsCoreWeaponDelay");
}

//--------------------------------------------------------------------------------------------------
// Trigger: Initialize Tower AI System
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_InitializeTowerAISystem_Func (bool testConds, bool runActions) {
    unitgroup auto67606E8F_g;
    int auto67606E8F_u;
    int autoAEB5C0D6_ae;
    int autoAEB5C0D6_ai;

    // Variable Declarations
    int lv_itTowerIndex;
    unit lv_itUnit;
    unitgroup lv_towerUnits;

    // Variable Initialization
    lv_towerUnits = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gv_towerTowerCount = 0;
    libAIAI_gv_towerTowerCount += 1;
    libAIAI_gv_towerTowers[libAIAI_gv_towerTowerCount].lv_towerUnit = libGame_gv_teams[libGame_gv_teamOrderIndex_C].lv_core;
    libAIAI_gv_towerTowerCount += 1;
    libAIAI_gv_towerTowers[libAIAI_gv_towerTowerCount].lv_towerUnit = libGame_gv_teams[libGame_gv_teamChaosIndex_C].lv_core;
    lv_towerUnits = UnitGroup(null, c_playerAny, RegionEntireMap(), UnitFilter((1 << c_targetFilterArmored), 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    auto67606E8F_g = lv_towerUnits;
    auto67606E8F_u = 1;
    for ( ; auto67606E8F_u <= UnitGroupCount(auto67606E8F_g, c_unitCountAll) ; auto67606E8F_u += (lv_itUnit == UnitGroupUnit(auto67606E8F_g, auto67606E8F_u)) ) {
        lv_itUnit = UnitGroupUnit(auto67606E8F_g, auto67606E8F_u);
        libAIAI_gv_towerTowerCount += 1;
        libAIAI_gv_towerTowers[libAIAI_gv_towerTowerCount].lv_towerUnit = lv_itUnit;
    }
    autoAEB5C0D6_ae = libAIAI_gv_towerTowerCount;
    autoAEB5C0D6_ai = 1;
    lv_itTowerIndex = 1;
    for ( ; ( (autoAEB5C0D6_ai >= 0 && lv_itTowerIndex <= autoAEB5C0D6_ae) || (autoAEB5C0D6_ai <= 0 && lv_itTowerIndex >= autoAEB5C0D6_ae) ) ; lv_itTowerIndex += autoAEB5C0D6_ai ) {
        UnitStatusBarOverride(libAIAI_gv_towerTowers[lv_itTowerIndex].lv_towerUnit, c_unitStatusGroupAll);
        libAIAI_gv_towerTowers[lv_itTowerIndex].lv_dead = false;
        libAIAI_gv_towerTowers[lv_itTowerIndex].lv_range = UnitWeaponRange(libAIAI_gv_towerTowers[lv_itTowerIndex].lv_towerUnit, 1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_InitializeTowerAISystem_Init () {
    libAIAI_gt_InitializeTowerAISystem = TriggerCreate("libAIAI_gt_InitializeTowerAISystem_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: DefenderAI - Creeps Attacked
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_DefenderAICreepsAttacked_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_defenderAIIndex;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventUnitDamageSourcePlayer() > 0))) {
            return false;
        }

        if (!((EventUnitDamageSourcePlayer() <= libCore_gv_bALMaxGamePlayers))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_defenderAIIndex = libAIAI_gf_DefenderAIIndexOfUnit(EventUnit());
    if ((lv_defenderAIIndex > 0)) {
        libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_playerIsThreat[EventUnitDamageSourcePlayer()] = true;
        if ((libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_state == libAIAI_ge_DefenderAIState_Idle)) {
            if ((UnitGetType(EventUnitDamageSourceUnit()) == "HeroGall")) {
                libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_playerIsThreat[libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(EventUnitDamageSourcePlayer())].lv_choPlayer] = true;
                UnitGroupAdd(libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_validTargets, libGDHL_gv_chogallPairs[libGame_gf_TeamNumberOfPlayer(EventUnitDamageSourcePlayer())].lv_choUnit);
            }

            libAIAI_gf_DefenderAITransitionDefenderAIIntoState(lv_defenderAIIndex, libAIAI_ge_DefenderAIState_Fighting);
        }
        else if ((libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_state == libAIAI_ge_DefenderAIState_Leashing)) {
            libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_minLeashTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIDefenderMinLeashTime);
            libAIAI_gf_DefenderAIUpdateValidTargetList(lv_defenderAIIndex);
            if ((UnitGroupCount(libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_validTargets, c_unitCountAlive) > 0)) {
                libAIAI_gf_DefenderAITransitionDefenderAIIntoState(lv_defenderAIIndex, libAIAI_ge_DefenderAIState_Fighting);
            }

        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_DefenderAICreepsAttacked_Init () {
    libAIAI_gt_DefenderAICreepsAttacked = TriggerCreate("libAIAI_gt_DefenderAICreepsAttacked_Func");
    TriggerEnable(libAIAI_gt_DefenderAICreepsAttacked, false);
    TriggerAddEventUnitDamaged(libAIAI_gt_DefenderAICreepsAttacked, null, c_unitDamageTypeAny, c_unitDamageEither, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: DefenderAI - Defender AI Logic
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_DefenderAIDefenderAILogic_Func (bool testConds, bool runActions) {
    int auto12F5795D_ae;
    int auto12F5795D_ai;

    // Variable Declarations
    int lv_firstDefenderAIIndex;
    int lv_defenderAIIndex;
    int lv_creep;
    int lv_oldState;
    int lv_newState;
    order lv_currentOrder;
    abilcmd lv_currentAbilityCommand;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_firstDefenderAIIndex = ModI(FixedToInt((GameGetMissionTime() * 16.0)), libAIAI_gv_aIDefenderIndexMod);
    auto12F5795D_ae = libAIAI_gv_defenderAIDefenderAIUpperBound;
    auto12F5795D_ai = libAIAI_gv_aIDefenderIndexMod;
    lv_defenderAIIndex = lv_firstDefenderAIIndex;
    for ( ; ( (auto12F5795D_ai >= 0 && lv_defenderAIIndex <= auto12F5795D_ae) || (auto12F5795D_ai <= 0 && lv_defenderAIIndex >= auto12F5795D_ae) ) ; lv_defenderAIIndex += auto12F5795D_ai ) {
        if ((UnitGroupCount(libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_defendersGroup, c_unitCountAlive) == 0)) {
            continue;
        }
        else {
            if ((libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_defenderCount == 1)) {
                lv_currentOrder = UnitOrder(libAIAI_gf_DefenderUnit(lv_defenderAIIndex, 1), 0);
                lv_currentAbilityCommand = OrderGetAbilityCommand(lv_currentOrder);
                if ((lv_currentOrder != null) && (lv_currentAbilityCommand != libAIAI_gv_aIMoveAbil) && (lv_currentAbilityCommand != libAIAI_gv_aITurnAbil) && (lv_currentAbilityCommand != libAIAI_gv_aIAttackAbil) && (lv_currentAbilityCommand != libAIAI_gv_aIAttackAllyAbil)) {
                    continue;
                }

            }

        }
        lv_oldState = libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_state;
        if (((lv_oldState == libAIAI_ge_DefenderAIState_Fighting) || ((lv_oldState == libAIAI_ge_DefenderAIState_Idle) && (libAIAI_gv_defenderAI[lv_defenderAIIndex].lv_aggoRegion != null)))) {
            libAIAI_gf_DefenderAIUpdateValidTargetList(lv_defenderAIIndex);
        }

        lv_newState = libAIAI_gf_DefenderAIDetermineState(lv_defenderAIIndex, lv_oldState);
        if ((lv_oldState != lv_newState)) {
            libAIAI_gf_DefenderAITransitionDefenderAIIntoState(lv_defenderAIIndex, lv_newState);
        }

        libAIAI_gf_DefenderAIStateLogic(lv_defenderAIIndex);
        if ((libAIAI_gv_defenderAIDisplayAIStatus == true)) {
            libAIAI_gf_DefenderAIUpdateAIStatus(lv_defenderAIIndex);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_DefenderAIDefenderAILogic_Init () {
    libAIAI_gt_DefenderAIDefenderAILogic = TriggerCreate("libAIAI_gt_DefenderAIDefenderAILogic_Func");
    TriggerEnable(libAIAI_gt_DefenderAIDefenderAILogic, false);
    TriggerAddEventTimePeriodic(libAIAI_gt_DefenderAIDefenderAILogic, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Initialize Difficulty Level Data
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIInitializeDifficultyLevelData_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 7;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 7;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 7;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 7;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 10;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 10;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 10;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 10;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 10;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 10;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 10;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 10;
    libAIAI_gv_aIHeroAct2StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 10;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 8;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 8;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 8;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 8;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 13;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 13;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 15;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 15;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 15;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 15;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 15;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 15;
    libAIAI_gv_aIHeroAct3StartLevel[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 15;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = false;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = false;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = true;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = true;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = true;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = false;
    libAIAI_gv_aIHeroAvoidTargettingHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = false;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = true;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = true;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = false;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = true;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = true;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = true;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = false;
    libAIAI_gv_aIHeroAvoidTargettingFountains[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = false;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = false;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = true;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroVehicleAvoidTargettingMinions[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = true;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = true;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = true;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = true;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroEnterTeamFights[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = false;
    libAIAI_gv_aIHeroSmartLaneTargetting[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 30.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 10.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 30.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 10.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 5.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 0.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 2.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 10.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 10.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 10.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 33.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 66.0;
    libAIAI_gv_aIHeroChanceToRetaliateWhenAttacked[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 100.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 2.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 1.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 2.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 1.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 3.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 1.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 3.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 1.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 2.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 1.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 1.0;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 0.5;
    libAIAI_gv_aIHeroRetreatWhenAttackedByHeroResponseDelay[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.25;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 40.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 40.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 40.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 40.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 120.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 120.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 40.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 40.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 30.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 30.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 20.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 12.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationMelee[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 8.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 40.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 40.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 40.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 40.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 120.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 120.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 40.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 40.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 30.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 30.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 20.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 15.0;
    libAIAI_gv_aIHeroMinionBattleAttackDurationRanged[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 10.0;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = false;
    libAIAI_gv_aIHeroWatchforMissingEnemyHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = false;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = true;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = false;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = false;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroFocusWeakHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = false;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = true;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroFocusWeakCore[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 10.0;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 10.0;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 10.0;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 10.0;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 15.0;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 15.0;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 15.0;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 15.0;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 8.0;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 8.0;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 5.0;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 1.5;
    libAIAI_gv_aIHeroNoticeCloakedHeroesTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.5;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = false;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = true;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroPickUpHealthAndBuffGlobes[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroAIAllowedToChangeDesiredLane[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroAIAllowedToChangeDesiredLane[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroAIAllowedToChangeDesiredLane[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = false;
    libAIAI_gv_aIHeroAIAllowedToChangeDesiredLane[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = false;
    libAIAI_gv_aIHeroAIAllowedToChangeDesiredLane[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = true;
    libAIAI_gv_aIHeroAIAllowedToChangeDesiredLane[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroAIAllowedToChangeDesiredLane[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = true;
    libAIAI_gv_aIHeroAIAllowedToChangeDesiredLane[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroAIAllowedToChangeDesiredLane[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = true;
    libAIAI_gv_aIHeroAIAllowedToChangeDesiredLane[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroAIAllowedToChangeDesiredLane[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroAIAllowedToChangeDesiredLane[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroAIAllowedToChangeDesiredLane[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = false;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = true;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroUseMoonwells[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = false;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = true;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroUseUltimates[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = false;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = false;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = true;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroPerformTeamStrategies[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = true;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = true;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = true;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = true;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = true;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = false;
    libAIAI_gv_aIHeroNeverEnterLateGame[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = false;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 10.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 4.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 10.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 4.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 15.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 8.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 12.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 8.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 10.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 7.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 5.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 1.0;
    libAIAI_gv_aIHeroMinSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.333;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 1.0;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 1.0;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 1.0;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 1.0;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 3.0;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 1.0;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 3.0;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 1.0;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 1.0;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 1.0;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 0.6;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 0.0;
    libAIAI_gv_aIHeroMinTeamSpellFrequency[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.0;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 3.0;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 2.0;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 3.0;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 2.0;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 4.0;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 2.0;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 4.0;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 2.0;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 3.5;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 2.0;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 3.0;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 1.5;
    libAIAI_gv_aIHeroFudgeTarget[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 1.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 70.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 30.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 70.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 30.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 90.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 50.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 90.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 50.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 70.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 50.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 40.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 15.0;
    libAIAI_gv_aIHeroSkillshotMissRate[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.0;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = false;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = true;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroLineUpClearShotForSkillShots[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 40.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 40.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 40.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 40.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 30.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 30.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 30.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 30.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 30.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 30.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 20.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 10.0;
    libAIAI_gv_aIHeroPrioritizeHealingHumanAlliesThreshold[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.0;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = false;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = true;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroCastAbilitiesOnWeakHumanHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 80.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 25.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 80.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 25.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 75.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 35.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 75.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 35.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 35.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 35.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 25.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 15.0;
    libAIAI_gv_aIHeroEnemyNearbyEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 5.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 70.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 25.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 70.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 25.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 70.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 35.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 70.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 35.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 35.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 35.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 0.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 0.0;
    libAIAI_gv_aIHeroEnemyLaneEvalUnderestimatePercent[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.0;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = true;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = true;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = false;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = true;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = true;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = true;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = false;
    libAIAI_gv_aIHeroDefendObjectivesPoorlyAgainstHumans[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = false;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = true;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = true;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = true;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = true;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = true;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = false;
    libAIAI_gv_aIHeroOnlyInitiateEasyCamps[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = false;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 0.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 0.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 0.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 0.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 0.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 0.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 20.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 20.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 20.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 20.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 30.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 60.0;
    libAIAI_gv_aIHeroChanceNearbyMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 60.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 0.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 0.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 0.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 0.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 0.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 0.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 30.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 30.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 30.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 30.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 60.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 80.0;
    libAIAI_gv_aIHeroChanceMiddleMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 80.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 0.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 0.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 0.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 0.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 0.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 0.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 0.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 0.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 0.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 0.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 30.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 80.0;
    libAIAI_gv_aIHeroChanceFarMinionCamp[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 80.0;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = false;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = true;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = false;
    libAIAI_gv_aIHeroAlwaysWaitAtCampForHumanPlayer[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = false;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 20.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 20.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 20.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 20.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 20.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 20.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 20.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 20.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 15.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 15.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 15.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 15.0;
    libAIAI_gv_aIHeroCampWaitTimeout[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 15.0;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = false;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = true;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = false;
    libAIAI_gv_aIHeroLetHumanPlayerCaptureCampBeacon[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = false;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 0.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 0.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 0.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 0.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 0.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 0.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 0.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 25.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 25.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 25.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 25.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 50.0;
    libAIAI_gv_aIHeroChanceCaptureWatchTower[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 50.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 10.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 10.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 10.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 25.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 10.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 25.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 60.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 75.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByHeroPercent[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 85.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 60.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 60.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 50.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 50.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 50.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 50.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 60.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 65.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByEnemyCorePercent[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 70.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 60.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 60.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 60.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 60.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 50.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 60.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 65.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 75.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 85.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 20.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 30.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 20.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 30.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 50.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 40.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 50.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 50.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 50.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 60.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 75.0;
    libAIAI_gv_aIHeroRetreatWhenTargettedByNonHeroNonTowerPercent[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 85.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 10.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 25.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 10.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 25.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 10.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 25.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 10.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 25.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 35.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 35.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 45.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 50.0;
    libAIAI_gv_aIHeroAlwaysRetreatFromDamagePercent[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 60.0;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = true;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = false;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = true;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroStayBehindMinionsNearTowers[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = false;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = false;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = true;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = true;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = true;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroWaitForMinionsWhenLaning[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = -10.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 20.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = -10.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 20.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = -10.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 20.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = -10.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 20.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 15.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 20.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 25.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 30.0;
    libAIAI_gv_aIHeroTeleportPercent[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 35.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 0.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 30.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 0.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 30.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 0.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 30.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 0.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 30.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 25.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 30.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 40.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 50.0;
    libAIAI_gv_aIHeroMinOffensiveHealth[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 50.0;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 1;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 1;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 1;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 1;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 1;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 1;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 1;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 2;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 3;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 3;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 3;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 3;
    libAIAI_gv_aIHeroHighestHeroSelectTier[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 3;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = false;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = false;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroPathAroundDanger[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = false;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = false;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = true;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = true;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = true;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = true;
    libAIAI_gv_aIHeroPreemptivelyRetreatFromTowers[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 2;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 2;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 2;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 2;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 2;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 2;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 2;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 5;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 2;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 5;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 4;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 5;
    libAIAI_gv_aIHeroMaxDefendCoreAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 5;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 15.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 15.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 15.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 15.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 15.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 15.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 15.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 10.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 10.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 10.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 5.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 2.0;
    libAIAI_gv_aIHeroTributeCaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 30.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 30.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 30.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 30.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 30.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 30.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 30.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 10.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 20.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 10.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 10.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 3.0;
    libAIAI_gv_aIHeroObeliskRecaptureDelay[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 90.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 90.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 90.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 90.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 90.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 90.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 90.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 30.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 30.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 30.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 10.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 5.0;
    libAIAI_gv_aIHeroUseDragonVehicleDelay[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 2.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 20.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 20.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 20.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 20.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 20.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 20.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 20.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 15.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 15.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 15.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 10.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 5.0;
    libAIAI_gv_aIHeroEnterUnderworldDelay[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 10.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 2.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 10.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 2.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 0.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 0.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 10.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 2.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 5.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 2.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 2.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 0.0;
    libAIAI_gv_aIHeroExtraWaitAfterRespawn[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.0;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 3.0;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 1.5;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 3.0;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 1.5;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 3.0;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 3.0;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 3.0;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 3.0;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 1.5;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 1.5;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 1.0;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 0.0;
    libAIAI_gv_aIHeroUseMountDelay[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 0.0;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = 0;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = 0;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = 0;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = 0;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = 1;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = 1;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = 1;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = 2;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = 2;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = 2;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = 3;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = 4;
    libAIAI_gv_aIHeroMaxObjectiveCaptureAIHeroes[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = 5;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Enemy] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAITutorial1Ally] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicEnemy] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAITutorialMapMechanicAlly] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAITryMeMode] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAITryMeModeAlly] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasy] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAIVeryEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAIEasy] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAIEasyWithHumanAlly] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAIMedium] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAIVeryHard] = false;
    libAIAI_gv_aIHeroObjectiveStagingEnabled[libAIAI_ge_HeroAIDifficulty_HeroAIElite] = true;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIInitializeDifficultyLevelData_Init () {
    libAIAI_gt_HeroAIInitializeDifficultyLevelData = TriggerCreate("libAIAI_gt_HeroAIInitializeDifficultyLevelData_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Game Started
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIGameStarted_Func (bool testConds, bool runActions) {
    int auto225B09A6_ae;
    int auto225B09A6_ai;

    // Variable Declarations
    int lv_currentPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if (((libCore_gv_sYSGameMode == libCore_ge_GameModes_Tutorial1) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_TutorialMapMechanics) || (libCore_gv_sYSGameMode == libCore_ge_GameModes_TryMe) || (libSprt_gv_performanceTestPerformanceTestRunning == true))) {
        return true;
    }

    Wait(2.5, c_timeGame);
    auto225B09A6_ae = libCore_gv_bALMaxPlayers;
    auto225B09A6_ai = 1;
    lv_currentPlayer = 1;
    for ( ; ( (auto225B09A6_ai >= 0 && lv_currentPlayer <= auto225B09A6_ae) || (auto225B09A6_ai <= 0 && lv_currentPlayer >= auto225B09A6_ae) ) ; lv_currentPlayer += auto225B09A6_ai ) {
        if ((libAIAI_gf_HeroAIIsPlayerActive(lv_currentPlayer, 2) == true)) {
            libAIAI_gf_HeroAIEnableAIForPlayer(lv_currentPlayer);
            Wait(RandomFixed(0.1, 0.25), c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIGameStarted_Init () {
    libAIAI_gt_HeroAIGameStarted = TriggerCreate("libAIAI_gt_HeroAIGameStarted_Func");
    libGame_gf_GameOpenTimerStarted(libAIAI_gt_HeroAIGameStarted);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Run Main Group Loop
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIRunMainGroupLoop_Func (bool testConds, bool runActions) {
    playergroup autoFA98DBE4_g;
    int autoFA98DBE4_p;
    playergroup auto017C0445_g;
    int auto017C0445_p;

    // Variable Declarations
    bool lv_anyAIExists;
    int lv_currentPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    TriggerCurrentTriggerThreadSetFlags(c_triggerThreadFlagAI, true);
    while ((libGame_gv_gameOver == false)) {
        lv_anyAIExists = false;
        if ((libAIAI_gf_HeroAITeamHasAIPlayers(libGame_ge_Faction_Order) == true) && (libGame_gv_gameOver == false)) {
            lv_anyAIExists = true;
            autoFA98DBE4_g = libAIAI_gv_heroAITeamPlayerData[0].lv_aIPlayers; 
            autoFA98DBE4_p = 1;
            for ( ; autoFA98DBE4_p <= PlayerGroupCount(autoFA98DBE4_g) ; autoFA98DBE4_p += (lv_currentPlayer == PlayerGroupPlayer(autoFA98DBE4_g, autoFA98DBE4_p)) ) {
                lv_currentPlayer = PlayerGroupPlayer(autoFA98DBE4_g, autoFA98DBE4_p);
                libAIAI_gf_HeroAIUpdatePlayer(lv_currentPlayer);
            }
            Wait(0.0625, c_timeGame);
        }

        if ((libAIAI_gf_HeroAITeamHasAIPlayers(libGame_ge_Faction_Order) == true) && (libGame_gv_gameOver == false) && (libAIAI_gf_HeroAIHasGameStarted() == true)) {
            libAIAI_gf_HeroAITeamLogic(libGame_ge_Faction_Order);
            Wait(0.0625, c_timeGame);
        }

        if ((libAIAI_gf_HeroAITeamHasAIPlayers(libGame_ge_Faction_Chaos) == true) && (libGame_gv_gameOver == false)) {
            lv_anyAIExists = true;
            auto017C0445_g = libAIAI_gv_heroAITeamPlayerData[1].lv_aIPlayers; 
            auto017C0445_p = 1;
            for ( ; auto017C0445_p <= PlayerGroupCount(auto017C0445_g) ; auto017C0445_p += (lv_currentPlayer == PlayerGroupPlayer(auto017C0445_g, auto017C0445_p)) ) {
                lv_currentPlayer = PlayerGroupPlayer(auto017C0445_g, auto017C0445_p);
                libAIAI_gf_HeroAIUpdatePlayer(lv_currentPlayer);
            }
            Wait(0.0625, c_timeGame);
        }

        if ((libAIAI_gf_HeroAITeamHasAIPlayers(libGame_ge_Faction_Chaos) == true) && (libGame_gv_gameOver == false) && (libAIAI_gf_HeroAIHasGameStarted() == true)) {
            libAIAI_gf_HeroAITeamLogic(libGame_ge_Faction_Chaos);
            Wait(0.0625, c_timeGame);
        }

        if ((lv_anyAIExists == false)) {
            Wait(0.0625, c_timeGame);
        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIRunMainGroupLoop_Init () {
    libAIAI_gt_HeroAIRunMainGroupLoop = TriggerCreate("libAIAI_gt_HeroAIRunMainGroupLoop_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Take Over Hero
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAITakeOverHero_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((libGame_gv_gameOver == false))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_HeroAITakeOverHeroForPlayer(EventPlayer());
    libAIAI_gv_aIHeroes[EventPlayer()].lv_allowedToChooseTalentsTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroChooseTalentDelayInCaseOfRejoin);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAITakeOverHero_Init () {
    libAIAI_gt_HeroAITakeOverHero = TriggerCreate("libAIAI_gt_HeroAITakeOverHero_Func");
    TriggerEnable(libAIAI_gt_HeroAITakeOverHero, false);
    TriggerAddEventPlayerLeft(libAIAI_gt_HeroAITakeOverHero, c_playerAny, c_gameResultUndecided);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Release Hero Control
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIReleaseHeroControl_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_HeroAIReleaseHeroControl(EventPlayer());
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIReleaseHeroControl_Init () {
    libAIAI_gt_HeroAIReleaseHeroControl = TriggerCreate("libAIAI_gt_HeroAIReleaseHeroControl_Func");
    TriggerEnable(libAIAI_gt_HeroAIReleaseHeroControl, false);
    TriggerAddEventPlayerJoin(libAIAI_gt_HeroAIReleaseHeroControl, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Town Data Initialized
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAITownDataInitialized_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gf_HeroAISetupTownData();
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAITownDataInitialized_Init () {
    libAIAI_gt_HeroAITownDataInitialized = TriggerCreate("libAIAI_gt_HeroAITownDataInitialized_Func");
    TriggerEnable(libAIAI_gt_HeroAITownDataInitialized, false);
    libGame_gf_TownDataInitialized(libAIAI_gt_HeroAITownDataInitialized);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Tower Dies
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAITowerDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeStructure) == true))) {
            return false;
        }

        if (!((UnitTypeTestAttribute(UnitGetType(EventUnit()), c_unitAttributeArmored) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetOwner(EventUnit()) == libCore_gv_cOMPUTER_TeamOrder)) {
        libAIAI_gf_HeroAIUpdateFrontTower(0);
    }
    else {
        libAIAI_gf_HeroAIUpdateFrontTower(1);
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAITowerDies_Init () {
    libAIAI_gt_HeroAITowerDies = TriggerCreate("libAIAI_gt_HeroAITowerDies_Func");
    TriggerEnable(libAIAI_gt_HeroAITowerDies, false);
    TriggerAddEventUnitDied(libAIAI_gt_HeroAITowerDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Follower Command
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIFollowerCommand_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_pingingPlayer;
    unit lv_unitPinged;
    point lv_positionPinged;
    int lv_playerIndex;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((libAIAI_gv_heroAIAlliesFollowPlayerWhenPinged == false)) {
        return true;
    }

    lv_pingingPlayer = EventPlayer();
    lv_unitPinged = EventPingUnit();
    lv_positionPinged = EventPingPoint();
    if ((UnitIsValid(lv_unitPinged) == true) && (UnitTypeTestAttribute(UnitGetType(lv_unitPinged), c_unitAttributeHeroic) == true) && (UnitGetOwner(lv_unitPinged) != lv_pingingPlayer) && (UnitGetOwner(lv_unitPinged) <= libCore_gv_bALMaxPlayers) && (libGame_gv_players[UnitGetOwner(lv_unitPinged)].lv_faction == libGame_gv_players[lv_pingingPlayer].lv_faction) && (libAIAI_gf_HeroAIIsPlayerActive(UnitGetOwner(lv_unitPinged), 2) == true) && (libAIAI_gv_aIHeroes[UnitGetOwner(lv_unitPinged)].lv_tutorialForceFollowPlayer <= 0) && (libAIAI_gf_HeroAICanPlayerPingPlayerForHelp(lv_pingingPlayer, UnitGetOwner(lv_unitPinged)) == true)) {
        if ((libAIAI_gv_aIHeroes[UnitGetOwner(lv_unitPinged)].lv_pingFollowPlayer == lv_pingingPlayer)) {
            libAIAI_gf_HeroAIStopFollowingLeader(UnitGetOwner(lv_unitPinged));
        }
        else {
            libAIAI_gf_HeroAIStartFollowingLeader(UnitGetOwner(lv_unitPinged), lv_pingingPlayer);
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIFollowerCommand_Init () {
    libAIAI_gt_HeroAIFollowerCommand = TriggerCreate("libAIAI_gt_HeroAIFollowerCommand_Func");
    TriggerEnable(libAIAI_gt_HeroAIFollowerCommand, false);
    TriggerAddEventPing(libAIAI_gt_HeroAIFollowerCommand, c_playerAny);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Hero Takes Damage
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIHeroTakesDamage_Func (bool testConds, bool runActions) {
    int autoDE8C6DB2_ae;
    int autoDE8C6DB2_ai;
    int auto2E99A835_ae;

    // Variable Declarations
    unit lv_targetUnit;
    string lv_effect;
    string lv_behavior;
    int lv_effectIndex;
    int lv_effectCount;
    int lv_periodicEffectCount;
    int lv_periodicEffectIndex;
    string lv_periodicEffect;
    unit lv_damagingUnit;
    int lv_playerIndex;
    int lv_heroOwner;
    int lv_buffIndex;
    bool lv_isDot;
    unit lv_unit;

    // Variable Initialization
    lv_targetUnit = EventPlayerEffectUsedUnitImpact();

    // Conditions
    if (testConds) {
        if (!((UnitTypeTestAttribute(UnitGetType(lv_targetUnit), c_unitAttributeHeroic) == true))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    autoDE8C6DB2_ae = libCore_gv_bALMaxPlayers;
    autoDE8C6DB2_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (autoDE8C6DB2_ai >= 0 && lv_playerIndex <= autoDE8C6DB2_ae) || (autoDE8C6DB2_ai <= 0 && lv_playerIndex >= autoDE8C6DB2_ae) ) ; lv_playerIndex += autoDE8C6DB2_ai ) {
        if (((lv_targetUnit == libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit) || (UnitGroupHasUnit(libGame_gv_players[lv_playerIndex].lv_heroUnitGroup, lv_targetUnit) == true))) {
            lv_heroOwner = lv_playerIndex;
            break;
        }

    }
    if ((lv_heroOwner <= 0)) {
        return true;
    }

    lv_damagingUnit = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    if ((UnitGetOwner(lv_damagingUnit) == lv_heroOwner)) {
        return true;
    }

    lv_effect = EventPlayerEffectUsed();
    if ((lv_effect != null)) {
        lv_behavior = EventPlayerEffectUsedSourceBehavior();
        if ((lv_behavior != null)) {
            lv_periodicEffectCount = CatalogFieldValueCount(c_gameCatalogBehavior, lv_behavior, "PeriodicDisplayEffect", c_playerAny);
            auto2E99A835_ae = lv_periodicEffectCount;
            lv_periodicEffectIndex = 1;
            for ( ; lv_periodicEffectIndex <= auto2E99A835_ae ; lv_periodicEffectIndex += 1 ) {
                lv_periodicEffect = (CatalogFieldValueGet(c_gameCatalogBehavior, lv_behavior, "PeriodicDisplayEffect[" + IntToString((lv_periodicEffectIndex - 1)) + "]", c_playerAny));
                if ((lv_effect == lv_periodicEffect)) {
                    return true;
                }

            }
        }

    }

    libAIAI_gv_heroAIDamageTracking[lv_heroOwner].lv_lastAttacker = lv_damagingUnit;
    libAIAI_gv_heroAIDamageTracking[lv_heroOwner].lv_lastTimeAttacked = TimerGetElapsed(libGame_gv_gameTimer);
    if ((libAIAI_gf_HeroAIIsPlayerActive(lv_heroOwner, 2) == true)) {
        libAIAI_gf_HeroAINotifyHeroDamaged(lv_heroOwner, lv_damagingUnit);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIHeroTakesDamage_Init () {
    libAIAI_gt_HeroAIHeroTakesDamage = TriggerCreate("libAIAI_gt_HeroAIHeroTakesDamage_Func");
    TriggerEnable(libAIAI_gt_HeroAIHeroTakesDamage, false);
    TriggerAddEventPlayerEffectUsedFromScope(libAIAI_gt_HeroAIHeroTakesDamage, c_playerAny, "CEffectDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Hero Enters After Death Attack State
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIHeroEntersAfterDeathAttackState_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_deadPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    if ((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lv_deadPlayer) == true)) {
        libAIAI_gf_HeroAILeaveCurrentObjective(lv_deadPlayer);
        libAIAI_gf_HeroAIChangeState(lv_deadPlayer, libAIAI_ge_HeroAIStates_HSAfterDeathAttack);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIHeroEntersAfterDeathAttackState_Init () {
    libAIAI_gt_HeroAIHeroEntersAfterDeathAttackState = TriggerCreate("libAIAI_gt_HeroAIHeroEntersAfterDeathAttackState_Func");
    TriggerEnable(libAIAI_gt_HeroAIHeroEntersAfterDeathAttackState, false);
    TriggerAddEventPlayerEffectUsed(libAIAI_gt_HeroAIHeroEntersAfterDeathAttackState, c_playerAny, "ArchangelsWrathApplyActiveBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Hero Enters After Death Heal State
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIHeroEntersAfterDeathHealState_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_deadPlayer;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_deadPlayer = UnitGetOwner(EventPlayerEffectUsedUnit(c_effectUnitCaster));
    if ((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lv_deadPlayer) == true)) {
        libAIAI_gf_HeroAILeaveCurrentObjective(lv_deadPlayer);
        libAIAI_gf_HeroAIChangeState(lv_deadPlayer, libAIAI_ge_HeroAIStates_HSAfterDeathHeal);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIHeroEntersAfterDeathHealState_Init () {
    libAIAI_gt_HeroAIHeroEntersAfterDeathHealState = TriggerCreate("libAIAI_gt_HeroAIHeroEntersAfterDeathHealState_Func");
    TriggerEnable(libAIAI_gt_HeroAIHeroEntersAfterDeathHealState, false);
    TriggerAddEventPlayerEffectUsed(libAIAI_gt_HeroAIHeroEntersAfterDeathHealState, c_playerAny, "SpiritofRedemptionApplyRezDelayBehavior");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Hero Dies
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIHeroDies_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_player;

    // Variable Initialization

    // Conditions
    if (testConds) {
        if (!((EventPlayer() >= 1))) {
            return false;
        }

        if (!((EventPlayer() <= libCore_gv_bALMaxPlayers))) {
            return false;
        }

        if (!((EventUnit() == libAIAI_gv_aIHeroes[EventPlayer()].lv_currentHeroUnit))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    lv_player = EventPlayer();
    if ((libAIAI_gf_HeroAIIsPlayerActive(lv_player, 2) == true) && (libAIAI_gv_aIHeroes[lv_player].lv_heroState != libAIAI_ge_HeroAIStates_HSUnused)) {
        libAIAI_gf_HeroAILeaveCurrentObjective(lv_player);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIHeroDies_Init () {
    libAIAI_gt_HeroAIHeroDies = TriggerCreate("libAIAI_gt_HeroAIHeroDies_Func");
    TriggerEnable(libAIAI_gt_HeroAIHeroDies, false);
    TriggerAddEventUnitDied(libAIAI_gt_HeroAIHeroDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Human Ally Initiates Fight
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIHumanAllyInitiatesFight_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_casterPlayer;
    unit lv_targetUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_casterPlayer = EventUnitDamageSourcePlayer();
    lv_targetUnit = EventUnit();
    if ((UnitFilterMatch(lv_targetUnit, lv_casterPlayer, libCore_gv_filtersHeroicjustexcludingHallucination) == true) && (libAIAI_gf_HeroAIIsPlayerActive(lv_casterPlayer, 1) == true)) {
        if ((libAIAI_gf_HeroAIHeroCanBeFocused(lv_targetUnit) == true)) {
            libAIAI_gf_HeroAIStartFocusHero(lv_casterPlayer, lv_targetUnit);
        }

    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIHumanAllyInitiatesFight_Init () {
    libAIAI_gt_HeroAIHumanAllyInitiatesFight = TriggerCreate("libAIAI_gt_HeroAIHumanAllyInitiatesFight_Func");
    TriggerEnable(libAIAI_gt_HeroAIHumanAllyInitiatesFight, false);
    TriggerAddEventUnitDamaged(libAIAI_gt_HeroAIHumanAllyInitiatesFight, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "DemonHunterHeroWeaponDamage");
    TriggerAddEventUnitDamaged(libAIAI_gt_HeroAIHumanAllyInitiatesFight, null, c_unitDamageTypeAny, c_unitDamageNonFatal, "BarbarianLeapDamage");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Tribute Warning
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAITributeWarning_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeState == libAIAI_ge_HeroAIRavenLordTributeState_None)) {
        libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeWarningPosition = libGame_gf_MapCursedHollowTributeWarningPosition();
        libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeState = libAIAI_ge_HeroAIRavenLordTributeState_Warning;
        libAIAI_gv_heroAITeamData[(0)].lv_nextTearOfEluneConsiderTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroTributeCaptureDelay[(libAIAI_gv_heroAITeamData[(0)].lv_difficulty)]);
        libAIAI_gv_heroAITeamData[(1)].lv_nextTearOfEluneConsiderTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroTributeCaptureDelay[(libAIAI_gv_heroAITeamData[(1)].lv_difficulty)]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAITributeWarning_Init () {
    libAIAI_gt_HeroAITributeWarning = TriggerCreate("libAIAI_gt_HeroAITributeWarning_Func");
    libGame_gf_MapCursedHollowTributeWarning(libAIAI_gt_HeroAITributeWarning);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Tribute Spawned
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAITributeSpawned_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeState != libAIAI_ge_HeroAIRavenLordTributeState_Spawned)) {
        libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeUnit = libGame_gf_MapCursedHollowTributeSpawnedUnit();
        libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeWarningPosition = UnitGetPosition(libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeUnit);
        libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeState = libAIAI_ge_HeroAIRavenLordTributeState_Spawned;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAITributeSpawned_Init () {
    libAIAI_gt_HeroAITributeSpawned = TriggerCreate("libAIAI_gt_HeroAITributeSpawned_Func");
    libGame_gf_MapCursedHollowTributeSpawned(libAIAI_gt_HeroAITributeSpawned);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Tribute Picked Up
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAITributePickedUp_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGroupCount(libMapM_gv_mMRavenTributes, c_unitCountAlive) > 0)) {
        libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeUnit = UnitGroupRandomUnit(libMapM_gv_mMRavenTributes, c_unitCountAlive);
        libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeWarningPosition = UnitGetPosition(libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeUnit);
        libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeState = libAIAI_ge_HeroAIRavenLordTributeState_Spawned;
    }
    else {
        if ((UnitGroupCount(libMapM_gv_mMRavenTributeWarnings, c_unitCountAlive) > 0)) {
            libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeWarningPosition = libGame_gf_MapCursedHollowTributeWarningPosition();
            libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeState = libAIAI_ge_HeroAIRavenLordTributeState_Warning;
        }
        else {
            libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeState = libAIAI_ge_HeroAIRavenLordTributeState_None;
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAITributePickedUp_Init () {
    libAIAI_gt_HeroAITributePickedUp = TriggerCreate("libAIAI_gt_HeroAITributePickedUp_Func");
    libGame_gf_MapCursedHollowTributePickedUp(libAIAI_gt_HeroAITributePickedUp);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Raven Lord Curse Starts
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIRavenLordCurseStarts_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gv_heroAIRavenLordCurseStatus.lv_activatedTeam = libGame_gf_MapCursedHollowCurseActivatedTeam();
    libAIAI_gv_heroAIRavenLordCurseStatus.lv_curseActive = true;
    libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeState = libAIAI_ge_HeroAIRavenLordTributeState_None;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIRavenLordCurseStarts_Init () {
    libAIAI_gt_HeroAIRavenLordCurseStarts = TriggerCreate("libAIAI_gt_HeroAIRavenLordCurseStarts_Func");
    libGame_gf_MapCursedHollowCurseStarts(libAIAI_gt_HeroAIRavenLordCurseStarts);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Raven Lord Curse Ends
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIRavenLordCurseEnds_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gv_heroAIRavenLordCurseStatus.lv_curseActive = false;
    libAIAI_gv_heroAIRavenLordTributeStatus.lv_tributeState = libAIAI_ge_HeroAIRavenLordTributeState_None;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIRavenLordCurseEnds_Init () {
    libAIAI_gt_HeroAIRavenLordCurseEnds = TriggerCreate("libAIAI_gt_HeroAIRavenLordCurseEnds_Func");
    libGame_gf_MapCursedHollowCurseEnds(libAIAI_gt_HeroAIRavenLordCurseEnds);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Dragon Shire Obelisks Spawned
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIDragonShireObelisksSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_obelisk;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_obelisk = libGame_gf_MapDragonShireObeliskSpawnedUnit();
    UnitGroupAdd(libAIAI_gv_heroAIDragonShireObelisks, lv_obelisk);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIDragonShireObelisksSpawned_Init () {
    libAIAI_gt_HeroAIDragonShireObelisksSpawned = TriggerCreate("libAIAI_gt_HeroAIDragonShireObelisksSpawned_Func");
    libGame_gf_MapDragonShireObeliskSpawned(libAIAI_gt_HeroAIDragonShireObelisksSpawned);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Dragon Shrire Obelisk Changes Owner
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIDragonShrireObeliskChangesOwner_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((libAIAI_gf_HeroAITeamOwnsAllObelisks(libGame_ge_Faction_Order) == true)) {
        libAIAI_gv_heroAITeamData[(0)].lv_nextUseDragonVehicleConsiderTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroUseDragonVehicleDelay[(libAIAI_gv_heroAITeamData[(0)].lv_difficulty)]);
        libAIAI_gv_heroAITeamData[(1)].lv_nextMapObjectiveConsiderTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroObeliskRecaptureDelay[(libAIAI_gv_heroAITeamData[(1)].lv_difficulty)]);
    }

    if ((libAIAI_gf_HeroAITeamOwnsAllObelisks(libGame_ge_Faction_Chaos) == true)) {
        libAIAI_gv_heroAITeamData[(0)].lv_nextMapObjectiveConsiderTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroObeliskRecaptureDelay[(libAIAI_gv_heroAITeamData[(0)].lv_difficulty)]);
        libAIAI_gv_heroAITeamData[(1)].lv_nextUseDragonVehicleConsiderTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroUseDragonVehicleDelay[(libAIAI_gv_heroAITeamData[(1)].lv_difficulty)]);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIDragonShrireObeliskChangesOwner_Init () {
    libAIAI_gt_HeroAIDragonShrireObeliskChangesOwner = TriggerCreate("libAIAI_gt_HeroAIDragonShrireObeliskChangesOwner_Func");
    libGame_gf_MapDragonShireObeliskOwnershipChange(libAIAI_gt_HeroAIDragonShrireObeliskChangesOwner);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Dragon Shire Dragon Activated
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIDragonShireDragonActivated_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_dragon;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_dragon = libGame_gf_MapDragonShireDragonActivatedDragonUnit();
    libAIAI_gv_heroAIDragonShireDragon = lv_dragon;
    UnitGroupClear(libAIAI_gv_heroAIDragonShireObelisks);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIDragonShireDragonActivated_Init () {
    libAIAI_gt_HeroAIDragonShireDragonActivated = TriggerCreate("libAIAI_gt_HeroAIDragonShireDragonActivated_Func");
    libGame_gf_MapDragonShireDragonActivated(libAIAI_gt_HeroAIDragonShireDragonActivated);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Dragon Shire Dragon Ends
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIDragonShireDragonEnds_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gv_heroAIDragonShireDragon = null;
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIDragonShireDragonEnds_Init () {
    libAIAI_gt_HeroAIDragonShireDragonEnds = TriggerCreate("libAIAI_gt_HeroAIDragonShireDragonEnds_Func");
    libGame_gf_MapDragonShireDragonEnds(libAIAI_gt_HeroAIDragonShireDragonEnds);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Underworld Undead Spawned
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIUnderworldUndeadSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    region lv_underworldRegion;
    unitgroup lv_entrances;
    int lv_totalSkulls;

    // Variable Initialization
    lv_entrances = UnitGroupEmpty();

    // Actions
    if (!runActions) {
        return true;
    }

    lv_entrances = libGame_gf_MapHauntedMinesUndeadSpawnedEntrances();
    lv_underworldRegion = libGame_gf_MapHauntedMinesUndeadSpawnedUnderworldRegion();
    lv_totalSkulls = libGame_gf_MapHauntedMinesUndeadSpawnedTotalSkull();
    libAIAI_gv_heroAIUnderworldStatus.lv_opened = true;
    libAIAI_gv_heroAIUnderworldStatus.lv_totalSkulls = lv_totalSkulls;
    libAIAI_gv_heroAIUnderworldStatus.lv_skullsRemaining = lv_totalSkulls;
    libAIAI_gv_heroAIUnderworldStatus.lv_skullsCollected[(0)] = 0;
    libAIAI_gv_heroAIUnderworldStatus.lv_skullsCollected[(1)] = 0;
    libAIAI_gv_heroAIUnderworldStatus.lv_underworldRegion = lv_underworldRegion;
    libAIAI_gv_heroAIUnderworldStatus.lv_entrances = lv_entrances;
    libAIAI_gv_heroAIUnderworldStatus.lv_exits = UnitGroup("HoleLadderUp", c_playerAny, lv_underworldRegion, UnitFilter(0, 0, (1 << c_targetFilterMissile), (1 << (c_targetFilterDead - 32)) | (1 << (c_targetFilterHidden - 32))), 0);
    libAIAI_gv_heroAITeamData[(0)].lv_nextUnderworldConsiderTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroEnterUnderworldDelay[(libAIAI_gv_heroAITeamData[(0)].lv_difficulty)]);
    libAIAI_gv_heroAITeamData[(1)].lv_nextUnderworldConsiderTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroEnterUnderworldDelay[(libAIAI_gv_heroAITeamData[(1)].lv_difficulty)]);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIUnderworldUndeadSpawned_Init () {
    libAIAI_gt_HeroAIUnderworldUndeadSpawned = TriggerCreate("libAIAI_gt_HeroAIUnderworldUndeadSpawned_Func");
    libGame_gf_MapHauntedMinesUndeadSpawned(libAIAI_gt_HeroAIUnderworldUndeadSpawned);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Underworld Skull Collected
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIUnderworldSkullCollected_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_orderSkulls;
    int lv_chaosSkulls;
    int lv_totalSkullsCollected;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_orderSkulls = libGame_gf_MapHauntedMinesSkullCollectedTeam1Skulls();
    lv_chaosSkulls = libGame_gf_MapHauntedMinesSkullCollectedTeam2Skulls();
    libAIAI_gv_heroAIUnderworldStatus.lv_skullsCollected[(0)] = lv_orderSkulls;
    libAIAI_gv_heroAIUnderworldStatus.lv_skullsCollected[(1)] = lv_chaosSkulls;
    libAIAI_gv_heroAIUnderworldStatus.lv_skullsRemaining = (libAIAI_gv_heroAIUnderworldStatus.lv_totalSkulls - lv_orderSkulls - lv_chaosSkulls);
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIUnderworldSkullCollected_Init () {
    libAIAI_gt_HeroAIUnderworldSkullCollected = TriggerCreate("libAIAI_gt_HeroAIUnderworldSkullCollected_Func");
    libGame_gf_MapHauntedMinesSkullCollected(libAIAI_gt_HeroAIUnderworldSkullCollected);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Underworld Boss Warning
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIUnderworldBossWarning_Func (bool testConds, bool runActions) {
    // Variable Declarations
    int lv_team;
    int lv_lane;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_team = libGame_gf_MapHauntedMinesBossStartSummoningTeam();
    lv_lane = libGame_gf_MapHauntedMinesBossStartSummoningLane();
    if ((lv_team == 1)) {
        libAIAI_gv_heroAIUnderworldBossStatus[(0)].lv_lane = lv_lane;
        libAIAI_gv_heroAIUnderworldBossStatus[(0)].lv_state = libAIAI_ge_HeroAIUnderworldBossState_Warning;
    }
    else {
        libAIAI_gv_heroAIUnderworldBossStatus[(1)].lv_lane = lv_lane;
        libAIAI_gv_heroAIUnderworldBossStatus[(1)].lv_state = libAIAI_ge_HeroAIUnderworldBossState_Warning;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIUnderworldBossWarning_Init () {
    libAIAI_gt_HeroAIUnderworldBossWarning = TriggerCreate("libAIAI_gt_HeroAIUnderworldBossWarning_Func");
    libGame_gf_MapHauntedMinesBossStartSummoning(libAIAI_gt_HeroAIUnderworldBossWarning);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Underworld Boss Spawned
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIUnderworldBossSpawned_Func (bool testConds, bool runActions) {
    // Variable Declarations
    unit lv_bossUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_bossUnit = libGame_gf_MapHauntedMinesBossSummonedBoss();
    if ((libNtve_gf_PlayerIsEnemy(libCore_gv_cOMPUTER_TeamOrder, UnitGetOwner(lv_bossUnit), libNtve_ge_PlayerRelation_Ally) == true)) {
        libAIAI_gv_heroAIUnderworldBossStatus[(0)].lv_underworldBossUnit = lv_bossUnit;
        libAIAI_gv_heroAIUnderworldBossStatus[(0)].lv_state = libAIAI_ge_HeroAIUnderworldBossState_Spawned;
    }
    else {
        libAIAI_gv_heroAIUnderworldBossStatus[(1)].lv_underworldBossUnit = lv_bossUnit;
        libAIAI_gv_heroAIUnderworldBossStatus[(1)].lv_state = libAIAI_ge_HeroAIUnderworldBossState_Spawned;
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIUnderworldBossSpawned_Init () {
    libAIAI_gt_HeroAIUnderworldBossSpawned = TriggerCreate("libAIAI_gt_HeroAIUnderworldBossSpawned_Func");
    libGame_gf_MapHauntedMinesBossSummoned(libAIAI_gt_HeroAIUnderworldBossSpawned);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Underworld Boss Dies
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIUnderworldBossDies_Func (bool testConds, bool runActions) {
    // Conditions
    if (testConds) {
        if (!((UnitGetType(EventUnit()) == "UnderworldSummonedBoss"))) {
            return false;
        }
    }

    // Actions
    if (!runActions) {
        return true;
    }

    if ((EventUnit() == libAIAI_gv_heroAIUnderworldBossStatus[(0)].lv_underworldBossUnit)) {
        libAIAI_gv_heroAIUnderworldBossStatus[(0)].lv_underworldBossUnit = null;
        libAIAI_gv_heroAIUnderworldBossStatus[(0)].lv_state = libAIAI_ge_HeroAIUnderworldBossState_Dead;
    }

    if ((EventUnit() == libAIAI_gv_heroAIUnderworldBossStatus[(1)].lv_underworldBossUnit)) {
        libAIAI_gv_heroAIUnderworldBossStatus[(1)].lv_underworldBossUnit = null;
        libAIAI_gv_heroAIUnderworldBossStatus[(1)].lv_state = libAIAI_ge_HeroAIUnderworldBossState_Dead;
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIUnderworldBossDies_Init () {
    libAIAI_gt_HeroAIUnderworldBossDies = TriggerCreate("libAIAI_gt_HeroAIUnderworldBossDies_Func");
    TriggerAddEventUnitDied(libAIAI_gt_HeroAIUnderworldBossDies, null);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Falstad Talent Logic
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIFalstadTalentLogic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libCore_gv_segTriggerUnit) == "HeroFalstad")) {
        libAIAI_gf_HeroAIPickSpecificUltimateIfControllingHumanSlot(libCore_gv_segTriggerPlayer, "FalstadHeroicAbilityHinterlandBlast");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIFalstadTalentLogic_Init () {
    libAIAI_gt_HeroAIFalstadTalentLogic = TriggerCreate("libAIAI_gt_HeroAIFalstadTalentLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Lili Talent Logic
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAILiliTalentLogic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libCore_gv_segTriggerUnit) == "HeroLiLi")) {
        libAIAI_gf_HeroAIPickSpecificUltimateIfControllingHumanSlot(libCore_gv_segTriggerPlayer, "LiLiHeroicAbilityJugof1000Cups");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAILiliTalentLogic_Init () {
    libAIAI_gt_HeroAILiliTalentLogic = TriggerCreate("libAIAI_gt_HeroAILiliTalentLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Malfurion Talent Logic
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIMalfurionTalentLogic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libCore_gv_segTriggerUnit) == "HeroMalfurion")) {
        libAIAI_gf_HeroAIPickSpecificUltimateIfControllingHumanSlot(libCore_gv_segTriggerPlayer, "MalfurionHeroicAbilityTranquility");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIMalfurionTalentLogic_Init () {
    libAIAI_gt_HeroAIMalfurionTalentLogic = TriggerCreate("libAIAI_gt_HeroAIMalfurionTalentLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Rehgar Talent Logic
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIRehgarTalentLogic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libCore_gv_segTriggerUnit) == "HeroRehgar")) {
        libAIAI_gf_HeroAIPickSpecificUltimateIfControllingHumanSlot(libCore_gv_segTriggerPlayer, "RehgarHeroicAbilityAncestralHealing");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIRehgarTalentLogic_Init () {
    libAIAI_gt_HeroAIRehgarTalentLogic = TriggerCreate("libAIAI_gt_HeroAIRehgarTalentLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Tassadar Talent Logic
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAITassadarTalentLogic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libCore_gv_segTriggerUnit) == "HeroTassadar")) {
        libAIAI_gf_HeroAIPickSpecificUltimateIfControllingHumanSlot(libCore_gv_segTriggerPlayer, "TassadarHeroicAbilityArchon");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAITassadarTalentLogic_Init () {
    libAIAI_gt_HeroAITassadarTalentLogic = TriggerCreate("libAIAI_gt_HeroAITassadarTalentLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Tyrael Talent Logic
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAITyraelTalentLogic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libCore_gv_segTriggerUnit) == "HeroTyrael")) {
        libAIAI_gf_HeroAIPickSpecificUltimateIfControllingHumanSlot(libCore_gv_segTriggerPlayer, "TyraelHeroicAbilityJudgement");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAITyraelTalentLogic_Init () {
    libAIAI_gt_HeroAITyraelTalentLogic = TriggerCreate("libAIAI_gt_HeroAITyraelTalentLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Tyrande Talent Logic
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAITyrandeTalentLogic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libCore_gv_segTriggerUnit) == "HeroTyrande")) {
        libAIAI_gf_HeroAIPickSpecificUltimateIfControllingHumanSlot(libCore_gv_segTriggerPlayer, "TyrandeHeroicAbilityStarfall");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAITyrandeTalentLogic_Init () {
    libAIAI_gt_HeroAITyrandeTalentLogic = TriggerCreate("libAIAI_gt_HeroAITyrandeTalentLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Zagara Talent Logic
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIZagaraTalentLogic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libCore_gv_segTriggerUnit) == "HeroZagara")) {
        libAIAI_gf_HeroAIPickSpecificUltimateIfControllingHumanSlot(libCore_gv_segTriggerPlayer, "ZagaraHeroicAbilityDevouringMaw");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIZagaraTalentLogic_Init () {
    libAIAI_gt_HeroAIZagaraTalentLogic = TriggerCreate("libAIAI_gt_HeroAIZagaraTalentLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Anub'arak Talent Logic
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIAnubarakTalentLogic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libCore_gv_segTriggerUnit) == "HeroAnubarak")) {
        libAIAI_gf_HeroAIPickSpecificUltimateIfControllingHumanSlot(libCore_gv_segTriggerPlayer, "AnubarakHeroicAbilityCarrionSwarm");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIAnubarakTalentLogic_Init () {
    libAIAI_gt_HeroAIAnubarakTalentLogic = TriggerCreate("libAIAI_gt_HeroAIAnubarakTalentLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Thrall Talent Logic
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIThrallTalentLogic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libCore_gv_segTriggerUnit) == "HeroThrall")) {
        libAIAI_gf_HeroAIPickSpecificUltimateIfControllingHumanSlot(libCore_gv_segTriggerPlayer, "ThrallHeroicAbilitySundering");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIThrallTalentLogic_Init () {
    libAIAI_gt_HeroAIThrallTalentLogic = TriggerCreate("libAIAI_gt_HeroAIThrallTalentLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Sylvanas Talent Logic
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAISylvanasTalentLogic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libCore_gv_segTriggerUnit) == "HeroSylvanas")) {
        libAIAI_gf_HeroAIPickSpecificUltimateIfControllingHumanSlot(libCore_gv_segTriggerPlayer, "SylvanasHeroicAbilityWailingArrow");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAISylvanasTalentLogic_Init () {
    libAIAI_gt_HeroAISylvanasTalentLogic = TriggerCreate("libAIAI_gt_HeroAISylvanasTalentLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - LostVikings Talent Logic
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAILostVikingsTalentLogic_Func (bool testConds, bool runActions) {
    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libCore_gv_segTriggerUnit) == "HeroLostVikingsController")) {
        libAIAI_gf_HeroAIPickSpecificUltimateIfControllingHumanSlot(libCore_gv_segTriggerPlayer, "LostVikingsHeroicAbilityLongboatRaid");
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAILostVikingsTalentLogic_Init () {
    libAIAI_gt_HeroAILostVikingsTalentLogic = TriggerCreate("libAIAI_gt_HeroAILostVikingsTalentLogic_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Watch For AOE Ability Casted
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIWatchForAOEAbilityCasted_Func (bool testConds, bool runActions) {
    int autoB253F319_ae;

    // Variable Declarations
    string lv_effect;
    int lv_index;
    unit lv_unit;
    fixed lv_radius;
    fixed lv_duration;
    fixed lv_startOffset;
    bool lv_fleeImmediately;
    point lv_position;
    fixed lv_startTime;
    fixed lv_expireTime;
    bool lv_notifyTeamOrder;
    bool lv_notifyTeamChaos;
    unit lv_caster;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    lv_caster = EventPlayerEffectUsedUnit(c_effectUnitCaster);
    if ((UnitIsValid(lv_caster) == false)) {
        return true;
    }

    lv_effect = EventPlayerEffectUsed();
    autoB253F319_ae = libAIAI_gv_heroAINumRegisteredAOEAvoidEffects;
    lv_index = 0;
    for ( ; lv_index <= autoB253F319_ae ; lv_index += 1 ) {
        if ((lv_effect == libAIAI_gv_heroAIAOEAvoidEffectList[lv_index].lv_effect)) {
            lv_radius = libAIAI_gv_heroAIAOEAvoidEffectList[lv_index].lv_radius;
            lv_duration = libAIAI_gv_heroAIAOEAvoidEffectList[lv_index].lv_duration;
            lv_startOffset = libAIAI_gv_heroAIAOEAvoidEffectList[lv_index].lv_startOffset;
            lv_fleeImmediately = libAIAI_gv_heroAIAOEAvoidEffectList[lv_index].lv_fleeImmediately;
            if ((libAIAI_gv_heroAIAOEAvoidEffectList[lv_index].lv_followsUnit == true)) {
                lv_unit = EventPlayerEffectUsedUnit(c_effectUnitTarget);
                if ((lv_unit == null)) {
                    lv_unit = lv_caster;
                }

            }

        }

    }
    lv_position = EventPlayerEffectUsedPoint(c_effectLocationTargetPoint);
    lv_startTime = (TimerGetElapsed(libGame_gv_gameTimer) + libAIAI_gv_aIHeroAvoidAOEMinResponseTime + lv_startOffset);
    lv_expireTime = (TimerGetElapsed(libGame_gv_gameTimer) + lv_duration + lv_startOffset);
    if (((UnitGetOwner(lv_caster) == libCore_gv_cOMPUTER_Hostile) || (libNtve_gf_PlayerIsEnemy(UnitGetOwner(lv_caster), libCore_gv_cOMPUTER_TeamOrder, libNtve_ge_PlayerRelation_Enemy) == true)) && (libAIAI_gv_heroAITeamData[(0)].lv_numberofAvoidAreas < libAIAI_gv_heroAIMaxNumberofAvoidAreas)) {
        libAIAI_gv_heroAITeamData[(0)].lv_numberofAvoidAreas += 1;
        libAIAI_gv_heroAITeamData[(0)].lv_avoidAreas[libAIAI_gv_heroAITeamData[(0)].lv_numberofAvoidAreas].lv_unit = lv_unit;
        libAIAI_gv_heroAITeamData[(0)].lv_avoidAreas[libAIAI_gv_heroAITeamData[(0)].lv_numberofAvoidAreas].lv_position = lv_position;
        libAIAI_gv_heroAITeamData[(0)].lv_avoidAreas[libAIAI_gv_heroAITeamData[(0)].lv_numberofAvoidAreas].lv_radius = lv_radius;
        libAIAI_gv_heroAITeamData[(0)].lv_avoidAreas[libAIAI_gv_heroAITeamData[(0)].lv_numberofAvoidAreas].lv_startTime = lv_startTime;
        libAIAI_gv_heroAITeamData[(0)].lv_avoidAreas[libAIAI_gv_heroAITeamData[(0)].lv_numberofAvoidAreas].lv_expireTime = lv_expireTime;
        libAIAI_gv_heroAITeamData[(0)].lv_avoidAreas[libAIAI_gv_heroAITeamData[(0)].lv_numberofAvoidAreas].lv_fleeImmediately = lv_fleeImmediately;
        lv_notifyTeamOrder = true;
    }

    if (((UnitGetOwner(lv_caster) == libCore_gv_cOMPUTER_Hostile) || (libNtve_gf_PlayerIsEnemy(UnitGetOwner(lv_caster), libCore_gv_cOMPUTER_TeamChaos, libNtve_ge_PlayerRelation_Enemy) == true)) && (libAIAI_gv_heroAITeamData[(1)].lv_numberofAvoidAreas < libAIAI_gv_heroAIMaxNumberofAvoidAreas)) {
        libAIAI_gv_heroAITeamData[(1)].lv_numberofAvoidAreas += 1;
        libAIAI_gv_heroAITeamData[(1)].lv_avoidAreas[libAIAI_gv_heroAITeamData[(1)].lv_numberofAvoidAreas].lv_unit = lv_unit;
        libAIAI_gv_heroAITeamData[(1)].lv_avoidAreas[libAIAI_gv_heroAITeamData[(1)].lv_numberofAvoidAreas].lv_position = lv_position;
        libAIAI_gv_heroAITeamData[(1)].lv_avoidAreas[libAIAI_gv_heroAITeamData[(1)].lv_numberofAvoidAreas].lv_radius = lv_radius;
        libAIAI_gv_heroAITeamData[(1)].lv_avoidAreas[libAIAI_gv_heroAITeamData[(1)].lv_numberofAvoidAreas].lv_startTime = lv_startTime;
        libAIAI_gv_heroAITeamData[(1)].lv_avoidAreas[libAIAI_gv_heroAITeamData[(1)].lv_numberofAvoidAreas].lv_expireTime = lv_expireTime;
        libAIAI_gv_heroAITeamData[(1)].lv_avoidAreas[libAIAI_gv_heroAITeamData[(1)].lv_numberofAvoidAreas].lv_fleeImmediately = lv_fleeImmediately;
        lv_notifyTeamChaos = true;
    }

    Wait((libAIAI_gv_aIHeroAvoidAOEMinResponseTime + lv_startOffset), c_timeGame);
    if ((lv_notifyTeamOrder == true)) {
        libAIAI_gf_HeroAINotifyAOEStarting(libGame_ge_Faction_Order, lv_position, lv_radius, lv_expireTime, lv_fleeImmediately);
    }

    if ((lv_notifyTeamChaos == true)) {
        libAIAI_gf_HeroAINotifyAOEStarting(libGame_ge_Faction_Chaos, lv_position, lv_radius, lv_expireTime, lv_fleeImmediately);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIWatchForAOEAbilityCasted_Init () {
    libAIAI_gt_HeroAIWatchForAOEAbilityCasted = TriggerCreate("libAIAI_gt_HeroAIWatchForAOEAbilityCasted_Func");
    TriggerEnable(libAIAI_gt_HeroAIWatchForAOEAbilityCasted, false);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Leoric Post Update
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAILeoricPostUpdate_Func (bool testConds, bool runActions) {
    // Variable Declarations
    fixed lv_life;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitIsAlive(libGDHL_gv_hero_Leoric_WraithWalk_Unit[libAIAI_gv_heroAITriggerCurrentPlayer]) == true)) {
        if ((libAIAI_gv_aIHeroes[libAIAI_gv_heroAITriggerCurrentPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSFocusHero)) {
            if ((UnitIsAlive(libAIAI_gv_aIHeroes[libAIAI_gv_heroAITriggerCurrentPlayer].lv_targetHero) == true) && (DistanceSquaredBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[libAIAI_gv_heroAITriggerCurrentPlayer].lv_targetHero), UnitGetPosition(libAIAI_gv_aIHeroes[libAIAI_gv_heroAITriggerCurrentPlayer].lv_currentHeroUnit)) > libAIAI_gv_heroAILeoricWraithWalkFocusHeroMinRangeSquared)) {
                return true;
            }

        }
        else {
            lv_life = UnitGetPropertyFixed(libGame_gv_players[libAIAI_gv_heroAITriggerCurrentPlayer].lv_heroUnit, c_unitPropLifePercent, c_unitPropCurrent);
            if ((lv_life < libAIAI_gv_aIHeroes[libAIAI_gv_heroAITriggerCurrentPlayer].lv_startOffensiveHealth) && ((libAIAI_gv_aIHeroes[libAIAI_gv_heroAITriggerCurrentPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSRetreat) || (libAIAI_gv_aIHeroes[libAIAI_gv_heroAITriggerCurrentPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSReturnToSpawn) || (libAIAI_gv_aIHeroes[libAIAI_gv_heroAITriggerCurrentPlayer].lv_heroState == libAIAI_ge_HeroAIStates_HSFleeInJungle))) {
                if ((lv_life > libAIAI_gv_heroAILeoricWraithWalkFocusHeroMinLifePercent) && (libAIAI_gf_HeroAITimeInCurrentState(libAIAI_gv_heroAITriggerCurrentPlayer) < libAIAI_gv_heroAILeoricWraithWalkFocusHeroMaxTimeRetreating)) {
                    return true;
                }

            }

        }
        LeoricCancelWraithWalk(libAIAI_gv_heroAITriggerCurrentPlayer);
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAILeoricPostUpdate_Init () {
    libAIAI_gt_HeroAILeoricPostUpdate = TriggerCreate("libAIAI_gt_HeroAILeoricPostUpdate_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Dead State - Leoric
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAIDeadStateLeoric_Func (bool testConds, bool runActions) {
    playergroup autoFA3F0E85_g;
    int autoFA3F0E85_p;

    // Variable Declarations
    const fixed lv_retreatHealthPercent = 70.0;
    int lv_trigPlayer;
    int lv_enemyPlayer;
    unit lv_enemyHero;
    fixed lv_enemyHeroDistanceSquared;
    unit lv_closestEnemyHero;
    fixed lv_closestEnemyHeroDistanceSquared;

    // Variable Initialization
    lv_trigPlayer = libAIAI_gv_heroAICustomStateCurrentPlayer;
    lv_closestEnemyHeroDistanceSquared = 100000.0;

    // Actions
    if (!runActions) {
        return true;
    }

    libAIAI_gv_aIHeroes[lv_trigPlayer].lv_hSCustomStateTimeSpent = 1;
    if ((libGame_gv_players[lv_trigPlayer].lv_isDead == false)) {
        HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lv_trigPlayer].lv_currentHeroUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
        libAIAI_gf_HeroAILeaveCurrentObjective(lv_trigPlayer);
    }
    else {
        if ((UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lv_trigPlayer].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > lv_retreatHealthPercent)) {
            if ((libAIAI_gf_HeroAIIsPlayerInsideBase(lv_trigPlayer) == false)) {
                libAIAI_gf_HeroAIEnsureOrderMovePoint(lv_trigPlayer, libGame_gv_players[lv_trigPlayer].lv_spawnPoint);
            }
            else {
                libAIAI_gf_HeroAIEnsureOrderStopAttackAndMove(lv_trigPlayer);
            }
        }
        else {
            autoFA3F0E85_g = libGame_gf_EnemyPlayerGroupOfPlayer(lv_trigPlayer); 
            autoFA3F0E85_p = 1;
            for ( ; autoFA3F0E85_p <= PlayerGroupCount(autoFA3F0E85_g) ; autoFA3F0E85_p += (lv_enemyPlayer == PlayerGroupPlayer(autoFA3F0E85_g, autoFA3F0E85_p)) ) {
                lv_enemyPlayer = PlayerGroupPlayer(autoFA3F0E85_g, autoFA3F0E85_p);
                if ((lv_enemyPlayer >= 1) && (lv_enemyPlayer <= libCore_gv_bALMaxPlayers) && (libGame_gv_players[lv_enemyPlayer].lv_isDead == false)) {
                    lv_enemyHero = libAIAI_gv_aIHeroes[lv_enemyPlayer].lv_currentHeroUnit;
                    if ((UnitIsAlive(lv_enemyHero) == true) && (libNtve_gf_UnitIsVisibleToPlayer(lv_enemyHero, lv_trigPlayer) == true)) {
                        lv_enemyHeroDistanceSquared = DistanceSquaredBetweenPoints(UnitGetPosition(libAIAI_gv_aIHeroes[lv_trigPlayer].lv_currentHeroUnit), UnitGetPosition(lv_enemyHero));
                        if ((lv_enemyHeroDistanceSquared < lv_closestEnemyHeroDistanceSquared) && (libAIAI_gf_AIIsPointBehindEnemyGateEstimate(UnitGetPosition(libAIAI_gv_aIHeroes[lv_trigPlayer].lv_currentHeroUnit), lv_trigPlayer, UnitGetPosition(lv_enemyHero)) == false)) {
                            lv_closestEnemyHeroDistanceSquared = lv_enemyHeroDistanceSquared;
                            lv_closestEnemyHero = lv_enemyHero;
                        }

                    }

                }

            }
            if ((lv_closestEnemyHero != null)) {
                libAIAI_gf_HeroAIEnsureOrderMovePointCloseEnough(lv_trigPlayer, UnitGetPosition(lv_closestEnemyHero));
            }
            else {
                libAIAI_gf_HeroAIEnsureOrderStopAttackAndMove(lv_trigPlayer);
            }
        }
    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAIDeadStateLeoric_Init () {
    libAIAI_gt_HeroAIDeadStateLeoric = TriggerCreate("libAIAI_gt_HeroAIDeadStateLeoric_Func");
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Lost Vikings Controller
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAILostVikingsController_Func (bool testConds, bool runActions) {
    int auto4250F692_ae;
    int auto4250F692_ai;

    // Variable Declarations
    int lv_playerIndex;
    order lv_order;
    bool lv_baleogUnderworldMismatch;
    bool lv_olafUnderworldMismatch;
    bool lv_ericUnderworldMismatch;
    unit lv_targetUnit;
    fixed lv_closeEnoughDist;
    point lv_controllerPos;
    string lv_goal;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    auto4250F692_ae = libCore_gv_bALMaxPlayers;
    auto4250F692_ai = 1;
    lv_playerIndex = 1;
    for ( ; ( (auto4250F692_ai >= 0 && lv_playerIndex <= auto4250F692_ae) || (auto4250F692_ai <= 0 && lv_playerIndex >= auto4250F692_ae) ) ; lv_playerIndex += auto4250F692_ai ) {
        if ((libAIAI_gf_HeroAIIsAIEnabledForPlayer(lv_playerIndex) == true) && (UnitGetType(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit) == "HeroLostVikingsController")) {
            lv_closeEnoughDist = libAIAI_gv_lostVikingsCloseEnoughDist;
            lv_controllerPos = libAIAI_gf_HeroAILostVikingsDetermineCenterVikingControllerPosition(lv_playerIndex);
            UnitSetPosition(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, lv_controllerPos, false);
            lv_order = UnitOrder(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, 0);
            if ((libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSCastTactical)) {
                lv_order = null;
            }

            if ((lv_order == null) && (libAIAI_gv_aIHeroes[lv_playerIndex].lv_heroState == libAIAI_ge_HeroAIStates_HSWaitToHeal)) {
                lv_order = OrderTargetingPoint(AbilityCommand("move", 0), libGame_gv_players[lv_playerIndex].lv_spawnPoint);
            }

            if ((UnitIsValid(libGame_gv_players[lv_playerIndex].lv_activeVehicle) == true)) {
                lv_order = OrderTargetingPoint(libAIAI_gv_aIAttackAbil, UnitGetPosition(libGame_gv_players[lv_playerIndex].lv_activeVehicle));
                lv_closeEnoughDist = libAIAI_gv_lostVikingsCloseEnoughDistVehicle;
            }

            if ((lv_order != null) && ((OrderGetAbilityCommand(lv_order) == AbilityCommand("move", 0)) || (OrderGetAbilityCommand(lv_order) == AbilityCommand("move", 3))) && (OrderGetTargetType(lv_order) == c_orderTargetUnit) && (OrderGetTargetUnit(lv_order) != null)) {
                lv_targetUnit = OrderGetTargetUnit(lv_order);
                if ((libNtve_gf_UnitIsInvulnerable(lv_targetUnit) == true) && (UnitHasBehavior2(lv_targetUnit, "IsMacguffin") == true) && (UnitHasBehavior2(lv_targetUnit, "MacguffinActivated") == true)) {
                    lv_order = null;
                }
                else {
                    lv_order = OrderTargetingUnit(libAIAI_gv_aIAttackAbil, OrderGetTargetUnit(lv_order));
                }
            }

            if ((lv_order != null) && ((OrderGetAbilityCommand(lv_order) == AbilityCommand("Mount", 0)) || (OrderGetAbilityCommand(lv_order) == AbilityCommand("Dismount", 0)))) {
                lv_order = null;
            }

            if ((lv_order != null) && (OrderGetAbilityCommand(lv_order) == AbilityCommand("PortBackToBase", 0))) {
                lv_order = Order(AbilityCommand("PortBackToBase", 0));
            }

            if ((libAIAI_gv_heroAIUnderworldStatus.lv_opened == true)) {
                lv_baleogUnderworldMismatch = libAIAI_gf_HeroAIVikingUnderworldStateMismatch(lv_playerIndex, libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_baleog);
                lv_ericUnderworldMismatch = libAIAI_gf_HeroAIVikingUnderworldStateMismatch(lv_playerIndex, libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_erik);
                lv_olafUnderworldMismatch = libAIAI_gf_HeroAIVikingUnderworldStateMismatch(lv_playerIndex, libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_olaf);
                if ((lv_order != null) && (OrderGetAbilityCommand(lv_order) == AbilityCommand("CaptureMacGuffin", 0)) && (libAIAI_gf_HeroAIIsEnteringUnderworld(lv_playerIndex) == false) && (libAIAI_gf_HeroAIIsExitingUnderworld(lv_playerIndex) == false)) {
                    HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                    lv_order = null;
                }

            }

            UnitSetPropertyFixed(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, c_unitPropLifePercent, 100.0);
            if ((libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_boat == null)) {
                if ((UnitHasBehavior2(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_baleog, "LostVikingsBaleogDowned") == false) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > UnitGetPropertyFixed(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_baleog, c_unitPropLifeExpectedPercent, c_unitPropCurrent)) && (UnitGetPropertyFixed(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_baleog, c_unitPropLifeExpectedPercent, c_unitPropCurrent) > 0.0)) {
                    UnitSetPropertyFixed(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, c_unitPropLifePercent, UnitGetPropertyFixed(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_baleog, c_unitPropLifeExpectedPercent, c_unitPropCurrent));
                }

                if ((UnitHasBehavior2(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_erik, "LostVikingsErikDowned") == false) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > UnitGetPropertyFixed(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_erik, c_unitPropLifeExpectedPercent, c_unitPropCurrent)) && (UnitGetPropertyFixed(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_erik, c_unitPropLifeExpectedPercent, c_unitPropCurrent) > 0.0)) {
                    UnitSetPropertyFixed(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, c_unitPropLifePercent, UnitGetPropertyFixed(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_erik, c_unitPropLifeExpectedPercent, c_unitPropCurrent));
                }

                if ((UnitHasBehavior2(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_olaf, "LostVikingsOlafDowned") == false) && (UnitGetPropertyFixed(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, c_unitPropLifePercent, c_unitPropCurrent) > UnitGetPropertyFixed(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_olaf, c_unitPropLifeExpectedPercent, c_unitPropCurrent)) && (UnitGetPropertyFixed(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_olaf, c_unitPropLifeExpectedPercent, c_unitPropCurrent) > 0.0)) {
                    UnitSetPropertyFixed(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, c_unitPropLifePercent, UnitGetPropertyFixed(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_olaf, c_unitPropLifeExpectedPercent, c_unitPropCurrent));
                }

            }

            lv_goal = libAIAI_gf_HeroAIGetGoalName(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_baleog);
            if ((lv_goal != null) && (lv_goal != libAIAI_gv_heroAILegacyGoal)) {
                libAIAI_gf_HeroAIUnitGoalExecution(lv_playerIndex, libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_baleog, lv_goal);
            }
            else {
                if ((lv_order != null) && (lv_baleogUnderworldMismatch == false) && (lv_order != UnitOrder(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_baleog, 0)) && (libAIAI_gf_HeroAIVikingAlreadyArrivedAtDestination(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_baleog, lv_order, lv_closeEnoughDist) == false)) {
                    HeroAIUnitIssueOrder(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_baleog, lv_order, c_orderQueueReplace);
                }

            }
            lv_goal = libAIAI_gf_HeroAIGetGoalName(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_erik);
            if ((lv_goal != null) && (lv_goal != libAIAI_gv_heroAILegacyGoal)) {
                libAIAI_gf_HeroAIUnitGoalExecution(lv_playerIndex, libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_erik, lv_goal);
            }
            else {
                if ((lv_order != null) && (lv_ericUnderworldMismatch == false) && (lv_order != UnitOrder(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_erik, 0)) && (libAIAI_gf_HeroAIVikingAlreadyArrivedAtDestination(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_erik, lv_order, lv_closeEnoughDist) == false)) {
                    HeroAIUnitIssueOrder(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_erik, lv_order, c_orderQueueReplace);
                }

            }
            lv_goal = libAIAI_gf_HeroAIGetGoalName(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_olaf);
            if ((lv_goal != null) && (lv_goal != libAIAI_gv_heroAILegacyGoal)) {
                libAIAI_gf_HeroAIUnitGoalExecution(lv_playerIndex, libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_olaf, lv_goal);
            }
            else {
                if ((lv_order != null) && (lv_olafUnderworldMismatch == false) && (lv_order != UnitOrder(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_olaf, 0)) && (libAIAI_gf_HeroAIVikingAlreadyArrivedAtDestination(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_olaf, lv_order, lv_closeEnoughDist) == false)) {
                    HeroAIUnitIssueOrder(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_olaf, lv_order, c_orderQueueReplace);
                }

            }
            lv_goal = libAIAI_gf_HeroAIGetGoalName(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_boat);
            if ((lv_goal != null) && (lv_goal != libAIAI_gv_heroAILegacyGoal)) {
                libAIAI_gf_HeroAIUnitGoalExecution(lv_playerIndex, libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_boat, lv_goal);
            }
            else {
                if ((lv_order != null) && (UnitIsValid(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_boat) == true) && (lv_order != UnitOrder(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_boat, 0))) {
                    HeroAIUnitIssueOrder(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_boat, lv_order, c_orderQueueReplace);
                }

            }
            if ((lv_order != null)) {
                if ((libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_boat == null) && (UnitOrder(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_olaf, 0) == null) && (UnitOrder(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_baleog, 0) == null) && (UnitOrder(libGDHL_gv_lostVikingsPlayer[lv_playerIndex].lv_erik, 0) == null)) {
                    HeroAIUnitIssueOrder(libAIAI_gv_aIHeroes[lv_playerIndex].lv_currentHeroUnit, Order(AbilityCommand("stop", 0)), c_orderQueueReplace);
                }

            }

        }

    }
    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAILostVikingsController_Init () {
    libAIAI_gt_HeroAILostVikingsController = TriggerCreate("libAIAI_gt_HeroAILostVikingsController_Func");
    TriggerAddEventTimePeriodic(libAIAI_gt_HeroAILostVikingsController, 0.0625, c_timeGame);
}

//--------------------------------------------------------------------------------------------------
// Trigger: HeroAI - Lost Vikings Debugging Update
//--------------------------------------------------------------------------------------------------
bool libAIAI_gt_HeroAILostVikingsDebuggingUpdate_Func (bool testConds, bool runActions) {
    int auto3AB00592_ae;
    int auto906D3602_val;
    int autoDB9951FA_ae;

    // Variable Declarations
    int lv_objective;
    int lv_priority;
    text lv_botStatus;
    int lv_loopIndex;
    unit lv_loopUnit;

    // Variable Initialization

    // Actions
    if (!runActions) {
        return true;
    }

    if ((UnitGetType(libAIAI_gv_aIHeroes[libCore_gv_segTriggerPlayer].lv_currentHeroUnit) == "HeroLostVikingsController")) {
        if ((libAIAI_gv_heroAIDisplayAIStatus == true) && (libAIAI_gf_HeroAIIsAIEnabledForPlayer(libCore_gv_segTriggerPlayer) == true)) {
            auto3AB00592_ae = 3;
            lv_loopIndex = 1;
            for ( ; lv_loopIndex <= auto3AB00592_ae ; lv_loopIndex += 1 ) {
                auto906D3602_val = lv_loopIndex;
                if (auto906D3602_val == 1) {
                    lv_loopUnit = libGDHL_gv_lostVikingsPlayer[libCore_gv_segTriggerPlayer].lv_baleog;
                }
                else if (auto906D3602_val == 2) {
                    lv_loopUnit = libGDHL_gv_lostVikingsPlayer[libCore_gv_segTriggerPlayer].lv_erik;
                }
                else if (auto906D3602_val == 3) {
                    lv_loopUnit = libGDHL_gv_lostVikingsPlayer[libCore_gv_segTriggerPlayer].lv_olaf;
                }
                else {
                }
                if ((libUIUI_gv_lostVikingsDebuggingLabels[libCore_gv_segTriggerPlayer].lv_botStatusLabel[lv_loopIndex] == c_invalidDialogControlId)) {
                    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/BotStatusLabel", lv_loopUnit);
                    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
                    libUIUI_gv_lostVikingsDebuggingLabels[libCore_gv_segTriggerPlayer].lv_botStatusLabel[lv_loopIndex] = DialogControlLastCreated();
                }

                if ((libUIUI_gv_lostVikingsDebuggingLabels[libCore_gv_segTriggerPlayer].lv_botDifficultyLabel[lv_loopIndex] == c_invalidDialogControlId)) {
                    DialogControlHookupUnitStatus(c_triggerControlTypeLabel, "HeroUnitStatusParentFrame/BotDifficultyLabel", lv_loopUnit);
                    DialogControlSetVisible(DialogControlLastCreated(), PlayerGroupAll(), true);
                    libUIUI_gv_lostVikingsDebuggingLabels[libCore_gv_segTriggerPlayer].lv_botDifficultyLabel[lv_loopIndex] = DialogControlLastCreated();
                }

                libAIAI_gf_HeroAIUpdateAIStatusHelper(libCore_gv_segTriggerPlayer, libUIUI_gv_lostVikingsDebuggingLabels[libCore_gv_segTriggerPlayer].lv_botStatusLabel[lv_loopIndex], libUIUI_gv_lostVikingsDebuggingLabels[libCore_gv_segTriggerPlayer].lv_botDifficultyLabel[lv_loopIndex]);
            }
        }
        else {
            autoDB9951FA_ae = 3;
            lv_loopIndex = 1;
            for ( ; lv_loopIndex <= autoDB9951FA_ae ; lv_loopIndex += 1 ) {
                if ((libUIUI_gv_lostVikingsDebuggingLabels[libCore_gv_segTriggerPlayer].lv_botStatusLabel[lv_loopIndex] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(libUIUI_gv_lostVikingsDebuggingLabels[libCore_gv_segTriggerPlayer].lv_botStatusLabel[lv_loopIndex], PlayerGroupAll(), false);
                }

                if ((libUIUI_gv_lostVikingsDebuggingLabels[libCore_gv_segTriggerPlayer].lv_botDifficultyLabel[lv_loopIndex] != c_invalidDialogControlId)) {
                    DialogControlSetVisible(libUIUI_gv_lostVikingsDebuggingLabels[libCore_gv_segTriggerPlayer].lv_botDifficultyLabel[lv_loopIndex], PlayerGroupAll(), false);
                }

            }
        }
    }

    return true;
}

//--------------------------------------------------------------------------------------------------
void libAIAI_gt_HeroAILostVikingsDebuggingUpdate_Init () {
    libAIAI_gt_HeroAILostVikingsDebuggingUpdate = TriggerCreate("libAIAI_gt_HeroAILostVikingsDebuggingUpdate_Func");
}

void libAIAI_InitTriggers () {
    libAIAI_gt_IncludeAI_Init();
    libAIAI_gt_MinionAIAIRoutine_Init();
    libAIAI_gt_MinionAIUpdateMercPath_Init();
    libAIAI_gt_TowerAIRoutine_Init();
    libAIAI_gt_TowerAttacksUnit_Init();
    libAIAI_gt_InitializeTowerAISystem_Init();
    libAIAI_gt_DefenderAICreepsAttacked_Init();
    libAIAI_gt_DefenderAIDefenderAILogic_Init();
    libAIAI_gt_HeroAIInitializeDifficultyLevelData_Init();
    libAIAI_gt_HeroAIGameStarted_Init();
    libAIAI_gt_HeroAIRunMainGroupLoop_Init();
    libAIAI_gt_HeroAITakeOverHero_Init();
    libAIAI_gt_HeroAIReleaseHeroControl_Init();
    libAIAI_gt_HeroAITownDataInitialized_Init();
    libAIAI_gt_HeroAITowerDies_Init();
    libAIAI_gt_HeroAIFollowerCommand_Init();
    libAIAI_gt_HeroAIHeroTakesDamage_Init();
    libAIAI_gt_HeroAIHeroEntersAfterDeathAttackState_Init();
    libAIAI_gt_HeroAIHeroEntersAfterDeathHealState_Init();
    libAIAI_gt_HeroAIHeroDies_Init();
    libAIAI_gt_HeroAIHumanAllyInitiatesFight_Init();
    libAIAI_gt_HeroAITributeWarning_Init();
    libAIAI_gt_HeroAITributeSpawned_Init();
    libAIAI_gt_HeroAITributePickedUp_Init();
    libAIAI_gt_HeroAIRavenLordCurseStarts_Init();
    libAIAI_gt_HeroAIRavenLordCurseEnds_Init();
    libAIAI_gt_HeroAIDragonShireObelisksSpawned_Init();
    libAIAI_gt_HeroAIDragonShrireObeliskChangesOwner_Init();
    libAIAI_gt_HeroAIDragonShireDragonActivated_Init();
    libAIAI_gt_HeroAIDragonShireDragonEnds_Init();
    libAIAI_gt_HeroAIUnderworldUndeadSpawned_Init();
    libAIAI_gt_HeroAIUnderworldSkullCollected_Init();
    libAIAI_gt_HeroAIUnderworldBossWarning_Init();
    libAIAI_gt_HeroAIUnderworldBossSpawned_Init();
    libAIAI_gt_HeroAIUnderworldBossDies_Init();
    libAIAI_gt_HeroAIFalstadTalentLogic_Init();
    libAIAI_gt_HeroAILiliTalentLogic_Init();
    libAIAI_gt_HeroAIMalfurionTalentLogic_Init();
    libAIAI_gt_HeroAIRehgarTalentLogic_Init();
    libAIAI_gt_HeroAITassadarTalentLogic_Init();
    libAIAI_gt_HeroAITyraelTalentLogic_Init();
    libAIAI_gt_HeroAITyrandeTalentLogic_Init();
    libAIAI_gt_HeroAIZagaraTalentLogic_Init();
    libAIAI_gt_HeroAIAnubarakTalentLogic_Init();
    libAIAI_gt_HeroAIThrallTalentLogic_Init();
    libAIAI_gt_HeroAISylvanasTalentLogic_Init();
    libAIAI_gt_HeroAILostVikingsTalentLogic_Init();
    libAIAI_gt_HeroAIWatchForAOEAbilityCasted_Init();
    libAIAI_gt_HeroAILeoricPostUpdate_Init();
    libAIAI_gt_HeroAIDeadStateLeoric_Init();
    libAIAI_gt_HeroAILostVikingsController_Init();
    libAIAI_gt_HeroAILostVikingsDebuggingUpdate_Init();
}

//--------------------------------------------------------------------------------------------------
// Library Initialization
//--------------------------------------------------------------------------------------------------
bool libAIAI_InitLib_completed = false;

void libAIAI_InitLib () {
    if (libAIAI_InitLib_completed) {
        return;
    }

    libAIAI_InitLib_completed = true;

    libAIAI_InitLibraries();
    libAIAI_InitVariables();
    libAIAI_InitCustomScript();
    libAIAI_InitTriggers();
}

include "TriggerLibs/HeroesLib"
include "TriggerLibs/GameLib"
include "TriggerLibs/MapMechanicsLib"
include "TriggerLibs/UILib"
include "TriggerLibs/SoundLib"
include "TriggerLibs/GameDataHelperLib"
include "TriggerLibs/SupportLib"

