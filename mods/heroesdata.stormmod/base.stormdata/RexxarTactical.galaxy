//---------------------------------------------------------------------------------------------
// Rexxar Tactical
//---------------------------------------------------------------------------------------------
const string c_AB_RexxarMendPet           = "RexxarMendPet";
const string c_AB_RexxarMishaFollow         = "RexxarMishaFollow";
const string c_AB_RexxarMishaFollowCancel   = "RexxarMishaFollowCancel";
const string c_AB_RexxarSpiritSwoop       = "RexxarSpiritSwoop";
const string c_AB_RexxarCharge            = "RexxarMishaChargeRedirect";
const string c_AB_RexxarBestialWrath      = "RexxarBestialWrath";
const string c_AB_RexxarUnleashTheBoars   = "RexxarUnleashTheBoars";

//---------------------------------------------------------------------------------------------
unit RexxarGetMishaUnit (int player) {
    unit currentUnit;
    int i;
    
    for (i = UnitGroupCount(libGame_gv_players[player].lv_heroUnitGroup, c_unitCountAll); i > 0; i = i - 1) {
        currentUnit = UnitGroupUnit(libGame_gv_players[player].lv_heroUnitGroup, i);
        if ((UnitGetType(currentUnit) == "RexxarMisha")) {
            return currentUnit;
        }
    }
    return null;
}

//---------------------------------------------------------------------------------------------
bool RexxarMendPet (int player, unit aiUnit, unitgroup scanGroup) {
    // heals misha at any range
    order spellOrd;
    unit misha;
    fixed mishaHealth;

    spellOrd = StormHeroAICreateOrder(player, c_AB_RexxarMendPet, 0);
    if (!UnitOrderIsValid(aiUnit, spellOrd)) {
        return false;
    }

    misha = RexxarGetMishaUnit(player);
    if (UnitIsAlive(misha)) {
        // use if misha is low on health or if we have the energy to spare.
        mishaHealth = UnitGetPropertyFixed(misha, c_unitPropLifePercent, c_unitPropCurrent);
        if (mishaHealth < libAIAI_gv_aIHeroMediumHealthPercent 
         || (mishaHealth < libAIAI_gv_aIHeroHighHealthPercent 
          && UnitGetPropertyFixed(aiUnit, c_unitPropEnergyPercent, c_unitPropCurrent) > libAIAI_gv_aIHeroMediumEnergyPercent)) {
            return HeroIssueOrder(player, aiUnit, spellOrd, null, c_orderQueueAddToFront, null, null);
        }
    }
    return false;
}

//---------------------------------------------------------------------------------------------
bool RexxarShouldMishaRetreat (int player, unit aiUnit, unitgroup scanGroup) {
    // calls misha to you at any range
    unit misha;
    int teamIndex;
    int aoeIndex;
    point aoePosition;

    misha = RexxarGetMishaUnit(player);
    if (UnitIsAlive(misha)) {
        // retreat if her health is low
        if (UnitGetPropertyFixed(misha, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroes[player].lv_endOffensiveHealth) {
            return true;
        }

        // retreat if she is in an AoE
        if (libAIAI_gv_aIHeroDodgeAOEAbilities[libAIAI_gv_aIHeroes[player].lv_difficulty]) {
            return libAIAI_gf_HeroAIIsPointInAOEDangerousToFaction(UnitGetPosition(misha), libAIAI_gv_aIHeroAvoidAOEAvoidExtraDistance, libGame_gv_players[player].lv_faction);
        }
    }
    return false;
}

//---------------------------------------------------------------------------------------------
bool RexxarMishaFollow (int player, unit aiUnit, unitgroup scanGroup) {
    // calls misha to you at any range
    order spellOrd;

    spellOrd = StormHeroAICreateOrder(player, c_AB_RexxarMishaFollow, 0);
    if (!UnitOrderIsValid(aiUnit, spellOrd)) {
        return false;
    }

    return HeroIssueOrder(player, aiUnit, spellOrd, null, c_orderQueueAddToFront, null, null);
}

//---------------------------------------------------------------------------------------------
bool RexxarMishaFollowCancel (int player, unit aiUnit, unitgroup scanGroup) {
    // allows Misha to attack
    order spellOrd;

    spellOrd = StormHeroAICreateOrder(player, c_AB_RexxarMishaFollowCancel, 0);
    if (!UnitOrderIsValid(aiUnit, spellOrd)) {
        return false;
    }

    return HeroIssueOrder(player, aiUnit, spellOrd, null, c_orderQueueAddToFront, null, null);
}

//---------------------------------------------------------------------------------------------
bool RexxarSpiritSwoop (int player, unit aiUnit, unitgroup scanGroup) {
    // skill shot damage and slow
    order spellOrd;
    fixed energy;
    unit targetEnemy;
    fixed maxHealth;
    Storm_AI_TargetQueryOptions query;

    spellOrd = StormHeroAICreateOrder(player, c_AB_RexxarSpiritSwoop, 0);
    if (!UnitOrderIsValid(aiUnit, spellOrd)) {
        return false;
    }

    // the requirements for enemy health are different depending on how much energy we have
    energy = UnitGetPropertyFixed(aiUnit, c_unitPropEnergyPercent, c_unitPropCurrent);
    if (energy > libAIAI_gv_aIHeroMediumEnergyPercent) {
        maxHealth = libAIAI_gv_aIHeroHighHealthPercent;
    }
    else {
        maxHealth = libAIAI_gv_aIHeroMediumHealthPercent;
    }

    // Cast on an enemy hero or group of minions
    query.lv_maxDistance = 10.0;
    query.lv_maxHealthPercent = maxHealth;
    query.lv_healthFactor = c_Storm_AI_PreferUnhealthyTargets;
    query.lv_distanceFactor = c_Storm_AI_PreferCloserTargets;
    targetEnemy = FindBestHero(scanGroup, aiUnit, query);
    
    if (!UnitIsValid(targetEnemy)) {
        if (energy <= libAIAI_gv_aIHeroMediumEnergyPercent) {
            return false;
        }
        // find a group of enemies (we need a better way of doing this)
        query.lv_maxHealthPercent = 100;
        targetEnemy = FindBestTacticalTarget(scanGroup, aiUnit, query);
        if (!UnitIsValid(targetEnemy) || CountEnemiesInArea(scanGroup, UnitGetPosition(targetEnemy), 2.0, 2, 1) < 3) {
            return false;
        }
    }

    return HeroIssueOrder(player, aiUnit, spellOrd, null, c_orderQueueAddToFront, targetEnemy, null);
}

//---------------------------------------------------------------------------------------------
bool RexxarCharge (int player, unit aiUnit, unitgroup scanGroup) {
    // misha charges
    order spellOrd;
    unit misha;
    unit targetEnemy;
    Storm_AI_TargetQueryOptions query;

    spellOrd = StormHeroAICreateOrder(player, c_AB_RexxarCharge, 0);
    if (!UnitOrderIsValid(aiUnit, spellOrd)) {
        return false;
    }

    // only consider this if we are not porting home
    if (UnitGetPropertyFixed(aiUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[player].lv_returnToSpawnHealth) {
        misha = RexxarGetMishaUnit(player);
        if (UnitIsAlive(misha)) {
            // only consider this if misha is healthy enough to engage
            if (UnitGetPropertyFixed(misha, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[player].lv_startOffensiveHealth) {
                // find an enemy hero near misha
                query.lv_maxDistance = 6.0;
                query.lv_maxHealthPercent = libAIAI_gv_aIHeroMediumHealthPercent;
                query.lv_healthFactor = c_Storm_AI_PreferUnhealthyTargets;
                query.lv_distanceFactor = c_Storm_AI_PreferCloserTargets;
                targetEnemy = FindBestHero(scanGroup, aiUnit, query);
                if (!UnitIsValid(targetEnemy)) {
                    // Otherwise attack a large group of enemies (only if we have the energy to spare)
                    if (UnitGetPropertyFixed(aiUnit, c_unitPropEnergyPercent, c_unitPropCurrent) < libAIAI_gv_aIHeroMediumEnergyPercent) {
                        return false;
                    }
                    query.lv_maxHealthPercent = 100;
                    targetEnemy = FindBestTacticalTarget(scanGroup, aiUnit, query);
                    if (!UnitIsValid(targetEnemy) || CountEnemiesInArea(scanGroup, UnitGetPosition(targetEnemy), 2.0, 2, 1) < 3) {
                        return false;
                    }  
                }
                return HeroIssueOrder(player, aiUnit, spellOrd, null, c_orderQueueAddToFront, null, UnitGetPosition(targetEnemy));
            }
        }
    }
    return false;
}

//---------------------------------------------------------------------------------------------
bool RexxarBestialWrath (int player, unit aiUnit, unitgroup scanGroup) {
    // misha goes into a rage
    order spellOrd;
    unit misha;

    spellOrd = StormHeroAICreateOrder(player, c_AB_RexxarBestialWrath, 0);
    if (!UnitOrderIsValid(aiUnit, spellOrd)) {
        return false;
    }

    // only consider this if we are not porting home
    if (UnitGetPropertyFixed(aiUnit, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[player].lv_returnToSpawnHealth) {
        misha = RexxarGetMishaUnit(player);
        if (UnitIsAlive(misha)) {
            // only consider this if misha is healthy enough to engage
            if (UnitGetPropertyFixed(misha, c_unitPropLifePercent, c_unitPropCurrent) > libAIAI_gv_aIHeroes[player].lv_startOffensiveHealth) {
                // Activate if there is a team fight near by
                if (TeamFightInArea(player, scanGroup, UnitGetPosition(misha), 10)) {
                    return HeroIssueOrder(player, aiUnit, spellOrd, null, c_orderQueueAddToFront, null, null);
                }
            }
        }
    }
    return false;
}

//---------------------------------------------------------------------------------------------
bool RexxarUnleashTheBoars (int player, unit aiUnit, unitgroup scanGroup) {
    // a cone of damage
    order spellOrd;
    unit targetEnemy;
    Storm_AI_TargetQueryOptions query;

    spellOrd = StormHeroAICreateOrder(player, c_AB_RexxarUnleashTheBoars, 0);
    if (!UnitOrderIsValid(aiUnit, spellOrd)) {
        return false;
    }

    // Use on a low health hero
    query.lv_maxDistance = 9.0;
    query.lv_maxHealthPercent = 40;
    query.lv_healthFactor = c_Storm_AI_PreferUnhealthyTargets;
    query.lv_distanceFactor = c_Storm_AI_PreferCloserTargets;
    targetEnemy = FindBestHero(scanGroup, aiUnit, query);

    if (!UnitIsValid(targetEnemy)) {
        // Otherwise use if there is team fight
        if (TeamFightInArea(player, scanGroup, UnitGetPosition(aiUnit), 8)){
             query.lv_maxHealthPercent = 100;
            targetEnemy = FindBestHero(scanGroup, aiUnit, query);
            if (!UnitIsValid(targetEnemy) || !EnoughEnemiesInArea(scanGroup, UnitGetPosition(targetEnemy), 4.0, c_Storm_AI_AtLeast3Heroes, 0, 0)) {
                return false;
            }  
        }
        else {
            return false;
        }
    }

    return HeroIssueOrder(player, aiUnit, spellOrd, null, c_orderQueueAddToFront, null, UnitGetPosition(targetEnemy));
}

//---------------------------------------------------------------------------------------------
void AIThinkRexxar (int player, unit aiUnit, unitgroup scanGroup) {
    if (HeroSkipTactical(player, aiUnit)) {
        return;
    }

    if (UseDefensiveItem(player, aiUnit, scanGroup)) {
        return;
    }

    // We don't return from Here Misha or the cancel because we want to consider other abilities too (e.g. mend pet).
    // AI tactical is called infrequently, especially at low difficulty levels, and we don't want misha control to get in the way
    // of regular ability usage.
    if (RexxarShouldMishaRetreat(player, aiUnit, scanGroup)) {
        RexxarMishaFollow(player, aiUnit, scanGroup);
    }
    else {
        RexxarMishaFollowCancel(player, aiUnit, scanGroup);
    }

    if (RexxarMendPet(player, aiUnit, scanGroup)) {
        return;
    }

    if (HeroSkipOffensiveTactical(player, aiUnit)) {
        return;
    }

    // Charge has more conditions on it than SpiritSwoop, so it is placed earlier on. If both are valid, then Charge is preferred.
    // This results in a more even ratio of how often the two are cast on Recruit difficulty, where the casting rate is limited.
    if (RexxarCharge(player, aiUnit, scanGroup)) {
        return;
    }

    if (RexxarSpiritSwoop(player, aiUnit, scanGroup)) {
        return;
    }

    if (libAIAI_gf_HeroAIShouldUseUltimates(player) && RexxarBestialWrath(player, aiUnit, scanGroup)) {
        return;
    }

    if (libAIAI_gf_HeroAIShouldUseUltimates(player) && RexxarUnleashTheBoars(player, aiUnit, scanGroup)) {
        return;
    }
    
    if (UseOffensiveItem(player, aiUnit, scanGroup)) {
        return;
    }

    if (RevealCloakedEnemies(player, aiUnit, scanGroup)) {
        return;
    }
}
