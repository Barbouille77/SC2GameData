//---------------------------------------------------------------------------------------------
// Crusader Tactical
//---------------------------------------------------------------------------------------------
const string c_AB_CrusaderPunish            = "CrusaderPunish";
const string c_AB_CrusaderCondemn           = "CrusaderCondemn";
const string c_AB_CrusaderShieldGlare       = "CrusaderShieldGlare";
const string c_AB_CrusaderIronSkin          = "CrusaderIronSkin";
const string c_AB_CrusaderFallingSword      = "CrusaderFallingSword";
const string c_AB_CrusaderBlessedShield     = "CrusaderBlessedShield";

//---------------------------------------------------------------------------------------------
bool CrusaderPunish (int player, unit aiUnit, unitgroup scanGroup) {
    // Does damage to enemies in a wide line/rectangle in front of crusader, also slows them
    order spellOrd;
    fixed energy = UnitGetPropertyFixed(aiUnit, c_unitPropEnergyPercent, c_unitPropCurrent);
    fixed healthReq;
    unit targetEnemy;
    Storm_AI_TargetQueryOptions query;

    spellOrd = StormHeroAICreateOrder(player, c_AB_CrusaderPunish, 0);
    if (!UnitOrderIsValid(aiUnit, spellOrd)) {
        return false;
    }

    if (energy > libAIAI_gv_aIHeroHighEnergyPercent) {
        healthReq = 100.0;
    }
    else {
        healthReq = 70.0;
    }
    
    // Find a target hero 
    query.lv_maxDistance = 3.5;
    query.lv_healthFactor  = c_Storm_AI_PreferUnhealthyTargets;
    query.lv_maxHealthPercent = healthReq;
    targetEnemy = FindBestHero(scanGroup, aiUnit, query);

    if (!UnitIsValid(targetEnemy)) { 
        // If we have a decent amount of energy, we're allowed to target minions
        if (energy < libAIAI_gv_aIHeroHighEnergyPercent) {
            return false;
        }
        query.lv_maxHealthPercent = 100; 
        query.lv_distanceFactor = c_Storm_AI_PreferCloserTargets;
        targetEnemy = FindBestMinion(scanGroup, aiUnit, query);
        if (!UnitIsValid(targetEnemy)) {
            return false;
        }        
        // Only if there are other enemies it will hit
        if (!EnoughEnemiesInArea(scanGroup, MovePointTowardsPoint(UnitGetPosition(aiUnit), UnitGetPosition(targetEnemy), 1.8), 2.0, c_Storm_AI_AtLeast1Hero, c_Storm_AI_AtLeast2Creeps, c_Storm_AI_AtLeast3Minions)) {
            return false;
        }
    }

    return HeroIssueOrder (player, aiUnit, spellOrd, null, c_orderQueueReplace, targetEnemy, null);
}

//---------------------------------------------------------------------------------------------
bool CrusaderCondemn (int player, unit aiUnit, unitgroup scanGroup) {
    // PB-AOE damages nearby enemies and pulls them in (after a short delay)
    order spellOrd;
    fixed energy = UnitGetPropertyFixed(aiUnit, c_unitPropEnergyPercent, c_unitPropCurrent);
    fixed minEnemyEval;
    unit nearbyHero;
    Storm_AI_TargetQueryOptions query;
    
    spellOrd = StormHeroAICreateOrder(player, c_AB_CrusaderCondemn, 0);
    if (!UnitOrderIsValid(aiUnit, spellOrd)) {
        return false;
    }
    
    query.lv_maxDistance = 5;
    query.lv_healthFactor  = c_Storm_AI_PreferUnhealthyTargets;
    query.lv_maxHealthPercent = 75;
    nearbyHero = FindBestHero(scanGroup, aiUnit, query);
    // Cast if there is a weak hero

    if (UnitIsValid(nearbyHero)) {
        return HeroIssueOrder (player, aiUnit, spellOrd, null, c_orderQueueAddToFront, null, null);
    }
    
    // Cast if there is a large number of enemies
    if (energy > libAIAI_gv_aIHeroHighEnergyPercent) {
        minEnemyEval = 3.0;
    }
    else {
        minEnemyEval = 4.0;
    }

    if (!EnoughEnemiesInArea(scanGroup,UnitGetPosition(aiUnit), 5.0, c_Storm_AI_AtLeast2Heroes, minEnemyEval, minEnemyEval)) {
        return false;
    } 

    return HeroIssueOrder (player, aiUnit, spellOrd, null, c_orderQueueAddToFront, null, null);
}

//---------------------------------------------------------------------------------------------
bool CrusaderShieldGlare (int player, unit aiUnit, unitgroup scanGroup) {
    // Does damage to enemies in a long narrow rectangle in front of crusader    
    order spellOrd;
    fixed energy = UnitGetPropertyFixed(aiUnit, c_unitPropEnergyPercent, c_unitPropCurrent);
    fixed healthReq;
    unit targetEnemy;
    Storm_AI_TargetQueryOptions query;

    spellOrd = StormHeroAICreateOrder(player, c_AB_CrusaderShieldGlare, 0);
    if (!UnitOrderIsValid(aiUnit, spellOrd)) {
        return false;
    }

    if (energy > libAIAI_gv_aIHeroHighEnergyPercent) {
        healthReq = 100.0;
    }
    else {
        healthReq = 70.0;
    }
    
    // Find a target hero
    query.lv_maxDistance = 12;
    query.lv_healthFactor  = c_Storm_AI_PreferUnhealthyTargets;
    query.lv_maxHealthPercent = healthReq;
    targetEnemy = FindBestHero(scanGroup, aiUnit, query);    

    if (!UnitIsValid(targetEnemy)) { 
        // If we have a decent amount of energy, we're allowed to target minions
        if (energy < libAIAI_gv_aIHeroHighEnergyPercent) {
            return false;
        }
        query.lv_maxHealthPercent = 100;
        targetEnemy = FindBestMinion(scanGroup, aiUnit, query);   
        if (!UnitIsValid(targetEnemy)) {
            return false;
        }        
        // Only if there are other enemies it will hit
        if (!EnoughEnemiesInArea(scanGroup, UnitGetPosition(targetEnemy), 2.0, c_Storm_AI_AtLeast1Hero, c_Storm_AI_AtLeast2Creeps, c_Storm_AI_AtLeast3Minions)) {
            return false;
        } 
    }

    return HeroIssueOrder (player, aiUnit, spellOrd, null, c_orderQueueReplace, targetEnemy, null);
}

//---------------------------------------------------------------------------------------------
bool CrusaderIronSkin (int player, unit aiUnit, unitgroup scanGroup) {
    // Trait: Makes crusader unstoppable and grants a shield for 4 seconds
    order spellOrd;

    spellOrd = StormHeroAICreateOrder(player, c_AB_CrusaderIronSkin, 0);
    if (!UnitOrderIsValid(aiUnit, spellOrd)) {
        return false;
    }
    
    // Use while retreating
    if (HaveBeenAttackedRecently(aiUnit) && UnitGetPropertyFixed(aiUnit, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroes[player].lv_returnToSpawnHealth) {
        return HeroIssueOrder (player, aiUnit, spellOrd, null, c_orderQueueAddToFront, null, null);
    }
    
    // Activate if there is a team fight and we're taking damage
    if (!HaveBeenAttackedRecently(aiUnit) || !TeamFightInArea(player, scanGroup, UnitGetPosition(aiUnit), 10.0)) {
        return false;
    }

    return HeroIssueOrder (player, aiUnit, spellOrd, null, c_orderQueueAddToFront, null, null);
}

//---------------------------------------------------------------------------------------------
bool CrusaderFallingSword (int player, unit aiUnit, unitgroup scanGroup) {
    // Leap onto enemies damaging and slowing them, leap has a 2 second delay before landing
    order spellOrd;
    order attackOrd;
    point retreatPos;
    unit targetEnemy;
    Storm_AI_TargetQueryOptions query;

    spellOrd = StormHeroAICreateOrder(player, c_AB_CrusaderFallingSword, 0);
    if (!UnitOrderIsValid(aiUnit, spellOrd)) {
        return false;
    }
    
    // Jump towards your spawn for safety if you are low health
    if (HaveBeenAttackedRecently(aiUnit) && UnitGetPropertyFixed(aiUnit, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroes[player].lv_returnToSpawnHealth) {
        // Find position that is 6 units from current position towards the base
        retreatPos = libAIAI_gf_HeroAIGetRetreatPosition(player, 14.0, null); 

        return HeroIssueOrder (player, aiUnit, spellOrd, null, c_orderQueueReplace, null, retreatPos);
    }
    
    // Don't jump into battle if low health
    if (UnitGetPropertyFixed(aiUnit, c_unitPropLifePercent, c_unitPropCurrent) < libAIAI_gv_aIHeroes[player].lv_startOffensiveHealth) { 
        return false;
    }

    attackOrd = StormHeroAICreateOrder(player, c_Storm_AB_Attack, 0);
    if (!UnitOrderIsValid(aiUnit, attackOrd)) {
        return false;
    }
    
    // Find a target hero 
    query.lv_maxDistance = 14.0;
    query.lv_healthFactor  = c_Storm_AI_PreferUnhealthyTargets;
    query.lv_distanceFactor = c_Storm_AI_PreferCloserTargets;
    query.lv_maxHealthPercent = 70;
    query.lv_ignoreTargetsBehindGate = true;
    targetEnemy = FindBestHero(scanGroup, aiUnit, query);

    if (!UnitIsValid(targetEnemy)) { 
        return false;
    }    
         
    return HeroIssueOrder (player, aiUnit, spellOrd, attackOrd, c_orderQueueAddToFront, targetEnemy, null);
}

//---------------------------------------------------------------------------------------------
bool CrusaderBlessedShield (int player, unit aiUnit, unitgroup scanGroup) {
    // Throws a skill shot shield in a direction. Damages+Stuns the first enemy hit for 2 seconds, then can bounce to two more targets for half as much.    
    order spellOrd;
    order attackOrd;
    unit targetHero;
    fixed range;
    fixed healthReq;
    Storm_AI_TargetQueryOptions query;
    
    spellOrd = StormHeroAICreateOrder(player, c_AB_CrusaderBlessedShield, 0);
    if (!UnitOrderIsValid(aiUnit, spellOrd)) {
        return false;
    }

    attackOrd = StormHeroAICreateOrder(player, c_Storm_AB_Attack, 0);
    if (!UnitOrderIsValid(aiUnit, attackOrd)) {
        return false;
    }

    if (PlayerHasTalent(player, "CrusaderMasteryBlessedShieldRadiatingFaith")) {
        range = 14.0;
    }
    else {
        range = 11.0;
    }
    // only use in team fights or if there is a hero we can likely kill
    if (TeamFightInArea(player, scanGroup, UnitGetPosition(aiUnit), 10.0)) {
        healthReq = 100;
    }
    else {
        healthReq = 50;
    }

    // find weak heroes, we're not already in melee range with
    query.lv_maxDistance = range;
    query.lv_minDistance = 1.5;
    query.lv_healthFactor  = c_Storm_AI_PreferUnhealthyTargets;
    query.lv_maxHealthPercent = healthReq;
    query.lv_ignoreTargetsBehindGate = true;
    query.lv_lineOfSightRequired = c_Storm_AI_LOS_Required;
    targetHero = FindBestHero(scanGroup, aiUnit, query);    

    if (!UnitIsValid(targetHero)) {
        return false;
    }

    return HeroIssueOrder (player, aiUnit, spellOrd, attackOrd, c_orderQueueAddToFront, targetHero, UnitGetPosition(targetHero));
}

//---------------------------------------------------------------------------------------------
void AIThinkCrusader (int player, unit aiUnit, unitgroup scanGroup) {
    

    if (HeroSkipTactical(player, aiUnit)) {
        return;
    }

    if (UseDefensiveItem(player, aiUnit, scanGroup)) {
        return;
    }

    if (CrusaderIronSkin(player, aiUnit, scanGroup)) {
        return;
    }
    
    if (HeroSkipOffensiveTactical(player, aiUnit)) {
        return;
    }

    if (CrusaderShieldGlare(player, aiUnit, scanGroup)) {
        return;
    }

    if (CrusaderPunish(player, aiUnit, scanGroup)) {
        return;
    }

    if (CrusaderCondemn(player, aiUnit, scanGroup)) {
        return;
    }

    if (libAIAI_gf_HeroAIShouldUseUltimates(player) && CrusaderFallingSword(player, aiUnit, scanGroup)) {
        return;
    }

    if (libAIAI_gf_HeroAIShouldUseUltimates(player) && CrusaderBlessedShield(player, aiUnit, scanGroup)) {
        return;
    }
    
    if (UseOffensiveItem(player, aiUnit, scanGroup)) {
        return;
    }

    if (RevealCloakedEnemies(player, aiUnit, scanGroup)) {
        return;
    }
}
